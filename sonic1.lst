00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D30                            Art_Text_end:		even
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            ;VBlank
00000D30                            loc_B10:				; XREF: Vectors
00000D30 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D34 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D38 6700                       		beq.s	loc_B88
00000D3A 3039 00C0 0004             		move.w	($C00004).l,d0
00000D40 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D52 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D58 6700                       		beq.s	loc_B42
00000D5A 303C 0700                  		move.w	#$700,d0
00000D5E                            
00000D5E                            loc_B3E:
00000D5E 51C8 FFFE                  		dbf	d0,loc_B3E
00000D62                            
00000D62                            loc_B42:
00000D62 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D66 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D6C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D72 0240 003E                  		andi.w	#$3E,d0
00000D76 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D7E                            
00000D7E                            loc_B5E:				; XREF: loc_B88
00000D7E 4EB9 0000 0000             		jsr	sub_71B4C
00000D84                            
00000D84                            loc_B64:				; XREF: loc_D50
00000D84 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D88 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D8C 4E73                       		rte	
00000D8E                            ; ===========================================================================
00000D8E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D92 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D96 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D9E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DA6 0000                       		dc.w loc_E72-off_B6E
00000DA8                            ; ===========================================================================
00000DA8                            
00000DA8                            loc_B88:				; XREF: loc_B10; off_B6E
00000DA8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DAE 6700                       		beq.s	loc_B9A
00000DB0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DB6 6600 FFC6                  		bne.w	loc_B5E
00000DBA                            
00000DBA                            loc_B9A:
00000DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC4 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD0 6700                       		beq.s	loc_BBA
00000DD2 303C 0700                  		move.w	#$700,d0
00000DD6                            
00000DD6                            loc_BB6:
00000DD6 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDA                            
00000DDA                            loc_BBA:
00000DDA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE8                            
00000DE8                            loc_BC8:
00000DE8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF0 66F6                       		bne.s	loc_BC8
00000DF2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DF6 6600                       		bne.s	loc_BFE
00000DF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E04 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0A 3ABC 977F                  		move.w	#$977F,(a5)
00000E0E 3ABC C000                  		move.w	#$C000,(a5)
00000E12 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1C 6000                       		bra.s	loc_C22
00000E1E                            ; ===========================================================================
00000E1E                            
00000E1E                            loc_BFE:				; XREF: loc_BC8
00000E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E30 3ABC 977F                  		move.w	#$977F,(a5)
00000E34 3ABC C000                  		move.w	#$C000,(a5)
00000E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E42                            
00000E42                            loc_C22:				; XREF: loc_BC8
00000E42 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E46 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E4E 6000 FF2E                  		bra.w	loc_B5E
00000E52                            ; ===========================================================================
00000E52                            
00000E52                            loc_C32:				; XREF: off_B6E
00000E52 6100 0000                  		bsr.w	sub_106E
00000E56                            
00000E56                            loc_C36:				; XREF: off_B6E
00000E56 4A78 F614                  		tst.w	($FFFFF614).w
00000E5A 6700 0000                  		beq.w	locret_C42
00000E5E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E62                            
00000E62                            locret_C42:
00000E62 4E75                       		rts	
00000E64                            ; ===========================================================================
00000E64                            
00000E64                            loc_C44:				; XREF: off_B6E
00000E64 6100 0000                  		bsr.w	sub_106E
00000E68 6100 0000                  		bsr.w	sub_6886
00000E6C 6100 0000                  		bsr.w	sub_1642
00000E70 4A78 F614                  		tst.w	($FFFFF614).w
00000E74 6700 0000                  		beq.w	locret_C5C
00000E78 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7C                            
00000E7C                            locret_C5C:
00000E7C 4E75                       		rts	
00000E7E                            ; ===========================================================================
00000E7E                            
00000E7E                            loc_C5E:				; XREF: off_B6E
00000E7E 6100 0000                  		bsr.w	sub_106E
00000E82 4E75                       		rts	
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_C64:				; XREF: off_B6E
00000E84 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E8E                            
00000E8E                            loc_C6E:				; XREF: off_B6E
00000E8E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E96                            
00000E96                            loc_C76:
00000E96 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E9E 66F6                       		bne.s	loc_C76		; if not, branch
00000EA0 6100 0000                  		bsr.w	ReadJoypads
00000EA4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA8 6600                       		bne.s	loc_CB0
00000EAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EBC 3ABC 977F                  		move.w	#$977F,(a5)
00000EC0 3ABC C000                  		move.w	#$C000,(a5)
00000EC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECE 6000                       		bra.s	loc_CD4
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            loc_CB0:				; XREF: loc_C76
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EDC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC C000                  		move.w	#$C000,(a5)
00000EEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4                            
00000EF4                            loc_CD4:				; XREF: loc_C76
00000EF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F04 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0A 3ABC 977F                  		move.w	#$977F,(a5)
00000F0E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F12 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F22 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F28 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F2E 3ABC 977F                  		move.w	#$977F,(a5)
00000F32 3ABC 7800                  		move.w	#$7800,(a5)
00000F36 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F40 4A38 F767                  		tst.b	($FFFFF767).w
00000F44 6700                       		beq.s	loc_D50
00000F46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F4C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F52 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F58 3ABC 977F                  		move.w	#$977F,(a5)
00000F5C 3ABC 7000                  		move.w	#$7000,(a5)
00000F60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F70                            
00000F70                            loc_D50:
00000F70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F96 6400                       		bcc.s	Demo_Time
00000F98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F9E 588F                       		addq.l	#4,sp
00000FA0 6000 FDE2                  		bra.w	loc_B64
00000FA4                            
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            ; Subroutine to	run a demo for an amount of time
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            
00000FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA4                            
00000FA4                            
00000FA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FA8 4EB9 0000 0000             		jsr	AniArt_Load
00000FAE 4EB9 0000 0000             		jsr	HudUpdate
00000FB4 6100 0000                  		bsr.w	sub_165E
00000FB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC4                            
00000FC4                            Demo_TimeEnd:
00000FC4 4E75                       		rts	
00000FC6                            ; End of function Demo_Time
00000FC6                            
00000FC6                            ; ===========================================================================
00000FC6                            
00000FC6                            loc_DA6:				; XREF: off_B6E
00000FC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCE                            
00000FCE                            loc_DAE:
00000FCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000FD8 6100 0000                  		bsr.w	ReadJoypads
00000FDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FEE 3ABC 977F                  		move.w	#$977F,(a5)
00000FF2 3ABC C000                  		move.w	#$C000,(a5)
00000FF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001000 4BF9 00C0 0004             		lea	($C00004).l,a5
00001006 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001012 3ABC 977F                  		move.w	#$977F,(a5)
00001016 3ABC 7800                  		move.w	#$7800,(a5)
0000101A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001020 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001024 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001030 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001036 3ABC 977F                  		move.w	#$977F,(a5)
0000103A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001044 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001048 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001050 6100 0000                  		bsr.w	PalCycle_SS
00001054 4A38 F767                  		tst.b	($FFFFF767).w
00001058 6700                       		beq.s	loc_E64
0000105A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001060 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001066 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000106C 3ABC 977F                  		move.w	#$977F,(a5)
00001070 3ABC 7000                  		move.w	#$7000,(a5)
00001074 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000107E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001084                            
00001084                            loc_E64:
00001084 4A78 F614                  		tst.w	($FFFFF614).w
00001088 6700 0000                  		beq.w	locret_E70
0000108C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001090                            
00001090                            locret_E70:
00001090 4E75                       		rts	
00001092                            ; ===========================================================================
00001092                            
00001092                            loc_E72:				; XREF: off_B6E
00001092 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109A                            
0000109A                            loc_E7A:
0000109A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A2 66F6                       		bne.s	loc_E7A		; if not, branch
000010A4 6100 0000                  		bsr.w	ReadJoypads
000010A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000010AC 6600                       		bne.s	loc_EB4
000010AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C0 3ABC 977F                  		move.w	#$977F,(a5)
000010C4 3ABC C000                  		move.w	#$C000,(a5)
000010C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D2 6000                       		bra.s	loc_ED8
000010D4                            ; ===========================================================================
000010D4                            
000010D4                            loc_EB4:				; XREF: loc_E7A
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC C000                  		move.w	#$C000,(a5)
000010EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8                            
000010F8                            loc_ED8:				; XREF: loc_E7A
000010F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001102 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001108 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110E                            
0000110E                            loc_EEE:
0000110E 3ABC 977F                  		move.w	#$977F,(a5)
00001112 3ABC 7C00                  		move.w	#$7C00,(a5)
00001116 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000111C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001120 4BF9 00C0 0004             		lea	($C00004).l,a5
00001126 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000112C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001132 3ABC 977F                  		move.w	#$977F,(a5)
00001136 3ABC 7800                  		move.w	#$7800,(a5)
0000113A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001140 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001144 4A38 F767                  		tst.b	($FFFFF767).w
00001148 6700                       		beq.s	loc_F54
0000114A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001150 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001156 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000115C 3ABC 977F                  		move.w	#$977F,(a5)
00001160 3ABC 7000                  		move.w	#$7000,(a5)
00001164 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000116E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001174                            
00001174                            loc_F54:
00001174 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000117C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001182 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001188 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
0000118E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001194 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001198 4EB9 0000 0000             		jsr	AniArt_Load
0000119E 4EB9 0000 0000             		jsr	HudUpdate
000011A4 6100 0000                  		bsr.w	sub_1642
000011A8 4E75                       		rts	
000011AA                            ; ===========================================================================
000011AA                            
000011AA                            loc_F8A:				; XREF: off_B6E
000011AA 6100 0000                  		bsr.w	sub_106E
000011AE 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011B8 4E75                       		rts	
000011BA                            ; ===========================================================================
000011BA                            
000011BA                            loc_F9A:				; XREF: off_B6E
000011BA 6100 0000                  		bsr.w	sub_106E
000011BE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C2 6000 0000                  		bra.w	sub_1642
000011C6                            ; ===========================================================================
000011C6                            
000011C6                            loc_FA6:				; XREF: off_B6E
000011C6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011CE                            
000011CE                            loc_FAE:
000011CE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011D6 66F6                       		bne.s	loc_FAE		; if not, branch
000011D8 6100 0000                  		bsr.w	ReadJoypads
000011DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011E8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011EE 3ABC 977F                  		move.w	#$977F,(a5)
000011F2 3ABC C000                  		move.w	#$C000,(a5)
000011F6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011FC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001200 4BF9 00C0 0004             		lea	($C00004).l,a5
00001206 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000120C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001212 3ABC 977F                  		move.w	#$977F,(a5)
00001216 3ABC 7800                  		move.w	#$7800,(a5)
0000121A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001220 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001224 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001230 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001236 3ABC 977F                  		move.w	#$977F,(a5)
0000123A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000123E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001244 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001248 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001250 4A38 F767                  		tst.b	($FFFFF767).w
00001254 6700                       		beq.s	loc_1060
00001256 4BF9 00C0 0004             		lea	($C00004).l,a5
0000125C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001262 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001268 3ABC 977F                  		move.w	#$977F,(a5)
0000126C 3ABC 7000                  		move.w	#$7000,(a5)
00001270 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001276 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001280                            
00001280                            loc_1060:
00001280 4A78 F614                  		tst.w	($FFFFF614).w
00001284 6700 0000                  		beq.w	locret_106C
00001288 5378 F614                  		subq.w	#1,($FFFFF614).w
0000128C                            
0000128C                            locret_106C:
0000128C 4E75                       		rts	
0000128E                            
0000128E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000128E                            
0000128E                            
0000128E                            sub_106E:				; XREF: loc_C32; et al
0000128E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001296                            
00001296                            loc_1076:
00001296 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000129E 66F6                       		bne.s	loc_1076	; if not, branch
000012A0 6100 0000                  		bsr.w	ReadJoypads
000012A4 4A38 F64E                  		tst.b	($FFFFF64E).w
000012A8 6600                       		bne.s	loc_10B0
000012AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012B6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012BC 3ABC 977F                  		move.w	#$977F,(a5)
000012C0 3ABC C000                  		move.w	#$C000,(a5)
000012C4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012CE 6000                       		bra.s	loc_10D4
000012D0                            ; ===========================================================================
000012D0                            
000012D0                            loc_10B0:				; XREF: sub_106E
000012D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012DC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E2 3ABC 977F                  		move.w	#$977F,(a5)
000012E6 3ABC C000                  		move.w	#$C000,(a5)
000012EA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F4                            
000012F4                            loc_10D4:				; XREF: sub_106E
000012F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001300 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001306 3ABC 977F                  		move.w	#$977F,(a5)
0000130A 3ABC 7800                  		move.w	#$7800,(a5)
0000130E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001314 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001318 4BF9 00C0 0004             		lea	($C00004).l,a5
0000131E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001324 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132A 3ABC 977F                  		move.w	#$977F,(a5)
0000132E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001332 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001338 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000133C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001344 4E75                       		rts	
00001346                            ; End of function sub_106E
00001346                            
00001346                            ; ---------------------------------------------------------------------------
00001346                            ; Subroutine to	move pallets from the RAM to CRAM
00001346                            ; ---------------------------------------------------------------------------
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            PalToCRAM:
00001346 46FC 2700                  		move	#$2700,sr
0000134A 4A78 F644                  		tst.w	($FFFFF644).w
0000134E 6700                       		beq.s	locret_119C
00001350 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001356 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135A 43F9 00C0 0000             		lea	($C00000).l,a1
00001360 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001364 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000136C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B2 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013B6 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BA 6600                       		bne.s	loc_119E
000013BC                            
000013BC                            locret_119C:
000013BC 4E73                       		rte	
000013BE                            ; ===========================================================================
000013BE                            
000013BE                            loc_119E:				; XREF: PalToCRAM
000013BE 4238 F64F                  		clr.b	($FFFFF64F).w
000013C2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013C6 6100 FBDC                  		bsr.w	Demo_Time
000013CA 4EB9 0000 0000             		jsr	sub_71B4C
000013D0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D4 4E73                       		rte	
000013D6                            ; End of function PalToCRAM
000013D6                            
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            ; Subroutine to	initialise joypads
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            JoypadInit:				; XREF: GameClrRAM
000013D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013DE                            
000013DE                            Joypad_WaitZ80:
000013DE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013E6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013E8 7040                       		moveq	#$40,d0
000013EA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013F6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001404 4E75                       		rts	
00001406                            ; End of function JoypadInit
00001406                            
00001406                            ; ---------------------------------------------------------------------------
00001406                            ; Subroutine to	read joypad input, and send it to the RAM
00001406                            ; ---------------------------------------------------------------------------
00001406                            
00001406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001406                            
00001406                            
00001406                            ReadJoypads:
00001406 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140A 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001410 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001412 5449                       		addq.w	#2,a1		; do the second	joypad
00001414                            
00001414                            Joypad_Read:
00001414 12BC 0000                  		move.b	#0,(a1)
00001418 4E71                       		nop	
0000141A 4E71                       		nop	
0000141C 1011                       		move.b	(a1),d0
0000141E E508                       		lsl.b	#2,d0
00001420 0200 00C0                  		andi.b	#$C0,d0
00001424 12BC 0040                  		move.b	#$40,(a1)
00001428 4E71                       		nop	
0000142A 4E71                       		nop	
0000142C 1211                       		move.b	(a1),d1
0000142E 0201 003F                  		andi.b	#$3F,d1
00001432 8001                       		or.b	d1,d0
00001434 4600                       		not.b	d0
00001436 1210                       		move.b	(a0),d1
00001438 B101                       		eor.b	d0,d1
0000143A 10C0                       		move.b	d0,(a0)+
0000143C C200                       		and.b	d0,d1
0000143E 10C1                       		move.b	d1,(a0)+
00001440 4E75                       		rts	
00001442                            ; End of function ReadJoypads
00001442                            
00001442                            
00001442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001442                            
00001442                            
00001442                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001442 41F9 00C0 0004             		lea	($C00004).l,a0
00001448 43F9 00C0 0000             		lea	($C00000).l,a1
0000144E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001454 7E12                       		moveq	#$12,d7
00001456                            
00001456                            VDP_Loop:
00001456 309A                       		move.w	(a2)+,(a0)
00001458 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000145C                            
0000145C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001462 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001466 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000146C 7000                       		moveq	#0,d0
0000146E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001478 3E3C 003F                  		move.w	#$3F,d7
0000147C                            
0000147C                            VDP_ClrCRAM:
0000147C 3280                       		move.w	d0,(a1)
0000147E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001482                            
00001482 42B8 F616                  		clr.l	($FFFFF616).w
00001486 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148A 2F01                       		move.l	d1,-(sp)
0000148C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001492 3ABC 8F01                  		move.w	#$8F01,(a5)
00001496 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000149C 3ABC 9780                  		move.w	#$9780,(a5)
000014A0 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014A6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014AE                            
000014AE                            loc_128E:
000014AE 3215                       		move.w	(a5),d1
000014B0 0801 0001                  		btst	#1,d1
000014B4 66F8                       		bne.s	loc_128E
000014B6                            
000014B6 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BA 221F                       		move.l	(sp)+,d1
000014BC 4E75                       		rts	
000014BE                            ; End of function VDPSetupGame
000014BE                            
000014BE                            ; ===========================================================================
000014BE 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014C6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014CE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014D6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014DE 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E4                            
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            ; Subroutine to	clear the screen
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            
000014E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E4                            
000014E4                            
000014E4                            ClearScreen:
000014E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014EE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F4 3ABC 9780                  		move.w	#$9780,(a5)
000014F8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014FE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001506                            
00001506                            loc_12E6:
00001506 3215                       		move.w	(a5),d1
00001508 0801 0001                  		btst	#1,d1
0000150C 66F8                       		bne.s	loc_12E6
0000150E                            
0000150E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001512 4BF9 00C0 0004             		lea	($C00004).l,a5
00001518 3ABC 8F01                  		move.w	#$8F01,(a5)
0000151C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001522 3ABC 9780                  		move.w	#$9780,(a5)
00001526 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000152C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001534                            
00001534                            loc_1314:
00001534 3215                       		move.w	(a5),d1
00001536 0801 0001                  		btst	#1,d1
0000153A 66F8                       		bne.s	loc_1314
0000153C                            
0000153C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001540 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001548 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001550 43F8 F800                  		lea	($FFFFF800).w,a1
00001554 7000                       		moveq	#0,d0
00001556 323C 00A0                  		move.w	#$A0,d1
0000155A                            
0000155A                            loc_133A:
0000155A 22C0                       		move.l	d0,(a1)+
0000155C 51C9 FFFC                  		dbf	d1,loc_133A
00001560                            
00001560 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001564 7000                       		moveq	#0,d0
00001566 323C 0100                  		move.w	#$100,d1
0000156A                            
0000156A                            loc_134A:
0000156A 22C0                       		move.l	d0,(a1)+
0000156C 51C9 FFFC                  		dbf	d1,loc_134A
00001570 4E75                       		rts	
00001572                            ; End of function ClearScreen
00001572                            
00001572                            ; ---------------------------------------------------------------------------
00001572                            ; Subroutine to	load the sound driver
00001572                            ; ---------------------------------------------------------------------------
00001572                            
00001572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001572                            
00001572                            
00001572                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001572 4E71                       		nop	
00001574 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000157C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001584 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158A 43F9 00A0 0000             		lea	($A00000).l,a1
00001590 6100 0000                  		bsr.w	KosDec		; decompress
00001594 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000159C 4E71                       		nop	
0000159E 4E71                       		nop	
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015AC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B4 4E75                       		rts	
000015B6                            ; End of function SoundDriverLoad
000015B6                            
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            ; Subroutine to	play a sound or	music track
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            
000015B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B6                            
000015B6                            
000015B6                            PlaySound:
000015B6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BA 4E75                       		rts	
000015BC                            ; End of function PlaySound
000015BC                            
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            ; Subroutine to	play a special sound/music (E0-E4)
000015BC                            ;
000015BC                            ; E0 - Fade out
000015BC                            ; E1 - Sega
000015BC                            ; E2 - Speed up
000015BC                            ; E3 - Normal speed
000015BC                            ; E4 - Stop
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            
000015BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BC                            
000015BC                            
000015BC                            PlaySound_Special:
000015BC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C0 4E75                       		rts	
000015C2                            ; End of function PlaySound_Special
000015C2                            
000015C2                            ; ===========================================================================
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            ; Unused sound/music subroutine
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            
000015C2                            PlaySound_Unk:
000015C2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015C6 4E75                       		rts	
000015C8                            
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            ; Subroutine to	pause the game
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            
000015C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C8                            
000015C8                            
000015C8                            PauseGame:				; XREF: Level_MainLoop; et al
000015C8 4E71                       		nop	
000015CA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015CE 6700                       		beq.s	Unpause		; if not, branch
000015D0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D4 6600                       		bne.s	loc_13BE	; if yes, branch
000015D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015DC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015DE                            
000015DE                            loc_13BE:
000015DE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EA                            
000015EA                            loc_13CA:
000015EA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F0 6100 0000                  		bsr.w	DelayProgram
000015F4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015F8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001600 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001602 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001608 4E71                       		nop	
0000160A 6000                       		bra.s	loc_1404
0000160C                            ; ===========================================================================
0000160C                            
0000160C                            Pause_ChkBC:				; XREF: PauseGame
0000160C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001612 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001614 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000161C                            
0000161C                            Pause_ChkStart:				; XREF: PauseGame
0000161C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001622 67C6                       		beq.s	loc_13CA	; if not, branch
00001624                            
00001624                            loc_1404:				; XREF: PauseGame
00001624 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162A                            
0000162A                            Unpause:				; XREF: PauseGame
0000162A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001630                            
00001630                            Pause_DoNothing:			; XREF: PauseGame
00001630 4E75                       		rts	
00001632                            ; ===========================================================================
00001632                            
00001632                            Pause_SlowMo:				; XREF: PauseGame
00001632 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001638 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000163E 4E75                       		rts	
00001640                            ; End of function PauseGame
00001640                            
00001640                            ; ---------------------------------------------------------------------------
00001640                            ; Subroutine to	display	patterns via the VDP
00001640                            ; ---------------------------------------------------------------------------
00001640                            
00001640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001640                            
00001640                            
00001640                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001640 4DF9 00C0 0000             		lea	($C00000).l,a6
00001646 283C 0080 0000             		move.l	#$800000,d4
0000164C                            
0000164C                            loc_142C:
0000164C 2D40 0004                  		move.l	d0,4(a6)
00001650 3601                       		move.w	d1,d3
00001652                            
00001652                            loc_1432:
00001652 3C99                       		move.w	(a1)+,(a6)
00001654 51CB FFFC                  		dbf	d3,loc_1432
00001658 D084                       		add.l	d4,d0
0000165A 51CA FFF0                  		dbf	d2,loc_142C
0000165E 4E75                       		rts	
00001660                            ; End of function ShowVDPGraphics
00001660                            
00001660                            ; ---------------------------------------------------------------------------
00001660                            ; Nemesis decompression	algorithm
00001660                            ; ---------------------------------------------------------------------------
00001660                            
00001660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001660                            
00001660                            
00001660                            NemDec:
00001660 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001664 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166A 49F9 00C0 0000             		lea	($C00000).l,a4
00001670 6000                       		bra.s	loc_145C
00001672                            ; ===========================================================================
00001672 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001676 47F9 0000 0000             		lea	(loc_1518).l,a3
0000167C                            
0000167C                            loc_145C:				; XREF: NemDec
0000167C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001680 3418                       		move.w	(a0)+,d2
00001682 E34A                       		lsl.w	#1,d2
00001684 6400                       		bcc.s	loc_146A
00001686 D6FC 000A                  		adda.w	#$A,a3
0000168A                            
0000168A                            loc_146A:
0000168A E54A                       		lsl.w	#2,d2
0000168C 3A42                       		movea.w	d2,a5
0000168E 7608                       		moveq	#8,d3
00001690 7400                       		moveq	#0,d2
00001692 7800                       		moveq	#0,d4
00001694 6100 0000                  		bsr.w	NemDec4
00001698 1A18                       		move.b	(a0)+,d5
0000169A E145                       		asl.w	#8,d5
0000169C 1A18                       		move.b	(a0)+,d5
0000169E 3C3C 0010                  		move.w	#$10,d6
000016A2 6100                       		bsr.s	NemDec2
000016A4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016A8 4E75                       		rts	
000016AA                            ; End of function NemDec
000016AA                            
000016AA                            
000016AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AA                            
000016AA                            
000016AA                            NemDec2:				; XREF: NemDec
000016AA 3E06                       		move.w	d6,d7
000016AC 5147                       		subq.w	#8,d7
000016AE 3205                       		move.w	d5,d1
000016B0 EE69                       		lsr.w	d7,d1
000016B2 0C01 00FC                  		cmpi.b	#-4,d1
000016B6 6400                       		bcc.s	loc_14D6
000016B8 0241 00FF                  		andi.w	#$FF,d1
000016BC D241                       		add.w	d1,d1
000016BE 1031 1000                  		move.b	(a1,d1.w),d0
000016C2 4880                       		ext.w	d0
000016C4 9C40                       		sub.w	d0,d6
000016C6 0C46 0009                  		cmpi.w	#9,d6
000016CA 6400                       		bcc.s	loc_14B2
000016CC 5046                       		addq.w	#8,d6
000016CE E145                       		asl.w	#8,d5
000016D0 1A18                       		move.b	(a0)+,d5
000016D2                            
000016D2                            loc_14B2:
000016D2 1231 1001                  		move.b	1(a1,d1.w),d1
000016D6 3001                       		move.w	d1,d0
000016D8 0241 000F                  		andi.w	#$F,d1
000016DC 0240 00F0                  		andi.w	#$F0,d0
000016E0                            
000016E0                            loc_14C0:				; XREF: NemDec3
000016E0 E848                       		lsr.w	#4,d0
000016E2                            
000016E2                            loc_14C2:				; XREF: NemDec3
000016E2 E98C                       		lsl.l	#4,d4
000016E4 8801                       		or.b	d1,d4
000016E6 5343                       		subq.w	#1,d3
000016E8 6600                       		bne.s	loc_14D0
000016EA 4ED3                       		jmp	(a3)
000016EC                            ; End of function NemDec2
000016EC                            
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            NemDec3:				; XREF: loc_1502
000016EC 7800                       		moveq	#0,d4
000016EE 7608                       		moveq	#8,d3
000016F0                            
000016F0                            loc_14D0:				; XREF: NemDec2
000016F0 51C8 FFF0                  		dbf	d0,loc_14C2
000016F4 60B4                       		bra.s	NemDec2
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            loc_14D6:				; XREF: NemDec2
000016F6 5D46                       		subq.w	#6,d6
000016F8 0C46 0009                  		cmpi.w	#9,d6
000016FC 6400                       		bcc.s	loc_14E4
000016FE 5046                       		addq.w	#8,d6
00001700 E145                       		asl.w	#8,d5
00001702 1A18                       		move.b	(a0)+,d5
00001704                            
00001704                            loc_14E4:				; XREF: NemDec3
00001704 5F46                       		subq.w	#7,d6
00001706 3205                       		move.w	d5,d1
00001708 EC69                       		lsr.w	d6,d1
0000170A 3001                       		move.w	d1,d0
0000170C 0241 000F                  		andi.w	#$F,d1
00001710 0240 0070                  		andi.w	#$70,d0
00001714 0C46 0009                  		cmpi.w	#9,d6
00001718 64C6                       		bcc.s	loc_14C0
0000171A 5046                       		addq.w	#8,d6
0000171C E145                       		asl.w	#8,d5
0000171E 1A18                       		move.b	(a0)+,d5
00001720 60BE                       		bra.s	loc_14C0
00001722                            ; End of function NemDec3
00001722                            
00001722                            ; ===========================================================================
00001722                            
00001722                            loc_1502:				; XREF: NemDec
00001722 2884                       		move.l	d4,(a4)
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66C2                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            ; ===========================================================================
0000172C B982                       		eor.l	d4,d2
0000172E 2882                       		move.l	d2,(a4)
00001730 534D                       		subq.w	#1,a5
00001732 380D                       		move.w	a5,d4
00001734 66B6                       		bne.s	NemDec3
00001736 4E75                       		rts	
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1518:				; XREF: NemDec
00001738 28C4                       		move.l	d4,(a4)+
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66AC                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 28C2                       		move.l	d2,(a4)+
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66A0                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            NemDec4:				; XREF: NemDec
0000174E 1018                       		move.b	(a0)+,d0
00001750                            
00001750                            loc_1530:
00001750 0C00 00FF                  		cmpi.b	#-1,d0
00001754 6600                       		bne.s	loc_1538
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758                            
00001758                            loc_1538:				; XREF: NemDec4
00001758 3E00                       		move.w	d0,d7
0000175A                            
0000175A                            loc_153A:
0000175A 1018                       		move.b	(a0)+,d0
0000175C 0C00 0080                  		cmpi.b	#$80,d0
00001760 64EE                       		bcc.s	loc_1530
00001762 1200                       		move.b	d0,d1
00001764 0247 000F                  		andi.w	#$F,d7
00001768 0241 0070                  		andi.w	#$70,d1
0000176C 8E41                       		or.w	d1,d7
0000176E 0240 000F                  		andi.w	#$F,d0
00001772 1200                       		move.b	d0,d1
00001774 E149                       		lsl.w	#8,d1
00001776 8E41                       		or.w	d1,d7
00001778 7208                       		moveq	#8,d1
0000177A 9240                       		sub.w	d0,d1
0000177C 6600                       		bne.s	loc_1568
0000177E 1018                       		move.b	(a0)+,d0
00001780 D040                       		add.w	d0,d0
00001782 3387 0000                  		move.w	d7,(a1,d0.w)
00001786 60D2                       		bra.s	loc_153A
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1568:				; XREF: NemDec4
00001788 1018                       		move.b	(a0)+,d0
0000178A E368                       		lsl.w	d1,d0
0000178C D040                       		add.w	d0,d0
0000178E 7A01                       		moveq	#1,d5
00001790 E36D                       		lsl.w	d1,d5
00001792 5345                       		subq.w	#1,d5
00001794                            
00001794                            loc_1574:
00001794 3387 0000                  		move.w	d7,(a1,d0.w)
00001798 5440                       		addq.w	#2,d0
0000179A 51CD FFF8                  		dbf	d5,loc_1574
0000179E 60BA                       		bra.s	loc_153A
000017A0                            ; End of function NemDec4
000017A0                            
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            ; Subroutine to	load pattern load cues
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            
000017A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A0                            
000017A0                            
000017A0                            LoadPLC:
000017A0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AA D040                       		add.w	d0,d0
000017AC 3031 0000                  		move.w	(a1,d0.w),d0
000017B0 43F1 0000                  		lea	(a1,d0.w),a1
000017B4 45F8 F680                  		lea	($FFFFF680).w,a2
000017B8                            
000017B8                            loc_1598:
000017B8 4A92                       		tst.l	(a2)
000017BA 6700                       		beq.s	loc_15A0
000017BC 5C4A                       		addq.w	#6,a2
000017BE 60F8                       		bra.s	loc_1598
000017C0                            ; ===========================================================================
000017C0                            
000017C0                            loc_15A0:				; XREF: LoadPLC
000017C0 3019                       		move.w	(a1)+,d0
000017C2 6B00                       		bmi.s	loc_15AC
000017C4                            
000017C4                            loc_15A4:
000017C4 24D9                       		move.l	(a1)+,(a2)+
000017C6 34D9                       		move.w	(a1)+,(a2)+
000017C8 51C8 FFFA                  		dbf	d0,loc_15A4
000017CC                            
000017CC                            loc_15AC:
000017CC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D0 4E75                       		rts	
000017D2                            ; End of function LoadPLC
000017D2                            
000017D2                            
000017D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D2                            
000017D2                            
000017D2                            LoadPLC2:
000017D2 48E7 0060                  		movem.l	a1-a2,-(sp)
000017D6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017DC D040                       		add.w	d0,d0
000017DE 3031 0000                  		move.w	(a1,d0.w),d0
000017E2 43F1 0000                  		lea	(a1,d0.w),a1
000017E6 6100                       		bsr.s	ClearPLC
000017E8 45F8 F680                  		lea	($FFFFF680).w,a2
000017EC 3019                       		move.w	(a1)+,d0
000017EE 6B00                       		bmi.s	loc_15D8
000017F0                            
000017F0                            loc_15D0:
000017F0 24D9                       		move.l	(a1)+,(a2)+
000017F2 34D9                       		move.w	(a1)+,(a2)+
000017F4 51C8 FFFA                  		dbf	d0,loc_15D0
000017F8                            
000017F8                            loc_15D8:
000017F8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017FC 4E75                       		rts	
000017FE                            ; End of function LoadPLC2
000017FE                            
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            ; Subroutine to	clear the pattern load cues
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            
000017FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FE                            
000017FE                            
000017FE                            ClearPLC:				; XREF: LoadPLC2
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 701F                       		moveq	#$1F,d0
00001804                            
00001804                            ClearPLC_Loop:
00001804 429A                       		clr.l	(a2)+
00001806 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180A 4E75                       		rts	
0000180C                            ; End of function ClearPLC
0000180C                            
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            ; Subroutine to	use graphics listed in a pattern load cue
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            
0000180C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000180C                            
0000180C                            
0000180C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000180C 4AB8 F680                  		tst.l	($FFFFF680).w
00001810 6700                       		beq.s	locret_1640
00001812 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001816 6600                       		bne.s	locret_1640
00001818 2078 F680                  		movea.l	($FFFFF680).w,a0
0000181C 47F9 0000 1722             		lea	(loc_1502).l,a3
00001822 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001826 3418                       		move.w	(a0)+,d2
00001828 6A00                       		bpl.s	loc_160E
0000182A D6FC 000A                  		adda.w	#$A,a3
0000182E                            
0000182E                            loc_160E:
0000182E 0242 7FFF                  		andi.w	#$7FFF,d2
00001832 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001836 6100 FF16                  		bsr.w	NemDec4
0000183A 1A18                       		move.b	(a0)+,d5
0000183C E145                       		asl.w	#8,d5
0000183E 1A18                       		move.b	(a0)+,d5
00001840 7C10                       		moveq	#$10,d6
00001842 7000                       		moveq	#0,d0
00001844 21C8 F680                  		move.l	a0,($FFFFF680).w
00001848 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000184C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001850 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001854 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001858 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000185C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001860                            
00001860                            locret_1640:
00001860 4E75                       		rts	
00001862                            ; End of function RunPLC_RAM
00001862                            
00001862                            
00001862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001862                            
00001862                            
00001862                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001862 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001866 6700 0000                  		beq.w	locret_16DA
0000186A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001870 7000                       		moveq	#0,d0
00001872 3038 F684                  		move.w	($FFFFF684).w,d0
00001876 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000187C 6000                       		bra.s	loc_1676
0000187E                            ; End of function sub_1642
0000187E                            
0000187E                            
0000187E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187E                            
0000187E                            
0000187E                            sub_165E:				; XREF: Demo_Time
0000187E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001882 6700                       		beq.s	locret_16DA
00001884 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188A 7000                       		moveq	#0,d0
0000188C 3038 F684                  		move.w	($FFFFF684).w,d0
00001890 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001896                            
00001896                            loc_1676:				; XREF: sub_1642
00001896 49F9 00C0 0004             		lea	($C00004).l,a4
0000189C E588                       		lsl.l	#2,d0
0000189E E448                       		lsr.w	#2,d0
000018A0 0040 4000                  		ori.w	#$4000,d0
000018A4 4840                       		swap	d0
000018A6 2880                       		move.l	d0,(a4)
000018A8 594C                       		subq.w	#4,a4
000018AA 2078 F680                  		movea.l	($FFFFF680).w,a0
000018AE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018B6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018BE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CA                            
000018CA                            loc_16AA:				; XREF: sub_165E
000018CA 3A7C 0008                  		movea.w	#8,a5
000018CE 6100 FE1C                  		bsr.w	NemDec3
000018D2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018D6 6700                       		beq.s	loc_16DC
000018D8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018DC 66EC                       		bne.s	loc_16AA
000018DE 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018EE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FA                            
000018FA                            locret_16DA:				; XREF: sub_1642
000018FA 4E75                       		rts	
000018FC                            ; ===========================================================================
000018FC                            
000018FC                            loc_16DC:				; XREF: sub_165E
000018FC 41F8 F680                  		lea	($FFFFF680).w,a0
00001900 7015                       		moveq	#$15,d0
00001902                            
00001902                            loc_16E2:				; XREF: sub_165E
00001902 20E8 0006                  		move.l	6(a0),(a0)+
00001906 51C8 FFFA                  		dbf	d0,loc_16E2
0000190A 4E75                       		rts	
0000190C                            ; End of function sub_165E
0000190C                            
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            ; Subroutine to	execute	the pattern load cue
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            
0000190C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000190C                            
0000190C                            
0000190C                            RunPLC_ROM:
0000190C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001912 D040                       		add.w	d0,d0
00001914 3031 0000                  		move.w	(a1,d0.w),d0
00001918 43F1 0000                  		lea	(a1,d0.w),a1
0000191C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000191E                            
0000191E                            RunPLC_Loop:
0000191E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001920 7000                       		moveq	#0,d0
00001922 3019                       		move.w	(a1)+,d0	; get VRAM address
00001924 E588                       		lsl.l	#2,d0		; divide address by $20
00001926 E448                       		lsr.w	#2,d0
00001928 0040 4000                  		ori.w	#$4000,d0
0000192C 4840                       		swap	d0
0000192E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001934 6100 FD2A                  		bsr.w	NemDec		; decompress
00001938 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000193C 4E75                       		rts	
0000193E                            ; End of function RunPLC_ROM
0000193E                            
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            ; Enigma decompression algorithm
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            
0000193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193E                            
0000193E                            
0000193E                            EniDec:
0000193E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001942 3640                       		movea.w	d0,a3
00001944 1018                       		move.b	(a0)+,d0
00001946 4880                       		ext.w	d0
00001948 3A40                       		movea.w	d0,a5
0000194A 1818                       		move.b	(a0)+,d4
0000194C E70C                       		lsl.b	#3,d4
0000194E 3458                       		movea.w	(a0)+,a2
00001950 D4CB                       		adda.w	a3,a2
00001952 3858                       		movea.w	(a0)+,a4
00001954 D8CB                       		adda.w	a3,a4
00001956 1A18                       		move.b	(a0)+,d5
00001958 E145                       		asl.w	#8,d5
0000195A 1A18                       		move.b	(a0)+,d5
0000195C 7C10                       		moveq	#$10,d6
0000195E                            
0000195E                            loc_173E:				; XREF: loc_1768
0000195E 7007                       		moveq	#7,d0
00001960 3E06                       		move.w	d6,d7
00001962 9E40                       		sub.w	d0,d7
00001964 3205                       		move.w	d5,d1
00001966 EE69                       		lsr.w	d7,d1
00001968 0241 007F                  		andi.w	#$7F,d1
0000196C 3401                       		move.w	d1,d2
0000196E 0C41 0040                  		cmpi.w	#$40,d1
00001972 6400                       		bcc.s	loc_1758
00001974 7006                       		moveq	#6,d0
00001976 E24A                       		lsr.w	#1,d2
00001978                            
00001978                            loc_1758:
00001978 6100 0000                  		bsr.w	sub_188C
0000197C 0242 000F                  		andi.w	#$F,d2
00001980 E849                       		lsr.w	#4,d1
00001982 D241                       		add.w	d1,d1
00001984 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001988                            ; End of function EniDec
00001988                            
00001988                            ; ===========================================================================
00001988                            
00001988                            loc_1768:				; XREF: loc_17B4
00001988 32CA                       		move.w	a2,(a1)+
0000198A 524A                       		addq.w	#1,a2
0000198C 51CA FFFA                  		dbf	d2,loc_1768
00001990 60CC                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1772:				; XREF: loc_17B4
00001992 32CC                       		move.w	a4,(a1)+
00001994 51CA FFFC                  		dbf	d2,loc_1772
00001998 60C4                       		bra.s	loc_173E
0000199A                            ; ===========================================================================
0000199A                            
0000199A                            loc_177A:				; XREF: loc_17B4
0000199A 6100 0000                  		bsr.w	loc_17DC
0000199E                            
0000199E                            loc_177E:
0000199E 32C1                       		move.w	d1,(a1)+
000019A0 51CA FFFC                  		dbf	d2,loc_177E
000019A4 60B8                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_1786:				; XREF: loc_17B4
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA                            
000019AA                            loc_178A:
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 5241                       		addq.w	#1,d1
000019AE 51CA FFFA                  		dbf	d2,loc_178A
000019B2 60AA                       		bra.s	loc_173E
000019B4                            ; ===========================================================================
000019B4                            
000019B4                            loc_1794:				; XREF: loc_17B4
000019B4 6100 0000                  		bsr.w	loc_17DC
000019B8                            
000019B8                            loc_1798:
000019B8 32C1                       		move.w	d1,(a1)+
000019BA 5341                       		subq.w	#1,d1
000019BC 51CA FFFA                  		dbf	d2,loc_1798
000019C0 609C                       		bra.s	loc_173E
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17A2:				; XREF: loc_17B4
000019C2 0C42 000F                  		cmpi.w	#$F,d2
000019C6 6700                       		beq.s	loc_17C4
000019C8                            
000019C8                            loc_17A8:
000019C8 6100 0000                  		bsr.w	loc_17DC
000019CC 32C1                       		move.w	d1,(a1)+
000019CE 51CA FFF8                  		dbf	d2,loc_17A8
000019D2 608A                       		bra.s	loc_173E
000019D4                            ; ===========================================================================
000019D4                            
000019D4                            loc_17B4:				; XREF: EniDec
000019D4 60B2                       		bra.s	loc_1768
000019D6                            ; ===========================================================================
000019D6 60B0                       		bra.s	loc_1768
000019D8                            ; ===========================================================================
000019D8 60B8                       		bra.s	loc_1772
000019DA                            ; ===========================================================================
000019DA 60B6                       		bra.s	loc_1772
000019DC                            ; ===========================================================================
000019DC 60BC                       		bra.s	loc_177A
000019DE                            ; ===========================================================================
000019DE 60C6                       		bra.s	loc_1786
000019E0                            ; ===========================================================================
000019E0 60D2                       		bra.s	loc_1794
000019E2                            ; ===========================================================================
000019E2 60DE                       		bra.s	loc_17A2
000019E4                            ; ===========================================================================
000019E4                            
000019E4                            loc_17C4:				; XREF: loc_17A2
000019E4 5348                       		subq.w	#1,a0
000019E6 0C46 0010                  		cmpi.w	#$10,d6
000019EA 6600                       		bne.s	loc_17CE
000019EC 5348                       		subq.w	#1,a0
000019EE                            
000019EE                            loc_17CE:
000019EE 3008                       		move.w	a0,d0
000019F0 E248                       		lsr.w	#1,d0
000019F2 6400                       		bcc.s	loc_17D6
000019F4 5248                       		addq.w	#1,a0
000019F6                            
000019F6                            loc_17D6:
000019F6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FA 4E75                       		rts	
000019FC                            ; ===========================================================================
000019FC                            
000019FC                            loc_17DC:				; XREF: loc_17A2
000019FC 360B                       		move.w	a3,d3
000019FE 1204                       		move.b	d4,d1
00001A00 D201                       		add.b	d1,d1
00001A02 6400                       		bcc.s	loc_17EE
00001A04 5346                       		subq.w	#1,d6
00001A06 0D05                       		btst	d6,d5
00001A08 6700                       		beq.s	loc_17EE
00001A0A 0043 8000                  		ori.w	#-$8000,d3
00001A0E                            
00001A0E                            loc_17EE:
00001A0E D201                       		add.b	d1,d1
00001A10 6400                       		bcc.s	loc_17FC
00001A12 5346                       		subq.w	#1,d6
00001A14 0D05                       		btst	d6,d5
00001A16 6700                       		beq.s	loc_17FC
00001A18 0643 4000                  		addi.w	#$4000,d3
00001A1C                            
00001A1C                            loc_17FC:
00001A1C D201                       		add.b	d1,d1
00001A1E 6400                       		bcc.s	loc_180A
00001A20 5346                       		subq.w	#1,d6
00001A22 0D05                       		btst	d6,d5
00001A24 6700                       		beq.s	loc_180A
00001A26 0643 2000                  		addi.w	#$2000,d3
00001A2A                            
00001A2A                            loc_180A:
00001A2A D201                       		add.b	d1,d1
00001A2C 6400                       		bcc.s	loc_1818
00001A2E 5346                       		subq.w	#1,d6
00001A30 0D05                       		btst	d6,d5
00001A32 6700                       		beq.s	loc_1818
00001A34 0043 1000                  		ori.w	#$1000,d3
00001A38                            
00001A38                            loc_1818:
00001A38 D201                       		add.b	d1,d1
00001A3A 6400                       		bcc.s	loc_1826
00001A3C 5346                       		subq.w	#1,d6
00001A3E 0D05                       		btst	d6,d5
00001A40 6700                       		beq.s	loc_1826
00001A42 0043 0800                  		ori.w	#$800,d3
00001A46                            
00001A46                            loc_1826:
00001A46 3205                       		move.w	d5,d1
00001A48 3E06                       		move.w	d6,d7
00001A4A 9E4D                       		sub.w	a5,d7
00001A4C 6400                       		bcc.s	loc_1856
00001A4E 3C07                       		move.w	d7,d6
00001A50 0646 0010                  		addi.w	#$10,d6
00001A54 4447                       		neg.w	d7
00001A56 EF69                       		lsl.w	d7,d1
00001A58 1A10                       		move.b	(a0),d5
00001A5A EF3D                       		rol.b	d7,d5
00001A5C DE47                       		add.w	d7,d7
00001A5E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A62 D245                       		add.w	d5,d1
00001A64                            
00001A64                            loc_1844:				; XREF: loc_1868
00001A64 300D                       		move.w	a5,d0
00001A66 D040                       		add.w	d0,d0
00001A68 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A6C D243                       		add.w	d3,d1
00001A6E 1A18                       		move.b	(a0)+,d5
00001A70 E14D                       		lsl.w	#8,d5
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 4E75                       		rts	
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1856:				; XREF: loc_1826
00001A76 6700                       		beq.s	loc_1868
00001A78 EE69                       		lsr.w	d7,d1
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 300D                       		move.w	a5,d0
00001A86 6000                       		bra.s	sub_188C
00001A88                            ; ===========================================================================
00001A88                            
00001A88                            loc_1868:				; XREF: loc_1856
00001A88 7C10                       		moveq	#$10,d6
00001A8A                            
00001A8A                            loc_186A:
00001A8A 60D8                       		bra.s	loc_1844
00001A8C                            ; ===========================================================================
00001A8C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            sub_188C:				; XREF: EniDec
00001AAC 9C40                       		sub.w	d0,d6
00001AAE 0C46 0009                  		cmpi.w	#9,d6
00001AB2 6400                       		bcc.s	locret_189A
00001AB4 5046                       		addq.w	#8,d6
00001AB6 E145                       		asl.w	#8,d5
00001AB8 1A18                       		move.b	(a0)+,d5
00001ABA                            
00001ABA                            locret_189A:
00001ABA 4E75                       		rts	
00001ABC                            ; End of function sub_188C
00001ABC                            
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            ; Kosinski decompression algorithm
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            
00001ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ABC                            
00001ABC                            
00001ABC                            KosDec:
00001ABC                            
00001ABC =FFFFFFFE                  var_2		= -2
00001ABC =FFFFFFFF                  var_1		= -1
00001ABC                            
00001ABC 558F                       		subq.l	#2,sp
00001ABE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC2 1E98                       		move.b	(a0)+,(sp)
00001AC4 3A17                       		move.w	(sp),d5
00001AC6 780F                       		moveq	#$F,d4
00001AC8                            
00001AC8                            loc_18A8:
00001AC8 E24D                       		lsr.w	#1,d5
00001ACA 40C6                       		move	sr,d6
00001ACC 51CC 0000                  		dbf	d4,loc_18BA
00001AD0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD4 1E98                       		move.b	(a0)+,(sp)
00001AD6 3A17                       		move.w	(sp),d5
00001AD8 780F                       		moveq	#$F,d4
00001ADA                            
00001ADA                            loc_18BA:
00001ADA 44C6                       		move	d6,ccr
00001ADC 6400                       		bcc.s	loc_18C2
00001ADE 12D8                       		move.b	(a0)+,(a1)+
00001AE0 60E6                       		bra.s	loc_18A8
00001AE2                            ; ===========================================================================
00001AE2                            
00001AE2                            loc_18C2:				; XREF: KosDec
00001AE2 7600                       		moveq	#0,d3
00001AE4 E24D                       		lsr.w	#1,d5
00001AE6 40C6                       		move	sr,d6
00001AE8 51CC 0000                  		dbf	d4,loc_18D6
00001AEC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF0 1E98                       		move.b	(a0)+,(sp)
00001AF2 3A17                       		move.w	(sp),d5
00001AF4 780F                       		moveq	#$F,d4
00001AF6                            
00001AF6                            loc_18D6:
00001AF6 44C6                       		move	d6,ccr
00001AF8 6500                       		bcs.s	loc_1906
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 51CC 0000                  		dbf	d4,loc_18EA
00001B00 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B04 1E98                       		move.b	(a0)+,(sp)
00001B06 3A17                       		move.w	(sp),d5
00001B08 780F                       		moveq	#$F,d4
00001B0A                            
00001B0A                            loc_18EA:
00001B0A E353                       		roxl.w	#1,d3
00001B0C E24D                       		lsr.w	#1,d5
00001B0E 51CC 0000                  		dbf	d4,loc_18FC
00001B12 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B16 1E98                       		move.b	(a0)+,(sp)
00001B18 3A17                       		move.w	(sp),d5
00001B1A 780F                       		moveq	#$F,d4
00001B1C                            
00001B1C                            loc_18FC:
00001B1C E353                       		roxl.w	#1,d3
00001B1E 5243                       		addq.w	#1,d3
00001B20 74FF                       		moveq	#-1,d2
00001B22 1418                       		move.b	(a0)+,d2
00001B24 6000                       		bra.s	loc_191C
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1906:				; XREF: loc_18C2
00001B26 1018                       		move.b	(a0)+,d0
00001B28 1218                       		move.b	(a0)+,d1
00001B2A 74FF                       		moveq	#-1,d2
00001B2C 1401                       		move.b	d1,d2
00001B2E EB4A                       		lsl.w	#5,d2
00001B30 1400                       		move.b	d0,d2
00001B32 0241 0007                  		andi.w	#7,d1
00001B36 6700                       		beq.s	loc_1928
00001B38 1601                       		move.b	d1,d3
00001B3A 5243                       		addq.w	#1,d3
00001B3C                            
00001B3C                            loc_191C:
00001B3C 1031 2000                  		move.b	(a1,d2.w),d0
00001B40 12C0                       		move.b	d0,(a1)+
00001B42 51CB FFF8                  		dbf	d3,loc_191C
00001B46 6080                       		bra.s	loc_18A8
00001B48                            ; ===========================================================================
00001B48                            
00001B48                            loc_1928:				; XREF: loc_1906
00001B48 1218                       		move.b	(a0)+,d1
00001B4A 6700                       		beq.s	loc_1938
00001B4C 0C01 0001                  		cmpi.b	#1,d1
00001B50 6700 FF76                  		beq.w	loc_18A8
00001B54 1601                       		move.b	d1,d3
00001B56 60E4                       		bra.s	loc_191C
00001B58                            ; ===========================================================================
00001B58                            
00001B58                            loc_1938:				; XREF: loc_1928
00001B58 548F                       		addq.l	#2,sp
00001B5A 4E75                       		rts	
00001B5C                            ; End of function KosDec
00001B5C                            
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            ; Pallet cycling routine loading subroutine
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B5C 7400                       		moveq	#0,d2
00001B5E 7000                       		moveq	#0,d0
00001B60 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B64 D040                       		add.w	d0,d0		; multiply by 2
00001B66 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B6E                            ; End of function PalCycle_Load
00001B6E                            
00001B6E                            ; ===========================================================================
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E                            ; Pallet cycling routines
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B70 0000                       		dc.w PalCycle_LZ-PalCycle
00001B72 0000                       		dc.w PalCycle_MZ-PalCycle
00001B74 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B76 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B7C                            
00001B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B7C                            
00001B7C                            
00001B7C                            PalCycle_Title:				; XREF: TitleScreen
00001B7C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B82 6000                       		bra.s	loc_196A
00001B84                            ; ===========================================================================
00001B84                            
00001B84                            PalCycle_GHZ:				; XREF: PalCycle
00001B84 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8A                            
00001B8A                            loc_196A:				; XREF: PalCycle_Title
00001B8A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B8E 6A00                       		bpl.s	locret_1990
00001B90 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B96 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B9E 0240 0003                  		andi.w	#3,d0
00001BA2 E748                       		lsl.w	#3,d0
00001BA4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1990:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_Title
00001BB2                            
00001BB2                            
00001BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB2                            
00001BB2                            
00001BB2                            PalCycle_LZ:				; XREF: PalCycle
00001BB2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BB6 6A00                       		bpl.s	loc_19D8
00001BB8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BC6 0240 0003                  		andi.w	#3,d0
00001BCA E748                       		lsl.w	#3,d0
00001BCC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BD8 6600                       		bne.s	loc_19C0
00001BDA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE0                            
00001BE0                            loc_19C0:
00001BE0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BE8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BEC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF8                            
00001BF8                            loc_19D8:
00001BF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BFC 0240 0007                  		andi.w	#7,d0
00001C00 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C04 6700                       		beq.s	locret_1A3A
00001C06 7201                       		moveq	#1,d1
00001C08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C0C 6700                       		beq.s	loc_19F0
00001C0E 4441                       		neg.w	d1
00001C10                            
00001C10                            loc_19F0:
00001C10 3038 F650                  		move.w	($FFFFF650).w,d0
00001C14 0240 0003                  		andi.w	#3,d0
00001C18 D041                       		add.w	d1,d0
00001C1A 0C40 0003                  		cmpi.w	#3,d0
00001C1E 6500                       		bcs.s	loc_1A0A
00001C20 3200                       		move.w	d0,d1
00001C22 7000                       		moveq	#0,d0
00001C24 4A41                       		tst.w	d1
00001C26 6A00                       		bpl.s	loc_1A0A
00001C28 7002                       		moveq	#2,d0
00001C2A                            
00001C2A                            loc_1A0A:
00001C2A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C2E D040                       		add.w	d0,d0
00001C30 3200                       		move.w	d0,d1
00001C32 D040                       		add.w	d0,d0
00001C34 D041                       		add.w	d1,d0
00001C36 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C44 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C48 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C4E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5A                            
00001C5A                            locret_1A3A:
00001C5A 4E75                       		rts	
00001C5C                            ; End of function PalCycle_LZ
00001C5C                            
00001C5C                            ; ===========================================================================
00001C5C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C64                            ; ===========================================================================
00001C64                            
00001C64                            PalCycle_MZ:				; XREF: PalCycle
00001C64 4E75                       		rts	
00001C66                            
00001C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C66                            
00001C66                            
00001C66                            PalCycle_SLZ:				; XREF: PalCycle
00001C66 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C6A 6A00                       		bpl.s	locret_1A80
00001C6C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001C72 3038 F632                  		move.w	($FFFFF632).w,d0
00001C76 5240                       		addq.w	#1,d0
00001C78 0C40 0006                  		cmpi.w	#6,d0
00001C7C 6500                       		bcs.s	loc_1A60
00001C7E 7000                       		moveq	#0,d0
00001C80                            
00001C80                            loc_1A60:
00001C80 31C0 F632                  		move.w	d0,($FFFFF632).w
00001C84 3200                       		move.w	d0,d1
00001C86 D241                       		add.w	d1,d1
00001C88 D041                       		add.w	d1,d0
00001C8A D040                       		add.w	d0,d0
00001C8C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001C92 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001C96 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001C9A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001CA0                            
00001CA0                            locret_1A80:
00001CA0 4E75                       		rts	
00001CA2                            ; End of function PalCycle_SLZ
00001CA2                            
00001CA2                            
00001CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CA2                            
00001CA2                            
00001CA2                            PalCycle_SYZ:				; XREF: PalCycle
00001CA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CA6 6A00                       		bpl.s	locret_1AC6
00001CA8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001CAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001CB2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001CB6 0240 0003                  		andi.w	#3,d0
00001CBA E548                       		lsl.w	#2,d0
00001CBC 3200                       		move.w	d0,d1
00001CBE D040                       		add.w	d0,d0
00001CC0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CC6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CCA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CCE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CD2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CD8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CDC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CE0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CE6                            
00001CE6                            locret_1AC6:
00001CE6 4E75                       		rts	
00001CE8                            ; End of function PalCycle_SYZ
00001CE8                            
00001CE8                            
00001CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CE8                            
00001CE8                            
00001CE8                            PalCycle_SBZ:				; XREF: PalCycle
00001CE8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CEE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CF2 6700                       		beq.s	loc_1ADA
00001CF4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CFA                            
00001CFA                            loc_1ADA:
00001CFA 43F8 F650                  		lea	($FFFFF650).w,a1
00001CFE 321A                       		move.w	(a2)+,d1
00001D00                            
00001D00                            loc_1AE0:
00001D00 5311                       		subq.b	#1,(a1)
00001D02 6B00                       		bmi.s	loc_1AEA
00001D04 5489                       		addq.l	#2,a1
00001D06 5C8A                       		addq.l	#6,a2
00001D08 6000                       		bra.s	loc_1B06
00001D0A                            ; ===========================================================================
00001D0A                            
00001D0A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001D0A 12DA                       		move.b	(a2)+,(a1)+
00001D0C 1011                       		move.b	(a1),d0
00001D0E 5200                       		addq.b	#1,d0
00001D10 B01A                       		cmp.b	(a2)+,d0
00001D12 6500                       		bcs.s	loc_1AF6
00001D14 7000                       		moveq	#0,d0
00001D16                            
00001D16                            loc_1AF6:
00001D16 12C0                       		move.b	d0,(a1)+
00001D18 0240 000F                  		andi.w	#$F,d0
00001D1C D040                       		add.w	d0,d0
00001D1E 305A                       		movea.w	(a2)+,a0
00001D20 365A                       		movea.w	(a2)+,a3
00001D22 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D26                            
00001D26                            loc_1B06:				; XREF: PalCycle_SBZ
00001D26 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D2A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D2E 6A00                       		bpl.s	locret_1B64
00001D30 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D36 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D3C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D40 6700                       		beq.s	loc_1B2E
00001D42 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D48 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D4E                            
00001D4E                            loc_1B2E:
00001D4E 72FF                       		moveq	#-1,d1
00001D50 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D54 6700                       		beq.s	loc_1B38
00001D56 4441                       		neg.w	d1
00001D58                            
00001D58                            loc_1B38:
00001D58 3038 F632                  		move.w	($FFFFF632).w,d0
00001D5C 0240 0003                  		andi.w	#3,d0
00001D60 D041                       		add.w	d1,d0
00001D62 0C40 0003                  		cmpi.w	#3,d0
00001D66 6500                       		bcs.s	loc_1B52
00001D68 3200                       		move.w	d0,d1
00001D6A 7000                       		moveq	#0,d0
00001D6C 4A41                       		tst.w	d1
00001D6E 6A00                       		bpl.s	loc_1B52
00001D70 7002                       		moveq	#2,d0
00001D72                            
00001D72                            loc_1B52:
00001D72 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D76 D040                       		add.w	d0,d0
00001D78 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D80 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D84                            
00001D84                            locret_1B64:
00001D84 4E75                       		rts	
00001D86                            ; End of function PalCycle_SBZ
00001D86                            
00001D86                            ; ===========================================================================
00001D86                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001DA6                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DC6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DE6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DF8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001E0A                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E72                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E96                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001EB6                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EC6                            
00001EC6                            Pal_SBZCycList:
00001EC6                            	include "_inc\SBZ pallet script 1.asm"
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6                            ; Scrap Brain Zone 1 pallet cycling script
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6 0008                       	dc.w 8			; number of entries - 1
00001EC8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001ECA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001ECC FB50                       	dc.w $FB50		; RAM address
00001ECE 0D08                       	dc.b $D, 8
00001ED0 0000                       	dc.w Pal_SBZCyc2
00001ED2 FB52                       	dc.w $FB52
00001ED4 0E08                       	dc.b $E, 8
00001ED6 0000                       	dc.w Pal_SBZCyc3
00001ED8 FB6E                       	dc.w $FB6E
00001EDA 0B08                       	dc.b $B, 8
00001EDC 0000                       	dc.w Pal_SBZCyc5
00001EDE FB70                       	dc.w $FB70
00001EE0 0708                       	dc.b 7,	8
00001EE2 0000                       	dc.w Pal_SBZCyc6
00001EE4 FB72                       	dc.w $FB72
00001EE6 1C10                       	dc.b $1C, $10
00001EE8 0000                       	dc.w Pal_SBZCyc7
00001EEA FB7E                       	dc.w $FB7E
00001EEC 0303                       	dc.b 3,	3
00001EEE 0000                       	dc.w Pal_SBZCyc8
00001EF0 FB78                       	dc.w $FB78
00001EF2 0303                       	dc.b 3,	3
00001EF4 0000                       	dc.w Pal_SBZCyc8+2
00001EF6 FB7A                       	dc.w $FB7A
00001EF8 0303                       	dc.b 3,	3
00001EFA 0000                       	dc.w Pal_SBZCyc8+4
00001EFC FB7C                       	dc.w $FB7C
00001EFE                            	even
00001EFE                            	even
00001EFE                            
00001EFE                            Pal_SBZCycList2:
00001EFE                            	include "_inc\SBZ pallet script 2.asm"
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            ; Scrap Brain Zone 2 pallet cycling script
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE 0006                       	dc.w 6
00001F00 0708                       	dc.b 7,	8
00001F02 0000                       	dc.w Pal_SBZCyc1
00001F04 FB50                       	dc.w $FB50
00001F06 0D08                       	dc.b $D, 8
00001F08 0000                       	dc.w Pal_SBZCyc2
00001F0A FB52                       	dc.w $FB52
00001F0C 0908                       	dc.b 9,	8
00001F0E 0000                       	dc.w Pal_SBZCyc9
00001F10 FB70                       	dc.w $FB70
00001F12 0708                       	dc.b 7,	8
00001F14 0000                       	dc.w Pal_SBZCyc6
00001F16 FB72                       	dc.w $FB72
00001F18 0303                       	dc.b 3,	3
00001F1A 0000                       	dc.w Pal_SBZCyc8
00001F1C FB78                       	dc.w $FB78
00001F1E 0303                       	dc.b 3,	3
00001F20 0000                       	dc.w Pal_SBZCyc8+2
00001F22 FB7A                       	dc.w $FB7A
00001F24 0303                       	dc.b 3,	3
00001F26 0000                       	dc.w Pal_SBZCyc8+4
00001F28 FB7C                       	dc.w $FB7C
00001F2A                            	even
00001F2A                            	even
00001F2A                            
00001F2A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F3A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F4A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F5A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F66                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F76                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F86                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001FA6                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001FB0                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001FC0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            ; Subroutine to	fade out and fade in
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            
00001FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCC                            
00001FCC                            
00001FCC                            Pal_FadeTo:
00001FCC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FD2                            
00001FD2                            Pal_FadeTo2:
00001FD2 7000                       		moveq	#0,d0
00001FD4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE 7200                       		moveq	#0,d1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            Pal_ToBlack:
00001FE4 30C1                       		move.w	d1,(a0)+
00001FE6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FEA                            
00001FEA 383C 0015                  		move.w	#$15,d4
00001FEE                            
00001FEE                            loc_1DCE:
00001FEE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FF4 6100 0000                  		bsr.w	DelayProgram
00001FF8 6100                       		bsr.s	Pal_FadeIn
00001FFA 6100 F810                  		bsr.w	RunPLC_RAM
00001FFE 51CC FFEE                  		dbf	d4,loc_1DCE
00002002 4E75                       		rts	
00002004                            ; End of function Pal_FadeTo
00002004                            
00002004                            ; ---------------------------------------------------------------------------
00002004                            ; Pallet fade-in subroutine
00002004                            ; ---------------------------------------------------------------------------
00002004                            
00002004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002004                            
00002004                            
00002004                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002004 7000                       		moveq	#0,d0
00002006 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000200A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000200E 1038 F626                  		move.b	($FFFFF626).w,d0
00002012 D0C0                       		adda.w	d0,a0
00002014 D2C0                       		adda.w	d0,a1
00002016 1038 F627                  		move.b	($FFFFF627).w,d0
0000201A                            
0000201A                            loc_1DFA:
0000201A 6100                       		bsr.s	Pal_AddColor
0000201C 51C8 FFFC                  		dbf	d0,loc_1DFA
00002020 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002026 6600                       		bne.s	locret_1E24
00002028 7000                       		moveq	#0,d0
0000202A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000202E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002032 1038 F626                  		move.b	($FFFFF626).w,d0
00002036 D0C0                       		adda.w	d0,a0
00002038 D2C0                       		adda.w	d0,a1
0000203A 1038 F627                  		move.b	($FFFFF627).w,d0
0000203E                            
0000203E                            loc_1E1E:
0000203E 6100                       		bsr.s	Pal_AddColor
00002040 51C8 FFFC                  		dbf	d0,loc_1E1E
00002044                            
00002044                            locret_1E24:
00002044 4E75                       		rts	
00002046                            ; End of function Pal_FadeIn
00002046                            
00002046                            
00002046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002046                            
00002046                            
00002046                            Pal_AddColor:				; XREF: Pal_FadeIn
00002046 3419                       		move.w	(a1)+,d2
00002048 3610                       		move.w	(a0),d3
0000204A B642                       		cmp.w	d2,d3
0000204C 6700                       		beq.s	loc_1E4E
0000204E 3203                       		move.w	d3,d1
00002050 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002054 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002056 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002058 30C1                       		move.w	d1,(a0)+	; update pallet
0000205A 4E75                       		rts	
0000205C                            ; ===========================================================================
0000205C                            
0000205C                            Pal_AddGreen:				; XREF: Pal_AddColor
0000205C 3203                       		move.w	d3,d1
0000205E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002062 B242                       		cmp.w	d2,d1
00002064 6200                       		bhi.s	Pal_AddRed
00002066 30C1                       		move.w	d1,(a0)+	; update pallet
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            Pal_AddRed:				; XREF: Pal_AddGreen
0000206A 5458                       		addq.w	#2,(a0)+	; increase red value
0000206C 4E75                       		rts	
0000206E                            ; ===========================================================================
0000206E                            
0000206E                            loc_1E4E:				; XREF: Pal_AddColor
0000206E 5448                       		addq.w	#2,a0
00002070 4E75                       		rts	
00002072                            ; End of function Pal_AddColor
00002072                            
00002072                            
00002072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002072                            
00002072                            
00002072                            Pal_FadeFrom:
00002072 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002078 383C 0015                  		move.w	#$15,d4
0000207C                            
0000207C                            loc_1E5C:
0000207C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002082 6100 0000                  		bsr.w	DelayProgram
00002086 6100                       		bsr.s	Pal_FadeOut
00002088 6100 F782                  		bsr.w	RunPLC_RAM
0000208C 51CC FFEE                  		dbf	d4,loc_1E5C
00002090 4E75                       		rts	
00002092                            ; End of function Pal_FadeFrom
00002092                            
00002092                            ; ---------------------------------------------------------------------------
00002092                            ; Pallet fade-out subroutine
00002092                            ; ---------------------------------------------------------------------------
00002092                            
00002092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002092                            
00002092                            
00002092                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002092 7000                       		moveq	#0,d0
00002094 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002098 1038 F626                  		move.b	($FFFFF626).w,d0
0000209C D0C0                       		adda.w	d0,a0
0000209E 1038 F627                  		move.b	($FFFFF627).w,d0
000020A2                            
000020A2                            loc_1E82:
000020A2 6100                       		bsr.s	Pal_DecColor
000020A4 51C8 FFFC                  		dbf	d0,loc_1E82
000020A8                            
000020A8 7000                       		moveq	#0,d0
000020AA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020AE 1038 F626                  		move.b	($FFFFF626).w,d0
000020B2 D0C0                       		adda.w	d0,a0
000020B4 1038 F627                  		move.b	($FFFFF627).w,d0
000020B8                            
000020B8                            loc_1E98:
000020B8 6100                       		bsr.s	Pal_DecColor
000020BA 51C8 FFFC                  		dbf	d0,loc_1E98
000020BE 4E75                       		rts	
000020C0                            ; End of function Pal_FadeOut
000020C0                            
000020C0                            
000020C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020C0                            
000020C0                            
000020C0                            Pal_DecColor:				; XREF: Pal_FadeOut
000020C0 3410                       		move.w	(a0),d2
000020C2 6700                       		beq.s	loc_1ECC
000020C4 3202                       		move.w	d2,d1
000020C6 0241 000E                  		andi.w	#$E,d1
000020CA 6700                       		beq.s	Pal_DecGreen
000020CC 5558                       		subq.w	#2,(a0)+	; decrease red value
000020CE 4E75                       		rts	
000020D0                            ; ===========================================================================
000020D0                            
000020D0                            Pal_DecGreen:				; XREF: Pal_DecColor
000020D0 3202                       		move.w	d2,d1
000020D2 0241 00E0                  		andi.w	#$E0,d1
000020D6 6700                       		beq.s	Pal_DecBlue
000020D8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020DC 4E75                       		rts	
000020DE                            ; ===========================================================================
000020DE                            
000020DE                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020DE 3202                       		move.w	d2,d1
000020E0 0241 0E00                  		andi.w	#$E00,d1
000020E4 6700                       		beq.s	loc_1ECC
000020E6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020EA 4E75                       		rts	
000020EC                            ; ===========================================================================
000020EC                            
000020EC                            loc_1ECC:				; XREF: Pal_DecColor
000020EC 5448                       		addq.w	#2,a0
000020EE 4E75                       		rts	
000020F0                            ; End of function Pal_DecColor
000020F0                            
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            ; Subroutine to	fill the pallet	with white (special stage)
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            
000020F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F0                            
000020F0                            
000020F0                            Pal_MakeWhite:				; XREF: SpecialStage
000020F0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020F6 7000                       		moveq	#0,d0
000020F8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FC 1038 F626                  		move.b	($FFFFF626).w,d0
00002100 D0C0                       		adda.w	d0,a0
00002102 323C 0EEE                  		move.w	#$EEE,d1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            PalWhite_Loop:
0000210A 30C1                       		move.w	d1,(a0)+
0000210C 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002110 383C 0015                  		move.w	#$15,d4
00002114                            
00002114                            loc_1EF4:
00002114 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000211A 6100 0000                  		bsr.w	DelayProgram
0000211E 6100                       		bsr.s	Pal_WhiteToBlack
00002120 6100 F6EA                  		bsr.w	RunPLC_RAM
00002124 51CC FFEE                  		dbf	d4,loc_1EF4
00002128 4E75                       		rts	
0000212A                            ; End of function Pal_MakeWhite
0000212A                            
0000212A                            
0000212A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212A                            
0000212A                            
0000212A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000212A 7000                       		moveq	#0,d0
0000212C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002130 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002134 1038 F626                  		move.b	($FFFFF626).w,d0
00002138 D0C0                       		adda.w	d0,a0
0000213A D2C0                       		adda.w	d0,a1
0000213C 1038 F627                  		move.b	($FFFFF627).w,d0
00002140                            
00002140                            loc_1F20:
00002140 6100                       		bsr.s	Pal_DecColor2
00002142 51C8 FFFC                  		dbf	d0,loc_1F20
00002146                            
00002146 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000214C 6600                       		bne.s	locret_1F4A
0000214E 7000                       		moveq	#0,d0
00002150 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002154 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002158 1038 F626                  		move.b	($FFFFF626).w,d0
0000215C D0C0                       		adda.w	d0,a0
0000215E D2C0                       		adda.w	d0,a1
00002160 1038 F627                  		move.b	($FFFFF627).w,d0
00002164                            
00002164                            loc_1F44:
00002164 6100                       		bsr.s	Pal_DecColor2
00002166 51C8 FFFC                  		dbf	d0,loc_1F44
0000216A                            
0000216A                            locret_1F4A:
0000216A 4E75                       		rts	
0000216C                            ; End of function Pal_WhiteToBlack
0000216C                            
0000216C                            
0000216C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000216C                            
0000216C                            
0000216C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000216C 3419                       		move.w	(a1)+,d2
0000216E 3610                       		move.w	(a0),d3
00002170 B642                       		cmp.w	d2,d3
00002172 6700                       		beq.s	loc_1F78
00002174 3203                       		move.w	d3,d1
00002176 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000217A 6500                       		bcs.s	loc_1F64
0000217C B242                       		cmp.w	d2,d1
0000217E 6500                       		bcs.s	loc_1F64
00002180 30C1                       		move.w	d1,(a0)+
00002182 4E75                       		rts	
00002184                            ; ===========================================================================
00002184                            
00002184                            loc_1F64:				; XREF: Pal_DecColor2
00002184 3203                       		move.w	d3,d1
00002186 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000218A 6500                       		bcs.s	loc_1F74
0000218C B242                       		cmp.w	d2,d1
0000218E 6500                       		bcs.s	loc_1F74
00002190 30C1                       		move.w	d1,(a0)+
00002192 4E75                       		rts	
00002194                            ; ===========================================================================
00002194                            
00002194                            loc_1F74:				; XREF: loc_1F64
00002194 5558                       		subq.w	#2,(a0)+	; decrease red value
00002196 4E75                       		rts	
00002198                            ; ===========================================================================
00002198                            
00002198                            loc_1F78:				; XREF: Pal_DecColor2
00002198 5448                       		addq.w	#2,a0
0000219A 4E75                       		rts	
0000219C                            ; End of function Pal_DecColor2
0000219C                            
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            ; Subroutine to	make a white flash when	you enter a special stage
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            
0000219C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219C                            
0000219C                            
0000219C                            Pal_MakeFlash:				; XREF: SpecialStage
0000219C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000021A2 383C 0015                  		move.w	#$15,d4
000021A6                            
000021A6                            loc_1F86:
000021A6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000021AC 6100 0000                  		bsr.w	DelayProgram
000021B0 6100                       		bsr.s	Pal_ToWhite
000021B2 6100 F658                  		bsr.w	RunPLC_RAM
000021B6 51CC FFEE                  		dbf	d4,loc_1F86
000021BA 4E75                       		rts	
000021BC                            ; End of function Pal_MakeFlash
000021BC                            
000021BC                            
000021BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021BC                            
000021BC                            
000021BC                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1FAC:
000021CC 6100                       		bsr.s	Pal_AddColor2
000021CE 51C8 FFFC                  		dbf	d0,loc_1FAC
000021D2 7000                       		moveq	#0,d0
000021D4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021D8 1038 F626                  		move.b	($FFFFF626).w,d0
000021DC D0C0                       		adda.w	d0,a0
000021DE 1038 F627                  		move.b	($FFFFF627).w,d0
000021E2                            
000021E2                            loc_1FC2:
000021E2 6100                       		bsr.s	Pal_AddColor2
000021E4 51C8 FFFC                  		dbf	d0,loc_1FC2
000021E8 4E75                       		rts	
000021EA                            ; End of function Pal_ToWhite
000021EA                            
000021EA                            
000021EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021EA                            
000021EA                            
000021EA                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021EA 3410                       		move.w	(a0),d2
000021EC 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021F0 6700                       		beq.s	loc_2006
000021F2 3202                       		move.w	d2,d1
000021F4 0241 000E                  		andi.w	#$E,d1
000021F8 0C41 000E                  		cmpi.w	#$E,d1
000021FC 6700                       		beq.s	loc_1FE2
000021FE 5458                       		addq.w	#2,(a0)+	; increase red value
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_1FE2:				; XREF: Pal_AddColor2
00002202 3202                       		move.w	d2,d1
00002204 0241 00E0                  		andi.w	#$E0,d1
00002208 0C41 00E0                  		cmpi.w	#$E0,d1
0000220C 6700                       		beq.s	loc_1FF4
0000220E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002212 4E75                       		rts	
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_1FF4:				; XREF: loc_1FE2
00002214 3202                       		move.w	d2,d1
00002216 0241 0E00                  		andi.w	#$E00,d1
0000221A 0C41 0E00                  		cmpi.w	#$E00,d1
0000221E 6700                       		beq.s	loc_2006
00002220 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002224 4E75                       		rts	
00002226                            ; ===========================================================================
00002226                            
00002226                            loc_2006:				; XREF: Pal_AddColor2
00002226 5448                       		addq.w	#2,a0
00002228 4E75                       		rts	
0000222A                            ; End of function Pal_AddColor2
0000222A                            
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            ; Pallet cycling routine - Sega	logo
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            
0000222A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000222A                            
0000222A                            
0000222A                            PalCycle_Sega:				; XREF: SegaScreen
0000222A 4A38 F635                  		tst.b	($FFFFF635).w
0000222E 6600                       		bne.s	loc_206A
00002230 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002234 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000223A 7205                       		moveq	#5,d1
0000223C 3038 F632                  		move.w	($FFFFF632).w,d0
00002240                            
00002240                            loc_2020:
00002240 6A00                       		bpl.s	loc_202A
00002242 5448                       		addq.w	#2,a0
00002244 5341                       		subq.w	#1,d1
00002246 5440                       		addq.w	#2,d0
00002248 60F6                       		bra.s	loc_2020
0000224A                            ; ===========================================================================
0000224A                            
0000224A                            loc_202A:				; XREF: PalCycle_Sega
0000224A 3400                       		move.w	d0,d2
0000224C 0242 001E                  		andi.w	#$1E,d2
00002250 6600                       		bne.s	loc_2034
00002252 5440                       		addq.w	#2,d0
00002254                            
00002254                            loc_2034:
00002254 0C40 0060                  		cmpi.w	#$60,d0
00002258 6400                       		bcc.s	loc_203E
0000225A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000225E                            
0000225E                            loc_203E:
0000225E 5440                       		addq.w	#2,d0
00002260 51C9 FFE8                  		dbf	d1,loc_202A
00002264 3038 F632                  		move.w	($FFFFF632).w,d0
00002268 5440                       		addq.w	#2,d0
0000226A 3400                       		move.w	d0,d2
0000226C 0242 001E                  		andi.w	#$1E,d2
00002270 6600                       		bne.s	loc_2054
00002272 5440                       		addq.w	#2,d0
00002274                            
00002274                            loc_2054:
00002274 0C40 0064                  		cmpi.w	#$64,d0
00002278 6D00                       		blt.s	loc_2062
0000227A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002280 70F4                       		moveq	#-$C,d0
00002282                            
00002282                            loc_2062:
00002282 31C0 F632                  		move.w	d0,($FFFFF632).w
00002286 7001                       		moveq	#1,d0
00002288 4E75                       		rts	
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            loc_206A:				; XREF: loc_202A
0000228A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000228E 6A00                       		bpl.s	loc_20BC
00002290 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002296 3038 F632                  		move.w	($FFFFF632).w,d0
0000229A 0640 000C                  		addi.w	#$C,d0
0000229E 0C40 0030                  		cmpi.w	#$30,d0
000022A2 6500                       		bcs.s	loc_2088
000022A4 7000                       		moveq	#0,d0
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            loc_2088:				; XREF: loc_206A
000022A8 31C0 F632                  		move.w	d0,($FFFFF632).w
000022AC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000022B2 41F0 0000                  		lea	(a0,d0.w),a0
000022B6 43F8 FB04                  		lea	($FFFFFB04).w,a1
000022BA 22D8                       		move.l	(a0)+,(a1)+
000022BC 22D8                       		move.l	(a0)+,(a1)+
000022BE 3298                       		move.w	(a0)+,(a1)
000022C0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022C4 7000                       		moveq	#0,d0
000022C6 722C                       		moveq	#$2C,d1
000022C8                            
000022C8                            loc_20A8:
000022C8 3400                       		move.w	d0,d2
000022CA 0242 001E                  		andi.w	#$1E,d2
000022CE 6600                       		bne.s	loc_20B2
000022D0 5440                       		addq.w	#2,d0
000022D2                            
000022D2                            loc_20B2:
000022D2 3390 0000                  		move.w	(a0),(a1,d0.w)
000022D6 5440                       		addq.w	#2,d0
000022D8 51C9 FFEE                  		dbf	d1,loc_20A8
000022DC                            
000022DC                            loc_20BC:
000022DC 7001                       		moveq	#1,d0
000022DE 4E75                       		rts	
000022E0                            ; End of function PalCycle_Sega
000022E0                            
000022E0                            ; ===========================================================================
000022E0                            
000022E0                            Pal_Sega1:	incbin	pallet\sega1.bin
000022EC                            Pal_Sega2:	incbin	pallet\sega2.bin
0000231C                            
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            ; Subroutines to load pallets
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            PalLoad1:
0000231C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002322 E748                       		lsl.w	#3,d0
00002324 D2C0                       		adda.w	d0,a1
00002326 2459                       		movea.l	(a1)+,a2
00002328 3659                       		movea.w	(a1)+,a3
0000232A D6FC 0080                  		adda.w	#$80,a3
0000232E 3E19                       		move.w	(a1)+,d7
00002330                            
00002330                            loc_2110:
00002330 26DA                       		move.l	(a2)+,(a3)+
00002332 51CF FFFC                  		dbf	d7,loc_2110
00002336 4E75                       		rts	
00002338                            ; End of function PalLoad1
00002338                            
00002338                            
00002338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002338                            
00002338                            
00002338                            PalLoad2:
00002338 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233E E748                       		lsl.w	#3,d0
00002340 D2C0                       		adda.w	d0,a1
00002342 2459                       		movea.l	(a1)+,a2
00002344 3659                       		movea.w	(a1)+,a3
00002346 3E19                       		move.w	(a1)+,d7
00002348                            
00002348                            loc_2128:
00002348 26DA                       		move.l	(a2)+,(a3)+
0000234A 51CF FFFC                  		dbf	d7,loc_2128
0000234E 4E75                       		rts	
00002350                            ; End of function PalLoad2
00002350                            
00002350                            ; ---------------------------------------------------------------------------
00002350                            ; Underwater pallet loading subroutine
00002350                            ; ---------------------------------------------------------------------------
00002350                            
00002350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002350                            
00002350                            
00002350                            PalLoad3_Water:
00002350 43F9 0000 0000             		lea	(PalPointers).l,a1
00002356 E748                       		lsl.w	#3,d0
00002358 D2C0                       		adda.w	d0,a1
0000235A 2459                       		movea.l	(a1)+,a2
0000235C 3659                       		movea.w	(a1)+,a3
0000235E 96FC 0080                  		suba.w	#$80,a3
00002362 3E19                       		move.w	(a1)+,d7
00002364                            
00002364                            loc_2144:
00002364 26DA                       		move.l	(a2)+,(a3)+
00002366 51CF FFFC                  		dbf	d7,loc_2144
0000236A 4E75                       		rts	
0000236C                            ; End of function PalLoad3_Water
0000236C                            
0000236C                            
0000236C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000236C                            
0000236C                            
0000236C                            PalLoad4_Water:
0000236C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002372 E748                       		lsl.w	#3,d0
00002374 D2C0                       		adda.w	d0,a1
00002376 2459                       		movea.l	(a1)+,a2
00002378 3659                       		movea.w	(a1)+,a3
0000237A 96FC 0100                  		suba.w	#$100,a3
0000237E 3E19                       		move.w	(a1)+,d7
00002380                            
00002380                            loc_2160:
00002380 26DA                       		move.l	(a2)+,(a3)+
00002382 51CF FFFC                  		dbf	d7,loc_2160
00002386 4E75                       		rts	
00002388                            ; End of function PalLoad4_Water
00002388                            
00002388                            ; ===========================================================================
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388                            PalPointers:
00002388                            	include "_inc\Pallet pointers.asm"
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000238C FB00                       	dc.w $FB00		; RAM address
0000238E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002390 0000 0000                  	dc.l Pal_Title
00002394 FB00                       	dc.w $FB00
00002396 001F                       	dc.w $1F
00002398 0000 0000                  	dc.l Pal_LevelSel
0000239C FB00                       	dc.w $FB00
0000239E 001F                       	dc.w $1F
000023A0 0000 0000                  	dc.l Pal_Sonic
000023A4 FB00                       	dc.w $FB00
000023A6 0007                       	dc.w 7
000023A8 0000 0000                  	dc.l Pal_GHZ
000023AC FB20                       	dc.w $FB20
000023AE 0017                       	dc.w $17
000023B0 0000 0000                  	dc.l Pal_LZ
000023B4 FB20                       	dc.w $FB20
000023B6 0017                       	dc.w $17
000023B8 0000 0000                  	dc.l Pal_MZ
000023BC FB20                       	dc.w $FB20
000023BE 0017                       	dc.w $17
000023C0 0000 0000                  	dc.l Pal_SLZ
000023C4 FB20                       	dc.w $FB20
000023C6 0017                       	dc.w $17
000023C8 0000 0000                  	dc.l Pal_SYZ
000023CC FB20                       	dc.w $FB20
000023CE 0017                       	dc.w $17
000023D0 0000 0000                  	dc.l Pal_SBZ1
000023D4 FB20                       	dc.w $FB20
000023D6 0017                       	dc.w $17
000023D8 0000 0000                  	dc.l Pal_Special
000023DC FB00                       	dc.w $FB00
000023DE 001F                       	dc.w $1F
000023E0 0000 0000                  	dc.l Pal_LZWater
000023E4 FB00                       	dc.w $FB00
000023E6 001F                       	dc.w $1F
000023E8 0000 0000                  	dc.l Pal_SBZ3
000023EC FB20                       	dc.w $FB20
000023EE 0017                       	dc.w $17
000023F0 0000 0000                  	dc.l Pal_SBZ3Water
000023F4 FB00                       	dc.w $FB00
000023F6 001F                       	dc.w $1F
000023F8 0000 0000                  	dc.l Pal_SBZ2
000023FC FB20                       	dc.w $FB20
000023FE 0017                       	dc.w $17
00002400 0000 0000                  	dc.l Pal_LZSonWater
00002404 FB00                       	dc.w $FB00
00002406 0007                       	dc.w 7
00002408 0000 0000                  	dc.l Pal_SBZ3SonWat
0000240C FB00                       	dc.w $FB00
0000240E 0007                       	dc.w 7
00002410 0000 0000                  	dc.l Pal_SpeResult
00002414 FB00                       	dc.w $FB00
00002416 001F                       	dc.w $1F
00002418 0000 0000                  	dc.l Pal_SpeContinue
0000241C FB00                       	dc.w $FB00
0000241E 000F                       	dc.w $F
00002420 0000 0000                  	dc.l Pal_Ending
00002424 FB00                       	dc.w $FB00
00002426 001F                       	dc.w $1F
00002428 0000 0000                  	dc.l Pal_Idiot
0000242C FB20                       	dc.w $FB20
0000242E 0007                       	dc.w 7
0000242E 0007                       	dc.w 7
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Pallet data
00002430                            ; ---------------------------------------------------------------------------
00002430                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024B0                            Pal_Title:	incbin	pallet\title.bin
00002530                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025B0                            Pal_Sonic:	incbin	pallet\sonic.bin
000025D0                            Pal_GHZ:	incbin	pallet\ghz.bin
00002630                            Pal_LZ:		incbin	pallet\lz.bin
00002690                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002710                            Pal_MZ:		incbin	pallet\mz.bin
00002770                            Pal_SLZ:	incbin	pallet\slz.bin
000027D0                            Pal_SYZ:	incbin	pallet\syz.bin
00002830                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002890                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028F0                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002970                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029D0                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A50                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A70                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A90                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B10                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B50                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BD0                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BF0                            
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            
00002BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BF0                            
00002BF0                            
00002BF0                            DelayProgram:				; XREF: PauseGame
00002BF0 46FC 2300                  		move	#$2300,sr
00002BF4                            
00002BF4                            loc_29AC:
00002BF4 4A38 F62A                  		tst.b	($FFFFF62A).w
00002BF8 66FA                       		bne.s	loc_29AC
00002BFA 4E75                       		rts	
00002BFC                            ; End of function DelayProgram
00002BFC                            
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            ; Subroutine to	generate a pseudo-random number	in d0
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            
00002BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BFC                            
00002BFC                            
00002BFC                            RandomNumber:
00002BFC 2238 F636                  		move.l	($FFFFF636).w,d1
00002C00 6600                       		bne.s	loc_29C0
00002C02 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C08                            
00002C08                            loc_29C0:
00002C08 2001                       		move.l	d1,d0
00002C0A E581                       		asl.l	#2,d1
00002C0C D280                       		add.l	d0,d1
00002C0E E781                       		asl.l	#3,d1
00002C10 D280                       		add.l	d0,d1
00002C12 3001                       		move.w	d1,d0
00002C14 4841                       		swap	d1
00002C16 D041                       		add.w	d1,d0
00002C18 3200                       		move.w	d0,d1
00002C1A 4841                       		swap	d1
00002C1C 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C20 4E75                       		rts	
00002C22                            ; End of function RandomNumber
00002C22                            
00002C22                            
00002C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C22                            
00002C22                            
00002C22                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C22 0240 00FF                  		andi.w	#$FF,d0
00002C26 D040                       		add.w	d0,d0
00002C28 0640 0080                  		addi.w	#$80,d0
00002C2C 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C30 0440 0080                  		subi.w	#$80,d0
00002C34 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C38 4E75                       		rts	
00002C3A                            ; End of function CalcSine
00002C3A                            
00002C3A                            ; ===========================================================================
00002C3A                            
00002C3A                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EBA                            
00002EBA                            ; ===========================================================================
00002EBA 48E7 6000                  		movem.l	d1-d2,-(sp)
00002EBE 3200                       		move.w	d0,d1
00002EC0 4841                       		swap	d1
00002EC2 7000                       		moveq	#0,d0
00002EC4 3200                       		move.w	d0,d1
00002EC6 7407                       		moveq	#7,d2
00002EC8                            
00002EC8                            loc_2C80:
00002EC8 E599                       		rol.l	#2,d1
00002ECA D040                       		add.w	d0,d0
00002ECC 5240                       		addq.w	#1,d0
00002ECE 9240                       		sub.w	d0,d1
00002ED0 6400                       		bcc.s	loc_2C9A
00002ED2 D240                       		add.w	d0,d1
00002ED4 5340                       		subq.w	#1,d0
00002ED6 51CA FFF0                  		dbf	d2,loc_2C80
00002EDA E248                       		lsr.w	#1,d0
00002EDC 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EE0 4E75                       		rts	
00002EE2                            ; ===========================================================================
00002EE2                            
00002EE2                            loc_2C9A:
00002EE2 5240                       		addq.w	#1,d0
00002EE4 51CA FFE2                  		dbf	d2,loc_2C80
00002EE8 E248                       		lsr.w	#1,d0
00002EEA 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EEE 4E75                       		rts	
00002EF0                            
00002EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EF0                            
00002EF0                            
00002EF0                            CalcAngle:
00002EF0 48E7 1800                  		movem.l	d3-d4,-(sp)
00002EF4 7600                       		moveq	#0,d3
00002EF6 7800                       		moveq	#0,d4
00002EF8 3601                       		move.w	d1,d3
00002EFA 3802                       		move.w	d2,d4
00002EFC 8843                       		or.w	d3,d4
00002EFE 6700                       		beq.s	loc_2D04
00002F00 3802                       		move.w	d2,d4
00002F02 4A43                       		tst.w	d3
00002F04 6A00 0000                  		bpl.w	loc_2CC2
00002F08 4443                       		neg.w	d3
00002F0A                            
00002F0A                            loc_2CC2:
00002F0A 4A44                       		tst.w	d4
00002F0C 6A00 0000                  		bpl.w	loc_2CCA
00002F10 4444                       		neg.w	d4
00002F12                            
00002F12                            loc_2CCA:
00002F12 B843                       		cmp.w	d3,d4
00002F14 6400 0000                  		bcc.w	loc_2CDC
00002F18 E18C                       		lsl.l	#8,d4
00002F1A 88C3                       		divu.w	d3,d4
00002F1C 7000                       		moveq	#0,d0
00002F1E 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F22 6000                       		bra.s	loc_2CE6
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2CDC:				; XREF: CalcAngle
00002F24 E18B                       		lsl.l	#8,d3
00002F26 86C4                       		divu.w	d4,d3
00002F28 7040                       		moveq	#$40,d0
00002F2A 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F2E                            
00002F2E                            loc_2CE6:
00002F2E 4A41                       		tst.w	d1
00002F30 6A00 0000                  		bpl.w	loc_2CF2
00002F34 4440                       		neg.w	d0
00002F36 0640 0080                  		addi.w	#$80,d0
00002F3A                            
00002F3A                            loc_2CF2:
00002F3A 4A42                       		tst.w	d2
00002F3C 6A00 0000                  		bpl.w	loc_2CFE
00002F40 4440                       		neg.w	d0
00002F42 0640 0100                  		addi.w	#$100,d0
00002F46                            
00002F46                            loc_2CFE:
00002F46 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F4A 4E75                       		rts	
00002F4C                            ; ===========================================================================
00002F4C                            
00002F4C                            loc_2D04:				; XREF: CalcAngle
00002F4C 303C 0040                  		move.w	#$40,d0
00002F50 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F54 4E75                       		rts	
00002F56                            ; End of function CalcAngle
00002F56                            
00002F56                            ; ===========================================================================
00002F56                            
00002F56                            Angle_Data:	incbin	misc\angles.bin
00003058                            
00003058                            ; ===========================================================================
00003058                            
00003058                            ; ---------------------------------------------------------------------------
00003058                            ; Sega screen
00003058                            ; ---------------------------------------------------------------------------
00003058                            
00003058                            SegaScreen:				; XREF: GameModeArray
00003058 103C 00E4                  		move.b	#$E4,d0
0000305C 6100 E55E                  		bsr.w	PlaySound_Special ; stop music
00003060 6100 E79C                  		bsr.w	ClearPLC
00003064 6100 F00C                  		bsr.w	Pal_FadeFrom
00003068 4DF9 00C0 0004             		lea	($C00004).l,a6
0000306E 3CBC 8004                  		move.w	#$8004,(a6)
00003072 3CBC 8230                  		move.w	#$8230,(a6)
00003076 3CBC 8407                  		move.w	#$8407,(a6)
0000307A 3CBC 8700                  		move.w	#$8700,(a6)
0000307E 3CBC 8B00                  		move.w	#$8B00,(a6)
00003082 4238 F64E                  		clr.b	($FFFFF64E).w
00003086 46FC 2700                  		move	#$2700,sr
0000308A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000308E 0200 00BF                  		andi.b	#$BF,d0
00003092 33C0 00C0 0004             		move.w	d0,($C00004).l
00003098 6100 E44A                  		bsr.w	ClearScreen
0000309C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030A6 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030AC 6100 E5B2                  		bsr.w	NemDec
000030B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000030B6 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030BC 303C 0000                  		move.w	#0,d0
000030C0 6100 E87C                  		bsr.w	EniDec
000030C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000030CA 203C 6510 0003             		move.l	#$65100003,d0
000030D0 7217                       		moveq	#$17,d1
000030D2 7407                       		moveq	#7,d2
000030D4 6100 E56A                  		bsr.w	ShowVDPGraphics
000030D8 43F9 00FF 0180             		lea	($FF0180).l,a1
000030DE 203C 4000 0003             		move.l	#$40000003,d0
000030E4 7227                       		moveq	#$27,d1
000030E6 741B                       		moveq	#$1B,d2
000030E8 6100 E556                  		bsr.w	ShowVDPGraphics
000030EC 7000                       		moveq	#0,d0
000030EE 6100 F248                  		bsr.w	PalLoad2	; load Sega logo pallet
000030F2 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000030F8 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000030FE 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003104 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000310A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000310E 0000 0040                  		ori.b	#$40,d0
00003112 33C0 00C0 0004             		move.w	d0,($C00004).l
00003118                            
00003118                            Sega_WaitPallet:
00003118 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000311E 6100 FAD0                  		bsr.w	DelayProgram
00003122 6100 F106                  		bsr.w	PalCycle_Sega
00003126 66F0                       		bne.s	Sega_WaitPallet
00003128                            
00003128 103C 00E1                  		move.b	#$E1,d0
0000312C 6100 E48E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003130 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003136 6100 FAB8                  		bsr.w	DelayProgram
0000313A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003140                            
00003140                            Sega_WaitEnd:
00003140 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003146 6100 FAA8                  		bsr.w	DelayProgram
0000314A 4A78 F614                  		tst.w	($FFFFF614).w
0000314E 6700                       		beq.s	Sega_GotoTitle
00003150 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003156 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003158                            
00003158                            Sega_GotoTitle:
00003158 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
0000315E 4E75                       		rts	
00003160                            ; ===========================================================================
00003160                            
00003160                            ; ---------------------------------------------------------------------------
00003160                            ; Title	screen
00003160                            ; ---------------------------------------------------------------------------
00003160                            
00003160                            TitleScreen:				; XREF: GameModeArray
00003160 103C 00E4                  		move.b	#$E4,d0
00003164 6100 E456                  		bsr.w	PlaySound_Special ; stop music
00003168 6100 E694                  		bsr.w	ClearPLC
0000316C 6100 EF04                  		bsr.w	Pal_FadeFrom
00003170 46FC 2700                  		move	#$2700,sr
00003174 6100 E3FC                  		bsr.w	SoundDriverLoad
00003178 4DF9 00C0 0004             		lea	($C00004).l,a6
0000317E 3CBC 8004                  		move.w	#$8004,(a6)
00003182 3CBC 8230                  		move.w	#$8230,(a6)
00003186 3CBC 8407                  		move.w	#$8407,(a6)
0000318A 3CBC 9001                  		move.w	#$9001,(a6)
0000318E 3CBC 9200                  		move.w	#$9200,(a6)
00003192 3CBC 8B03                  		move.w	#$8B03,(a6)
00003196 3CBC 8720                  		move.w	#$8720,(a6)
0000319A 4238 F64E                  		clr.b	($FFFFF64E).w
0000319E 6100 E344                  		bsr.w	ClearScreen
000031A2 43F8 D000                  		lea	($FFFFD000).w,a1
000031A6 7000                       		moveq	#0,d0
000031A8 323C 07FF                  		move.w	#$7FF,d1
000031AC                            
000031AC                            Title_ClrObjRam:
000031AC 22C0                       		move.l	d0,(a1)+
000031AE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031B2                            
000031B2 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031BC 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000031C2 6100 E49C                  		bsr.w	NemDec
000031C6 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000031D0 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000031D6 6100 E488                  		bsr.w	NemDec
000031DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000031E0 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000031E6 303C 0000                  		move.w	#0,d0
000031EA 6100 E752                  		bsr.w	EniDec
000031EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000031F4 203C 4000 0003             		move.l	#$40000003,d0
000031FA 7227                       		moveq	#$27,d1
000031FC 741B                       		moveq	#$1B,d2
000031FE 6100 E440                  		bsr.w	ShowVDPGraphics
00003202 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003206 7000                       		moveq	#0,d0
00003208 323C 001F                  		move.w	#$1F,d1
0000320C                            
0000320C                            Title_ClrPallet:
0000320C 22C0                       		move.l	d0,(a1)+
0000320E 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003212                            
00003212 7003                       		moveq	#3,d0		; load Sonic's pallet
00003214 6100 F106                  		bsr.w	PalLoad1
00003218 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000321E 4EB9 0000 0000             		jsr	ObjectsLoad
00003224 4EB9 0000 0000             		jsr	BuildSprites
0000322A 6100 EDA0                  		bsr.w	Pal_FadeTo
0000322E 46FC 2700                  		move	#$2700,sr
00003232 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000323C 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003242 6100 E41C                  		bsr.w	NemDec
00003246 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003250 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003256 6100 E408                  		bsr.w	NemDec
0000325A 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003264 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000326A 6100 E3F4                  		bsr.w	NemDec
0000326E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003274 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000327C 4BF9 0000 05F0             		lea	(Art_Text).l,a5
00003282 323C 0BB3                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003286                            
00003286                            Title_LoadText:
00003286 2C9D                       		move.l	(a5)+,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000328C                            
0000328C 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003292 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003298 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000329E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000032A4 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000032AA 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000032B0 6100 0000                  		bsr.w	LevelSizeLoad
000032B4 6100 0000                  		bsr.w	DeformBgLayer
000032B8 43F8 B000                  		lea	($FFFFB000).w,a1
000032BC 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000032C2 303C 0000                  		move.w	#0,d0
000032C6 6100 E676                  		bsr.w	EniDec
000032CA 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000032D0 43F9 00FF 0000             		lea	($FF0000).l,a1
000032D6 6100 E7E4                  		bsr.w	KosDec
000032DA 6100 0000                  		bsr.w	LevelLayoutLoad
000032DE 6100 ED92                  		bsr.w	Pal_FadeFrom
000032E2 46FC 2700                  		move	#$2700,sr
000032E6 6100 E1FC                  		bsr.w	ClearScreen
000032EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000032F0 4DF9 00C0 0000             		lea	($C00000).l,a6
000032F6 47F8 F708                  		lea	($FFFFF708).w,a3
000032FA 49F8 A440                  		lea	($FFFFA440).w,a4
000032FE 343C 6000                  		move.w	#$6000,d2
00003302 6100 0000                  		bsr.w	LoadTilesFromStart2
00003306 43F9 00FF 0000             		lea	($FF0000).l,a1
0000330C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003312 303C 0000                  		move.w	#0,d0
00003316 6100 E626                  		bsr.w	EniDec
0000331A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003320 203C 4206 0003             		move.l	#$42060003,d0
00003326 7221                       		moveq	#$21,d1
00003328 7415                       		moveq	#$15,d2
0000332A 6100 E314                  		bsr.w	ShowVDPGraphics
0000332E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003338 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000333E 6100 E320                  		bsr.w	NemDec
00003342 7001                       		moveq	#1,d0		; load title screen pallet
00003344 6100 EFD6                  		bsr.w	PalLoad1
00003348 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000334C 6100 E26E                  		bsr.w	PlaySound_Special
00003350 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003356 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000335C 43F8 D080                  		lea	($FFFFD080).w,a1
00003360 7000                       		moveq	#0,d0
00003362 323C 0007                  		move.w	#7,d1
00003366                            
00003366                            Title_ClrObjRam2:
00003366 22C0                       		move.l	d0,(a1)+
00003368 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
0000336C                            
0000336C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003372 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003378 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000337E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003384 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000338A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003390 4EB9 0000 0000             		jsr	ObjectsLoad
00003396 6100 0000                  		bsr.w	DeformBgLayer
0000339A 4EB9 0000 0000             		jsr	BuildSprites
000033A0 7000                       		moveq	#0,d0
000033A2 6100 E42E                  		bsr.w	LoadPLC2
000033A6 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000033AC 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000033B2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000033B6 0000 0040                  		ori.b	#$40,d0
000033BA 33C0 00C0 0004             		move.w	d0,($C00004).l
000033C0 6100 EC0A                  		bsr.w	Pal_FadeTo
000033C4                            
000033C4                            loc_317C:
000033C4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033CA 6100 F824                  		bsr.w	DelayProgram
000033CE 4EB9 0000 0000             		jsr	ObjectsLoad
000033D4 6100 0000                  		bsr.w	DeformBgLayer
000033D8 4EB9 0000 0000             		jsr	BuildSprites
000033DE 6100 E79C                  		bsr.w	PalCycle_Title
000033E2 6100 E428                  		bsr.w	RunPLC_RAM
000033E6 3038 D008                  		move.w	($FFFFD008).w,d0
000033EA 5440                       		addq.w	#2,d0
000033EC 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000033F0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000033F4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000033F6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000033FC 4E75                       		rts	
000033FE                            ; ===========================================================================
000033FE                            
000033FE                            Title_ChkRegion:
000033FE 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003402 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003404 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000340A 6000                       		bra.s	Title_EnterCheat
0000340C                            ; ===========================================================================
0000340C                            
0000340C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000340C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003412                            
00003412                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003412 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003416 D0C0                       		adda.w	d0,a0
00003418 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000341C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003420 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003422 6600                       		bne.s	loc_3210	; if not, branch
00003424 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003428 4A00                       		tst.b	d0
0000342A 6600                       		bne.s	Title_CountC
0000342C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003430 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003434 E249                       		lsr.w	#1,d1
00003436 0241 0003                  		andi.w	#3,d1
0000343A 6700                       		beq.s	Title_PlayRing
0000343C 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003440 6A00                       		bpl.s	Title_PlayRing
00003442 7201                       		moveq	#1,d1
00003444 1181 1001                  		move.b	d1,1(a0,d1.w)
00003448                            
00003448                            Title_PlayRing:
00003448 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000344E 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003452 6100 E168                  		bsr.w	PlaySound_Special
00003456 6000                       		bra.s	Title_CountC
00003458                            ; ===========================================================================
00003458                            
00003458                            loc_3210:				; XREF: Title_EnterCheat
00003458 4A00                       		tst.b	d0
0000345A 6700                       		beq.s	Title_CountC
0000345C 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003462 6700                       		beq.s	Title_CountC
00003464 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000346A                            
0000346A                            Title_CountC:
0000346A 1038 F605                  		move.b	($FFFFF605).w,d0
0000346E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003472 6700                       		beq.s	loc_3230	; if not, branch
00003474 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003478                            
00003478                            loc_3230:
00003478 4A78 F614                  		tst.w	($FFFFF614).w
0000347C 6700 0000                  		beq.w	Demo
00003480 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003486 6700 FF3C                  		beq.w	loc_317C	; if not, branch
0000348A                            
0000348A                            Title_ChkLevSel:
0000348A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000348E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003492 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003498 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000349C 7002                       		moveq	#2,d0
0000349E 6100 EE98                  		bsr.w	PalLoad2	; load level select pallet
000034A2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000034A6 7000                       		moveq	#0,d0
000034A8 323C 00DF                  		move.w	#$DF,d1
000034AC                            
000034AC                            Title_ClrScroll:
000034AC 22C0                       		move.l	d0,(a1)+
000034AE 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000034B2                            
000034B2 21C0 F616                  		move.l	d0,($FFFFF616).w
000034B6 46FC 2700                  		move	#$2700,sr
000034BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000034C0 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000034CA 323C 03FF                  		move.w	#$3FF,d1
000034CE                            
000034CE                            Title_ClrVram:
000034CE 2C80                       		move.l	d0,(a6)
000034D0 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000034D4                            
000034D4 6100 0000                  		bsr.w	LevSelTextLoad
000034D8                            		
000034D8                            		; sound test fix
000034D8 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000034DC 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000034E2 363C E65F                  		move.w	#$E680-$21,d3
000034E6 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000034EA 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000034EE 6000 0000                  		bra.w	LevelSelect
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            ; Level	Select
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            YouAreAnIdiot:
000034F2 6100 DFF0                  		bsr.w	ClearScreen
000034F6                            		
000034F6 4DF9 00C0 0004             		lea	($C00004).l,a6
000034FC 3CBC 8700                  		move.w	#$8700,(a6) ; first colour is bg now
00003500                            		
00003500 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000350A 41F9 0000 0000             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00003510 6100 E14E                  		bsr.w	NemDec
00003514 43F9 00FF 0000             		lea	($FF0000).l,a1
0000351A 41F9 0000 0000             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00003520 303C 0000                  		move.w	#0,d0
00003524 6100 E418                  		bsr.w	EniDec
00003528 43F9 00FF 0000             		lea	($FF0000).l,a1
0000352E 203C 4304 0003             		move.l	#$43040003,d0
00003534 7223                       		moveq	#35,d1
00003536 740D                       		moveq	#13,d2
00003538 6100 E106                  		bsr.w	ShowVDPGraphics
0000353C 7014                       		moveq	#20,d0
0000353E 6100 EDF8                  		bsr.w	PalLoad2	; load Sega logo pallet
00003542                            		
00003542 303C 00E5                  		move.w	#$E5,d0		; YOU ARE AN IDIOT BOOM
00003546 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000354A                            	@wait:
0000354A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003550 6100 F69E                  		bsr.w	DelayProgram
00003554 60F4                       		bra.s	@wait
00003556                            LevelSelect:
00003556 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000355C 6100 F692                  		bsr.w	DelayProgram
00003560 6100 0000                  		bsr.w	LevSelControls
00003564 6100 E2A6                  		bsr.w	RunPLC_RAM
00003568 4AB8 F680                  		tst.l	($FFFFF680).w
0000356C 66E8                       		bne.s	LevelSelect
0000356E 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003574 67E0                       		beq.s	LevelSelect	; if not, branch
00003576 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000357A 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
0000357E 6700 FF72                  		beq.w	YouAreAnIdiot	; if not, dont blow this place up
00003582                            		
00003582 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003586 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003588                            		
00003588 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000358C 0640 0080                  		addi.w	#$80,d0
00003590 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003594                            		
00003594 4EB9 0000 0000             		jsr		ShowNow_Playing
0000359A 60BA                       		bra.s	LevelSelect
0000359C                            ; ===========================================================================
0000359C                            
0000359C                            LevSel_Ending:				; XREF: LevelSelect
0000359C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000035A2 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000035A8 4E75                       		rts	
000035AA                            ; ===========================================================================
000035AA                            
000035AA                            LevSel_Credits:				; XREF: LevelSelect
000035AA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000035B0 103C 0091                  		move.b	#$91,d0
000035B4 6100 E006                  		bsr.w	PlaySound_Special ; play credits music
000035B8 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000035BE 4E75                       		rts	
000035C0                            ; ===========================================================================
000035C0                            
000035C0                            LevSel_Level_SS:			; XREF: LevelSelect
000035C0 D040                       		add.w	d0,d0
000035C2 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000035C6 6B00 FF8E                  		bmi.w	LevelSelect
000035CA 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000035CE 6600                       		bne.s	LevSel_Level	; if not, branch
000035D0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000035D6 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000035DA 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000035E0 7000                       		moveq	#0,d0
000035E2 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000035E6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000035EA 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000035EE 4E75                       		rts	
000035F0                            ; ===========================================================================
000035F0                            
000035F0                            LevSel_Level:				; XREF: LevSel_Level_SS
000035F0 0240 3FFF                  		andi.w	#$3FFF,d0
000035F4 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000035F8                            
000035F8                            PlayLevel:				; XREF: ROM:00003246j ...
000035F8 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000035FE 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003604 7000                       		moveq	#0,d0
00003606 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000360A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000360E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003612 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003616 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000361A 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
0000361E 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003622 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003626 103C 00E0                  		move.b	#$E0,d0
0000362A 6100 DF90                  		bsr.w	PlaySound_Special ; fade out music
0000362E 4E75                       		rts	
00003630                            ; ===========================================================================
00003630                            ; ---------------------------------------------------------------------------
00003630                            ; Level	select - level pointers
00003630                            ; ---------------------------------------------------------------------------
00003630                            LSelectPointers:
00003630                            		incbin	misc\ls_point.bin
0000365A                            		even
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            ; Level	select codes
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            LevelSelectCode_J:
0000365A                            		incbin	misc\ls_jcode.bin
00003660                            		even
00003660                            
00003660                            LevelSelectCode_US:
00003660                            		incbin	misc\ls_ucode.bin
00003666                            		even
00003666                            ; ===========================================================================
00003666                            
00003666                            ; ---------------------------------------------------------------------------
00003666                            ; Demo mode
00003666                            ; ---------------------------------------------------------------------------
00003666                            
00003666                            Demo:					; XREF: TitleScreen
00003666 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000366C                            
0000366C                            loc_33B6:				; XREF: loc_33E4
0000366C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003672 6100 F57C                  		bsr.w	DelayProgram
00003676 6100 0000                  		bsr.w	DeformBgLayer
0000367A 6100 E4E0                  		bsr.w	PalCycle_Load
0000367E 6100 E18C                  		bsr.w	RunPLC_RAM
00003682 3038 D008                  		move.w	($FFFFD008).w,d0
00003686 5440                       		addq.w	#2,d0
00003688 31C0 D008                  		move.w	d0,($FFFFD008).w
0000368C 0C40 1C00                  		cmpi.w	#$1C00,d0
00003690 6500                       		bcs.s	loc_33E4
00003692 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003698 4E75                       		rts	
0000369A                            ; ===========================================================================
0000369A                            
0000369A                            loc_33E4:				; XREF: Demo
0000369A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000036A0 6600 FDE8                  		bne.w	Title_ChkLevSel	; if yes, branch
000036A4 4A78 F614                  		tst.w	($FFFFF614).w
000036A8 6600 FFC2                  		bne.w	loc_33B6
000036AC 103C 00E0                  		move.b	#$E0,d0
000036B0 6100 DF0A                  		bsr.w	PlaySound_Special ; fade out music
000036B4 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000036B8 0240 0007                  		andi.w	#7,d0
000036BC D040                       		add.w	d0,d0
000036BE 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000036C2 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000036C6 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000036CA 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000036D0 6500                       		bcs.s	loc_3422	; if yes, branch
000036D2 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000036D8                            
000036D8                            loc_3422:
000036D8 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000036DE 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000036E4 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000036E8 6600                       		bne.s	Demo_Level	; if not, branch
000036EA 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000036F0 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000036F4 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000036F8                            
000036F8                            Demo_Level:
000036F8 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000036FE 7000                       		moveq	#0,d0
00003700 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003704 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003708 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000370C 4E75                       		rts	
0000370E                            ; ===========================================================================
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            ; Levels used in demos
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003716                            		even
00003716                            
00003716                            ; ---------------------------------------------------------------------------
00003716                            ; Subroutine to	change what you're selecting in the level select
00003716                            ; ---------------------------------------------------------------------------
00003716                            
00003716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003716                            
00003716                            
00003716                            LevSelControls:				; XREF: LevelSelect
00003716 1238 F605                  		move.b	($FFFFF605).w,d1
0000371A 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000371E 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003720 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003724 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003726                            
00003726                            LevSel_UpDown:
00003726 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000372C 1238 F604                  		move.b	($FFFFF604).w,d1
00003730 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003734 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003736 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000373A 0801 0000                  		btst	#0,d1		; is up	pressed?
0000373E 6700                       		beq.s	LevSel_Down	; if not, branch
00003740 5346                       		subq.w	#1,d6		; move up 1 selection
00003742 6400                       		bcc.s	LevSel_Down
00003744 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003746                            
00003746                            LevSel_Down:
00003746 0801 0001                  		btst	#1,d1		; is down pressed?
0000374A 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000374C 5246                       		addq.w	#1,d6		; move down 1 selection
0000374E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003752 6500                       		bcs.s	LevSel_Refresh
00003754 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003756 6000                       		bra.s	LevSel_Refresh
00003758                            		
00003758                            LevSel_GoLR:
00003758 0801 0002                  		btst	#2,d1		; is left pressed?
0000375C 6700                       		beq.s	LevSel_GoRight	; if not, branch
0000375E 0446 0000                  		sub.w	#lsrow2size,d6
00003762 64E2                       		bcc.s	LevSel_Down
00003764 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003768 6000                       		bra.s	LevSel_Refresh
0000376A                            LevSel_GoRight:
0000376A 0646 0000                  		add.w	#lsrow1size,d6
0000376E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003772 6500                       		bcs.s	LevSel_Refresh
00003774 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003778                            ; ===========================================================================
00003778                            LevSel_Refresh:
00003778 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000377C 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003780 363C C65F                  		move.w	#$C680-$21,d3
00003784 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003788 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000378C 4E75                       		rts	
0000378E                            		
0000378E                            LevSel_SndTest:				; XREF: LevSelControls
0000378E 1238 F605                  		move.b	($FFFFF605).w,d1
00003792 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003796 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003798 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is	item $14 selected?
0000379E 66B8                       		bne.s	LevSel_GoLR	; if not, branch
000037A0                            		
000037A0 3038 FF84                  		move.w	($FFFFFF84).w,d0
000037A4 0801 0002                  		btst	#2,d1		; is left pressed?
000037A8 6700                       		beq.s	LevSel_Right	; if not, branch
000037AA 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000037AC 6400                       		bcc.s	LevSel_Right
000037AE 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000037B0                            
000037B0                            LevSel_Right:
000037B0 0801 0003                  		btst	#3,d1		; is right pressed?
000037B4 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000037B6 5240                       		addq.w	#1,d0		; add 1	to sound test
000037B8 0C40 0050                  		cmpi.w	#$50,d0
000037BC 6500                       		bcs.s	LevSel_Refresh2
000037BE 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000037C0                            
000037C0                            LevSel_Refresh2:
000037C0 363C C65F                  		move.w	#$C680-$21,d3
000037C4 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000037C8 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000037CC                            
000037CC                            LevSel_NoMove:
000037CC 4E75                       		rts	
000037CE                            ; End of function LevSelControls
000037CE                            
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            ; Subroutine to load level select text
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            
000037CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037CE =60860003                  lsscrpos = $60860003
000037CE =00240000                  lsoff = $240000
000037CE =64C00003                  lsstpos = lsscrpos+$43A0000
000037CE                            
000037CE                            LevSelTextLoad_loop:
000037CE 2D44 0004                  		move.l	d4,4(a6)
000037D2 6100 0000                  		bsr.w	LevSel_ChgLine
000037D6 0684 0080 0000             		addi.l	#$800000,d4
000037DC 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000037E0 4E75                       		rts
000037E2                            LevSelTextLoad:				; XREF: TitleScreen
000037E2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000037E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000037EE 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037F2 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000037F8                            		
000037F8 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000037FC 61D0                       		bsr.s	LevSelTextLoad_loop
000037FE                            		
000037FE                            		
000037FE 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003804 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003808 61C4                       		bsr.s	LevSelTextLoad_loop
0000380A 363C C65F                  		move.w	#$C680-$21,d3
0000380E                            		
0000380E                            LevSelHighlightCode:
0000380E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003814 7000                       		moveq	#0,d0
00003816 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000381A 3200                       		move.w	d0,d1
0000381C 283C 6086 0003             		move.l	#lsscrpos,d4
00003822                            		
00003822 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003826 6D00                       		blt.s	@notsecond
00003828                            		
00003828 0440 0000                  		sub.w	#lsrow1size,d0
0000382C 0684 0024 0000             		addi.l	#lsoff,d4
00003832                            	@notsecond:
00003832 EF48                       		lsl.w	#7,d0
00003834 4840                       		swap	d0
00003836 D880                       		add.l	d0,d4
00003838 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000383E E749                       		lsl.w	#3,d1
00003840 D241                       		add.w	d1,d1
00003842 D2C1                       		adda.w	d1,a1
00003844 2D44 0004                  		move.l	d4,4(a6)
00003848 6100 0000                  		bsr.w	LevSel_ChgLine
0000384C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003852 6700                       		beq.s	LevSelSndTest
00003854 4E75                       		rts
00003856                            
00003856                            LevSelSndTest:
00003856 0643 0030                  		add.w	#$30,d3
0000385A 23FC 64C0 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003864 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003868 0640 0080                  		addi.w	#$80,d0
0000386C 1400                       		move.b	d0,d2
0000386E E808                       		lsr.b	#4,d0
00003870 6100 0000                  		bsr.w	LevSel_ChgSnd
00003874 1002                       		move.b	d2,d0
00003876 6100 0000                  		bsr.w	LevSel_ChgSnd
0000387A 4E75                       		rts	
0000387C                            ; End of function LevSelTextLoad
0000387C                            
0000387C                            
0000387C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000387C                            
0000387C                            
0000387C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000387C 0240 000F                  		andi.w	#$F,d0
00003880 0C00 000A                  		cmpi.b	#$A,d0
00003884 6500                       		bcs.s	loc_3580
00003886 5E00                       		addi.b	#7,d0
00003888                            
00003888                            loc_3580:
00003888 D043                       		add.w	d3,d0
0000388A 3C80                       		move.w	d0,(a6)
0000388C 4E75                       		rts	
0000388E                            ; End of function LevSel_ChgSnd
0000388E                            
0000388E                            
0000388E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000388E                            
0000388E                            
0000388E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000388E 740F                       		moveq	#$10-1,d2		; number of characters per line
00003890                            
00003890                            @loop:
00003890 7000                       		moveq	#0,d0
00003892 1019                       		move.b	(a1)+,d0
00003894 0C00 0020                  		cmpi.b	#$20,d0
00003898 6E00                       		bgt.s	@draw
0000389A 3CBC 0000                  		move.w	#0,(a6)
0000389E 51CA FFF0                  		dbf	d2,@loop
000038A2 4E75                       		rts	
000038A4                            ; ===========================================================================
000038A4                            
000038A4                            @draw:				; XREF: LevSel_ChgLine
000038A4 D043                       		add.w	d3,d0
000038A6 3C80                       		move.w	d0,(a6)
000038A8 51CA FFE6                  		dbf	d2,@loop
000038AC 4E75                       		rts	
000038AE                            ; End of function LevSel_ChgLine
000038AE                            		
000038AE                            CStringSlop_draw:
000038AE D043                       		add.w	d3,d0
000038B0 3C80                       		move.w	d0,(a6)
000038B2                            CStringSlop:				; XREF: LevSelTextLoad
000038B2 7000                       		moveq	#0,d0
000038B4 1019                       		move.b	(a1)+,d0
000038B6 0C00 0020                  		cmpi.b	#$20,d0
000038BA 6EF2                       		bgt.s	CStringSlop_draw
000038BC 4A00                       		tst.b	d0
000038BE 6700                       		beq.s	@end
000038C0 3CBC 0000                  		move.w	#0,(a6)
000038C4 60EC                       		bra.s	CStringSlop
000038C6                            	@end:
000038C6 4E75                       		rts
000038C8                            ; End of function LevSel_ChgLine
000038C8                            
000038C8                            ; ===========================================================================
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            LevelMenuText:	
000038C8 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000038D8 2020 2020 2020 2020 2020+          dc.b    "               2"
000038E8 2020 2020 2020 2020 2020+          dc.b    "               3"
000038F8 494F 4C42 494B 4520 4649+          dc.b    "IOLBIKE FILE   1"
00003908 2045 4747 5350 4C20 2020+          dc.b    " EGGSPL        2"
00003918 2020 2020 2020 2020 2020+          dc.b    "               3"
00003928 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003938 2020 2020 2020 2020 2020+          dc.b    "               2"
00003948 2020 2020 2020 2020 2020+          dc.b    "               3"
00003958 444F 4E54 2047 4554 2052+          dc.b    "DONT GET RID   1"
00003968 204F 4620 5448 4953 2121+          dc.b    " OF THIS!!     2"
00003978 2020 2020 2020 2020 2020+          dc.b    "               3"
00003988                            LMTSecondRow:
00003988 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003998 2042 4152 4E45 5920 2020+          dc.b    " BARNEY        2"
000039A8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039B8 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
000039C8 2020 2020 2020 2020 2020+          dc.b    "               2"
000039D8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039E8 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
000039F8 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003A08 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
00003A18 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003A28 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003A38                            LMTSelectableEnd:
00003A38 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003A48                            LMTEnd:
00003A48                            
00003A48                            
00003A48 =0000000C                  lsrow1size = (LMTSecondRow-LevelMenuText)/16
00003A48 =0000000C                  lsrow2size = (LMTEnd-LMTSecondRow)/16
00003A48 =00000016                  lsselectable = ((LMTSelectableEnd-LevelMenuText)/16)-1
00003A48                            ; just to not break these
00003A48 =00000014                  lssndtest = lsrow2size+8
00003A48 =00000015                  lswifi = lsrow2size+9
00003A48                            
00003A48 =6C820003                  nppos = $6C820003
00003A48                            Now_Playing:
00003A48 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003A58                            		even
00003A58                            NP_Track:
00003A58 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003A60                            		even
00003A60                            NP_SFX:
00003A60 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003A68                            		even
00003A68                            
00003A68                            ShowNow_Playing:
00003A68 1C00                       		move.b	d0,d6
00003A6A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003A6E 43FA FFD8                  		lea	Now_Playing(pc),a1
00003A72 4DF9 00C0 0000             		lea		($C00000).l,a6
00003A78 2D7C 6C82 0003 0004        		move.l	#nppos,4(a6)
00003A80 6100 FE30                  		bsr.w	CStringSlop
00003A84                            		
00003A84 43FA FFD2                  		lea	NP_Track(pc),a1
00003A88 0C06 00A0                  		cmpi.b	#$A0,d6
00003A8C 6D00                       		blt.s	@track
00003A8E                            		
00003A8E 43FA FFD0                  		lea	NP_SFX(pc),a1
00003A92                            	@track:
00003A92 6100 FE1E                  		bsr.w	CStringSlop
00003A96                            		
00003A96 0643 0030                  		add.w	#$30,d3
00003A9A 1006                       		move.b	d6,d0
00003A9C 1400                       		move.b	d0,d2
00003A9E E808                       		lsr.b	#4,d0
00003AA0 6100 FDDA                  		bsr.w	LevSel_ChgSnd
00003AA4 1002                       		move.b	d2,d0
00003AA6 6100 FDD4                  		bsr.w	LevSel_ChgSnd
00003AAA 4E75                       		rts	
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            ; Music	playlist
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            MusicList1:	incbin	misc\muslist1.bin
00003AB4                            		even
00003AB4                            MusicList2:	incbin	misc\muslist2.bin
00003ABA                            		even
00003ABA                            MusicList3:	incbin	misc\muslist3.bin
00003AC0                            		even
00003AC0                            MusicList4:	incbin	misc\muslist4.bin
00003AC6                            		even
00003AC6                            ; ===========================================================================
00003AC6                            
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            ; Level
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            
00003AC6                            Level:					; XREF: GameModeArray
00003AC6 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003ACC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AD0 6B00                       		bmi.s	loc_37B6
00003AD2 103C 00E0                  		move.b	#$E0,d0
00003AD6 6100 DAE4                  		bsr.w	PlaySound_Special ; fade out music
00003ADA                            
00003ADA                            loc_37B6:
00003ADA 6100 DD22                  		bsr.w	ClearPLC
00003ADE 6100 E592                  		bsr.w	Pal_FadeFrom
00003AE2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AE6 6B00                       		bmi.s	Level_ClrRam
00003AE8 46FC 2700                  		move	#$2700,sr
00003AEC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003AF6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003AFC 6100 DB62                  		bsr.w	NemDec
00003B00 46FC 2300                  		move	#$2300,sr
00003B04 7000                       		moveq	#0,d0
00003B06 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B0A E948                       		lsl.w	#4,d0
00003B0C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003B12 45F2 0000                  		lea	(a2,d0.w),a2
00003B16 7000                       		moveq	#0,d0
00003B18 1012                       		move.b	(a2),d0
00003B1A 6700                       		beq.s	loc_37FC
00003B1C 6100 DC82                  		bsr.w	LoadPLC		; load level patterns
00003B20                            
00003B20                            loc_37FC:
00003B20 7001                       		moveq	#1,d0
00003B22 6100 DC7C                  		bsr.w	LoadPLC		; load standard	patterns
00003B26                            
00003B26                            Level_ClrRam:
00003B26 43F8 D000                  		lea	($FFFFD000).w,a1
00003B2A 7000                       		moveq	#0,d0
00003B2C 323C 07FF                  		move.w	#$7FF,d1
00003B30                            
00003B30                            Level_ClrObjRam:
00003B30 22C0                       		move.l	d0,(a1)+
00003B32 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003B36                            
00003B36 43F8 F628                  		lea	($FFFFF628).w,a1
00003B3A 7000                       		moveq	#0,d0
00003B3C 323C 0015                  		move.w	#$15,d1
00003B40                            
00003B40                            Level_ClrVars:
00003B40 22C0                       		move.l	d0,(a1)+
00003B42 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003B46                            
00003B46 43F8 F700                  		lea	($FFFFF700).w,a1
00003B4A 7000                       		moveq	#0,d0
00003B4C 323C 003F                  		move.w	#$3F,d1
00003B50                            
00003B50                            Level_ClrVars2:
00003B50 22C0                       		move.l	d0,(a1)+
00003B52 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003B56                            
00003B56 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003B5A 7000                       		moveq	#0,d0
00003B5C 323C 0047                  		move.w	#$47,d1
00003B60                            
00003B60                            Level_ClrVars3:
00003B60 22C0                       		move.l	d0,(a1)+
00003B62 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003B66                            
00003B66 46FC 2700                  		move	#$2700,sr
00003B6A 6100 D978                  		bsr.w	ClearScreen
00003B6E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003B74 3CBC 8B03                  		move.w	#$8B03,(a6)
00003B78 3CBC 8230                  		move.w	#$8230,(a6)
00003B7C 3CBC 8407                  		move.w	#$8407,(a6)
00003B80 3CBC 857C                  		move.w	#$857C,(a6)
00003B84 3CBC 9001                  		move.w	#$9001,(a6)
00003B88 3CBC 8004                  		move.w	#$8004,(a6)
00003B8C 3CBC 8720                  		move.w	#$8720,(a6)
00003B90 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003B96 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003B9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BA0 6600                       		bne.s	Level_LoadPal	; if not, branch
00003BA2 3CBC 8014                  		move.w	#$8014,(a6)
00003BA6 7000                       		moveq	#0,d0
00003BA8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003BAC D040                       		add.w	d0,d0
00003BAE 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003BB4 3031 0000                  		move.w	(a1,d0.w),d0
00003BB8 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003BBC 31C0 F648                  		move.w	d0,($FFFFF648).w
00003BC0 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003BC4 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003BC8 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003BCC 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003BD2                            
00003BD2                            Level_LoadPal:
00003BD2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003BD8 46FC 2300                  		move	#$2300,sr
00003BDC 7003                       		moveq	#3,d0
00003BDE 6100 E758                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003BE2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BE8 6600                       		bne.s	Level_GetBgm	; if not, branch
00003BEA 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00003BEC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003BF2 6600                       		bne.s	Level_WaterPal	; if not, branch
00003BF4 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003BF6                            
00003BF6                            Level_WaterPal:
00003BF6 6100 E758                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003BFA 4A38 FE30                  		tst.b	($FFFFFE30).w
00003BFE 6700                       		beq.s	Level_GetBgm
00003C00 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003C06                            
00003C06                            ; NineKode begins here - How to play different songs on different acts
00003C06                             
00003C06                            Level_GetBgm:
00003C06 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C0A 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003C0E 7000                       		moveq	#0,d0
00003C10 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C14                             
00003C14 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003C1A 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003C1C 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003C22 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C24                             
00003C24                            Level_GetBgm2:
00003C24 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003C2A 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003C2C 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003C32 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C34                             
00003C34                            Level_GetBgm3:
00003C34 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003C3A 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003C3C 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003C42 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C44                             
00003C44                            Level_GetBgm4:
00003C44 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003C4A 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003C4C 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003C52                             
00003C52                            Level_PlayBgm:
00003C52 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003C56 6100 D95E                  		bsr.w	PlaySound	; play music
00003C5A 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003C60                             
00003C60                            ; NineKode ends here
00003C60                            
00003C60                            Level_TtlCard:
00003C60 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003C66 6100 EF88                  		bsr.w	DelayProgram
00003C6A 4EB9 0000 0000             		jsr	ObjectsLoad
00003C70 4EB9 0000 0000             		jsr	BuildSprites
00003C76 6100 DB94                  		bsr.w	RunPLC_RAM
00003C7A 3038 D108                  		move.w	($FFFFD108).w,d0
00003C7E B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003C82 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003C84 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003C88 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003C8A 4EB9 0000 0000             		jsr	Hud_Base
00003C90                            
00003C90                            loc_3946:
00003C90 7003                       		moveq	#3,d0
00003C92 6100 E688                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003C96 6100 0000                  		bsr.w	LevelSizeLoad
00003C9A 6100 0000                  		bsr.w	DeformBgLayer
00003C9E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003CA4 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003CA8 6100 0000                  		bsr.w	LoadTilesFromStart
00003CAC 4EB9 0000 0000             		jsr	FloorLog_Unk
00003CB2 6100 0000                  		bsr.w	ColIndexLoad
00003CB6 6100 0000                  		bsr.w	LZWaterEffects
00003CBA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003CC0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CC4 6B00                       		bmi.s	Level_ChkDebug
00003CC6 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003CCC                            
00003CCC                            Level_ChkDebug:
00003CCC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003CD0 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CD2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003CD8 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CDA 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003CE0                            
00003CE0                            Level_ChkWater:
00003CE0 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003CE6 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003CEC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CF2 6600                       		bne.s	Level_LoadObj	; if not, branch
00003CF4 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003CFA 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003D00 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003D06 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003D0C                            
00003D0C                            Level_LoadObj:
00003D0C 4EB9 0000 0000             		jsr	ObjPosLoad
00003D12 4EB9 0000 0000             		jsr	ObjectsLoad
00003D18 4EB9 0000 0000             		jsr	BuildSprites
00003D1E 7000                       		moveq	#0,d0
00003D20 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003D24 6600                       		bne.s	loc_39E8	; if yes, branch
00003D26 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D2A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D2E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003D32                            
00003D32                            loc_39E8:
00003D32 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003D36 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003D3A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003D3E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003D42                            		; move.b	d0,($FFFFFE2F).w
00003D42 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003D48 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003D4C 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003D50 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003D54 6100 0000                  		bsr.w	OscillateNumInit
00003D58 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003D5E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003D64 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003D6A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003D70 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003D76 7000                       		moveq	#0,d0
00003D78 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D7C E548                       		lsl.w	#2,d0
00003D7E 2271 0000                  		movea.l	(a1,d0.w),a1
00003D82 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003D86 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003D88 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003D8E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003D92 5340                       		subq.w	#1,d0
00003D94 E548                       		lsl.w	#2,d0
00003D96 2271 0000                  		movea.l	(a1,d0.w),a1
00003D9A                            
00003D9A                            Level_Demo:
00003D9A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003DA0 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003DA4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003DAA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DAE 6A00                       		bpl.s	Level_ChkWaterPal
00003DB0 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003DB6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003DBC 6600                       		bne.s	Level_ChkWaterPal
00003DBE 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003DC4                            
00003DC4                            Level_ChkWaterPal:
00003DC4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003DCA 6600                       		bne.s	Level_Delay	; if not, branch
00003DCC 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003DCE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003DD4 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003DD6 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003DD8                            
00003DD8                            Level_WaterPal2:
00003DD8 6100 E592                  		bsr.w	PalLoad4_Water
00003DDC                            
00003DDC                            Level_Delay:
00003DDC 323C 0003                  		move.w	#3,d1
00003DE0                            
00003DE0                            Level_DelayLoop:
00003DE0 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003DE6 6100 EE08                  		bsr.w	DelayProgram
00003DEA 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003DEE                            
00003DEE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003DF4 6100 E1DC                  		bsr.w	Pal_FadeTo2
00003DF8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DFC 6B00                       		bmi.s	Level_ClrCardArt
00003DFE 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003E02 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003E06 5838 D124                  		addq.b	#4,($FFFFD124).w
00003E0A 5838 D164                  		addq.b	#4,($FFFFD164).w
00003E0E 6000                       		bra.s	Level_StartGame
00003E10                            ; ===========================================================================
00003E10                            
00003E10                            Level_ClrCardArt:
00003E10 7002                       		moveq	#2,d0
00003E12 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
00003E18 7000                       		moveq	#0,d0
00003E1A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E1E 0640 0015                  		addi.w	#$15,d0
00003E22 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003E28                            
00003E28                            Level_StartGame:
00003E28 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003E2E                            
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            ; Main level loop (when	all title card and loading sequences are finished)
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            
00003E2E                            Level_MainLoop:
00003E2E 6100 D798                  		bsr.w	PauseGame
00003E32 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003E38 6100 EDB6                  		bsr.w	DelayProgram
00003E3C 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003E40 6100 0000                  		bsr.w	MoveSonicInDemo
00003E44 6100 0000                  		bsr.w	LZWaterEffects
00003E48 4EB9 0000 0000             		jsr	ObjectsLoad
00003E4E 4A78 FE08                  		tst.w	($FFFFFE08).w
00003E52 6600                       		bne.s	loc_3B10
00003E54 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003E5A 6400                       		bcc.s	loc_3B14
00003E5C                            
00003E5C                            loc_3B10:
00003E5C 6100 0000                  		bsr.w	DeformBgLayer
00003E60                            
00003E60                            loc_3B14:
00003E60 4EB9 0000 0000             		jsr	BuildSprites
00003E66 4EB9 0000 0000             		jsr	ObjPosLoad
00003E6C 6100 DCEE                  		bsr.w	PalCycle_Load
00003E70 6100 D99A                  		bsr.w	RunPLC_RAM
00003E74 6100 0000                  		bsr.w	OscillateNumDo
00003E78 6100 0000                  		bsr.w	ChangeRingFrame
00003E7C 6100 0000                  		bsr.w	SignpostArtLoad
00003E80 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003E86 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003E88 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003E8C 6600 FC38                  		bne.w	Level		; if yes, branch
00003E90 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003E96 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003E9A 4E75                       		rts	
00003E9C                            ; ===========================================================================
00003E9C                            
00003E9C                            Level_ChkDemo:				; XREF: Level_MainLoop
00003E9C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003EA0 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003EA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003EA6 6700                       		beq.s	Level_EndDemo	; if not, branch
00003EA8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003EAE 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003EB2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EB8 4E75                       		rts	
00003EBA                            ; ===========================================================================
00003EBA                            
00003EBA                            Level_EndDemo:				; XREF: Level_ChkDemo
00003EBA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003EC0 6600                       		bne.s	loc_3B88	; if not, branch
00003EC2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EC8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003ECC 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003ECE 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003ED4                            
00003ED4                            loc_3B88:
00003ED4 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003EDA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003EE0 4278 F794                  		clr.w	($FFFFF794).w
00003EE4                            
00003EE4                            loc_3B98:
00003EE4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003EEA 6100 ED04                  		bsr.w	DelayProgram
00003EEE 6100 0000                  		bsr.w	MoveSonicInDemo
00003EF2 4EB9 0000 0000             		jsr	ObjectsLoad
00003EF8 4EB9 0000 0000             		jsr	BuildSprites
00003EFE 4EB9 0000 0000             		jsr	ObjPosLoad
00003F04 5378 F794                  		subq.w	#1,($FFFFF794).w
00003F08 6A00                       		bpl.s	loc_3BC8
00003F0A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003F10 6100 E180                  		bsr.w	Pal_FadeOut
00003F14                            
00003F14                            loc_3BC8:
00003F14 4A78 F614                  		tst.w	($FFFFF614).w
00003F18 66CA                       		bne.s	loc_3B98
00003F1A 4E75                       		rts	
00003F1C                            ; ===========================================================================
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            ; Subroutine to	do special water effects in Labyrinth Zone
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            
00003F1C                            LZWaterEffects:				; XREF: Level
00003F1C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003F22 6600                       		bne.s	locret_3C28	; if not, branch
00003F24 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003F2A 6400                       		bcc.s	LZMoveWater
00003F2C 6100 0000                  		bsr.w	LZWindTunnels
00003F30 6100 0000                  		bsr.w	LZWaterSlides
00003F34 6100 0000                  		bsr.w	LZDynamicWater
00003F38                            
00003F38                            LZMoveWater:
00003F38 4238 F64E                  		clr.b	($FFFFF64E).w
00003F3C 7000                       		moveq	#0,d0
00003F3E 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003F42 E248                       		lsr.w	#1,d0
00003F44 D078 F648                  		add.w	($FFFFF648).w,d0
00003F48 31C0 F646                  		move.w	d0,($FFFFF646).w
00003F4C 3038 F646                  		move.w	($FFFFF646).w,d0
00003F50 9078 F704                  		sub.w	($FFFFF704).w,d0
00003F54 6400                       		bcc.s	loc_3C1A
00003F56 4A40                       		tst.w	d0
00003F58 6A00                       		bpl.s	loc_3C1A
00003F5A 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003F60 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003F66                            
00003F66                            loc_3C1A:
00003F66 0C40 00DF                  		cmpi.w	#$DF,d0
00003F6A 6500                       		bcs.s	loc_3C24
00003F6C 303C 00DF                  		move.w	#$DF,d0
00003F70                            
00003F70                            loc_3C24:
00003F70 11C0 F625                  		move.b	d0,($FFFFF625).w
00003F74                            
00003F74                            locret_3C28:
00003F74 4E75                       		rts	
00003F76                            ; ===========================================================================
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            ; Labyrinth default water heights
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            WaterHeight:	incbin	misc\lz_heigh.bin
00003F7E                            		even
00003F7E                            ; ===========================================================================
00003F7E                            
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            ; Labyrinth dynamic water routines
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            
00003F7E                            LZDynamicWater:				; XREF: LZWaterEffects
00003F7E 7000                       		moveq	#0,d0
00003F80 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F84 D040                       		add.w	d0,d0
00003F86 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003F8A 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003F8E 7200                       		moveq	#0,d1
00003F90 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003F94 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003F98 9078 F648                  		sub.w	($FFFFF648).w,d0
00003F9C 6700                       		beq.s	locret_3C5A
00003F9E 6400                       		bcc.s	loc_3C56
00003FA0 4441                       		neg.w	d1
00003FA2                            
00003FA2                            loc_3C56:
00003FA2 D378 F648                  		add.w	d1,($FFFFF648).w
00003FA6                            
00003FA6                            locret_3C5A:
00003FA6 4E75                       		rts	
00003FA8                            ; ===========================================================================
00003FA8 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003FAA 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003FAC 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003FAE 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003FB0                            ; ===========================================================================
00003FB0                            
00003FB0                            DynWater_LZ1:				; XREF: DynWater_Index
00003FB0 3038 F700                  		move.w	($FFFFF700).w,d0
00003FB4 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003FB8 6600                       		bne.s	loc_3CD0
00003FBA 323C 00B8                  		move.w	#$B8,d1
00003FBE 0C40 0600                  		cmpi.w	#$600,d0
00003FC2 6500                       		bcs.s	loc_3CB4
00003FC4 323C 0108                  		move.w	#$108,d1
00003FC8 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003FCE 6500                       		bcs.s	loc_3CBA
00003FD0 0C40 0C00                  		cmpi.w	#$C00,d0
00003FD4 6500                       		bcs.s	loc_3CB4
00003FD6 323C 0318                  		move.w	#$318,d1
00003FDA 0C40 1080                  		cmpi.w	#$1080,d0
00003FDE 6500                       		bcs.s	loc_3CB4
00003FE0 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003FE6 323C 05C8                  		move.w	#$5C8,d1
00003FEA 0C40 1380                  		cmpi.w	#$1380,d0
00003FEE 6500                       		bcs.s	loc_3CB4
00003FF0 323C 03A8                  		move.w	#$3A8,d1
00003FF4 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003FF8 6600                       		bne.s	loc_3CB4
00003FFA 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004000                            
00004000                            loc_3CB4:
00004000 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004004 4E75                       		rts	
00004006                            ; ===========================================================================
00004006                            
00004006                            loc_3CBA:				; XREF: DynWater_LZ1
00004006 0C40 0C80                  		cmpi.w	#$C80,d0
0000400A 65F4                       		bcs.s	loc_3CB4
0000400C 323C 00E8                  		move.w	#$E8,d1
00004010 0C40 1500                  		cmpi.w	#$1500,d0
00004014 65EA                       		bcs.s	loc_3CB4
00004016 323C 0108                  		move.w	#$108,d1
0000401A 60E4                       		bra.s	loc_3CB4
0000401C                            ; ===========================================================================
0000401C                            
0000401C                            loc_3CD0:				; XREF: DynWater_LZ1
0000401C 5302                       		subq.b	#1,d2
0000401E 6600                       		bne.s	locret_3CF4
00004020 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004026 6400                       		bcc.s	locret_3CF4
00004028 323C 03A8                  		move.w	#$3A8,d1
0000402C 0C40 1300                  		cmpi.w	#$1300,d0
00004030 6500                       		bcs.s	loc_3CF0
00004032 323C 0108                  		move.w	#$108,d1
00004036 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000403C                            
0000403C                            loc_3CF0:
0000403C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004040                            
00004040                            locret_3CF4:
00004040 4E75                       		rts	
00004042                            ; ===========================================================================
00004042                            
00004042                            DynWater_LZ2:				; XREF: DynWater_Index
00004042 3038 F700                  		move.w	($FFFFF700).w,d0
00004046 323C 0328                  		move.w	#$328,d1
0000404A 0C40 0500                  		cmpi.w	#$500,d0
0000404E 6500                       		bcs.s	loc_3D12
00004050 323C 03C8                  		move.w	#$3C8,d1
00004054 0C40 0B00                  		cmpi.w	#$B00,d0
00004058 6500                       		bcs.s	loc_3D12
0000405A 323C 0428                  		move.w	#$428,d1
0000405E                            
0000405E                            loc_3D12:
0000405E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004062 4E75                       		rts	
00004064                            ; ===========================================================================
00004064                            
00004064                            DynWater_LZ3:				; XREF: DynWater_Index
00004064 3038 F700                  		move.w	($FFFFF700).w,d0
00004068 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000406C 6600                       		bne.s	loc_3D5E
0000406E 323C 0900                  		move.w	#$900,d1
00004072 0C40 0600                  		cmpi.w	#$600,d0
00004076 6500                       		bcs.s	loc_3D54
00004078 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000407E 6500                       		bcs.s	loc_3D54
00004080 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004086 6400                       		bcc.s	loc_3D54
00004088 323C 04C8                  		move.w	#$4C8,d1
0000408C 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00004092 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004098 303C 00B7                  		move.w	#$B7,d0
0000409C 6100 D51E                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000040A0                            
000040A0                            loc_3D54:
000040A0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040A4 31C1 F648                  		move.w	d1,($FFFFF648).w
000040A8 4E75                       		rts	
000040AA                            ; ===========================================================================
000040AA                            
000040AA                            loc_3D5E:				; XREF: DynWater_LZ3
000040AA 5302                       		subq.b	#1,d2
000040AC 6600                       		bne.s	loc_3DA8
000040AE 323C 04C8                  		move.w	#$4C8,d1
000040B2 0C40 0770                  		cmpi.w	#$770,d0
000040B6 6500                       		bcs.s	loc_3DA2
000040B8 323C 0308                  		move.w	#$308,d1
000040BC 0C40 1400                  		cmpi.w	#$1400,d0
000040C0 6500                       		bcs.s	loc_3DA2
000040C2 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000040C8 6700                       		beq.s	loc_3D8E
000040CA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000040D0 6400                       		bcc.s	loc_3D8E
000040D2 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000040D8 6400                       		bcc.s	loc_3DA2
000040DA                            
000040DA                            loc_3D8E:
000040DA 323C 0508                  		move.w	#$508,d1
000040DE 31C1 F648                  		move.w	d1,($FFFFF648).w
000040E2 0C40 1770                  		cmpi.w	#$1770,d0
000040E6 6500                       		bcs.s	loc_3DA2
000040E8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000040EE                            
000040EE                            loc_3DA2:
000040EE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040F2 4E75                       		rts	
000040F4                            ; ===========================================================================
000040F4                            
000040F4                            loc_3DA8:
000040F4 5302                       		subq.b	#1,d2
000040F6 6600                       		bne.s	loc_3DD2
000040F8 323C 0508                  		move.w	#$508,d1
000040FC 0C40 1860                  		cmpi.w	#$1860,d0
00004100 6500                       		bcs.s	loc_3DCC
00004102 323C 0188                  		move.w	#$188,d1
00004106 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000410A 6400                       		bcc.s	loc_3DC6
0000410C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004110 6600                       		bne.s	loc_3DCC
00004112                            
00004112                            loc_3DC6:
00004112 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004118                            
00004118                            loc_3DCC:
00004118 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000411C 4E75                       		rts	
0000411E                            ; ===========================================================================
0000411E                            
0000411E                            loc_3DD2:
0000411E 5302                       		subq.b	#1,d2
00004120 6600                       		bne.s	loc_3E0E
00004122 323C 0188                  		move.w	#$188,d1
00004126 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000412A 6500                       		bcs.s	loc_3E04
0000412C 323C 0900                  		move.w	#$900,d1
00004130 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004134 6500                       		bcs.s	loc_3E04
00004136 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000413C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004142 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004148 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000414E 4E75                       		rts	
00004150                            ; ===========================================================================
00004150                            
00004150                            loc_3E04:
00004150 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004154 31C1 F648                  		move.w	d1,($FFFFF648).w
00004158 4E75                       		rts	
0000415A                            ; ===========================================================================
0000415A                            
0000415A                            loc_3E0E:
0000415A 0C40 1E00                  		cmpi.w	#$1E00,d0
0000415E 6500                       		bcs.s	locret_3E1A
00004160 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004166                            
00004166                            locret_3E1A:
00004166 4E75                       		rts	
00004168                            ; ===========================================================================
00004168                            
00004168                            DynWater_SBZ3:				; XREF: DynWater_Index
00004168 323C 0228                  		move.w	#$228,d1
0000416C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004172 6500                       		bcs.s	loc_3E2C
00004174 323C 04C8                  		move.w	#$4C8,d1
00004178                            
00004178                            loc_3E2C:
00004178 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000417C 4E75                       		rts
0000417E                            
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            ; Labyrinth Zone "wind tunnels"	subroutine
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            
0000417E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000417E                            
0000417E                            
0000417E                            LZWindTunnels:				; XREF: LZWaterEffects
0000417E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004182 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004186 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000418C 7000                       		moveq	#0,d0
0000418E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004192 E748                       		lsl.w	#3,d0
00004194 D4C0                       		adda.w	d0,a2
00004196 7200                       		moveq	#0,d1
00004198 4A38 FE11                  		tst.b	($FFFFFE11).w
0000419C 6600                       		bne.s	loc_3E56
0000419E 7201                       		moveq	#1,d1
000041A0 514A                       		subq.w	#8,a2
000041A2                            
000041A2                            loc_3E56:
000041A2 43F8 D000                  		lea	($FFFFD000).w,a1
000041A6                            
000041A6                            LZWind_Loop:
000041A6 3029 0008                  		move.w	8(a1),d0
000041AA B052                       		cmp.w	(a2),d0
000041AC 6500 0000                  		bcs.w	loc_3EF4
000041B0 B06A 0004                  		cmp.w	4(a2),d0
000041B4 6400 0000                  		bcc.w	loc_3EF4
000041B8 3429 000C                  		move.w	$C(a1),d2
000041BC B46A 0002                  		cmp.w	2(a2),d2
000041C0 6500                       		bcs.s	loc_3EF4
000041C2 B46A 0006                  		cmp.w	6(a2),d2
000041C6 6400                       		bcc.s	loc_3EF4
000041C8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000041CC 0200 003F                  		andi.b	#$3F,d0
000041D0 6600                       		bne.s	loc_3E90
000041D2 303C 00D0                  		move.w	#$D0,d0
000041D6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rushing water sound
000041DC                            
000041DC                            loc_3E90:
000041DC 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000041E0 6600 0000                  		bne.w	locret_3F0A
000041E4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000041EA 6400                       		bcc.s	loc_3F06
000041EC 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000041F2 0440 0080                  		subi.w	#$80,d0
000041F6 B052                       		cmp.w	(a2),d0
000041F8 6400                       		bcc.s	LZWind_Move
000041FA 7002                       		moveq	#2,d0
000041FC 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004202 6600                       		bne.s	loc_3EBA
00004204 4440                       		neg.w	d0
00004206                            
00004206                            loc_3EBA:
00004206 D169 000C                  		add.w	d0,$C(a1)
0000420A                            
0000420A                            LZWind_Move:
0000420A 5869 0008                  		addq.w	#4,8(a1)
0000420E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004214 337C 0000 0012             		move.w	#0,$12(a1)
0000421A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004220 08E9 0001 0022             		bset	#1,$22(a1)
00004226 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000422C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000422E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004232                            
00004232                            LZWind_MoveDown:
00004232 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004238 6700                       		beq.s	locret_3EF2	; if not, branch
0000423A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000423E                            
0000423E                            locret_3EF2:
0000423E 4E75                       		rts	
00004240                            ; ===========================================================================
00004240                            
00004240                            loc_3EF4:				; XREF: LZWindTunnels
00004240 504A                       		addq.w	#8,a2
00004242 51C9 FF62                  		dbf	d1,LZWind_Loop
00004246 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000424A 6700                       		beq.s	locret_3F0A
0000424C 137C 0000 001C             		move.b	#0,$1C(a1)
00004252                            
00004252                            loc_3F06:
00004252 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004256                            
00004256                            locret_3F0A:
00004256 4E75                       		rts	
00004258                            ; End of function LZWindTunnels
00004258                            
00004258                            ; ===========================================================================
00004258 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004260 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004272 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004280                            					; XREF: LZWindTunnels
00004280                            		even
00004280                            
00004280                            ; ---------------------------------------------------------------------------
00004280                            ; Labyrinth Zone water slide subroutine
00004280                            ; ---------------------------------------------------------------------------
00004280                            
00004280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004280                            
00004280                            
00004280                            LZWaterSlides:				; XREF: LZWaterEffects
00004280 43F8 D000                  		lea	($FFFFD000).w,a1
00004284 0829 0001 0022             		btst	#1,$22(a1)
0000428A 6600                       		bne.s	loc_3F6A
0000428C 3029 000C                  		move.w	$C(a1),d0
00004290 E248                       		lsr.w	#1,d0
00004292 0240 0380                  		andi.w	#$380,d0
00004296 1229 0008                  		move.b	8(a1),d1
0000429A 0241 007F                  		andi.w	#$7F,d1
0000429E D041                       		add.w	d1,d0
000042A0 45F8 A400                  		lea	($FFFFA400).w,a2
000042A4 1032 0000                  		move.b	(a2,d0.w),d0
000042A8 45FA 0000                  		lea	byte_3FCF(pc),a2
000042AC 7206                       		moveq	#6,d1
000042AE                            
000042AE                            loc_3F62:
000042AE B022                       		cmp.b	-(a2),d0
000042B0 57C9 FFFC                  		dbeq	d1,loc_3F62
000042B4 6700                       		beq.s	LZSlide_Move
000042B6                            
000042B6                            loc_3F6A:
000042B6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000042BA 6700                       		beq.s	locret_3F7A
000042BC 337C 0005 003E             		move.w	#5,$3E(a1)
000042C2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000042C6                            
000042C6                            locret_3F7A:
000042C6 4E75                       		rts	
000042C8                            ; ===========================================================================
000042C8                            
000042C8                            LZSlide_Move:				; XREF: LZWaterSlides
000042C8 0C41 0003                  		cmpi.w	#3,d1
000042CC 6400                       		bcc.s	loc_3F84
000042CE 4E71                       		nop	
000042D0                            
000042D0                            loc_3F84:
000042D0 08A9 0000 0022             		bclr	#0,$22(a1)
000042D6 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000042DA 1340 0014                  		move.b	d0,$14(a1)
000042DE 6A00                       		bpl.s	loc_3F9A
000042E0 08E9 0000 0022             		bset	#0,$22(a1)
000042E6                            
000042E6                            loc_3F9A:
000042E6 4229 0015                  		clr.b	$15(a1)
000042EA 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000042F0 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000042F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000042FA 0200 001F                  		andi.b	#$1F,d0
000042FE 6600                       		bne.s	locret_3FBE
00004300 303C 00D0                  		move.w	#$D0,d0
00004304 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play water sound
0000430A                            
0000430A                            locret_3FBE:
0000430A 4E75                       		rts	
0000430C                            ; End of function LZWaterSlides
0000430C                            
0000430C                            ; ===========================================================================
0000430C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000431B 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000431C                            		even
0000431C                            
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            ; Subroutine to	move Sonic in demo mode
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            
0000431C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000431C                            
0000431C                            
0000431C                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000431C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004320 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004322 4E75                       		rts	
00004324                            ; ===========================================================================
00004324                            
00004324                            ; This is an unused subroutine for recording a demo
00004324                            
00004324                            MoveDemo_Record:
00004324 43F9 0008 0000             		lea	($80000).l,a1
0000432A 3038 F790                  		move.w	($FFFFF790).w,d0
0000432E D2C0                       		adda.w	d0,a1
00004330 1038 F604                  		move.b	($FFFFF604).w,d0
00004334 B011                       		cmp.b	(a1),d0
00004336 6600                       		bne.s	loc_3FFA
00004338 5229 0001                  		addq.b	#1,1(a1)
0000433C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004342 6700                       		beq.s	loc_3FFA
00004344 4E75                       		rts	
00004346                            ; ===========================================================================
00004346                            
00004346                            loc_3FFA:				; XREF: MoveDemo_Record
00004346 1340 0002                  		move.b	d0,2(a1)
0000434A 137C 0000 0003             		move.b	#0,3(a1)
00004350 5478 F790                  		addq.w	#2,($FFFFF790).w
00004354 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000435A 4E75                       		rts	
0000435C                            ; ===========================================================================
0000435C                            
0000435C                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000435C 4A38 F604                  		tst.b	($FFFFF604).w
00004360 6A00                       		bpl.s	loc_4022
00004362 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004366 6B00                       		bmi.s	loc_4022
00004368 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000436E                            
0000436E                            loc_4022:
0000436E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004374 7000                       		moveq	#0,d0
00004376 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000437A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004380 6600                       		bne.s	loc_4038
00004382 7006                       		moveq	#6,d0
00004384                            
00004384                            loc_4038:
00004384 E548                       		lsl.w	#2,d0
00004386 2271 0000                  		movea.l	(a1,d0.w),a1
0000438A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000438E 6A00                       		bpl.s	loc_4056
00004390 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004396 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000439A 5340                       		subq.w	#1,d0
0000439C E548                       		lsl.w	#2,d0
0000439E 2271 0000                  		movea.l	(a1,d0.w),a1
000043A2                            
000043A2                            loc_4056:
000043A2 3038 F790                  		move.w	($FFFFF790).w,d0
000043A6 D2C0                       		adda.w	d0,a1
000043A8 1011                       		move.b	(a1),d0
000043AA 41F8 F604                  		lea	($FFFFF604).w,a0
000043AE 1200                       		move.b	d0,d1
000043B0 1410                       		move.b	(a0),d2
000043B2 B500                       		eor.b	d2,d0
000043B4 10C1                       		move.b	d1,(a0)+
000043B6 C001                       		and.b	d1,d0
000043B8 10C0                       		move.b	d0,(a0)+
000043BA 5338 F792                  		subq.b	#1,($FFFFF792).w
000043BE 6400                       		bcc.s	locret_407E
000043C0 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000043C6 5478 F790                  		addq.w	#2,($FFFFF790).w
000043CA                            
000043CA                            locret_407E:
000043CA 4E75                       		rts	
000043CC                            ; End of function MoveSonicInDemo
000043CC                            
000043CC                            ; ===========================================================================
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            Demo_Index:
000043CC                            	include "_inc\Demo pointers for intro.asm"
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC 0000 0000                  	dc.l Demo_GHZ
000043D0 0000 0000                  	dc.l Demo_GHZ
000043D4 0000 0000                  	dc.l Demo_MZ
000043D8 0000 0000                  	dc.l Demo_MZ
000043DC 0000 0000                  	dc.l Demo_SYZ
000043E0 0000 0000                  	dc.l Demo_SYZ
000043E4 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043EC                            
000043EC                            Demo_EndIndex:
000043EC                            	include "_inc\Demo pointers for ending.asm"
000043EC                            ; ---------------------------------------------------------------------------
000043EC                            ; Demo (ending) sequence pointers
000043EC                            ; ---------------------------------------------------------------------------
000043EC 0000 0000                  	dc.l Demo_EndGHZ1
000043F0 0000 0000                  	dc.l Demo_EndMZ
000043F4 0000 0000                  	dc.l Demo_EndSYZ
000043F8 0000 0000                  	dc.l Demo_EndLZ
000043FC 0000 0000                  	dc.l Demo_EndSLZ
00004400 0000 0000                  	dc.l Demo_EndSBZ1
00004404 0000 0000                  	dc.l Demo_EndSBZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
0000440C                            
0000440C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000441C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000442C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000443C                            		even
0000443C                            
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            ; Collision index loading subroutine
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            
0000443C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000443C                            
0000443C                            
0000443C                            ColIndexLoad:				; XREF: Level
0000443C 7000                       		moveq	#0,d0
0000443E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004442 E548                       		lsl.w	#2,d0
00004444 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000444A 4E75                       		rts	
0000444C                            ; End of function ColIndexLoad
0000444C                            
0000444C                            ; ===========================================================================
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ColPointers:
0000444C                            	include "_inc\Collision index pointers.asm"
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C 0000 0000                  	dc.l Col_GHZ
00004450 0000 0000                  	dc.l Col_LZ
00004454 0000 0000                  	dc.l Col_MZ
00004458 0000 0000                  	dc.l Col_SLZ
0000445C 0000 0000                  	dc.l Col_SYZ
00004460 0000 0000                  	dc.l Col_SBZ
00004460 0000 0000                  	dc.l Col_SBZ
00004464                            
00004464                            ; ---------------------------------------------------------------------------
00004464                            ; Oscillating number subroutine
00004464                            ; ---------------------------------------------------------------------------
00004464                            
00004464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004464                            
00004464                            
00004464                            OscillateNumInit:			; XREF: Level
00004464 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004468 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000446E 7220                       		moveq	#$20,d1
00004470                            
00004470                            Osc_Loop:
00004470 32DA                       		move.w	(a2)+,(a1)+
00004472 51C9 FFFC                  		dbf	d1,Osc_Loop
00004476 4E75                       		rts	
00004478                            ; End of function OscillateNumInit
00004478                            
00004478                            ; ===========================================================================
00004478 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000447C 0000 0080                  		dc.w 0,	$80
00004480 0000 0080                  		dc.w 0,	$80
00004484 0000 0080                  		dc.w 0,	$80
00004488 0000 0080                  		dc.w 0,	$80
0000448C 0000 0080                  		dc.w 0,	$80
00004490 0000 0080                  		dc.w 0,	$80
00004494 0000 0080                  		dc.w 0,	$80
00004498 0000 0080                  		dc.w 0,	$80
0000449C 0000 50F0                  		dc.w 0,	$50F0
000044A0 011E 2080                  		dc.w $11E, $2080
000044A4 00B4 3080                  		dc.w $B4, $3080
000044A8 010E 5080                  		dc.w $10E, $5080
000044AC 01C2 7080                  		dc.w $1C2, $7080
000044B0 0276 0080                  		dc.w $276, $80
000044B4 0000 0080                  		dc.w 0,	$80
000044B8 0000                       		dc.w 0
000044BA                            		even
000044BA                            
000044BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044BA                            
000044BA                            
000044BA                            OscillateNumDo:				; XREF: Level
000044BA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000044C0 6400                       		bcc.s	locret_41C4
000044C2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000044C6 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000044CC 3619                       		move.w	(a1)+,d3
000044CE 720F                       		moveq	#$F,d1
000044D0                            
000044D0                            loc_4184:
000044D0 341A                       		move.w	(a2)+,d2
000044D2 381A                       		move.w	(a2)+,d4
000044D4 0303                       		btst	d1,d3
000044D6 6600                       		bne.s	loc_41A4
000044D8 3029 0002                  		move.w	2(a1),d0
000044DC D042                       		add.w	d2,d0
000044DE 3340 0002                  		move.w	d0,2(a1)
000044E2 D151                       		add.w	d0,0(a1)
000044E4 B811                       		cmp.b	0(a1),d4
000044E6 6200                       		bhi.s	loc_41BA
000044E8 03C3                       		bset	d1,d3
000044EA 6000                       		bra.s	loc_41BA
000044EC                            ; ===========================================================================
000044EC                            
000044EC                            loc_41A4:				; XREF: OscillateNumDo
000044EC 3029 0002                  		move.w	2(a1),d0
000044F0 9042                       		sub.w	d2,d0
000044F2 3340 0002                  		move.w	d0,2(a1)
000044F6 D151                       		add.w	d0,0(a1)
000044F8 B811                       		cmp.b	0(a1),d4
000044FA 6300                       		bls.s	loc_41BA
000044FC 0383                       		bclr	d1,d3
000044FE                            
000044FE                            loc_41BA:
000044FE 5849                       		addq.w	#4,a1
00004500 51C9 FFCE                  		dbf	d1,loc_4184
00004504 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004508                            
00004508                            locret_41C4:
00004508 4E75                       		rts	
0000450A                            ; End of function OscillateNumDo
0000450A                            
0000450A                            ; ===========================================================================
0000450A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000450E 0002 0018                  		dc.w 2,	$18
00004512 0002 0020                  		dc.w 2,	$20
00004516 0002 0030                  		dc.w 2,	$30
0000451A 0004 0020                  		dc.w 4,	$20
0000451E 0008 0008                  		dc.w 8,	8
00004522 0008 0040                  		dc.w 8,	$40
00004526 0004 0040                  		dc.w 4,	$40
0000452A 0002 0050                  		dc.w 2,	$50
0000452E 0002 0050                  		dc.w 2,	$50
00004532 0002 0020                  		dc.w 2,	$20
00004536 0003 0030                  		dc.w 3,	$30
0000453A 0005 0050                  		dc.w 5,	$50
0000453E 0007 0070                  		dc.w 7,	$70
00004542 0002 0010                  		dc.w 2,	$10
00004546 0002 0010                  		dc.w 2,	$10
0000454A                            		even
0000454A                            
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            
0000454A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000454A                            
0000454A                            
0000454A                            ChangeRingFrame:			; XREF: Level
0000454A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000454E 6A00                       		bpl.s	loc_421C
00004550 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004556 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000455A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004560                            
00004560                            loc_421C:
00004560 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004564 6A00                       		bpl.s	loc_4232
00004566 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000456C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004570 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004576                            
00004576                            loc_4232:
00004576 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000457A 6A00                       		bpl.s	loc_4250
0000457C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004582 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004586 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000458C 6500                       		bcs.s	loc_4250
0000458E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004594                            
00004594                            loc_4250:
00004594 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004598 6700                       		beq.s	locret_4272
0000459A 7000                       		moveq	#0,d0
0000459C 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000045A0 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000045A4 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000045A8 EF58                       		rol.w	#7,d0
000045AA 0240 0003                  		andi.w	#3,d0
000045AE 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000045B2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000045B6                            
000045B6                            locret_4272:
000045B6 4E75                       		rts	
000045B8                            ; End of function ChangeRingFrame
000045B8                            
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            ; End-of-act signpost pattern loading subroutine
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            
000045B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045B8                            
000045B8                            
000045B8                            SignpostArtLoad:			; XREF: Level
000045B8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000045BC 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000045C0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000045C6 6700                       		beq.s	Signpost_Exit	; if yes, branch
000045C8 3038 F700                  		move.w	($FFFFF700).w,d0
000045CC 3238 F72A                  		move.w	($FFFFF72A).w,d1
000045D0 0441 0100                  		subi.w	#$100,d1
000045D4 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000045D6 6D00                       		blt.s	Signpost_Exit	; if not, branch
000045D8 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000045DC 6700                       		beq.s	Signpost_Exit
000045DE B278 F728                  		cmp.w	($FFFFF728).w,d1
000045E2 6700                       		beq.s	Signpost_Exit
000045E4 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000045E8 7012                       		moveq	#$12,d0
000045EA 6000 D1E6                  		bra.w	LoadPLC2	; load signpost	patterns
000045EE                            ; ===========================================================================
000045EE                            
000045EE                            Signpost_Exit:
000045EE 4E75                       		rts	
000045F0                            ; End of function SignpostArtLoad
000045F0                            
000045F0                            ; ===========================================================================
000045F0                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004670                            Demo_MZ:	incbin	demodata\i_mz.bin
000047A0                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004820                            Demo_SS:	incbin	demodata\i_ss.bin
00004920                            ; ===========================================================================
00004920                            
00004920                            ; ---------------------------------------------------------------------------
00004920                            ; Special Stage
00004920                            ; ---------------------------------------------------------------------------
00004920                            
00004920                            SpecialStage:				; XREF: GameModeArray
00004920 303C 00CA                  		move.w	#$CA,d0
00004924 6100 CC96                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004928 6100 D872                  		bsr.w	Pal_MakeFlash
0000492C 46FC 2700                  		move	#$2700,sr
00004930 4DF9 00C0 0004             		lea	($C00004).l,a6
00004936 3CBC 8B03                  		move.w	#$8B03,(a6)
0000493A 3CBC 8004                  		move.w	#$8004,(a6)
0000493E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004944 3CBC 9011                  		move.w	#$9011,(a6)
00004948 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000494C 0200 00BF                  		andi.b	#$BF,d0
00004950 33C0 00C0 0004             		move.w	d0,($C00004).l
00004956 6100 CB8C                  		bsr.w	ClearScreen
0000495A 46FC 2300                  		move	#$2300,sr
0000495E 4BF9 00C0 0004             		lea	($C00004).l,a5
00004964 3ABC 8F01                  		move.w	#$8F01,(a5)
00004968 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000496E 3ABC 9780                  		move.w	#$9780,(a5)
00004972 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004978 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004980                            
00004980                            loc_463C:
00004980 3215                       		move.w	(a5),d1
00004982 0801 0001                  		btst	#1,d1
00004986 66F8                       		bne.s	loc_463C
00004988 3ABC 8F02                  		move.w	#$8F02,(a5)
0000498C 6100 0000                  		bsr.w	SS_BGLoad
00004990 7014                       		moveq	#$14,d0
00004992 6100 CF78                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004996 43F8 D000                  		lea	($FFFFD000).w,a1
0000499A 7000                       		moveq	#0,d0
0000499C 323C 07FF                  		move.w	#$7FF,d1
000049A0                            
000049A0                            SS_ClrObjRam:
000049A0 22C0                       		move.l	d0,(a1)+
000049A2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000049A6                            
000049A6 43F8 F700                  		lea	($FFFFF700).w,a1
000049AA 7000                       		moveq	#0,d0
000049AC 323C 003F                  		move.w	#$3F,d1
000049B0                            
000049B0                            SS_ClrRam:
000049B0 22C0                       		move.l	d0,(a1)+
000049B2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000049B6                            
000049B6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000049BA 7000                       		moveq	#0,d0
000049BC 323C 0027                  		move.w	#$27,d1
000049C0                            
000049C0                            SS_ClrRam2:
000049C0 22C0                       		move.l	d0,(a1)+
000049C2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000049C6                            
000049C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000049CA 7000                       		moveq	#0,d0
000049CC 323C 007F                  		move.w	#$7F,d1
000049D0                            
000049D0                            SS_ClrNemRam:
000049D0 22C0                       		move.l	d0,(a1)+
000049D2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000049D6                            
000049D6 4238 F64E                  		clr.b	($FFFFF64E).w
000049DA 4278 FE02                  		clr.w	($FFFFFE02).w
000049DE 700A                       		moveq	#$A,d0
000049E0 6100 D93A                  		bsr.w	PalLoad1	; load special stage pallet
000049E4 4EB9 0000 0000             		jsr	SS_Load
000049EA 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000049F2 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000049FA 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004A00 6100 0000                  		bsr.w	PalCycle_SS
00004A04 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004A08 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004A0E 303C 0089                  		move.w	#$89,d0
00004A12 6100 CBA2                  		bsr.w	PlaySound	; play special stage BG	music
00004A16 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004A1C 43F9 0000 43CC             		lea	(Demo_Index).l,a1
00004A22 7006                       		moveq	#6,d0
00004A24 E548                       		lsl.w	#2,d0
00004A26 2271 0000                  		movea.l	(a1,d0.w),a1
00004A2A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004A30 5338 F792                  		subq.b	#1,($FFFFF792).w
00004A34 4278 FE20                  		clr.w	($FFFFFE20).w
00004A38 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004A3C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004A42 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004A48 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004A4C 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A4E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004A54 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A56 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004A5C                            
00004A5C                            SS_NoDebug:
00004A5C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A60 0000 0040                  		ori.b	#$40,d0
00004A64 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A6A 6100 D684                  		bsr.w	Pal_MakeWhite
00004A6E                            
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            ; Main Special Stage loop
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            
00004A6E                            SS_MainLoop:
00004A6E 6100 CB58                  		bsr.w	PauseGame
00004A72 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004A78 6100 E176                  		bsr.w	DelayProgram
00004A7C 6100 F89E                  		bsr.w	MoveSonicInDemo
00004A80 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004A86 4EB9 0000 0000             		jsr	ObjectsLoad
00004A8C 4EB9 0000 0000             		jsr	BuildSprites
00004A92 4EB9 0000 0000             		jsr	SS_ShowLayout
00004A98 6100 0000                  		bsr.w	SS_BGAnimate
00004A9C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AA0 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004AA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004AA6 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004AAA                            
00004AAA                            SS_ChkEnd:
00004AAA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004AB0 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004AB4                            
00004AB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AB8 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004ABC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004AC2 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004AC8 6500                       		bcs.s	SS_End		; if not, branch
00004ACA 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004ACE                            
00004ACE                            SS_End:
00004ACE 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004AD4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004ADA 4278 F794                  		clr.w	($FFFFF794).w
00004ADE                            
00004ADE                            SS_EndLoop:
00004ADE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004AE4 6100 E10A                  		bsr.w	DelayProgram
00004AE8 6100 F832                  		bsr.w	MoveSonicInDemo
00004AEC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004AF2 4EB9 0000 0000             		jsr	ObjectsLoad
00004AF8 4EB9 0000 0000             		jsr	BuildSprites
00004AFE 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B04 6100 0000                  		bsr.w	SS_BGAnimate
00004B08 5378 F794                  		subq.w	#1,($FFFFF794).w
00004B0C 6A00                       		bpl.s	loc_47D4
00004B0E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004B14 6100 D6A6                  		bsr.w	Pal_ToWhite
00004B18                            
00004B18                            loc_47D4:
00004B18 4A78 F614                  		tst.w	($FFFFF614).w
00004B1C 66C0                       		bne.s	SS_EndLoop
00004B1E                            
00004B1E 46FC 2700                  		move	#$2700,sr
00004B22 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B28 3CBC 8230                  		move.w	#$8230,(a6)
00004B2C 3CBC 8407                  		move.w	#$8407,(a6)
00004B30 3CBC 9001                  		move.w	#$9001,(a6)
00004B34 6100 C9AE                  		bsr.w	ClearScreen
00004B38 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004B42 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004B48 6100 CB16                  		bsr.w	NemDec
00004B4C 4EB9 0000 0000             		jsr	Hud_Base
00004B52 46FC 2300                  		move	#$2300,sr
00004B56 7011                       		moveq	#$11,d0
00004B58 6100 D7DE                  		bsr.w	PalLoad2	; load results screen pallet
00004B5C 7000                       		moveq	#0,d0
00004B5E 6100 CC72                  		bsr.w	LoadPLC2
00004B62 701B                       		moveq	#$1B,d0
00004B64 6100 CC3A                  		bsr.w	LoadPLC		; load results screen patterns
00004B68 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004B6E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004B74 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004B78 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004B7C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004B80 303C 008E                  		move.w	#$8E,d0
00004B84 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004B8A 43F8 D000                  		lea	($FFFFD000).w,a1
00004B8E 7000                       		moveq	#0,d0
00004B90 323C 07FF                  		move.w	#$7FF,d1
00004B94                            
00004B94                            SS_EndClrObjRam:
00004B94 22C0                       		move.l	d0,(a1)+
00004B96 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004B9A                            
00004B9A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004BA0                            
00004BA0                            SS_NormalExit:
00004BA0 6100 CA26                  		bsr.w	PauseGame
00004BA4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004BAA 6100 E044                  		bsr.w	DelayProgram
00004BAE 4EB9 0000 0000             		jsr	ObjectsLoad
00004BB4 4EB9 0000 0000             		jsr	BuildSprites
00004BBA 6100 CC50                  		bsr.w	RunPLC_RAM
00004BBE 4A78 FE02                  		tst.w	($FFFFFE02).w
00004BC2 67DC                       		beq.s	SS_NormalExit
00004BC4 4AB8 F680                  		tst.l	($FFFFF680).w
00004BC8 66D6                       		bne.s	SS_NormalExit
00004BCA 303C 00CA                  		move.w	#$CA,d0
00004BCE 6100 C9EC                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004BD2 6100 D5C8                  		bsr.w	Pal_MakeFlash
00004BD6 4E75                       		rts	
00004BD8                            ; ===========================================================================
00004BD8                            
00004BD8                            SS_ToSegaScreen:
00004BD8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004BDE 4E75                       		rts
00004BE0                            
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            ; Special stage	background loading subroutine
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            
00004BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BE0                            
00004BE0                            
00004BE0                            SS_BGLoad:				; XREF: SpecialStage
00004BE0 43F9 00FF 0000             		lea	($FF0000).l,a1
00004BE6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004BEC 303C 4051                  		move.w	#$4051,d0
00004BF0 6100 CD4C                  		bsr.w	EniDec
00004BF4 263C 5000 0001             		move.l	#$50000001,d3
00004BFA 45F9 00FF 0080             		lea	($FF0080).l,a2
00004C00 7E06                       		moveq	#6,d7
00004C02                            
00004C02                            loc_48BE:
00004C02 2003                       		move.l	d3,d0
00004C04 7C03                       		moveq	#3,d6
00004C06 7800                       		moveq	#0,d4
00004C08 0C47 0003                  		cmpi.w	#3,d7
00004C0C 6400                       		bcc.s	loc_48CC
00004C0E 7801                       		moveq	#1,d4
00004C10                            
00004C10                            loc_48CC:
00004C10 7A07                       		moveq	#7,d5
00004C12                            
00004C12                            loc_48CE:
00004C12 224A                       		movea.l	a2,a1
00004C14 0A04 0001                  		eori.b	#1,d4
00004C18 6600                       		bne.s	loc_48E2
00004C1A 0C47 0006                  		cmpi.w	#6,d7
00004C1E 6600                       		bne.s	loc_48F2
00004C20 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C26                            
00004C26                            loc_48E2:
00004C26 48E7 F800                  		movem.l	d0-d4,-(sp)
00004C2A 7207                       		moveq	#7,d1
00004C2C 7407                       		moveq	#7,d2
00004C2E 6100 CA10                  		bsr.w	ShowVDPGraphics
00004C32 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004C36                            
00004C36                            loc_48F2:
00004C36 0680 0010 0000             		addi.l	#$100000,d0
00004C3C 51CD FFD4                  		dbf	d5,loc_48CE
00004C40 0680 0380 0000             		addi.l	#$3800000,d0
00004C46 0A04 0001                  		eori.b	#1,d4
00004C4A 51CE FFC4                  		dbf	d6,loc_48CC
00004C4E 0683 1000 0000             		addi.l	#$10000000,d3
00004C54 6A00                       		bpl.s	loc_491C
00004C56 4843                       		swap	d3
00004C58 0683 0000 C000             		addi.l	#$C000,d3
00004C5E 4843                       		swap	d3
00004C60                            
00004C60                            loc_491C:
00004C60 D4FC 0080                  		adda.w	#$80,a2
00004C64 51CF FF9C                  		dbf	d7,loc_48BE
00004C68 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C6E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004C74 303C 4000                  		move.w	#$4000,d0
00004C78 6100 CCC4                  		bsr.w	EniDec
00004C7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C82 203C 4000 0003             		move.l	#$40000003,d0
00004C88 723F                       		moveq	#$3F,d1
00004C8A 741F                       		moveq	#$1F,d2
00004C8C 6100 C9B2                  		bsr.w	ShowVDPGraphics
00004C90 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C96 203C 5000 0003             		move.l	#$50000003,d0
00004C9C 723F                       		moveq	#$3F,d1
00004C9E 743F                       		moveq	#$3F,d2
00004CA0 6100 C99E                  		bsr.w	ShowVDPGraphics
00004CA4 4E75                       		rts	
00004CA6                            ; End of function SS_BGLoad
00004CA6                            
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            ; Pallet cycling routine - special stage
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            
00004CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CA6                            
00004CA6                            
00004CA6                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004CA6 4A78 F63A                  		tst.w	($FFFFF63A).w
00004CAA 6600                       		bne.s	locret_49E6
00004CAC 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004CB0 6A00                       		bpl.s	locret_49E6
00004CB2 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CB8 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004CBC 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004CC0 0240 001F                  		andi.w	#$1F,d0
00004CC4 E548                       		lsl.w	#2,d0
00004CC6 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004CCC D0C0                       		adda.w	d0,a0
00004CCE 1018                       		move.b	(a0)+,d0
00004CD0 6A00                       		bpl.s	loc_4992
00004CD2 303C 01FF                  		move.w	#$1FF,d0
00004CD6                            
00004CD6                            loc_4992:
00004CD6 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004CDA 7000                       		moveq	#0,d0
00004CDC 1018                       		move.b	(a0)+,d0
00004CDE 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004CE2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004CE8 43F1 0000                  		lea	(a1,d0.w),a1
00004CEC 303C 8200                  		move.w	#-$7E00,d0
00004CF0 1019                       		move.b	(a1)+,d0
00004CF2 3C80                       		move.w	d0,(a6)
00004CF4 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004CF8 303C 8400                  		move.w	#-$7C00,d0
00004CFC 1018                       		move.b	(a0)+,d0
00004CFE 3C80                       		move.w	d0,(a6)
00004D00 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004D0A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004D12 7000                       		moveq	#0,d0
00004D14 1018                       		move.b	(a0)+,d0
00004D16 6B00                       		bmi.s	loc_49E8
00004D18 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004D1E D2C0                       		adda.w	d0,a1
00004D20 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004D24 24D9                       		move.l	(a1)+,(a2)+
00004D26 24D9                       		move.l	(a1)+,(a2)+
00004D28 24D9                       		move.l	(a1)+,(a2)+
00004D2A                            
00004D2A                            locret_49E6:
00004D2A 4E75                       		rts	
00004D2C                            ; ===========================================================================
00004D2C                            
00004D2C                            loc_49E8:				; XREF: PalCycle_SS
00004D2C 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004D30 0C40 008A                  		cmpi.w	#$8A,d0
00004D34 6500                       		bcs.s	loc_49F4
00004D36 5241                       		addq.w	#1,d1
00004D38                            
00004D38                            loc_49F4:
00004D38 C2FC 002A                  		mulu.w	#$2A,d1
00004D3C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004D42 D2C1                       		adda.w	d1,a1
00004D44 0240 007F                  		andi.w	#$7F,d0
00004D48 0880 0000                  		bclr	#0,d0
00004D4C 6700                       		beq.s	loc_4A18
00004D4E 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004D52 24D1                       		move.l	(a1),(a2)+
00004D54 24E9 0004                  		move.l	4(a1),(a2)+
00004D58 24E9 0008                  		move.l	8(a1),(a2)+
00004D5C                            
00004D5C                            loc_4A18:
00004D5C D2FC 000C                  		adda.w	#$C,a1
00004D60 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004D64 0C40 000A                  		cmpi.w	#$A,d0
00004D68 6500                       		bcs.s	loc_4A2E
00004D6A 0440 000A                  		subi.w	#$A,d0
00004D6E 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004D72                            
00004D72                            loc_4A2E:
00004D72 3200                       		move.w	d0,d1
00004D74 D040                       		add.w	d0,d0
00004D76 D041                       		add.w	d1,d0
00004D78 D2C0                       		adda.w	d0,a1
00004D7A 24D9                       		move.l	(a1)+,(a2)+
00004D7C 34D9                       		move.w	(a1)+,(a2)+
00004D7E 4E75                       		rts	
00004D80                            ; End of function PalCycle_SS
00004D80                            
00004D80                            ; ===========================================================================
00004D80 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004D90                            					; XREF: PalCycle_SS
00004D90 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004DA0 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004DB0 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004DC0 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004DD0 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004DE0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004DF0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004E00                            		even
00004E00 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004E0E                            					; XREF: PalCycle_SS
00004E0E                            		even
00004E0E                            
00004E0E                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004E56                            		even
00004E56                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004F28                            		even
00004F28                            
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            ; Subroutine to	make the special stage background animated
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            
00004F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F28                            
00004F28                            
00004F28                            SS_BGAnimate:				; XREF: SpecialStage
00004F28 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004F2C 6600                       		bne.s	loc_4BF6
00004F2E 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004F34 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F3A                            
00004F3A                            loc_4BF6:
00004F3A 0C40 0008                  		cmpi.w	#8,d0
00004F3E 6400                       		bcc.s	loc_4C4E
00004F40 0C40 0006                  		cmpi.w	#6,d0
00004F44 6600                       		bne.s	loc_4C10
00004F46 5278 F718                  		addq.w	#1,($FFFFF718).w
00004F4A 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004F4E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F54                            
00004F54                            loc_4C10:
00004F54 7000                       		moveq	#0,d0
00004F56 3038 F708                  		move.w	($FFFFF708).w,d0
00004F5A 4440                       		neg.w	d0
00004F5C 4840                       		swap	d0
00004F5E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004F64 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F68 7609                       		moveq	#9,d3
00004F6A                            
00004F6A                            loc_4C26:
00004F6A 302B 0002                  		move.w	2(a3),d0
00004F6E 6100 DCB2                  		bsr.w	CalcSine
00004F72 7400                       		moveq	#0,d2
00004F74 1419                       		move.b	(a1)+,d2
00004F76 C1C2                       		muls.w	d2,d0
00004F78 E080                       		asr.l	#8,d0
00004F7A 36C0                       		move.w	d0,(a3)+
00004F7C 1419                       		move.b	(a1)+,d2
00004F7E 4882                       		ext.w	d2
00004F80 D55B                       		add.w	d2,(a3)+
00004F82 51CB FFE6                  		dbf	d3,loc_4C26
00004F86 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F8A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004F90 6000                       		bra.s	loc_4C7E
00004F92                            ; ===========================================================================
00004F92                            
00004F92                            loc_4C4E:				; XREF: SS_BGAnimate
00004F92 0C40 000C                  		cmpi.w	#$C,d0
00004F96 6600                       		bne.s	loc_4C74
00004F98 5378 F718                  		subq.w	#1,($FFFFF718).w
00004F9C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FA0 243C 0001 8000             		move.l	#$18000,d2
00004FA6 7206                       		moveq	#6,d1
00004FA8                            
00004FA8                            loc_4C64:
00004FA8 2013                       		move.l	(a3),d0
00004FAA 9082                       		sub.l	d2,d0
00004FAC 26C0                       		move.l	d0,(a3)+
00004FAE 0482 0000 2000             		subi.l	#$2000,d2
00004FB4 51C9 FFF2                  		dbf	d1,loc_4C64
00004FB8                            
00004FB8                            loc_4C74:
00004FB8 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FBC 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004FC2                            
00004FC2                            loc_4C7E:
00004FC2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004FC6 3038 F718                  		move.w	($FFFFF718).w,d0
00004FCA 4440                       		neg.w	d0
00004FCC 4840                       		swap	d0
00004FCE 7600                       		moveq	#0,d3
00004FD0 161A                       		move.b	(a2)+,d3
00004FD2 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004FD6 4442                       		neg.w	d2
00004FD8 0242 00FF                  		andi.w	#$FF,d2
00004FDC E54A                       		lsl.w	#2,d2
00004FDE                            
00004FDE                            loc_4C9A:
00004FDE 301B                       		move.w	(a3)+,d0
00004FE0 544B                       		addq.w	#2,a3
00004FE2 7200                       		moveq	#0,d1
00004FE4 121A                       		move.b	(a2)+,d1
00004FE6 5341                       		subq.w	#1,d1
00004FE8                            
00004FE8                            loc_4CA4:
00004FE8 2380 2000                  		move.l	d0,(a1,d2.w)
00004FEC 5842                       		addq.w	#4,d2
00004FEE 0242 03FC                  		andi.w	#$3FC,d2
00004FF2 51C9 FFF4                  		dbf	d1,loc_4CA4
00004FF6 51CB FFE6                  		dbf	d3,loc_4C9A
00004FFA 4E75                       		rts	
00004FFC                            ; End of function SS_BGAnimate
00004FFC                            
00004FFC                            ; ===========================================================================
00004FFC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005008                            		even
00005008 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005010                            		even
00005010 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005024                            		even
00005024                            					; XREF: SS_BGAnimate
00005024                            ; ===========================================================================
00005024                            
00005024                            ; ---------------------------------------------------------------------------
00005024                            ; Continue screen
00005024                            ; ---------------------------------------------------------------------------
00005024                            
00005024                            ContinueScreen:				; XREF: GameModeArray
00005024 6100 D04C                  		bsr.w	Pal_FadeFrom
00005028 46FC 2700                  		move	#$2700,sr
0000502C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005030 0200 00BF                  		andi.b	#$BF,d0
00005034 33C0 00C0 0004             		move.w	d0,($C00004).l
0000503A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005040 3CBC 8004                  		move.w	#$8004,(a6)
00005044 3CBC 8700                  		move.w	#$8700,(a6)
00005048 6100 C49A                  		bsr.w	ClearScreen
0000504C 43F8 D000                  		lea	($FFFFD000).w,a1
00005050 7000                       		moveq	#0,d0
00005052 323C 07FF                  		move.w	#$7FF,d1
00005056                            
00005056                            Cont_ClrObjRam:
00005056 22C0                       		move.l	d0,(a1)+
00005058 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000505C                            
0000505C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005066 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000506C 6100 C5F2                  		bsr.w	NemDec
00005070 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000507A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005080 6100 C5DE                  		bsr.w	NemDec
00005084 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000508E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005094 6100 C5CA                  		bsr.w	NemDec
00005098 720A                       		moveq	#10,d1
0000509A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000050A0 7012                       		moveq	#$12,d0
000050A2 6100 D278                  		bsr.w	PalLoad1	; load continue	screen pallet
000050A6 103C 0090                  		move.b	#$90,d0
000050AA 6100 C50A                  		bsr.w	PlaySound	; play continue	music
000050AE 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000050B4 42B8 F700                  		clr.l	($FFFFF700).w
000050B8 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000050C0 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000050C6 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000050CC 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000050D2 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000050D8 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000050DE 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000050E4 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000050EA 4EB9 0000 0000             		jsr	ObjectsLoad
000050F0 4EB9 0000 0000             		jsr	BuildSprites
000050F6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000050FA 0000 0040                  		ori.b	#$40,d0
000050FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005104 6100 CEC6                  		bsr.w	Pal_FadeTo
00005108                            
00005108                            ; ---------------------------------------------------------------------------
00005108                            ; Continue screen main loop
00005108                            ; ---------------------------------------------------------------------------
00005108                            
00005108                            Cont_MainLoop:
00005108 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000510E 6100 DAE0                  		bsr.w	DelayProgram
00005112 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005118 6400                       		bcc.s	loc_4DF2
0000511A 46FC 2700                  		move	#$2700,sr
0000511E 3238 F614                  		move.w	($FFFFF614).w,d1
00005122 82FC 003C                  		divu.w	#$3C,d1
00005126 0281 0000 000F             		andi.l	#$F,d1
0000512C 4EB9 0000 0000             		jsr	ContScrCounter
00005132 46FC 2300                  		move	#$2300,sr
00005136                            
00005136                            loc_4DF2:
00005136 4EB9 0000 0000             		jsr	ObjectsLoad
0000513C 4EB9 0000 0000             		jsr	BuildSprites
00005142 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005148 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000514A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005150 64B6                       		bcc.s	Cont_MainLoop
00005152 4A78 F614                  		tst.w	($FFFFF614).w
00005156 6600 FFB0                  		bne.w	Cont_MainLoop
0000515A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005160 4E75                       		rts	
00005162                            ; ===========================================================================
00005162                            
00005162                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005162 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005168 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000516E 7000                       		moveq	#0,d0
00005170 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005174 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005178 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000517C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005180 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005184 4E75                       		rts	
00005186                            ; ===========================================================================
00005186                            
00005186                            ; ---------------------------------------------------------------------------
00005186                            ; Object 80 - Continue screen elements
00005186                            ; ---------------------------------------------------------------------------
00005186                            
00005186                            Obj80:					; XREF: Obj_Index
00005186 7000                       		moveq	#0,d0
00005188 1028 0024                  		move.b	$24(a0),d0
0000518C 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005190 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005194                            ; ===========================================================================
00005194 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005196 0000                       		dc.w Obj80_Display-Obj80_Index
00005198 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000519A 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000519C                            ; ===========================================================================
0000519C                            
0000519C                            Obj80_Main:				; XREF: Obj80_Index
0000519C 5428 0024                  		addq.b	#2,$24(a0)
000051A0 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000051A8 317C 8500 0002             		move.w	#$8500,2(a0)
000051AE 117C 0000 0001             		move.b	#0,1(a0)
000051B4 117C 003C 0019             		move.b	#$3C,$19(a0)
000051BA 317C 0120 0008             		move.w	#$120,8(a0)
000051C0 317C 00C0 000A             		move.w	#$C0,$A(a0)
000051C6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000051CC                            
000051CC                            Obj80_Display:				; XREF: Obj80_Index
000051CC 4EF9 0000 0000             		jmp	DisplaySprite
000051D2                            ; ===========================================================================
000051D2                            Obj80_MiniSonicPos:
000051D2 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000051E4 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000051F0                            ; ===========================================================================
000051F0                            
000051F0                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000051F0 2248                       		movea.l	a0,a1
000051F2 45F9 0000 51D2             		lea	(Obj80_MiniSonicPos).l,a2
000051F8 7200                       		moveq	#0,d1
000051FA 1238 FE18                  		move.b	($FFFFFE18).w,d1
000051FE 5501                       		subq.b	#2,d1
00005200 6400                       		bcc.s	loc_4EC4
00005202 4EF9 0000 0000             		jmp	DeleteObject
00005208                            ; ===========================================================================
00005208                            
00005208                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005208 7601                       		moveq	#1,d3
0000520A 0C01 000E                  		cmpi.b	#$E,d1
0000520E 6500                       		bcs.s	loc_4ED0
00005210 7600                       		moveq	#0,d3
00005212 720E                       		moveq	#$E,d1
00005214                            
00005214                            loc_4ED0:
00005214 1401                       		move.b	d1,d2
00005216 0202 0001                  		andi.b	#1,d2
0000521A                            
0000521A                            Obj80_MiniSonLoop:
0000521A 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000521E 335A 0008                  		move.w	(a2)+,8(a1)
00005222 4A02                       		tst.b	d2
00005224 6700                       		beq.s	loc_4EEA
00005226 0469 000A 0008             		subi.w	#$A,8(a1)
0000522C                            
0000522C                            loc_4EEA:
0000522C 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005232 137C 0006 001A             		move.b	#6,$1A(a1)
00005238 137C 0006 0024             		move.b	#6,$24(a1)
0000523E 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005246 337C 8551 0002             		move.w	#$8551,2(a1)
0000524C 137C 0000 0001             		move.b	#0,1(a1)
00005252 43E9 0040                  		lea	$40(a1),a1
00005256 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000525A 43E9 FFC0                  		lea	-$40(a1),a1
0000525E 1343 0028                  		move.b	d3,$28(a1)
00005262                            
00005262                            Obj80_ChkType:				; XREF: Obj80_Index
00005262 4A28 0028                  		tst.b	$28(a0)
00005266 6700                       		beq.s	loc_4F40
00005268 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000526E 6500                       		bcs.s	loc_4F40
00005270 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005274 0200 0001                  		andi.b	#1,d0
00005278 6600                       		bne.s	loc_4F40
0000527A 4A78 D010                  		tst.w	($FFFFD010).w
0000527E 6600                       		bne.s	Obj80_Delete
00005280 4E75                       		rts	
00005282                            ; ===========================================================================
00005282                            
00005282                            loc_4F40:				; XREF: Obj80_ChkType
00005282 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005286 0200 000F                  		andi.b	#$F,d0
0000528A 6600                       		bne.s	Obj80_Display2
0000528C 0868 0000 001A             		bchg	#0,$1A(a0)
00005292                            
00005292                            Obj80_Display2:
00005292 4EF9 0000 0000             		jmp	DisplaySprite
00005298                            ; ===========================================================================
00005298                            
00005298                            Obj80_Delete:				; XREF: Obj80_ChkType
00005298 4EF9 0000 0000             		jmp	DeleteObject
0000529E                            ; ===========================================================================
0000529E                            
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            ; Object 81 - Sonic on the continue screen
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            
0000529E                            Obj81:					; XREF: Obj_Index
0000529E 7000                       		moveq	#0,d0
000052A0 1028 0024                  		move.b	$24(a0),d0
000052A4 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000052A8 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000052AC 4EF9 0000 0000             		jmp	DisplaySprite
000052B2                            ; ===========================================================================
000052B2 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000052B4 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000052B6 0000                       		dc.w Obj81_Animate-Obj81_Index
000052B8 0000                       		dc.w Obj81_Run-Obj81_Index
000052BA                            ; ===========================================================================
000052BA                            
000052BA                            Obj81_Main:				; XREF: Obj81_Index
000052BA 5428 0024                  		addq.b	#2,$24(a0)
000052BE 317C 00A0 0008             		move.w	#$A0,8(a0)
000052C4 317C 00C0 000C             		move.w	#$C0,$C(a0)
000052CA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000052D2 317C 0780 0002             		move.w	#$780,2(a0)
000052D8 117C 0004 0001             		move.b	#4,1(a0)
000052DE 117C 0002 0018             		move.b	#2,$18(a0)
000052E4 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000052EA 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000052F0                            
000052F0                            Obj81_ChkLand:				; XREF: Obj81_Index
000052F0 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000052F6 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000052F8 5428 0024                  		addq.b	#2,$24(a0)
000052FC 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005300 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005308 317C 8500 0002             		move.w	#$8500,2(a0)
0000530E 117C 0000 001C             		move.b	#0,$1C(a0)
00005314 6000                       		bra.s	Obj81_Animate
00005316                            ; ===========================================================================
00005316                            
00005316                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005316 4EB9 0000 0000             		jsr	SpeedToPos
0000531C 4EB9 0000 0000             		jsr	Sonic_Animate
00005322 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005328                            ; ===========================================================================
00005328                            
00005328                            Obj81_Animate:				; XREF: Obj81_Index
00005328 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000532C 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000532E 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005334 4EF9 0000 0000             		jmp	AnimateSprite
0000533A                            ; ===========================================================================
0000533A                            
0000533A                            Obj81_GetUp:				; XREF: Obj81_Animate
0000533A 5428 0024                  		addq.b	#2,$24(a0)
0000533E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005346 317C 0780 0002             		move.w	#$780,2(a0)
0000534C 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005352 4268 0014                  		clr.w	$14(a0)
00005356 5168 000C                  		subq.w	#8,$C(a0)
0000535A 103C 00E0                  		move.b	#$E0,d0
0000535E 6100 C25C                  		bsr.w	PlaySound_Special ; fade out music
00005362                            
00005362                            Obj81_Run:				; XREF: Obj81_Index
00005362 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005368 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000536A 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005370 6000                       		bra.s	Obj81_ShowRun
00005372                            ; ===========================================================================
00005372                            
00005372                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005372 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005378                            
00005378                            Obj81_ShowRun:				; XREF: Obj81_Run
00005378 4EB9 0000 0000             		jsr	SpeedToPos
0000537E 4EB9 0000 0000             		jsr	Sonic_Animate
00005384 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000538A                            ; ===========================================================================
0000538A                            Ani_obj81:
0000538A                            	include "_anim\obj81.asm"
0000538A                            ; ---------------------------------------------------------------------------
0000538A                            ; Animation script - Sonic on the continue screen
0000538A                            ; ---------------------------------------------------------------------------
0000538A 0000                       		dc.w byte_504A-Ani_obj81
0000538C 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005398 00                         		even
00005398 00                         		even
00005398                            
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398                            Map_obj80:
00005398                            	include "_maps\obj80.asm"
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000539C 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000053A0 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000053A4 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000053A8 0B                         byte_5066:	dc.b $B
000053A9 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000053AE F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000053B3 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000053B8 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000053BD F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000053C2 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000053C7 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000053CC F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000053D1 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000053D6 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000053DB 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000053E0 03                         byte_509E:	dc.b 3
000053E1 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000053E6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053EB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000053F0 03                         byte_50AE:	dc.b 3
000053F1 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000053F6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053FB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005400 03                         byte_50BE:	dc.b 3
00005401 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005406 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000540B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005410 02                         byte_50CE:	dc.b 2
00005411 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005416 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000541B 01                         byte_50D9:	dc.b 1
0000541C 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005421 01                         byte_50DF:	dc.b 1
00005422 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005428 00                         		even
00005428 00                         		even
00005428                            
00005428                            ; ===========================================================================
00005428                            ; ---------------------------------------------------------------------------
00005428                            ; Ending sequence in Green Hill	Zone
00005428                            ; ---------------------------------------------------------------------------
00005428                            
00005428                            EndingSequence:				; XREF: GameModeArray
00005428 103C 00E4                  		move.b	#$E4,d0
0000542C 6100 C18E                  		bsr.w	PlaySound_Special ; stop music
00005430 6100 CC40                  		bsr.w	Pal_FadeFrom
00005434 43F8 D000                  		lea	($FFFFD000).w,a1
00005438 7000                       		moveq	#0,d0
0000543A 323C 07FF                  		move.w	#$7FF,d1
0000543E                            
0000543E                            End_ClrObjRam:
0000543E 22C0                       		move.l	d0,(a1)+
00005440 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005444                            
00005444 43F8 F628                  		lea	($FFFFF628).w,a1
00005448 7000                       		moveq	#0,d0
0000544A 323C 0015                  		move.w	#$15,d1
0000544E                            
0000544E                            End_ClrRam:
0000544E 22C0                       		move.l	d0,(a1)+
00005450 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005454                            
00005454 43F8 F700                  		lea	($FFFFF700).w,a1
00005458 7000                       		moveq	#0,d0
0000545A 323C 003F                  		move.w	#$3F,d1
0000545E                            
0000545E                            End_ClrRam2:
0000545E 22C0                       		move.l	d0,(a1)+
00005460 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005464                            
00005464 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005468 7000                       		moveq	#0,d0
0000546A 323C 0047                  		move.w	#$47,d1
0000546E                            
0000546E                            End_ClrRam3:
0000546E 22C0                       		move.l	d0,(a1)+
00005470 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005474                            
00005474 46FC 2700                  		move	#$2700,sr
00005478 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000547C 0200 00BF                  		andi.b	#$BF,d0
00005480 33C0 00C0 0004             		move.w	d0,($C00004).l
00005486 6100 C05C                  		bsr.w	ClearScreen
0000548A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005490 3CBC 8B03                  		move.w	#$8B03,(a6)
00005494 3CBC 8230                  		move.w	#$8230,(a6)
00005498 3CBC 8407                  		move.w	#$8407,(a6)
0000549C 3CBC 857C                  		move.w	#$857C,(a6)
000054A0 3CBC 9001                  		move.w	#$9001,(a6)
000054A4 3CBC 8004                  		move.w	#$8004,(a6)
000054A8 3CBC 8720                  		move.w	#$8720,(a6)
000054AC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000054B2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000054B6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000054BC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000054C2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000054C8 6700                       		beq.s	End_LoadData	; if yes, branch
000054CA 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000054D0                            
000054D0                            End_LoadData:
000054D0 701C                       		moveq	#$1C,d0
000054D2 6100 C438                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000054D6 4EB9 0000 0000             		jsr	Hud_Base
000054DC 6100 0000                  		bsr.w	LevelSizeLoad
000054E0 6100 0000                  		bsr.w	DeformBgLayer
000054E4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000054EA 6100 0000                  		bsr.w	MainLoadBlockLoad
000054EE 6100 0000                  		bsr.w	LoadTilesFromStart
000054F2 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000054FA 46FC 2300                  		move	#$2300,sr
000054FE 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005504 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005508 6100 C5B2                  		bsr.w	KosDec
0000550C 7003                       		moveq	#3,d0
0000550E 6100 CE0C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005512 303C 008B                  		move.w	#$8B,d0
00005516 6100 C09E                  		bsr.w	PlaySound	; play ending sequence music
0000551A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005520 6700                       		beq.s	End_LoadSonic	; if not, branch
00005522 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005528                            
00005528                            End_LoadSonic:
00005528 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000552E 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005534 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000553A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005540 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005546 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000554C 4EB9 0000 0000             		jsr	ObjPosLoad
00005552 4EB9 0000 0000             		jsr	ObjectsLoad
00005558 4EB9 0000 0000             		jsr	BuildSprites
0000555E 7000                       		moveq	#0,d0
00005560 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005564 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005568 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000556C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005570 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005574 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005578 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000557C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005580 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005584 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005588 6100 EEDA                  		bsr.w	OscillateNumInit
0000558C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005592 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005598 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000559E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000055A4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055AA 6100 D644                  		bsr.w	DelayProgram
000055AE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000055B2 0000 0040                  		ori.b	#$40,d0
000055B6 33C0 00C0 0004             		move.w	d0,($C00004).l
000055BC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000055C2 6100 CA08                  		bsr.w	Pal_FadeTo
000055C6                            
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            ; Main ending sequence loop
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            
000055C6                            End_MainLoop:
000055C6 6100 C000                  		bsr.w	PauseGame
000055CA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055D0 6100 D61E                  		bsr.w	DelayProgram
000055D4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000055D8 6100 0000                  		bsr.w	End_MoveSonic
000055DC 4EB9 0000 0000             		jsr	ObjectsLoad
000055E2 6100 0000                  		bsr.w	DeformBgLayer
000055E6 4EB9 0000 0000             		jsr	BuildSprites
000055EC 4EB9 0000 0000             		jsr	ObjPosLoad
000055F2 6100 C568                  		bsr.w	PalCycle_Load
000055F6 6100 EEC2                  		bsr.w	OscillateNumDo
000055FA 6100 EF4E                  		bsr.w	ChangeRingFrame
000055FE 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005604 6700                       		beq.s	loc_52DA	; if yes, branch
00005606 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000560C 103C 0091                  		move.b	#$91,d0
00005610 6100 BFAA                  		bsr.w	PlaySound_Special ; play credits music
00005614 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000561A 4E75                       		rts	
0000561C                            ; ===========================================================================
0000561C                            
0000561C                            loc_52DA:
0000561C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005620 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005624                            
00005624 4278 FE02                  		clr.w	($FFFFFE02).w
00005628 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000562E 4278 F794                  		clr.w	($FFFFF794).w
00005632                            
00005632                            End_AllEmlds:				; XREF: loc_5334
00005632 6100 BF94                  		bsr.w	PauseGame
00005636 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000563C 6100 D5B2                  		bsr.w	DelayProgram
00005640 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005644 6100 0000                  		bsr.w	End_MoveSonic
00005648 4EB9 0000 0000             		jsr	ObjectsLoad
0000564E 6100 0000                  		bsr.w	DeformBgLayer
00005652 4EB9 0000 0000             		jsr	BuildSprites
00005658 4EB9 0000 0000             		jsr	ObjPosLoad
0000565E 6100 EE5A                  		bsr.w	OscillateNumDo
00005662 6100 EEE6                  		bsr.w	ChangeRingFrame
00005666 5378 F794                  		subq.w	#1,($FFFFF794).w
0000566A 6A00                       		bpl.s	loc_5334
0000566C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005672 6100 CB48                  		bsr.w	Pal_ToWhite
00005676                            
00005676                            loc_5334:
00005676 4A78 FE02                  		tst.w	($FFFFFE02).w
0000567A 6700 FFB6                  		beq.w	End_AllEmlds
0000567E 4278 FE02                  		clr.w	($FFFFFE02).w
00005682 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005688 4BF9 00C0 0004             		lea	($C00004).l,a5
0000568E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005694 47F8 F700                  		lea	($FFFFF700).w,a3
00005698 49F8 A400                  		lea	($FFFFA400).w,a4
0000569C 343C 4000                  		move.w	#$4000,d2
000056A0 6100 0000                  		bsr.w	LoadTilesFromStart2
000056A4 7013                       		moveq	#$13,d0
000056A6 6100 CC74                  		bsr.w	PalLoad1	; load ending pallet
000056AA 6100 CA44                  		bsr.w	Pal_MakeWhite
000056AE 6000 FF16                  		bra.w	End_MainLoop
000056B2                            
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            ; Subroutine controlling Sonic on the ending sequence
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            
000056B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056B2                            
000056B2                            
000056B2                            End_MoveSonic:				; XREF: End_MainLoop
000056B2 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000056B6 6600                       		bne.s	End_MoveSonic2
000056B8 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000056BE 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000056C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056C4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000056CA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000056D0 4E75                       		rts	
000056D2                            ; ===========================================================================
000056D2                            
000056D2                            End_MoveSonic2:				; XREF: End_MoveSonic
000056D2 5500                       		subq.b	#2,d0
000056D4 6600                       		bne.s	End_MoveSonic3
000056D6 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000056DC 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000056DE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056E2 7000                       		moveq	#0,d0
000056E4 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000056E8 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000056EC 31C0 D014                  		move.w	d0,($FFFFD014).w
000056F0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000056F6 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000056FC 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005702 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005708 4E75                       		rts	
0000570A                            ; ===========================================================================
0000570A                            
0000570A                            End_MoveSonic3:				; XREF: End_MoveSonic
0000570A 5500                       		subq.b	#2,d0
0000570C 6600                       		bne.s	End_MoveSonExit
0000570E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005712 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005718 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000571E 4278 D024                  		clr.w	($FFFFD024).w
00005722                            
00005722                            End_MoveSonExit:
00005722 4E75                       		rts	
00005724                            ; End of function End_MoveSonic
00005724                            
00005724                            ; ===========================================================================
00005724                            ; ---------------------------------------------------------------------------
00005724                            ; Object 87 - Sonic on ending sequence
00005724                            ; ---------------------------------------------------------------------------
00005724                            
00005724                            Obj87:					; XREF: Obj_Index
00005724 7000                       		moveq	#0,d0
00005726 1028 0025                  		move.b	$25(a0),d0
0000572A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000572E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005732 4EF9 0000 0000             		jmp	DisplaySprite
00005738                            ; ===========================================================================
00005738 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000573C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005740 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005744 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005748 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000574C                            ; ===========================================================================
0000574C                            
0000574C                            Obj87_Main:				; XREF: Obj87_Index
0000574C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005752 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005754 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000575A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005760 4E75                       		rts	
00005762                            ; ===========================================================================
00005762                            
00005762                            Obj87_Main2:				; XREF: Obj87_Main
00005762 5428 0025                  		addq.b	#2,$25(a0)
00005766 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000576E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005774 117C 0004 0001             		move.b	#4,1(a0)
0000577A 4228 0022                  		clr.b	$22(a0)
0000577E 117C 0002 0018             		move.b	#2,$18(a0)
00005784 117C 0000 001A             		move.b	#0,$1A(a0)
0000578A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005790                            
00005790                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005790 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005794 6600                       		bne.s	Obj87_Wait
00005796 5428 0025                  		addq.b	#2,$25(a0)
0000579A 317C 0001 001C             		move.w	#1,$1C(a0)
000057A0 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000057A6                            
000057A6                            Obj87_Wait:
000057A6 4E75                       		rts	
000057A8                            ; ===========================================================================
000057A8                            
000057A8                            Obj87_LookUp:				; XREF: Obj87_Index
000057A8 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000057B0 6600                       		bne.s	locret_5480
000057B2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000057B8 317C 005A 0030             		move.w	#$5A,$30(a0)
000057BE 5428 0025                  		addq.b	#2,$25(a0)
000057C2                            
000057C2                            locret_5480:
000057C2 4E75                       		rts	
000057C4                            ; ===========================================================================
000057C4                            
000057C4                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000057C4 5368 0030                  		subq.w	#1,$30(a0)
000057C8 6600                       		bne.s	Obj87_Wait2
000057CA 43F8 D400                  		lea	($FFFFD400).w,a1
000057CE 323C 00FF                  		move.w	#$FF,d1
000057D2                            
000057D2                            Obj87_ClrLoop:
000057D2 4299                       		clr.l	(a1)+
000057D4 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000057D8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000057DE 5428 0025                  		addq.b	#2,$25(a0)
000057E2 117C 0001 001C             		move.b	#1,$1C(a0)
000057E8 317C 003C 0030             		move.w	#$3C,$30(a0)
000057EE                            
000057EE                            Obj87_Wait2:
000057EE 4E75                       		rts	
000057F0                            ; ===========================================================================
000057F0                            
000057F0                            Obj87_MakeLogo:				; XREF: Obj87_Index
000057F0 5368 0030                  		subq.w	#1,$30(a0)
000057F4 6600                       		bne.s	Obj87_Wait3
000057F6 5428 0025                  		addq.b	#2,$25(a0)
000057FA 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005800 117C 0002 001C             		move.b	#2,$1C(a0)
00005806 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000580C                            
0000580C                            Obj87_Wait3:
0000580C 4E75                       		rts	
0000580E                            ; ===========================================================================
0000580E                            
0000580E                            Obj87_Animate:				; XREF: Obj87_Index
0000580E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005814 4EF9 0000 0000             		jmp	AnimateSprite
0000581A                            ; ===========================================================================
0000581A                            
0000581A                            Obj87_Leap:				; XREF: Obj87_Index
0000581A 5368 0030                  		subq.w	#1,$30(a0)
0000581E 6600                       		bne.s	Obj87_Wait4
00005820 5428 0025                  		addq.b	#2,$25(a0)
00005824 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000582C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005832 117C 0004 0001             		move.b	#4,1(a0)
00005838 4228 0022                  		clr.b	$22(a0)
0000583C 117C 0002 0018             		move.b	#2,$18(a0)
00005842 117C 0005 001A             		move.b	#5,$1A(a0)
00005848 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000584E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005854 60B8                       		bra.s	Obj87_Animate
00005856                            ; ===========================================================================
00005856                            
00005856                            Obj87_Wait4:				; XREF: Obj87_Leap
00005856 4E75                       		rts	
00005858                            ; ===========================================================================
00005858                            Ani_obj87:
00005858                            	include "_anim\obj87.asm"
00005858                            ; ---------------------------------------------------------------------------
00005858                            ; Animation script - Sonic on the ending sequence
00005858                            ; ---------------------------------------------------------------------------
00005858 0000                       		dc.w byte_551C-Ani_obj87
0000585A 0000                       		dc.w byte_552A-Ani_obj87
0000585C 0000                       		dc.w byte_5534-Ani_obj87
0000585E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000586C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005876 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000587E                            		even
0000587E                            		even
0000587E                            
0000587E                            ; ===========================================================================
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            ; Object 88 - chaos emeralds on	the ending sequence
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            
0000587E                            Obj88:					; XREF: Obj_Index
0000587E 7000                       		moveq	#0,d0
00005880 1028 0024                  		move.b	$24(a0),d0
00005884 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005888 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000588C 4EF9 0000 0000             		jmp	DisplaySprite
00005892                            ; ===========================================================================
00005892 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005894 0000                       		dc.w Obj88_Move-Obj88_Index
00005896                            ; ===========================================================================
00005896                            
00005896                            Obj88_Main:				; XREF: Obj88_Index
00005896 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000589C 6700                       		beq.s	Obj88_Main2
0000589E 588F                       		addq.l	#4,sp
000058A0 4E75                       		rts	
000058A2                            ; ===========================================================================
000058A2                            
000058A2                            Obj88_Main2:				; XREF: Obj88_Main
000058A2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000058A8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000058AE 2248                       		movea.l	a0,a1
000058B0 7600                       		moveq	#0,d3
000058B2 7401                       		moveq	#1,d2
000058B4 7205                       		moveq	#5,d1
000058B6                            
000058B6                            Obj88_MainLoop:
000058B6 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000058BA 5429 0024                  		addq.b	#2,$24(a1)
000058BE 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000058C6 337C 03C5 0002             		move.w	#$3C5,2(a1)
000058CC 137C 0004 0001             		move.b	#4,1(a1)
000058D2 137C 0001 0018             		move.b	#1,$18(a1)
000058D8 3368 0008 0038             		move.w	8(a0),$38(a1)
000058DE 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000058E4 1342 001C                  		move.b	d2,$1C(a1)
000058E8 1342 001A                  		move.b	d2,$1A(a1)
000058EC 5202                       		addq.b	#1,d2
000058EE 1343 0026                  		move.b	d3,$26(a1)
000058F2 0603 002A                  		addi.b	#$2A,d3
000058F6 43E9 0040                  		lea	$40(a1),a1
000058FA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000058FE                            
000058FE                            Obj88_Move:				; XREF: Obj88_Index
000058FE 3028 003E                  		move.w	$3E(a0),d0
00005902 D168 0026                  		add.w	d0,$26(a0)
00005906 1028 0026                  		move.b	$26(a0),d0
0000590A 4EB9 0000 2C22             		jsr	(CalcSine).l
00005910 7800                       		moveq	#0,d4
00005912 1828 003C                  		move.b	$3C(a0),d4
00005916 C3C4                       		muls.w	d4,d1
00005918 E081                       		asr.l	#8,d1
0000591A C1C4                       		muls.w	d4,d0
0000591C E080                       		asr.l	#8,d0
0000591E D268 0038                  		add.w	$38(a0),d1
00005922 D068 003A                  		add.w	$3A(a0),d0
00005926 3141 0008                  		move.w	d1,8(a0)
0000592A 3140 000C                  		move.w	d0,$C(a0)
0000592E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005934 6700                       		beq.s	loc_55FA
00005936 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000593C                            
0000593C                            loc_55FA:
0000593C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005942 6700                       		beq.s	loc_5608
00005944 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000594A                            
0000594A                            loc_5608:
0000594A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005950 6700                       		beq.s	locret_5614
00005952 5368 003A                  		subq.w	#1,$3A(a0)
00005956                            
00005956                            locret_5614:
00005956 4E75                       		rts	
00005958                            ; ===========================================================================
00005958                            ; ---------------------------------------------------------------------------
00005958                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005958                            ; ---------------------------------------------------------------------------
00005958                            
00005958                            Obj89:					; XREF: Obj_Index
00005958 7000                       		moveq	#0,d0
0000595A 1028 0024                  		move.b	$24(a0),d0
0000595E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005962 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005966                            ; ===========================================================================
00005966 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005968 0000                       		dc.w Obj89_Move-Obj89_Index
0000596A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000596C                            ; ===========================================================================
0000596C                            
0000596C                            Obj89_Main:				; XREF: Obj89_Index
0000596C 5428 0024                  		addq.b	#2,$24(a0)
00005970 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005976 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000597C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005984 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000598A 117C 0000 0001             		move.b	#0,1(a0)
00005990 117C 0000 0018             		move.b	#0,$18(a0)
00005996                            
00005996                            Obj89_Move:				; XREF: Obj89_Index
00005996 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000599C 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000599E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000059A4 4EB9 0000 0000             		jsr	DisplaySprite
000059AA                            ; ===========================================================================
000059AA                            
000059AA                            Obj89_Delay:				; XREF: Obj89_Move
000059AA 5428 0024                  		addq.b	#2,$24(a0)
000059AE 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000059B4                            
000059B4                            Obj89_GotoCredits:			; XREF: Obj89_Index
000059B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000059B8 6A00                       		bpl.s	Obj89_Display
000059BA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000059C0                            
000059C0                            Obj89_Display:
000059C0 4EB9 0000 0000             		jsr	DisplaySprite
000059C6                            ; ===========================================================================
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            Map_obj87:
000059C6                            	include "_maps\obj87.asm"
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000059CA 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000059CE 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000059D2 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000059D6 02                         byte_5690:	dc.b 2
000059D7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000059DC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059E1 03                         byte_569B:	dc.b 3
000059E2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000059E7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000059EC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059F1 02                         byte_56AB:	dc.b 2
000059F2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000059F7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000059FC 02                         byte_56B6:	dc.b 2
000059FD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005A02 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005A07 02                         byte_56C1:	dc.b 2
00005A08 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005A0D FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005A12 03                         byte_56CC:	dc.b 3
00005A13 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005A18 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005A1D 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005A22 07                         byte_56DC:	dc.b 7
00005A23 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005A28 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005A2D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005A32 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005A37 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005A3C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005A41 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005A46 18                         byte_5700:	dc.b $18
00005A47 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005A4C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005A51 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005A56 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005A5B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005A60 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005A65 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005A6A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005A6F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005A74 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005A79 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005A7E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005A83 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005A88 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005A8D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005A92 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005A97 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005A9C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005AA1 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005AA6 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005AAB D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005AB0 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005AB5 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005ABA F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005AC0 00                         		even
00005AC0 00                         		even
00005AC0                            
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            Map_obj88:
00005AC0                            	include "_maps\obj88.asm"
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005AC4 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005AC8 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005ACC 0000                       		dc.w byte_57AC-Map_obj88
00005ACE 01                         byte_5788:	dc.b 1
00005ACF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005AD4 01                         byte_578E:	dc.b 1
00005AD5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005ADA 01                         byte_5794:	dc.b 1
00005ADB F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005AE0 01                         byte_579A:	dc.b 1
00005AE1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005AE6 01                         byte_57A0:	dc.b 1
00005AE7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005AEC 01                         byte_57A6:	dc.b 1
00005AED F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005AF2 01                         byte_57AC:	dc.b 1
00005AF3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005AF8                            		even
00005AF8                            		even
00005AF8                            
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            Map_obj89:
00005AF8                            	include "_maps\obj89.asm"
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8 0000                       		dc.w byte_57B4-Map_obj89
00005AFA 03                         byte_57B4:	dc.b 3
00005AFB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005B00 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005B05 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005B0A                            		even
00005B0A                            		even
00005B0A                            
00005B0A                            ; ===========================================================================
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            ; Credits ending sequence
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            
00005B0A                            Credits:				; XREF: GameModeArray
00005B0A 6100 BCF2                  		bsr.w	ClearPLC
00005B0E 6100 C562                  		bsr.w	Pal_FadeFrom
00005B12 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B18 3CBC 8004                  		move.w	#$8004,(a6)
00005B1C 3CBC 8230                  		move.w	#$8230,(a6)
00005B20 3CBC 8407                  		move.w	#$8407,(a6)
00005B24 3CBC 9001                  		move.w	#$9001,(a6)
00005B28 3CBC 9200                  		move.w	#$9200,(a6)
00005B2C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B30 3CBC 8720                  		move.w	#$8720,(a6)
00005B34 4238 F64E                  		clr.b	($FFFFF64E).w
00005B38 6100 B9AA                  		bsr.w	ClearScreen
00005B3C 43F8 D000                  		lea	($FFFFD000).w,a1
00005B40 7000                       		moveq	#0,d0
00005B42 323C 07FF                  		move.w	#$7FF,d1
00005B46                            
00005B46                            Cred_ClrObjRam:
00005B46 22C0                       		move.l	d0,(a1)+
00005B48 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005B4C                            
00005B4C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005B56 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005B5C 6100 BB02                  		bsr.w	NemDec
00005B60 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B64 7000                       		moveq	#0,d0
00005B66 323C 001F                  		move.w	#$1F,d1
00005B6A                            
00005B6A                            Cred_ClrPallet:
00005B6A 22C0                       		move.l	d0,(a1)+
00005B6C 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005B70                            
00005B70 7003                       		moveq	#3,d0
00005B72 6100 C7A8                  		bsr.w	PalLoad1	; load Sonic's pallet
00005B76 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005B7C 4EB9 0000 0000             		jsr	ObjectsLoad
00005B82 4EB9 0000 0000             		jsr	BuildSprites
00005B88 6100 0000                  		bsr.w	EndingDemoLoad
00005B8C 7000                       		moveq	#0,d0
00005B8E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005B92 E948                       		lsl.w	#4,d0
00005B94 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005B9A 45F2 0000                  		lea	(a2,d0.w),a2
00005B9E 7000                       		moveq	#0,d0
00005BA0 1012                       		move.b	(a2),d0
00005BA2 6700                       		beq.s	loc_5862
00005BA4 6100 BBFA                  		bsr.w	LoadPLC		; load level patterns
00005BA8                            
00005BA8                            loc_5862:
00005BA8 7001                       		moveq	#1,d0
00005BAA 6100 BBF4                  		bsr.w	LoadPLC		; load standard	level patterns
00005BAE 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005BB4 6100 C416                  		bsr.w	Pal_FadeTo
00005BB8                            
00005BB8                            Cred_WaitLoop:
00005BB8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005BBE 6100 D030                  		bsr.w	DelayProgram
00005BC2 6100 BC48                  		bsr.w	RunPLC_RAM
00005BC6 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005BCA 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005BCC 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005BD0 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005BD2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005BD8 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005BDC 4E75                       		rts	
00005BDE                            
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            ; Ending sequence demo loading subroutine
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            
00005BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BDE                            
00005BDE                            
00005BDE                            EndingDemoLoad:				; XREF: Credits
00005BDE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005BE2 0240 000F                  		andi.w	#$F,d0
00005BE6 D040                       		add.w	d0,d0
00005BE8 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005BEC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005BF0 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005BF4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005BFA 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005BFC 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005C02 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005C08 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005C0E 7000                       		moveq	#0,d0
00005C10 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005C14 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005C18 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005C1C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005C20 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005C26 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005C28 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005C2E 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005C32 303C 0008                  		move.w	#8,d0
00005C36                            
00005C36                            EndDemo_LampLoad:
00005C36 24D9                       		move.l	(a1)+,(a2)+
00005C38 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005C3C                            
00005C3C                            EndDemo_Exit:
00005C3C 4E75                       		rts	
00005C3E                            ; End of function EndingDemoLoad
00005C3E                            
00005C3E                            ; ===========================================================================
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            ; Levels used in the end sequence demos
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005C4E                            
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            EndDemo_LampVar:
00005C4E 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005C50 0A00 062C 000D             		dc.w $A00, $62C, $D
00005C56 0000 0000                  		dc.l 0
00005C5A 0000                       		dc.b 0,	0
00005C5C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005C70 0101                       		dc.b 1,	1
00005C72                            ; ===========================================================================
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            ; "TRY AGAIN" and "END"	screens
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            
00005C72                            TryAgainEnd:				; XREF: Credits
00005C72 6100 BB8A                  		bsr.w	ClearPLC
00005C76 6100 C3FA                  		bsr.w	Pal_FadeFrom
00005C7A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C80 3CBC 8004                  		move.w	#$8004,(a6)
00005C84 3CBC 8230                  		move.w	#$8230,(a6)
00005C88 3CBC 8407                  		move.w	#$8407,(a6)
00005C8C 3CBC 9001                  		move.w	#$9001,(a6)
00005C90 3CBC 9200                  		move.w	#$9200,(a6)
00005C94 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C98 3CBC 8720                  		move.w	#$8720,(a6)
00005C9C 4238 F64E                  		clr.b	($FFFFF64E).w
00005CA0 6100 B842                  		bsr.w	ClearScreen
00005CA4 43F8 D000                  		lea	($FFFFD000).w,a1
00005CA8 7000                       		moveq	#0,d0
00005CAA 323C 07FF                  		move.w	#$7FF,d1
00005CAE                            
00005CAE                            TryAg_ClrObjRam:
00005CAE 22C0                       		move.l	d0,(a1)+
00005CB0 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005CB4                            
00005CB4 701D                       		moveq	#$1D,d0
00005CB6 6100 BC54                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005CBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005CBE 7000                       		moveq	#0,d0
00005CC0 323C 001F                  		move.w	#$1F,d1
00005CC4                            
00005CC4                            TryAg_ClrPallet:
00005CC4 22C0                       		move.l	d0,(a1)+
00005CC6 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005CCA                            
00005CCA 7013                       		moveq	#$13,d0
00005CCC 6100 C64E                  		bsr.w	PalLoad1	; load ending pallet
00005CD0 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005CD4 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005CDA 4EB9 0000 0000             		jsr	ObjectsLoad
00005CE0 4EB9 0000 0000             		jsr	BuildSprites
00005CE6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005CEC 6100 C2DE                  		bsr.w	Pal_FadeTo
00005CF0                            
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            ; "TRY AGAIN" and "END"	screen main loop
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            TryAg_MainLoop:
00005CF0 6100 B8D6                  		bsr.w	PauseGame
00005CF4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005CFA 6100 CEF4                  		bsr.w	DelayProgram
00005CFE 4EB9 0000 0000             		jsr	ObjectsLoad
00005D04 4EB9 0000 0000             		jsr	BuildSprites
00005D0A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005D10 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005D12 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005D16 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005D18 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005D1E 67D0                       		beq.s	TryAg_MainLoop
00005D20                            
00005D20                            TryAg_Exit:
00005D20 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005D26 4E75                       		rts	
00005D28                            
00005D28                            ; ===========================================================================
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            
00005D28                            Obj8B:					; XREF: Obj_Index
00005D28 7000                       		moveq	#0,d0
00005D2A 1028 0024                  		move.b	$24(a0),d0
00005D2E 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005D32 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005D36 4EF9 0000 0000             		jmp	DisplaySprite
00005D3C                            ; ===========================================================================
00005D3C 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005D3E 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005D40 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005D42 0000                       		dc.w loc_5A8E-Obj8B_Index
00005D44                            ; ===========================================================================
00005D44                            
00005D44                            Obj8B_Main:				; XREF: Obj8B_Index
00005D44 5428 0024                  		addq.b	#2,$24(a0)
00005D48 317C 0120 0008             		move.w	#$120,8(a0)
00005D4E 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005D54 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005D5C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005D62 117C 0000 0001             		move.b	#0,1(a0)
00005D68 117C 0002 0018             		move.b	#2,$18(a0)
00005D6E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005D74 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005D7A 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005D7C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005D82 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005D88 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005D8E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005D94                            
00005D94                            Obj8B_Animate:				; XREF: Obj8B_Index
00005D94 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005D9A 4EF9 0000 0000             		jmp	AnimateSprite
00005DA0                            ; ===========================================================================
00005DA0                            
00005DA0                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005DA0 5428 0024                  		addq.b	#2,$24(a0)
00005DA4 7002                       		moveq	#2,d0
00005DA6 0828 0000 001C             		btst	#0,$1C(a0)
00005DAC 6700                       		beq.s	loc_5A6A
00005DAE 4440                       		neg.w	d0
00005DB0                            
00005DB0                            loc_5A6A:
00005DB0 43F8 D800                  		lea	($FFFFD800).w,a1
00005DB4 7205                       		moveq	#5,d1
00005DB6                            
00005DB6                            loc_5A70:
00005DB6 1340 003E                  		move.b	d0,$3E(a1)
00005DBA 3400                       		move.w	d0,d2
00005DBC E742                       		asl.w	#3,d2
00005DBE D529 0026                  		add.b	d2,$26(a1)
00005DC2 43E9 0040                  		lea	$40(a1),a1
00005DC6 51C9 FFEE                  		dbf	d1,loc_5A70
00005DCA 5228 001A                  		addq.b	#1,$1A(a0)
00005DCE 317C 0070 0030             		move.w	#112,$30(a0)
00005DD4                            
00005DD4                            loc_5A8E:				; XREF: Obj8B_Index
00005DD4 5368 0030                  		subq.w	#1,$30(a0)
00005DD8 6A00                       		bpl.s	locret_5AA0
00005DDA 0868 0000 001C             		bchg	#0,$1C(a0)
00005DE0 117C 0002 0024             		move.b	#2,$24(a0)
00005DE6                            
00005DE6                            locret_5AA0:
00005DE6 4E75                       		rts	
00005DE8                            ; ===========================================================================
00005DE8                            Ani_obj8B:
00005DE8                            	include "_anim\obj8B.asm"
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8 0000                       		dc.w byte_5AA8-Ani_obj8B
00005DEA 0000                       		dc.w byte_5AAC-Ani_obj8B
00005DEC 0000                       		dc.w byte_5AB0-Ani_obj8B
00005DEE 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005DF2 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005DF6 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005E08                            		even
00005E08                            		even
00005E08                            
00005E08                            ; ===========================================================================
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            
00005E08                            Obj8C:					; XREF: Obj_Index
00005E08 7000                       		moveq	#0,d0
00005E0A 1028 0024                  		move.b	$24(a0),d0
00005E0E 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005E12 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005E16 4EF9 0000 0000             		jmp	DisplaySprite
00005E1C                            ; ===========================================================================
00005E1C 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005E1E 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005E20                            ; ===========================================================================
00005E20                            
00005E20                            Obj8C_Main:				; XREF: Obj8C_Index
00005E20 2248                       		movea.l	a0,a1
00005E22 7400                       		moveq	#0,d2
00005E24 7600                       		moveq	#0,d3
00005E26 7205                       		moveq	#5,d1
00005E28 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005E2C                            
00005E2C                            Obj8C_MakeEms:				; XREF: loc_5B42
00005E2C 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005E30 5429 0024                  		addq.b	#2,$24(a1)
00005E34 237C 0000 5AC0 0004        		move.l	#Map_obj88,4(a1)
00005E3C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005E42 137C 0000 0001             		move.b	#0,1(a1)
00005E48 137C 0001 0018             		move.b	#1,$18(a1)
00005E4E 337C 0104 0008             		move.w	#$104,8(a1)
00005E54 337C 0120 0038             		move.w	#$120,$38(a1)
00005E5A 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005E60 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005E66 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005E6C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005E70                            
00005E70                            Obj8C_ChkEms:
00005E70 7000                       		moveq	#0,d0
00005E72 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005E76 5340                       		subq.w	#1,d0
00005E78 6500                       		bcs.s	loc_5B42
00005E7A                            
00005E7A                            Obj8C_ChkEmLoop:
00005E7A B433 0000                  		cmp.b	(a3,d0.w),d2
00005E7E 6600                       		bne.s	loc_5B3E
00005E80 5202                       		addq.b	#1,d2
00005E82 60EC                       		bra.s	Obj8C_ChkEms
00005E84                            ; ===========================================================================
00005E84                            
00005E84                            loc_5B3E:
00005E84 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005E88                            
00005E88                            loc_5B42:
00005E88 1342 001A                  		move.b	d2,$1A(a1)
00005E8C 5229 001A                  		addq.b	#1,$1A(a1)
00005E90 5202                       		addq.b	#1,d2
00005E92 137C 0080 0026             		move.b	#$80,$26(a1)
00005E98 1343 001E                  		move.b	d3,$1E(a1)
00005E9C 1343 001F                  		move.b	d3,$1F(a1)
00005EA0 0643 000A                  		addi.w	#$A,d3
00005EA4 43E9 0040                  		lea	$40(a1),a1
00005EA8 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005EAC                            
00005EAC                            Obj8C_Move:				; XREF: Obj8C_Index
00005EAC 4A68 003E                  		tst.w	$3E(a0)
00005EB0 6700                       		beq.s	locret_5BBA
00005EB2 4A28 001E                  		tst.b	$1E(a0)
00005EB6 6700                       		beq.s	loc_5B78
00005EB8 5328 001E                  		subq.b	#1,$1E(a0)
00005EBC 6600                       		bne.s	loc_5B80
00005EBE                            
00005EBE                            loc_5B78:
00005EBE 3028 003E                  		move.w	$3E(a0),d0
00005EC2 D168 0026                  		add.w	d0,$26(a0)
00005EC6                            
00005EC6                            loc_5B80:
00005EC6 1028 0026                  		move.b	$26(a0),d0
00005ECA 6700                       		beq.s	loc_5B8C
00005ECC 0C00 0080                  		cmpi.b	#$80,d0
00005ED0 6600                       		bne.s	loc_5B96
00005ED2                            
00005ED2                            loc_5B8C:
00005ED2 4268 003E                  		clr.w	$3E(a0)
00005ED6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005EDC                            
00005EDC                            loc_5B96:
00005EDC 4EB9 0000 2C22             		jsr	(CalcSine).l
00005EE2 7800                       		moveq	#0,d4
00005EE4 1828 003C                  		move.b	$3C(a0),d4
00005EE8 C3C4                       		muls.w	d4,d1
00005EEA E081                       		asr.l	#8,d1
00005EEC C1C4                       		muls.w	d4,d0
00005EEE E080                       		asr.l	#8,d0
00005EF0 D268 0038                  		add.w	$38(a0),d1
00005EF4 D068 003A                  		add.w	$3A(a0),d0
00005EF8 3141 0008                  		move.w	d1,8(a0)
00005EFC 3140 000A                  		move.w	d0,$A(a0)
00005F00                            
00005F00                            locret_5BBA:
00005F00 4E75                       		rts	
00005F02                            ; ===========================================================================
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            Map_obj8B:
00005F02                            	include "_maps\obj8B.asm"
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005F06 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005F0A 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005F0E 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005F12 08                         byte_5BCC:	dc.b 8
00005F13 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005F18 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005F1D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005F22 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005F27 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F2C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F31 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F36 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F3B 08                         byte_5BF5:	dc.b 8
00005F3C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005F41 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005F46 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005F4B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005F50 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005F55 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005F5A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F5F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F64 08                         byte_5C1E:	dc.b 8
00005F65 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005F6A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005F6F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005F74 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005F79 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F7E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F83 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F88 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F8D 08                         byte_5C47:	dc.b 8
00005F8E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005F93 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005F98 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005F9D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005FA2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005FA7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005FAC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FB1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FB6 0C                         byte_5C70:	dc.b $C
00005FB7 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005FBC F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005FC1 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005FC6 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005FCB ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005FD0 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005FD5 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005FDA 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005FDF 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005FE4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005FE9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005FEE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005FF3 0A                         byte_5CAD:	dc.b $A
00005FF4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005FF9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005FFE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006003 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006008 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000600D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006012 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006017 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000601C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006021 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006026 0A                         byte_5CE0:	dc.b $A
00006027 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000602C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006031 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006036 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000603B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006040 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006045 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000604A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000604F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006054 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006059 0C                         byte_5D13:	dc.b $C
0000605A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000605F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006064 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006069 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000606E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006073 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006078 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000607D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006082 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006087 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000608C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006091 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006096                            		even
00006096                            		even
00006096                            
00006096                            ; ---------------------------------------------------------------------------
00006096                            ; Ending sequence demos
00006096                            ; ---------------------------------------------------------------------------
00006096                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000060C4                            		even
000060C4                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006104                            		even
00006104                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006134                            		even
00006134                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006164                            		even
00006164                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006184                            		even
00006184                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000061A4                            		even
000061A4                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000061D4                            		even
000061D4                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006204                            		even
00006204                            
00006204                            ; ---------------------------------------------------------------------------
00006204                            ; Subroutine to	load level boundaries and start	locations
00006204                            ; ---------------------------------------------------------------------------
00006204                            
00006204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006204                            
00006204                            
00006204                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006204 7000                       		moveq	#0,d0
00006206 11C0 F740                  		move.b	d0,($FFFFF740).w
0000620A 11C0 F741                  		move.b	d0,($FFFFF741).w
0000620E 11C0 F746                  		move.b	d0,($FFFFF746).w
00006212 11C0 F748                  		move.b	d0,($FFFFF748).w
00006216 11C0 F742                  		move.b	d0,($FFFFF742).w
0000621A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000621E ED08                       		lsl.b	#6,d0
00006220 E848                       		lsr.w	#4,d0
00006222 3200                       		move.w	d0,d1
00006224 D040                       		add.w	d0,d0
00006226 D041                       		add.w	d1,d0
00006228 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000622C 3018                       		move.w	(a0)+,d0
0000622E 31C0 F730                  		move.w	d0,($FFFFF730).w
00006232 2018                       		move.l	(a0)+,d0
00006234 21C0 F728                  		move.l	d0,($FFFFF728).w
00006238 21C0 F720                  		move.l	d0,($FFFFF720).w
0000623C 2018                       		move.l	(a0)+,d0
0000623E 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006242 21C0 F724                  		move.l	d0,($FFFFF724).w
00006246 3038 F728                  		move.w	($FFFFF728).w,d0
0000624A 0640 0240                  		addi.w	#$240,d0
0000624E 31C0 F732                  		move.w	d0,($FFFFF732).w
00006252 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006258 3018                       		move.w	(a0)+,d0
0000625A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000625E 6000 0000                  		bra.w	LevSz_ChkLamp
00006262                            ; ===========================================================================
00006262                            ; ---------------------------------------------------------------------------
00006262                            ; Level size array and ending start location array
00006262                            ; ---------------------------------------------------------------------------
00006262                            LevelSizeArray:	incbin	misc\lvl_size.bin
000063B2                            		even
000063B2                            
000063B2                            EndingStLocArray:
000063B2                            		incbin	misc\sloc_end.bin
000063D2                            		even
000063D2                            
000063D2                            ; ===========================================================================
000063D2                            
000063D2                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000063D2 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000063D6 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000063D8 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000063DE 3238 D008                  		move.w	($FFFFD008).w,d1
000063E2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000063E6 6000                       		bra.s	loc_60D0
000063E8                            ; ===========================================================================
000063E8                            
000063E8                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000063E8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000063EC ED08                       		lsl.b	#6,d0
000063EE E848                       		lsr.w	#4,d0
000063F0 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000063F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000063F8 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000063FA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000063FE 5340                       		subq.w	#1,d0
00006400 E548                       		lsl.w	#2,d0
00006402 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006406                            
00006406                            LevSz_SonicPos:
00006406 7200                       		moveq	#0,d1
00006408 3219                       		move.w	(a1)+,d1
0000640A 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000640E 7000                       		moveq	#0,d0
00006410 3011                       		move.w	(a1),d0
00006412 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006416                            
00006416                            loc_60D0:				; XREF: LevSz_ChkLamp
00006416 0441 00A0                  		subi.w	#$A0,d1
0000641A 6400                       		bcc.s	loc_60D8
0000641C 7200                       		moveq	#0,d1
0000641E                            
0000641E                            loc_60D8:
0000641E 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006422 B242                       		cmp.w	d2,d1
00006424 6500                       		bcs.s	loc_60E2
00006426 3202                       		move.w	d2,d1
00006428                            
00006428                            loc_60E2:
00006428 31C1 F700                  		move.w	d1,($FFFFF700).w
0000642C 0440 0060                  		subi.w	#$60,d0
00006430 6400                       		bcc.s	loc_60EE
00006432 7000                       		moveq	#0,d0
00006434                            
00006434                            loc_60EE:
00006434 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006438 6D00                       		blt.s	loc_60F8
0000643A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000643E                            
0000643E                            loc_60F8:
0000643E 31C0 F704                  		move.w	d0,($FFFFF704).w
00006442 6100 0000                  		bsr.w	BgScrollSpeed
00006446 7000                       		moveq	#0,d0
00006448 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000644C E508                       		lsl.b	#2,d0
0000644E 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006454 6000 0000                  		bra.w	LevSz_Unk
00006458                            ; ===========================================================================
00006458                            ; ---------------------------------------------------------------------------
00006458                            ; Sonic	start location array
00006458                            ; ---------------------------------------------------------------------------
00006458                            StartLocArray:	incbin	misc\sloc_lev.bin
000064C8                            		even
000064C8                            
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Which	256x256	tiles contain loops or roll-tunnels
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000064C8                            ; loop,	loop, tunnel, tunnel
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            LoopTileNums:	incbin	misc\loopnums.bin
000064E4                            		even
000064E4                            
000064E4                            ; ===========================================================================
000064E4                            
000064E4                            LevSz_Unk:				; XREF: LevelSizeLoad
000064E4 7000                       		moveq	#0,d0
000064E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064EA E748                       		lsl.w	#3,d0
000064EC 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000064F0 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000064F4 24D9                       		move.l	(a1)+,(a2)+
000064F6 24D9                       		move.l	(a1)+,(a2)+
000064F8 4E75                       		rts	
000064FA                            ; End of function LevelSizeLoad
000064FA                            
000064FA                            ; ===========================================================================
000064FA 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006502 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000650A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006512 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000651A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006522 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000652A 0070 0100 0100 0100        		dc.l $700100, $1000100
00006532                            
00006532                            ; ---------------------------------------------------------------------------
00006532                            ; Subroutine to	set scroll speed of some backgrounds
00006532                            ; ---------------------------------------------------------------------------
00006532                            
00006532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006532                            
00006532                            
00006532                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006532 4A38 FE30                  		tst.b	($FFFFFE30).w
00006536 6600                       		bne.s	loc_6206
00006538 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000653C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006540 31C1 F708                  		move.w	d1,($FFFFF708).w
00006544 31C1 F710                  		move.w	d1,($FFFFF710).w
00006548 31C1 F718                  		move.w	d1,($FFFFF718).w
0000654C                            
0000654C                            loc_6206:
0000654C 7400                       		moveq	#0,d2
0000654E 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006552 D442                       		add.w	d2,d2
00006554 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006558 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000655C                            ; End of function BgScrollSpeed
0000655C                            
0000655C                            ; ===========================================================================
0000655C 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006560 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006564 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006568 0000                       		dc.w BgScroll_End-BgScroll_Index
0000656A                            ; ===========================================================================
0000656A                            
0000656A                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000656A 6000 0000                  		bra.w	Deform_GHZ
0000656E                            ; ===========================================================================
0000656E                            
0000656E                            BgScroll_LZ:				; XREF: BgScroll_Index
0000656E E280                       		asr.l	#1,d0
00006570 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006574 4E75                       		rts	
00006576                            ; ===========================================================================
00006576                            
00006576                            BgScroll_MZ:				; XREF: BgScroll_Index
00006576 4E75                       		rts	
00006578                            ; ===========================================================================
00006578                            
00006578                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006578 E280                       		asr.l	#1,d0
0000657A 0640 00C0                  		addi.w	#$C0,d0
0000657E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006582 4E75                       		rts	
00006584                            ; ===========================================================================
00006584                            
00006584                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006584 E980                       		asl.l	#4,d0
00006586 2400                       		move.l	d0,d2
00006588 E380                       		asl.l	#1,d0
0000658A D082                       		add.l	d2,d0
0000658C E080                       		asr.l	#8,d0
0000658E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006592 31C0 F714                  		move.w	d0,($FFFFF714).w
00006596 4E75                       		rts	
00006598                            ; ===========================================================================
00006598                            
00006598                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006598 E980                       		asl.l	#4,d0
0000659A E380                       		asl.l	#1,d0
0000659C E080                       		asr.l	#8,d0
0000659E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065A2 4E75                       		rts	
000065A4                            ; ===========================================================================
000065A4                            
000065A4                            BgScroll_End:				; XREF: BgScroll_Index
000065A4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065AA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065B0 4E75                       		rts	
000065B2                            ; ===========================================================================
000065B2 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000065B8 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065BE 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000065C4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065CA 4E75                       		rts
000065CC                            
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            ; Background layer deformation subroutines
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            
000065CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065CC                            
000065CC                            
000065CC                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000065CC 4A38 F744                  		tst.b	($FFFFF744).w
000065D0 6700                       		beq.s	loc_628E
000065D2 4E75                       		rts	
000065D4                            ; ===========================================================================
000065D4                            
000065D4                            loc_628E:
000065D4 4278 F754                  		clr.w	($FFFFF754).w
000065D8 4278 F756                  		clr.w	($FFFFF756).w
000065DC 4278 F758                  		clr.w	($FFFFF758).w
000065E0 4278 F75A                  		clr.w	($FFFFF75A).w
000065E4 6100 0000                  		bsr.w	ScrollHoriz
000065E8 6100 0000                  		bsr.w	ScrollVertical
000065EC 6100 0000                  		bsr.w	DynScrResizeLoad
000065F0 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000065F6 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000065FC 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006602 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006608 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000660E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006614 7000                       		moveq	#0,d0
00006616 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000661A D040                       		add.w	d0,d0
0000661C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006620 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006624                            ; End of function DeformBgLayer
00006624                            
00006624                            ; ===========================================================================
00006624                            ; ---------------------------------------------------------------------------
00006624                            ; Offset index for background layer deformation	code
00006624                            ; ---------------------------------------------------------------------------
00006624 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006628 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000662C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006630 0000                       		dc.w Deform_GHZ-Deform_Index
00006632                            ; ---------------------------------------------------------------------------
00006632                            ; Green	Hill Zone background layer deformation code
00006632                            ; ---------------------------------------------------------------------------
00006632                            
00006632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006632                            
00006632                            
00006632                            Deform_GHZ:				; XREF: Deform_Index
00006632 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006636 48C4                       		ext.l	d4
00006638 EB84                       		asl.l	#5,d4
0000663A 2204                       		move.l	d4,d1
0000663C E384                       		asl.l	#1,d4
0000663E D881                       		add.l	d1,d4
00006640 7A00                       		moveq	#0,d5
00006642 6100 0000                  		bsr.w	ScrollBlock1
00006646 6100 0000                  		bsr.w	ScrollBlock4
0000664A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000664E 3038 F704                  		move.w	($FFFFF704).w,d0
00006652 0240 07FF                  		andi.w	#$7FF,d0
00006656 EA48                       		lsr.w	#5,d0
00006658 4440                       		neg.w	d0
0000665A 0640 0026                  		addi.w	#$26,d0
0000665E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006662 3800                       		move.w	d0,d4
00006664 6100 0000                  		bsr.w	ScrollBlock3
00006668 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000666E 323C 006F                  		move.w	#$6F,d1
00006672 9244                       		sub.w	d4,d1
00006674 3038 F700                  		move.w	($FFFFF700).w,d0
00006678 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0000667E 6600                       		bne.s	loc_633C
00006680 7000                       		moveq	#0,d0
00006682                            
00006682                            loc_633C:
00006682 4440                       		neg.w	d0
00006684 4840                       		swap	d0
00006686 3038 F708                  		move.w	($FFFFF708).w,d0
0000668A 4440                       		neg.w	d0
0000668C                            
0000668C                            loc_6346:
0000668C 22C0                       		move.l	d0,(a1)+
0000668E 51C9 FFFC                  		dbf	d1,loc_6346
00006692 323C 0027                  		move.w	#$27,d1
00006696 3038 F710                  		move.w	($FFFFF710).w,d0
0000669A 4440                       		neg.w	d0
0000669C                            
0000669C                            loc_6356:
0000669C 22C0                       		move.l	d0,(a1)+
0000669E 51C9 FFFC                  		dbf	d1,loc_6356
000066A2 3038 F710                  		move.w	($FFFFF710).w,d0
000066A6 0640 0000                  		addi.w	#0,d0
000066AA 3438 F700                  		move.w	($FFFFF700).w,d2
000066AE 0642 FE00                  		addi.w	#-$200,d2
000066B2 9440                       		sub.w	d0,d2
000066B4 48C2                       		ext.l	d2
000066B6 E182                       		asl.l	#8,d2
000066B8 85FC 0068                  		divs.w	#$68,d2
000066BC 48C2                       		ext.l	d2
000066BE E182                       		asl.l	#8,d2
000066C0 7600                       		moveq	#0,d3
000066C2 3600                       		move.w	d0,d3
000066C4 323C 0047                  		move.w	#$47,d1
000066C8 D244                       		add.w	d4,d1
000066CA                            
000066CA                            loc_6384:
000066CA 3003                       		move.w	d3,d0
000066CC 4440                       		neg.w	d0
000066CE 22C0                       		move.l	d0,(a1)+
000066D0 4843                       		swap	d3
000066D2 D682                       		add.l	d2,d3
000066D4 4843                       		swap	d3
000066D6 51C9 FFF2                  		dbf	d1,loc_6384
000066DA 4E75                       		rts	
000066DC                            ; End of function Deform_GHZ
000066DC                            
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            ; Labyrinth Zone background layer deformation code
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            
000066DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066DC                            
000066DC                            
000066DC                            Deform_LZ:				; XREF: Deform_Index
000066DC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000066E0 48C4                       		ext.l	d4
000066E2 EF84                       		asl.l	#7,d4
000066E4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000066E8 48C5                       		ext.l	d5
000066EA EF85                       		asl.l	#7,d5
000066EC 6100 0000                  		bsr.w	ScrollBlock1
000066F0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066F6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066FA 323C 00DF                  		move.w	#$DF,d1
000066FE 3038 F700                  		move.w	($FFFFF700).w,d0
00006702 4440                       		neg.w	d0
00006704 4840                       		swap	d0
00006706 3038 F708                  		move.w	($FFFFF708).w,d0
0000670A 4440                       		neg.w	d0
0000670C                            
0000670C                            loc_63C6:
0000670C 22C0                       		move.l	d0,(a1)+
0000670E 51C9 FFFC                  		dbf	d1,loc_63C6
00006712 3038 F646                  		move.w	($FFFFF646).w,d0
00006716 9078 F704                  		sub.w	($FFFFF704).w,d0
0000671A 4E75                       		rts	
0000671C                            ; End of function Deform_LZ
0000671C                            
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            ; Marble Zone background layer deformation code
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            
0000671C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000671C                            
0000671C                            
0000671C                            Deform_MZ:				; XREF: Deform_Index
0000671C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006720 48C4                       		ext.l	d4
00006722 ED84                       		asl.l	#6,d4
00006724 2204                       		move.l	d4,d1
00006726 E384                       		asl.l	#1,d4
00006728 D881                       		add.l	d1,d4
0000672A 7A00                       		moveq	#0,d5
0000672C 6100 0000                  		bsr.w	ScrollBlock1
00006730 303C 0200                  		move.w	#$200,d0
00006734 3238 F704                  		move.w	($FFFFF704).w,d1
00006738 0441 01C8                  		subi.w	#$1C8,d1
0000673C 6500                       		bcs.s	loc_6402
0000673E 3401                       		move.w	d1,d2
00006740 D241                       		add.w	d1,d1
00006742 D242                       		add.w	d2,d1
00006744 E441                       		asr.w	#2,d1
00006746 D041                       		add.w	d1,d0
00006748                            
00006748                            loc_6402:
00006748 31C0 F714                  		move.w	d0,($FFFFF714).w
0000674C 6100 0000                  		bsr.w	ScrollBlock3
00006750 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006756 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000675A 323C 00DF                  		move.w	#$DF,d1
0000675E 3038 F700                  		move.w	($FFFFF700).w,d0
00006762 4440                       		neg.w	d0
00006764 4840                       		swap	d0
00006766 3038 F708                  		move.w	($FFFFF708).w,d0
0000676A 4440                       		neg.w	d0
0000676C                            
0000676C                            loc_6426:
0000676C 22C0                       		move.l	d0,(a1)+
0000676E 51C9 FFFC                  		dbf	d1,loc_6426
00006772 4E75                       		rts	
00006774                            ; End of function Deform_MZ
00006774                            
00006774                            ; ---------------------------------------------------------------------------
00006774                            ; Star Light Zone background layer deformation code
00006774                            ; ---------------------------------------------------------------------------
00006774                            
00006774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006774                            
00006774                            
00006774                            Deform_SLZ:				; XREF: Deform_Index
00006774 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006778 48C4                       		ext.l	d4
0000677A EB84                       		asl.l	#5,d4
0000677C 2204                       		move.l	d4,d1
0000677E E384                       		asl.l	#1,d4
00006780 D881                       		add.l	d1,d4
00006782 7A00                       		moveq	#0,d5
00006784 6100 0000                  		bsr.w	ScrollBlock1
00006788 6100 0000                  		bsr.w	ScrollBlock3
0000678C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006790                            	;	move.w	($FFFFF704).w,d0
00006790                            	;	andi.w	#$7FF,d0
00006790 EA48                       		lsr.w	#5,d0
00006792 4440                       		neg.w	d0
00006794 0640 0026                  		addi.w	#$26,d0
00006798 31C0 F714                  		move.w	d0,($FFFFF714).w
0000679C 3800                       		move.w	d0,d4
0000679E                            	;	bsr.w	ScrollBlock3
0000679E 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000067A4 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000067A8                            
000067A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067AC 4440                       		neg.w	d0			; negate (positive to negative)
000067AE 4840                       		swap	d0			; send to the left side of d0
000067B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067B4 45F8 A800                  		lea	($FFFFA800).w,a2
000067B8 069A 0000 5000             		addi.l	#$5000,(a2)+
000067BE 069A 0000 C000             		addi.l	#$C000,(a2)+
000067C4 3038 A800                  		move.w	($FFFFA800).w,d0
000067C8 4440                       		neg.w	d0			; negate (positive to negative)
000067CA E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000067CC 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067D0                            slz_DeformLoop_1:
000067D0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067D2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000067D6                            
000067D6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067DA 4440                       		neg.w	d0			; negate (positive to negative)
000067DC 4840                       		swap	d0			; send to the left side of d0
000067DE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067E2 45F8 A800                  		lea	($FFFFA800).w,a2
000067E6 069A 0000 5000             		addi.l	#$5000,(a2)+
000067EC 069A 0000 C000             		addi.l	#$C000,(a2)+
000067F2 3038 A800                  		move.w	($FFFFA800).w,d0
000067F6 4440                       		neg.w	d0			; negate (positive to negative)
000067F8 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000067FA 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067FE                            slz_DeformLoop_2:
000067FE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006800 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006804                            
00006804 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006808 4440                       		neg.w	d0			; negate (positive to negative)
0000680A 4840                       		swap	d0			; send to the left side of d0
0000680C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006810 45F8 A800                  		lea	($FFFFA800).w,a2
00006814 069A 0000 5000             		addi.l	#$5000,(a2)+
0000681A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006820 3038 A800                  		move.w	($FFFFA800).w,d0
00006824 4440                       		neg.w	d0			; negate (positive to negative)
00006826 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006828 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000682C                            slz_DeformLoop_3:
0000682C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000682E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006832                            
00006832 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006836 4440                       		neg.w	d0			; negate (positive to negative)
00006838 4840                       		swap	d0			; send to the left side of d0
0000683A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000683E 45F8 A800                  		lea	($FFFFA800).w,a2
00006842 069A 0000 5000             		addi.l	#$5000,(a2)+
00006848 069A 0000 C000             		addi.l	#$C000,(a2)+
0000684E 3038 A800                  		move.w	($FFFFA800).w,d0
00006852 4440                       		neg.w	d0			; negate (positive to negative)
00006854 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006856 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000685A                            slz_DeformLoop_4:
0000685A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000685C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006860                            
00006860 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006864 4440                       		neg.w	d0			; negate (positive to negative)
00006866 4840                       		swap	d0			; send to the left side of d0
00006868 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000686C 45F8 A800                  		lea	($FFFFA800).w,a2
00006870 069A 0000 5000             		addi.l	#$5000,(a2)+
00006876 069A 0000 C000             		addi.l	#$C000,(a2)+
0000687C 3038 A800                  		move.w	($FFFFA800).w,d0
00006880 4440                       		neg.w	d0			; negate (positive to negative)
00006882 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006884 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006888                            slz_DeformLoop_5:
00006888 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000688A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
0000688E                            
0000688E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006892 4440                       		neg.w	d0			; negate (positive to negative)
00006894 4840                       		swap	d0			; send to the left side of d0
00006896 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000689A 4440                       		neg.w	d0			; negate (positive to negative)
0000689C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
0000689E 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068A2                            slz_DeformLoop_6:
000068A2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068A4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000068A8                            
000068A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068AC 4440                       		neg.w	d0			; negate (positive to negative)
000068AE 4840                       		swap	d0			; send to the left side of d0
000068B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068B4 4440                       		neg.w	d0			; negate (positive to negative)
000068B6 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
000068B8 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068BC                            slz_DeformLoop_7:
000068BC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068BE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
000068C2                            
000068C2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068C6 4440                       		neg.w	d0			; negate (positive to negative)
000068C8 4840                       		swap	d0			; send to the left side of d0
000068CA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068CE 4440                       		neg.w	d0			; negate (positive to negative)
000068D0 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
000068D2 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068D6                            slz_DeformLoop_8:
000068D6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068D8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
000068DC                            
000068DC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068E0 4440                       		neg.w	d0			; negate (positive to negative)
000068E2 4840                       		swap	d0			; send to the left side of d0
000068E4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068E8 4440                       		neg.w	d0			; negate (positive to negative)
000068EA EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000068EC 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068F0                            slz_DeformLoop_9:
000068F0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068F2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000068F6                            
000068F6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068FA 4440                       		neg.w	d0			; negate (positive to negative)
000068FC 4840                       		swap	d0			; send to the left side of d0
000068FE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006902 4440                       		neg.w	d0			; negate (positive to negative)
00006904 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006906 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000690A                            slz_DeformLoop_10:
0000690A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000690C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006910                            
00006910 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006914 4440                       		neg.w	d0			; negate (positive to negative)
00006916 4840                       		swap	d0			; send to the left side of d0
00006918 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000691C 4440                       		neg.w	d0			; negate (positive to negative)
0000691E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006920 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006924                            slz_DeformLoop_11:
00006924 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006926 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
0000692A                            
0000692A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000692E 4440                       		neg.w	d0			; negate (positive to negative)
00006930 4840                       		swap	d0			; send to the left side of d0
00006932 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006936 4440                       		neg.w	d0			; negate (positive to negative)
00006938 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
0000693A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000693E                            slz_DeformLoop_12:
0000693E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006940 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006944                            
00006944 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006948 4440                       		neg.w	d0			; negate (positive to negative)
0000694A 4840                       		swap	d0			; send to the left side of d0
0000694C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006950 4440                       		neg.w	d0			; negate (positive to negative)
00006952 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006954 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006958                            slz_DeformLoop_13:
00006958 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000695A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
0000695E 4E75                       		rts	
00006960                            ; End of function Deform_SLZ
00006960 4E75                       		rts	
00006962                            ; End of function Deform_SLZ_2
00006962                            
00006962                            ; ---------------------------------------------------------------------------
00006962                            ; Spring Yard Zone background layer deformation	code
00006962                            ; ---------------------------------------------------------------------------
00006962                            
00006962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006962                            
00006962                            
00006962                            Deform_SYZ:				; XREF: Deform_Index
00006962 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006966 48C4                       		ext.l	d4
00006968 ED84                       		asl.l	#6,d4
0000696A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000696E 48C5                       		ext.l	d5
00006970 E985                       		asl.l	#4,d5
00006972 2205                       		move.l	d5,d1
00006974 E385                       		asl.l	#1,d5
00006976 DA81                       		add.l	d1,d5
00006978 6100 0000                  		bsr.w	ScrollBlock1
0000697C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006982 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006986 323C 00DF                  		move.w	#$DF,d1
0000698A 3038 F700                  		move.w	($FFFFF700).w,d0
0000698E 4440                       		neg.w	d0
00006990 4840                       		swap	d0
00006992 3038 F708                  		move.w	($FFFFF708).w,d0
00006996 4440                       		neg.w	d0
00006998                            
00006998                            loc_653C:
00006998 22C0                       		move.l	d0,(a1)+
0000699A 51C9 FFFC                  		dbf	d1,loc_653C
0000699E 4E75                       		rts	
000069A0                            ; End of function Deform_SYZ
000069A0                            
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            ; Scrap	Brain Zone background layer deformation	code
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            
000069A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069A0                            
000069A0                            
000069A0                            Deform_SBZ:				; XREF: Deform_Index
000069A0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069A4 48C4                       		ext.l	d4
000069A6 ED84                       		asl.l	#6,d4
000069A8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000069AC 48C5                       		ext.l	d5
000069AE E985                       		asl.l	#4,d5
000069B0 E385                       		asl.l	#1,d5
000069B2 6100 0000                  		bsr.w	ScrollBlock1
000069B6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069BC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069C0 323C 00DF                  		move.w	#$DF,d1
000069C4 3038 F700                  		move.w	($FFFFF700).w,d0
000069C8 4440                       		neg.w	d0
000069CA 4840                       		swap	d0
000069CC 3038 F708                  		move.w	($FFFFF708).w,d0
000069D0 4440                       		neg.w	d0
000069D2                            
000069D2                            loc_6576:
000069D2 22C0                       		move.l	d0,(a1)+
000069D4 51C9 FFFC                  		dbf	d1,loc_6576
000069D8 4E75                       		rts	
000069DA                            ; End of function Deform_SBZ
000069DA                            
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            ; Subroutine to	scroll the level horizontally as Sonic moves
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            
000069DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069DA                            
000069DA                            
000069DA                            ScrollHoriz:				; XREF: DeformBgLayer
000069DA 3838 F700                  		move.w	($FFFFF700).w,d4
000069DE 6100                       		bsr.s	ScrollHoriz2
000069E0 3038 F700                  		move.w	($FFFFF700).w,d0
000069E4 0240 0010                  		andi.w	#$10,d0
000069E8 1238 F74A                  		move.b	($FFFFF74A).w,d1
000069EC B300                       		eor.b	d1,d0
000069EE 6600                       		bne.s	locret_65B0
000069F0 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000069F6 3038 F700                  		move.w	($FFFFF700).w,d0
000069FA 9044                       		sub.w	d4,d0
000069FC 6A00                       		bpl.s	loc_65AA
000069FE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006A04 4E75                       		rts	
00006A06                            ; ===========================================================================
00006A06                            
00006A06                            loc_65AA:
00006A06 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006A0C                            
00006A0C                            locret_65B0:
00006A0C 4E75                       		rts	
00006A0E                            ; End of function ScrollHoriz
00006A0E                            
00006A0E                            
00006A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A0E                            
00006A0E                            
00006A0E                            ScrollHoriz2:				; XREF: ScrollHoriz
00006A0E 3038 D008                  		move.w	($FFFFD008).w,d0
00006A12 9078 F700                  		sub.w	($FFFFF700).w,d0
00006A16 0440 0090                  		subi.w	#$90,d0
00006A1A 6500                       		bcs.s	loc_65F6
00006A1C 0440 0010                  		subi.w	#$10,d0
00006A20 6400                       		bcc.s	loc_65CC
00006A22 4278 F73A                  		clr.w	($FFFFF73A).w
00006A26 4E75                       		rts	
00006A28                            ; ===========================================================================
00006A28                            
00006A28                            loc_65CC:
00006A28 0C40 0010                  		cmpi.w	#$10,d0
00006A2C 6500                       		bcs.s	loc_65D6
00006A2E 303C 0010                  		move.w	#$10,d0
00006A32                            
00006A32                            loc_65D6:
00006A32 D078 F700                  		add.w	($FFFFF700).w,d0
00006A36 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006A3A 6D00                       		blt.s	loc_65E4
00006A3C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006A40                            
00006A40                            loc_65E4:
00006A40 3200                       		move.w	d0,d1
00006A42 9278 F700                  		sub.w	($FFFFF700).w,d1
00006A46 E141                       		asl.w	#8,d1
00006A48 31C0 F700                  		move.w	d0,($FFFFF700).w
00006A4C 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006A50 4E75                       		rts	
00006A52                            ; ===========================================================================
00006A52                            
00006A52                            loc_65F6:				; XREF: ScrollHoriz2
00006A52 D078 F700                  		add.w	($FFFFF700).w,d0
00006A56 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006A5A 6EE4                       		bgt.s	loc_65E4
00006A5C 3038 F728                  		move.w	($FFFFF728).w,d0
00006A60 60DE                       		bra.s	loc_65E4
00006A62                            ; End of function ScrollHoriz2
00006A62                            
00006A62                            ; ===========================================================================
00006A62 4A40                       		tst.w	d0
00006A64 6A00                       		bpl.s	loc_6610
00006A66 303C FFFE                  		move.w	#-2,d0
00006A6A 60E6                       		bra.s	loc_65F6
00006A6C                            ; ===========================================================================
00006A6C                            
00006A6C                            loc_6610:
00006A6C 303C 0002                  		move.w	#2,d0
00006A70 60B6                       		bra.s	loc_65CC
00006A72                            
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            ; Subroutine to	scroll the level vertically as Sonic moves
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            
00006A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A72                            
00006A72                            
00006A72                            ScrollVertical:				; XREF: DeformBgLayer
00006A72 7200                       		moveq	#0,d1
00006A74 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006A78 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A7C 0838 0002 D022             		btst	#2,($FFFFD022).w
00006A82 6700                       		beq.s	loc_662A
00006A84 5B40                       		subq.w	#5,d0
00006A86                            
00006A86                            loc_662A:
00006A86 0838 0001 D022             		btst	#1,($FFFFD022).w
00006A8C 6700                       		beq.s	loc_664A
00006A8E 0640 0020                  		addi.w	#$20,d0
00006A92 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006A96 6500                       		bcs.s	loc_6696
00006A98 0440 0040                  		subi.w	#$40,d0
00006A9C 6400                       		bcc.s	loc_6696
00006A9E 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AA2 6600                       		bne.s	loc_66A8
00006AA4 6000                       		bra.s	loc_6656
00006AA6                            ; ===========================================================================
00006AA6                            
00006AA6                            loc_664A:
00006AA6 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006AAA 6600                       		bne.s	loc_665C
00006AAC 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AB0 6600                       		bne.s	loc_66A8
00006AB2                            
00006AB2                            loc_6656:
00006AB2 4278 F73C                  		clr.w	($FFFFF73C).w
00006AB6 4E75                       		rts	
00006AB8                            ; ===========================================================================
00006AB8                            
00006AB8                            loc_665C:
00006AB8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006ABE 6600                       		bne.s	loc_6684
00006AC0 3238 D014                  		move.w	($FFFFD014).w,d1
00006AC4 6A00                       		bpl.s	loc_666C
00006AC6 4441                       		neg.w	d1
00006AC8                            
00006AC8                            loc_666C:
00006AC8 0C41 0800                  		cmpi.w	#$800,d1
00006ACC 6400                       		bcc.s	loc_6696
00006ACE 323C 0600                  		move.w	#$600,d1
00006AD2 0C40 0006                  		cmpi.w	#6,d0
00006AD6 6E00                       		bgt.s	loc_66F6
00006AD8 0C40 FFFA                  		cmpi.w	#-6,d0
00006ADC 6D00                       		blt.s	loc_66C0
00006ADE 6000                       		bra.s	loc_66AE
00006AE0                            ; ===========================================================================
00006AE0                            
00006AE0                            loc_6684:
00006AE0 323C 0200                  		move.w	#$200,d1
00006AE4 0C40 0002                  		cmpi.w	#2,d0
00006AE8 6E00                       		bgt.s	loc_66F6
00006AEA 0C40 FFFE                  		cmpi.w	#-2,d0
00006AEE 6D00                       		blt.s	loc_66C0
00006AF0 6000                       		bra.s	loc_66AE
00006AF2                            ; ===========================================================================
00006AF2                            
00006AF2                            loc_6696:
00006AF2 323C 1000                  		move.w	#$1000,d1
00006AF6 0C40 0010                  		cmpi.w	#$10,d0
00006AFA 6E00                       		bgt.s	loc_66F6
00006AFC 0C40 FFF0                  		cmpi.w	#-$10,d0
00006B00 6D00                       		blt.s	loc_66C0
00006B02 6000                       		bra.s	loc_66AE
00006B04                            ; ===========================================================================
00006B04                            
00006B04                            loc_66A8:
00006B04 7000                       		moveq	#0,d0
00006B06 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006B0A                            
00006B0A                            loc_66AE:
00006B0A 7200                       		moveq	#0,d1
00006B0C 3200                       		move.w	d0,d1
00006B0E D278 F704                  		add.w	($FFFFF704).w,d1
00006B12 4A40                       		tst.w	d0
00006B14 6A00 0000                  		bpl.w	loc_6700
00006B18 6000 0000                  		bra.w	loc_66CC
00006B1C                            ; ===========================================================================
00006B1C                            
00006B1C                            loc_66C0:
00006B1C 4441                       		neg.w	d1
00006B1E 48C1                       		ext.l	d1
00006B20 E181                       		asl.l	#8,d1
00006B22 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B26 4841                       		swap	d1
00006B28                            
00006B28                            loc_66CC:
00006B28 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006B2C 6E00                       		bgt.s	loc_6724
00006B2E 0C41 FF00                  		cmpi.w	#-$100,d1
00006B32 6E00                       		bgt.s	loc_66F0
00006B34 0241 07FF                  		andi.w	#$7FF,d1
00006B38 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B3E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006B44 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B4A 6000                       		bra.s	loc_6724
00006B4C                            ; ===========================================================================
00006B4C                            
00006B4C                            loc_66F0:
00006B4C 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006B50 6000                       		bra.s	loc_6724
00006B52                            ; ===========================================================================
00006B52                            
00006B52                            loc_66F6:
00006B52 48C1                       		ext.l	d1
00006B54 E181                       		asl.l	#8,d1
00006B56 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B5A 4841                       		swap	d1
00006B5C                            
00006B5C                            loc_6700:
00006B5C B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006B60 6D00                       		blt.s	loc_6724
00006B62 0441 0800                  		subi.w	#$800,d1
00006B66 6500                       		bcs.s	loc_6720
00006B68 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B6E 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006B74 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B7A 6000                       		bra.s	loc_6724
00006B7C                            ; ===========================================================================
00006B7C                            
00006B7C                            loc_6720:
00006B7C 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006B80                            
00006B80                            loc_6724:
00006B80 3838 F704                  		move.w	($FFFFF704).w,d4
00006B84 4841                       		swap	d1
00006B86 2601                       		move.l	d1,d3
00006B88 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006B8C E09B                       		ror.l	#8,d3
00006B8E 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006B92 21C1 F704                  		move.l	d1,($FFFFF704).w
00006B96 3038 F704                  		move.w	($FFFFF704).w,d0
00006B9A 0240 0010                  		andi.w	#$10,d0
00006B9E 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006BA2 B300                       		eor.b	d1,d0
00006BA4 6600                       		bne.s	locret_6766
00006BA6 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006BAC 3038 F704                  		move.w	($FFFFF704).w,d0
00006BB0 9044                       		sub.w	d4,d0
00006BB2 6A00                       		bpl.s	loc_6760
00006BB4 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006BBA 4E75                       		rts	
00006BBC                            ; ===========================================================================
00006BBC                            
00006BBC                            loc_6760:
00006BBC 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006BC2                            
00006BC2                            locret_6766:
00006BC2 4E75                       		rts	
00006BC4                            ; End of function ScrollVertical
00006BC4                            
00006BC4                            
00006BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BC4                            
00006BC4                            
00006BC4                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006BC4 2438 F708                  		move.l	($FFFFF708).w,d2
00006BC8 2002                       		move.l	d2,d0
00006BCA D084                       		add.l	d4,d0
00006BCC 21C0 F708                  		move.l	d0,($FFFFF708).w
00006BD0 2200                       		move.l	d0,d1
00006BD2 4841                       		swap	d1
00006BD4 0241 0010                  		andi.w	#$10,d1
00006BD8 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006BDC B701                       		eor.b	d3,d1
00006BDE 6600                       		bne.s	loc_679C
00006BE0 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006BE6 9082                       		sub.l	d2,d0
00006BE8 6A00                       		bpl.s	loc_6796
00006BEA 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006BF0 6000                       		bra.s	loc_679C
00006BF2                            ; ===========================================================================
00006BF2                            
00006BF2                            loc_6796:
00006BF2 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006BF8                            
00006BF8                            loc_679C:
00006BF8 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006BFC 2003                       		move.l	d3,d0
00006BFE D085                       		add.l	d5,d0
00006C00 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C04 2200                       		move.l	d0,d1
00006C06 4841                       		swap	d1
00006C08 0241 0010                  		andi.w	#$10,d1
00006C0C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C10 B501                       		eor.b	d2,d1
00006C12 6600                       		bne.s	locret_67D0
00006C14 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C1A 9083                       		sub.l	d3,d0
00006C1C 6A00                       		bpl.s	loc_67CA
00006C1E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C24 4E75                       		rts	
00006C26                            ; ===========================================================================
00006C26                            
00006C26                            loc_67CA:
00006C26 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C2C                            
00006C2C                            locret_67D0:
00006C2C 4E75                       		rts	
00006C2E                            ; End of function ScrollBlock1
00006C2E                            
00006C2E                            
00006C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C2E                            
00006C2E                            
00006C2E                            ScrollBlock2:				; XREF: Deform_SLZ
00006C2E 2438 F708                  		move.l	($FFFFF708).w,d2
00006C32 2002                       		move.l	d2,d0
00006C34 D084                       		add.l	d4,d0
00006C36 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C3A 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006C3E 2003                       		move.l	d3,d0
00006C40 D085                       		add.l	d5,d0
00006C42 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C46 2200                       		move.l	d0,d1
00006C48 4841                       		swap	d1
00006C4A 0241 0010                  		andi.w	#$10,d1
00006C4E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C52 B501                       		eor.b	d2,d1
00006C54 6600                       		bne.s	locret_6812
00006C56 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C5C 9083                       		sub.l	d3,d0
00006C5E 6A00                       		bpl.s	loc_680C
00006C60 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C66 4E75                       		rts	
00006C68                            ; ===========================================================================
00006C68                            
00006C68                            loc_680C:
00006C68 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C6E                            
00006C6E                            locret_6812:
00006C6E 4E75                       		rts	
00006C70                            ; End of function ScrollBlock2
00006C70                            
00006C70                            
00006C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C70                            
00006C70                            
00006C70                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006C70 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006C74 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C78 3200                       		move.w	d0,d1
00006C7A 0241 0010                  		andi.w	#$10,d1
00006C7E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C82 B501                       		eor.b	d2,d1
00006C84 6600                       		bne.s	locret_6842
00006C86 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C8C 9043                       		sub.w	d3,d0
00006C8E 6A00                       		bpl.s	loc_683C
00006C90 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C96 4E75                       		rts	
00006C98                            ; ===========================================================================
00006C98                            
00006C98                            loc_683C:
00006C98 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C9E                            
00006C9E                            locret_6842:
00006C9E 4E75                       		rts	
00006CA0                            ; End of function ScrollBlock3
00006CA0                            
00006CA0                            
00006CA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CA0                            
00006CA0                            
00006CA0                            ScrollBlock4:				; XREF: Deform_GHZ
00006CA0 3438 F710                  		move.w	($FFFFF710).w,d2
00006CA4 3638 F714                  		move.w	($FFFFF714).w,d3
00006CA8 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006CAC 48C0                       		ext.l	d0
00006CAE EF80                       		asl.l	#7,d0
00006CB0 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006CB4 3038 F710                  		move.w	($FFFFF710).w,d0
00006CB8 0240 0010                  		andi.w	#$10,d0
00006CBC 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006CC0 B300                       		eor.b	d1,d0
00006CC2 6600                       		bne.s	locret_6884
00006CC4 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006CCA 3038 F710                  		move.w	($FFFFF710).w,d0
00006CCE 9042                       		sub.w	d2,d0
00006CD0 6A00                       		bpl.s	loc_687E
00006CD2 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006CD8 6000                       		bra.s	locret_6884
00006CDA                            ; ===========================================================================
00006CDA                            
00006CDA                            loc_687E:
00006CDA 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006CE0                            
00006CE0                            locret_6884:
00006CE0 4E75                       		rts	
00006CE2                            ; End of function ScrollBlock4
00006CE2                            
00006CE2                            
00006CE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE2                            
00006CE2                            
00006CE2                            sub_6886:				; XREF: loc_C44
00006CE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00006CE8 4DF9 00C0 0000             		lea	($C00000).l,a6
00006CEE 45F8 F756                  		lea	($FFFFF756).w,a2
00006CF2 47F8 F708                  		lea	($FFFFF708).w,a3
00006CF6 49F8 A440                  		lea	($FFFFA440).w,a4
00006CFA 343C 6000                  		move.w	#$6000,d2
00006CFE 6100 0000                  		bsr.w	sub_6954
00006D02 45F8 F758                  		lea	($FFFFF758).w,a2
00006D06 47F8 F710                  		lea	($FFFFF710).w,a3
00006D0A 6000 0000                  		bra.w	sub_69F4
00006D0E                            ; End of function sub_6886
00006D0E                            
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            ; Subroutine to	display	correct	tiles as you move
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            
00006D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D0E                            
00006D0E                            
00006D0E                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006D0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D14 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D1A 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006D1E 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006D22 49F8 A440                  		lea	($FFFFA440).w,a4
00006D26 343C 6000                  		move.w	#$6000,d2
00006D2A 6100 0000                  		bsr.w	sub_6954
00006D2E 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006D32 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006D36 6100 0000                  		bsr.w	sub_69F4
00006D3A 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006D3E 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006D42 49F8 A400                  		lea	($FFFFA400).w,a4
00006D46 343C 4000                  		move.w	#$4000,d2
00006D4A 4A12                       		tst.b	(a2)
00006D4C 6700                       		beq.s	locret_6952
00006D4E 0892 0000                  		bclr	#0,(a2)
00006D52 6700                       		beq.s	loc_6908
00006D54 78F0                       		moveq	#-$10,d4
00006D56 7AF0                       		moveq	#-$10,d5
00006D58 6100 0000                  		bsr.w	sub_6C20
00006D5C 78F0                       		moveq	#-$10,d4
00006D5E 7AF0                       		moveq	#-$10,d5
00006D60 6100 0000                  		bsr.w	sub_6AD8
00006D64                            
00006D64                            loc_6908:
00006D64 0892 0001                  		bclr	#1,(a2)
00006D68 6700                       		beq.s	loc_6922
00006D6A 383C 00E0                  		move.w	#$E0,d4
00006D6E 7AF0                       		moveq	#-$10,d5
00006D70 6100 0000                  		bsr.w	sub_6C20
00006D74 383C 00E0                  		move.w	#$E0,d4
00006D78 7AF0                       		moveq	#-$10,d5
00006D7A 6100 0000                  		bsr.w	sub_6AD8
00006D7E                            
00006D7E                            loc_6922:
00006D7E 0892 0002                  		bclr	#2,(a2)
00006D82 6700                       		beq.s	loc_6938
00006D84 78F0                       		moveq	#-$10,d4
00006D86 7AF0                       		moveq	#-$10,d5
00006D88 6100 0000                  		bsr.w	sub_6C20
00006D8C 78F0                       		moveq	#-$10,d4
00006D8E 7AF0                       		moveq	#-$10,d5
00006D90 6100 0000                  		bsr.w	sub_6B04
00006D94                            
00006D94                            loc_6938:
00006D94 0892 0003                  		bclr	#3,(a2)
00006D98 6700                       		beq.s	locret_6952
00006D9A 78F0                       		moveq	#-$10,d4
00006D9C 3A3C 0140                  		move.w	#$140,d5
00006DA0 6100 0000                  		bsr.w	sub_6C20
00006DA4 78F0                       		moveq	#-$10,d4
00006DA6 3A3C 0140                  		move.w	#$140,d5
00006DAA 6100 0000                  		bsr.w	sub_6B04
00006DAE                            
00006DAE                            locret_6952:
00006DAE 4E75                       		rts	
00006DB0                            ; End of function LoadTilesAsYouMove
00006DB0                            
00006DB0                            
00006DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB0                            
00006DB0                            
00006DB0                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006DB0 4A12                       		tst.b	(a2)
00006DB2 6700 0000                  		beq.w	locret_69F2
00006DB6 0892 0000                  		bclr	#0,(a2)
00006DBA 6700                       		beq.s	loc_6972
00006DBC 78F0                       		moveq	#-$10,d4
00006DBE 7AF0                       		moveq	#-$10,d5
00006DC0 6100 0000                  		bsr.w	sub_6C20
00006DC4 78F0                       		moveq	#-$10,d4
00006DC6 7AF0                       		moveq	#-$10,d5
00006DC8 7C1F                       		moveq	#$1F,d6
00006DCA 6100 0000                  		bsr.w	sub_6ADA
00006DCE                            
00006DCE                            loc_6972:
00006DCE 0892 0001                  		bclr	#1,(a2)
00006DD2 6700                       		beq.s	loc_698E
00006DD4 383C 00E0                  		move.w	#$E0,d4
00006DD8 7AF0                       		moveq	#-$10,d5
00006DDA 6100 0000                  		bsr.w	sub_6C20
00006DDE 383C 00E0                  		move.w	#$E0,d4
00006DE2 7AF0                       		moveq	#-$10,d5
00006DE4 7C1F                       		moveq	#$1F,d6
00006DE6 6100 0000                  		bsr.w	sub_6ADA
00006DEA                            
00006DEA                            loc_698E:
00006DEA 0892 0002                  		bclr	#2,(a2)
00006DEE 6700                       		beq.s	loc_69BE
00006DF0 78F0                       		moveq	#-$10,d4
00006DF2 7AF0                       		moveq	#-$10,d5
00006DF4 6100 0000                  		bsr.w	sub_6C20
00006DF8 78F0                       		moveq	#-$10,d4
00006DFA 7AF0                       		moveq	#-$10,d5
00006DFC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E00 322B 0004                  		move.w	4(a3),d1
00006E04 0241 FFF0                  		andi.w	#-$10,d1
00006E08 9C41                       		sub.w	d1,d6
00006E0A 6D00                       		blt.s	loc_69BE
00006E0C E84E                       		lsr.w	#4,d6
00006E0E 0C46 000F                  		cmpi.w	#$F,d6
00006E12 6500                       		bcs.s	loc_69BA
00006E14 7C0F                       		moveq	#$F,d6
00006E16                            
00006E16                            loc_69BA:
00006E16 6100 0000                  		bsr.w	sub_6B06
00006E1A                            
00006E1A                            loc_69BE:
00006E1A 0892 0003                  		bclr	#3,(a2)
00006E1E 6700                       		beq.s	locret_69F2
00006E20 78F0                       		moveq	#-$10,d4
00006E22 3A3C 0140                  		move.w	#$140,d5
00006E26 6100 0000                  		bsr.w	sub_6C20
00006E2A 78F0                       		moveq	#-$10,d4
00006E2C 3A3C 0140                  		move.w	#$140,d5
00006E30 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E34 322B 0004                  		move.w	4(a3),d1
00006E38 0241 FFF0                  		andi.w	#-$10,d1
00006E3C 9C41                       		sub.w	d1,d6
00006E3E 6D00                       		blt.s	locret_69F2
00006E40 E84E                       		lsr.w	#4,d6
00006E42 0C46 000F                  		cmpi.w	#$F,d6
00006E46 6500                       		bcs.s	loc_69EE
00006E48 7C0F                       		moveq	#$F,d6
00006E4A                            
00006E4A                            loc_69EE:
00006E4A 6100 0000                  		bsr.w	sub_6B06
00006E4E                            
00006E4E                            locret_69F2:
00006E4E 4E75                       		rts	
00006E50                            ; End of function sub_6954
00006E50                            
00006E50                            
00006E50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E50                            
00006E50                            
00006E50                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006E50 4A12                       		tst.b	(a2)
00006E52 6700 0000                  		beq.w	locret_6A80
00006E56 0892 0002                  		bclr	#2,(a2)
00006E5A 6700                       		beq.s	loc_6A3E
00006E5C 0C53 0010                  		cmpi.w	#$10,(a3)
00006E60 6500                       		bcs.s	loc_6A3E
00006E62 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006E66 322B 0004                  		move.w	4(a3),d1
00006E6A 0241 FFF0                  		andi.w	#-$10,d1
00006E6E 9841                       		sub.w	d1,d4
00006E70 3F04                       		move.w	d4,-(sp)
00006E72 7AF0                       		moveq	#-$10,d5
00006E74 6100 0000                  		bsr.w	sub_6C20
00006E78 381F                       		move.w	(sp)+,d4
00006E7A 7AF0                       		moveq	#-$10,d5
00006E7C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E80 322B 0004                  		move.w	4(a3),d1
00006E84 0241 FFF0                  		andi.w	#-$10,d1
00006E88 9C41                       		sub.w	d1,d6
00006E8A 6D00                       		blt.s	loc_6A3E
00006E8C E84E                       		lsr.w	#4,d6
00006E8E 0446 000E                  		subi.w	#$E,d6
00006E92 6400                       		bcc.s	loc_6A3E
00006E94 4446                       		neg.w	d6
00006E96 6100 0000                  		bsr.w	sub_6B06
00006E9A                            
00006E9A                            loc_6A3E:
00006E9A 0892 0003                  		bclr	#3,(a2)
00006E9E 6700                       		beq.s	locret_6A80
00006EA0 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006EA4 322B 0004                  		move.w	4(a3),d1
00006EA8 0241 FFF0                  		andi.w	#-$10,d1
00006EAC 9841                       		sub.w	d1,d4
00006EAE 3F04                       		move.w	d4,-(sp)
00006EB0 3A3C 0140                  		move.w	#$140,d5
00006EB4 6100 0000                  		bsr.w	sub_6C20
00006EB8 381F                       		move.w	(sp)+,d4
00006EBA 3A3C 0140                  		move.w	#$140,d5
00006EBE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EC2 322B 0004                  		move.w	4(a3),d1
00006EC6 0241 FFF0                  		andi.w	#-$10,d1
00006ECA 9C41                       		sub.w	d1,d6
00006ECC 6D00                       		blt.s	locret_6A80
00006ECE E84E                       		lsr.w	#4,d6
00006ED0 0446 000E                  		subi.w	#$E,d6
00006ED4 6400                       		bcc.s	locret_6A80
00006ED6 4446                       		neg.w	d6
00006ED8 6100 0000                  		bsr.w	sub_6B06
00006EDC                            
00006EDC                            locret_6A80:
00006EDC 4E75                       		rts	
00006EDE                            ; End of function sub_69F4
00006EDE                            
00006EDE                            ; ===========================================================================
00006EDE 4A12                       		tst.b	(a2)
00006EE0 6700                       		beq.s	locret_6AD6
00006EE2 0892 0002                  		bclr	#2,(a2)
00006EE6 6700                       		beq.s	loc_6AAC
00006EE8 383C 00D0                  		move.w	#$D0,d4
00006EEC 322B 0004                  		move.w	4(a3),d1
00006EF0 0241 FFF0                  		andi.w	#-$10,d1
00006EF4 9841                       		sub.w	d1,d4
00006EF6 3F04                       		move.w	d4,-(sp)
00006EF8 7AF0                       		moveq	#-$10,d5
00006EFA 6100 0000                  		bsr.w	sub_6C3C
00006EFE 381F                       		move.w	(sp)+,d4
00006F00 7AF0                       		moveq	#-$10,d5
00006F02 7C02                       		moveq	#2,d6
00006F04 6100 0000                  		bsr.w	sub_6B06
00006F08                            
00006F08                            loc_6AAC:
00006F08 0892 0003                  		bclr	#3,(a2)
00006F0C 6700                       		beq.s	locret_6AD6
00006F0E 383C 00D0                  		move.w	#$D0,d4
00006F12 322B 0004                  		move.w	4(a3),d1
00006F16 0241 FFF0                  		andi.w	#-$10,d1
00006F1A 9841                       		sub.w	d1,d4
00006F1C 3F04                       		move.w	d4,-(sp)
00006F1E 3A3C 0140                  		move.w	#$140,d5
00006F22 6100 0000                  		bsr.w	sub_6C3C
00006F26 381F                       		move.w	(sp)+,d4
00006F28 3A3C 0140                  		move.w	#$140,d5
00006F2C 7C02                       		moveq	#2,d6
00006F2E 6100 0000                  		bsr.w	sub_6B06
00006F32                            
00006F32                            locret_6AD6:
00006F32 4E75                       		rts	
00006F34                            
00006F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F34                            
00006F34                            
00006F34                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006F34 7C15                       		moveq	#$15,d6
00006F36                            ; End of function sub_6AD8
00006F36                            
00006F36                            
00006F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F36                            
00006F36                            
00006F36                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006F36 2E3C 0080 0000             		move.l	#$800000,d7
00006F3C 2200                       		move.l	d0,d1
00006F3E                            
00006F3E                            loc_6AE2:
00006F3E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F42 6100 0000                  		bsr.w	sub_6BD6
00006F46 2001                       		move.l	d1,d0
00006F48 6100 0000                  		bsr.w	sub_6B32
00006F4C 5801                       		addq.b	#4,d1
00006F4E 0201 007F                  		andi.b	#$7F,d1
00006F52 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F56 0645 0010                  		addi.w	#$10,d5
00006F5A 51CE FFE2                  		dbf	d6,loc_6AE2
00006F5E 4E75                       		rts	
00006F60                            ; End of function sub_6ADA
00006F60                            
00006F60                            
00006F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F60                            
00006F60                            
00006F60                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006F60 7C0F                       		moveq	#$F,d6
00006F62                            ; End of function sub_6B04
00006F62                            
00006F62                            
00006F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F62                            
00006F62                            
00006F62                            sub_6B06:				; XREF: sub_6954
00006F62 2E3C 0080 0000             		move.l	#$800000,d7
00006F68 2200                       		move.l	d0,d1
00006F6A                            
00006F6A                            loc_6B0E:
00006F6A 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F6E 6100 0000                  		bsr.w	sub_6BD6
00006F72 2001                       		move.l	d1,d0
00006F74 6100 0000                  		bsr.w	sub_6B32
00006F78 0641 0100                  		addi.w	#$100,d1
00006F7C 0241 0FFF                  		andi.w	#$FFF,d1
00006F80 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F84 0644 0010                  		addi.w	#$10,d4
00006F88 51CE FFE0                  		dbf	d6,loc_6B0E
00006F8C 4E75                       		rts	
00006F8E                            ; End of function sub_6B06
00006F8E                            
00006F8E                            
00006F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F8E                            
00006F8E                            
00006F8E                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006F8E 8042                       		or.w	d2,d0
00006F90 4840                       		swap	d0
00006F92 0810 0004                  		btst	#4,(a0)
00006F96 6600                       		bne.s	loc_6B6E
00006F98 0810 0003                  		btst	#3,(a0)
00006F9C 6600                       		bne.s	loc_6B4E
00006F9E 2A80                       		move.l	d0,(a5)
00006FA0 2C99                       		move.l	(a1)+,(a6)
00006FA2 D087                       		add.l	d7,d0
00006FA4 2A80                       		move.l	d0,(a5)
00006FA6 2C99                       		move.l	(a1)+,(a6)
00006FA8 4E75                       		rts	
00006FAA                            ; ===========================================================================
00006FAA                            
00006FAA                            loc_6B4E:
00006FAA 2A80                       		move.l	d0,(a5)
00006FAC 2819                       		move.l	(a1)+,d4
00006FAE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FB4 4844                       		swap	d4
00006FB6 2C84                       		move.l	d4,(a6)
00006FB8 D087                       		add.l	d7,d0
00006FBA 2A80                       		move.l	d0,(a5)
00006FBC 2819                       		move.l	(a1)+,d4
00006FBE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FC4 4844                       		swap	d4
00006FC6 2C84                       		move.l	d4,(a6)
00006FC8 4E75                       		rts	
00006FCA                            ; ===========================================================================
00006FCA                            
00006FCA                            loc_6B6E:
00006FCA 0810 0003                  		btst	#3,(a0)
00006FCE 6600                       		bne.s	loc_6B90
00006FD0 2A80                       		move.l	d0,(a5)
00006FD2 2A19                       		move.l	(a1)+,d5
00006FD4 2819                       		move.l	(a1)+,d4
00006FD6 0A84 1000 1000             		eori.l	#$10001000,d4
00006FDC 2C84                       		move.l	d4,(a6)
00006FDE D087                       		add.l	d7,d0
00006FE0 2A80                       		move.l	d0,(a5)
00006FE2 0A85 1000 1000             		eori.l	#$10001000,d5
00006FE8 2C85                       		move.l	d5,(a6)
00006FEA 4E75                       		rts	
00006FEC                            ; ===========================================================================
00006FEC                            
00006FEC                            loc_6B90:
00006FEC 2A80                       		move.l	d0,(a5)
00006FEE 2A19                       		move.l	(a1)+,d5
00006FF0 2819                       		move.l	(a1)+,d4
00006FF2 0A84 1800 1800             		eori.l	#$18001800,d4
00006FF8 4844                       		swap	d4
00006FFA 2C84                       		move.l	d4,(a6)
00006FFC D087                       		add.l	d7,d0
00006FFE 2A80                       		move.l	d0,(a5)
00007000 0A85 1800 1800             		eori.l	#$18001800,d5
00007006 4845                       		swap	d5
00007008 2C85                       		move.l	d5,(a6)
0000700A 4E75                       		rts	
0000700C                            ; End of function sub_6B32
0000700C                            
0000700C                            ; ===========================================================================
0000700C 4E75                       		rts	
0000700E                            ; ===========================================================================
0000700E 2A80                       		move.l	d0,(a5)
00007010 3A3C 2000                  		move.w	#$2000,d5
00007014 3819                       		move.w	(a1)+,d4
00007016 D845                       		add.w	d5,d4
00007018 3C84                       		move.w	d4,(a6)
0000701A 3819                       		move.w	(a1)+,d4
0000701C D845                       		add.w	d5,d4
0000701E 3C84                       		move.w	d4,(a6)
00007020 D087                       		add.l	d7,d0
00007022 2A80                       		move.l	d0,(a5)
00007024 3819                       		move.w	(a1)+,d4
00007026 D845                       		add.w	d5,d4
00007028 3C84                       		move.w	d4,(a6)
0000702A 3819                       		move.w	(a1)+,d4
0000702C D845                       		add.w	d5,d4
0000702E 3C84                       		move.w	d4,(a6)
00007030 4E75                       		rts	
00007032                            
00007032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007032                            
00007032                            
00007032                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007032 43F8 B000                  		lea	($FFFFB000).w,a1
00007036 D86B 0004                  		add.w	4(a3),d4
0000703A DA53                       		add.w	(a3),d5
0000703C 3604                       		move.w	d4,d3
0000703E E24B                       		lsr.w	#1,d3
00007040 0243 0380                  		andi.w	#$380,d3
00007044 E64D                       		lsr.w	#3,d5
00007046 3005                       		move.w	d5,d0
00007048 EA48                       		lsr.w	#5,d0
0000704A 0240 007F                  		andi.w	#$7F,d0
0000704E D043                       		add.w	d3,d0
00007050 76FF                       		moveq	#-1,d3
00007052 1634 0000                  		move.b	(a4,d0.w),d3
00007056 6700                       		beq.s	locret_6C1E
00007058 5303                       		subq.b	#1,d3
0000705A 0243 007F                  		andi.w	#$7F,d3
0000705E EE5B                       		ror.w	#7,d3
00007060 D844                       		add.w	d4,d4
00007062 0244 01E0                  		andi.w	#$1E0,d4
00007066 0245 001E                  		andi.w	#$1E,d5
0000706A D644                       		add.w	d4,d3
0000706C D645                       		add.w	d5,d3
0000706E 2043                       		movea.l	d3,a0
00007070 3610                       		move.w	(a0),d3
00007072 0243 03FF                  		andi.w	#$3FF,d3
00007076 E74B                       		lsl.w	#3,d3
00007078 D2C3                       		adda.w	d3,a1
0000707A                            
0000707A                            locret_6C1E:
0000707A 4E75                       		rts	
0000707C                            ; End of function sub_6BD6
0000707C                            
0000707C                            
0000707C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000707C                            
0000707C                            
0000707C                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000707C D86B 0004                  		add.w	4(a3),d4
00007080 DA53                       		add.w	(a3),d5
00007082 0244 00F0                  		andi.w	#$F0,d4
00007086 0245 01F0                  		andi.w	#$1F0,d5
0000708A E94C                       		lsl.w	#4,d4
0000708C E44D                       		lsr.w	#2,d5
0000708E D845                       		add.w	d5,d4
00007090 7003                       		moveq	#3,d0
00007092 4840                       		swap	d0
00007094 3004                       		move.w	d4,d0
00007096 4E75                       		rts	
00007098                            ; End of function sub_6C20
00007098                            
00007098                            
00007098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007098                            ; not used
00007098                            
00007098                            
00007098                            sub_6C3C:
00007098 D86B 0004                  		add.w	4(a3),d4
0000709C DA53                       		add.w	(a3),d5
0000709E 0244 00F0                  		andi.w	#$F0,d4
000070A2 0245 01F0                  		andi.w	#$1F0,d5
000070A6 E94C                       		lsl.w	#4,d4
000070A8 E44D                       		lsr.w	#2,d5
000070AA D845                       		add.w	d5,d4
000070AC 7002                       		moveq	#2,d0
000070AE 4840                       		swap	d0
000070B0 3004                       		move.w	d4,d0
000070B2 4E75                       		rts	
000070B4                            ; End of function sub_6C3C
000070B4                            
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            ; Subroutine to	load tiles as soon as the level	appears
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            
000070B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070B4                            
000070B4                            
000070B4                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000070B4 4BF9 00C0 0004             		lea	($C00004).l,a5
000070BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000070C0 47F8 F700                  		lea	($FFFFF700).w,a3
000070C4 49F8 A400                  		lea	($FFFFA400).w,a4
000070C8 343C 4000                  		move.w	#$4000,d2
000070CC 6100                       		bsr.s	LoadTilesFromStart2
000070CE 47F8 F708                  		lea	($FFFFF708).w,a3
000070D2 49F8 A440                  		lea	($FFFFA440).w,a4
000070D6 343C 6000                  		move.w	#$6000,d2
000070DA                            ; End of function LoadTilesFromStart
000070DA                            
000070DA                            
000070DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070DA                            
000070DA                            
000070DA                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000070DA 78F0                       		moveq	#-$10,d4
000070DC 7C0F                       		moveq	#$F,d6
000070DE                            
000070DE                            loc_6C82:
000070DE 48E7 0E00                  		movem.l	d4-d6,-(sp)
000070E2 7A00                       		moveq	#0,d5
000070E4 3204                       		move.w	d4,d1
000070E6 6100 FF94                  		bsr.w	sub_6C20
000070EA 3801                       		move.w	d1,d4
000070EC 7A00                       		moveq	#0,d5
000070EE 7C1F                       		moveq	#$1F,d6
000070F0 6100 FE44                  		bsr.w	sub_6ADA
000070F4 4CDF 0070                  		movem.l	(sp)+,d4-d6
000070F8 0644 0010                  		addi.w	#$10,d4
000070FC 51CE FFE0                  		dbf	d6,loc_6C82
00007100 4E75                       		rts	
00007102                            ; End of function LoadTilesFromStart2
00007102                            
00007102                            ; ---------------------------------------------------------------------------
00007102                            ; Main Load Block loading subroutine
00007102                            ; ---------------------------------------------------------------------------
00007102                            
00007102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007102                            
00007102                            
00007102                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007102 7000                       		moveq	#0,d0
00007104 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007108 E948                       		lsl.w	#4,d0
0000710A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007110 45F2 0000                  		lea	(a2,d0.w),a2
00007114 2F0A                       		move.l	a2,-(sp)
00007116 588A                       		addq.l	#4,a2
00007118 205A                       		movea.l	(a2)+,a0
0000711A 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000711E 303C 0000                  		move.w	#0,d0
00007122 6100 A81A                  		bsr.w	EniDec
00007126 205A                       		movea.l	(a2)+,a0
00007128 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000712E 6100 A98C                  		bsr.w	KosDec
00007132 6100 0000                  		bsr.w	LevelLayoutLoad
00007136 301A                       		move.w	(a2)+,d0
00007138 3012                       		move.w	(a2),d0
0000713A 0240 00FF                  		andi.w	#$FF,d0
0000713E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007144 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007146 700C                       		moveq	#$C,d0		; use SB3 pallet
00007148                            
00007148                            MLB_ChkSBZPal:
00007148 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000714E 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007150 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007156 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007158                            
00007158                            MLB_UsePal0E:
00007158 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000715A                            
0000715A                            MLB_NormalPal:
0000715A 6100 B1C0                  		bsr.w	PalLoad1	; load pallet (based on	d0)
0000715E 245F                       		movea.l	(sp)+,a2
00007160 584A                       		addq.w	#4,a2
00007162 7000                       		moveq	#0,d0
00007164 1012                       		move.b	(a2),d0
00007166 6700                       		beq.s	locret_6D10
00007168 6100 A636                  		bsr.w	LoadPLC		; load pattern load cues
0000716C                            
0000716C                            locret_6D10:
0000716C 4E75                       		rts	
0000716E                            ; End of function MainLoadBlockLoad
0000716E                            
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            ; Level	layout loading subroutine
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            
0000716E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000716E                            
0000716E                            
0000716E                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000716E 47F8 A400                  		lea	($FFFFA400).w,a3
00007172 323C 01FF                  		move.w	#$1FF,d1
00007176 7000                       		moveq	#0,d0
00007178                            
00007178                            LevLoad_ClrRam:
00007178 26C0                       		move.l	d0,(a3)+
0000717A 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
0000717E                            
0000717E 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007182 7200                       		moveq	#0,d1
00007184 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007188 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000718C 7202                       		moveq	#2,d1
0000718E                            ; End of function LevelLayoutLoad
0000718E                            
0000718E                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000718E                            
0000718E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000718E                            
0000718E                            
0000718E                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000718E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007192 ED08                       		lsl.b	#6,d0
00007194 EA48                       		lsr.w	#5,d0
00007196 3400                       		move.w	d0,d2
00007198 D040                       		add.w	d0,d0
0000719A D042                       		add.w	d2,d0
0000719C D041                       		add.w	d1,d0
0000719E 43F9 0000 0000             		lea	(Level_Index).l,a1
000071A4 3031 0000                  		move.w	(a1,d0.w),d0
000071A8 43F1 0000                  		lea	(a1,d0.w),a1
000071AC 7200                       		moveq	#0,d1
000071AE 3401                       		move.w	d1,d2
000071B0 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000071B2 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000071B4                            
000071B4                            LevLoad_NumRows:
000071B4 3001                       		move.w	d1,d0
000071B6 204B                       		movea.l	a3,a0
000071B8                            
000071B8                            LevLoad_Row:
000071B8 10D9                       		move.b	(a1)+,(a0)+
000071BA 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000071BE 47EB 0080                  		lea	$80(a3),a3	; do next row
000071C2 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000071C6 4E75                       		rts	
000071C8                            ; End of function LevelLayoutLoad2
000071C8                            
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            ; Dynamic screen resize	loading	subroutine
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            
000071C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071C8                            
000071C8                            
000071C8                            DynScrResizeLoad:			; XREF: DeformBgLayer
000071C8 7000                       		moveq	#0,d0
000071CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000071CE D040                       		add.w	d0,d0
000071D0 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000071D4 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000071D8 7202                       		moveq	#2,d1
000071DA 3038 F726                  		move.w	($FFFFF726).w,d0
000071DE 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000071E2 6700                       		beq.s	locret_6DAA
000071E4 6400                       		bcc.s	loc_6DAC
000071E6 4441                       		neg.w	d1
000071E8 3038 F704                  		move.w	($FFFFF704).w,d0
000071EC B078 F726                  		cmp.w	($FFFFF726).w,d0
000071F0 6300                       		bls.s	loc_6DA0
000071F2 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000071F6 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000071FC                            
000071FC                            loc_6DA0:
000071FC D378 F72E                  		add.w	d1,($FFFFF72E).w
00007200 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007206                            
00007206                            locret_6DAA:
00007206 4E75                       		rts	
00007208                            ; ===========================================================================
00007208                            
00007208                            loc_6DAC:				; XREF: DynScrResizeLoad
00007208 3038 F704                  		move.w	($FFFFF704).w,d0
0000720C 5040                       		addq.w	#8,d0
0000720E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007212 6500                       		bcs.s	loc_6DC4
00007214 0838 0001 D022             		btst	#1,($FFFFD022).w
0000721A 6700                       		beq.s	loc_6DC4
0000721C D241                       		add.w	d1,d1
0000721E D241                       		add.w	d1,d1
00007220                            
00007220                            loc_6DC4:
00007220 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007224 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000722A 4E75                       		rts	
0000722C                            ; End of function DynScrResizeLoad
0000722C                            
0000722C                            ; ===========================================================================
0000722C                            ; ---------------------------------------------------------------------------
0000722C                            ; Offset index for dynamic screen resizing
0000722C                            ; ---------------------------------------------------------------------------
0000722C 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007230 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007234 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007238 0000                       		dc.w Resize_Ending-Resize_Index
0000723A                            ; ===========================================================================
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            ; Green	Hill Zone dynamic screen resizing
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            
0000723A                            Resize_GHZ:				; XREF: Resize_Index
0000723A 7000                       		moveq	#0,d0
0000723C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007240 D040                       		add.w	d0,d0
00007242 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007246 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000724A                            ; ===========================================================================
0000724A 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000724C 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000724E 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007250                            ; ===========================================================================
00007250                            
00007250                            Resize_GHZ1:
00007250 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007256 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000725C 6500                       		bcs.s	locret_6E08	; if not, branch
0000725E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007264                            
00007264                            locret_6E08:
00007264 4E75                       		rts	
00007266                            ; ===========================================================================
00007266                            
00007266                            Resize_GHZ2:
00007266 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000726C 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007272 6500                       		bcs.s	locret_6E3A
00007274 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000727A 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007280 6500                       		bcs.s	locret_6E3A
00007282 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007288 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000728E 6500                       		bcs.s	locret_6E3A
00007290 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007296                            
00007296                            locret_6E3A:
00007296 4E75                       		rts	
00007298                            ; ===========================================================================
00007298                            
00007298                            Resize_GHZ3:
00007298 7000                       		moveq	#0,d0
0000729A 1038 F742                  		move.b	($FFFFF742).w,d0
0000729E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000072A2 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000072A6                            ; ===========================================================================
000072A6 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000072A8 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000072AA 0000                       		dc.w Resize_GHZ3end-off_6E4A
000072AC                            ; ===========================================================================
000072AC                            
000072AC                            Resize_GHZ3main:
000072AC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072B2 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000072B8 6500                       		bcs.s	locret_6E96
000072BA 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000072C0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000072C6 6500                       		bcs.s	locret_6E96
000072C8 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000072CE 6500                       		bcs.s	loc_6E98
000072D0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000072D6 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000072DC 6400                       		bcc.s	loc_6E8E
000072DE 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000072E4 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000072EA                            
000072EA                            loc_6E8E:
000072EA 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000072F0 6400                       		bcc.s	loc_6E98
000072F2                            
000072F2                            locret_6E96:
000072F2 4E75                       		rts	
000072F4                            ; ===========================================================================
000072F4                            
000072F4                            loc_6E98:
000072F4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072FA 5438 F742                  		addq.b	#2,($FFFFF742).w
000072FE 4E75                       		rts	
00007300                            ; ===========================================================================
00007300                            
00007300                            Resize_GHZ3boss:
00007300 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007306 6400                       		bcc.s	loc_6EB0
00007308 5538 F742                  		subq.b	#2,($FFFFF742).w
0000730C                            
0000730C                            loc_6EB0:
0000730C 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007312 6500                       		bcs.s	locret_6EE8
00007314 6100 0000                  		bsr.w	SingleObjLoad
00007318 6600                       		bne.s	loc_6ED0
0000731A 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000731E 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007324 337C 0280 000C             		move.w	#$280,$C(a1)
0000732A                            
0000732A                            loc_6ED0:
0000732A 303C 008C                  		move.w	#$8C,d0
0000732E 6100 A286                  		bsr.w	PlaySound	; play boss music
00007332 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007338 5438 F742                  		addq.b	#2,($FFFFF742).w
0000733C 7011                       		moveq	#$11,d0
0000733E 6000 A460                  		bra.w	LoadPLC		; load boss patterns
00007342                            ; ===========================================================================
00007342                            
00007342                            locret_6EE8:
00007342 4E75                       		rts	
00007344                            ; ===========================================================================
00007344                            
00007344                            Resize_GHZ3end:
00007344 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000734A 4E75                       		rts	
0000734C                            ; ===========================================================================
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            ; Labyrinth Zone dynamic screen	resizing
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            
0000734C                            Resize_LZ:				; XREF: Resize_Index
0000734C 7000                       		moveq	#0,d0
0000734E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007352 D040                       		add.w	d0,d0
00007354 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007358 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000735C                            ; ===========================================================================
0000735C 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000735E 0000                       		dc.w Resize_LZ12-Resize_LZx
00007360 0000                       		dc.w Resize_LZ3-Resize_LZx
00007362 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007364                            ; ===========================================================================
00007364                            
00007364                            Resize_LZ12:
00007364 4E75                       		rts	
00007366                            ; ===========================================================================
00007366                            
00007366                            Resize_LZ3:
00007366 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000736A 6700                       		beq.s	loc_6F28	; if not, branch
0000736C 43F8 A506                  		lea	($FFFFA506).w,a1
00007370 0C11 0007                  		cmpi.b	#7,(a1)
00007374 6700                       		beq.s	loc_6F28
00007376 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000737A 303C 00B7                  		move.w	#$B7,d0
0000737E 6100 A23C                  		bsr.w	PlaySound_Special ; play rumbling sound
00007382                            
00007382                            loc_6F28:
00007382 4A38 F742                  		tst.b	($FFFFF742).w
00007386 6600                       		bne.s	locret_6F64
00007388 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000738E 6500                       		bcs.s	locret_6F62
00007390 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007396 6400                       		bcc.s	locret_6F62
00007398 6100 0000                  		bsr.w	SingleObjLoad
0000739C 6600                       		bne.s	loc_6F4A
0000739E 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000073A2                            
000073A2                            loc_6F4A:
000073A2 303C 008C                  		move.w	#$8C,d0
000073A6 6100 A20E                  		bsr.w	PlaySound	; play boss music
000073AA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000073B4 7011                       		moveq	#$11,d0
000073B6 6000 A3E8                  		bra.w	LoadPLC		; load boss patterns
000073BA                            ; ===========================================================================
000073BA                            
000073BA                            locret_6F62:
000073BA 4E75                       		rts	
000073BC                            ; ===========================================================================
000073BC                            
000073BC                            locret_6F64:
000073BC 4E75                       		rts	
000073BE                            ; ===========================================================================
000073BE                            
000073BE                            Resize_SBZ3:
000073BE 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000073C4 6500                       		bcs.s	locret_6F8C
000073C6 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000073CC 6400                       		bcc.s	locret_6F8C	; if not, branch
000073CE 4238 FE30                  		clr.b	($FFFFFE30).w
000073D2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000073D8 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000073DE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000073E4                            
000073E4                            locret_6F8C:
000073E4 4E75                       		rts	
000073E6                            ; ===========================================================================
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            ; Marble Zone dynamic screen resizing
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            
000073E6                            Resize_MZ:				; XREF: Resize_Index
000073E6 7000                       		moveq	#0,d0
000073E8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073EC D040                       		add.w	d0,d0
000073EE 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000073F2 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000073F6                            ; ===========================================================================
000073F6 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000073F8 0000                       		dc.w Resize_MZ2-Resize_MZx
000073FA 0000                       		dc.w Resize_MZ3-Resize_MZx
000073FC                            ; ===========================================================================
000073FC                            
000073FC                            Resize_MZ1:
000073FC 7000                       		moveq	#0,d0
000073FE 1038 F742                  		move.b	($FFFFF742).w,d0
00007402 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007406 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000740A                            ; ===========================================================================
0000740A 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000740C 0000                       		dc.w loc_6FEA-off_6FB2
0000740E 0000                       		dc.w loc_702E-off_6FB2
00007410 0000                       		dc.w loc_7050-off_6FB2
00007412                            ; ===========================================================================
00007412                            
00007412                            loc_6FBA:
00007412 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007418 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000741E 6500                       		bcs.s	locret_6FE8
00007420 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007426 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000742C 6500                       		bcs.s	locret_6FE8
0000742E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007434 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000743A 6500                       		bcs.s	locret_6FE8
0000743C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007440                            
00007440                            locret_6FE8:
00007440 4E75                       		rts	
00007442                            ; ===========================================================================
00007442                            
00007442                            loc_6FEA:
00007442 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007448 6400                       		bcc.s	loc_6FF8
0000744A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000744E 4E75                       		rts	
00007450                            ; ===========================================================================
00007450                            
00007450                            loc_6FF8:
00007450 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007456 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000745C 6400                       		bcc.s	locret_702C
0000745E 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007464 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000746A 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007470 6400                       		bcc.s	locret_702C
00007472 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007478 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000747E 6500                       		bcs.s	locret_702C
00007480 5438 F742                  		addq.b	#2,($FFFFF742).w
00007484                            
00007484                            locret_702C:
00007484 4E75                       		rts	
00007486                            ; ===========================================================================
00007486                            
00007486                            loc_702E:
00007486 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000748C 6400                       		bcc.s	loc_703C
0000748E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007492 4E75                       		rts	
00007494                            ; ===========================================================================
00007494                            
00007494                            loc_703C:
00007494 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000749A 6500                       		bcs.s	locret_704E
0000749C 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000074A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000074A6                            
000074A6                            locret_704E:
000074A6 4E75                       		rts	
000074A8                            ; ===========================================================================
000074A8                            
000074A8                            loc_7050:
000074A8 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000074AE 6500                       		bcs.s	locret_7072
000074B0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000074B6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000074BC 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000074C2 6500                       		bcs.s	locret_7072
000074C4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000074CA                            
000074CA                            locret_7072:
000074CA 4E75                       		rts	
000074CC                            ; ===========================================================================
000074CC                            
000074CC                            Resize_MZ2:
000074CC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000074D2 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074D8 6500                       		bcs.s	locret_7088
000074DA 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000074E0                            
000074E0                            locret_7088:
000074E0 4E75                       		rts	
000074E2                            ; ===========================================================================
000074E2                            
000074E2                            Resize_MZ3:
000074E2 7000                       		moveq	#0,d0
000074E4 1038 F742                  		move.b	($FFFFF742).w,d0
000074E8 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000074EC 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000074F0                            ; ===========================================================================
000074F0 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000074F2 0000                       		dc.w Resize_MZ3end-off_7098
000074F4                            ; ===========================================================================
000074F4                            
000074F4                            Resize_MZ3boss:
000074F4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000074FA 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007500 6500                       		bcs.s	locret_70E8
00007502 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007508 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000750E 6500                       		bcs.s	locret_70E8
00007510 6100 0000                  		bsr.w	SingleObjLoad
00007514 6600                       		bne.s	loc_70D0
00007516 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000751A 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007520 337C 022C 000C             		move.w	#$22C,$C(a1)
00007526                            
00007526                            loc_70D0:
00007526 303C 008C                  		move.w	#$8C,d0
0000752A 6100 A08A                  		bsr.w	PlaySound	; play boss music
0000752E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007534 5438 F742                  		addq.b	#2,($FFFFF742).w
00007538 7011                       		moveq	#$11,d0
0000753A 6000 A264                  		bra.w	LoadPLC		; load boss patterns
0000753E                            ; ===========================================================================
0000753E                            
0000753E                            locret_70E8:
0000753E 4E75                       		rts	
00007540                            ; ===========================================================================
00007540                            
00007540                            Resize_MZ3end:
00007540 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007546 4E75                       		rts	
00007548                            ; ===========================================================================
00007548                            ; ---------------------------------------------------------------------------
00007548                            ; Star Light Zone dynamic screen resizing
00007548                            ; ---------------------------------------------------------------------------
00007548                            
00007548                            Resize_SLZ:				; XREF: Resize_Index
00007548 7000                       		moveq	#0,d0
0000754A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000754E D040                       		add.w	d0,d0
00007550 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007554 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007558                            ; ===========================================================================
00007558 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000755A 0000                       		dc.w Resize_SLZ12-Resize_SLZx
0000755C 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000755E                            ; ===========================================================================
0000755E                            
0000755E                            Resize_SLZ12:
0000755E 4E75                       		rts	
00007560                            ; ===========================================================================
00007560                            
00007560                            Resize_SLZ3:
00007560 7000                       		moveq	#0,d0
00007562 1038 F742                  		move.b	($FFFFF742).w,d0
00007566 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000756A 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000756E                            ; ===========================================================================
0000756E 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007570 0000                       		dc.w Resize_SLZ3boss-off_7118
00007572 0000                       		dc.w Resize_SLZ3end-off_7118
00007574                            ; ===========================================================================
00007574                            
00007574                            Resize_SLZ3main:
00007574 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000757A 6500                       		bcs.s	locret_7130
0000757C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007582 5438 F742                  		addq.b	#2,($FFFFF742).w
00007586                            
00007586                            locret_7130:
00007586 4E75                       		rts	
00007588                            ; ===========================================================================
00007588                            
00007588                            Resize_SLZ3boss:
00007588 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000758E 6500                       		bcs.s	locret_715C
00007590 6100 0000                  		bsr.w	SingleObjLoad
00007594 6600                       		bne.s	loc_7144
00007596 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000759A                            
0000759A                            loc_7144:
0000759A 303C 008C                  		move.w	#$8C,d0
0000759E 6100 A016                  		bsr.w	PlaySound	; play boss music
000075A2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075A8 5438 F742                  		addq.b	#2,($FFFFF742).w
000075AC 7011                       		moveq	#$11,d0
000075AE 6000 A1F0                  		bra.w	LoadPLC		; load boss patterns
000075B2                            ; ===========================================================================
000075B2                            
000075B2                            locret_715C:
000075B2 4E75                       		rts	
000075B4                            ; ===========================================================================
000075B4                            
000075B4                            Resize_SLZ3end:
000075B4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075BA 4E75                       		rts
000075BC 4E75                       		rts
000075BE                            ; ===========================================================================
000075BE                            ; ---------------------------------------------------------------------------
000075BE                            ; Spring Yard Zone dynamic screen resizing
000075BE                            ; ---------------------------------------------------------------------------
000075BE                            
000075BE                            Resize_SYZ:				; XREF: Resize_Index
000075BE 7000                       		moveq	#0,d0
000075C0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075C4 D040                       		add.w	d0,d0
000075C6 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000075CA 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000075CE                            ; ===========================================================================
000075CE 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000075D0 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000075D2 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000075D4                            ; ===========================================================================
000075D4                            
000075D4                            Resize_SYZ1:
000075D4 4E75                       		rts	
000075D6                            ; ===========================================================================
000075D6                            
000075D6                            Resize_SYZ2:
000075D6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075DC 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000075E2 6500                       		bcs.s	locret_71A2
000075E4 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000075EA 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000075F0 6500                       		bcs.s	locret_71A2
000075F2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075F8                            
000075F8                            locret_71A2:
000075F8 4E75                       		rts	
000075FA                            ; ===========================================================================
000075FA                            
000075FA                            Resize_SYZ3:
000075FA 7000                       		moveq	#0,d0
000075FC 1038 F742                  		move.b	($FFFFF742).w,d0
00007600 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007604 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007608                            ; ===========================================================================
00007608 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000760A 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000760C 0000                       		dc.w Resize_SYZ3end-off_71B2
0000760E                            ; ===========================================================================
0000760E                            
0000760E                            Resize_SYZ3main:
0000760E 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007614 6500                       		bcs.s	locret_71CE
00007616 6100 0000                  		bsr.w	SingleObjLoad
0000761A 6600                       		bne.s	locret_71CE
0000761C 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007620 5438 F742                  		addq.b	#2,($FFFFF742).w
00007624                            
00007624                            locret_71CE:
00007624 4E75                       		rts	
00007626                            ; ===========================================================================
00007626                            
00007626                            Resize_SYZ3boss:
00007626 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000762C 6500                       		bcs.s	locret_7200
0000762E 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007634 6100 0000                  		bsr.w	SingleObjLoad
00007638 6600                       		bne.s	loc_71EC
0000763A 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000763E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007642                            
00007642                            loc_71EC:
00007642 303C 008C                  		move.w	#$8C,d0
00007646 6100 9F6E                  		bsr.w	PlaySound	; play boss music
0000764A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007650 7011                       		moveq	#$11,d0
00007652 6000 A14C                  		bra.w	LoadPLC		; load boss patterns
00007656                            ; ===========================================================================
00007656                            
00007656                            locret_7200:
00007656 4E75                       		rts	
00007658                            ; ===========================================================================
00007658                            
00007658                            Resize_SYZ3end:
00007658 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000765E 4E75                       		rts	
00007660                            ; ===========================================================================
00007660                            ; ---------------------------------------------------------------------------
00007660                            ; Scrap	Brain Zone dynamic screen resizing
00007660                            ; ---------------------------------------------------------------------------
00007660                            
00007660                            Resize_SBZ:				; XREF: Resize_Index
00007660 7000                       		moveq	#0,d0
00007662 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007666 D040                       		add.w	d0,d0
00007668 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000766C 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007670                            ; ===========================================================================
00007670 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007672 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007674 0000                       		dc.w Resize_FZ-Resize_SBZx
00007676                            ; ===========================================================================
00007676                            
00007676                            Resize_SBZ1:
00007676 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000767C 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007682 6500                       		bcs.s	locret_7242
00007684 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000768A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007690 6500                       		bcs.s	locret_7242
00007692 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007698                            
00007698                            locret_7242:
00007698 4E75                       		rts	
0000769A                            ; ===========================================================================
0000769A                            
0000769A                            Resize_SBZ2:
0000769A 7000                       		moveq	#0,d0
0000769C 1038 F742                  		move.b	($FFFFF742).w,d0
000076A0 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000076A4 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000076A8                            ; ===========================================================================
000076A8 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000076AA 0000                       		dc.w Resize_SBZ2boss-off_7252
000076AC 0000                       		dc.w Resize_SBZ2boss2-off_7252
000076AE 0000                       		dc.w Resize_SBZ2end-off_7252
000076B0                            ; ===========================================================================
000076B0                            
000076B0                            Resize_SBZ2main:
000076B0 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000076B6 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000076BC 6500                       		bcs.s	locret_727A
000076BE 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000076C4 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000076CA 6500                       		bcs.s	locret_727A
000076CC 5438 F742                  		addq.b	#2,($FFFFF742).w
000076D0                            
000076D0                            locret_727A:
000076D0 4E75                       		rts	
000076D2                            ; ===========================================================================
000076D2                            
000076D2                            Resize_SBZ2boss:
000076D2 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000076D8 6500                       		bcs.s	locret_7298
000076DA 6100 0000                  		bsr.w	SingleObjLoad
000076DE 6600                       		bne.s	locret_7298
000076E0 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000076E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000076E8 701E                       		moveq	#$1E,d0
000076EA 6000 A0B4                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000076EE                            ; ===========================================================================
000076EE                            
000076EE                            locret_7298:
000076EE 4E75                       		rts	
000076F0                            ; ===========================================================================
000076F0                            
000076F0                            Resize_SBZ2boss2:
000076F0 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000076F6 6500                       		bcs.s	loc_72B6
000076F8 6100 0000                  		bsr.w	SingleObjLoad
000076FC 6600                       		bne.s	loc_72B0
000076FE 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007702 5438 F742                  		addq.b	#2,($FFFFF742).w
00007706                            
00007706                            loc_72B0:
00007706 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000770C                            
0000770C                            loc_72B6:
0000770C 6000                       		bra.s	loc_72C2
0000770E                            ; ===========================================================================
0000770E                            
0000770E                            Resize_SBZ2end:
0000770E 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007714 6500                       		bcs.s	loc_72C2
00007716 4E75                       		rts	
00007718                            ; ===========================================================================
00007718                            
00007718                            loc_72C2:
00007718 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000771E 4E75                       		rts	
00007720                            ; ===========================================================================
00007720                            
00007720                            Resize_FZ:
00007720 7000                       		moveq	#0,d0
00007722 1038 F742                  		move.b	($FFFFF742).w,d0
00007726 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000772A 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000772E                            ; ===========================================================================
0000772E 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007732 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007736 0000                       		dc.w Resize_FZend2-off_72D8
00007738                            ; ===========================================================================
00007738                            
00007738                            Resize_FZmain:
00007738 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000773E 6500                       		bcs.s	loc_72F4
00007740 5438 F742                  		addq.b	#2,($FFFFF742).w
00007744 701F                       		moveq	#$1F,d0
00007746 6100 A058                  		bsr.w	LoadPLC		; load FZ boss patterns
0000774A                            
0000774A                            loc_72F4:
0000774A 60CC                       		bra.s	loc_72C2
0000774C                            ; ===========================================================================
0000774C                            
0000774C                            Resize_FZboss:
0000774C 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007752 6500                       		bcs.s	loc_7312
00007754 6100 0000                  		bsr.w	SingleObjLoad
00007758 6600                       		bne.s	loc_7312
0000775A 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000775E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007762 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007768                            
00007768                            loc_7312:
00007768 60AE                       		bra.s	loc_72C2
0000776A                            ; ===========================================================================
0000776A                            
0000776A                            Resize_FZend:
0000776A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007770 6500                       		bcs.s	loc_7320
00007772 5438 F742                  		addq.b	#2,($FFFFF742).w
00007776                            
00007776                            loc_7320:
00007776 60A0                       		bra.s	loc_72C2
00007778                            ; ===========================================================================
00007778                            
00007778                            locret_7322:
00007778 4E75                       		rts	
0000777A                            ; ===========================================================================
0000777A                            
0000777A                            Resize_FZend2:
0000777A 609C                       		bra.s	loc_72C2
0000777C                            ; ===========================================================================
0000777C                            ; ---------------------------------------------------------------------------
0000777C                            ; Ending sequence dynamic screen resizing (empty)
0000777C                            ; ---------------------------------------------------------------------------
0000777C                            
0000777C                            Resize_Ending:				; XREF: Resize_Index
0000777C 4E75                       		rts	
0000777E                            ; ===========================================================================
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            ; Object 11 - GHZ bridge
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            
0000777E                            Obj11:					; XREF: Obj_Index
0000777E 7000                       		moveq	#0,d0
00007780 1028 0024                  		move.b	$24(a0),d0
00007784 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007788 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000778C                            ; ===========================================================================
0000778C 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007790 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007794 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007798                            ; ===========================================================================
00007798                            
00007798                            Obj11_Main:				; XREF: Obj11_Index
00007798 5428 0024                  		addq.b	#2,$24(a0)
0000779C 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000077A4 317C 438E 0002             		move.w	#$438E,2(a0)
000077AA 117C 0004 0001             		move.b	#4,1(a0)
000077B0 117C 0003 0018             		move.b	#3,$18(a0)
000077B6 117C 0080 0019             		move.b	#$80,$19(a0)
000077BC 3428 000C                  		move.w	$C(a0),d2
000077C0 3628 0008                  		move.w	8(a0),d3
000077C4 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000077C6 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000077CA 7200                       		moveq	#0,d1
000077CC 1212                       		move.b	(a2),d1		; copy a2 to d1
000077CE 14FC 0000                  		move.b	#0,(a2)+
000077D2 3001                       		move.w	d1,d0
000077D4 E248                       		lsr.w	#1,d0
000077D6 E948                       		lsl.w	#4,d0
000077D8 9640                       		sub.w	d0,d3
000077DA 5501                       		subq.b	#2,d1
000077DC 6500                       		bcs.s	Obj11_Action
000077DE                            
000077DE                            Obj11_MakeBdg:
000077DE 6100 0000                  		bsr.w	SingleObjLoad
000077E2 6600                       		bne.s	Obj11_Action
000077E4 5228 0028                  		addq.b	#1,$28(a0)
000077E8 B668 0008                  		cmp.w	8(a0),d3
000077EC 6600                       		bne.s	loc_73B8
000077EE 0643 0010                  		addi.w	#$10,d3
000077F2 3142 000C                  		move.w	d2,$C(a0)
000077F6 3142 003C                  		move.w	d2,$3C(a0)
000077FA 3A08                       		move.w	a0,d5
000077FC 0445 D000                  		subi.w	#-$3000,d5
00007800 EC4D                       		lsr.w	#6,d5
00007802 0245 007F                  		andi.w	#$7F,d5
00007806 14C5                       		move.b	d5,(a2)+
00007808 5228 0028                  		addq.b	#1,$28(a0)
0000780C                            
0000780C                            loc_73B8:				; XREF: ROM:00007398j
0000780C 3A09                       		move.w	a1,d5
0000780E 0445 D000                  		subi.w	#-$3000,d5
00007812 EC4D                       		lsr.w	#6,d5
00007814 0245 007F                  		andi.w	#$7F,d5
00007818 14C5                       		move.b	d5,(a2)+
0000781A 137C 000A 0024             		move.b	#$A,$24(a1)
00007820 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007822 3342 000C                  		move.w	d2,$C(a1)
00007826 3342 003C                  		move.w	d2,$3C(a1)
0000782A 3343 0008                  		move.w	d3,8(a1)
0000782E 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007836 337C 438E 0002             		move.w	#$438E,2(a1)
0000783C 137C 0004 0001             		move.b	#4,1(a1)
00007842 137C 0003 0018             		move.b	#3,$18(a1)
00007848 137C 0008 0019             		move.b	#8,$19(a1)
0000784E 0643 0010                  		addi.w	#$10,d3
00007852 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007856                            
00007856                            Obj11_Action:				; XREF: Obj11_Index
00007856 6100                       		bsr.s	Obj11_Solid
00007858 4A28 003E                  		tst.b	$3E(a0)
0000785C 6700                       		beq.s	Obj11_Display
0000785E 5928 003E                  		subq.b	#4,$3E(a0)
00007862 6100 0000                  		bsr.w	Obj11_Bend
00007866                            
00007866                            Obj11_Display:
00007866 6100 0000                  		bsr.w	DisplaySprite
0000786A 6000 0000                  		bra.w	Obj11_ChkDel
0000786E                            
0000786E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000786E                            
0000786E                            
0000786E                            Obj11_Solid:				; XREF: Obj11_Action
0000786E 7200                       		moveq	#0,d1
00007870 1228 0028                  		move.b	$28(a0),d1
00007874 E749                       		lsl.w	#3,d1
00007876 3401                       		move.w	d1,d2
00007878 5041                       		addq.w	#8,d1
0000787A D442                       		add.w	d2,d2
0000787C 43F8 D000                  		lea	($FFFFD000).w,a1
00007880 4A69 0012                  		tst.w	$12(a1)
00007884 6B00 0000                  		bmi.w	locret_751E
00007888 3029 0008                  		move.w	8(a1),d0
0000788C 9068 0008                  		sub.w	8(a0),d0
00007890 D041                       		add.w	d1,d0
00007892 6B00 0000                  		bmi.w	locret_751E
00007896 B042                       		cmp.w	d2,d0
00007898 6400 0000                  		bcc.w	locret_751E
0000789C 6000                       		bra.s	Platform2
0000789E                            ; End of function Obj11_Solid
0000789E                            
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            ; Platform subroutine
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            
0000789E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000789E                            
0000789E                            
0000789E                            PlatformObject:
0000789E 43F8 D000                  		lea	($FFFFD000).w,a1
000078A2 4A69 0012                  		tst.w	$12(a1)
000078A6 6B00 0000                  		bmi.w	locret_751E
000078AA 3029 0008                  		move.w	8(a1),d0
000078AE 9068 0008                  		sub.w	8(a0),d0
000078B2 D041                       		add.w	d1,d0
000078B4 6B00 0000                  		bmi.w	locret_751E
000078B8 D241                       		add.w	d1,d1
000078BA B041                       		cmp.w	d1,d0
000078BC 6400 0000                  		bcc.w	locret_751E
000078C0                            
000078C0                            Platform2:
000078C0 3028 000C                  		move.w	$C(a0),d0
000078C4 5140                       		subq.w	#8,d0
000078C6                            
000078C6                            Platform3:
000078C6 3429 000C                  		move.w	$C(a1),d2
000078CA 1229 0016                  		move.b	$16(a1),d1
000078CE 4881                       		ext.w	d1
000078D0 D242                       		add.w	d2,d1
000078D2 5841                       		addq.w	#4,d1
000078D4 9041                       		sub.w	d1,d0
000078D6 6200 0000                  		bhi.w	locret_751E
000078DA 0C40 FFF0                  		cmpi.w	#-$10,d0
000078DE 6500 0000                  		bcs.w	locret_751E
000078E2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000078E6 6B00 0000                  		bmi.w	locret_751E
000078EA 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000078F0 6400 0000                  		bcc.w	locret_751E
000078F4 D440                       		add.w	d0,d2
000078F6 5642                       		addq.w	#3,d2
000078F8 3342 000C                  		move.w	d2,$C(a1)
000078FC 5428 0024                  		addq.b	#2,$24(a0)
00007900                            
00007900                            loc_74AE:
00007900 0829 0003 0022             		btst	#3,$22(a1)
00007906 6700                       		beq.s	loc_74DC
00007908 7000                       		moveq	#0,d0
0000790A 1029 003D                  		move.b	$3D(a1),d0
0000790E ED48                       		lsl.w	#6,d0
00007910 0680 00FF D000             		addi.l	#$FFD000,d0
00007916 2440                       		movea.l	d0,a2
00007918 08AA 0003 0022             		bclr	#3,$22(a2)
0000791E 422A 0025                  		clr.b	$25(a2)
00007922 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007928 6600                       		bne.s	loc_74DC
0000792A 552A 0024                  		subq.b	#2,$24(a2)
0000792E                            
0000792E                            loc_74DC:
0000792E 3008                       		move.w	a0,d0
00007930 0440 D000                  		subi.w	#-$3000,d0
00007934 EC48                       		lsr.w	#6,d0
00007936 0240 007F                  		andi.w	#$7F,d0
0000793A 1340 003D                  		move.b	d0,$3D(a1)
0000793E 137C 0000 0026             		move.b	#0,$26(a1)
00007944 337C 0000 0012             		move.w	#0,$12(a1)
0000794A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007950 0829 0001 0022             		btst	#1,$22(a1)
00007956 6700                       		beq.s	loc_7512
00007958 2F08                       		move.l	a0,-(sp)
0000795A 2049                       		movea.l	a1,a0
0000795C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007962 205F                       		movea.l	(sp)+,a0
00007964                            
00007964                            loc_7512:
00007964 08E9 0003 0022             		bset	#3,$22(a1)
0000796A 08E8 0003 0022             		bset	#3,$22(a0)
00007970                            
00007970                            locret_751E:
00007970 4E75                       		rts	
00007972                            ; End of function PlatformObject
00007972                            
00007972                            ; ---------------------------------------------------------------------------
00007972                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007972                            ; ---------------------------------------------------------------------------
00007972                            
00007972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007972                            
00007972                            
00007972                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007972 43F8 D000                  		lea	($FFFFD000).w,a1
00007976 4A69 0012                  		tst.w	$12(a1)
0000797A 6B00 FFF4                  		bmi.w	locret_751E
0000797E 3029 0008                  		move.w	8(a1),d0
00007982 9068 0008                  		sub.w	8(a0),d0
00007986 D041                       		add.w	d1,d0
00007988 6BE6                       		bmi.s	locret_751E
0000798A D241                       		add.w	d1,d1
0000798C B041                       		cmp.w	d1,d0
0000798E 64E0                       		bcc.s	locret_751E
00007990 0828 0000 0001             		btst	#0,1(a0)
00007996 6700                       		beq.s	loc_754A
00007998 4640                       		not.w	d0
0000799A D041                       		add.w	d1,d0
0000799C                            
0000799C                            loc_754A:
0000799C E248                       		lsr.w	#1,d0
0000799E 7600                       		moveq	#0,d3
000079A0 1632 0000                  		move.b	(a2,d0.w),d3
000079A4 3028 000C                  		move.w	$C(a0),d0
000079A8 9043                       		sub.w	d3,d0
000079AA 6000 FF1A                  		bra.w	Platform3
000079AE                            ; End of function SlopeObject
000079AE                            
000079AE                            
000079AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079AE                            
000079AE                            
000079AE                            Obj15_Solid:				; XREF: Obj15_SetSolid
000079AE 43F8 D000                  		lea	($FFFFD000).w,a1
000079B2 4A69 0012                  		tst.w	$12(a1)
000079B6 6B00 FFB8                  		bmi.w	locret_751E
000079BA 3029 0008                  		move.w	8(a1),d0
000079BE 9068 0008                  		sub.w	8(a0),d0
000079C2 D041                       		add.w	d1,d0
000079C4 6B00 FFAA                  		bmi.w	locret_751E
000079C8 D241                       		add.w	d1,d1
000079CA B041                       		cmp.w	d1,d0
000079CC 6400 FFA2                  		bcc.w	locret_751E
000079D0 3028 000C                  		move.w	$C(a0),d0
000079D4 9043                       		sub.w	d3,d0
000079D6 6000 FEEE                  		bra.w	Platform3
000079DA                            ; End of function Obj15_Solid
000079DA                            
000079DA                            ; ===========================================================================
000079DA                            
000079DA                            Obj11_Action2:				; XREF: Obj11_Index
000079DA 6100                       		bsr.s	Obj11_WalkOff
000079DC 6100 0000                  		bsr.w	DisplaySprite
000079E0 6000 0000                  		bra.w	Obj11_ChkDel
000079E4                            
000079E4                            ; ---------------------------------------------------------------------------
000079E4                            ; Subroutine allowing Sonic to walk off a bridge
000079E4                            ; ---------------------------------------------------------------------------
000079E4                            
000079E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079E4                            
000079E4                            
000079E4                            Obj11_WalkOff:				; XREF: Obj11_Action2
000079E4 7200                       		moveq	#0,d1
000079E6 1228 0028                  		move.b	$28(a0),d1
000079EA E749                       		lsl.w	#3,d1
000079EC 3401                       		move.w	d1,d2
000079EE 5041                       		addq.w	#8,d1
000079F0 6100                       		bsr.s	ExitPlatform2
000079F2 6400                       		bcc.s	locret_75BE
000079F4 E848                       		lsr.w	#4,d0
000079F6 1140 003F                  		move.b	d0,$3F(a0)
000079FA 1028 003E                  		move.b	$3E(a0),d0
000079FE 0C00 0040                  		cmpi.b	#$40,d0
00007A02 6700                       		beq.s	loc_75B6
00007A04 5828 003E                  		addq.b	#4,$3E(a0)
00007A08                            
00007A08                            loc_75B6:
00007A08 6100 0000                  		bsr.w	Obj11_Bend
00007A0C 6100 0000                  		bsr.w	Obj11_MoveSonic
00007A10                            
00007A10                            locret_75BE:
00007A10 4E75                       		rts	
00007A12                            ; End of function Obj11_WalkOff
00007A12                            
00007A12                            ; ---------------------------------------------------------------------------
00007A12                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007A12                            ; ---------------------------------------------------------------------------
00007A12                            
00007A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A12                            
00007A12                            
00007A12                            ExitPlatform:
00007A12 3401                       		move.w	d1,d2
00007A14                            
00007A14                            ExitPlatform2:
00007A14 D442                       		add.w	d2,d2
00007A16 43F8 D000                  		lea	($FFFFD000).w,a1
00007A1A 0829 0001 0022             		btst	#1,$22(a1)
00007A20 6600                       		bne.s	loc_75E0
00007A22 3029 0008                  		move.w	8(a1),d0
00007A26 9068 0008                  		sub.w	8(a0),d0
00007A2A D041                       		add.w	d1,d0
00007A2C 6B00                       		bmi.s	loc_75E0
00007A2E B042                       		cmp.w	d2,d0
00007A30 6500                       		bcs.s	locret_75F2
00007A32                            
00007A32                            loc_75E0:
00007A32 08A9 0003 0022             		bclr	#3,$22(a1)
00007A38 117C 0002 0024             		move.b	#2,$24(a0)
00007A3E 08A8 0003 0022             		bclr	#3,$22(a0)
00007A44                            
00007A44                            locret_75F2:
00007A44 4E75                       		rts	
00007A46                            ; End of function ExitPlatform
00007A46                            
00007A46                            
00007A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A46                            
00007A46                            
00007A46                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007A46 7000                       		moveq	#0,d0
00007A48 1028 003F                  		move.b	$3F(a0),d0
00007A4C 1030 0029                  		move.b	$29(a0,d0.w),d0
00007A50 ED48                       		lsl.w	#6,d0
00007A52 0680 00FF D000             		addi.l	#$FFD000,d0
00007A58 2440                       		movea.l	d0,a2
00007A5A 43F8 D000                  		lea	($FFFFD000).w,a1
00007A5E 302A 000C                  		move.w	$C(a2),d0
00007A62 5140                       		subq.w	#8,d0
00007A64 7200                       		moveq	#0,d1
00007A66 1229 0016                  		move.b	$16(a1),d1
00007A6A 9041                       		sub.w	d1,d0
00007A6C 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007A70 4E75                       		rts	
00007A72                            ; End of function Obj11_MoveSonic
00007A72                            
00007A72                            
00007A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A72                            
00007A72                            
00007A72                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007A72 1028 003E                  		move.b	$3E(a0),d0
00007A76 6100 B1AA                  		bsr.w	CalcSine
00007A7A 3800                       		move.w	d0,d4
00007A7C 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007A82 7000                       		moveq	#0,d0
00007A84 1028 0028                  		move.b	$28(a0),d0
00007A88 E948                       		lsl.w	#4,d0
00007A8A 7600                       		moveq	#0,d3
00007A8C 1628 003F                  		move.b	$3F(a0),d3
00007A90 3403                       		move.w	d3,d2
00007A92 D640                       		add.w	d0,d3
00007A94 7A00                       		moveq	#0,d5
00007A96 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007A9C 1A35 3000                  		move.b	(a5,d3.w),d5
00007AA0 0243 000F                  		andi.w	#$F,d3
00007AA4 E94B                       		lsl.w	#4,d3
00007AA6 47F4 3000                  		lea	(a4,d3.w),a3
00007AAA 45E8 0029                  		lea	$29(a0),a2
00007AAE                            
00007AAE                            loc_765C:
00007AAE 7000                       		moveq	#0,d0
00007AB0 101A                       		move.b	(a2)+,d0
00007AB2 ED48                       		lsl.w	#6,d0
00007AB4 0680 00FF D000             		addi.l	#$FFD000,d0
00007ABA 2240                       		movea.l	d0,a1
00007ABC 7000                       		moveq	#0,d0
00007ABE 101B                       		move.b	(a3)+,d0
00007AC0 5240                       		addq.w	#1,d0
00007AC2 C0C5                       		mulu.w	d5,d0
00007AC4 C0C4                       		mulu.w	d4,d0
00007AC6 4840                       		swap	d0
00007AC8 D069 003C                  		add.w	$3C(a1),d0
00007ACC 3340 000C                  		move.w	d0,$C(a1)
00007AD0 51CA FFDC                  		dbf	d2,loc_765C
00007AD4 7000                       		moveq	#0,d0
00007AD6 1028 0028                  		move.b	$28(a0),d0
00007ADA 7600                       		moveq	#0,d3
00007ADC 1628 003F                  		move.b	$3F(a0),d3
00007AE0 5203                       		addq.b	#1,d3
00007AE2 9600                       		sub.b	d0,d3
00007AE4 4403                       		neg.b	d3
00007AE6 6B00                       		bmi.s	locret_76CA
00007AE8 3403                       		move.w	d3,d2
00007AEA E94B                       		lsl.w	#4,d3
00007AEC 47F4 3000                  		lea	(a4,d3.w),a3
00007AF0 D6C2                       		adda.w	d2,a3
00007AF2 5342                       		subq.w	#1,d2
00007AF4 6500                       		bcs.s	locret_76CA
00007AF6                            
00007AF6                            loc_76A4:
00007AF6 7000                       		moveq	#0,d0
00007AF8 101A                       		move.b	(a2)+,d0
00007AFA ED48                       		lsl.w	#6,d0
00007AFC 0680 00FF D000             		addi.l	#$FFD000,d0
00007B02 2240                       		movea.l	d0,a1
00007B04 7000                       		moveq	#0,d0
00007B06 1023                       		move.b	-(a3),d0
00007B08 5240                       		addq.w	#1,d0
00007B0A C0C5                       		mulu.w	d5,d0
00007B0C C0C4                       		mulu.w	d4,d0
00007B0E 4840                       		swap	d0
00007B10 D069 003C                  		add.w	$3C(a1),d0
00007B14 3340 000C                  		move.w	d0,$C(a1)
00007B18 51CA FFDC                  		dbf	d2,loc_76A4
00007B1C                            
00007B1C                            locret_76CA:
00007B1C 4E75                       		rts	
00007B1E                            ; End of function Obj11_Bend
00007B1E                            
00007B1E                            ; ===========================================================================
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            ; GHZ bridge-bending data
00007B1E                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007C2E                            		even
00007C2E                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007D2E                            		even
00007D2E                            
00007D2E                            ; ===========================================================================
00007D2E                            
00007D2E                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007D2E 3028 0008                  		move.w	8(a0),d0
00007D32 0240 FF80                  		andi.w	#$FF80,d0
00007D36 3238 F700                  		move.w	($FFFFF700).w,d1
00007D3A 0441 0080                  		subi.w	#$80,d1
00007D3E 0241 FF80                  		andi.w	#$FF80,d1
00007D42 9041                       		sub.w	d1,d0
00007D44 0C40 0280                  		cmpi.w	#$280,d0
00007D48 6200 0000                  		bhi.w	Obj11_DelAll
00007D4C 4E75                       		rts	
00007D4E                            ; ===========================================================================
00007D4E                            
00007D4E                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007D4E 7400                       		moveq	#0,d2
00007D50 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007D54 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007D56 5302                       		subq.b	#1,d2		; subtract 1
00007D58 6500                       		bcs.s	Obj11_Delete
00007D5A                            
00007D5A                            Obj11_DelLoop:
00007D5A 7000                       		moveq	#0,d0
00007D5C 101A                       		move.b	(a2)+,d0
00007D5E ED48                       		lsl.w	#6,d0
00007D60 0680 00FF D000             		addi.l	#$FFD000,d0
00007D66 2240                       		movea.l	d0,a1
00007D68 B048                       		cmp.w	a0,d0
00007D6A 6700                       		beq.s	loc_791E
00007D6C 6100 0000                  		bsr.w	DeleteObject2
00007D70                            
00007D70                            loc_791E:
00007D70 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007D74                            
00007D74                            Obj11_Delete:
00007D74 6100 0000                  		bsr.w	DeleteObject
00007D78 4E75                       		rts	
00007D7A                            ; ===========================================================================
00007D7A                            
00007D7A                            Obj11_Delete2:				; XREF: Obj11_Index
00007D7A 6100 0000                  		bsr.w	DeleteObject
00007D7E 4E75                       		rts	
00007D80                            ; ===========================================================================
00007D80                            
00007D80                            Obj11_Display2:				; XREF: Obj11_Index
00007D80 6100 0000                  		bsr.w	DisplaySprite
00007D84 4E75                       		rts	
00007D86                            ; ===========================================================================
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Sprite mappings - GHZ	bridge
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            Map_obj11:
00007D86                            	include "_maps\obj11.asm"
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Sprite mappings - GHZ	bridge
00007D86                            ; ---------------------------------------------------------------------------
00007D86 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007D8A 0000                       		dc.w byte_794B-Map_obj11
00007D8C 01                         byte_793A:	dc.b 1
00007D8D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007D92 02                         byte_7940:	dc.b 2
00007D93 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007D98 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007D9D 01                         byte_794B:	dc.b 1
00007D9E FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007DA4 00                         		even
00007DA4 00                         		even
00007DA4                            
00007DA4                            ; ===========================================================================
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007DA4                            ;	    - spiked ball on a chain (SBZ)
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            
00007DA4                            Obj15:					; XREF: Obj_Index
00007DA4 7000                       		moveq	#0,d0
00007DA6 1028 0024                  		move.b	$24(a0),d0
00007DAA 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007DAE 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007DB2                            ; ===========================================================================
00007DB2 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007DB6 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007DBA 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007DBE 0000                       		dc.w Obj15_Action-Obj15_Index
00007DC0                            ; ===========================================================================
00007DC0                            
00007DC0                            Obj15_Main:				; XREF: Obj15_Index
00007DC0 5428 0024                  		addq.b	#2,$24(a0)
00007DC4 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007DCC 317C 4380 0002             		move.w	#$4380,2(a0)
00007DD2 117C 0004 0001             		move.b	#4,1(a0)
00007DD8 117C 0003 0018             		move.b	#3,$18(a0)
00007DDE 117C 0018 0019             		move.b	#$18,$19(a0)
00007DE4 117C 0008 0016             		move.b	#8,$16(a0)
00007DEA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007DF0 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007DF6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007DFC 6600                       		bne.s	Obj15_NotSLZ
00007DFE 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007E06 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007E0C 117C 0020 0019             		move.b	#$20,$19(a0)
00007E12 117C 0010 0016             		move.b	#$10,$16(a0)
00007E18 117C 0099 0020             		move.b	#$99,$20(a0)
00007E1E                            
00007E1E                            Obj15_NotSLZ:
00007E1E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007E24 6600                       		bne.s	Obj15_SetLength
00007E26 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007E2E 317C 0391 0002             		move.w	#$391,2(a0)
00007E34 117C 0018 0019             		move.b	#$18,$19(a0)
00007E3A 117C 0018 0016             		move.b	#$18,$16(a0)
00007E40 117C 0086 0020             		move.b	#$86,$20(a0)
00007E46 117C 000C 0024             		move.b	#$C,$24(a0)
00007E4C                            
00007E4C                            Obj15_SetLength:
00007E4C 1810                       		move.b	0(a0),d4
00007E4E 7200                       		moveq	#0,d1
00007E50 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007E54 1212                       		move.b	(a2),d1		; move a2 to d1
00007E56 3F01                       		move.w	d1,-(sp)
00007E58 0241 000F                  		andi.w	#$F,d1
00007E5C 14FC 0000                  		move.b	#0,(a2)+
00007E60 3601                       		move.w	d1,d3
00007E62 E94B                       		lsl.w	#4,d3
00007E64 5003                       		addq.b	#8,d3
00007E66 1143 003C                  		move.b	d3,$3C(a0)
00007E6A 5103                       		subq.b	#8,d3
00007E6C 4A28 001A                  		tst.b	$1A(a0)
00007E70 6700                       		beq.s	Obj15_MakeChain
00007E72 5003                       		addq.b	#8,d3
00007E74 5341                       		subq.w	#1,d1
00007E76                            
00007E76                            Obj15_MakeChain:
00007E76 6100 0000                  		bsr.w	SingleObjLoad
00007E7A 6600                       		bne.s	loc_7A92
00007E7C 5228 0028                  		addq.b	#1,$28(a0)
00007E80 3A09                       		move.w	a1,d5
00007E82 0445 D000                  		subi.w	#-$3000,d5
00007E86 EC4D                       		lsr.w	#6,d5
00007E88 0245 007F                  		andi.w	#$7F,d5
00007E8C 14C5                       		move.b	d5,(a2)+
00007E8E 137C 000A 0024             		move.b	#$A,$24(a1)
00007E94 1284                       		move.b	d4,0(a1)	; load swinging	object
00007E96 2368 0004 0004             		move.l	4(a0),4(a1)
00007E9C 3368 0002 0002             		move.w	2(a0),2(a1)
00007EA2 08A9 0006 0002             		bclr	#6,2(a1)
00007EA8 137C 0004 0001             		move.b	#4,1(a1)
00007EAE 137C 0004 0018             		move.b	#4,$18(a1)
00007EB4 137C 0008 0019             		move.b	#8,$19(a1)
00007EBA 137C 0001 001A             		move.b	#1,$1A(a1)
00007EC0 1343 003C                  		move.b	d3,$3C(a1)
00007EC4 0403 0010                  		subi.b	#$10,d3
00007EC8 6400                       		bcc.s	loc_7A8E
00007ECA 137C 0002 001A             		move.b	#2,$1A(a1)
00007ED0 137C 0003 0018             		move.b	#3,$18(a1)
00007ED6 08E9 0006 0002             		bset	#6,2(a1)
00007EDC                            
00007EDC                            loc_7A8E:
00007EDC 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007EE0                            
00007EE0                            loc_7A92:
00007EE0 3A08                       		move.w	a0,d5
00007EE2 0445 D000                  		subi.w	#-$3000,d5
00007EE6 EC4D                       		lsr.w	#6,d5
00007EE8 0245 007F                  		andi.w	#$7F,d5
00007EEC 14C5                       		move.b	d5,(a2)+
00007EEE 317C 4080 0026             		move.w	#$4080,$26(a0)
00007EF4 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007EFA 321F                       		move.w	(sp)+,d1
00007EFC 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007F00 6700                       		beq.s	loc_7AD4	; if not, branch
00007F02 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007F0A 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007F10 117C 0001 001A             		move.b	#1,$1A(a0)
00007F16 117C 0002 0018             		move.b	#2,$18(a0)
00007F1C 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007F22                            
00007F22                            loc_7AD4:
00007F22 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007F28 6700                       		beq.s	Obj15_Action	; if yes, branch
00007F2A                            
00007F2A                            Obj15_SetSolid:				; XREF: Obj15_Index
00007F2A 7200                       		moveq	#0,d1
00007F2C 1228 0019                  		move.b	$19(a0),d1
00007F30 7600                       		moveq	#0,d3
00007F32 1628 0016                  		move.b	$16(a0),d3
00007F36 6100 FA76                  		bsr.w	Obj15_Solid
00007F3A                            
00007F3A                            Obj15_Action:				; XREF: Obj15_Index
00007F3A 6100 0000                  		bsr.w	Obj15_Move
00007F3E 6100 0000                  		bsr.w	DisplaySprite
00007F42 6000 0000                  		bra.w	Obj15_ChkDel
00007F46                            ; ===========================================================================
00007F46                            
00007F46                            Obj15_Action2:				; XREF: Obj15_Index
00007F46 7200                       		moveq	#0,d1
00007F48 1228 0019                  		move.b	$19(a0),d1
00007F4C 6100 FAC4                  		bsr.w	ExitPlatform
00007F50 3F28 0008                  		move.w	8(a0),-(sp)
00007F54 6100 0000                  		bsr.w	Obj15_Move
00007F58 341F                       		move.w	(sp)+,d2
00007F5A 7600                       		moveq	#0,d3
00007F5C 1628 0016                  		move.b	$16(a0),d3
00007F60 5203                       		addq.b	#1,d3
00007F62 6100 0000                  		bsr.w	MvSonicOnPtfm
00007F66 6100 0000                  		bsr.w	DisplaySprite
00007F6A 6000 0000                  		bra.w	Obj15_ChkDel
00007F6E                            
00007F6E 4E75                       		rts
00007F70                            
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            ; Subroutine to	change Sonic's position with a platform
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            
00007F70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F70                            
00007F70                            
00007F70                            MvSonicOnPtfm:
00007F70 43F8 D000                  		lea	($FFFFD000).w,a1
00007F74 3028 000C                  		move.w	$C(a0),d0
00007F78 9043                       		sub.w	d3,d0
00007F7A 6000                       		bra.s	MvSonic2
00007F7C                            ; End of function MvSonicOnPtfm
00007F7C                            
00007F7C                            ; ---------------------------------------------------------------------------
00007F7C                            ; Subroutine to	change Sonic's position with a platform
00007F7C                            ; ---------------------------------------------------------------------------
00007F7C                            
00007F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F7C                            
00007F7C                            
00007F7C                            MvSonicOnPtfm2:
00007F7C 43F8 D000                  		lea	($FFFFD000).w,a1
00007F80 3028 000C                  		move.w	$C(a0),d0
00007F84 0440 0009                  		subi.w	#9,d0
00007F88                            
00007F88                            MvSonic2:
00007F88 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F8C 6B00                       		bmi.s	locret_7B62
00007F8E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007F94 6400                       		bcc.s	locret_7B62
00007F96 4A78 FE08                  		tst.w	($FFFFFE08).w
00007F9A 6600                       		bne.s	locret_7B62
00007F9C 7200                       		moveq	#0,d1
00007F9E 1229 0016                  		move.b	$16(a1),d1
00007FA2 9041                       		sub.w	d1,d0
00007FA4 3340 000C                  		move.w	d0,$C(a1)
00007FA8 9468 0008                  		sub.w	8(a0),d2
00007FAC 9569 0008                  		sub.w	d2,8(a1)
00007FB0                            
00007FB0                            locret_7B62:
00007FB0 4E75                       		rts	
00007FB2                            ; End of function MvSonicOnPtfm2
00007FB2                            
00007FB2                            
00007FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FB2                            
00007FB2                            
00007FB2                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007FB2 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007FB6 323C 0080                  		move.w	#$80,d1
00007FBA 0828 0000 0022             		btst	#0,$22(a0)
00007FC0 6700                       		beq.s	loc_7B78
00007FC2 4440                       		neg.w	d0
00007FC4 D041                       		add.w	d1,d0
00007FC6                            
00007FC6                            loc_7B78:
00007FC6 6000                       		bra.s	Obj15_Move2
00007FC8                            ; End of function Obj15_Move
00007FC8                            
00007FC8                            
00007FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FC8                            
00007FC8                            
00007FC8                            Obj48_Move:				; XREF: Obj48_Display2
00007FC8 4A28 003D                  		tst.b	$3D(a0)
00007FCC 6600                       		bne.s	loc_7B9C
00007FCE 3028 003E                  		move.w	$3E(a0),d0
00007FD2 5040                       		addq.w	#8,d0
00007FD4 3140 003E                  		move.w	d0,$3E(a0)
00007FD8 D168 0026                  		add.w	d0,$26(a0)
00007FDC 0C40 0200                  		cmpi.w	#$200,d0
00007FE0 6600                       		bne.s	loc_7BB6
00007FE2 117C 0001 003D             		move.b	#1,$3D(a0)
00007FE8 6000                       		bra.s	loc_7BB6
00007FEA                            ; ===========================================================================
00007FEA                            
00007FEA                            loc_7B9C:
00007FEA 3028 003E                  		move.w	$3E(a0),d0
00007FEE 5140                       		subq.w	#8,d0
00007FF0 3140 003E                  		move.w	d0,$3E(a0)
00007FF4 D168 0026                  		add.w	d0,$26(a0)
00007FF8 0C40 FE00                  		cmpi.w	#-$200,d0
00007FFC 6600                       		bne.s	loc_7BB6
00007FFE 117C 0000 003D             		move.b	#0,$3D(a0)
00008004                            
00008004                            loc_7BB6:
00008004 1028 0026                  		move.b	$26(a0),d0
00008008                            ; End of function Obj48_Move
00008008                            
00008008                            
00008008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008008                            
00008008                            
00008008                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008008 6100 AC18                  		bsr.w	CalcSine
0000800C 3428 0038                  		move.w	$38(a0),d2
00008010 3628 003A                  		move.w	$3A(a0),d3
00008014 45E8 0028                  		lea	$28(a0),a2
00008018 7C00                       		moveq	#0,d6
0000801A 1C1A                       		move.b	(a2)+,d6
0000801C                            
0000801C                            loc_7BCE:
0000801C 7800                       		moveq	#0,d4
0000801E 181A                       		move.b	(a2)+,d4
00008020 ED4C                       		lsl.w	#6,d4
00008022 0684 00FF D000             		addi.l	#$FFD000,d4
00008028 2244                       		movea.l	d4,a1
0000802A 7800                       		moveq	#0,d4
0000802C 1829 003C                  		move.b	$3C(a1),d4
00008030 2A04                       		move.l	d4,d5
00008032 C9C0                       		muls.w	d0,d4
00008034 E084                       		asr.l	#8,d4
00008036 CBC1                       		muls.w	d1,d5
00008038 E085                       		asr.l	#8,d5
0000803A D842                       		add.w	d2,d4
0000803C DA43                       		add.w	d3,d5
0000803E 3344 000C                  		move.w	d4,$C(a1)
00008042 3345 0008                  		move.w	d5,8(a1)
00008046 51CE FFD4                  		dbf	d6,loc_7BCE
0000804A 4E75                       		rts	
0000804C                            ; End of function Obj15_Move2
0000804C                            
0000804C                            ; ===========================================================================
0000804C                            
0000804C                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000804C 3028 003A                  		move.w	$3A(a0),d0
00008050 0240 FF80                  		andi.w	#$FF80,d0
00008054 3238 F700                  		move.w	($FFFFF700).w,d1
00008058 0441 0080                  		subi.w	#$80,d1
0000805C 0241 FF80                  		andi.w	#$FF80,d1
00008060 9041                       		sub.w	d1,d0
00008062 0C40 0280                  		cmpi.w	#$280,d0
00008066 6200 0000                  		bhi.w	Obj15_DelAll
0000806A 4E75                       		rts	
0000806C                            ; ===========================================================================
0000806C                            
0000806C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000806C 7400                       		moveq	#0,d2
0000806E 45E8 0028                  		lea	$28(a0),a2
00008072 141A                       		move.b	(a2)+,d2
00008074                            
00008074                            Obj15_DelLoop:
00008074 7000                       		moveq	#0,d0
00008076 101A                       		move.b	(a2)+,d0
00008078 ED48                       		lsl.w	#6,d0
0000807A 0680 00FF D000             		addi.l	#$FFD000,d0
00008080 2240                       		movea.l	d0,a1
00008082 6100 0000                  		bsr.w	DeleteObject2
00008086 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000808A 4E75                       		rts	
0000808C                            ; ===========================================================================
0000808C                            
0000808C                            Obj15_Delete:				; XREF: Obj15_Index
0000808C 6100 0000                  		bsr.w	DeleteObject
00008090 4E75                       		rts	
00008092                            ; ===========================================================================
00008092                            
00008092                            Obj15_Display:				; XREF: Obj15_Index
00008092 6000 0000                  		bra.w	DisplaySprite
00008096                            ; ===========================================================================
00008096                            ; ---------------------------------------------------------------------------
00008096                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008096                            ; ---------------------------------------------------------------------------
00008096                            Map_obj15:
00008096                            	include "_maps\obj15ghz.asm"
00008096                            ; ---------------------------------------------------------------------------
00008096                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008096                            ; ---------------------------------------------------------------------------
00008096 0000                       		dc.w byte_7C4E-Map_obj15
00008098 0000                       		dc.w byte_7C59-Map_obj15
0000809A 0000                       		dc.w byte_7C5F-Map_obj15
0000809C 02                         byte_7C4E:	dc.b 2
0000809D F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000080A2 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000080A7 01                         byte_7C59:	dc.b 1
000080A8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000080AD 01                         byte_7C5F:	dc.b 1
000080AE F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000080B4 00                         		even
000080B4 00                         		even
000080B4                            
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            ; Sprite mappings - SLZ	swinging platforms
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            Map_obj15a:
000080B4                            	include "_maps\obj15slz.asm"
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            ; Sprite mappings - SLZ	swinging platforms
000080B4                            ; ---------------------------------------------------------------------------
000080B4 0000                       		dc.w byte_7C6C-Map_obj15a
000080B6 0000                       		dc.w byte_7C95-Map_obj15a
000080B8 0000                       		dc.w byte_7C9B-Map_obj15a
000080BA 08                         byte_7C6C:	dc.b 8
000080BB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000080C0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000080C5 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000080CA F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000080CF 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000080D4 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000080D9 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000080DE 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000080E3 01                         byte_7C95:	dc.b 1
000080E4 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000080E9 01                         byte_7C9B:	dc.b 1
000080EA F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000080F0 00                         		even
000080F0 00                         		even
000080F0                            
000080F0                            ; ===========================================================================
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            ; Object 17 - helix of spikes on a pole	(GHZ)
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            
000080F0                            Obj17:					; XREF: Obj_Index
000080F0 7000                       		moveq	#0,d0
000080F2 1028 0024                  		move.b	$24(a0),d0
000080F6 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000080FA 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000080FE                            ; ===========================================================================
000080FE 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008100 0000                       		dc.w Obj17_Action-Obj17_Index
00008102 0000                       		dc.w Obj17_Action-Obj17_Index
00008104 0000                       		dc.w Obj17_Delete-Obj17_Index
00008106 0000                       		dc.w Obj17_Display-Obj17_Index
00008108                            ; ===========================================================================
00008108                            
00008108                            Obj17_Main:				; XREF: Obj17_Index
00008108 5428 0024                  		addq.b	#2,$24(a0)
0000810C 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008114 317C 4398 0002             		move.w	#$4398,2(a0)
0000811A 117C 0007 0022             		move.b	#7,$22(a0)
00008120 117C 0004 0001             		move.b	#4,1(a0)
00008126 117C 0003 0018             		move.b	#3,$18(a0)
0000812C 117C 0008 0019             		move.b	#8,$19(a0)
00008132 3428 000C                  		move.w	$C(a0),d2
00008136 3628 0008                  		move.w	8(a0),d3
0000813A 1810                       		move.b	0(a0),d4
0000813C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008140 7200                       		moveq	#0,d1
00008142 1212                       		move.b	(a2),d1		; move a2 to d1
00008144 14FC 0000                  		move.b	#0,(a2)+
00008148 3001                       		move.w	d1,d0
0000814A E248                       		lsr.w	#1,d0
0000814C E948                       		lsl.w	#4,d0
0000814E 9640                       		sub.w	d0,d3
00008150 5501                       		subq.b	#2,d1
00008152 6500                       		bcs.s	Obj17_Action
00008154 7C00                       		moveq	#0,d6
00008156                            
00008156                            Obj17_MakeHelix:
00008156 6100 0000                  		bsr.w	SingleObjLoad
0000815A 6600                       		bne.s	Obj17_Action
0000815C 5228 0028                  		addq.b	#1,$28(a0)
00008160 3A09                       		move.w	a1,d5
00008162 0445 D000                  		subi.w	#$D000,d5
00008166 EC4D                       		lsr.w	#6,d5
00008168 0245 007F                  		andi.w	#$7F,d5
0000816C 14C5                       		move.b	d5,(a2)+
0000816E 137C 0008 0024             		move.b	#8,$24(a1)
00008174 1284                       		move.b	d4,0(a1)
00008176 3342 000C                  		move.w	d2,$C(a1)
0000817A 3343 0008                  		move.w	d3,8(a1)
0000817E 2368 0004 0004             		move.l	4(a0),4(a1)
00008184 337C 4398 0002             		move.w	#$4398,2(a1)
0000818A 137C 0004 0001             		move.b	#4,1(a1)
00008190 137C 0003 0018             		move.b	#3,$18(a1)
00008196 137C 0008 0019             		move.b	#8,$19(a1)
0000819C 1346 003E                  		move.b	d6,$3E(a1)
000081A0 5206                       		addq.b	#1,d6
000081A2 0206 0007                  		andi.b	#7,d6
000081A6 0643 0010                  		addi.w	#$10,d3
000081AA B668 0008                  		cmp.w	8(a0),d3
000081AE 6600                       		bne.s	loc_7D78
000081B0 1146 003E                  		move.b	d6,$3E(a0)
000081B4 5206                       		addq.b	#1,d6
000081B6 0206 0007                  		andi.b	#7,d6
000081BA 0643 0010                  		addi.w	#$10,d3
000081BE 5228 0028                  		addq.b	#1,$28(a0)
000081C2                            
000081C2                            loc_7D78:
000081C2 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000081C6                            
000081C6                            Obj17_Action:				; XREF: Obj17_Index
000081C6 6100 0000                  		bsr.w	Obj17_RotateSpikes
000081CA 6100 0000                  		bsr.w	DisplaySprite
000081CE 6000 0000                  		bra.w	Obj17_ChkDel
000081D2                            
000081D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081D2                            
000081D2                            
000081D2                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000081D2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000081D6 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000081DC D028 003E                  		add.b	$3E(a0),d0
000081E0 0200 0007                  		andi.b	#7,d0
000081E4 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000081E8 6600                       		bne.s	locret_7DA6
000081EA 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000081F0                            
000081F0                            locret_7DA6:
000081F0 4E75                       		rts	
000081F2                            ; End of function Obj17_RotateSpikes
000081F2                            
000081F2                            ; ===========================================================================
000081F2                            
000081F2                            Obj17_ChkDel:				; XREF: Obj17_Action
000081F2 3028 0008                  		move.w	8(a0),d0
000081F6 0240 FF80                  		andi.w	#$FF80,d0
000081FA 3238 F700                  		move.w	($FFFFF700).w,d1
000081FE 0441 0080                  		subi.w	#$80,d1
00008202 0241 FF80                  		andi.w	#$FF80,d1
00008206 9041                       		sub.w	d1,d0
00008208 0C40 0280                  		cmpi.w	#$280,d0
0000820C 6200 0000                  		bhi.w	Obj17_DelAll
00008210 4E75                       		rts	
00008212                            ; ===========================================================================
00008212                            
00008212                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008212 7400                       		moveq	#0,d2
00008214 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008218 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000821A 5502                       		subq.b	#2,d2
0000821C 6500                       		bcs.s	Obj17_Delete
0000821E                            
0000821E                            Obj17_DelLoop:
0000821E 7000                       		moveq	#0,d0
00008220 101A                       		move.b	(a2)+,d0
00008222 ED48                       		lsl.w	#6,d0
00008224 0680 00FF D000             		addi.l	#$FFD000,d0
0000822A 2240                       		movea.l	d0,a1
0000822C 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008230 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008234                            
00008234                            Obj17_Delete:				; XREF: Obj17_Index
00008234 6100 0000                  		bsr.w	DeleteObject
00008238 4E75                       		rts	
0000823A                            ; ===========================================================================
0000823A                            
0000823A                            Obj17_Display:				; XREF: Obj17_Index
0000823A 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000823E 6000 0000                  		bra.w	DisplaySprite
00008242                            ; ===========================================================================
00008242                            ; ---------------------------------------------------------------------------
00008242                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008242                            ; ---------------------------------------------------------------------------
00008242                            Map_obj17:
00008242                            	include "_maps\obj17.asm"
00008242                            ; ---------------------------------------------------------------------------
00008242                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008242                            ; ---------------------------------------------------------------------------
00008242 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008246 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000824A 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000824E 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008252 01                         byte_7E08:	dc.b 1
00008253 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008258 01                         byte_7E0E:	dc.b 1
00008259 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000825E 01                         byte_7E14:	dc.b 1
0000825F F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008264 01                         byte_7E1A:	dc.b 1
00008265 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000826A 01                         byte_7E20:	dc.b 1
0000826B 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008270 01                         byte_7E26:	dc.b 1
00008271 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008276 01                         byte_7E2C:	dc.b 1
00008277 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000827C                            		even
0000827C                            		even
0000827C                            
0000827C                            ; ===========================================================================
0000827C                            ; ---------------------------------------------------------------------------
0000827C                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000827C                            ; ---------------------------------------------------------------------------
0000827C                            
0000827C                            Obj18:					; XREF: Obj_Index
0000827C 7000                       		moveq	#0,d0
0000827E 1028 0024                  		move.b	$24(a0),d0
00008282 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008286 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000828A                            ; ===========================================================================
0000828A 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000828C 0000                       		dc.w Obj18_Solid-Obj18_Index
0000828E 0000                       		dc.w Obj18_Action2-Obj18_Index
00008290 0000                       		dc.w Obj18_Delete-Obj18_Index
00008292 0000                       		dc.w Obj18_Action-Obj18_Index
00008294                            ; ===========================================================================
00008294                            
00008294                            Obj18_Main:				; XREF: Obj18_Index
00008294 5428 0024                  		addq.b	#2,$24(a0)
00008298 317C 4000 0002             		move.w	#$4000,2(a0)
0000829E 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000082A6 117C 0020 0019             		move.b	#$20,$19(a0)
000082AC 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000082B2 6600                       		bne.s	Obj18_NotSYZ
000082B4 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000082BC 117C 0020 0019             		move.b	#$20,$19(a0)
000082C2                            
000082C2                            Obj18_NotSYZ:
000082C2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000082C8 6600                       		bne.s	Obj18_NotSLZ
000082CA 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000082D2 117C 0020 0019             		move.b	#$20,$19(a0)
000082D8 317C 4000 0002             		move.w	#$4000,2(a0)
000082DE 117C 0003 0028             		move.b	#3,$28(a0)
000082E4                            
000082E4                            Obj18_NotSLZ:
000082E4 117C 0004 0001             		move.b	#4,1(a0)
000082EA 117C 0004 0018             		move.b	#4,$18(a0)
000082F0 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000082F6 3168 000C 0034             		move.w	$C(a0),$34(a0)
000082FC 3168 0008 0032             		move.w	8(a0),$32(a0)
00008302 317C 0080 0026             		move.w	#$80,$26(a0)
00008308 7200                       		moveq	#0,d1
0000830A 1028 0028                  		move.b	$28(a0),d0
0000830E 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008312 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008314 5201                       		addq.b	#1,d1		; use frame #1
00008316 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000831C                            
0000831C                            Obj18_SetFrame:
0000831C 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008320                            
00008320                            Obj18_Solid:				; XREF: Obj18_Index
00008320 4A28 0038                  		tst.b	$38(a0)
00008324 6700                       		beq.s	loc_7EE0
00008326 5928 0038                  		subq.b	#4,$38(a0)
0000832A                            
0000832A                            loc_7EE0:
0000832A 7200                       		moveq	#0,d1
0000832C 1228 0019                  		move.b	$19(a0),d1
00008330 6100 F56C                  		bsr.w	PlatformObject
00008334                            
00008334                            Obj18_Action:				; XREF: Obj18_Index
00008334 6100 0000                  		bsr.w	Obj18_Move
00008338 6100 0000                  		bsr.w	Obj18_Nudge
0000833C 6100 0000                  		bsr.w	DisplaySprite
00008340 6000 0000                  		bra.w	Obj18_ChkDel
00008344                            ; ===========================================================================
00008344                            
00008344                            Obj18_Action2:				; XREF: Obj18_Index
00008344 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000834A 6700                       		beq.s	loc_7F06
0000834C 5828 0038                  		addq.b	#4,$38(a0)
00008350                            
00008350                            loc_7F06:
00008350 7200                       		moveq	#0,d1
00008352 1228 0019                  		move.b	$19(a0),d1
00008356 6100 F6BA                  		bsr.w	ExitPlatform
0000835A 3F28 0008                  		move.w	8(a0),-(sp)
0000835E 6100 0000                  		bsr.w	Obj18_Move
00008362 6100 0000                  		bsr.w	Obj18_Nudge
00008366 341F                       		move.w	(sp)+,d2
00008368 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000836C 6100 0000                  		bsr.w	DisplaySprite
00008370 6000 0000                  		bra.w	Obj18_ChkDel
00008374                            
00008374 4E75                       		rts
00008376                            
00008376                            ; ---------------------------------------------------------------------------
00008376                            ; Subroutine to	move platform slightly when you	stand on it
00008376                            ; ---------------------------------------------------------------------------
00008376                            
00008376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008376                            
00008376                            
00008376                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008376 1028 0038                  		move.b	$38(a0),d0
0000837A 6100 A8A6                  		bsr.w	CalcSine
0000837E 323C 0400                  		move.w	#$400,d1
00008382 C1C1                       		muls.w	d1,d0
00008384 4840                       		swap	d0
00008386 D068 002C                  		add.w	$2C(a0),d0
0000838A 3140 000C                  		move.w	d0,$C(a0)
0000838E 4E75                       		rts	
00008390                            ; End of function Obj18_Nudge
00008390                            
00008390                            ; ---------------------------------------------------------------------------
00008390                            ; Subroutine to	move platforms
00008390                            ; ---------------------------------------------------------------------------
00008390                            
00008390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008390                            
00008390                            
00008390                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008390 7000                       		moveq	#0,d0
00008392 1028 0028                  		move.b	$28(a0),d0
00008396 0240 000F                  		andi.w	#$F,d0
0000839A D040                       		add.w	d0,d0
0000839C 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000083A0 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000083A4                            ; End of function Obj18_Move
000083A4                            
000083A4                            ; ===========================================================================
000083A4 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000083A8 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000083AC 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000083B0 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000083B4 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000083B8 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000083BC 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000083BE                            ; ===========================================================================
000083BE                            
000083BE                            Obj18_Type00:
000083BE 4E75                       		rts			; platform 00 doesn't move
000083C0                            ; ===========================================================================
000083C0                            
000083C0                            Obj18_Type05:
000083C0 3028 0032                  		move.w	$32(a0),d0
000083C4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083C8 4401                       		neg.b	d1		; reverse platform-motion
000083CA 0601 0040                  		addi.b	#$40,d1
000083CE 6000                       		bra.s	Obj18_01_Move
000083D0                            ; ===========================================================================
000083D0                            
000083D0                            Obj18_Type01:
000083D0 3028 0032                  		move.w	$32(a0),d0
000083D4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083D8 0401 0040                  		subi.b	#$40,d1
000083DC                            
000083DC                            Obj18_01_Move:
000083DC 4881                       		ext.w	d1
000083DE D041                       		add.w	d1,d0
000083E0 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000083E4 6000 0000                  		bra.w	Obj18_ChgMotion
000083E8                            ; ===========================================================================
000083E8                            
000083E8                            Obj18_Type0C:
000083E8 3028 0034                  		move.w	$34(a0),d0
000083EC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000083F0 4401                       		neg.b	d1		; reverse platform-motion
000083F2 0601 0030                  		addi.b	#$30,d1
000083F6 6000                       		bra.s	Obj18_02_Move
000083F8                            ; ===========================================================================
000083F8                            
000083F8                            Obj18_Type0B:
000083F8 3028 0034                  		move.w	$34(a0),d0
000083FC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008400 0401 0030                  		subi.b	#$30,d1
00008404 6000                       		bra.s	Obj18_02_Move
00008406                            ; ===========================================================================
00008406                            
00008406                            Obj18_Type06:
00008406 3028 0034                  		move.w	$34(a0),d0
0000840A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000840E 4401                       		neg.b	d1		; reverse platform-motion
00008410 0601 0040                  		addi.b	#$40,d1
00008414 6000                       		bra.s	Obj18_02_Move
00008416                            ; ===========================================================================
00008416                            
00008416                            Obj18_Type02:
00008416 3028 0034                  		move.w	$34(a0),d0
0000841A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000841E 0401 0040                  		subi.b	#$40,d1
00008422                            
00008422                            Obj18_02_Move:
00008422 4881                       		ext.w	d1
00008424 D041                       		add.w	d1,d0
00008426 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000842A 6000 0000                  		bra.w	Obj18_ChgMotion
0000842E                            ; ===========================================================================
0000842E                            
0000842E                            Obj18_Type03:
0000842E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008432 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008434 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000843A 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000843C 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008442                            
00008442                            Obj18_03_NoMove:
00008442 4E75                       		rts	
00008444                            ; ===========================================================================
00008444                            
00008444                            Obj18_03_Wait:
00008444 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008448 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000844A 317C 0020 003A             		move.w	#32,$3A(a0)
00008450 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008454 4E75                       		rts	
00008456                            ; ===========================================================================
00008456                            
00008456                            Obj18_Type04:
00008456 4A68 003A                  		tst.w	$3A(a0)
0000845A 6700                       		beq.s	loc_8048
0000845C 5368 003A                  		subq.w	#1,$3A(a0)
00008460 6600                       		bne.s	loc_8048
00008462 0828 0003 0022             		btst	#3,$22(a0)
00008468 6700                       		beq.s	loc_8042
0000846A 08E9 0001 0022             		bset	#1,$22(a1)
00008470 08A9 0003 0022             		bclr	#3,$22(a1)
00008476 137C 0002 0024             		move.b	#2,$24(a1)
0000847C 08A8 0003 0022             		bclr	#3,$22(a0)
00008482 4228 0025                  		clr.b	$25(a0)
00008486 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000848C                            
0000848C                            loc_8042:
0000848C 117C 0008 0024             		move.b	#8,$24(a0)
00008492                            
00008492                            loc_8048:
00008492 2628 002C                  		move.l	$2C(a0),d3
00008496 3028 0012                  		move.w	$12(a0),d0
0000849A 48C0                       		ext.l	d0
0000849C E180                       		asl.l	#8,d0
0000849E D680                       		add.l	d0,d3
000084A0 2143 002C                  		move.l	d3,$2C(a0)
000084A4 0668 0038 0012             		addi.w	#$38,$12(a0)
000084AA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000084AE 0640 00E0                  		addi.w	#$E0,d0
000084B2 B068 002C                  		cmp.w	$2C(a0),d0
000084B6 6400                       		bcc.s	locret_8074
000084B8 117C 0006 0024             		move.b	#6,$24(a0)
000084BE                            
000084BE                            locret_8074:
000084BE 4E75                       		rts	
000084C0                            ; ===========================================================================
000084C0                            
000084C0                            Obj18_Type07:
000084C0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000084C4 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000084C6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000084CA 7000                       		moveq	#0,d0
000084CC 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000084D0 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000084D2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000084D6 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000084D8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000084DE                            
000084DE                            Obj18_07_NoMove:
000084DE 4E75                       		rts	
000084E0                            ; ===========================================================================
000084E0                            
000084E0                            Obj18_07_Wait:
000084E0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000084E4 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000084E6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000084EA 4E75                       		rts	
000084EC                            ; ===========================================================================
000084EC                            
000084EC                            Obj18_Type08:
000084EC 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000084F0 3028 0034                  		move.w	$34(a0),d0
000084F4 0440 0200                  		subi.w	#$200,d0
000084F8 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000084FC 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000084FE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008502                            
00008502                            Obj18_08_NoStop:
00008502 4E75                       		rts	
00008504                            ; ===========================================================================
00008504                            
00008504                            Obj18_Type0A:
00008504 3028 0034                  		move.w	$34(a0),d0
00008508 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000850C 0401 0040                  		subi.b	#$40,d1
00008510 4881                       		ext.w	d1
00008512 E241                       		asr.w	#1,d1
00008514 D041                       		add.w	d1,d0
00008516 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000851A                            
0000851A                            Obj18_ChgMotion:
0000851A 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008520 4E75                       		rts	
00008522                            ; ===========================================================================
00008522                            
00008522                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008522 3028 0032                  		move.w	$32(a0),d0
00008526 0240 FF80                  		andi.w	#$FF80,d0
0000852A 3238 F700                  		move.w	($FFFFF700).w,d1
0000852E 0441 0080                  		subi.w	#$80,d1
00008532 0241 FF80                  		andi.w	#$FF80,d1
00008536 9041                       		sub.w	d1,d0
00008538 0C40 0280                  		cmpi.w	#$280,d0
0000853C 6200                       		bhi.s	Obj18_Delete
0000853E 4E75                       		rts	
00008540                            ; ===========================================================================
00008540                            
00008540                            Obj18_Delete:				; XREF: Obj18_Index
00008540 6000 0000                  		bra.w	DeleteObject
00008544                            ; ===========================================================================
00008544                            ; ---------------------------------------------------------------------------
00008544                            ; Sprite mappings - unused
00008544                            ; ---------------------------------------------------------------------------
00008544                            Map_obj18x:
00008544                            	include "_maps\obj18x.asm"
00008544                            ; ---------------------------------------------------------------------------
00008544                            ; Sprite mappings - unused
00008544                            ; ---------------------------------------------------------------------------
00008544 0000                       		dc.w byte_80FE-Map_obj18x
00008546 0000                       		dc.w byte_8109-Map_obj18x
00008548 02                         byte_80FE:	dc.b 2
00008549 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000854E F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008553 0A                         byte_8109:	dc.b $A
00008554 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008559 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000855E 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008563 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008568 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000856D F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008572 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008577 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000857C 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008581 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008586                            		even
00008586                            		even
00008586                            
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Sprite mappings - GHZ	platforms
00008586                            ; ---------------------------------------------------------------------------
00008586                            Map_obj18:
00008586                            	include "_maps\obj18ghz.asm"
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Sprite mappings - GHZ	platforms
00008586                            ; ---------------------------------------------------------------------------
00008586 0000                       		dc.w byte_8140-Map_obj18
00008588 0000                       		dc.w byte_8155-Map_obj18
0000858A 04                         byte_8140:	dc.b 4
0000858B F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008590 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008595 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000859A F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000859F 0A                         byte_8155:	dc.b $A
000085A0 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000085A5 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000085AA 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000085AF 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000085B4 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000085B9 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000085BE 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000085C3 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000085C8 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000085CD 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000085D2                            		even
000085D2                            		even
000085D2                            
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            ; Sprite mappings - SYZ	platforms
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            Map_obj18a:
000085D2                            	include "_maps\obj18syz.asm"
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            ; Sprite mappings - SYZ	platforms
000085D2                            ; ---------------------------------------------------------------------------
000085D2 0000                       		dc.w byte_818A-Map_obj18a
000085D4 03                         byte_818A:	dc.b 3
000085D5 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000085DA F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000085DF F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000085E4                            		even
000085E4                            		even
000085E4                            
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sprite mappings - SLZ	platforms
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            Map_obj18b:
000085E4                            	include "_maps\obj18slz.asm"
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sprite mappings - SLZ	platforms
000085E4                            ; ---------------------------------------------------------------------------
000085E4 0000                       		dc.w byte_819C-Map_obj18b
000085E6 02                         byte_819C:	dc.b 2
000085E7 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000085EC F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000085F2 00                         		even
000085F2 00                         		even
000085F2                            
000085F2                            ; ===========================================================================
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            ; Object 19 - blank
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            
000085F2                            Obj19:					; XREF: Obj_Index
000085F2 4E75                       		rts	
000085F4                            ; ===========================================================================
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            Map_obj48:
000085F4                            	include "_maps\obj48.asm"
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085F4                            ; ---------------------------------------------------------------------------
000085F4 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000085F8 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000085FC 06                         byte_81B2:	dc.b 6
000085FD F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008602 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008607 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000860C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008611 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008616 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000861B 04                         byte_81D1:	dc.b 4
0000861C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008621 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008626 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000862B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008630 04                         byte_81E6:	dc.b 4
00008631 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008636 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000863B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008640 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008645 04                         byte_81FB:	dc.b 4
00008646 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000864B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008650 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008655 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000865A                            		even
0000865A                            		even
0000865A                            
0000865A                            ; ===========================================================================
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            ; Object 1A - GHZ collapsing ledge
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            
0000865A                            Obj1A:					; XREF: Obj_Index
0000865A 7000                       		moveq	#0,d0
0000865C 1028 0024                  		move.b	$24(a0),d0
00008660 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008664 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008668                            ; ===========================================================================
00008668 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000866C 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008670 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008674                            ; ===========================================================================
00008674                            
00008674                            Obj1A_Main:				; XREF: Obj1A_Index
00008674 5428 0024                  		addq.b	#2,$24(a0)
00008678 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008680 317C 4000 0002             		move.w	#$4000,2(a0)
00008686 0028 0004 0001             		ori.b	#4,1(a0)
0000868C 117C 0004 0018             		move.b	#4,$18(a0)
00008692 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008698 117C 0064 0019             		move.b	#$64,$19(a0)
0000869E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000086A4 117C 0038 0016             		move.b	#$38,$16(a0)
000086AA 08E8 0004 0001             		bset	#4,1(a0)
000086B0                            
000086B0                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000086B0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000086B4 6700                       		beq.s	Obj1A_Slope	; if not, branch
000086B6 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000086BA 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000086BE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000086C2                            
000086C2                            Obj1A_Slope:
000086C2 323C 0030                  		move.w	#$30,d1
000086C6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086CC 6100 F2A4                  		bsr.w	SlopeObject
000086D0 6000 0000                  		bra.w	MarkObjGone
000086D4                            ; ===========================================================================
000086D4                            
000086D4                            Obj1A_Touch:				; XREF: Obj1A_Index
000086D4 4A28 0038                  		tst.b	$38(a0)
000086D8 6700 0000                  		beq.w	loc_847A
000086DC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000086E2 5328 0038                  		subq.b	#1,$38(a0)
000086E6                            
000086E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086E6                            
000086E6                            
000086E6                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000086E6 323C 0030                  		move.w	#$30,d1
000086EA 6100 F326                  		bsr.w	ExitPlatform
000086EE 323C 0030                  		move.w	#$30,d1
000086F2 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086F8 3428 0008                  		move.w	8(a0),d2
000086FC 6100 0000                  		bsr.w	SlopeObject2
00008700 6000 0000                  		bra.w	MarkObjGone
00008704                            ; End of function Obj1A_WalkOff
00008704                            
00008704                            ; ===========================================================================
00008704                            
00008704                            Obj1A_Display:				; XREF: Obj1A_Index
00008704 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008708 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000870A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000870E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008712 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008716 6000 0000                  		bra.w	DisplaySprite
0000871A                            ; ===========================================================================
0000871A                            
0000871A                            loc_82D0:				; XREF: Obj1A_Display
0000871A 5328 0038                  		subq.b	#1,$38(a0)
0000871E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008722 43F8 D000                  		lea	($FFFFD000).w,a1
00008726 0829 0003 0022             		btst	#3,$22(a1)
0000872C 6700                       		beq.s	loc_82FC
0000872E 4A28 0038                  		tst.b	$38(a0)
00008732 6600                       		bne.s	locret_8308
00008734 08A9 0003 0022             		bclr	#3,$22(a1)
0000873A 08A9 0005 0022             		bclr	#5,$22(a1)
00008740 137C 0001 001D             		move.b	#1,$1D(a1)
00008746                            
00008746                            loc_82FC:
00008746 117C 0000 003A             		move.b	#0,$3A(a0)
0000874C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008752                            
00008752                            locret_8308:
00008752 4E75                       		rts	
00008754                            ; ===========================================================================
00008754                            
00008754                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008754 6100 0000                  		bsr.w	ObjectFall
00008758 6100 0000                  		bsr.w	DisplaySprite
0000875C 4A28 0001                  		tst.b	1(a0)
00008760 6A00                       		bpl.s	Obj1A_Delete
00008762 4E75                       		rts	
00008764                            ; ===========================================================================
00008764                            
00008764                            Obj1A_Delete:				; XREF: Obj1A_Index
00008764 6100 0000                  		bsr.w	DeleteObject
00008768 4E75                       		rts	
0000876A                            ; ===========================================================================
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            
0000876A                            Obj53:					; XREF: Obj_Index
0000876A 7000                       		moveq	#0,d0
0000876C 1028 0024                  		move.b	$24(a0),d0
00008770 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008774 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008778                            ; ===========================================================================
00008778 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000877C 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008780 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008784                            ; ===========================================================================
00008784                            
00008784                            Obj53_Main:				; XREF: Obj53_Index
00008784 5428 0024                  		addq.b	#2,$24(a0)
00008788 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008790 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008796 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000879C 6600                       		bne.s	Obj53_NotSLZ
0000879E 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000087A4 5428 001A                  		addq.b	#2,$1A(a0)
000087A8                            
000087A8                            Obj53_NotSLZ:
000087A8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000087AE 6600                       		bne.s	Obj53_NotSBZ
000087B0 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000087B6                            
000087B6                            Obj53_NotSBZ:
000087B6 0028 0004 0001             		ori.b	#4,1(a0)
000087BC 117C 0004 0018             		move.b	#4,$18(a0)
000087C2 117C 0007 0038             		move.b	#7,$38(a0)
000087C8 117C 0044 0019             		move.b	#$44,$19(a0)
000087CE                            
000087CE                            Obj53_ChkTouch:				; XREF: Obj53_Index
000087CE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000087D2 6700                       		beq.s	Obj53_Solid	; if not, branch
000087D4 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000087D8 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000087DC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000087E0                            
000087E0                            Obj53_Solid:
000087E0 323C 0020                  		move.w	#$20,d1
000087E4 6100 F0B8                  		bsr.w	PlatformObject
000087E8 4A28 0028                  		tst.b	$28(a0)
000087EC 6A00                       		bpl.s	Obj53_MarkAsGone
000087EE 0829 0003 0022             		btst	#3,$22(a1)
000087F4 6700                       		beq.s	Obj53_MarkAsGone
000087F6 08A8 0000 0001             		bclr	#0,1(a0)
000087FC 3029 0008                  		move.w	8(a1),d0
00008800 9068 0008                  		sub.w	8(a0),d0
00008804 6400                       		bcc.s	Obj53_MarkAsGone
00008806 08E8 0000 0001             		bset	#0,1(a0)
0000880C                            
0000880C                            Obj53_MarkAsGone:
0000880C 6000 0000                  		bra.w	MarkObjGone
00008810                            ; ===========================================================================
00008810                            
00008810                            Obj53_Touch:				; XREF: Obj53_Index
00008810 4A28 0038                  		tst.b	$38(a0)
00008814 6700 0000                  		beq.w	loc_8458
00008818 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000881E 5328 0038                  		subq.b	#1,$38(a0)
00008822                            
00008822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008822                            
00008822                            
00008822                            Obj53_WalkOff:				; XREF: Obj53_Index
00008822 323C 0020                  		move.w	#$20,d1
00008826 6100 F1EA                  		bsr.w	ExitPlatform
0000882A 3428 0008                  		move.w	8(a0),d2
0000882E 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008832 6000 0000                  		bra.w	MarkObjGone
00008836                            ; End of function Obj53_WalkOff
00008836                            
00008836                            ; ===========================================================================
00008836                            
00008836                            Obj53_Display:				; XREF: Obj53_Index
00008836 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000883A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000883C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008840 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008844 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008848 6000 0000                  		bra.w	DisplaySprite
0000884C                            ; ===========================================================================
0000884C                            
0000884C                            loc_8402:
0000884C 5328 0038                  		subq.b	#1,$38(a0)
00008850 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008854 43F8 D000                  		lea	($FFFFD000).w,a1
00008858 0829 0003 0022             		btst	#3,$22(a1)
0000885E 6700                       		beq.s	loc_842E
00008860 4A28 0038                  		tst.b	$38(a0)
00008864 6600                       		bne.s	locret_843A
00008866 08A9 0003 0022             		bclr	#3,$22(a1)
0000886C 08A9 0005 0022             		bclr	#5,$22(a1)
00008872 137C 0001 001D             		move.b	#1,$1D(a1)
00008878                            
00008878                            loc_842E:
00008878 117C 0000 003A             		move.b	#0,$3A(a0)
0000887E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008884                            
00008884                            locret_843A:
00008884 4E75                       		rts	
00008886                            ; ===========================================================================
00008886                            
00008886                            Obj53_TimeZero:				; XREF: Obj53_Display
00008886 6100 0000                  		bsr.w	ObjectFall
0000888A 6100 0000                  		bsr.w	DisplaySprite
0000888E 4A28 0001                  		tst.b	1(a0)
00008892 6A00                       		bpl.s	Obj53_Delete
00008894 4E75                       		rts	
00008896                            ; ===========================================================================
00008896                            
00008896                            Obj53_Delete:				; XREF: Obj53_Index
00008896 6100 0000                  		bsr.w	DeleteObject
0000889A 4E75                       		rts	
0000889C                            ; ===========================================================================
0000889C                            
0000889C                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000889C 117C 0000 003A             		move.b	#0,$3A(a0)
000088A2                            
000088A2                            loc_8458:				; XREF: Obj53_Touch
000088A2 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000088A8 0828 0000 0028             		btst	#0,$28(a0)
000088AE 6700                       		beq.s	loc_846C
000088B0 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000088B6                            
000088B6                            loc_846C:
000088B6 7207                       		moveq	#7,d1
000088B8 5228 001A                  		addq.b	#1,$1A(a0)
000088BC 6000                       		bra.s	loc_8486
000088BE                            ; ===========================================================================
000088BE                            
000088BE                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000088BE 117C 0000 003A             		move.b	#0,$3A(a0)
000088C4                            
000088C4                            loc_847A:				; XREF: Obj1A_Touch
000088C4 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000088CA 7218                       		moveq	#$18,d1
000088CC 5428 001A                  		addq.b	#2,$1A(a0)
000088D0                            
000088D0                            loc_8486:				; XREF: Obj53_Collapse
000088D0 7000                       		moveq	#0,d0
000088D2 1028 001A                  		move.b	$1A(a0),d0
000088D6 D040                       		add.w	d0,d0
000088D8 2668 0004                  		movea.l	4(a0),a3
000088DC D6F3 0000                  		adda.w	(a3,d0.w),a3
000088E0 524B                       		addq.w	#1,a3
000088E2 08E8 0005 0001             		bset	#5,1(a0)
000088E8 1810                       		move.b	0(a0),d4
000088EA 1A28 0001                  		move.b	1(a0),d5
000088EE 2248                       		movea.l	a0,a1
000088F0 6000                       		bra.s	loc_84B2
000088F2                            ; ===========================================================================
000088F2                            
000088F2                            loc_84AA:
000088F2 6100 0000                  		bsr.w	SingleObjLoad
000088F6 6600                       		bne.s	loc_84F2
000088F8 5A4B                       		addq.w	#5,a3
000088FA                            
000088FA                            loc_84B2:
000088FA 137C 0006 0024             		move.b	#6,$24(a1)
00008900 1284                       		move.b	d4,0(a1)
00008902 234B 0004                  		move.l	a3,4(a1)
00008906 1345 0001                  		move.b	d5,1(a1)
0000890A 3368 0008 0008             		move.w	8(a0),8(a1)
00008910 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008916 3368 0002 0002             		move.w	2(a0),2(a1)
0000891C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008922 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008928 135C 0038                  		move.b	(a4)+,$38(a1)
0000892C B3C8                       		cmpa.l	a0,a1
0000892E 6400                       		bcc.s	loc_84EE
00008930 6100 0000                  		bsr.w	DisplaySprite2
00008934                            
00008934                            loc_84EE:
00008934 51C9 FFBC                  		dbf	d1,loc_84AA
00008938                            
00008938                            loc_84F2:
00008938 6100 0000                  		bsr.w	DisplaySprite
0000893C 303C 00B9                  		move.w	#$B9,d0
00008940 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008946                            ; ===========================================================================
00008946                            ; ---------------------------------------------------------------------------
00008946                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008946                            ; ---------------------------------------------------------------------------
00008946 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008956 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008960 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008968 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008970                            
00008970                            ; ---------------------------------------------------------------------------
00008970                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008970                            ; ---------------------------------------------------------------------------
00008970                            
00008970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008970                            
00008970                            
00008970                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008970 43F8 D000                  		lea	($FFFFD000).w,a1
00008974 0829 0003 0022             		btst	#3,$22(a1)
0000897A 6700                       		beq.s	locret_856E
0000897C 3029 0008                  		move.w	8(a1),d0
00008980 9068 0008                  		sub.w	8(a0),d0
00008984 D041                       		add.w	d1,d0
00008986 E248                       		lsr.w	#1,d0
00008988 0828 0000 0001             		btst	#0,1(a0)
0000898E 6700                       		beq.s	loc_854E
00008990 4640                       		not.w	d0
00008992 D041                       		add.w	d1,d0
00008994                            
00008994                            loc_854E:
00008994 7200                       		moveq	#0,d1
00008996 1232 0000                  		move.b	(a2,d0.w),d1
0000899A 3028 000C                  		move.w	$C(a0),d0
0000899E 9041                       		sub.w	d1,d0
000089A0 7200                       		moveq	#0,d1
000089A2 1229 0016                  		move.b	$16(a1),d1
000089A6 9041                       		sub.w	d1,d0
000089A8 3340 000C                  		move.w	d0,$C(a1)
000089AC 9468 0008                  		sub.w	8(a0),d2
000089B0 9569 0008                  		sub.w	d2,8(a1)
000089B4                            
000089B4                            locret_856E:
000089B4 4E75                       		rts	
000089B6                            ; End of function SlopeObject2
000089B6                            
000089B6                            ; ===========================================================================
000089B6                            ; ---------------------------------------------------------------------------
000089B6                            ; Collision data for GHZ collapsing ledge
000089B6                            ; ---------------------------------------------------------------------------
000089B6                            Obj1A_SlopeData:
000089B6                            		incbin	misc\ghzledge.bin
000089E6                            		even
000089E6                            
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Sprite mappings - GHZ	collapsing ledge
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            Map_obj1A:
000089E6                            	include "_maps\obj1A.asm"
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Sprite mappings - GHZ	collapsing ledge
000089E6                            ; ---------------------------------------------------------------------------
000089E6 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000089EA 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000089EE 10                         byte_85A8:	dc.b $10
000089EF C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000089F4 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000089F9 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000089FE E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A03 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A08 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008A0D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A12 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A17 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A1C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008A21 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A26 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A2B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A30 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008A35 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A3A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A3F 10                         byte_85F9:	dc.b $10
00008A40 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008A45 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008A4A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008A4F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A54 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A59 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008A5E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A63 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A68 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A6D F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008A72 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A77 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A7C 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A81 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008A86 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A8B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A90 19                         byte_864A:	dc.b $19
00008A91 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008A96 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008A9B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008AA0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008AA5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008AAA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008AAF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008AB4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008AB9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008ABE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008AC3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008AC8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008ACD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008AD2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008AD7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008ADC F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008AE1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008AE6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008AEB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008AF0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008AF5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008AFA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008AFF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B04 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B09 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B0E 19                         byte_86C8:	dc.b $19
00008B0F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008B14 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B19 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008B1E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008B23 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008B28 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008B2D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008B32 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008B37 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B3C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008B41 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008B46 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008B4B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008B50 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008B55 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B5A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008B5F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008B64 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008B69 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B6E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008B73 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008B78 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008B7D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B82 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B87 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B8C                            		even
00008B8C                            		even
00008B8C                            
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            Map_obj53:
00008B8C                            	include "_maps\obj53.asm"
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008B90 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008B94 04                         byte_874E:	dc.b 4
00008B95 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008B9A 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008B9F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BA4 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008BA9 08                         byte_8763:	dc.b 8
00008BAA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BAF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008BB4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BB9 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008BBE 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008BC3 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008BC8 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008BCD 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008BD2 04                         byte_878C:	dc.b 4
00008BD3 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008BD8 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008BDD F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BE2 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008BE7 08                         byte_87A1:	dc.b 8
00008BE8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BED F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008BF2 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BF7 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008BFC 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008C01 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008C06 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008C0B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008C10                            		even
00008C10                            		even
00008C10                            
00008C10                            ; ===========================================================================
00008C10                            ; ---------------------------------------------------------------------------
00008C10                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008C10                            ; ---------------------------------------------------------------------------
00008C10                            
00008C10                            Obj1C:					; XREF: Obj_Index
00008C10 7000                       		moveq	#0,d0
00008C12 1028 0024                  		move.b	$24(a0),d0
00008C16 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008C1A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008C1E                            ; ===========================================================================
00008C1E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008C20 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008C22                            ; ===========================================================================
00008C22                            
00008C22                            Obj1C_Main:				; XREF: Obj1C_Index
00008C22 5428 0024                  		addq.b	#2,$24(a0)
00008C26 7000                       		moveq	#0,d0
00008C28 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008C2C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008C30 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008C34 2159 0004                  		move.l	(a1)+,4(a0)
00008C38 3159 0002                  		move.w	(a1)+,2(a0)
00008C3C 0028 0004 0001             		ori.b	#4,1(a0)
00008C42 1159 001A                  		move.b	(a1)+,$1A(a0)
00008C46 1159 0019                  		move.b	(a1)+,$19(a0)
00008C4A 1159 0018                  		move.b	(a1)+,$18(a0)
00008C4E 1159 0020                  		move.b	(a1)+,$20(a0)
00008C52                            
00008C52                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008C52 3028 0008                  		move.w	8(a0),d0
00008C56 0240 FF80                  		andi.w	#$FF80,d0
00008C5A 3238 F700                  		move.w	($FFFFF700).w,d1
00008C5E 0441 0080                  		subi.w	#$80,d1
00008C62 0241 FF80                  		andi.w	#$FF80,d1
00008C66 9041                       		sub.w	d1,d0
00008C68 0C40 0280                  		cmpi.w	#$280,d0
00008C6C 6200 0000                  		bhi.w	DeleteObject
00008C70 6000 0000                  		bra.w	DisplaySprite
00008C74                            ; ===========================================================================
00008C74                            ; ---------------------------------------------------------------------------
00008C74                            ; Variables for	object $1C are stored in an array
00008C74                            ; ---------------------------------------------------------------------------
00008C74 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008C78 44D8                       		dc.w $44D8		; VRAM setting
00008C7A 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008C7E 0000 0000                  		dc.l Map_obj1C
00008C82 44D8                       		dc.w $44D8
00008C84 0008 0200                  		dc.b 0,	8, 2, 0
00008C88 0000 0000                  		dc.l Map_obj1C
00008C8C 44D8                       		dc.w $44D8
00008C8E 0008 0200                  		dc.b 0,	8, 2, 0
00008C92 0000 7D86                  		dc.l Map_obj11
00008C96 438E                       		dc.w $438E
00008C98 0110 0100                  		dc.b 1,	$10, 1,	0
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            ; Sprite mappings - SLZ	lava thrower
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            Map_obj1C:
00008C9C                            	include "_maps\obj1C.asm"
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            ; Sprite mappings - SLZ	lava thrower
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C 0000                       		dc.w byte_8858-Map_obj1C
00008C9E 01                         byte_8858:	dc.b 1
00008C9F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008CA4                            		even
00008CA4                            		even
00008CA4                            
00008CA4                            ; ===========================================================================
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            ; Object 1D - switch that activates when Sonic touches it
00008CA4                            ; (this	is not used anywhere in	the game)
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            
00008CA4                            Obj1D:					; XREF: Obj_Index
00008CA4 7000                       		moveq	#0,d0
00008CA6 1028 0024                  		move.b	$24(a0),d0
00008CAA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008CAE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008CB2                            ; ===========================================================================
00008CB2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008CB4 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008CB6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008CB8                            ; ===========================================================================
00008CB8                            
00008CB8                            Obj1D_Main:				; XREF: Obj1D_Index
00008CB8 5428 0024                  		addq.b	#2,$24(a0)
00008CBC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008CC4 317C 4000 0002             		move.w	#$4000,2(a0)
00008CCA 117C 0004 0001             		move.b	#4,1(a0)
00008CD0 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008CD6 117C 0010 0019             		move.b	#$10,$19(a0)
00008CDC 117C 0005 0018             		move.b	#5,$18(a0)
00008CE2                            
00008CE2                            Obj1D_Action:				; XREF: Obj1D_Index
00008CE2 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008CE8 323C 0010                  		move.w	#$10,d1
00008CEC 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008CF0 6700                       		beq.s	Obj1D_ChkDel
00008CF2 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008CF6 7001                       		moveq	#1,d0
00008CF8 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008CFC                            
00008CFC                            Obj1D_ChkDel:
00008CFC 6100 0000                  		bsr.w	DisplaySprite
00008D00 3028 0008                  		move.w	8(a0),d0
00008D04 0240 FF80                  		andi.w	#$FF80,d0
00008D08 3238 F700                  		move.w	($FFFFF700).w,d1
00008D0C 0441 0080                  		subi.w	#$80,d1
00008D10 0241 FF80                  		andi.w	#$FF80,d1
00008D14 9041                       		sub.w	d1,d0
00008D16 0C40 0280                  		cmpi.w	#$280,d0
00008D1A 6200 0000                  		bhi.w	Obj1D_Delete
00008D1E 4E75                       		rts	
00008D20                            ; ===========================================================================
00008D20                            
00008D20                            Obj1D_Delete:				; XREF: Obj1D_Index
00008D20 6100 0000                  		bsr.w	DeleteObject
00008D24 4E75                       		rts	
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            ; Subroutine to	check if Sonic touches the object
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            
00008D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D26                            
00008D26                            
00008D26                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008D26 43F8 D000                  		lea	($FFFFD000).w,a1
00008D2A 3029 0008                  		move.w	8(a1),d0
00008D2E 9068 0008                  		sub.w	8(a0),d0
00008D32 D041                       		add.w	d1,d0
00008D34 6B00                       		bmi.s	loc_8918
00008D36 D241                       		add.w	d1,d1
00008D38 B041                       		cmp.w	d1,d0
00008D3A 6400                       		bcc.s	loc_8918
00008D3C 3429 000C                  		move.w	$C(a1),d2
00008D40 1229 0016                  		move.b	$16(a1),d1
00008D44 4881                       		ext.w	d1
00008D46 D242                       		add.w	d2,d1
00008D48 3028 000C                  		move.w	$C(a0),d0
00008D4C 0440 0010                  		subi.w	#$10,d0
00008D50 9041                       		sub.w	d1,d0
00008D52 6200                       		bhi.s	loc_8918
00008D54 0C40 FFF0                  		cmpi.w	#-$10,d0
00008D58 6500                       		bcs.s	loc_8918
00008D5A 70FF                       		moveq	#-1,d0
00008D5C 4E75                       		rts	
00008D5E                            ; ===========================================================================
00008D5E                            
00008D5E                            loc_8918:
00008D5E 7000                       		moveq	#0,d0
00008D60 4E75                       		rts	
00008D62                            ; End of function Obj1D_ChkTouch
00008D62                            
00008D62                            ; ===========================================================================
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            ; Sprite mappings - object 1D
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            Map_obj1D:
00008D62                            	include "_maps\obj1D.asm"
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            ; Sprite mappings - object 1D
00008D62                            ; ---------------------------------------------------------------------------
00008D62 0000                       		dc.w byte_891E-Map_obj1D
00008D64 04                         byte_891E:	dc.b 4
00008D65 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008D6A 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008D6F E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008D74 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008D7A 00                         		even
00008D7A 00                         		even
00008D7A                            
00008D7A                            ; ===========================================================================
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            ; Object 2A - doors (SBZ)
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            
00008D7A                            Obj2A:					; XREF: Obj_Index
00008D7A 7000                       		moveq	#0,d0
00008D7C 1028 0024                  		move.b	$24(a0),d0
00008D80 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008D84 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008D88                            ; ===========================================================================
00008D88 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008D8A 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008D8C                            ; ===========================================================================
00008D8C                            
00008D8C                            Obj2A_Main:				; XREF: Obj2A_Index
00008D8C 5428 0024                  		addq.b	#2,$24(a0)
00008D90 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008D98 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008D9E 0028 0004 0001             		ori.b	#4,1(a0)
00008DA4 117C 0008 0019             		move.b	#8,$19(a0)
00008DAA 117C 0004 0018             		move.b	#4,$18(a0)
00008DB0                            
00008DB0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008DB0 323C 0040                  		move.w	#$40,d1
00008DB4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008DB8 3038 D008                  		move.w	($FFFFD008).w,d0
00008DBC D041                       		add.w	d1,d0
00008DBE B068 0008                  		cmp.w	8(a0),d0
00008DC2 6500                       		bcs.s	Obj2A_Animate
00008DC4 9041                       		sub.w	d1,d0
00008DC6 9041                       		sub.w	d1,d0
00008DC8 B068 0008                  		cmp.w	8(a0),d0
00008DCC 6400                       		bcc.s	Obj2A_Animate
00008DCE D041                       		add.w	d1,d0
00008DD0 B068 0008                  		cmp.w	8(a0),d0
00008DD4 6400                       		bcc.s	loc_899A
00008DD6 0828 0000 0022             		btst	#0,$22(a0)
00008DDC 6600                       		bne.s	Obj2A_Animate
00008DDE 6000                       		bra.s	Obj2A_Open
00008DE0                            ; ===========================================================================
00008DE0                            
00008DE0                            loc_899A:				; XREF: Obj2A_OpenShut
00008DE0 0828 0000 0022             		btst	#0,$22(a0)
00008DE6 6700                       		beq.s	Obj2A_Animate
00008DE8                            
00008DE8                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008DE8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008DEE                            
00008DEE                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008DEE 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008DF4 6100 0000                  		bsr.w	AnimateSprite
00008DF8 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008DFC 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008DFE 323C 0011                  		move.w	#$11,d1
00008E02 343C 0020                  		move.w	#$20,d2
00008E06 3602                       		move.w	d2,d3
00008E08 5243                       		addq.w	#1,d3
00008E0A 3828 0008                  		move.w	8(a0),d4
00008E0E 6100 0000                  		bsr.w	SolidObject
00008E12                            
00008E12                            Obj2A_MarkAsUsed:
00008E12 6000 0000                  		bra.w	MarkObjGone
00008E16                            ; ===========================================================================
00008E16                            Ani_obj2A:
00008E16                            	include "_anim\obj2A.asm"
00008E16                            ; ---------------------------------------------------------------------------
00008E16                            ; Animation script - doors (SBZ)
00008E16                            ; ---------------------------------------------------------------------------
00008E16 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008E18 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008E1A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008E26 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008E32                            		even
00008E32                            		even
00008E32                            
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            ; Sprite mappings - doors (SBZ)
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            Map_obj2A:
00008E32                            	include "_maps\obj2A.asm"
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            ; Sprite mappings - doors (SBZ)
00008E32                            ; ---------------------------------------------------------------------------
00008E32 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008E36 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008E3A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008E3E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008E42 0000                       		dc.w byte_8A56-Map_obj2A
00008E44 02                         byte_89FE:	dc.b 2
00008E45 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008E4A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008E4F 02                         byte_8A09:	dc.b 2
00008E50 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008E55 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008E5A 02                         byte_8A14:	dc.b 2
00008E5B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008E60 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008E65 02                         byte_8A1F:	dc.b 2
00008E66 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008E6B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008E70 02                         byte_8A2A:	dc.b 2
00008E71 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008E76 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008E7B 02                         byte_8A35:	dc.b 2
00008E7C CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008E81 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008E86 02                         byte_8A40:	dc.b 2
00008E87 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008E8C 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008E91 02                         byte_8A4B:	dc.b 2
00008E92 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008E97 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008E9C 02                         byte_8A56:	dc.b 2
00008E9D C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008EA2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008EA8 00                         		even
00008EA8 00                         		even
00008EA8                            
00008EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EA8                            
00008EA8                            
00008EA8                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008EA8 6100 0000                  		bsr.w	Obj44_SolidWall2
00008EAC 6700                       		beq.s	loc_8AA8
00008EAE 6B00 0000                  		bmi.w	loc_8AC4
00008EB2 4A40                       		tst.w	d0
00008EB4 6700 0000                  		beq.w	loc_8A92
00008EB8 6B00                       		bmi.s	loc_8A7C
00008EBA 4A69 0010                  		tst.w	$10(a1)
00008EBE 6B00                       		bmi.s	loc_8A92
00008EC0 6000                       		bra.s	loc_8A82
00008EC2                            ; ===========================================================================
00008EC2                            
00008EC2                            loc_8A7C:
00008EC2 4A69 0010                  		tst.w	$10(a1)
00008EC6 6A00                       		bpl.s	loc_8A92
00008EC8                            
00008EC8                            loc_8A82:
00008EC8 9169 0008                  		sub.w	d0,8(a1)
00008ECC 337C 0000 0014             		move.w	#0,$14(a1)
00008ED2 337C 0000 0010             		move.w	#0,$10(a1)
00008ED8                            
00008ED8                            loc_8A92:
00008ED8 0829 0001 0022             		btst	#1,$22(a1)
00008EDE 6600                       		bne.s	loc_8AB6
00008EE0 08E9 0005 0022             		bset	#5,$22(a1)
00008EE6 08E8 0005 0022             		bset	#5,$22(a0)
00008EEC 4E75                       		rts	
00008EEE                            ; ===========================================================================
00008EEE                            
00008EEE                            loc_8AA8:
00008EEE 0828 0005 0022             		btst	#5,$22(a0)
00008EF4 6700                       		beq.s	locret_8AC2
00008EF6 337C 0001 001C             		move.w	#1,$1C(a1)
00008EFC                            
00008EFC                            loc_8AB6:
00008EFC 08A8 0005 0022             		bclr	#5,$22(a0)
00008F02 08A9 0005 0022             		bclr	#5,$22(a1)
00008F08                            
00008F08                            locret_8AC2:
00008F08 4E75                       		rts	
00008F0A                            ; ===========================================================================
00008F0A                            
00008F0A                            loc_8AC4:
00008F0A 4A69 0012                  		tst.w	$12(a1)
00008F0E 6A00                       		bpl.s	locret_8AD8
00008F10 4A43                       		tst.w	d3
00008F12 6A00                       		bpl.s	locret_8AD8
00008F14 9769 000C                  		sub.w	d3,$C(a1)
00008F18 337C 0000 0012             		move.w	#0,$12(a1)
00008F1E                            
00008F1E                            locret_8AD8:
00008F1E 4E75                       		rts	
00008F20                            ; End of function Obj44_SolidWall
00008F20                            
00008F20                            
00008F20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F20                            
00008F20                            
00008F20                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008F20 43F8 D000                  		lea	($FFFFD000).w,a1
00008F24 3029 0008                  		move.w	8(a1),d0
00008F28 9068 0008                  		sub.w	8(a0),d0
00008F2C D041                       		add.w	d1,d0
00008F2E 6B00                       		bmi.s	loc_8B48
00008F30 3601                       		move.w	d1,d3
00008F32 D643                       		add.w	d3,d3
00008F34 B043                       		cmp.w	d3,d0
00008F36 6200                       		bhi.s	loc_8B48
00008F38 1629 0016                  		move.b	$16(a1),d3
00008F3C 4883                       		ext.w	d3
00008F3E D443                       		add.w	d3,d2
00008F40 3629 000C                  		move.w	$C(a1),d3
00008F44 9668 000C                  		sub.w	$C(a0),d3
00008F48 D642                       		add.w	d2,d3
00008F4A 6B00                       		bmi.s	loc_8B48
00008F4C 3802                       		move.w	d2,d4
00008F4E D844                       		add.w	d4,d4
00008F50 B644                       		cmp.w	d4,d3
00008F52 6400                       		bcc.s	loc_8B48
00008F54 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008F58 6B00                       		bmi.s	loc_8B48
00008F5A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008F60 6400                       		bcc.s	loc_8B48
00008F62 4A78 FE08                  		tst.w	($FFFFFE08).w
00008F66 6600                       		bne.s	loc_8B48
00008F68 3A00                       		move.w	d0,d5
00008F6A B240                       		cmp.w	d0,d1
00008F6C 6400                       		bcc.s	loc_8B30
00008F6E D241                       		add.w	d1,d1
00008F70 9041                       		sub.w	d1,d0
00008F72 3A00                       		move.w	d0,d5
00008F74 4445                       		neg.w	d5
00008F76                            
00008F76                            loc_8B30:
00008F76 3203                       		move.w	d3,d1
00008F78 B443                       		cmp.w	d3,d2
00008F7A 6400                       		bcc.s	loc_8B3C
00008F7C 9644                       		sub.w	d4,d3
00008F7E 3203                       		move.w	d3,d1
00008F80 4441                       		neg.w	d1
00008F82                            
00008F82                            loc_8B3C:
00008F82 BA41                       		cmp.w	d1,d5
00008F84 6200                       		bhi.s	loc_8B44
00008F86 7801                       		moveq	#1,d4
00008F88 4E75                       		rts	
00008F8A                            ; ===========================================================================
00008F8A                            
00008F8A                            loc_8B44:
00008F8A 78FF                       		moveq	#-1,d4
00008F8C 4E75                       		rts	
00008F8E                            ; ===========================================================================
00008F8E                            
00008F8E                            loc_8B48:
00008F8E 7800                       		moveq	#0,d4
00008F90 4E75                       		rts	
00008F92                            ; End of function Obj44_SolidWall2
00008F92                            
00008F92                            ; ===========================================================================
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            ; Object 1E - Ball Hog enemy (SBZ)
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            
00008F92                            Obj1E:					; XREF: Obj_Index
00008F92 7000                       		moveq	#0,d0
00008F94 1028 0024                  		move.b	$24(a0),d0
00008F98 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008F9C 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008FA0                            ; ===========================================================================
00008FA0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008FA2 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008FA4                            ; ===========================================================================
00008FA4                            
00008FA4                            Obj1E_Main:				; XREF: Obj1E_Index
00008FA4 117C 0013 0016             		move.b	#$13,$16(a0)
00008FAA 117C 0008 0017             		move.b	#8,$17(a0)
00008FB0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008FB8 317C 2302 0002             		move.w	#$2302,2(a0)
00008FBE 117C 0004 0001             		move.b	#4,1(a0)
00008FC4 117C 0004 0018             		move.b	#4,$18(a0)
00008FCA 117C 0005 0020             		move.b	#5,$20(a0)
00008FD0 117C 000C 0019             		move.b	#$C,$19(a0)
00008FD6 6100 0000                  		bsr.w	ObjectFall
00008FDA 4EB9 0000 0000             		jsr	ObjHitFloor
00008FE0 4A41                       		tst.w	d1
00008FE2 6A00                       		bpl.s	locret_8BAC
00008FE4 D368 000C                  		add.w	d1,$C(a0)
00008FE8 317C 0000 0012             		move.w	#0,$12(a0)
00008FEE 5428 0024                  		addq.b	#2,$24(a0)
00008FF2                            
00008FF2                            locret_8BAC:
00008FF2 4E75                       		rts	
00008FF4                            ; ===========================================================================
00008FF4                            
00008FF4                            Obj1E_Action:				; XREF: Obj1E_Index
00008FF4 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008FFA 6100 0000                  		bsr.w	AnimateSprite
00008FFE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009004 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009006 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000900A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000900C 6000                       		bra.s	Obj1E_MarkAsGone
0000900E                            ; ===========================================================================
0000900E                            
0000900E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000900E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009012                            
00009012                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009012 6000 0000                  		bra.w	MarkObjGone
00009016                            ; ===========================================================================
00009016                            
00009016                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009016 117C 0001 0032             		move.b	#1,$32(a0)
0000901C 6100 0000                  		bsr.w	SingleObjLoad
00009020 6600                       		bne.s	loc_8C1A
00009022 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009026 3368 0008 0008             		move.w	8(a0),8(a1)
0000902C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009032 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009038 337C 0000 0012             		move.w	#0,$12(a1)
0000903E 70FC                       		moveq	#-4,d0
00009040 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009046 6700                       		beq.s	loc_8C0A	; if not, branch
00009048 4440                       		neg.w	d0
0000904A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000904E                            
0000904E                            loc_8C0A:
0000904E D169 0008                  		add.w	d0,8(a1)
00009052 0669 000C 000C             		addi.w	#$C,$C(a1)
00009058 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000905E                            
0000905E                            loc_8C1A:
0000905E 60B2                       		bra.s	Obj1E_MarkAsGone
00009060                            ; ===========================================================================
00009060                            ; ---------------------------------------------------------------------------
00009060                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009060                            ; ---------------------------------------------------------------------------
00009060                            
00009060                            Obj20:					; XREF: Obj_Index
00009060 7000                       		moveq	#0,d0
00009062 1028 0024                  		move.b	$24(a0),d0
00009066 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000906A 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000906E                            ; ===========================================================================
0000906E 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009070 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009072                            ; ===========================================================================
00009072                            
00009072                            Obj20_Main:				; XREF: Obj20_Index
00009072 5428 0024                  		addq.b	#2,$24(a0)
00009076 117C 0007 0016             		move.b	#7,$16(a0)
0000907C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009084 317C 2302 0002             		move.w	#$2302,2(a0)
0000908A 117C 0004 0001             		move.b	#4,1(a0)
00009090 117C 0003 0018             		move.b	#3,$18(a0)
00009096 117C 0087 0020             		move.b	#$87,$20(a0)
0000909C 117C 0008 0019             		move.b	#8,$19(a0)
000090A2 7000                       		moveq	#0,d0
000090A4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000090A8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000090AC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000090B0 117C 0004 001A             		move.b	#4,$1A(a0)
000090B6                            
000090B6                            Obj20_Bounce:				; XREF: Obj20_Index
000090B6 4EB9 0000 0000             		jsr	ObjectFall
000090BC 4A68 0012                  		tst.w	$12(a0)
000090C0 6B00                       		bmi.s	Obj20_ChkExplode
000090C2 4EB9 0000 0000             		jsr	ObjHitFloor
000090C8 4A41                       		tst.w	d1
000090CA 6A00                       		bpl.s	Obj20_ChkExplode
000090CC D368 000C                  		add.w	d1,$C(a0)
000090D0 317C FD00 0012             		move.w	#-$300,$12(a0)
000090D6 4A03                       		tst.b	d3
000090D8 6700                       		beq.s	Obj20_ChkExplode
000090DA 6B00                       		bmi.s	loc_8CA4
000090DC 4A68 0010                  		tst.w	$10(a0)
000090E0 6A00                       		bpl.s	Obj20_ChkExplode
000090E2 4468 0010                  		neg.w	$10(a0)
000090E6 6000                       		bra.s	Obj20_ChkExplode
000090E8                            ; ===========================================================================
000090E8                            
000090E8                            loc_8CA4:				; XREF: Obj20_Bounce
000090E8 4A68 0010                  		tst.w	$10(a0)
000090EC 6B00                       		bmi.s	Obj20_ChkExplode
000090EE 4468 0010                  		neg.w	$10(a0)
000090F2                            
000090F2                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000090F2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000090F6 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000090F8 10BC 0024                  		move.b	#$24,0(a0)
000090FC 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009100 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009106 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000910A                            ; ===========================================================================
0000910A                            
0000910A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000910A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000910E 6A00                       		bpl.s	Obj20_Display
00009110 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009116 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000911C                            
0000911C                            Obj20_Display:
0000911C 6100 0000                  		bsr.w	DisplaySprite
00009120 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009124 0640 00E0                  		addi.w	#$E0,d0
00009128 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000912C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009130 4E75                       		rts	
00009132                            ; ===========================================================================
00009132                            ; ---------------------------------------------------------------------------
00009132                            ; Object 24 - explosion	from a destroyed monitor
00009132                            ; ---------------------------------------------------------------------------
00009132                            
00009132                            Obj24:					; XREF: Obj_Index
00009132 7000                       		moveq	#0,d0
00009134 1028 0024                  		move.b	$24(a0),d0
00009138 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000913C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009140                            ; ===========================================================================
00009140 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009142 0000                       		dc.w Obj24_Animate-Obj24_Index
00009144                            ; ===========================================================================
00009144                            
00009144                            Obj24_Main:				; XREF: Obj24_Index
00009144 5428 0024                  		addq.b	#2,$24(a0)
00009148 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009150 317C 041C 0002             		move.w	#$41C,2(a0)
00009156 117C 0004 0001             		move.b	#4,1(a0)
0000915C 117C 0001 0018             		move.b	#1,$18(a0)
00009162 117C 0000 0020             		move.b	#0,$20(a0)
00009168 117C 000C 0019             		move.b	#$C,$19(a0)
0000916E 117C 0009 001E             		move.b	#9,$1E(a0)
00009174 117C 0000 001A             		move.b	#0,$1A(a0)
0000917A 303C 00A5                  		move.w	#$A5,d0
0000917E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play explosion sound
00009184                            
00009184                            Obj24_Animate:				; XREF: Obj24_Index
00009184 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009188 6A00                       		bpl.s	Obj24_Display
0000918A 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009190 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009194 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000919A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000919E                            
0000919E                            Obj24_Display:
0000919E 6000 0000                  		bra.w	DisplaySprite
000091A2                            ; ===========================================================================
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            ; Object 27 - explosion	from a destroyed enemy
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            
000091A2                            Obj27:					; XREF: Obj_Index
000091A2 7000                       		moveq	#0,d0
000091A4 1028 0024                  		move.b	$24(a0),d0
000091A8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000091AC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000091B0                            ; ===========================================================================
000091B0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000091B2 0000                       		dc.w Obj27_Main-Obj27_Index
000091B4 0000                       		dc.w Obj27_Animate-Obj27_Index
000091B6                            ; ===========================================================================
000091B6                            
000091B6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000091B6 5428 0024                  		addq.b	#2,$24(a0)
000091BA 6100 0000                  		bsr.w	SingleObjLoad
000091BE 6600                       		bne.s	Obj27_Main
000091C0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000091C4 3368 0008 0008             		move.w	8(a0),8(a1)
000091CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000091D0 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000091D6                            
000091D6                            Obj27_Main:				; XREF: Obj27_Index
000091D6 5428 0024                  		addq.b	#2,$24(a0)
000091DA 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000091E2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000091E8 117C 0004 0001             		move.b	#4,1(a0)
000091EE 117C 0001 0018             		move.b	#1,$18(a0)
000091F4 117C 0000 0020             		move.b	#0,$20(a0)
000091FA 117C 000C 0019             		move.b	#$C,$19(a0)
00009200                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009200 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009206 117C 0000 001A             		move.b	#0,$1A(a0)
0000920C 303C 00C1                  		move.w	#$C1,d0
00009210 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009216                            
00009216 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000921C 1028 0028                  		move.b	$28(a0),d0
00009220 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009226 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000922C                            
0000922C                            Obj27_Animate:				; XREF: Obj27_Index
0000922C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009230 6A00                       		bpl.s	Obj27_Display
00009232                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009232 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009238 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000923C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009242 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009246                            
00009246                            Obj27_Display:
00009246 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000924C 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009252 6000 0000                  		bra.w	DisplaySprite
00009256                            ; ===========================================================================
00009256                            ; ---------------------------------------------------------------------------
00009256                            Obj27_ExplosionXYSpd:
00009256                            		; dc.w	-$350, -$300	; Left
00009256                            		; dc.w	-$200, -$450	; Near middle (left)
00009256                            		; dc.w	0, -$500	; Middle
00009256                            		; dc.w	$200, -$450	; Near middle (right)
00009256                            		; dc.w	$350, -$300	; Right
00009256                            
00009256 FEB0 FC00                  		dc.w	-$150, -$400	; Left
0000925A FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000925E 0000 FA00                  		dc.w	0, -$600	; Middle
00009262 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009266 0150 FC00                  		dc.w	$150, -$400	; Right
0000926A                            
0000926A 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009284                            ; ---------------------------------------------------------------------------
00009284                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009284                            ; ---------------------------------------------------------------------------
00009284                            
00009284                            Obj3F:					; XREF: Obj_Index
00009284 7000                       		moveq	#0,d0
00009286 1028 0024                  		move.b	$24(a0),d0
0000928A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000928E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009292                            ; ===========================================================================
00009292 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009294 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009296                            ; ===========================================================================
00009296                            
00009296                            Obj3F_Main:				; XREF: Obj3F_Index
00009296 5428 0024                  		addq.b	#2,$24(a0)
0000929A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000092A2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000092A8 117C 0004 0001             		move.b	#4,1(a0)
000092AE 117C 0001 0018             		move.b	#1,$18(a0)
000092B4 117C 0000 0020             		move.b	#0,$20(a0)
000092BA 117C 000C 0019             		move.b	#$C,$19(a0)
000092C0 117C 0007 001E             		move.b	#7,$1E(a0)
000092C6 117C 0000 001A             		move.b	#0,$1A(a0)
000092CC 303C 00C4                  		move.w	#$C4,d0
000092D0 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000092D6                            ; ===========================================================================
000092D6                            Ani_obj1E:
000092D6                            	include "_anim\obj1E.asm"
000092D6                            ; ---------------------------------------------------------------------------
000092D6                            ; Animation script - doors (SBZ)
000092D6                            ; ---------------------------------------------------------------------------
000092D6 0000                       		dc.w byte_8E4A-Ani_obj1E
000092D8 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000092F0 00                         		even
000092F0 00                         		even
000092F0                            
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            Map_obj1E:
000092F0                            	include "_maps\obj1E.asm"
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F0                            ; ---------------------------------------------------------------------------
000092F0 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000092F4 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000092F8 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000092FC 02                         byte_8E6E:	dc.b 2
000092FD EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009302 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009307 02                         byte_8E79:	dc.b 2
00009308 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000930D FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009312 02                         byte_8E84:	dc.b 2
00009313 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009318 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000931D 02                         byte_8E8F:	dc.b 2
0000931E E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009323 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009328 01                         byte_8E9A:	dc.b 1
00009329 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000932E 01                         byte_8EA0:	dc.b 1
0000932F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009334                            		even
00009334                            		even
00009334                            
00009334                            ; ---------------------------------------------------------------------------
00009334                            ; Sprite mappings - explosion
00009334                            ; ---------------------------------------------------------------------------
00009334                            Map_obj24:
00009334                            	include "_maps\obj24.asm"
00009334                            ; ---------------------------------------------------------------------------
00009334                            ; Sprite mappings - explosion
00009334                            ; ---------------------------------------------------------------------------
00009334 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009338 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000933C 01                         byte_8EAE:	dc.b 1
0000933D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009342 01                         byte_8EB4:	dc.b 1
00009343 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009348 01                         byte_8EBA:	dc.b 1
00009349 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000934E 01                         byte_8EC0:	dc.b 1
0000934F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009354                            		even
00009354                            		even
00009354                            
00009354                            ; ---------------------------------------------------------------------------
00009354                            ; Sprite mappings - explosion
00009354                            ; ---------------------------------------------------------------------------
00009354 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009358 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000935C 0000                       		dc.w byte_8EF7-Map_obj27
0000935E 01                         byte_8ED0:	dc.b 1
0000935F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009364 01                         byte_8ED6:	dc.b 1
00009365 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000936A 01                         byte_8EDC:	dc.b 1
0000936B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009370 04                         byte_8EE2:	dc.b 4
00009371 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009376 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000937B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009380 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009385 04                         byte_8EF7:	dc.b 4
00009386 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000938B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009390 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009395 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000939A                            		even
0000939A                            ; ---------------------------------------------------------------------------
0000939A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000939A                            ; ---------------------------------------------------------------------------
0000939A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000939C 0000                       		dc.w byte_8F16-Map_obj3F
0000939E 0000                       		dc.w byte_8F1C-Map_obj3F
000093A0 FFD6                       		dc.w byte_8EE2-Map_obj3F
000093A2 FFEB                       		dc.w byte_8EF7-Map_obj3F
000093A4 01                         byte_8F16:	dc.b 1
000093A5 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000093AA 01                         byte_8F1C:	dc.b 1
000093AB F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000093B0                            		even
000093B0                            ; ===========================================================================
000093B0                            ; ---------------------------------------------------------------------------
000093B0                            ; Object 28 - animals
000093B0                            ; ---------------------------------------------------------------------------
000093B0                            
000093B0                            Obj28:					; XREF: Obj_Index
000093B0 7000                       		moveq	#0,d0
000093B2 1028 0024                  		move.b	$24(a0),d0
000093B6 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000093BA 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000093BE                            ; ===========================================================================
000093BE 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000093C2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093C6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000093CA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093CE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000093D2 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000093D6 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000093DA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093DE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093E2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000093E6 0000                       		dc.w loc_92D6-Obj28_Index
000093E8                            
000093E8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000093F4                            
000093F4 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000093F8 0000 0000                  		dc.l Map_obj28
000093FC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009400 0000 0000                  		dc.l Map_obj28a		; mappings address
00009404 FE80 FD00                  		dc.w $FE80, $FD00
00009408 0000 0000                  		dc.l Map_obj28
0000940C FEC0 FE80                  		dc.w $FEC0, $FE80
00009410 0000 0000                  		dc.l Map_obj28a
00009414 FE40 FD00                  		dc.w $FE40, $FD00
00009418 0000 0000                  		dc.l Map_obj28b
0000941C FD00 FC00                  		dc.w $FD00, $FC00
00009420 0000 0000                  		dc.l Map_obj28a
00009424 FD80 FC80                  		dc.w $FD80, $FC80
00009428 0000 0000                  		dc.l Map_obj28b
0000942C                            
0000942C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000943C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000944C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009458                            
00009458 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000946C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009480 0000 0000                  		dc.l Map_obj28b
00009484                            
00009484 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009496 0565 05B3                  		dc.w $565, $5B3
0000949A                            ; ===========================================================================
0000949A                            
0000949A                            Obj28_Ending:				; XREF: Obj28_Index
0000949A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000949E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000094A2 7000                       		moveq	#0,d0
000094A4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094A8 D040                       		add.w	d0,d0		; multiply d0 by 2
000094AA 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000094AE 0440 0014                  		subi.w	#$14,d0
000094B2 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000094B8 D040                       		add.w	d0,d0
000094BA 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000094C0 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000094C4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000094CA 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000094D0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000094D6 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000094DC 117C 000C 0016             		move.b	#$C,$16(a0)
000094E2 117C 0004 0001             		move.b	#4,1(a0)
000094E8 08E8 0000 0001             		bset	#0,1(a0)
000094EE 117C 0006 0018             		move.b	#6,$18(a0)
000094F4 117C 0008 0019             		move.b	#8,$19(a0)
000094FA 117C 0007 001E             		move.b	#7,$1E(a0)
00009500 6000 0000                  		bra.w	DisplaySprite
00009504                            ; ===========================================================================
00009504                            
00009504                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009504 5428 0024                  		addq.b	#2,$24(a0)
00009508 6100 96F2                  		bsr.w	RandomNumber
0000950C 0240 0001                  		andi.w	#1,d0
00009510 7200                       		moveq	#0,d1
00009512 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009516 D241                       		add.w	d1,d1
00009518 D240                       		add.w	d0,d1
0000951A 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000951E 1031 1000                  		move.b	(a1,d1.w),d0
00009522 1140 0030                  		move.b	d0,$30(a0)
00009526 E748                       		lsl.w	#3,d0
00009528 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000952C D2C0                       		adda.w	d0,a1
0000952E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009532 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009536 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000953A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009540 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009546 6700                       		beq.s	loc_90C0	; if yes, branch
00009548 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000954E                            
0000954E                            loc_90C0:
0000954E 117C 000C 0016             		move.b	#$C,$16(a0)
00009554 117C 0004 0001             		move.b	#4,1(a0)
0000955A 08E8 0000 0001             		bset	#0,1(a0)
00009560 117C 0006 0018             		move.b	#6,$18(a0)
00009566 117C 0008 0019             		move.b	#8,$19(a0)
0000956C 117C 0007 001E             		move.b	#7,$1E(a0)
00009572 117C 0002 001A             		move.b	#2,$1A(a0)
00009578 317C FC00 0012             		move.w	#-$400,$12(a0)
0000957E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009582 6600                       		bne.s	loc_911C
00009584 6100 0000                  		bsr.w	SingleObjLoad
00009588 6600                       		bne.s	Obj28_Display
0000958A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000958E 3368 0008 0008             		move.w	8(a0),8(a1)
00009594 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000959A 3028 003E                  		move.w	$3E(a0),d0
0000959E E248                       		lsr.w	#1,d0
000095A0 1340 001A                  		move.b	d0,$1A(a1)
000095A4                            
000095A4                            Obj28_Display:
000095A4 6000 0000                  		bra.w	DisplaySprite
000095A8                            ; ===========================================================================
000095A8                            
000095A8                            loc_911C:
000095A8 117C 0012 0024             		move.b	#$12,$24(a0)
000095AE 4268 0010                  		clr.w	$10(a0)
000095B2 6000 0000                  		bra.w	DisplaySprite
000095B6                            ; ===========================================================================
000095B6                            
000095B6                            loc_912A:				; XREF: Obj28_Index
000095B6 4A28 0001                  		tst.b	1(a0)
000095BA 6A00 0000                  		bpl.w	DeleteObject
000095BE 6100 0000                  		bsr.w	ObjectFall
000095C2 4A68 0012                  		tst.w	$12(a0)
000095C6 6B00                       		bmi.s	loc_9180
000095C8 4EB9 0000 0000             		jsr	ObjHitFloor
000095CE 4A41                       		tst.w	d1
000095D0 6A00                       		bpl.s	loc_9180
000095D2 D368 000C                  		add.w	d1,$C(a0)
000095D6 3168 0032 0010             		move.w	$32(a0),$10(a0)
000095DC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000095E2 117C 0001 001A             		move.b	#1,$1A(a0)
000095E8 1028 0030                  		move.b	$30(a0),d0
000095EC D000                       		add.b	d0,d0
000095EE 5800                       		addq.b	#4,d0
000095F0 1140 0024                  		move.b	d0,$24(a0)
000095F4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000095F8 6700                       		beq.s	loc_9180
000095FA 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009600 6700                       		beq.s	loc_9180
00009602 4468 0010                  		neg.w	$10(a0)
00009606 0868 0000 0001             		bchg	#0,1(a0)
0000960C                            
0000960C                            loc_9180:
0000960C 6000 0000                  		bra.w	DisplaySprite
00009610                            ; ===========================================================================
00009610                            
00009610                            loc_9184:				; XREF: Obj28_Index
00009610 6100 0000                  		bsr.w	ObjectFall
00009614 117C 0001 001A             		move.b	#1,$1A(a0)
0000961A 4A68 0012                  		tst.w	$12(a0)
0000961E 6B00                       		bmi.s	loc_91AE
00009620 117C 0000 001A             		move.b	#0,$1A(a0)
00009626 4EB9 0000 0000             		jsr	ObjHitFloor
0000962C 4A41                       		tst.w	d1
0000962E 6A00                       		bpl.s	loc_91AE
00009630 D368 000C                  		add.w	d1,$C(a0)
00009634 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000963A                            
0000963A                            loc_91AE:
0000963A 4A28 0028                  		tst.b	$28(a0)
0000963E 6600                       		bne.s	loc_9224
00009640 4A28 0001                  		tst.b	1(a0)
00009644 6A00 0000                  		bpl.w	DeleteObject
00009648 6000 0000                  		bra.w	DisplaySprite
0000964C                            ; ===========================================================================
0000964C                            
0000964C                            loc_91C0:				; XREF: Obj28_Index
0000964C 6100 0000                  		bsr.w	SpeedToPos
00009650 0668 0018 0012             		addi.w	#$18,$12(a0)
00009656 4A68 0012                  		tst.w	$12(a0)
0000965A 6B00                       		bmi.s	loc_91FC
0000965C 4EB9 0000 0000             		jsr	ObjHitFloor
00009662 4A41                       		tst.w	d1
00009664 6A00                       		bpl.s	loc_91FC
00009666 D368 000C                  		add.w	d1,$C(a0)
0000966A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009670 4A28 0028                  		tst.b	$28(a0)
00009674 6700                       		beq.s	loc_91FC
00009676 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000967C 6700                       		beq.s	loc_91FC
0000967E 4468 0010                  		neg.w	$10(a0)
00009682 0868 0000 0001             		bchg	#0,1(a0)
00009688                            
00009688                            loc_91FC:
00009688 5328 001E                  		subq.b	#1,$1E(a0)
0000968C 6A00                       		bpl.s	loc_9212
0000968E 117C 0001 001E             		move.b	#1,$1E(a0)
00009694 5228 001A                  		addq.b	#1,$1A(a0)
00009698 0228 0001 001A             		andi.b	#1,$1A(a0)
0000969E                            
0000969E                            loc_9212:
0000969E 4A28 0028                  		tst.b	$28(a0)
000096A2 6600                       		bne.s	loc_9224
000096A4 4A28 0001                  		tst.b	1(a0)
000096A8 6A00 0000                  		bpl.w	DeleteObject
000096AC 6000 0000                  		bra.w	DisplaySprite
000096B0                            ; ===========================================================================
000096B0                            
000096B0                            loc_9224:				; XREF: Obj28_Index
000096B0 3028 0008                  		move.w	8(a0),d0
000096B4 9078 D008                  		sub.w	($FFFFD008).w,d0
000096B8 6500                       		bcs.s	loc_923C
000096BA 0440 0180                  		subi.w	#$180,d0
000096BE 6A00                       		bpl.s	loc_923C
000096C0 4A28 0001                  		tst.b	1(a0)
000096C4 6A00 0000                  		bpl.w	DeleteObject
000096C8                            
000096C8                            loc_923C:
000096C8 6000 0000                  		bra.w	DisplaySprite
000096CC                            ; ===========================================================================
000096CC                            
000096CC                            loc_9240:				; XREF: Obj28_Index
000096CC 4A28 0001                  		tst.b	1(a0)
000096D0 6A00 0000                  		bpl.w	DeleteObject
000096D4 5368 0036                  		subq.w	#1,$36(a0)
000096D8 6600 0000                  		bne.w	loc_925C
000096DC 117C 0002 0024             		move.b	#2,$24(a0)
000096E2 117C 0003 0018             		move.b	#3,$18(a0)
000096E8                            
000096E8                            loc_925C:
000096E8 6000 0000                  		bra.w	DisplaySprite
000096EC                            ; ===========================================================================
000096EC                            
000096EC                            loc_9260:				; XREF: Obj28_Index
000096EC 6100 0000                  		bsr.w	sub_9404
000096F0 6400                       		bcc.s	loc_927C
000096F2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000096F8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096FE 117C 000E 0024             		move.b	#$E,$24(a0)
00009704 6000 FF46                  		bra.w	loc_91C0
00009708                            ; ===========================================================================
00009708                            
00009708                            loc_927C:
00009708 6000 FFA6                  		bra.w	loc_9224
0000970C                            ; ===========================================================================
0000970C                            
0000970C                            loc_9280:				; XREF: Obj28_Index
0000970C 6100 0000                  		bsr.w	sub_9404
00009710 6A00                       		bpl.s	loc_92B6
00009712 4268 0010                  		clr.w	$10(a0)
00009716 4268 0032                  		clr.w	$32(a0)
0000971A 6100 0000                  		bsr.w	SpeedToPos
0000971E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009724 6100 0000                  		bsr.w	loc_93C4
00009728 6100 0000                  		bsr.w	loc_93EC
0000972C 5328 001E                  		subq.b	#1,$1E(a0)
00009730 6A00                       		bpl.s	loc_92B6
00009732 117C 0001 001E             		move.b	#1,$1E(a0)
00009738 5228 001A                  		addq.b	#1,$1A(a0)
0000973C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009742                            
00009742                            loc_92B6:
00009742 6000 FF6C                  		bra.w	loc_9224
00009746                            ; ===========================================================================
00009746                            
00009746                            loc_92BA:				; XREF: Obj28_Index
00009746 6100 0000                  		bsr.w	sub_9404
0000974A 6A00                       		bpl.s	loc_9310
0000974C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009752 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009758 117C 0004 0024             		move.b	#4,$24(a0)
0000975E 6000 FEB0                  		bra.w	loc_9184
00009762                            ; ===========================================================================
00009762                            
00009762                            loc_92D6:				; XREF: Obj28_Index
00009762 6100 0000                  		bsr.w	ObjectFall
00009766 117C 0001 001A             		move.b	#1,$1A(a0)
0000976C 4A68 0012                  		tst.w	$12(a0)
00009770 6B00                       		bmi.s	loc_9310
00009772 117C 0000 001A             		move.b	#0,$1A(a0)
00009778 4EB9 0000 0000             		jsr	ObjHitFloor
0000977E 4A41                       		tst.w	d1
00009780 6A00                       		bpl.s	loc_9310
00009782 4628 0029                  		not.b	$29(a0)
00009786 6600                       		bne.s	loc_9306
00009788 4468 0010                  		neg.w	$10(a0)
0000978C 0868 0000 0001             		bchg	#0,1(a0)
00009792                            
00009792                            loc_9306:
00009792 D368 000C                  		add.w	d1,$C(a0)
00009796 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000979C                            
0000979C                            loc_9310:
0000979C 6000 FF12                  		bra.w	loc_9224
000097A0                            ; ===========================================================================
000097A0                            
000097A0                            loc_9314:				; XREF: Obj28_Index
000097A0 6100 0000                  		bsr.w	sub_9404
000097A4 6A00                       		bpl.s	loc_932E
000097A6 4268 0010                  		clr.w	$10(a0)
000097AA 4268 0032                  		clr.w	$32(a0)
000097AE 6100 0000                  		bsr.w	ObjectFall
000097B2 6100 0000                  		bsr.w	loc_93C4
000097B6 6100 0000                  		bsr.w	loc_93EC
000097BA                            
000097BA                            loc_932E:
000097BA 6000 FEF4                  		bra.w	loc_9224
000097BE                            ; ===========================================================================
000097BE                            
000097BE                            loc_9332:				; XREF: Obj28_Index
000097BE 6100 0000                  		bsr.w	sub_9404
000097C2 6A00                       		bpl.s	loc_936C
000097C4 6100 0000                  		bsr.w	ObjectFall
000097C8 117C 0001 001A             		move.b	#1,$1A(a0)
000097CE 4A68 0012                  		tst.w	$12(a0)
000097D2 6B00                       		bmi.s	loc_936C
000097D4 117C 0000 001A             		move.b	#0,$1A(a0)
000097DA 4EB9 0000 0000             		jsr	ObjHitFloor
000097E0 4A41                       		tst.w	d1
000097E2 6A00                       		bpl.s	loc_936C
000097E4 4468 0010                  		neg.w	$10(a0)
000097E8 0868 0000 0001             		bchg	#0,1(a0)
000097EE D368 000C                  		add.w	d1,$C(a0)
000097F2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097F8                            
000097F8                            loc_936C:
000097F8 6000 FEB6                  		bra.w	loc_9224
000097FC                            ; ===========================================================================
000097FC                            
000097FC                            loc_9370:				; XREF: Obj28_Index
000097FC 6100 0000                  		bsr.w	sub_9404
00009800 6A00                       		bpl.s	loc_93C0
00009802 6100 0000                  		bsr.w	SpeedToPos
00009806 0668 0018 0012             		addi.w	#$18,$12(a0)
0000980C 4A68 0012                  		tst.w	$12(a0)
00009810 6B00                       		bmi.s	loc_93AA
00009812 4EB9 0000 0000             		jsr	ObjHitFloor
00009818 4A41                       		tst.w	d1
0000981A 6A00                       		bpl.s	loc_93AA
0000981C 4628 0029                  		not.b	$29(a0)
00009820 6600                       		bne.s	loc_93A0
00009822 4468 0010                  		neg.w	$10(a0)
00009826 0868 0000 0001             		bchg	#0,1(a0)
0000982C                            
0000982C                            loc_93A0:
0000982C D368 000C                  		add.w	d1,$C(a0)
00009830 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009836                            
00009836                            loc_93AA:
00009836 5328 001E                  		subq.b	#1,$1E(a0)
0000983A 6A00                       		bpl.s	loc_93C0
0000983C 117C 0001 001E             		move.b	#1,$1E(a0)
00009842 5228 001A                  		addq.b	#1,$1A(a0)
00009846 0228 0001 001A             		andi.b	#1,$1A(a0)
0000984C                            
0000984C                            loc_93C0:
0000984C 6000 FE62                  		bra.w	loc_9224
00009850                            ; ===========================================================================
00009850                            
00009850                            loc_93C4:
00009850 117C 0001 001A             		move.b	#1,$1A(a0)
00009856 4A68 0012                  		tst.w	$12(a0)
0000985A 6B00                       		bmi.s	locret_93EA
0000985C 117C 0000 001A             		move.b	#0,$1A(a0)
00009862 4EB9 0000 0000             		jsr	ObjHitFloor
00009868 4A41                       		tst.w	d1
0000986A 6A00                       		bpl.s	locret_93EA
0000986C D368 000C                  		add.w	d1,$C(a0)
00009870 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009876                            
00009876                            locret_93EA:
00009876 4E75                       		rts	
00009878                            ; ===========================================================================
00009878                            
00009878                            loc_93EC:
00009878 08E8 0000 0001             		bset	#0,1(a0)
0000987E 3028 0008                  		move.w	8(a0),d0
00009882 9078 D008                  		sub.w	($FFFFD008).w,d0
00009886 6400                       		bcc.s	locret_9402
00009888 08A8 0000 0001             		bclr	#0,1(a0)
0000988E                            
0000988E                            locret_9402:
0000988E 4E75                       		rts	
00009890                            
00009890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009890                            
00009890                            
00009890                            sub_9404:
00009890 3038 D008                  		move.w	($FFFFD008).w,d0
00009894 9068 0008                  		sub.w	8(a0),d0
00009898 0440 00B8                  		subi.w	#$B8,d0
0000989C 4E75                       		rts	
0000989E                            ; End of function sub_9404
0000989E                            
0000989E                            ; ===========================================================================
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            ; Object 29 - points that appear when you destroy something
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            
0000989E                            Obj29:					; XREF: Obj_Index
0000989E 7000                       		moveq	#0,d0
000098A0 1028 0024                  		move.b	$24(a0),d0
000098A4 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
000098A8 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
000098AC 6000 0000                  		bra.w	DisplaySprite
000098B0                            ; ===========================================================================
000098B0 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
000098B2 0000                       		dc.w Obj29_Slower-Obj29_Index
000098B4                            ; ===========================================================================
000098B4                            
000098B4                            Obj29_Main:				; XREF: Obj29_Index
000098B4 5428 0024                  		addq.b	#2,$24(a0)
000098B8 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
000098C0 317C 2797 0002             		move.w	#$2797,2(a0)
000098C6 117C 0004 0001             		move.b	#4,1(a0)
000098CC 117C 0001 0018             		move.b	#1,$18(a0)
000098D2 117C 0008 0019             		move.b	#8,$19(a0)
000098D8 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
000098DE                            
000098DE                            Obj29_Slower:				; XREF: Obj29_Index
000098DE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
000098E2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
000098E6 6100 0000                  		bsr.w	SpeedToPos
000098EA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
000098F0 4E75                       		rts	
000098F2                            ; ===========================================================================
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - animals
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            Map_obj28:
000098F2                            	include "_maps\obj28.asm"
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - animals
000098F2                            ; ---------------------------------------------------------------------------
000098F2 0000                       		dc.w byte_9472-Map_obj28
000098F4 0000                       		dc.w byte_9478-Map_obj28
000098F6 0000                       		dc.w byte_946C-Map_obj28
000098F8 01                         byte_946C:	dc.b 1
000098F9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000098FE 01                         byte_9472:	dc.b 1
000098FF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009904 01                         byte_9478:	dc.b 1
00009905 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000990A                            		even
0000990A                            		even
0000990A                            
0000990A                            Map_obj28a:
0000990A                            	include "_maps\obj28a.asm"
0000990A                            ; ---------------------------------------------------------------------------
0000990A                            ; Sprite mappings - animals
0000990A                            ; ---------------------------------------------------------------------------
0000990A 0000                       		dc.w byte_948A-Map_obj28a
0000990C 0000                       		dc.w byte_9490-Map_obj28a
0000990E 0000                       		dc.w byte_9484-Map_obj28a
00009910 01                         byte_9484:	dc.b 1
00009911 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009916 01                         byte_948A:	dc.b 1
00009917 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000991C 01                         byte_9490:	dc.b 1
0000991D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009922                            		even
00009922                            		even
00009922                            
00009922                            Map_obj28b:
00009922                            	include "_maps\obj28b.asm"
00009922                            ; ---------------------------------------------------------------------------
00009922                            ; Sprite mappings - animals
00009922                            ; ---------------------------------------------------------------------------
00009922 0000                       		dc.w byte_94A2-Map_obj28b
00009924 0000                       		dc.w byte_94A8-Map_obj28b
00009926 0000                       		dc.w byte_949C-Map_obj28b
00009928 01                         byte_949C:	dc.b 1
00009929 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000992E 01                         byte_94A2:	dc.b 1
0000992F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009934 01                         byte_94A8:	dc.b 1
00009935 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000993A                            		even
0000993A                            		even
0000993A                            
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            ; Sprite mappings - points that	appear when you	destroy	something
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            Map_obj29:
0000993A                            	include "_maps\obj29.asm"
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            ; Sprite mappings - points that	appear when you	destroy	something
0000993A                            ; ---------------------------------------------------------------------------
0000993A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000993E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009942 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009946 0000                       		dc.w byte_94E5-Map_obj29
00009948 01                         byte_94BC:	dc.b 1
00009949 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000994E 01                         byte_94C2:	dc.b 1
0000994F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009954 01                         byte_94C8:	dc.b 1
00009955 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000995A 01                         byte_94CE:	dc.b 1
0000995B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009960 01                         byte_94D4:	dc.b 1
00009961 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009966 02                         byte_94DA:	dc.b 2
00009967 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000996C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009971 02                         byte_94E5:	dc.b 2
00009972 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009977 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000997C                            		even
0000997C                            		even
0000997C                            
0000997C                            ; ===========================================================================
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            
0000997C                            Obj1F:					; XREF: Obj_Index
0000997C 7000                       		moveq	#0,d0
0000997E 1028 0024                  		move.b	$24(a0),d0
00009982 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009986 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000998A                            ; ===========================================================================
0000998A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000998C 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000998E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009990 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009992 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009994                            ; ===========================================================================
00009994                            
00009994                            Obj1F_Main:				; XREF: Obj1F_Index
00009994 117C 0010 0016             		move.b	#$10,$16(a0)
0000999A 117C 0008 0017             		move.b	#8,$17(a0)
000099A0 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000099A8 317C 0400 0002             		move.w	#$400,2(a0)
000099AE 117C 0004 0001             		move.b	#4,1(a0)
000099B4 117C 0003 0018             		move.b	#3,$18(a0)
000099BA 117C 0006 0020             		move.b	#6,$20(a0)
000099C0 117C 0015 0019             		move.b	#$15,$19(a0)
000099C6 6100 0000                  		bsr.w	ObjectFall
000099CA 4EB9 0000 0000             		jsr	ObjHitFloor
000099D0 4A41                       		tst.w	d1
000099D2 6A00                       		bpl.s	locret_955A
000099D4 D368 000C                  		add.w	d1,$C(a0)
000099D8 1143 0026                  		move.b	d3,$26(a0)
000099DC 317C 0000 0012             		move.w	#0,$12(a0)
000099E2 5428 0024                  		addq.b	#2,$24(a0)
000099E6                            
000099E6                            locret_955A:
000099E6 4E75                       		rts	
000099E8                            ; ===========================================================================
000099E8                            
000099E8                            Obj1F_Action:				; XREF: Obj1F_Index
000099E8 7000                       		moveq	#0,d0
000099EA 1028 0025                  		move.b	$25(a0),d0
000099EE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
000099F2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
000099F6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000099FC 6100 0000                  		bsr.w	AnimateSprite
00009A00 6000 0000                  		bra.w	MarkObjGone
00009A04                            ; ===========================================================================
00009A04 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009A06 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009A08                            ; ===========================================================================
00009A08                            
00009A08                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009A08 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009A0C 6A00                       		bpl.s	locret_95B6
00009A0E 4A28 0001                  		tst.b	1(a0)
00009A12 6A00                       		bpl.s	Obj1F_Move
00009A14 0868 0001 0032             		bchg	#1,$32(a0)
00009A1A 6600                       		bne.s	Obj1F_MakeFire
00009A1C                            
00009A1C                            Obj1F_Move:
00009A1C 5428 0025                  		addq.b	#2,$25(a0)
00009A20 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009A26 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009A2C 6100 0000                  		bsr.w	Obj1F_SetAni
00009A30 5600                       		addq.b	#3,d0
00009A32 1140 001C                  		move.b	d0,$1C(a0)
00009A36 0868 0000 0022             		bchg	#0,$22(a0)
00009A3C 6600                       		bne.s	locret_95B6
00009A3E 4468 0010                  		neg.w	$10(a0)		; change direction
00009A42                            
00009A42                            locret_95B6:
00009A42 4E75                       		rts	
00009A44                            ; ===========================================================================
00009A44                            
00009A44                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009A44 317C 003B 0030             		move.w	#$3B,$30(a0)
00009A4A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009A50 6100 0000                  		bsr.w	SingleObjLoad
00009A54 6600                       		bne.s	Obj1F_MakeFire2
00009A56 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009A5A 137C 0006 0024             		move.b	#6,$24(a1)
00009A60 3368 0008 0008             		move.w	8(a0),8(a1)
00009A66 0469 0010 0008             		subi.w	#$10,8(a1)
00009A6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A72 337C FF00 0010             		move.w	#-$100,$10(a1)
00009A78                            
00009A78                            Obj1F_MakeFire2:
00009A78 6100 0000                  		bsr.w	SingleObjLoad
00009A7C 6600                       		bne.s	locret_9618
00009A7E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009A82 137C 0006 0024             		move.b	#6,$24(a1)
00009A88 3368 0008 0008             		move.w	8(a0),8(a1)
00009A8E 0669 0010 0008             		addi.w	#$10,8(a1)
00009A94 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A9A 337C 0100 0010             		move.w	#$100,$10(a1)
00009AA0                            
00009AA0                            locret_9618:
00009AA0 4E75                       		rts	
00009AA2                            ; ===========================================================================
00009AA2                            
00009AA2                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009AA2 5368 0030                  		subq.w	#1,$30(a0)
00009AA6 6B00                       		bmi.s	loc_966E
00009AA8 6100 0000                  		bsr.w	SpeedToPos
00009AAC 0868 0000 0032             		bchg	#0,$32(a0)
00009AB2 6600                       		bne.s	loc_9654
00009AB4 3628 0008                  		move.w	8(a0),d3
00009AB8 0643 0010                  		addi.w	#$10,d3
00009ABC 0828 0000 0022             		btst	#0,$22(a0)
00009AC2 6700                       		beq.s	loc_9640
00009AC4 0443 0020                  		subi.w	#$20,d3
00009AC8                            
00009AC8                            loc_9640:
00009AC8 4EB9 0000 0000             		jsr	ObjHitFloor2
00009ACE 0C41 FFF8                  		cmpi.w	#-8,d1
00009AD2 6D00                       		blt.s	loc_966E
00009AD4 0C41 000C                  		cmpi.w	#$C,d1
00009AD8 6C00                       		bge.s	loc_966E
00009ADA 4E75                       		rts	
00009ADC                            ; ===========================================================================
00009ADC                            
00009ADC                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009ADC 4EB9 0000 0000             		jsr	ObjHitFloor
00009AE2 D368 000C                  		add.w	d1,$C(a0)
00009AE6 1143 0026                  		move.b	d3,$26(a0)
00009AEA 6100 0000                  		bsr.w	Obj1F_SetAni
00009AEE 5600                       		addq.b	#3,d0
00009AF0 1140 001C                  		move.b	d0,$1C(a0)
00009AF4 4E75                       		rts	
00009AF6                            ; ===========================================================================
00009AF6                            
00009AF6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009AF6 5528 0025                  		subq.b	#2,$25(a0)
00009AFA 317C 003B 0030             		move.w	#59,$30(a0)
00009B00 317C 0000 0010             		move.w	#0,$10(a0)
00009B06 6100 0000                  		bsr.w	Obj1F_SetAni
00009B0A 1140 001C                  		move.b	d0,$1C(a0)
00009B0E 4E75                       		rts	
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            
00009B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B10                            
00009B10                            
00009B10                            Obj1F_SetAni:				; XREF: loc_966E
00009B10 7000                       		moveq	#0,d0
00009B12 1628 0026                  		move.b	$26(a0),d3
00009B16 6B00                       		bmi.s	loc_96A4
00009B18 0C03 0006                  		cmpi.b	#6,d3
00009B1C 6500                       		bcs.s	locret_96A2
00009B1E 7001                       		moveq	#1,d0
00009B20 0828 0000 0022             		btst	#0,$22(a0)
00009B26 6600                       		bne.s	locret_96A2
00009B28 7002                       		moveq	#2,d0
00009B2A                            
00009B2A                            locret_96A2:
00009B2A 4E75                       		rts	
00009B2C                            ; ===========================================================================
00009B2C                            
00009B2C                            loc_96A4:				; XREF: Obj1F_SetAni
00009B2C 0C03 00FA                  		cmpi.b	#-6,d3
00009B30 6200                       		bhi.s	locret_96B6
00009B32 7002                       		moveq	#2,d0
00009B34 0828 0000 0022             		btst	#0,$22(a0)
00009B3A 6600                       		bne.s	locret_96B6
00009B3C 7001                       		moveq	#1,d0
00009B3E                            
00009B3E                            locret_96B6:
00009B3E 4E75                       		rts	
00009B40                            ; End of function Obj1F_SetAni
00009B40                            
00009B40                            ; ===========================================================================
00009B40                            
00009B40                            Obj1F_Delete:				; XREF: Obj1F_Index
00009B40 6100 0000                  		bsr.w	DeleteObject
00009B44 4E75                       		rts	
00009B46                            ; ===========================================================================
00009B46                            ; ---------------------------------------------------------------------------
00009B46                            ; Sub-object - missile that the	Crabmeat throws
00009B46                            ; ---------------------------------------------------------------------------
00009B46                            
00009B46                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009B46 5428 0024                  		addq.b	#2,$24(a0)
00009B4A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009B52 317C 0400 0002             		move.w	#$400,2(a0)
00009B58 117C 0004 0001             		move.b	#4,1(a0)
00009B5E 117C 0003 0018             		move.b	#3,$18(a0)
00009B64 117C 0087 0020             		move.b	#$87,$20(a0)
00009B6A 117C 0008 0019             		move.b	#8,$19(a0)
00009B70 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B76 117C 0007 001C             		move.b	#7,$1C(a0)
00009B7C                            
00009B7C                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009B7C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009B82 6100 0000                  		bsr.w	AnimateSprite
00009B86 6100 0000                  		bsr.w	ObjectFall
00009B8A 6100 0000                  		bsr.w	DisplaySprite
00009B8E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009B92 0640 00E0                  		addi.w	#$E0,d0
00009B96 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009B9A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009B9C 4E75                       		rts	
00009B9E                            ; ===========================================================================
00009B9E                            
00009B9E                            Obj1F_Delete2:
00009B9E 6000 0000                  		bra.w	DeleteObject
00009BA2                            ; ===========================================================================
00009BA2                            Ani_obj1F:
00009BA2                            	include "_anim\obj1F.asm"
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2                            ; Animation script - Crabmeat enemy
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009BA8 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009BAE 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009BB2 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009BB6 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009BBA 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009BBE 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009BC4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009BCA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009BD0 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009BD4 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009BD8                            		even
00009BD8                            		even
00009BD8                            
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            Map_obj1F:
00009BD8                            	include "_maps\obj1F.asm"
00009BD8                            Map_1514:
00009BD8 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009BDA 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009BDC 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009BDE 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009BE0 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009BE2 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009BE4 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009BE6 03                         Map_1514_E: 	dc.b $3
00009BE7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BEC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009BF1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009BF6 03                         Map_1514_1E: 	dc.b $3
00009BF7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BFC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C01 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C06 03                         Map_1514_2E: 	dc.b $3
00009C07 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C0C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C11 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C16 03                         Map_1514_3E: 	dc.b $3
00009C17 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C1C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C21 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C26 03                         Map_1514_4E: 	dc.b $3
00009C27 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C2C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C31 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C36 01                         Map_1514_5E: 	dc.b $1
00009C37 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009C3C 01                         Map_1514_64: 	dc.b $1
00009C3D F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009C42                            	even
00009C42                            	even
00009C42                            
00009C42                            ; ===========================================================================
00009C42                            ; ---------------------------------------------------------------------------
00009C42                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009C42                            ; ---------------------------------------------------------------------------
00009C42                            
00009C42                            Obj22:					; XREF: Obj_Index
00009C42 7000                       		moveq	#0,d0
00009C44 1028 0024                  		move.b	$24(a0),d0
00009C48 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009C4C 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009C50                            ; ===========================================================================
00009C50 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009C52 0000                       		dc.w Obj22_Action-Obj22_Index
00009C54 0000                       		dc.w Obj22_Delete-Obj22_Index
00009C56                            ; ===========================================================================
00009C56                            
00009C56                            Obj22_Main:				; XREF: Obj22_Index
00009C56 5428 0024                  		addq.b	#2,$24(a0)
00009C5A 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009C62 317C 0444 0002             		move.w	#$444,2(a0)
00009C68 117C 0004 0001             		move.b	#4,1(a0)
00009C6E 117C 0003 0018             		move.b	#3,$18(a0)
00009C74 117C 0008 0020             		move.b	#8,$20(a0)
00009C7A 117C 0018 0019             		move.b	#$18,$19(a0)
00009C80                            
00009C80                            Obj22_Action:				; XREF: Obj22_Index
00009C80 7000                       		moveq	#0,d0
00009C82 1028 0025                  		move.b	$25(a0),d0
00009C86 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009C8A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009C8E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009C94 6100 0000                  		bsr.w	AnimateSprite
00009C98 6000 0000                  		bra.w	MarkObjGone
00009C9C                            ; ===========================================================================
00009C9C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009C9E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009CA0                            ; ===========================================================================
00009CA0                            
00009CA0                            Obj22_Move:				; XREF: Obj22_Index2
00009CA0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009CA4 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009CA6 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009CAC 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009CAE 5428 0025                  		addq.b	#2,$25(a0)
00009CB2 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009CB8 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009CBE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009CC4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009CCA 6600                       		bne.s	locret_986C	; if not, branch
00009CCC 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009CD0                            
00009CD0                            locret_986C:
00009CD0 4E75                       		rts	
00009CD2                            ; ===========================================================================
00009CD2                            
00009CD2                            Obj22_Fire:				; XREF: Obj22_Move
00009CD2 6100 0000                  		bsr.w	SingleObjLoad
00009CD6 6600                       		bne.s	locret_98D0
00009CD8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009CDC 3368 0008 0008             		move.w	8(a0),8(a1)
00009CE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CE8 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009CEE 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009CF4 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009CFA 303C 0018                  		move.w	#$18,d0
00009CFE 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D04 6600                       		bne.s	loc_98AA	; if not, branch
00009D06 4440                       		neg.w	d0
00009D08 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009D0C                            
00009D0C                            loc_98AA:
00009D0C D169 0008                  		add.w	d0,8(a1)
00009D10 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009D16 337C 000E 0032             		move.w	#$E,$32(a1)
00009D1C 2348 003C                  		move.l	a0,$3C(a1)
00009D20 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009D26 317C 003B 0032             		move.w	#$3B,$32(a0)
00009D2C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009D32                            
00009D32                            locret_98D0:
00009D32 4E75                       		rts	
00009D34                            ; ===========================================================================
00009D34                            
00009D34                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009D34 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009D38 6B00                       		bmi.s	Obj22_ChgDir
00009D3A 6100 0000                  		bsr.w	SpeedToPos
00009D3E 4A28 0034                  		tst.b	$34(a0)
00009D42 6600                       		bne.s	locret_992A
00009D44 3038 D008                  		move.w	($FFFFD008).w,d0
00009D48 9068 0008                  		sub.w	8(a0),d0
00009D4C 6A00                       		bpl.s	Obj22_SetNrSonic
00009D4E 4440                       		neg.w	d0
00009D50                            
00009D50                            Obj22_SetNrSonic:
00009D50 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009D54 6400                       		bcc.s	locret_992A	; if not, branch
00009D56 4A28 0001                  		tst.b	1(a0)
00009D5A 6A00                       		bpl.s	locret_992A
00009D5C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009D62 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009D68 6000                       		bra.s	Obj22_Stop
00009D6A                            ; ===========================================================================
00009D6A                            
00009D6A                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009D6A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009D70 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009D76 317C 003B 0032             		move.w	#59,$32(a0)
00009D7C                            
00009D7C                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009D7C 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009D80 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009D86 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009D8C                            
00009D8C                            locret_992A:
00009D8C 4E75                       		rts	
00009D8E                            ; ===========================================================================
00009D8E                            
00009D8E                            Obj22_Delete:				; XREF: Obj22_Index
00009D8E 6100 0000                  		bsr.w	DeleteObject
00009D92 4E75                       		rts	
00009D94                            ; ===========================================================================
00009D94                            ; ---------------------------------------------------------------------------
00009D94                            ; Object 23 - missile that Buzz	Bomber throws
00009D94                            ; ---------------------------------------------------------------------------
00009D94                            
00009D94                            Obj23:					; XREF: Obj_Index
00009D94 7000                       		moveq	#0,d0
00009D96 1028 0024                  		move.b	$24(a0),d0
00009D9A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009D9E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009DA2                            ; ===========================================================================
00009DA2 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009DA4 0000                       		dc.w Obj23_Animate-Obj23_Index
00009DA6 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009DA8 0000                       		dc.w Obj23_Delete-Obj23_Index
00009DAA 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009DAC                            ; ===========================================================================
00009DAC                            
00009DAC                            Obj23_Main:				; XREF: Obj23_Index
00009DAC 5368 0032                  		subq.w	#1,$32(a0)
00009DB0 6A00                       		bpl.s	Obj23_ChkCancel
00009DB2 5428 0024                  		addq.b	#2,$24(a0)
00009DB6 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009DBE 317C 2444 0002             		move.w	#$2444,2(a0)
00009DC4 117C 0004 0001             		move.b	#4,1(a0)
00009DCA 117C 0003 0018             		move.b	#3,$18(a0)
00009DD0 117C 0008 0019             		move.b	#8,$19(a0)
00009DD6 0228 0003 0022             		andi.b	#3,$22(a0)
00009DDC 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009DE0 6700                       		beq.s	Obj23_Animate	; if not, branch
00009DE2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009DE8 117C 0087 0020             		move.b	#$87,$20(a0)
00009DEE 117C 0001 001C             		move.b	#1,$1C(a0)
00009DF4 6000                       		bra.s	Obj23_Animate2
00009DF6                            ; ===========================================================================
00009DF6                            
00009DF6                            Obj23_Animate:				; XREF: Obj23_Index
00009DF6 6100                       		bsr.s	Obj23_ChkCancel
00009DF8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009DFE 6100 0000                  		bsr.w	AnimateSprite
00009E02 6000 0000                  		bra.w	DisplaySprite
00009E06                            ; ---------------------------------------------------------------------------
00009E06                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009E06                            ; destroyed, and if it has, then cancel	the missile
00009E06                            ; ---------------------------------------------------------------------------
00009E06                            
00009E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E06                            
00009E06                            
00009E06                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009E06 2268 003C                  		movea.l	$3C(a0),a1
00009E0A 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009E0E 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009E10 4E75                       		rts	
00009E12                            ; End of function Obj23_ChkCancel
00009E12                            
00009E12                            ; ===========================================================================
00009E12                            
00009E12                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009E12 0828 0007 0022             		btst	#7,$22(a0)
00009E18 6600                       		bne.s	Obj23_Explode
00009E1A 117C 0087 0020             		move.b	#$87,$20(a0)
00009E20 117C 0001 001C             		move.b	#1,$1C(a0)
00009E26 6100 0000                  		bsr.w	SpeedToPos
00009E2A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E30 6100 0000                  		bsr.w	AnimateSprite
00009E34 6100 0000                  		bsr.w	DisplaySprite
00009E38 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E3C 0640 00E0                  		addi.w	#$E0,d0
00009E40 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E44 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009E46 4E75                       		rts	
00009E48                            ; ===========================================================================
00009E48                            
00009E48                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009E48 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009E4C 117C 0000 0024             		move.b	#0,$24(a0)
00009E52 6000 F2DE                  		bra.w	Obj24
00009E56                            ; ===========================================================================
00009E56                            
00009E56                            Obj23_Delete:				; XREF: Obj23_Index
00009E56 6100 0000                  		bsr.w	DeleteObject
00009E5A 4E75                       		rts	
00009E5C                            ; ===========================================================================
00009E5C                            
00009E5C                            Obj23_FromNewt:				; XREF: Obj23_Index
00009E5C 4A28 0001                  		tst.b	1(a0)
00009E60 6AF4                       		bpl.s	Obj23_Delete
00009E62 6100 0000                  		bsr.w	SpeedToPos
00009E66                            
00009E66                            Obj23_Animate2:				; XREF: Obj23_Main
00009E66 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E6C 6100 0000                  		bsr.w	AnimateSprite
00009E70 6100 0000                  		bsr.w	DisplaySprite
00009E74 4E75                       		rts	
00009E76                            ; ===========================================================================
00009E76                            Ani_obj22:
00009E76                            	include "_anim\obj22.asm"
00009E76                            ; ---------------------------------------------------------------------------
00009E76                            ; Animation script - Buzz Bomber enemy
00009E76                            ; ---------------------------------------------------------------------------
00009E76 0000                       		dc.w byte_9A1E-Ani_obj22
00009E78 0000                       		dc.w byte_9A22-Ani_obj22
00009E7A 0000                       		dc.w byte_9A26-Ani_obj22
00009E7C 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009E80 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009E84 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009E88                            		even
00009E88                            		even
00009E88                            
00009E88                            Ani_obj23:
00009E88                            	include "_anim\obj23.asm"
00009E88                            ; ---------------------------------------------------------------------------
00009E88                            ; Animation script - missile that Buzz Bomber throws
00009E88                            ; ---------------------------------------------------------------------------
00009E88 0000                       		dc.w byte_9A2E-Ani_obj23
00009E8A 0000                       		dc.w byte_9A32-Ani_obj23
00009E8C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009E90 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009E94                            		even
00009E94                            		even
00009E94                            
00009E94                            ; ---------------------------------------------------------------------------
00009E94                            ; Sprite mappings - Buzz Bomber	enemy
00009E94                            ; ---------------------------------------------------------------------------
00009E94                            Map_obj22:
00009E94                            	include "_maps\obj22.asm"
00009E94                            Map_e97a:
00009E94 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009E96 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009E98 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009E9A 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009E9C 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009E9E 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009EA0 06                         Map_e97a_C: 	dc.b $6
00009EA1 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EA6 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EAB 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EB0 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EB5 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009EBA F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009EBF 06                         Map_e97a_2B: 	dc.b $6
00009EC0 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EC5 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009ECA 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009ECF 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009ED4 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009ED9 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009EDE 07                         Map_e97a_4A: 	dc.b $7
00009EDF 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009EE4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EE9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EEE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EF3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EF8 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009EFD F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F02 07                         Map_e97a_6E: 	dc.b $7
00009F03 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009F08 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F0D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F12 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F17 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F1C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009F21 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F26 06                         Map_e97a_92: 	dc.b $6
00009F27 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F2C 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F31 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F36 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F3B F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F40 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F45 04                         Map_e97a_B1: 	dc.b $4
00009F46 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F4B 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F50 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F55 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F5A                            	even
00009F5A                            	even
00009F5A                            
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            ; Sprite mappings - missile that Buzz Bomber throws
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            Map_obj23:
00009F5A                            	include "_maps\obj23.asm"
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            ; Sprite mappings - missile that Buzz Bomber throws
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009F5E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009F62 01                         byte_9B0E:	dc.b 1
00009F63 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009F68 01                         byte_9B14:	dc.b 1
00009F69 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009F6E 01                         byte_9B1A:	dc.b 1
00009F6F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009F74 01                         byte_9B20:	dc.b 1
00009F75 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009F7A                            		even
00009F7A                            		even
00009F7A                            
00009F7A                            ; ===========================================================================
00009F7A                            ; ---------------------------------------------------------------------------
00009F7A                            ; Object 25 - rings
00009F7A                            ; ---------------------------------------------------------------------------
00009F7A                            
00009F7A                            Obj25:					; XREF: Obj_Index
00009F7A 7000                       		moveq	#0,d0
00009F7C 1028 0024                  		move.b	$24(a0),d0
00009F80 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009F84 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009F88                            ; ===========================================================================
00009F88 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009F8A 0000                       		dc.w Obj25_Animate-Obj25_Index
00009F8C 0000                       		dc.w Obj25_Collect-Obj25_Index
00009F8E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009F90 0000                       		dc.w Obj25_Delete-Obj25_Index
00009F92                            ; ---------------------------------------------------------------------------
00009F92                            ; Distances between rings (format: horizontal, vertical)
00009F92                            ; ---------------------------------------------------------------------------
00009F92 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009F94 1800                       		dc.b $18, 0		; horizontal normal
00009F96 2000                       		dc.b $20, 0		; horizontal wide
00009F98 0010                       		dc.b 0,	$10		; vertical tight
00009F9A 0018                       		dc.b 0,	$18		; vertical normal
00009F9C 0020                       		dc.b 0,	$20		; vertical wide
00009F9E 1010                       		dc.b $10, $10		; diagonal
00009FA0 1818                       		dc.b $18, $18
00009FA2 2020                       		dc.b $20, $20
00009FA4 F010                       		dc.b $F0, $10
00009FA6 E818                       		dc.b $E8, $18
00009FA8 E020                       		dc.b $E0, $20
00009FAA 1008                       		dc.b $10, 8
00009FAC 1810                       		dc.b $18, $10
00009FAE F008                       		dc.b $F0, 8
00009FB0 E810                       		dc.b $E8, $10
00009FB2                            ; ===========================================================================
00009FB2                            
00009FB2                            Obj25_Main:				; XREF: Obj25_Index
00009FB2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009FB6 7000                       		moveq	#0,d0
00009FB8 1028 0023                  		move.b	$23(a0),d0
00009FBC 45F2 0002                  		lea	2(a2,d0.w),a2
00009FC0 1812                       		move.b	(a2),d4
00009FC2 1228 0028                  		move.b	$28(a0),d1
00009FC6 1001                       		move.b	d1,d0
00009FC8 0241 0007                  		andi.w	#7,d1
00009FCC 0C41 0007                  		cmpi.w	#7,d1
00009FD0 6600                       		bne.s	loc_9B80
00009FD2 7206                       		moveq	#6,d1
00009FD4                            
00009FD4                            loc_9B80:
00009FD4 4841                       		swap	d1
00009FD6 323C 0000                  		move.w	#0,d1
00009FDA E808                       		lsr.b	#4,d0
00009FDC D040                       		add.w	d0,d0
00009FDE 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009FE2 4885                       		ext.w	d5
00009FE4 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009FE8 4886                       		ext.w	d6
00009FEA 2248                       		movea.l	a0,a1
00009FEC 3428 0008                  		move.w	8(a0),d2
00009FF0 3628 000C                  		move.w	$C(a0),d3
00009FF4 E20C                       		lsr.b	#1,d4
00009FF6 6500                       		bcs.s	loc_9C02
00009FF8 0892 0007                  		bclr	#7,(a2)
00009FFC 6000                       		bra.s	loc_9BBA
00009FFE                            ; ===========================================================================
00009FFE                            
00009FFE                            Obj25_MakeRings:
00009FFE 4841                       		swap	d1
0000A000 E20C                       		lsr.b	#1,d4
0000A002 6500                       		bcs.s	loc_9C02
0000A004 0892 0007                  		bclr	#7,(a2)
0000A008 6100 0000                  		bsr.w	SingleObjLoad
0000A00C 6600                       		bne.s	loc_9C0E
0000A00E                            
0000A00E                            loc_9BBA:				; XREF: Obj25_Main
0000A00E 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A012 5429 0024                  		addq.b	#2,$24(a1)
0000A016 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A01A 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A020 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A024 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A02C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A032 137C 0004 0001             		move.b	#4,1(a1)
0000A038 137C 0002 0018             		move.b	#2,$18(a1)
0000A03E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A044 137C 0008 0019             		move.b	#8,$19(a1)
0000A04A 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A050 1341 0034                  		move.b	d1,$34(a1)
0000A054                            
0000A054                            loc_9C02:
0000A054 5241                       		addq.w	#1,d1
0000A056 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A058 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A05A 4841                       		swap	d1
0000A05C 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A060                            
0000A060                            loc_9C0E:
0000A060 0812 0000                  		btst	#0,(a2)
0000A064 6600 0000                  		bne.w	DeleteObject
0000A068                            
0000A068                            Obj25_Animate:				; XREF: Obj25_Index
0000A068 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A06E 6100 0000                  		bsr.w	DisplaySprite
0000A072 3028 0032                  		move.w	$32(a0),d0
0000A076 0240 FF80                  		andi.w	#$FF80,d0
0000A07A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A07E 0441 0080                  		subi.w	#$80,d1
0000A082 0241 FF80                  		andi.w	#$FF80,d1
0000A086 9041                       		sub.w	d1,d0
0000A088 0C40 0280                  		cmpi.w	#$280,d0
0000A08C 6200                       		bhi.s	Obj25_Delete
0000A08E 4E75                       		rts	
0000A090                            ; ===========================================================================
0000A090                            
0000A090                            Obj25_Collect:				; XREF: Obj25_Index
0000A090 5428 0024                  		addq.b	#2,$24(a0)
0000A094 117C 0000 0020             		move.b	#0,$20(a0)
0000A09A 117C 0001 0018             		move.b	#1,$18(a0)
0000A0A0 6100 0000                  		bsr.w	CollectRing
0000A0A4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A0A8 7000                       		moveq	#0,d0
0000A0AA 1028 0023                  		move.b	$23(a0),d0
0000A0AE 1228 0034                  		move.b	$34(a0),d1
0000A0B2 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A0B6                            
0000A0B6                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A0B6 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A0BC 6100 0000                  		bsr.w	AnimateSprite
0000A0C0 6000 0000                  		bra.w	DisplaySprite
0000A0C4                            ; ===========================================================================
0000A0C4                            
0000A0C4                            Obj25_Delete:				; XREF: Obj25_Index
0000A0C4 6000 0000                  		bra.w	DeleteObject
0000A0C8                            
0000A0C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0C8                            
0000A0C8                            
0000A0C8                            CollectRing:				; XREF: Obj25_Collect
0000A0C8 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A0CC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A0D2 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A0D6 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A0DC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A0DE 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A0E4 6700                       		beq.s	loc_9CA4
0000A0E6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A0EC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A0EE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A0F4 6600                       		bne.s	Obj25_PlaySnd
0000A0F6                            
0000A0F6                            loc_9CA4:
0000A0F6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A0FA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A0FE 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A102                            
0000A102                            Obj25_PlaySnd:
0000A102 4EF9 0000 15BC             		jmp	(PlaySound_Special).l
0000A108                            ; End of function CollectRing
0000A108                            
0000A108                            ; ===========================================================================
0000A108                            ; ---------------------------------------------------------------------------
0000A108                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A108                            ; ---------------------------------------------------------------------------
0000A108                            
0000A108                            Obj37:					; XREF: Obj_Index
0000A108 7000                       		moveq	#0,d0
0000A10A 1028 0024                  		move.b	$24(a0),d0
0000A10E 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A112 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A116                            ; ===========================================================================
0000A116 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A118 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A11A 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A11C 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A11E 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A120                            ; ===========================================================================
0000A120                            
0000A120                            Obj37_CountRings:			; XREF: Obj37_Index
0000A120 2248                       		movea.l	a0,a1
0000A122 7A00                       		moveq	#0,d5
0000A124 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A128 7020                       		moveq	#32,d0
0000A12A BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A12C 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A12E 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A130                            
0000A130                            loc_9CDE:
0000A130 5345                       		subq.w	#1,d5
0000A132 383C 0288                  		move.w	#$288,d4
0000A136 6000                       		bra.s	Obj37_MakeRings
0000A138                            ; ===========================================================================
0000A138                            
0000A138                            Obj37_Loop:
0000A138 6100 0000                  		bsr.w	SingleObjLoad
0000A13C 6600 0000                  		bne.w	Obj37_ResetCounter
0000A140                            
0000A140                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A140 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A144 5429 0024                  		addq.b	#2,$24(a1)
0000A148 137C 0008 0016             		move.b	#8,$16(a1)
0000A14E 137C 0008 0017             		move.b	#8,$17(a1)
0000A154 3368 0008 0008             		move.w	8(a0),8(a1)
0000A15A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A160 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A168 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A16E 137C 0004 0001             		move.b	#4,1(a1)
0000A174 137C 0003 0018             		move.b	#3,$18(a1)
0000A17A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A180 137C 0008 0019             		move.b	#8,$19(a1)
0000A186 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A18C 4A44                       		tst.w	d4
0000A18E 6B00                       		bmi.s	loc_9D62
0000A190 3004                       		move.w	d4,d0
0000A192 6100 8A8E                  		bsr.w	CalcSine
0000A196 3404                       		move.w	d4,d2
0000A198 E04A                       		lsr.w	#8,d2
0000A19A E560                       		asl.w	d2,d0
0000A19C E561                       		asl.w	d2,d1
0000A19E 3400                       		move.w	d0,d2
0000A1A0 3601                       		move.w	d1,d3
0000A1A2 0604 0010                  		addi.b	#$10,d4
0000A1A6 6400                       		bcc.s	loc_9D62
0000A1A8 0444 0080                  		subi.w	#$80,d4
0000A1AC 6400                       		bcc.s	loc_9D62
0000A1AE 383C 0288                  		move.w	#$288,d4
0000A1B2                            
0000A1B2                            loc_9D62:
0000A1B2 3342 0010                  		move.w	d2,$10(a1)
0000A1B6 3343 0012                  		move.w	d3,$12(a1)
0000A1BA 4442                       		neg.w	d2
0000A1BC 4444                       		neg.w	d4
0000A1BE 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A1C2                            
0000A1C2                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A1C2 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A1C8 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A1CE 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A1D4 303C 00C6                  		move.w	#$C6,d0
0000A1D8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A1DE                            
0000A1DE                            Obj37_Bounce:				; XREF: Obj37_Index
0000A1DE 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A1E4 6100 0000                  		bsr.w	SpeedToPos
0000A1E8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A1EE 6B00                       		bmi.s	Obj37_ChkDel
0000A1F0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A1F4 D007                       		add.b	d7,d0
0000A1F6 0200 0003                  		andi.b	#3,d0
0000A1FA 6600                       		bne.s	Obj37_ChkDel
0000A1FC 4EB9 0000 0000             		jsr	ObjHitFloor
0000A202 4A41                       		tst.w	d1
0000A204 6A00                       		bpl.s	Obj37_ChkDel
0000A206 D368 000C                  		add.w	d1,$C(a0)
0000A20A 3028 0012                  		move.w	$12(a0),d0
0000A20E E440                       		asr.w	#2,d0
0000A210 9168 0012                  		sub.w	d0,$12(a0)
0000A214 4468 0012                  		neg.w	$12(a0)
0000A218                            
0000A218                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A218 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A21C 6700                       		beq.s	Obj37_Delete
0000A21E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A222 0640 00E0                  		addi.w	#$E0,d0
0000A226 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A22A 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A22C 6000 0000                  		bra.w	DisplaySprite
0000A230                            ; ===========================================================================
0000A230                            
0000A230                            Obj37_Collect:				; XREF: Obj37_Index
0000A230 5428 0024                  		addq.b	#2,$24(a0)
0000A234 117C 0000 0020             		move.b	#0,$20(a0)
0000A23A 117C 0001 0018             		move.b	#1,$18(a0)
0000A240 6100 FE86                  		bsr.w	CollectRing
0000A244                            
0000A244                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A244 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A24A 6100 0000                  		bsr.w	AnimateSprite
0000A24E 6000 0000                  		bra.w	DisplaySprite
0000A252                            ; ===========================================================================
0000A252                            
0000A252                            Obj37_Delete:				; XREF: Obj37_Index
0000A252 6000 0000                  		bra.w	DeleteObject
0000A256                            ; ===========================================================================
0000A256                            ; ---------------------------------------------------------------------------
0000A256                            ; Object 4B - giant ring for entry to special stage
0000A256                            ; ---------------------------------------------------------------------------
0000A256                            
0000A256                            Obj4B:					; XREF: Obj_Index
0000A256 7000                       		moveq	#0,d0
0000A258 1028 0024                  		move.b	$24(a0),d0
0000A25C 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A260 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A264                            ; ===========================================================================
0000A264 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A266 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A268 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A26A 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A26C                            ; ===========================================================================
0000A26C                            
0000A26C                            Obj4B_Main:				; XREF: Obj4B_Index
0000A26C 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A274 317C 2400 0002             		move.w	#$2400,2(a0)
0000A27A 0028 0004 0001             		ori.b	#4,1(a0)
0000A280 117C 0040 0019             		move.b	#$40,$19(a0)
0000A286 4A28 0001                  		tst.b	1(a0)
0000A28A 6A00                       		bpl.s	Obj4B_Animate
0000A28C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A292 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A296 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A29C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A29E 4E75                       		rts	
0000A2A0                            ; ===========================================================================
0000A2A0                            
0000A2A0                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A2A0 5428 0024                  		addq.b	#2,$24(a0)
0000A2A4 117C 0002 0018             		move.b	#2,$18(a0)
0000A2AA 117C 0052 0020             		move.b	#$52,$20(a0)
0000A2B0 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A2B6                            
0000A2B6                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A2B6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A2BC 3028 0008                  		move.w	8(a0),d0
0000A2C0 0240 FF80                  		andi.w	#$FF80,d0
0000A2C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2C8 0441 0080                  		subi.w	#$80,d1
0000A2CC 0241 FF80                  		andi.w	#$FF80,d1
0000A2D0 9041                       		sub.w	d1,d0
0000A2D2 0C40 0280                  		cmpi.w	#$280,d0
0000A2D6 6200 0000                  		bhi.w	DeleteObject
0000A2DA 6000 0000                  		bra.w	DisplaySprite
0000A2DE                            ; ===========================================================================
0000A2DE                            
0000A2DE                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A2DE 5528 0024                  		subq.b	#2,$24(a0)
0000A2E2 117C 0000 0020             		move.b	#0,$20(a0)
0000A2E8 6100 0000                  		bsr.w	SingleObjLoad
0000A2EC 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A2F0 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A2F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A2FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A300 2348 003C                  		move.l	a0,$3C(a1)
0000A304 3038 D008                  		move.w	($FFFFD008).w,d0
0000A308 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A30C 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A30E 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A314                            
0000A314                            Obj4B_PlaySnd:
0000A314 303C 00C3                  		move.w	#$C3,d0
0000A318 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A31E 6096                       		bra.s	Obj4B_Animate
0000A320                            ; ===========================================================================
0000A320                            
0000A320                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A320 6000 0000                  		bra.w	DeleteObject
0000A324                            ; ===========================================================================
0000A324                            ; ---------------------------------------------------------------------------
0000A324                            ; Object 7C - flash effect when	you collect the	giant ring
0000A324                            ; ---------------------------------------------------------------------------
0000A324                            
0000A324                            Obj7C:					; XREF: Obj_Index
0000A324 7000                       		moveq	#0,d0
0000A326 1028 0024                  		move.b	$24(a0),d0
0000A32A 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A32E 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A332                            ; ===========================================================================
0000A332 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A334 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A336 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A338                            ; ===========================================================================
0000A338                            
0000A338                            Obj7C_Main:				; XREF: Obj7C_Index
0000A338 5428 0024                  		addq.b	#2,$24(a0)
0000A33C 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A344 317C 2462 0002             		move.w	#$2462,2(a0)
0000A34A 0028 0004 0001             		ori.b	#4,1(a0)
0000A350 117C 0000 0018             		move.b	#0,$18(a0)
0000A356 117C 0020 0019             		move.b	#$20,$19(a0)
0000A35C 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A362                            
0000A362                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A362 6100                       		bsr.s	Obj7C_Collect
0000A364 3028 0008                  		move.w	8(a0),d0
0000A368 0240 FF80                  		andi.w	#$FF80,d0
0000A36C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A370 0441 0080                  		subi.w	#$80,d1
0000A374 0241 FF80                  		andi.w	#$FF80,d1
0000A378 9041                       		sub.w	d1,d0
0000A37A 0C40 0280                  		cmpi.w	#$280,d0
0000A37E 6200 0000                  		bhi.w	DeleteObject
0000A382 6000 0000                  		bra.w	DisplaySprite
0000A386                            
0000A386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A386                            
0000A386                            
0000A386                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A386 5328 001E                  		subq.b	#1,$1E(a0)
0000A38A 6A00                       		bpl.s	locret_9F76
0000A38C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A392 5228 001A                  		addq.b	#1,$1A(a0)
0000A396 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A39C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A39E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A3A4 6600                       		bne.s	locret_9F76	; if not, branch
0000A3A6 2268 003C                  		movea.l	$3C(a0),a1
0000A3AA 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A3B0 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A3B6 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A3BC 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A3C0 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A3C4                            
0000A3C4                            locret_9F76:
0000A3C4 4E75                       		rts	
0000A3C6                            ; ===========================================================================
0000A3C6                            
0000A3C6                            Obj7C_End:				; XREF: Obj7C_Collect
0000A3C6 5428 0024                  		addq.b	#2,$24(a0)
0000A3CA 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A3D0 588F                       		addq.l	#4,sp
0000A3D2 4E75                       		rts	
0000A3D4                            ; End of function Obj7C_Collect
0000A3D4                            
0000A3D4                            ; ===========================================================================
0000A3D4                            
0000A3D4                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A3D4 6000 0000                  		bra.w	DeleteObject
0000A3D8                            ; ===========================================================================
0000A3D8                            Ani_obj25:
0000A3D8                            	include "_anim\obj25.asm"
0000A3D8                            ; ---------------------------------------------------------------------------
0000A3D8                            ; Animation script - ring
0000A3D8                            ; ---------------------------------------------------------------------------
0000A3D8 0000                       		dc.w byte_9F8C-Ani_obj25
0000A3DA 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A3E0                            		even
0000A3E0                            		even
0000A3E0                            
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            ; Sprite mappings - rings
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            Map_obj25:
0000A3E0                            	include "_maps\obj25.asm"
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            ; Sprite mappings - rings
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A3E4 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A3E8 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A3EC 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A3F0 01                         byte_9FA2:	dc.b 1
0000A3F1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A3F6 01                         byte_9FA8:	dc.b 1
0000A3F7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A3FC 01                         byte_9FAE:	dc.b 1
0000A3FD F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A402 01                         byte_9FB4:	dc.b 1
0000A403 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A408 01                         byte_9FBA:	dc.b 1
0000A409 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A40E 01                         byte_9FC0:	dc.b 1
0000A40F F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A414 01                         byte_9FC6:	dc.b 1
0000A415 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A41A 01                         byte_9FCC:	dc.b 1
0000A41B F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A420                            		even
0000A420                            		even
0000A420                            
0000A420                            ; ---------------------------------------------------------------------------
0000A420                            ; Sprite mappings - giant ring
0000A420                            ; ---------------------------------------------------------------------------
0000A420                            Map_obj4B:
0000A420                            	include "_maps\obj4B.asm"
0000A420                            ; ---------------------------------------------------------------------------
0000A420                            ; Sprite mappings - giant ring
0000A420                            ; ---------------------------------------------------------------------------
0000A420 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A424 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A428 0A                         byte_9FDA:	dc.b $A
0000A429 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A42E E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A433 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A438 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A43D F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A442 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A447 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A44C 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A451 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A456 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A45B 08                         byte_A00D:	dc.b 8
0000A45C E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A461 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A466 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A46B F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A470 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A475 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A47A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A47F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A484 04                         byte_A036:	dc.b 4
0000A485 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A48A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A48F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A494 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A499 08                         byte_A04B:	dc.b 8
0000A49A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A49F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A4A4 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A4A9 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A4AE F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A4B3 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A4B8 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A4BD 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A4C2                            		even
0000A4C2                            		even
0000A4C2                            
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            Map_obj7C:
0000A4C2                            	include "_maps\obj7C.asm"
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A4C6 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A4CA 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A4CE 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A4D2 02                         byte_A084:	dc.b 2
0000A4D3 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A4D8 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A4DD 04                         byte_A08F:	dc.b 4
0000A4DE E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A4E3 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A4E8 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A4ED 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A4F2 04                         byte_A0A4:	dc.b 4
0000A4F3 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A4F8 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A4FD 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A502 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A507 04                         byte_A0B9:	dc.b 4
0000A508 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A50D E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A512 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A517 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A51C 04                         byte_A0CE:	dc.b 4
0000A51D E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A522 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A527 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A52C 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A531 04                         byte_A0E3:	dc.b 4
0000A532 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A537 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A53C 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A541 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A546 02                         byte_A0F8:	dc.b 2
0000A547 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A54C 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A551 04                         byte_A103:	dc.b 4
0000A552 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A557 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A55C 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A561 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A566                            		even
0000A566                            		even
0000A566                            
0000A566                            ; ===========================================================================
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            ; Object 26 - monitors
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            
0000A566                            Obj26:					; XREF: Obj_Index
0000A566 7000                       		moveq	#0,d0
0000A568 1028 0024                  		move.b	$24(a0),d0
0000A56C 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A570 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A574                            ; ===========================================================================
0000A574 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A576 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A578 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A57A 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A57C 0000                       		dc.w Obj26_Display-Obj26_Index
0000A57E                            ; ===========================================================================
0000A57E                            
0000A57E                            Obj26_Main:				; XREF: Obj26_Index
0000A57E 5428 0024                  		addq.b	#2,$24(a0)
0000A582 117C 000E 0016             		move.b	#$E,$16(a0)
0000A588 117C 000E 0017             		move.b	#$E,$17(a0)
0000A58E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A596 317C 0680 0002             		move.w	#$680,2(a0)
0000A59C 117C 0004 0001             		move.b	#4,1(a0)
0000A5A2 117C 0003 0018             		move.b	#3,$18(a0)
0000A5A8 117C 000F 0019             		move.b	#$F,$19(a0)
0000A5AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5B2 7000                       		moveq	#0,d0
0000A5B4 1028 0023                  		move.b	$23(a0),d0
0000A5B8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A5BE 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A5C4 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A5C6 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A5CC 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A5D2 4E75                       		rts	
0000A5D4                            ; ===========================================================================
0000A5D4                            
0000A5D4                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A5D4 117C 0046 0020             		move.b	#$46,$20(a0)
0000A5DA 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A5E0                            
0000A5E0                            Obj26_Solid:				; XREF: Obj26_Index
0000A5E0 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A5E4 6700                       		beq.s	loc_A1EC	; if not, branch
0000A5E6 5500                       		subq.b	#2,d0
0000A5E8 6600                       		bne.s	Obj26_Fall
0000A5EA 7200                       		moveq	#0,d1
0000A5EC 1228 0019                  		move.b	$19(a0),d1
0000A5F0 0641 000B                  		addi.w	#$B,d1
0000A5F4 6100 D41C                  		bsr.w	ExitPlatform
0000A5F8 0829 0003 0022             		btst	#3,$22(a1)
0000A5FE 6600 0000                  		bne.w	loc_A1BC
0000A602 4228 0025                  		clr.b	$25(a0)
0000A606 6000 0000                  		bra.w	Obj26_Animate
0000A60A                            ; ===========================================================================
0000A60A                            
0000A60A                            loc_A1BC:				; XREF: Obj26_Solid
0000A60A 363C 0010                  		move.w	#$10,d3
0000A60E 3428 0008                  		move.w	8(a0),d2
0000A612 6100 D95C                  		bsr.w	MvSonicOnPtfm
0000A616 6000 0000                  		bra.w	Obj26_Animate
0000A61A                            ; ===========================================================================
0000A61A                            
0000A61A                            Obj26_Fall:				; XREF: Obj26_Solid
0000A61A 6100 0000                  		bsr.w	ObjectFall
0000A61E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A624 4A41                       		tst.w	d1
0000A626 6A00 0000                  		bpl.w	Obj26_Animate
0000A62A D368 000C                  		add.w	d1,$C(a0)
0000A62E 4268 0012                  		clr.w	$12(a0)
0000A632 4228 0025                  		clr.b	$25(a0)
0000A636 6000 0000                  		bra.w	Obj26_Animate
0000A63A                            ; ===========================================================================
0000A63A                            
0000A63A                            loc_A1EC:				; XREF: Obj26_Solid
0000A63A 323C 001A                  		move.w	#$1A,d1
0000A63E 343C 000F                  		move.w	#$F,d2
0000A642 6100 0000                  		bsr.w	Obj26_SolidSides
0000A646 6700 0000                  		beq.w	loc_A25C
0000A64A 4A69 0012                  		tst.w	$12(a1)
0000A64E 6B00                       		bmi.s	loc_A20A
0000A650 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A656 6700                       		beq.s	loc_A25C	; if yes, branch
0000A658                            
0000A658                            loc_A20A:
0000A658 4A41                       		tst.w	d1
0000A65A 6A00                       		bpl.s	loc_A220
0000A65C 9769 000C                  		sub.w	d3,$C(a1)
0000A660 6100 D29E                  		bsr.w	loc_74AE
0000A664 117C 0002 0025             		move.b	#2,$25(a0)
0000A66A 6000 0000                  		bra.w	Obj26_Animate
0000A66E                            ; ===========================================================================
0000A66E                            
0000A66E                            loc_A220:
0000A66E 4A40                       		tst.w	d0
0000A670 6700 0000                  		beq.w	loc_A246
0000A674 6B00                       		bmi.s	loc_A230
0000A676 4A69 0010                  		tst.w	$10(a1)
0000A67A 6B00                       		bmi.s	loc_A246
0000A67C 6000                       		bra.s	loc_A236
0000A67E                            ; ===========================================================================
0000A67E                            
0000A67E                            loc_A230:
0000A67E 4A69 0010                  		tst.w	$10(a1)
0000A682 6A00                       		bpl.s	loc_A246
0000A684                            
0000A684                            loc_A236:
0000A684 9169 0008                  		sub.w	d0,8(a1)
0000A688 337C 0000 0014             		move.w	#0,$14(a1)
0000A68E 337C 0000 0010             		move.w	#0,$10(a1)
0000A694                            
0000A694                            loc_A246:
0000A694 0829 0001 0022             		btst	#1,$22(a1)
0000A69A 6600                       		bne.s	loc_A26A
0000A69C 08E9 0005 0022             		bset	#5,$22(a1)
0000A6A2 08E8 0005 0022             		bset	#5,$22(a0)
0000A6A8 6000                       		bra.s	Obj26_Animate
0000A6AA                            ; ===========================================================================
0000A6AA                            
0000A6AA                            loc_A25C:
0000A6AA 0828 0005 0022             		btst	#5,$22(a0)
0000A6B0 6700                       		beq.s	Obj26_Animate
0000A6B2 337C 0001 001C             		move.w	#1,$1C(a1)
0000A6B8                            
0000A6B8                            loc_A26A:
0000A6B8 08A8 0005 0022             		bclr	#5,$22(a0)
0000A6BE 08A9 0005 0022             		bclr	#5,$22(a1)
0000A6C4                            
0000A6C4                            Obj26_Animate:				; XREF: Obj26_Index
0000A6C4 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A6CA 6100 0000                  		bsr.w	AnimateSprite
0000A6CE                            
0000A6CE                            Obj26_Display:				; XREF: Obj26_Index
0000A6CE 6100 0000                  		bsr.w	DisplaySprite
0000A6D2 3028 0008                  		move.w	8(a0),d0
0000A6D6 0240 FF80                  		andi.w	#$FF80,d0
0000A6DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A6DE 0441 0080                  		subi.w	#$80,d1
0000A6E2 0241 FF80                  		andi.w	#$FF80,d1
0000A6E6 9041                       		sub.w	d1,d0
0000A6E8 0C40 0280                  		cmpi.w	#$280,d0
0000A6EC 6200 0000                  		bhi.w	DeleteObject
0000A6F0 4E75                       		rts	
0000A6F2                            ; ===========================================================================
0000A6F2                            
0000A6F2                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A6F2 5428 0024                  		addq.b	#2,$24(a0)
0000A6F6 117C 0000 0020             		move.b	#0,$20(a0)
0000A6FC 6100 0000                  		bsr.w	SingleObjLoad
0000A700 6600                       		bne.s	Obj26_Explode
0000A702 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A706 3368 0008 0008             		move.w	8(a0),8(a1)
0000A70C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A712 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A718 7400                       		moveq	#0,d2	; GMZ
0000A71A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A71C                            
0000A71C                            Obj26_Explode:
0000A71C 6100 0000                  		bsr.w	SingleObjLoad
0000A720 6600                       		bne.s	Obj26_SetBroken
0000A722 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A726 5429 0024                  		addq.b	#2,$24(a1)
0000A72A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A72E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A734 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A73A                            
0000A73A                            Obj26_NextExplosion:
0000A73A 5802                       		addq.b	#4,d2
0000A73C 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A740                            
0000A740                            Obj26_SetBroken:
0000A740 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A744 7000                       		moveq	#0,d0
0000A746 1028 0023                  		move.b	$23(a0),d0
0000A74A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A750 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A756 6000 0000                  		bra.w	DisplaySprite
0000A75A                            ; ===========================================================================
0000A75A                            ; ---------------------------------------------------------------------------
0000A75A                            ; Object 2E - contents of monitors
0000A75A                            ; ---------------------------------------------------------------------------
0000A75A                            
0000A75A                            Obj2E:					; XREF: Obj_Index
0000A75A 7000                       		moveq	#0,d0
0000A75C 1028 0024                  		move.b	$24(a0),d0
0000A760 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A764 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A768 6000 0000                  		bra.w	DisplaySprite
0000A76C                            ; ===========================================================================
0000A76C 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A76E 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A770 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A772                            ; ===========================================================================
0000A772                            
0000A772                            Obj2E_Main:				; XREF: Obj2E_Index
0000A772 5428 0024                  		addq.b	#2,$24(a0)
0000A776 317C 0680 0002             		move.w	#$680,2(a0)
0000A77C 117C 0024 0001             		move.b	#$24,1(a0)
0000A782 117C 0003 0018             		move.b	#3,$18(a0)
0000A788 117C 0008 0019             		move.b	#8,$19(a0)
0000A78E 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A794 7000                       		moveq	#0,d0
0000A796 1028 001C                  		move.b	$1C(a0),d0
0000A79A 5400                       		addq.b	#2,d0
0000A79C 1140 001A                  		move.b	d0,$1A(a0)
0000A7A0 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A7A6 D000                       		add.b	d0,d0
0000A7A8 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A7AC 5249                       		addq.w	#1,a1
0000A7AE 2149 0004                  		move.l	a1,4(a0)
0000A7B2                            
0000A7B2                            Obj2E_Move:				; XREF: Obj2E_Index
0000A7B2 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A7B6 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A7BA 6100 0000                  		bsr.w	SpeedToPos
0000A7BE 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A7C4 4E75                       		rts	
0000A7C6                            ; ===========================================================================
0000A7C6                            
0000A7C6                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A7C6 5428 0024                  		addq.b	#2,$24(a0)
0000A7CA 317C 001D 001E             		move.w	#29,$1E(a0)
0000A7D0 1028 001C                  		move.b	$1C(a0),d0
0000A7D4 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A7D8 6600                       		bne.s	Obj2E_ChkSonic
0000A7DA 4E75                       		rts			; Eggman monitor does nothing
0000A7DC                            ; ===========================================================================
0000A7DC                            
0000A7DC                            Obj2E_ChkSonic:
0000A7DC 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A7E0 6600                       		bne.s	Obj2E_ChkShoes
0000A7E2                            
0000A7E2                            ExtraLife:
0000A7E2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A7E6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A7EA 303C 0088                  		move.w	#$88,d0
0000A7EE 4EF9 0000 15B6             		jmp	(PlaySound).l	; play extra life music
0000A7F4                            ; ===========================================================================
0000A7F4                            
0000A7F4                            Obj2E_ChkShoes:
0000A7F4 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A7F8 6600                       		bne.s	Obj2E_ChkShield
0000A7FA 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A800 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A806 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A80C 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A812 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A818 303C 00E2                  		move.w	#$E2,d0
0000A81C 4EF9 0000 15B6             		jmp	(PlaySound).l	; Speed	up the music
0000A822                            ; ===========================================================================
0000A822                            
0000A822                            Obj2E_ChkShield:
0000A822 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A826 6600                       		bne.s	Obj2E_ChkInvinc
0000A828 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A82E 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A834 303C 00AF                  		move.w	#$AF,d0
0000A838 4EF9 0000 15B6             		jmp	(PlaySound).l	; play shield sound
0000A83E                            ; ===========================================================================
0000A83E                            
0000A83E                            Obj2E_ChkInvinc:
0000A83E 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A842 6600                       		bne.s	Obj2E_ChkRings
0000A844 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A84A 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A850 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A856 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A85C 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A862 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A868 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A86E 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A874 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A87A 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A880 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A884 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A886 303C 0087                  		move.w	#$87,d0
0000A88A 4EF9 0000 15B6             		jmp	(PlaySound).l	; play invincibility music
0000A890                            ; ===========================================================================
0000A890                            
0000A890                            Obj2E_NoMusic:
0000A890 4E75                       		rts	
0000A892                            ; ===========================================================================
0000A892                            
0000A892                            Obj2E_ChkRings:
0000A892 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A896 6600                       		bne.s	Obj2E_ChkS
0000A898 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A89E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A8A4 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A8AA 6500                       		bcs.s	Obj2E_RingSound
0000A8AC 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A8B2 6700 FF2E                  		beq.w	ExtraLife
0000A8B6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A8BC 6500                       		bcs.s	Obj2E_RingSound
0000A8BE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A8C4 6700 FF1C                  		beq.w	ExtraLife
0000A8C8                            
0000A8C8                            Obj2E_RingSound:
0000A8C8 303C 00B5                  		move.w	#$B5,d0
0000A8CC 4EF9 0000 15B6             		jmp	(PlaySound).l	; play ring sound
0000A8D2                            ; ===========================================================================
0000A8D2                            
0000A8D2                            Obj2E_ChkS:
0000A8D2 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A8D6 6600                       		bne.s	Obj2E_ChkEnd
0000A8D8                            		; nop	
0000A8D8 7201                       		moveq	#1,d1
0000A8DA B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A8DE                            
0000A8DE                            Obj2E_ChkEnd:
0000A8DE 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A8E0                            ; ===========================================================================
0000A8E0                            
0000A8E0                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A8E0 5368 001E                  		subq.w	#1,$1E(a0)
0000A8E4 6B00 0000                  		bmi.w	DeleteObject
0000A8E8 4E75                       		rts	
0000A8EA                            ; ---------------------------------------------------------------------------
0000A8EA                            ; Subroutine to	make the sides of a monitor solid
0000A8EA                            ; ---------------------------------------------------------------------------
0000A8EA                            
0000A8EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A8EA                            
0000A8EA                            
0000A8EA                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A8EA 43F8 D000                  		lea	($FFFFD000).w,a1
0000A8EE 3029 0008                  		move.w	8(a1),d0
0000A8F2 9068 0008                  		sub.w	8(a0),d0
0000A8F6 D041                       		add.w	d1,d0
0000A8F8 6B00                       		bmi.s	loc_A4E6
0000A8FA 3601                       		move.w	d1,d3
0000A8FC D643                       		add.w	d3,d3
0000A8FE B043                       		cmp.w	d3,d0
0000A900 6200                       		bhi.s	loc_A4E6
0000A902 1629 0016                  		move.b	$16(a1),d3
0000A906 4883                       		ext.w	d3
0000A908 D443                       		add.w	d3,d2
0000A90A 3629 000C                  		move.w	$C(a1),d3
0000A90E 9668 000C                  		sub.w	$C(a0),d3
0000A912 D642                       		add.w	d2,d3
0000A914 6B00                       		bmi.s	loc_A4E6
0000A916 D442                       		add.w	d2,d2
0000A918 B642                       		cmp.w	d2,d3
0000A91A 6400                       		bcc.s	loc_A4E6
0000A91C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A920 6B00                       		bmi.s	loc_A4E6
0000A922 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A928 6400                       		bcc.s	loc_A4E6
0000A92A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A92E 6600                       		bne.s	loc_A4E6
0000A930 B240                       		cmp.w	d0,d1
0000A932 6400                       		bcc.s	loc_A4DC
0000A934 D241                       		add.w	d1,d1
0000A936 9041                       		sub.w	d1,d0
0000A938                            
0000A938                            loc_A4DC:
0000A938 0C43 0010                  		cmpi.w	#$10,d3
0000A93C 6500                       		bcs.s	loc_A4EA
0000A93E                            
0000A93E                            loc_A4E2:
0000A93E 7201                       		moveq	#1,d1
0000A940 4E75                       		rts	
0000A942                            ; ===========================================================================
0000A942                            
0000A942                            loc_A4E6:
0000A942 7200                       		moveq	#0,d1
0000A944 4E75                       		rts	
0000A946                            ; ===========================================================================
0000A946                            
0000A946                            loc_A4EA:
0000A946 7200                       		moveq	#0,d1
0000A948 1228 0019                  		move.b	$19(a0),d1
0000A94C 5841                       		addq.w	#4,d1
0000A94E 3401                       		move.w	d1,d2
0000A950 D442                       		add.w	d2,d2
0000A952 D269 0008                  		add.w	8(a1),d1
0000A956 9268 0008                  		sub.w	8(a0),d1
0000A95A 6BE2                       		bmi.s	loc_A4E2
0000A95C B242                       		cmp.w	d2,d1
0000A95E 64DE                       		bcc.s	loc_A4E2
0000A960 72FF                       		moveq	#-1,d1
0000A962 4E75                       		rts	
0000A964                            ; End of function Obj26_SolidSides
0000A964                            
0000A964                            ; ===========================================================================
0000A964                            Ani_obj26:
0000A964                            	include "_anim\obj26.asm"
0000A964                            ; ---------------------------------------------------------------------------
0000A964                            ; Animation script - monitors
0000A964                            ; ---------------------------------------------------------------------------
0000A964 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A96A 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A970 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A976 0000                       		dc.w byte_A582-Ani_obj26
0000A978 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A97E 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A98A 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A996 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A9A2 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A9AE 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A9BA 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A9C6 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A9D2 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A9DE 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A9E6                            		even
0000A9E6                            		even
0000A9E6                            
0000A9E6                            ; ---------------------------------------------------------------------------
0000A9E6                            ; Sprite mappings - monitors
0000A9E6                            ; ---------------------------------------------------------------------------
0000A9E6                            Map_obj26:
0000A9E6                            	include "_maps\obj26.asm"
0000A9E6                            ; ================================================================================
0000A9E6                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000A9E6                            ; ================================================================================
0000A9E6                            
0000A9E6                            DATAY1U343IF3L:
0000A9E6 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000A9EA 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000A9EE 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000A9F2 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000A9F6 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000A9FA 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000A9FE 05                         DATAY1U343IF3L_0: dc.b $5
0000A9FF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA04 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA09 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA0E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA13 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA18 06                         DATAY1U343IF3L_1: dc.b $6
0000AA19 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AA1E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA23 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA28 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA2D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA32 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA37 05                         DATAY1U343IF3L_2: dc.b $5
0000AA38 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA3D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA42 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA47 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA4C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA51 05                         DATAY1U343IF3L_3: dc.b $5
0000AA52 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA57 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA5C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA61 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA66 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA6B 06                         DATAY1U343IF3L_4: dc.b $6
0000AA6C F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AA71 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA76 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA7B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA80 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA85 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA8A 06                         DATAY1U343IF3L_5: dc.b $6
0000AA8B F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AA90 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA95 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA9A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA9F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAA4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAA9 06                         DATAY1U343IF3L_6: dc.b $6
0000AAAA F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AAAF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAB4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAB9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AABE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAC3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAC8 06                         DATAY1U343IF3L_7: dc.b $6
0000AAC9 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AACE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAD3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAD8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AADD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAE2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAE7 06                         DATAY1U343IF3L_8: dc.b $6
0000AAE8 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AAED E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAF2 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAF7 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAFC 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB01 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB06 06                         DATAY1U343IF3L_9: dc.b $6
0000AB07 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AB0C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB11 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB16 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB1B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB20 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB25 05                         DATAY1U343IF3L_A: dc.b $5
0000AB26 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB2B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB30 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB35 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB3A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB3F 01                         DATAY1U343IF3L_B: dc.b $1
0000AB40 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AB46 00                         	even
0000AB46 00                         	even
0000AB46                            
0000AB46                            ; ===========================================================================
0000AB46                            ; ---------------------------------------------------------------------------
0000AB46                            ; Object 0E - Sonic on the title screen
0000AB46                            ; ---------------------------------------------------------------------------
0000AB46                            
0000AB46                            Obj0E:					; XREF: Obj_Index
0000AB46 7000                       		moveq	#0,d0
0000AB48 1028 0024                  		move.b	$24(a0),d0
0000AB4C 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AB50 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AB54                            ; ===========================================================================
0000AB54 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AB56 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AB58 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AB5A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AB5C                            ; ===========================================================================
0000AB5C                            
0000AB5C                            Obj0E_Main:				; XREF: Obj0E_Index
0000AB5C 5428 0024                  		addq.b	#2,$24(a0)
0000AB60 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AB66 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AB6C 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AB74 317C 2300 0002             		move.w	#$2300,2(a0)
0000AB7A 117C 0001 0018             		move.b	#1,$18(a0)
0000AB80 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AB86 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AB8C 6100 0000                  		bsr.w	AnimateSprite
0000AB90                            
0000AB90                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AB90 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AB94 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AB96 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AB9A 6000 0000                  		bra.w	DisplaySprite
0000AB9E                            ; ===========================================================================
0000AB9E                            
0000AB9E                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AB9E 4E75                       		rts	
0000ABA0                            ; ===========================================================================
0000ABA0                            
0000ABA0                            Obj0E_Move:				; XREF: Obj0E_Index
0000ABA0 5168 000A                  		subq.w	#8,$A(a0)
0000ABA4 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000ABAA 6600                       		bne.s	Obj0E_Display
0000ABAC 5428 0024                  		addq.b	#2,$24(a0)
0000ABB0                            
0000ABB0                            Obj0E_Display:
0000ABB0 6000 0000                  		bra.w	DisplaySprite
0000ABB4                            ; ===========================================================================
0000ABB4 4E75                       		rts	
0000ABB6                            ; ===========================================================================
0000ABB6                            
0000ABB6                            Obj0E_Animate:				; XREF: Obj0E_Index
0000ABB6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ABBC 6100 0000                  		bsr.w	AnimateSprite
0000ABC0 6000 0000                  		bra.w	DisplaySprite
0000ABC4                            ; ===========================================================================
0000ABC4 4E75                       		rts	
0000ABC6                            ; ===========================================================================
0000ABC6                            ; ---------------------------------------------------------------------------
0000ABC6                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000ABC6                            ; ---------------------------------------------------------------------------
0000ABC6                            
0000ABC6                            Obj0F:					; XREF: Obj_Index
0000ABC6 7000                       		moveq	#0,d0
0000ABC8 1028 0024                  		move.b	$24(a0),d0
0000ABCC 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000ABD0 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000ABD4 6000 0000                  		bra.w	DisplaySprite
0000ABD8                            ; ===========================================================================
0000ABD8 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000ABDA 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000ABDC 0000                       		dc.w locret_A6F8-Obj0F_Index
0000ABDE                            ; ===========================================================================
0000ABDE                            
0000ABDE                            Obj0F_Main:				; XREF: Obj0F_Index
0000ABDE 5428 0024                  		addq.b	#2,$24(a0)
0000ABE2 317C 00D0 0008             		move.w	#$D0,8(a0)
0000ABE8 317C 0130 000A             		move.w	#$130,$A(a0)
0000ABEE 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000ABF6 317C 0200 0002             		move.w	#$200,2(a0)
0000ABFC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AC02 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AC04 5428 0024                  		addq.b	#2,$24(a0)
0000AC08 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AC0E 6600                       		bne.s	locret_A6F8	; if not, branch
0000AC10 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AC16 317C 0170 0008             		move.w	#$170,8(a0)
0000AC1C 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AC22                            
0000AC22                            locret_A6F8:				; XREF: Obj0F_Index
0000AC22 4E75                       		rts	
0000AC24                            ; ===========================================================================
0000AC24                            
0000AC24                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AC24 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AC2A 6000 0000                  		bra.w	AnimateSprite
0000AC2E                            ; ===========================================================================
0000AC2E                            Ani_obj0E:
0000AC2E                            	include "_anim\obj0E.asm"
0000AC2E                            ; ---------------------------------------------------------------------------
0000AC2E                            ; Animation script - Sonic on the title screen
0000AC2E                            ; ---------------------------------------------------------------------------
0000AC2E 0000                       		dc.w byte_A706-Ani_obj0E
0000AC30 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AC3C                            		even
0000AC3C                            		even
0000AC3C                            
0000AC3C                            Ani_obj0F:
0000AC3C                            	include "_anim\obj0F.asm"
0000AC3C                            ; ---------------------------------------------------------------------------
0000AC3C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AC3C                            ; ---------------------------------------------------------------------------
0000AC3C 0000                       		dc.w byte_A714-Ani_obj0F
0000AC3E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AC42                            		even
0000AC42                            		even
0000AC42                            
0000AC42                            ; ---------------------------------------------------------------------------
0000AC42                            ; Subroutine to	animate	a sprite using an animation script
0000AC42                            ; ---------------------------------------------------------------------------
0000AC42                            
0000AC42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC42                            
0000AC42                            
0000AC42                            AnimateSprite:
0000AC42 7000                       		moveq	#0,d0
0000AC44 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AC48 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AC4C 6700                       		beq.s	Anim_Run	; if not, branch
0000AC4E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AC52 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AC58 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AC5E                            
0000AC5E                            Anim_Run:
0000AC5E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AC62 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AC64 D040                       		add.w	d0,d0
0000AC66 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AC6A 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AC6E 7200                       		moveq	#0,d1
0000AC70 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AC74 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AC78 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AC7A                            
0000AC7A                            Anim_Next:
0000AC7A 1200                       		move.b	d0,d1
0000AC7C 0200 001F                  		andi.b	#$1F,d0
0000AC80 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AC84 1028 0022                  		move.b	$22(a0),d0
0000AC88 E719                       		rol.b	#3,d1
0000AC8A B101                       		eor.b	d0,d1
0000AC8C 0201 0003                  		andi.b	#3,d1
0000AC90 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AC96 8328 0001                  		or.b	d1,1(a0)
0000AC9A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AC9E                            
0000AC9E                            Anim_Wait:
0000AC9E 4E75                       		rts	
0000ACA0                            ; ===========================================================================
0000ACA0                            
0000ACA0                            Anim_End_FF:
0000ACA0 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000ACA2 6600                       		bne.s	Anim_End_FE	; if not, branch
0000ACA4 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000ACAA 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000ACAE 60CA                       		bra.s	Anim_Next
0000ACB0                            ; ===========================================================================
0000ACB0                            
0000ACB0                            Anim_End_FE:
0000ACB0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000ACB2 6600                       		bne.s	Anim_End_FD	; if not, branch
0000ACB4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000ACB8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000ACBC 9200                       		sub.b	d0,d1
0000ACBE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000ACC2 60B6                       		bra.s	Anim_Next
0000ACC4                            ; ===========================================================================
0000ACC4                            
0000ACC4                            Anim_End_FD:
0000ACC4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000ACC6 6600                       		bne.s	Anim_End_FC	; if not, branch
0000ACC8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000ACCE                            
0000ACCE                            Anim_End_FC:
0000ACCE 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000ACD0 6600                       		bne.s	Anim_End_FB	; if not, branch
0000ACD2 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000ACD6                            
0000ACD6                            Anim_End_FB:
0000ACD6 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000ACD8 6600                       		bne.s	Anim_End_FA	; if not, branch
0000ACDA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000ACE0 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000ACE4                            
0000ACE4                            Anim_End_FA:
0000ACE4 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000ACE6 6600                       		bne.s	Anim_End	; if not, branch
0000ACE8 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000ACEC                            
0000ACEC                            Anim_End:
0000ACEC 4E75                       		rts	
0000ACEE                            ; End of function AnimateSprite
0000ACEE                            
0000ACEE                            ; ===========================================================================
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            Map_obj0F:
0000ACEE                            	include "_maps\obj0F.asm"
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE 0000                       		dc.w byte_A7CD-Map_obj0F
0000ACF0 0000                       		dc.w byte_A7CC-Map_obj0F
0000ACF2 0000                       		dc.w byte_A7EB-Map_obj0F
0000ACF4 0000                       		dc.w byte_A882-Map_obj0F
0000ACF6 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000ACF7 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000ACFC 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AD01 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AD06 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AD0B 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AD10 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AD15 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AD16 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD1B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD20 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD25 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD2A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD2F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD34 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD39 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD3E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD43 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD48 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD4D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD52 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD57 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD5C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD61 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD66 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD6B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD70 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD75 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD7A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD7F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD84 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD89 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD8E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD93 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD98 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD9D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADAC 01                         byte_A882:	dc.b 1			; "TM"
0000ADAD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000ADB2                            		even
0000ADB2                            		even
0000ADB2                            
0000ADB2                            ; ---------------------------------------------------------------------------
0000ADB2                            ; Sprite mappings - Sonic on the title screen
0000ADB2                            ; ---------------------------------------------------------------------------
0000ADB2                            Map_obj0E:
0000ADB2                            	include "_maps\obj0E.asm"
0000ADB2                            ; ================================================================================
0000ADB2                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000ADB2                            ; ================================================================================
0000ADB2                            
0000ADB2                            DATAGKI0HYDQBXP:
0000ADB2 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000ADB6 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000ADBA 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000ADBE 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000ADC2 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000ADC3 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000ADC8 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000ADCD 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000ADD2 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000ADD7 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000ADDC 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000ADE1 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000ADE6 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000ADEB 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000ADEC 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000ADF1 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000ADF6 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000ADFB 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000AE00 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000AE05 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000AE0A 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000AE0F 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000AE14 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000AE19 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000AE1E 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000AE23 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000AE24 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000AE29 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000AE2E F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000AE33 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000AE38 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000AE3D 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000AE42 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000AE47 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000AE4C 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000AE51 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000AE56 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000AE5B 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000AE5C FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000AE61 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000AE66 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000AE6B 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000AE70 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000AE75 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000AE7A 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000AE7F 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000AE84 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000AE89 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000AE8E 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000AE8F F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000AE94 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000AE99 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000AE9E 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000AEA3 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000AEA8 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000AEAD 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000AEB2 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000AEB7 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000AEBC 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000AEC1 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000AEC6 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000AECB 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000AED0 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000AED5 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000AEDA 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000AEDF 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000AEE0 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000AEE5 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000AEEA 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000AEEF 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000AEF4 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000AEF9 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000AEFE 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000AF03 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000AF08 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000AF0D 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000AF12 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000AF17 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000AF18 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000AF1D 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000AF22 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000AF27 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000AF2C 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000AF31 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000AF36 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000AF3B 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000AF40 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000AF45 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000AF4A 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000AF4F 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000AF54 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000AF59 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000AF5E 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000AF63 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000AF64 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000AF69 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000AF6E 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000AF73 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000AF78 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000AF7D 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000AF82 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000AF87 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000AF8C 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000AF91 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000AF96 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000AF9B 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000AFA0 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000AFA5 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000AFAA 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000AFB0 00                         	even
0000AFB0 00                         	even
0000AFB0                            
0000AFB0                            ; ===========================================================================
0000AFB0                            ; ---------------------------------------------------------------------------
0000AFB0                            ; Object 2B - Chopper enemy (GHZ)
0000AFB0                            ; ---------------------------------------------------------------------------
0000AFB0                            
0000AFB0                            Obj2B:					; XREF: Obj_Index
0000AFB0 7000                       		moveq	#0,d0
0000AFB2 1028 0024                  		move.b	$24(a0),d0
0000AFB6 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000AFBA 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000AFBE 6000 0000                  		bra.w	MarkObjGone
0000AFC2                            ; ===========================================================================
0000AFC2 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AFC4 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AFC6                            ; ===========================================================================
0000AFC6                            
0000AFC6                            Obj2B_Main:				; XREF: Obj2B_Index
0000AFC6 5428 0024                  		addq.b	#2,$24(a0)
0000AFCA 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000AFD2 317C 047B 0002             		move.w	#$47B,2(a0)
0000AFD8 117C 0004 0001             		move.b	#4,1(a0)
0000AFDE 117C 0004 0018             		move.b	#4,$18(a0)
0000AFE4 117C 0009 0020             		move.b	#9,$20(a0)
0000AFEA 117C 0010 0019             		move.b	#$10,$19(a0)
0000AFF0 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AFF6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000AFFC                            
0000AFFC                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000AFFC 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B002 6100 FC3E                  		bsr.w	AnimateSprite
0000B006 6100 0000                  		bsr.w	SpeedToPos
0000B00A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B010 3028 0030                  		move.w	$30(a0),d0
0000B014 B068 000C                  		cmp.w	$C(a0),d0
0000B018 6400                       		bcc.s	Obj2B_ChgAni
0000B01A 3140 000C                  		move.w	d0,$C(a0)
0000B01E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B024                            
0000B024                            Obj2B_ChgAni:
0000B024 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B02A 0440 00C0                  		subi.w	#$C0,d0
0000B02E B068 000C                  		cmp.w	$C(a0),d0
0000B032 6400                       		bcc.s	locret_ABB6
0000B034 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B03A 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B03E 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B040 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B046                            
0000B046                            locret_ABB6:
0000B046 4E75                       		rts	
0000B048                            ; ===========================================================================
0000B048                            Ani_obj2B:
0000B048                            	include "_anim\obj2B.asm"
0000B048                            ; ---------------------------------------------------------------------------
0000B048                            ; Animation script - Chopper enemy
0000B048                            ; ---------------------------------------------------------------------------
0000B048 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B04A 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B04C 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B04E 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B052 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B056 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B05A 00                         		even
0000B05A 00                         		even
0000B05A                            
0000B05A                            ; ---------------------------------------------------------------------------
0000B05A                            ; Sprite mappings - Chopper enemy (GHZ)
0000B05A                            ; ---------------------------------------------------------------------------
0000B05A                            Map_obj2B:
0000B05A                            	include "_maps\obj2B.asm"
0000B05A                            ; ---------------------------------------------------------------------------
0000B05A                            ; Sprite mappings - Chopper enemy (GHZ)
0000B05A                            ; ---------------------------------------------------------------------------
0000B05A 0000                       		dc.w byte_ABCE-Map_obj2B
0000B05C 0000                       		dc.w byte_ABD4-Map_obj2B
0000B05E 01                         byte_ABCE:	dc.b 1
0000B05F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B064 01                         byte_ABD4:	dc.b 1
0000B065 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B06A                            		even
0000B06A                            		even
0000B06A                            
0000B06A                            ; ===========================================================================
0000B06A                            ; ---------------------------------------------------------------------------
0000B06A                            ; Object 2C - Jaws enemy (LZ)
0000B06A                            ; ---------------------------------------------------------------------------
0000B06A                            
0000B06A                            Obj2C:					; XREF: Obj_Index
0000B06A 7000                       		moveq	#0,d0
0000B06C 1028 0024                  		move.b	$24(a0),d0
0000B070 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B074 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B078                            ; ===========================================================================
0000B078 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B07A 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B07C                            ; ===========================================================================
0000B07C                            
0000B07C                            Obj2C_Main:				; XREF: Obj2C_Index
0000B07C 5428 0024                  		addq.b	#2,$24(a0)
0000B080 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B088 317C 2486 0002             		move.w	#$2486,2(a0)
0000B08E 0028 0004 0001             		ori.b	#4,1(a0)
0000B094 117C 000A 0020             		move.b	#$A,$20(a0)
0000B09A 117C 0004 0018             		move.b	#4,$18(a0)
0000B0A0 117C 0010 0019             		move.b	#$10,$19(a0)
0000B0A6 7000                       		moveq	#0,d0
0000B0A8 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B0AC ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B0AE 5340                       		subq.w	#1,d0
0000B0B0 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B0B4 3140 0032                  		move.w	d0,$32(a0)
0000B0B8 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B0BE 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B0C4 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B0C6 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B0CA                            
0000B0CA                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B0CA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B0CE 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B0D0 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B0D6 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B0DA 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B0E0 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B0E6                            
0000B0E6                            Obj2C_Animate:
0000B0E6 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B0EC 6100 FB54                  		bsr.w	AnimateSprite
0000B0F0 6100 0000                  		bsr.w	SpeedToPos
0000B0F4 6000 0000                  		bra.w	MarkObjGone
0000B0F8                            ; ===========================================================================
0000B0F8                            Ani_obj2C:
0000B0F8                            	include "_anim\obj2C.asm"
0000B0F8                            ; ---------------------------------------------------------------------------
0000B0F8                            ; Animation script - Jaws enemy
0000B0F8                            ; ---------------------------------------------------------------------------
0000B0F8 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B0FA 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B100                            		even
0000B100                            		even
0000B100                            
0000B100                            ; ---------------------------------------------------------------------------
0000B100                            ; Sprite mappings - Jaws enemy (LZ)
0000B100                            ; ---------------------------------------------------------------------------
0000B100                            Map_obj2C:
0000B100                            	include "_maps\obj2C.asm"
0000B100                            ; ---------------------------------------------------------------------------
0000B100                            ; Sprite mappings - Jaws enemy (LZ)
0000B100                            ; ---------------------------------------------------------------------------
0000B100 0000                       		dc.w byte_AC78-Map_obj2C
0000B102 0000                       		dc.w byte_AC83-Map_obj2C
0000B104 0000                       		dc.w byte_AC8E-Map_obj2C
0000B106 0000                       		dc.w byte_AC99-Map_obj2C
0000B108 02                         byte_AC78:	dc.b 2
0000B109 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B10E F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B113 02                         byte_AC83:	dc.b 2
0000B114 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B119 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B11E 02                         byte_AC8E:	dc.b 2
0000B11F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B124 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B129 02                         byte_AC99:	dc.b 2
0000B12A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B12F F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B134                            		even
0000B134                            		even
0000B134                            
0000B134                            ; ===========================================================================
0000B134                            ; ---------------------------------------------------------------------------
0000B134                            ; Object 2D - Burrobot enemy (LZ)
0000B134                            ; ---------------------------------------------------------------------------
0000B134                            
0000B134                            Obj2D:					; XREF: Obj_Index
0000B134 7000                       		moveq	#0,d0
0000B136 1028 0024                  		move.b	$24(a0),d0
0000B13A 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B13E 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B142                            ; ===========================================================================
0000B142 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B144 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B146                            ; ===========================================================================
0000B146                            
0000B146                            Obj2D_Main:				; XREF: Obj2D_Index
0000B146 5428 0024                  		addq.b	#2,$24(a0)
0000B14A 117C 0013 0016             		move.b	#$13,$16(a0)
0000B150 117C 0008 0017             		move.b	#8,$17(a0)
0000B156 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B15E 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B164 0028 0004 0001             		ori.b	#4,1(a0)
0000B16A 117C 0004 0018             		move.b	#4,$18(a0)
0000B170 117C 0005 0020             		move.b	#5,$20(a0)
0000B176 117C 000C 0019             		move.b	#$C,$19(a0)
0000B17C 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B180 117C 0002 001C             		move.b	#2,$1C(a0)
0000B186                            
0000B186                            Obj2D_Action:				; XREF: Obj2D_Index
0000B186 7000                       		moveq	#0,d0
0000B188 1028 0025                  		move.b	$25(a0),d0
0000B18C 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B190 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B194 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B19A 6100 FAA6                  		bsr.w	AnimateSprite
0000B19E 6000 0000                  		bra.w	MarkObjGone
0000B1A2                            ; ===========================================================================
0000B1A2 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B1A4 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B1A6 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B1A8 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B1AA                            ; ===========================================================================
0000B1AA                            
0000B1AA                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B1AA 5368 0030                  		subq.w	#1,$30(a0)
0000B1AE 6A00                       		bpl.s	locret_AD42
0000B1B0 5428 0025                  		addq.b	#2,$25(a0)
0000B1B4 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B1BA 317C 0080 0010             		move.w	#$80,$10(a0)
0000B1C0 117C 0001 001C             		move.b	#1,$1C(a0)
0000B1C6 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B1CC 6700                       		beq.s	locret_AD42
0000B1CE 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B1D2                            
0000B1D2                            locret_AD42:
0000B1D2 4E75                       		rts	
0000B1D4                            ; ===========================================================================
0000B1D4                            
0000B1D4                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B1D4 5368 0030                  		subq.w	#1,$30(a0)
0000B1D8 6B00                       		bmi.s	loc_AD84
0000B1DA 6100 0000                  		bsr.w	SpeedToPos
0000B1DE 0868 0000 0032             		bchg	#0,$32(a0)
0000B1E4 6600                       		bne.s	loc_AD78
0000B1E6 3628 0008                  		move.w	8(a0),d3
0000B1EA 0643 000C                  		addi.w	#$C,d3
0000B1EE 0828 0000 0022             		btst	#0,$22(a0)
0000B1F4 6600                       		bne.s	loc_AD6A
0000B1F6 0443 0018                  		subi.w	#$18,d3
0000B1FA                            
0000B1FA                            loc_AD6A:
0000B1FA 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B200 0C41 000C                  		cmpi.w	#$C,d1
0000B204 6C00                       		bge.s	loc_AD84
0000B206 4E75                       		rts	
0000B208                            ; ===========================================================================
0000B208                            
0000B208                            loc_AD78:				; XREF: Obj2D_Move
0000B208 4EB9 0000 0000             		jsr	ObjHitFloor
0000B20E D368 000C                  		add.w	d1,$C(a0)
0000B212 4E75                       		rts	
0000B214                            ; ===========================================================================
0000B214                            
0000B214                            loc_AD84:				; XREF: Obj2D_Move
0000B214 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B21A 6700                       		beq.s	loc_ADA4
0000B21C 5528 0025                  		subq.b	#2,$25(a0)
0000B220 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B226 317C 0000 0010             		move.w	#0,$10(a0)
0000B22C 117C 0000 001C             		move.b	#0,$1C(a0)
0000B232 4E75                       		rts	
0000B234                            ; ===========================================================================
0000B234                            
0000B234                            loc_ADA4:
0000B234 5428 0025                  		addq.b	#2,$25(a0)
0000B238 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B23E 117C 0002 001C             		move.b	#2,$1C(a0)
0000B244 4E75                       		rts	
0000B246                            ; ===========================================================================
0000B246                            
0000B246                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B246 6100 0000                  		bsr.w	SpeedToPos
0000B24A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B250 6B00                       		bmi.s	locret_ADF0
0000B252 117C 0003 001C             		move.b	#3,$1C(a0)
0000B258 4EB9 0000 0000             		jsr	ObjHitFloor
0000B25E 4A41                       		tst.w	d1
0000B260 6A00                       		bpl.s	locret_ADF0
0000B262 D368 000C                  		add.w	d1,$C(a0)
0000B266 317C 0000 0012             		move.w	#0,$12(a0)
0000B26C 117C 0001 001C             		move.b	#1,$1C(a0)
0000B272 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B278 5528 0025                  		subq.b	#2,$25(a0)
0000B27C 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B280                            
0000B280                            locret_ADF0:
0000B280 4E75                       		rts	
0000B282                            ; ===========================================================================
0000B282                            
0000B282                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B282 343C 0060                  		move.w	#$60,d2
0000B286 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B28A 6400                       		bcc.s	locret_AE20
0000B28C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B290 9068 000C                  		sub.w	$C(a0),d0
0000B294 6400                       		bcc.s	locret_AE20
0000B296 0C40 FF80                  		cmpi.w	#-$80,d0
0000B29A 6500                       		bcs.s	locret_AE20
0000B29C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B2A0 6600                       		bne.s	locret_AE20
0000B2A2 5528 0025                  		subq.b	#2,$25(a0)
0000B2A6 3141 0010                  		move.w	d1,$10(a0)
0000B2AA 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B2B0                            
0000B2B0                            locret_AE20:
0000B2B0 4E75                       		rts	
0000B2B2                            
0000B2B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2B2                            
0000B2B2                            
0000B2B2                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B2B2 323C 0080                  		move.w	#$80,d1
0000B2B6 08E8 0000 0022             		bset	#0,$22(a0)
0000B2BC 3038 D008                  		move.w	($FFFFD008).w,d0
0000B2C0 9068 0008                  		sub.w	8(a0),d0
0000B2C4 6400                       		bcc.s	loc_AE40
0000B2C6 4440                       		neg.w	d0
0000B2C8 4441                       		neg.w	d1
0000B2CA 08A8 0000 0022             		bclr	#0,$22(a0)
0000B2D0                            
0000B2D0                            loc_AE40:
0000B2D0 B042                       		cmp.w	d2,d0
0000B2D2 4E75                       		rts	
0000B2D4                            ; End of function Obj2D_ChkSonic2
0000B2D4                            
0000B2D4                            ; ===========================================================================
0000B2D4                            Ani_obj2D:
0000B2D4                            	include "_anim\obj2D.asm"
0000B2D4                            ; ---------------------------------------------------------------------------
0000B2D4                            ; Animation script - Burrobot enemy but craig
0000B2D4                            ; ---------------------------------------------------------------------------
0000B2D4 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B2D6 0000                       		dc.w byte_AE50-Ani_obj2D
0000B2D8 0000                       		dc.w byte_AE54-Ani_obj2D
0000B2DA 0000                       		dc.w byte_AE58-Ani_obj2D
0000B2DC 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B2DF 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B2E3 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B2F1 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B2F4                            		even
0000B2F4                            		even
0000B2F4                            
0000B2F4                            ; ---------------------------------------------------------------------------
0000B2F4                            ; Sprite mappings - Burrobot enemy (LZ)
0000B2F4                            ; ---------------------------------------------------------------------------
0000B2F4                            Map_obj2D:
0000B2F4                            	include "_maps\obj2D.asm"
0000B2F4                            Map_e3a3:
0000B2F4 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B2F6 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B2F8 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B2FA 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B2FC 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B2FE 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B300 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B302 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B304 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B306 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B308 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B30A 02                         Map_e3a3_16: 	dc.b $2
0000B30B EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B310 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B315 02                         Map_e3a3_21: 	dc.b $2
0000B316 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B31B 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B320 02                         Map_e3a3_2C: 	dc.b $2
0000B321 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B326 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B32B 02                         Map_e3a3_37: 	dc.b $2
0000B32C EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B331 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B336 02                         Map_e3a3_42: 	dc.b $2
0000B337 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B33C FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B341 02                         Map_e3a3_4D: 	dc.b $2
0000B342 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B347 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B34C 02                         Map_e3a3_58: 	dc.b $2
0000B34D EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B352 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B357 02                         Map_e3a3_63: 	dc.b $2
0000B358 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B35D FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B362 02                         Map_e3a3_6E: 	dc.b $2
0000B363 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B368 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B36D 02                         Map_e3a3_79: 	dc.b $2
0000B36E EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B373 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B378 02                         Map_e3a3_84: 	dc.b $2
0000B379 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B37E 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B384 00                         	even
0000B384 00                         	even
0000B384                            
0000B384                            ; ===========================================================================
0000B384                            ; ---------------------------------------------------------------------------
0000B384                            ; Object 2F - large moving platforms (MZ)
0000B384                            ; ---------------------------------------------------------------------------
0000B384                            
0000B384                            Obj2F:					; XREF: Obj_Index
0000B384 7000                       		moveq	#0,d0
0000B386 1028 0024                  		move.b	$24(a0),d0
0000B38A 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B38E 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B392                            ; ===========================================================================
0000B392 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B394 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B396                            
0000B396 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B398 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B39A 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B39C 0140                       		dc.b 1,	$40
0000B39E 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B3A0 0220                       		dc.b 2,	$20
0000B3A2                            ; ===========================================================================
0000B3A2                            
0000B3A2                            Obj2F_Main:				; XREF: Obj2F_Index
0000B3A2 5428 0024                  		addq.b	#2,$24(a0)
0000B3A6 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B3AE 317C C000 0002             		move.w	#$C000,2(a0)
0000B3B4 117C 0004 0001             		move.b	#4,1(a0)
0000B3BA 117C 0005 0018             		move.b	#5,$18(a0)
0000B3C0 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B3C6 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B3CC 7000                       		moveq	#0,d0
0000B3CE 1028 0028                  		move.b	$28(a0),d0
0000B3D2 E448                       		lsr.w	#2,d0
0000B3D4 0240 001C                  		andi.w	#$1C,d0
0000B3D8 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B3DC 3019                       		move.w	(a1)+,d0
0000B3DE 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B3E2 214A 0030                  		move.l	a2,$30(a0)
0000B3E6 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B3EA 1151 0019                  		move.b	(a1),$19(a0)
0000B3EE 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B3F4 117C 0040 0016             		move.b	#$40,$16(a0)
0000B3FA 08E8 0004 0001             		bset	#4,1(a0)
0000B400                            
0000B400                            Obj2F_Action:				; XREF: Obj2F_Index
0000B400 6100 0000                  		bsr.w	Obj2F_Types
0000B404 4A28 0025                  		tst.b	$25(a0)
0000B408 6700                       		beq.s	Obj2F_Solid
0000B40A 7200                       		moveq	#0,d1
0000B40C 1228 0019                  		move.b	$19(a0),d1
0000B410 0641 000B                  		addi.w	#$B,d1
0000B414 6100 C5FC                  		bsr.w	ExitPlatform
0000B418 0829 0003 0022             		btst	#3,$22(a1)
0000B41E 6600 0000                  		bne.w	Obj2F_Slope
0000B422 4228 0025                  		clr.b	$25(a0)
0000B426 6000                       		bra.s	Obj2F_Display
0000B428                            ; ===========================================================================
0000B428                            
0000B428                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B428 7200                       		moveq	#0,d1
0000B42A 1228 0019                  		move.b	$19(a0),d1
0000B42E 0641 000B                  		addi.w	#$B,d1
0000B432 2468 0030                  		movea.l	$30(a0),a2
0000B436 3428 0008                  		move.w	8(a0),d2
0000B43A 6100 D534                  		bsr.w	SlopeObject2
0000B43E 6000                       		bra.s	Obj2F_Display
0000B440                            ; ===========================================================================
0000B440                            
0000B440                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B440 7200                       		moveq	#0,d1
0000B442 1228 0019                  		move.b	$19(a0),d1
0000B446 0641 000B                  		addi.w	#$B,d1
0000B44A 343C 0020                  		move.w	#$20,d2
0000B44E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B454 6600                       		bne.s	loc_AF8E
0000B456 343C 0030                  		move.w	#$30,d2
0000B45A                            
0000B45A                            loc_AF8E:
0000B45A 2468 0030                  		movea.l	$30(a0),a2
0000B45E 6100 0000                  		bsr.w	SolidObject2F
0000B462                            
0000B462                            Obj2F_Display:				; XREF: Obj2F_Action
0000B462 6100 0000                  		bsr.w	DisplaySprite
0000B466 6000 0000                  		bra.w	Obj2F_ChkDel
0000B46A                            
0000B46A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B46A                            
0000B46A                            
0000B46A                            Obj2F_Types:				; XREF: Obj2F_Action
0000B46A 7000                       		moveq	#0,d0
0000B46C 1028 0028                  		move.b	$28(a0),d0
0000B470 0240 0007                  		andi.w	#7,d0
0000B474 D040                       		add.w	d0,d0
0000B476 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B47A 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B47E                            ; End of function Obj2F_Types
0000B47E                            
0000B47E                            ; ===========================================================================
0000B47E 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B480 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B482 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B484 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B486 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B488 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B48A                            ; ===========================================================================
0000B48A                            
0000B48A                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B48A 4E75                       		rts			; type 00 platform doesn't move
0000B48C                            ; ===========================================================================
0000B48C                            
0000B48C                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B48C 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B490 323C 0020                  		move.w	#$20,d1
0000B494 6000                       		bra.s	Obj2F_Move
0000B496                            ; ===========================================================================
0000B496                            
0000B496                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B496 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B49A 323C 0030                  		move.w	#$30,d1
0000B49E 6000                       		bra.s	Obj2F_Move
0000B4A0                            ; ===========================================================================
0000B4A0                            
0000B4A0                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B4A0 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B4A4 323C 0040                  		move.w	#$40,d1
0000B4A8 6000                       		bra.s	Obj2F_Move
0000B4AA                            ; ===========================================================================
0000B4AA                            
0000B4AA                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B4AA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B4AE 323C 0060                  		move.w	#$60,d1
0000B4B2                            
0000B4B2                            Obj2F_Move:
0000B4B2 0828 0003 0028             		btst	#3,$28(a0)
0000B4B8 6700                       		beq.s	loc_AFF2
0000B4BA 4440                       		neg.w	d0
0000B4BC D041                       		add.w	d1,d0
0000B4BE                            
0000B4BE                            loc_AFF2:
0000B4BE 3228 002C                  		move.w	$2C(a0),d1
0000B4C2 9240                       		sub.w	d0,d1
0000B4C4 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B4C8 4E75                       		rts	
0000B4CA                            ; ===========================================================================
0000B4CA                            
0000B4CA                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B4CA 1028 0034                  		move.b	$34(a0),d0
0000B4CE 4A28 0025                  		tst.b	$25(a0)
0000B4D2 6600                       		bne.s	loc_B010
0000B4D4 5500                       		subq.b	#2,d0
0000B4D6 6400                       		bcc.s	loc_B01C
0000B4D8 7000                       		moveq	#0,d0
0000B4DA 6000                       		bra.s	loc_B01C
0000B4DC                            ; ===========================================================================
0000B4DC                            
0000B4DC                            loc_B010:
0000B4DC 5800                       		addq.b	#4,d0
0000B4DE 0C00 0040                  		cmpi.b	#$40,d0
0000B4E2 6500                       		bcs.s	loc_B01C
0000B4E4 103C 0040                  		move.b	#$40,d0
0000B4E8                            
0000B4E8                            loc_B01C:
0000B4E8 1140 0034                  		move.b	d0,$34(a0)
0000B4EC 4EB9 0000 2C22             		jsr	(CalcSine).l
0000B4F2 E848                       		lsr.w	#4,d0
0000B4F4 3200                       		move.w	d0,d1
0000B4F6 D068 002C                  		add.w	$2C(a0),d0
0000B4FA 3140 000C                  		move.w	d0,$C(a0)
0000B4FE 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B504 6600                       		bne.s	loc_B07A
0000B506 4A28 0035                  		tst.b	$35(a0)
0000B50A 6600                       		bne.s	loc_B07A
0000B50C 117C 0001 0035             		move.b	#1,$35(a0)
0000B512 6100 0000                  		bsr.w	SingleObjLoad2
0000B516 6600                       		bne.s	loc_B07A
0000B518 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B51C 3368 0008 0008             		move.w	8(a0),8(a1)
0000B522 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B528 5069 002C                  		addq.w	#8,$2C(a1)
0000B52C 5769 002C                  		subq.w	#3,$2C(a1)
0000B530 0469 0040 0008             		subi.w	#$40,8(a1)
0000B536 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B53C 2348 0038                  		move.l	a0,$38(a1)
0000B540 2448                       		movea.l	a0,a2
0000B542 6100                       		bsr.s	sub_B09C
0000B544                            
0000B544                            loc_B07A:
0000B544 7400                       		moveq	#0,d2
0000B546 45E8 0036                  		lea	$36(a0),a2
0000B54A 141A                       		move.b	(a2)+,d2
0000B54C 5302                       		subq.b	#1,d2
0000B54E 6500                       		bcs.s	locret_B09A
0000B550                            
0000B550                            loc_B086:
0000B550 7000                       		moveq	#0,d0
0000B552 101A                       		move.b	(a2)+,d0
0000B554 ED48                       		lsl.w	#6,d0
0000B556 0640 D000                  		addi.w	#-$3000,d0
0000B55A 3240                       		movea.w	d0,a1
0000B55C 3341 003C                  		move.w	d1,$3C(a1)
0000B560 51CA FFEE                  		dbf	d2,loc_B086
0000B564                            
0000B564                            locret_B09A:
0000B564 4E75                       		rts	
0000B566                            
0000B566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B566                            
0000B566                            
0000B566                            sub_B09C:
0000B566 45EA 0036                  		lea	$36(a2),a2
0000B56A 7000                       		moveq	#0,d0
0000B56C 1012                       		move.b	(a2),d0
0000B56E 5212                       		addq.b	#1,(a2)
0000B570 45F2 0001                  		lea	1(a2,d0.w),a2
0000B574 3009                       		move.w	a1,d0
0000B576 0440 D000                  		subi.w	#-$3000,d0
0000B57A EC48                       		lsr.w	#6,d0
0000B57C 0240 007F                  		andi.w	#$7F,d0
0000B580 1480                       		move.b	d0,(a2)
0000B582 4E75                       		rts	
0000B584                            ; End of function sub_B09C
0000B584                            
0000B584                            ; ===========================================================================
0000B584                            
0000B584                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B584 4A28 0035                  		tst.b	$35(a0)
0000B588 6700                       		beq.s	loc_B0C6
0000B58A 4A28 0001                  		tst.b	1(a0)
0000B58E 6A00                       		bpl.s	Obj2F_DelFlames
0000B590                            
0000B590                            loc_B0C6:
0000B590 3028 002A                  		move.w	$2A(a0),d0
0000B594 0240 FF80                  		andi.w	#$FF80,d0
0000B598 3238 F700                  		move.w	($FFFFF700).w,d1
0000B59C 0441 0080                  		subi.w	#$80,d1
0000B5A0 0241 FF80                  		andi.w	#$FF80,d1
0000B5A4 9041                       		sub.w	d1,d0
0000B5A6 0C40 0280                  		cmpi.w	#$280,d0
0000B5AA 6200 0000                  		bhi.w	DeleteObject
0000B5AE 4E75                       		rts	
0000B5B0                            ; ===========================================================================
0000B5B0                            
0000B5B0                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B5B0 7400                       		moveq	#0,d2
0000B5B2                            
0000B5B2                            loc_B0E8:
0000B5B2 45E8 0036                  		lea	$36(a0),a2
0000B5B6 1412                       		move.b	(a2),d2
0000B5B8 421A                       		clr.b	(a2)+
0000B5BA 5302                       		subq.b	#1,d2
0000B5BC 6500                       		bcs.s	locret_B116
0000B5BE                            
0000B5BE                            loc_B0F4:
0000B5BE 7000                       		moveq	#0,d0
0000B5C0 1012                       		move.b	(a2),d0
0000B5C2 421A                       		clr.b	(a2)+
0000B5C4 ED48                       		lsl.w	#6,d0
0000B5C6 0640 D000                  		addi.w	#-$3000,d0
0000B5CA 3240                       		movea.w	d0,a1
0000B5CC 6100 0000                  		bsr.w	DeleteObject2
0000B5D0 51CA FFEC                  		dbf	d2,loc_B0F4
0000B5D4 117C 0000 0035             		move.b	#0,$35(a0)
0000B5DA 117C 0000 0034             		move.b	#0,$34(a0)
0000B5E0                            
0000B5E0                            locret_B116:
0000B5E0 4E75                       		rts	
0000B5E2                            ; ===========================================================================
0000B5E2                            ; ---------------------------------------------------------------------------
0000B5E2                            ; Collision data for large moving platforms (MZ)
0000B5E2                            ; ---------------------------------------------------------------------------
0000B5E2                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B62E                            		even
0000B62E                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B65A                            		even
0000B65A                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B6A6                            		even
0000B6A6                            ; ===========================================================================
0000B6A6                            ; ---------------------------------------------------------------------------
0000B6A6                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B6A6                            ; (appears when	you walk on sinking platforms)
0000B6A6                            ; ---------------------------------------------------------------------------
0000B6A6                            
0000B6A6                            Obj35:					; XREF: Obj_Index
0000B6A6 7000                       		moveq	#0,d0
0000B6A8 1028 0024                  		move.b	$24(a0),d0
0000B6AC 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B6B0 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B6B4                            ; ===========================================================================
0000B6B4 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B6B6 0000                       		dc.w loc_B238-Obj35_Index
0000B6B8 0000                       		dc.w Obj35_Move-Obj35_Index
0000B6BA                            ; ===========================================================================
0000B6BA                            
0000B6BA                            Obj35_Main:				; XREF: Obj35_Index
0000B6BA 5428 0024                  		addq.b	#2,$24(a0)
0000B6BE 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B6C6 317C 0345 0002             		move.w	#$345,2(a0)
0000B6CC 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B6D2 117C 0004 0001             		move.b	#4,1(a0)
0000B6D8 117C 0001 0018             		move.b	#1,$18(a0)
0000B6DE 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B6E4 117C 0008 0019             		move.b	#8,$19(a0)
0000B6EA 303C 00C8                  		move.w	#$C8,d0
0000B6EE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000B6F4 4A28 0028                  		tst.b	$28(a0)
0000B6F8 6700                       		beq.s	loc_B238
0000B6FA 5428 0024                  		addq.b	#2,$24(a0)
0000B6FE 6000 0000                  		bra.w	Obj35_Move
0000B702                            ; ===========================================================================
0000B702                            
0000B702                            loc_B238:				; XREF: Obj35_Index
0000B702 2268 0030                  		movea.l	$30(a0),a1
0000B706 3228 0008                  		move.w	8(a0),d1
0000B70A 9268 002A                  		sub.w	$2A(a0),d1
0000B70E 0641 000C                  		addi.w	#$C,d1
0000B712 3001                       		move.w	d1,d0
0000B714 E248                       		lsr.w	#1,d0
0000B716 1031 0000                  		move.b	(a1,d0.w),d0
0000B71A 4440                       		neg.w	d0
0000B71C D068 002C                  		add.w	$2C(a0),d0
0000B720 3400                       		move.w	d0,d2
0000B722 D068 003C                  		add.w	$3C(a0),d0
0000B726 3140 000C                  		move.w	d0,$C(a0)
0000B72A 0C41 0084                  		cmpi.w	#$84,d1
0000B72E 6400                       		bcc.s	loc_B2B0
0000B730 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B738 0C41 0080                  		cmpi.w	#$80,d1
0000B73C 6400                       		bcc.s	loc_B2B0
0000B73E 2028 0008                  		move.l	8(a0),d0
0000B742 0680 0008 0000             		addi.l	#$80000,d0
0000B748 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B74E 6600                       		bne.s	loc_B2B0
0000B750 6100 0000                  		bsr.w	SingleObjLoad2
0000B754 6600                       		bne.s	loc_B2B0
0000B756 12BC 0035                  		move.b	#$35,0(a1)
0000B75A 3368 0008 0008             		move.w	8(a0),8(a1)
0000B760 3342 002C                  		move.w	d2,$2C(a1)
0000B764 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B76A 137C 0001 0028             		move.b	#1,$28(a1)
0000B770 2468 0038                  		movea.l	$38(a0),a2
0000B774 6100 FDF0                  		bsr.w	sub_B09C
0000B778                            
0000B778                            loc_B2B0:
0000B778 6000                       		bra.s	Obj35_Animate
0000B77A                            ; ===========================================================================
0000B77A                            
0000B77A                            Obj35_Move:				; XREF: Obj35_Index
0000B77A 3028 002C                  		move.w	$2C(a0),d0
0000B77E D068 003C                  		add.w	$3C(a0),d0
0000B782 3140 000C                  		move.w	d0,$C(a0)
0000B786                            
0000B786                            Obj35_Animate:				; XREF: loc_B238
0000B786 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B78C 6100 F4B4                  		bsr.w	AnimateSprite
0000B790 6000 0000                  		bra.w	DisplaySprite
0000B794                            ; ===========================================================================
0000B794                            Ani_obj35:
0000B794                            	include "_anim\obj35.asm"
0000B794                            ; ---------------------------------------------------------------------------
0000B794                            ; Animation script - fireball that sits on the	floor (MZ)
0000B794                            ; ---------------------------------------------------------------------------
0000B794 0000                       		dc.w byte_B2CE-Ani_obj35
0000B796 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B79C                            		even
0000B79C                            		even
0000B79C                            
0000B79C                            ; ---------------------------------------------------------------------------
0000B79C                            ; Sprite mappings - large moving platforms (MZ)
0000B79C                            ; ---------------------------------------------------------------------------
0000B79C                            Map_obj2F:
0000B79C                            	include "_maps\obj2F.asm"
0000B79C                            ; ---------------------------------------------------------------------------
0000B79C                            ; Sprite mappings - large moving platforms (MZ)
0000B79C                            ; ---------------------------------------------------------------------------
0000B79C 0000                       		dc.w byte_B2DA-Map_obj2F
0000B79E 0000                       		dc.w byte_B31C-Map_obj2F
0000B7A0 0000                       		dc.w byte_B34F-Map_obj2F
0000B7A2 0D                         byte_B2DA:	dc.b $D
0000B7A3 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B7A8 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B7AD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B7B2 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B7B7 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B7BC F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B7C1 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B7C6 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B7CB F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B7D0 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B7D5 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B7DA D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B7DF F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B7E4 0A                         byte_B31C:	dc.b $A
0000B7E5 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B7EA F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B7EF 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B7F4 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B7F9 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B7FE F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B803 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B808 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B80D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B812 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B817 06                         byte_B34F:	dc.b 6
0000B818 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B81D F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B822 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B827 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B82C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B831 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B836                            		even
0000B836                            		even
0000B836                            
0000B836                            ; ---------------------------------------------------------------------------
0000B836                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B836                            ; ---------------------------------------------------------------------------
0000B836                            Map_obj14:
0000B836                            	include "_maps\obj14.asm"
0000B836                            ; ---------------------------------------------------------------------------
0000B836                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B836                            ; ---------------------------------------------------------------------------
0000B836 0000                       		dc.w byte_B37A-Map_obj14
0000B838 0000                       		dc.w byte_B380-Map_obj14
0000B83A 0000                       		dc.w byte_B386-Map_obj14
0000B83C 0000                       		dc.w byte_B38C-Map_obj14
0000B83E 0000                       		dc.w byte_B392-Map_obj14
0000B840 0000                       		dc.w byte_B398-Map_obj14
0000B842 01                         byte_B37A:	dc.b 1
0000B843 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B848 01                         byte_B380:	dc.b 1
0000B849 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B84E 01                         byte_B386:	dc.b 1
0000B84F F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B854 01                         byte_B38C:	dc.b 1
0000B855 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B85A 01                         byte_B392:	dc.b 1
0000B85B F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B860 01                         byte_B398:	dc.b 1
0000B861 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B866                            		even
0000B866                            		even
0000B866                            
0000B866                            ; ===========================================================================
0000B866                            ; ---------------------------------------------------------------------------
0000B866                            ; Object 30 - large green glassy blocks	(MZ)
0000B866                            ; ---------------------------------------------------------------------------
0000B866                            
0000B866                            Obj30:					; XREF: Obj_Index
0000B866 7000                       		moveq	#0,d0
0000B868 1028 0024                  		move.b	$24(a0),d0
0000B86C 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B870 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B874 3028 0008                  		move.w	8(a0),d0
0000B878 0240 FF80                  		andi.w	#$FF80,d0
0000B87C 3238 F700                  		move.w	($FFFFF700).w,d1
0000B880 0441 0080                  		subi.w	#$80,d1
0000B884 0241 FF80                  		andi.w	#$FF80,d1
0000B888 9041                       		sub.w	d1,d0
0000B88A 0C40 0280                  		cmpi.w	#$280,d0
0000B88E 6200 0000                  		bhi.w	Obj30_Delete
0000B892 6000 0000                  		bra.w	DisplaySprite
0000B896                            ; ===========================================================================
0000B896                            
0000B896                            Obj30_Delete:
0000B896 6000 0000                  		bra.w	DeleteObject
0000B89A                            ; ===========================================================================
0000B89A 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B89C 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B89E 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B8A0 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B8A2 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B8A4                            
0000B8A4 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B8A7 0400 01                    		dc.b 4,	0, 1
0000B8AA 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B8AD 0800 01                    		dc.b 8,	0, 1
0000B8B0                            ; ===========================================================================
0000B8B0                            
0000B8B0                            Obj30_Main:				; XREF: Obj30_Index
0000B8B0 45F9 0000 B8A4             		lea	(Obj30_Vars1).l,a2
0000B8B6 7201                       		moveq	#1,d1
0000B8B8 117C 0048 0016             		move.b	#$48,$16(a0)
0000B8BE 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B8C4 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B8C6 45F9 0000 B8AA             		lea	(Obj30_Vars2).l,a2
0000B8CC 7201                       		moveq	#1,d1
0000B8CE 117C 0038 0016             		move.b	#$38,$16(a0)
0000B8D4                            
0000B8D4                            loc_B40C:
0000B8D4 2248                       		movea.l	a0,a1
0000B8D6 6000                       		bra.s	Obj30_Load	; load main object
0000B8D8                            ; ===========================================================================
0000B8D8                            
0000B8D8                            Obj30_Loop:
0000B8D8 6100 0000                  		bsr.w	SingleObjLoad2
0000B8DC 6600                       		bne.s	loc_B480
0000B8DE                            
0000B8DE                            Obj30_Load:				; XREF: Obj30_Main
0000B8DE 135A 0024                  		move.b	(a2)+,$24(a1)
0000B8E2 12BC 0030                  		move.b	#$30,0(a1)
0000B8E6 3368 0008 0008             		move.w	8(a0),8(a1)
0000B8EC 101A                       		move.b	(a2)+,d0
0000B8EE 4880                       		ext.w	d0
0000B8F0 D068 000C                  		add.w	$C(a0),d0
0000B8F4 3340 000C                  		move.w	d0,$C(a1)
0000B8F8 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B900 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B906 137C 0004 0001             		move.b	#4,1(a1)
0000B90C 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B912 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B918 137C 0020 0019             		move.b	#$20,$19(a1)
0000B91E 137C 0004 0018             		move.b	#4,$18(a1)
0000B924 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B928 2348 003C                  		move.l	a0,$3C(a1)
0000B92C 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B930                            
0000B930 137C 0010 0019             		move.b	#$10,$19(a1)
0000B936 137C 0003 0018             		move.b	#3,$18(a1)
0000B93C 5029 0028                  		addq.b	#8,$28(a1)
0000B940 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B946                            
0000B946                            loc_B480:
0000B946 317C 0090 0032             		move.w	#$90,$32(a0)
0000B94C 08E8 0004 0001             		bset	#4,1(a0)
0000B952                            
0000B952                            Obj30_Block012:				; XREF: Obj30_Index
0000B952 6100 0000                  		bsr.w	Obj30_Types
0000B956 323C 002B                  		move.w	#$2B,d1
0000B95A 343C 0048                  		move.w	#$48,d2
0000B95E 363C 0049                  		move.w	#$49,d3
0000B962 3828 0008                  		move.w	8(a0),d4
0000B966 6000 0000                  		bra.w	SolidObject
0000B96A                            ; ===========================================================================
0000B96A                            
0000B96A                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B96A 2268 003C                  		movea.l	$3C(a0),a1
0000B96E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B974 6000 0000                  		bra.w	Obj30_Types
0000B978                            ; ===========================================================================
0000B978                            
0000B978                            Obj30_Block34:				; XREF: Obj30_Index
0000B978 6100 0000                  		bsr.w	Obj30_Types
0000B97C 323C 002B                  		move.w	#$2B,d1
0000B980 343C 0038                  		move.w	#$38,d2
0000B984 363C 0039                  		move.w	#$39,d3
0000B988 3828 0008                  		move.w	8(a0),d4
0000B98C 6000 0000                  		bra.w	SolidObject
0000B990                            ; ===========================================================================
0000B990                            
0000B990                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B990 2268 003C                  		movea.l	$3C(a0),a1
0000B994 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B99A 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B9A0 6000 0002                  		bra.w	*+4
0000B9A4                            
0000B9A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9A4                            
0000B9A4                            
0000B9A4                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B9A4 7000                       		moveq	#0,d0
0000B9A6 1028 0028                  		move.b	$28(a0),d0
0000B9AA 0240 0007                  		andi.w	#7,d0
0000B9AE D040                       		add.w	d0,d0
0000B9B0 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B9B4 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B9B8                            ; End of function Obj30_Types
0000B9B8                            
0000B9B8                            ; ===========================================================================
0000B9B8 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B9BA 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B9BC 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B9BE 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B9C0 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B9C2                            ; ===========================================================================
0000B9C2                            
0000B9C2                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B9C2 4E75                       		rts	
0000B9C4                            ; ===========================================================================
0000B9C4                            
0000B9C4                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B9C4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9C8 323C 0040                  		move.w	#$40,d1
0000B9CC 6000                       		bra.s	loc_B514
0000B9CE                            ; ===========================================================================
0000B9CE                            
0000B9CE                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B9CE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9D2 323C 0040                  		move.w	#$40,d1
0000B9D6 4440                       		neg.w	d0
0000B9D8 D041                       		add.w	d1,d0
0000B9DA                            
0000B9DA                            loc_B514:				; XREF: Obj30_Type01
0000B9DA 0828 0003 0028             		btst	#3,$28(a0)
0000B9E0 6700                       		beq.s	loc_B526
0000B9E2 4440                       		neg.w	d0
0000B9E4 D041                       		add.w	d1,d0
0000B9E6 E208                       		lsr.b	#1,d0
0000B9E8 0640 0020                  		addi.w	#$20,d0
0000B9EC                            
0000B9EC                            loc_B526:
0000B9EC 6000 0000                  		bra.w	loc_B5EE
0000B9F0                            ; ===========================================================================
0000B9F0                            
0000B9F0                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B9F0 0828 0003 0028             		btst	#3,$28(a0)
0000B9F6 6700                       		beq.s	loc_B53E
0000B9F8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9FC 0440 0010                  		subi.w	#$10,d0
0000BA00 6000 0000                  		bra.w	loc_B5EE
0000BA04                            ; ===========================================================================
0000BA04                            
0000BA04                            loc_B53E:
0000BA04 0828 0003 0022             		btst	#3,$22(a0)
0000BA0A 6600                       		bne.s	loc_B54E
0000BA0C 08A8 0000 0034             		bclr	#0,$34(a0)
0000BA12 6000                       		bra.s	loc_B582
0000BA14                            ; ===========================================================================
0000BA14                            
0000BA14                            loc_B54E:
0000BA14 4A28 0034                  		tst.b	$34(a0)
0000BA18 6600                       		bne.s	loc_B582
0000BA1A 117C 0001 0034             		move.b	#1,$34(a0)
0000BA20 08E8 0000 0035             		bset	#0,$35(a0)
0000BA26 6700                       		beq.s	loc_B582
0000BA28 08E8 0007 0034             		bset	#7,$34(a0)
0000BA2E 317C 0010 0036             		move.w	#$10,$36(a0)
0000BA34 117C 000A 0038             		move.b	#$A,$38(a0)
0000BA3A 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BA40 6600                       		bne.s	loc_B582
0000BA42 317C 0040 0036             		move.w	#$40,$36(a0)
0000BA48                            
0000BA48                            loc_B582:
0000BA48 4A28 0034                  		tst.b	$34(a0)
0000BA4C 6A00                       		bpl.s	loc_B5AA
0000BA4E 4A28 0038                  		tst.b	$38(a0)
0000BA52 6700                       		beq.s	loc_B594
0000BA54 5328 0038                  		subq.b	#1,$38(a0)
0000BA58 6600                       		bne.s	loc_B5AA
0000BA5A                            
0000BA5A                            loc_B594:
0000BA5A 4A68 0032                  		tst.w	$32(a0)
0000BA5E 6700                       		beq.s	loc_B5A4
0000BA60 5368 0032                  		subq.w	#1,$32(a0)
0000BA64 5368 0036                  		subq.w	#1,$36(a0)
0000BA68 6600                       		bne.s	loc_B5AA
0000BA6A                            
0000BA6A                            loc_B5A4:
0000BA6A 08A8 0007 0034             		bclr	#7,$34(a0)
0000BA70                            
0000BA70                            loc_B5AA:
0000BA70 3028 0032                  		move.w	$32(a0),d0
0000BA74 6000                       		bra.s	loc_B5EE
0000BA76                            ; ===========================================================================
0000BA76                            
0000BA76                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BA76 0828 0003 0028             		btst	#3,$28(a0)
0000BA7C 6700                       		beq.s	Obj30_ChkSwitch
0000BA7E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA82 0440 0010                  		subi.w	#$10,d0
0000BA86 6000                       		bra.s	loc_B5EE
0000BA88                            ; ===========================================================================
0000BA88                            
0000BA88                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BA88 4A28 0034                  		tst.b	$34(a0)
0000BA8C 6600                       		bne.s	loc_B5E0
0000BA8E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BA92 7000                       		moveq	#0,d0
0000BA94 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BA98 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BA9A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BA9E 6700                       		beq.s	loc_B5EA	; if not, branch
0000BAA0 117C 0001 0034             		move.b	#1,$34(a0)
0000BAA6                            
0000BAA6                            loc_B5E0:
0000BAA6 4A68 0032                  		tst.w	$32(a0)
0000BAAA 6700                       		beq.s	loc_B5EA
0000BAAC 5568 0032                  		subq.w	#2,$32(a0)
0000BAB0                            
0000BAB0                            loc_B5EA:
0000BAB0 3028 0032                  		move.w	$32(a0),d0
0000BAB4                            
0000BAB4                            loc_B5EE:
0000BAB4 3228 0030                  		move.w	$30(a0),d1
0000BAB8 9240                       		sub.w	d0,d1
0000BABA 3141 000C                  		move.w	d1,$C(a0)
0000BABE 4E75                       		rts	
0000BAC0                            ; ===========================================================================
0000BAC0                            ; ---------------------------------------------------------------------------
0000BAC0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BAC0                            ; ---------------------------------------------------------------------------
0000BAC0                            Map_obj30:
0000BAC0                            	include "_maps\obj30.asm"
0000BAC0                            ; ---------------------------------------------------------------------------
0000BAC0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BAC0                            ; ---------------------------------------------------------------------------
0000BAC0 0000                       		dc.w byte_B600-Map_obj30
0000BAC2 0000                       		dc.w byte_B63D-Map_obj30
0000BAC4 0000                       		dc.w byte_B648-Map_obj30
0000BAC6 0C                         byte_B600:	dc.b $C
0000BAC7 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BACC B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BAD1 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BAD6 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BADB E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BAE0 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BAE5 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BAEA 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BAEF 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BAF4 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BAF9 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BAFE 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BB03 02                         byte_B63D:	dc.b 2
0000BB04 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BB09 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BB0E 0A                         byte_B648:	dc.b $A
0000BB0F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BB14 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BB19 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BB1E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BB23 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BB28 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BB2D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BB32 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BB37 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BB3C 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BB42 00                         		even
0000BB42 00                         		even
0000BB42                            
0000BB42                            ; ===========================================================================
0000BB42                            ; ---------------------------------------------------------------------------
0000BB42                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BB42                            ; ---------------------------------------------------------------------------
0000BB42                            
0000BB42                            Obj31:					; XREF: Obj_Index
0000BB42 7000                       		moveq	#0,d0
0000BB44 1028 0024                  		move.b	$24(a0),d0
0000BB48 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BB4C 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BB50                            ; ===========================================================================
0000BB50 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BB52 0000                       		dc.w loc_B798-Obj31_Index
0000BB54 0000                       		dc.w loc_B7FE-Obj31_Index
0000BB56 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BB58 0000                       		dc.w loc_B7E2-Obj31_Index
0000BB5A                            
0000BB5A 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BB5C 0100                       		dc.b 1,	0
0000BB5E                            
0000BB5E 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BB61 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BB64 08CC 03                    		dc.b 8,	$CC, 3
0000BB67 06F0 02                    		dc.b 6,	$F0, 2
0000BB6A                            
0000BB6A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BB6E 5000 7800                  		dc.w $5000, $7800
0000BB72 3800 5800                  		dc.w $3800, $5800
0000BB76 B800                       		dc.w $B800
0000BB78                            ; ===========================================================================
0000BB78                            
0000BB78                            Obj31_Main:				; XREF: Obj31_Index
0000BB78 7000                       		moveq	#0,d0
0000BB7A 1028 0028                  		move.b	$28(a0),d0
0000BB7E 6A00                       		bpl.s	loc_B6CE
0000BB80 0240 007F                  		andi.w	#$7F,d0
0000BB84 D040                       		add.w	d0,d0
0000BB86 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BB8A 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BB8E 101A                       		move.b	(a2)+,d0
0000BB90 1140 0028                  		move.b	d0,$28(a0)
0000BB94                            
0000BB94                            loc_B6CE:
0000BB94 0200 000F                  		andi.b	#$F,d0
0000BB98 D040                       		add.w	d0,d0
0000BB9A 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BB9E 4A40                       		tst.w	d0
0000BBA0 6600                       		bne.s	loc_B6E0
0000BBA2 3142 0032                  		move.w	d2,$32(a0)
0000BBA6                            
0000BBA6                            loc_B6E0:
0000BBA6 45F9 0000 BB5E             		lea	(Obj31_Var).l,a2
0000BBAC 2248                       		movea.l	a0,a1
0000BBAE 7203                       		moveq	#3,d1
0000BBB0 6000                       		bra.s	Obj31_MakeStomper
0000BBB2                            ; ===========================================================================
0000BBB2                            
0000BBB2                            Obj31_Loop:
0000BBB2 6100 0000                  		bsr.w	SingleObjLoad2
0000BBB6 6600 0000                  		bne.w	Obj31_SetSize
0000BBBA                            
0000BBBA                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BBBA 135A 0024                  		move.b	(a2)+,$24(a1)
0000BBBE 12BC 0031                  		move.b	#$31,0(a1)
0000BBC2 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBC8 101A                       		move.b	(a2)+,d0
0000BBCA 4880                       		ext.w	d0
0000BBCC D068 000C                  		add.w	$C(a0),d0
0000BBD0 3340 000C                  		move.w	d0,$C(a1)
0000BBD4 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BBDC 337C 0300 0002             		move.w	#$300,2(a1)
0000BBE2 137C 0004 0001             		move.b	#4,1(a1)
0000BBE8 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BBEE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BBF4 137C 0010 0019             		move.b	#$10,$19(a1)
0000BBFA 3342 0034                  		move.w	d2,$34(a1)
0000BBFE 137C 0004 0018             		move.b	#4,$18(a1)
0000BC04 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BC08 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BC0E 6600                       		bne.s	loc_B76A
0000BC10 5341                       		subq.w	#1,d1
0000BC12 1028 0028                  		move.b	$28(a0),d0
0000BC16 0240 00F0                  		andi.w	#$F0,d0
0000BC1A 0C40 0020                  		cmpi.w	#$20,d0
0000BC1E 679A                       		beq.s	Obj31_MakeStomper
0000BC20 137C 0038 0019             		move.b	#$38,$19(a1)
0000BC26 137C 0090 0020             		move.b	#$90,$20(a1)
0000BC2C 5241                       		addq.w	#1,d1
0000BC2E                            
0000BC2E                            loc_B76A:
0000BC2E 2348 003C                  		move.l	a0,$3C(a1)
0000BC32 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BC36                            
0000BC36 137C 0003 0018             		move.b	#3,$18(a1)
0000BC3C                            
0000BC3C                            Obj31_SetSize:
0000BC3C 7000                       		moveq	#0,d0
0000BC3E 1028 0028                  		move.b	$28(a0),d0
0000BC42 E648                       		lsr.w	#3,d0
0000BC44 0200 000E                  		andi.b	#$E,d0
0000BC48 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BC4C 115A 0019                  		move.b	(a2)+,$19(a0)
0000BC50 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BC54 6000                       		bra.s	loc_B798
0000BC56                            ; ===========================================================================
0000BC56 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BC58 3009                       		dc.b $30, 9
0000BC5A 100A                       		dc.b $10, $A
0000BC5C                            ; ===========================================================================
0000BC5C                            
0000BC5C                            loc_B798:				; XREF: Obj31_Index
0000BC5C 6100 0000                  		bsr.w	Obj31_Types
0000BC60 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BC66 7200                       		moveq	#0,d1
0000BC68 1228 0019                  		move.b	$19(a0),d1
0000BC6C 0641 000B                  		addi.w	#$B,d1
0000BC70 343C 000C                  		move.w	#$C,d2
0000BC74 363C 000D                  		move.w	#$D,d3
0000BC78 3828 0008                  		move.w	8(a0),d4
0000BC7C 6100 0000                  		bsr.w	SolidObject
0000BC80 0828 0003 0022             		btst	#3,$22(a0)
0000BC86 6700                       		beq.s	Obj31_Display
0000BC88 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BC8E 6400                       		bcc.s	Obj31_Display
0000BC90 2448                       		movea.l	a0,a2
0000BC92 41F8 D000                  		lea	($FFFFD000).w,a0
0000BC96 4EB9 0000 0000             		jsr	KillSonic
0000BC9C 204A                       		movea.l	a2,a0
0000BC9E                            
0000BC9E                            Obj31_Display:
0000BC9E 6100 0000                  		bsr.w	DisplaySprite
0000BCA2 6000 0000                  		bra.w	Obj31_ChkDel
0000BCA6                            ; ===========================================================================
0000BCA6                            
0000BCA6                            loc_B7E2:				; XREF: Obj31_Index
0000BCA6 117C 0080 0016             		move.b	#$80,$16(a0)
0000BCAC 08E8 0004 0001             		bset	#4,1(a0)
0000BCB2 2268 003C                  		movea.l	$3C(a0),a1
0000BCB6 1029 0032                  		move.b	$32(a1),d0
0000BCBA EA08                       		lsr.b	#5,d0
0000BCBC 5600                       		addq.b	#3,d0
0000BCBE 1140 001A                  		move.b	d0,$1A(a0)
0000BCC2                            
0000BCC2                            loc_B7FE:				; XREF: Obj31_Index
0000BCC2 2268 003C                  		movea.l	$3C(a0),a1
0000BCC6 7000                       		moveq	#0,d0
0000BCC8 1029 0032                  		move.b	$32(a1),d0
0000BCCC D068 0030                  		add.w	$30(a0),d0
0000BCD0 3140 000C                  		move.w	d0,$C(a0)
0000BCD4                            
0000BCD4                            Obj31_Display2:				; XREF: Obj31_Index
0000BCD4 6100 0000                  		bsr.w	DisplaySprite
0000BCD8                            
0000BCD8                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BCD8 3028 0008                  		move.w	8(a0),d0
0000BCDC 0240 FF80                  		andi.w	#$FF80,d0
0000BCE0 3238 F700                  		move.w	($FFFFF700).w,d1
0000BCE4 0441 0080                  		subi.w	#$80,d1
0000BCE8 0241 FF80                  		andi.w	#$FF80,d1
0000BCEC 9041                       		sub.w	d1,d0
0000BCEE 0C40 0280                  		cmpi.w	#$280,d0
0000BCF2 6200 0000                  		bhi.w	DeleteObject
0000BCF6 4E75                       		rts	
0000BCF8                            ; ===========================================================================
0000BCF8                            
0000BCF8                            Obj31_Types:				; XREF: loc_B798
0000BCF8 1028 0028                  		move.b	$28(a0),d0
0000BCFC 0240 000F                  		andi.w	#$F,d0
0000BD00 D040                       		add.w	d0,d0
0000BD02 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BD06 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BD0A                            ; ===========================================================================
0000BD0A 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BD0C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD0E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD10 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD12 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD14 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD16 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD18                            ; ===========================================================================
0000BD18                            
0000BD18                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BD18 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BD1C 7000                       		moveq	#0,d0
0000BD1E 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BD22 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BD26 6700                       		beq.s	loc_B8A8	; if not, branch
0000BD28 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BD2C 6A00                       		bpl.s	loc_B872
0000BD2E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BD34 6700                       		beq.s	loc_B8A0
0000BD36                            
0000BD36                            loc_B872:
0000BD36 4A68 0032                  		tst.w	$32(a0)
0000BD3A 6700                       		beq.s	loc_B8A0
0000BD3C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BD40 0200 000F                  		andi.b	#$F,d0
0000BD44 6600                       		bne.s	loc_B892
0000BD46 4A28 0001                  		tst.b	1(a0)
0000BD4A 6A00                       		bpl.s	loc_B892
0000BD4C 303C 00C7                  		move.w	#$C7,d0
0000BD50 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BD56                            
0000BD56                            loc_B892:
0000BD56 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BD5C 6400                       		bcc.s	Obj31_Restart
0000BD5E 317C 0000 0032             		move.w	#0,$32(a0)
0000BD64                            
0000BD64                            loc_B8A0:
0000BD64 317C 0000 0012             		move.w	#0,$12(a0)
0000BD6A 6000                       		bra.s	Obj31_Restart
0000BD6C                            ; ===========================================================================
0000BD6C                            
0000BD6C                            loc_B8A8:				; XREF: Obj31_Type00
0000BD6C 3228 0034                  		move.w	$34(a0),d1
0000BD70 B268 0032                  		cmp.w	$32(a0),d1
0000BD74 6700                       		beq.s	Obj31_Restart
0000BD76 3028 0012                  		move.w	$12(a0),d0
0000BD7A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BD80 D168 0032                  		add.w	d0,$32(a0)
0000BD84 B268 0032                  		cmp.w	$32(a0),d1
0000BD88 6200                       		bhi.s	Obj31_Restart
0000BD8A 3141 0032                  		move.w	d1,$32(a0)
0000BD8E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BD94 4A28 0001                  		tst.b	1(a0)
0000BD98 6A00                       		bpl.s	Obj31_Restart
0000BD9A 303C 00BD                  		move.w	#$BD,d0
0000BD9E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BDA4                            
0000BDA4                            Obj31_Restart:
0000BDA4 7000                       		moveq	#0,d0
0000BDA6 1028 0032                  		move.b	$32(a0),d0
0000BDAA D068 0030                  		add.w	$30(a0),d0
0000BDAE 3140 000C                  		move.w	d0,$C(a0)
0000BDB2 4E75                       		rts	
0000BDB4                            ; ===========================================================================
0000BDB4                            
0000BDB4                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BDB4 4A68 0036                  		tst.w	$36(a0)
0000BDB8 6700                       		beq.s	loc_B938
0000BDBA 4A68 0038                  		tst.w	$38(a0)
0000BDBE 6700                       		beq.s	loc_B902
0000BDC0 5368 0038                  		subq.w	#1,$38(a0)
0000BDC4 6000                       		bra.s	loc_B97C
0000BDC6                            ; ===========================================================================
0000BDC6                            
0000BDC6                            loc_B902:
0000BDC6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BDCA 0200 000F                  		andi.b	#$F,d0
0000BDCE 6600                       		bne.s	loc_B91C
0000BDD0 4A28 0001                  		tst.b	1(a0)
0000BDD4 6A00                       		bpl.s	loc_B91C
0000BDD6 303C 00C7                  		move.w	#$C7,d0
0000BDDA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BDE0                            
0000BDE0                            loc_B91C:
0000BDE0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BDE6 6400                       		bcc.s	loc_B97C
0000BDE8 317C 0000 0032             		move.w	#0,$32(a0)
0000BDEE 317C 0000 0012             		move.w	#0,$12(a0)
0000BDF4 317C 0000 0036             		move.w	#0,$36(a0)
0000BDFA 6000                       		bra.s	loc_B97C
0000BDFC                            ; ===========================================================================
0000BDFC                            
0000BDFC                            loc_B938:				; XREF: Obj31_Type01
0000BDFC 3228 0034                  		move.w	$34(a0),d1
0000BE00 B268 0032                  		cmp.w	$32(a0),d1
0000BE04 6700                       		beq.s	loc_B97C
0000BE06 3028 0012                  		move.w	$12(a0),d0
0000BE0A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE10 D168 0032                  		add.w	d0,$32(a0)
0000BE14 B268 0032                  		cmp.w	$32(a0),d1
0000BE18 6200                       		bhi.s	loc_B97C
0000BE1A 3141 0032                  		move.w	d1,$32(a0)
0000BE1E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BE24 317C 0001 0036             		move.w	#1,$36(a0)
0000BE2A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BE30 4A28 0001                  		tst.b	1(a0)
0000BE34 6A00                       		bpl.s	loc_B97C
0000BE36 303C 00BD                  		move.w	#$BD,d0
0000BE3A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BE40                            
0000BE40                            loc_B97C:
0000BE40 6000 FF62                  		bra.w	Obj31_Restart
0000BE44                            ; ===========================================================================
0000BE44                            
0000BE44                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BE44 3038 D008                  		move.w	($FFFFD008).w,d0
0000BE48 9068 0008                  		sub.w	8(a0),d0
0000BE4C 6400                       		bcc.s	loc_B98C
0000BE4E 4440                       		neg.w	d0
0000BE50                            
0000BE50                            loc_B98C:
0000BE50 0C40 0090                  		cmpi.w	#$90,d0
0000BE54 6400                       		bcc.s	loc_B996
0000BE56 5228 0028                  		addq.b	#1,$28(a0)
0000BE5A                            
0000BE5A                            loc_B996:
0000BE5A 6000 FF48                  		bra.w	Obj31_Restart
0000BE5E                            ; ===========================================================================
0000BE5E                            ; ---------------------------------------------------------------------------
0000BE5E                            ; Object 45 - spiked metal block from beta version (MZ)
0000BE5E                            ; ---------------------------------------------------------------------------
0000BE5E                            
0000BE5E                            Obj45:					; XREF: Obj_Index
0000BE5E 7000                       		moveq	#0,d0
0000BE60 1028 0024                  		move.b	$24(a0),d0
0000BE64 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BE68 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BE6C                            ; ===========================================================================
0000BE6C 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BE6E 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BE70 0000                       		dc.w loc_BA8E-Obj45_Index
0000BE72 0000                       		dc.w Obj45_Display-Obj45_Index
0000BE74 0000                       		dc.w loc_BA7A-Obj45_Index
0000BE76                            
0000BE76 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BE79 04E4 01                    		dc.b	4, $E4,	  1
0000BE7C 0834 03                    		dc.b	8, $34,	  3
0000BE7F 0628 02                    		dc.b	6, $28,	  2
0000BE82                            
0000BE82 3800                       word_B9BE:	dc.w $3800
0000BE84 A000                       		dc.w -$6000
0000BE86 5000                       		dc.w $5000
0000BE88                            ; ===========================================================================
0000BE88                            
0000BE88                            Obj45_Main:				; XREF: Obj45_Index
0000BE88 7000                       		moveq	#0,d0
0000BE8A 1028 0028                  		move.b	$28(a0),d0
0000BE8E D040                       		add.w	d0,d0
0000BE90 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BE94 45F9 0000 BE76             		lea	(Obj45_Var).l,a2
0000BE9A 2248                       		movea.l	a0,a1
0000BE9C 7203                       		moveq	#3,d1
0000BE9E 6000                       		bra.s	Obj45_Load
0000BEA0                            ; ===========================================================================
0000BEA0                            
0000BEA0                            Obj45_Loop:
0000BEA0 6100 0000                  		bsr.w	SingleObjLoad2
0000BEA4 6600                       		bne.s	loc_BA52
0000BEA6                            
0000BEA6                            Obj45_Load:				; XREF: Obj45_Main
0000BEA6 135A 0024                  		move.b	(a2)+,$24(a1)
0000BEAA 12BC 0045                  		move.b	#$45,0(a1)
0000BEAE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BEB4 101A                       		move.b	(a2)+,d0
0000BEB6 4880                       		ext.w	d0
0000BEB8 D068 0008                  		add.w	8(a0),d0
0000BEBC 3340 0008                  		move.w	d0,8(a1)
0000BEC0 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BEC8 337C 0300 0002             		move.w	#$300,2(a1)
0000BECE 137C 0004 0001             		move.b	#4,1(a1)
0000BED4 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BEDA 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BEE0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BEE6 137C 0020 0019             		move.b	#$20,$19(a1)
0000BEEC 3342 0034                  		move.w	d2,$34(a1)
0000BEF0 137C 0004 0018             		move.b	#4,$18(a1)
0000BEF6 0C12 0001                  		cmpi.b	#1,(a2)
0000BEFA 6600                       		bne.s	loc_BA40
0000BEFC 137C 0091 0020             		move.b	#$91,$20(a1)
0000BF02                            
0000BF02                            loc_BA40:
0000BF02 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF06 2348 003C                  		move.l	a0,$3C(a1)
0000BF0A 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BF0E                            
0000BF0E 137C 0003 0018             		move.b	#3,$18(a1)
0000BF14                            
0000BF14                            loc_BA52:
0000BF14 117C 0010 0019             		move.b	#$10,$19(a0)
0000BF1A                            
0000BF1A                            Obj45_Solid:				; XREF: Obj45_Index
0000BF1A 3F28 0008                  		move.w	8(a0),-(sp)
0000BF1E 6100 0000                  		bsr.w	Obj45_Move
0000BF22 323C 0017                  		move.w	#$17,d1
0000BF26 343C 0020                  		move.w	#$20,d2
0000BF2A 363C 0020                  		move.w	#$20,d3
0000BF2E 381F                       		move.w	(sp)+,d4
0000BF30 6100 0000                  		bsr.w	SolidObject
0000BF34 6100 0000                  		bsr.w	DisplaySprite
0000BF38 6000 0000                  		bra.w	Obj45_ChkDel
0000BF3C                            ; ===========================================================================
0000BF3C                            
0000BF3C                            loc_BA7A:				; XREF: Obj45_Index
0000BF3C 2268 003C                  		movea.l	$3C(a0),a1
0000BF40 1029 0032                  		move.b	$32(a1),d0
0000BF44 0600 0010                  		addi.b	#$10,d0
0000BF48 EA08                       		lsr.b	#5,d0
0000BF4A 5600                       		addq.b	#3,d0
0000BF4C 1140 001A                  		move.b	d0,$1A(a0)
0000BF50                            
0000BF50                            loc_BA8E:				; XREF: Obj45_Index
0000BF50 2268 003C                  		movea.l	$3C(a0),a1
0000BF54 7000                       		moveq	#0,d0
0000BF56 1029 0032                  		move.b	$32(a1),d0
0000BF5A 4440                       		neg.w	d0
0000BF5C D068 0030                  		add.w	$30(a0),d0
0000BF60 3140 0008                  		move.w	d0,8(a0)
0000BF64                            
0000BF64                            Obj45_Display:				; XREF: Obj45_Index
0000BF64 6100 0000                  		bsr.w	DisplaySprite
0000BF68                            
0000BF68                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BF68 3028 003A                  		move.w	$3A(a0),d0
0000BF6C 0240 FF80                  		andi.w	#$FF80,d0
0000BF70 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF74 0441 0080                  		subi.w	#$80,d1
0000BF78 0241 FF80                  		andi.w	#$FF80,d1
0000BF7C 9041                       		sub.w	d1,d0
0000BF7E 0C40 0280                  		cmpi.w	#$280,d0
0000BF82 6200 0000                  		bhi.w	DeleteObject
0000BF86 4E75                       		rts	
0000BF88                            
0000BF88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BF88                            
0000BF88                            
0000BF88                            Obj45_Move:				; XREF: Obj45_Solid
0000BF88 7000                       		moveq	#0,d0
0000BF8A 1028 0028                  		move.b	$28(a0),d0
0000BF8E D040                       		add.w	d0,d0
0000BF90 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BF94 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BF98                            ; End of function Obj45_Move
0000BF98                            
0000BF98                            ; ===========================================================================
0000BF98 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BF9A 0000                       		dc.w loc_BADA-off_BAD6
0000BF9C                            ; ===========================================================================
0000BF9C                            
0000BF9C                            loc_BADA:				; XREF: off_BAD6
0000BF9C 4A68 0036                  		tst.w	$36(a0)
0000BFA0 6700                       		beq.s	loc_BB08
0000BFA2 4A68 0038                  		tst.w	$38(a0)
0000BFA6 6700                       		beq.s	loc_BAEC
0000BFA8 5368 0038                  		subq.w	#1,$38(a0)
0000BFAC 6000                       		bra.s	loc_BB3C
0000BFAE                            ; ===========================================================================
0000BFAE                            
0000BFAE                            loc_BAEC:
0000BFAE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFB4 6400                       		bcc.s	loc_BB3C
0000BFB6 317C 0000 0032             		move.w	#0,$32(a0)
0000BFBC 317C 0000 0010             		move.w	#0,$10(a0)
0000BFC2 317C 0000 0036             		move.w	#0,$36(a0)
0000BFC8 6000                       		bra.s	loc_BB3C
0000BFCA                            ; ===========================================================================
0000BFCA                            
0000BFCA                            loc_BB08:				; XREF: loc_BADA
0000BFCA 3228 0034                  		move.w	$34(a0),d1
0000BFCE B268 0032                  		cmp.w	$32(a0),d1
0000BFD2 6700                       		beq.s	loc_BB3C
0000BFD4 3028 0010                  		move.w	$10(a0),d0
0000BFD8 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BFDE D168 0032                  		add.w	d0,$32(a0)
0000BFE2 B268 0032                  		cmp.w	$32(a0),d1
0000BFE6 6200                       		bhi.s	loc_BB3C
0000BFE8 3141 0032                  		move.w	d1,$32(a0)
0000BFEC 317C 0000 0010             		move.w	#0,$10(a0)
0000BFF2 317C 0001 0036             		move.w	#1,$36(a0)
0000BFF8 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BFFE                            
0000BFFE                            loc_BB3C:
0000BFFE 7000                       		moveq	#0,d0
0000C000 1028 0032                  		move.b	$32(a0),d0
0000C004 4440                       		neg.w	d0
0000C006 D068 0030                  		add.w	$30(a0),d0
0000C00A 3140 0008                  		move.w	d0,8(a0)
0000C00E 4E75                       		rts	
0000C010                            ; ===========================================================================
0000C010                            ; ---------------------------------------------------------------------------
0000C010                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C010                            ; ---------------------------------------------------------------------------
0000C010                            Map_obj31:
0000C010                            	include "_maps\obj31.asm"
0000C010                            ; ---------------------------------------------------------------------------
0000C010                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C010                            ; ---------------------------------------------------------------------------
0000C010 0000                       		dc.w byte_BB64-Map_obj31
0000C012 0000                       		dc.w byte_BB7E-Map_obj31
0000C014 0000                       		dc.w byte_BB98-Map_obj31
0000C016 0000                       		dc.w byte_BB9E-Map_obj31
0000C018 0000                       		dc.w byte_BBA9-Map_obj31
0000C01A 0000                       		dc.w byte_BBBE-Map_obj31
0000C01C 0000                       		dc.w byte_BBDD-Map_obj31
0000C01E 0000                       		dc.w byte_BC06-Map_obj31
0000C020 0000                       		dc.w byte_BC06-Map_obj31
0000C022 0000                       		dc.w byte_BC39-Map_obj31
0000C024 0000                       		dc.w byte_BC53-Map_obj31
0000C026 05                         byte_BB64:	dc.b 5
0000C027 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C02C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C031 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C036 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C03B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C040 05                         byte_BB7E:	dc.b 5
0000C041 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C046 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C04B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C050 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C055 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C05A 01                         byte_BB98:	dc.b 1
0000C05B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C060 02                         byte_BB9E:	dc.b 2
0000C061 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C066 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C06B 04                         byte_BBA9:	dc.b 4
0000C06C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C071 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C076 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C07B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C080 06                         byte_BBBE:	dc.b 6
0000C081 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C086 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C08B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C090 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C095 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C09A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C09F 08                         byte_BBDD:	dc.b 8
0000C0A0 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C0A5 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C0AA C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0AF D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0B4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0B9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0BE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0C3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0C8 0A                         byte_BC06:	dc.b $A
0000C0C9 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C0CE 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C0D3 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C0D8 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C0DD C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0E2 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0E7 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0EC F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0F1 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0F6 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0FB 05                         byte_BC39:	dc.b 5
0000C0FC F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C101 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C106 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C10B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C110 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C115 01                         byte_BC53:	dc.b 1
0000C116 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C11C 00                         		even
0000C11C 00                         		even
0000C11C                            
0000C11C                            ; ---------------------------------------------------------------------------
0000C11C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C11C                            ; ---------------------------------------------------------------------------
0000C11C                            Map_obj45:
0000C11C                            	include "_maps\obj45.asm"
0000C11C                            ; ---------------------------------------------------------------------------
0000C11C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C11C                            ; ---------------------------------------------------------------------------
0000C11C 0000                       		dc.w byte_BC6C-Map_obj45
0000C11E 0000                       		dc.w byte_BC7C-Map_obj45
0000C120 0000                       		dc.w byte_BC8C-Map_obj45
0000C122 0000                       		dc.w byte_BC92-Map_obj45
0000C124 0000                       		dc.w byte_BC9D-Map_obj45
0000C126 0000                       		dc.w byte_BCB2-Map_obj45
0000C128 0000                       		dc.w byte_BCD1-Map_obj45
0000C12A 0000                       		dc.w byte_BCFA-Map_obj45
0000C12C 0000                       		dc.w byte_BCFA-Map_obj45
0000C12E 03                         byte_BC6C:	dc.b 3
0000C12F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C134 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C139 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C13E 03                         byte_BC7C:	dc.b 3
0000C13F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C144 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C149 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C14E 01                         byte_BC8C:	dc.b 1
0000C14F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C154 02                         byte_BC92:	dc.b 2
0000C155 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C15A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C15F 04                         byte_BC9D:	dc.b 4
0000C160 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C165 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C16A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C16F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C174 06                         byte_BCB2:	dc.b 6
0000C175 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C17A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C17F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C184 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C189 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C18E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C193 08                         byte_BCD1:	dc.b 8
0000C194 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C199 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C19E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1A3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1A8 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1AD F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1B2 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C1B7 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C1BC 08                         byte_BCFA:	dc.b 8
0000C1BD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1C2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1C7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1CC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1D1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1D6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1DB F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C1E0 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C1E5 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C1EA F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C1F0 00                         		even
0000C1F0 00                         		even
0000C1F0                            
0000C1F0                            ; ===========================================================================
0000C1F0                            ; ---------------------------------------------------------------------------
0000C1F0                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C1F0                            ; ---------------------------------------------------------------------------
0000C1F0                            
0000C1F0                            Obj32:					; XREF: Obj_Index
0000C1F0 7000                       		moveq	#0,d0
0000C1F2 1028 0024                  		move.b	$24(a0),d0
0000C1F6 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C1FA 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C1FE                            ; ===========================================================================
0000C1FE 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C200 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C202                            ; ===========================================================================
0000C202                            
0000C202                            Obj32_Main:				; XREF: Obj32_Index
0000C202 5428 0024                  		addq.b	#2,$24(a0)
0000C206 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C20E 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C214 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C21A 6700                       		beq.s	loc_BD60
0000C21C 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C222                            
0000C222                            loc_BD60:
0000C222 117C 0004 0001             		move.b	#4,1(a0)
0000C228 117C 0010 0019             		move.b	#$10,$19(a0)
0000C22E 117C 0004 0018             		move.b	#4,$18(a0)
0000C234 5668 000C                  		addq.w	#3,$C(a0)
0000C238                            
0000C238                            Obj32_Pressed:				; XREF: Obj32_Index
0000C238 4A28 0001                  		tst.b	1(a0)
0000C23C 6A00                       		bpl.s	Obj32_Display
0000C23E 323C 001B                  		move.w	#$1B,d1
0000C242 343C 0005                  		move.w	#5,d2
0000C246 363C 0005                  		move.w	#5,d3
0000C24A 3828 0008                  		move.w	8(a0),d4
0000C24E 6100 0000                  		bsr.w	SolidObject
0000C252 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C258 1028 0028                  		move.b	$28(a0),d0
0000C25C 0240 000F                  		andi.w	#$F,d0
0000C260 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C264 47F3 0000                  		lea	(a3,d0.w),a3
0000C268 7600                       		moveq	#0,d3
0000C26A 0828 0006 0028             		btst	#6,$28(a0)
0000C270 6700                       		beq.s	loc_BDB2
0000C272 7607                       		moveq	#7,d3
0000C274                            
0000C274                            loc_BDB2:
0000C274 4A28 0028                  		tst.b	$28(a0)
0000C278 6A00                       		bpl.s	loc_BDBE
0000C27A 6100 0000                  		bsr.w	Obj32_MZBlock
0000C27E 6600                       		bne.s	loc_BDC8
0000C280                            
0000C280                            loc_BDBE:
0000C280 4A28 0025                  		tst.b	$25(a0)
0000C284 6600                       		bne.s	loc_BDC8
0000C286 0793                       		bclr	d3,(a3)
0000C288 6000                       		bra.s	loc_BDDE
0000C28A                            ; ===========================================================================
0000C28A                            
0000C28A                            loc_BDC8:
0000C28A 4A13                       		tst.b	(a3)
0000C28C 6600                       		bne.s	loc_BDD6
0000C28E 303C 00CD                  		move.w	#$CD,d0
0000C292 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play switch sound
0000C298                            
0000C298                            loc_BDD6:
0000C298 07D3                       		bset	d3,(a3)
0000C29A 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C2A0                            
0000C2A0                            loc_BDDE:
0000C2A0 0828 0005 0028             		btst	#5,$28(a0)
0000C2A6 6700                       		beq.s	Obj32_Display
0000C2A8 5328 001E                  		subq.b	#1,$1E(a0)
0000C2AC 6A00                       		bpl.s	Obj32_Display
0000C2AE 117C 0007 001E             		move.b	#7,$1E(a0)
0000C2B4 0868 0001 001A             		bchg	#1,$1A(a0)
0000C2BA                            
0000C2BA                            Obj32_Display:
0000C2BA 6100 0000                  		bsr.w	DisplaySprite
0000C2BE 3028 0008                  		move.w	8(a0),d0
0000C2C2 0240 FF80                  		andi.w	#$FF80,d0
0000C2C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C2CA 0441 0080                  		subi.w	#$80,d1
0000C2CE 0241 FF80                  		andi.w	#$FF80,d1
0000C2D2 9041                       		sub.w	d1,d0
0000C2D4 0C40 0280                  		cmpi.w	#$280,d0
0000C2D8 6200 0000                  		bhi.w	Obj32_Delete
0000C2DC 4E75                       		rts	
0000C2DE                            ; ===========================================================================
0000C2DE                            
0000C2DE                            Obj32_Delete:
0000C2DE 6100 0000                  		bsr.w	DeleteObject
0000C2E2 4E75                       		rts	
0000C2E4                            
0000C2E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C2E4                            
0000C2E4                            
0000C2E4                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C2E4 3F03                       		move.w	d3,-(sp)
0000C2E6 3428 0008                  		move.w	8(a0),d2
0000C2EA 3628 000C                  		move.w	$C(a0),d3
0000C2EE 0442 0010                  		subi.w	#$10,d2
0000C2F2 5143                       		subq.w	#8,d3
0000C2F4 383C 0020                  		move.w	#$20,d4
0000C2F8 3A3C 0010                  		move.w	#$10,d5
0000C2FC 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C300 3C3C 005F                  		move.w	#$5F,d6
0000C304                            
0000C304                            Obj32_MZLoop:
0000C304 4A29 0001                  		tst.b	1(a1)
0000C308 6A00                       		bpl.s	loc_BE4E
0000C30A 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C30E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C310                            
0000C310                            loc_BE4E:
0000C310 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C314 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C318                            
0000C318 361F                       		move.w	(sp)+,d3
0000C31A 7000                       		moveq	#0,d0
0000C31C                            
0000C31C                            locret_BE5A:
0000C31C 4E75                       		rts	
0000C31E                            ; ===========================================================================
0000C31E 1010                       Obj32_MZData:	dc.b $10, $10
0000C320                            ; ===========================================================================
0000C320                            
0000C320                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C320 7001                       		moveq	#1,d0
0000C322 0240 003F                  		andi.w	#$3F,d0
0000C326 D040                       		add.w	d0,d0
0000C328 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C32C 121A                       		move.b	(a2)+,d1
0000C32E 4881                       		ext.w	d1
0000C330 3029 0008                  		move.w	8(a1),d0
0000C334 9041                       		sub.w	d1,d0
0000C336 9042                       		sub.w	d2,d0
0000C338 6400                       		bcc.s	loc_BE80
0000C33A D241                       		add.w	d1,d1
0000C33C D041                       		add.w	d1,d0
0000C33E 6500                       		bcs.s	loc_BE84
0000C340 60CE                       		bra.s	loc_BE4E
0000C342                            ; ===========================================================================
0000C342                            
0000C342                            loc_BE80:
0000C342 B044                       		cmp.w	d4,d0
0000C344 62CA                       		bhi.s	loc_BE4E
0000C346                            
0000C346                            loc_BE84:
0000C346 121A                       		move.b	(a2)+,d1
0000C348 4881                       		ext.w	d1
0000C34A 3029 000C                  		move.w	$C(a1),d0
0000C34E 9041                       		sub.w	d1,d0
0000C350 9043                       		sub.w	d3,d0
0000C352 6400                       		bcc.s	loc_BE9A
0000C354 D241                       		add.w	d1,d1
0000C356 D041                       		add.w	d1,d0
0000C358 6500                       		bcs.s	loc_BE9E
0000C35A 60B4                       		bra.s	loc_BE4E
0000C35C                            ; ===========================================================================
0000C35C                            
0000C35C                            loc_BE9A:
0000C35C B045                       		cmp.w	d5,d0
0000C35E 62B0                       		bhi.s	loc_BE4E
0000C360                            
0000C360                            loc_BE9E:
0000C360 361F                       		move.w	(sp)+,d3
0000C362 7001                       		moveq	#1,d0
0000C364 4E75                       		rts	
0000C366                            ; End of function Obj32_MZBlock
0000C366                            
0000C366                            ; ===========================================================================
0000C366                            ; ---------------------------------------------------------------------------
0000C366                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C366                            ; ---------------------------------------------------------------------------
0000C366                            Map_obj32:
0000C366                            	include "_maps\obj32.asm"
0000C366                            ; ---------------------------------------------------------------------------
0000C366                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C366                            ; ---------------------------------------------------------------------------
0000C366 0000                       		dc.w byte_BEAC-Map_obj32
0000C368 0000                       		dc.w byte_BEB7-Map_obj32
0000C36A 0000                       		dc.w byte_BEC2-Map_obj32
0000C36C 0000                       		dc.w byte_BEB7-Map_obj32
0000C36E 02                         byte_BEAC:	dc.b 2
0000C36F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C374 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C379 02                         byte_BEB7:	dc.b 2
0000C37A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C37F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C384 02                         byte_BEC2:	dc.b 2
0000C385 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C38A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C38F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C394                            		even
0000C394                            		even
0000C394                            
0000C394                            ; ===========================================================================
0000C394                            ; ---------------------------------------------------------------------------
0000C394                            ; Object 33 - pushable blocks (MZ, LZ)
0000C394                            ; ---------------------------------------------------------------------------
0000C394                            
0000C394                            Obj33:					; XREF: Obj_Index
0000C394 7000                       		moveq	#0,d0
0000C396 1028 0024                  		move.b	$24(a0),d0
0000C39A 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C39E 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C3A2                            ; ===========================================================================
0000C3A2 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C3A4 0000                       		dc.w loc_BF6E-Obj33_Index
0000C3A6 0000                       		dc.w loc_C02C-Obj33_Index
0000C3A8                            
0000C3A8 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C3AA 4001                       		dc.b $40, 1
0000C3AC                            ; ===========================================================================
0000C3AC                            
0000C3AC                            Obj33_Main:				; XREF: Obj33_Index
0000C3AC 5428 0024                  		addq.b	#2,$24(a0)
0000C3B0 117C 000F 0016             		move.b	#$F,$16(a0)
0000C3B6 117C 000F 0017             		move.b	#$F,$17(a0)
0000C3BC 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C3C4 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C3CA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C3D0 6600                       		bne.s	loc_BF16
0000C3D2 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C3D8                            
0000C3D8                            loc_BF16:
0000C3D8 117C 0004 0001             		move.b	#4,1(a0)
0000C3DE 117C 0003 0018             		move.b	#3,$18(a0)
0000C3E4 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C3EA 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C3F0 7000                       		moveq	#0,d0
0000C3F2 1028 0028                  		move.b	$28(a0),d0
0000C3F6 D040                       		add.w	d0,d0
0000C3F8 0240 000E                  		andi.w	#$E,d0
0000C3FC 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C400 115A 0019                  		move.b	(a2)+,$19(a0)
0000C404 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C408 4A28 0028                  		tst.b	$28(a0)
0000C40C 6700                       		beq.s	Obj33_ChkGone
0000C40E 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C414                            
0000C414                            Obj33_ChkGone:
0000C414 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C418 7000                       		moveq	#0,d0
0000C41A 1028 0023                  		move.b	$23(a0),d0
0000C41E 6700                       		beq.s	loc_BF6E
0000C420 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C426 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C42C 6600 0000                  		bne.w	DeleteObject
0000C430                            
0000C430                            loc_BF6E:				; XREF: Obj33_Index
0000C430 4A28 0032                  		tst.b	$32(a0)
0000C434 6600 0000                  		bne.w	loc_C046
0000C438 7200                       		moveq	#0,d1
0000C43A 1228 0019                  		move.b	$19(a0),d1
0000C43E 0641 000B                  		addi.w	#$B,d1
0000C442 343C 0010                  		move.w	#$10,d2
0000C446 363C 0011                  		move.w	#$11,d3
0000C44A 3828 0008                  		move.w	8(a0),d4
0000C44E 6100 0000                  		bsr.w	loc_C186
0000C452 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C458 6600                       		bne.s	loc_BFC6	; if not, branch
0000C45A 08A8 0007 0028             		bclr	#7,$28(a0)
0000C460 3028 0008                  		move.w	8(a0),d0
0000C464 0C40 0A20                  		cmpi.w	#$A20,d0
0000C468 6500                       		bcs.s	loc_BFC6
0000C46A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C46E 6400                       		bcc.s	loc_BFC6
0000C470 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C474 0440 001C                  		subi.w	#$1C,d0
0000C478 3140 000C                  		move.w	d0,$C(a0)
0000C47C 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C482 08E8 0007 0028             		bset	#7,$28(a0)
0000C488                            
0000C488                            loc_BFC6:
0000C488 3028 0008                  		move.w	8(a0),d0
0000C48C 0240 FF80                  		andi.w	#$FF80,d0
0000C490 3238 F700                  		move.w	($FFFFF700).w,d1
0000C494 0441 0080                  		subi.w	#$80,d1
0000C498 0241 FF80                  		andi.w	#$FF80,d1
0000C49C 9041                       		sub.w	d1,d0
0000C49E 0C40 0280                  		cmpi.w	#$280,d0
0000C4A2 6200                       		bhi.s	loc_BFE6
0000C4A4 6000 0000                  		bra.w	DisplaySprite
0000C4A8                            ; ===========================================================================
0000C4A8                            
0000C4A8                            loc_BFE6:
0000C4A8 3028 0034                  		move.w	$34(a0),d0
0000C4AC 0240 FF80                  		andi.w	#$FF80,d0
0000C4B0 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4B4 0441 0080                  		subi.w	#$80,d1
0000C4B8 0241 FF80                  		andi.w	#$FF80,d1
0000C4BC 9041                       		sub.w	d1,d0
0000C4BE 0C40 0280                  		cmpi.w	#$280,d0
0000C4C2 6200                       		bhi.s	loc_C016
0000C4C4 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C4CA 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C4D0 117C 0004 0024             		move.b	#4,$24(a0)
0000C4D6 6000                       		bra.s	loc_C02C
0000C4D8                            ; ===========================================================================
0000C4D8                            
0000C4D8                            loc_C016:
0000C4D8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C4DC 7000                       		moveq	#0,d0
0000C4DE 1028 0023                  		move.b	$23(a0),d0
0000C4E2 6700                       		beq.s	loc_C028
0000C4E4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C4EA                            
0000C4EA                            loc_C028:
0000C4EA 6000 0000                  		bra.w	DeleteObject
0000C4EE                            ; ===========================================================================
0000C4EE                            
0000C4EE                            loc_C02C:				; XREF: Obj33_Index
0000C4EE 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C4F2 6700                       		beq.s	locret_C044
0000C4F4 117C 0002 0024             		move.b	#2,$24(a0)
0000C4FA 4228 0032                  		clr.b	$32(a0)
0000C4FE 4268 0010                  		clr.w	$10(a0)
0000C502 4268 0012                  		clr.w	$12(a0)
0000C506                            
0000C506                            locret_C044:
0000C506 4E75                       		rts	
0000C508                            ; ===========================================================================
0000C508                            
0000C508                            loc_C046:				; XREF: loc_BF6E
0000C508 3F28 0008                  		move.w	8(a0),-(sp)
0000C50C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C512 6400                       		bcc.s	loc_C056
0000C514 6100 0000                  		bsr.w	SpeedToPos
0000C518                            
0000C518                            loc_C056:
0000C518 0828 0001 0022             		btst	#1,$22(a0)
0000C51E 6700                       		beq.s	loc_C0A0
0000C520 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C526 4EB9 0000 0000             		jsr	ObjHitFloor
0000C52C 4A41                       		tst.w	d1
0000C52E 6A00 0000                  		bpl.w	loc_C09E
0000C532 D368 000C                  		add.w	d1,$C(a0)
0000C536 4268 0012                  		clr.w	$12(a0)
0000C53A 08A8 0001 0022             		bclr	#1,$22(a0)
0000C540 3011                       		move.w	(a1),d0
0000C542 0240 03FF                  		andi.w	#$3FF,d0
0000C546 0C40 016A                  		cmpi.w	#$16A,d0
0000C54A 6500                       		bcs.s	loc_C09E
0000C54C 3028 0030                  		move.w	$30(a0),d0
0000C550 E640                       		asr.w	#3,d0
0000C552 3140 0010                  		move.w	d0,$10(a0)
0000C556 117C 0001 0032             		move.b	#1,$32(a0)
0000C55C 4268 000E                  		clr.w	$E(a0)
0000C560                            
0000C560                            loc_C09E:
0000C560 6000                       		bra.s	loc_C0E6
0000C562                            ; ===========================================================================
0000C562                            
0000C562                            loc_C0A0:
0000C562 4A68 0010                  		tst.w	$10(a0)
0000C566 6700 0000                  		beq.w	loc_C0D6
0000C56A 6B00                       		bmi.s	loc_C0BC
0000C56C 7600                       		moveq	#0,d3
0000C56E 1628 0019                  		move.b	$19(a0),d3
0000C572 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C578 4A41                       		tst.w	d1		; has block touched a wall?
0000C57A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C57C 6000                       		bra.s	loc_C0E6
0000C57E                            ; ===========================================================================
0000C57E                            
0000C57E                            loc_C0BC:
0000C57E 7600                       		moveq	#0,d3
0000C580 1628 0019                  		move.b	$19(a0),d3
0000C584 4643                       		not.w	d3
0000C586 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C58C 4A41                       		tst.w	d1		; has block touched a wall?
0000C58E 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C590 6000                       		bra.s	loc_C0E6
0000C592                            ; ===========================================================================
0000C592                            
0000C592                            Obj33_StopPush:
0000C592 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C596 6000                       		bra.s	loc_C0E6
0000C598                            ; ===========================================================================
0000C598                            
0000C598                            loc_C0D6:
0000C598 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C5A0 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C5A6 6400                       		bcc.s	loc_C104
0000C5A8                            
0000C5A8                            loc_C0E6:
0000C5A8 7200                       		moveq	#0,d1
0000C5AA 1228 0019                  		move.b	$19(a0),d1
0000C5AE 0641 000B                  		addi.w	#$B,d1
0000C5B2 343C 0010                  		move.w	#$10,d2
0000C5B6 363C 0011                  		move.w	#$11,d3
0000C5BA 381F                       		move.w	(sp)+,d4
0000C5BC 6100 0000                  		bsr.w	loc_C186
0000C5C0 6100                       		bsr.s	Obj33_ChkLava
0000C5C2 6000 FEC4                  		bra.w	loc_BFC6
0000C5C6                            ; ===========================================================================
0000C5C6                            
0000C5C6                            loc_C104:
0000C5C6 381F                       		move.w	(sp)+,d4
0000C5C8 43F8 D000                  		lea	($FFFFD000).w,a1
0000C5CC 08A9 0003 0022             		bclr	#3,$22(a1)
0000C5D2 08A8 0003 0022             		bclr	#3,$22(a0)
0000C5D8 6000 FECE                  		bra.w	loc_BFE6
0000C5DC                            ; ===========================================================================
0000C5DC                            
0000C5DC                            Obj33_ChkLava:
0000C5DC 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C5E2 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C5E4 343C FFE0                  		move.w	#-$20,d2
0000C5E8 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C5EE 6700                       		beq.s	Obj33_LoadLava
0000C5F0 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C5F6 6700                       		beq.s	Obj33_LoadLava
0000C5F8 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C5FE 6700                       		beq.s	Obj33_LoadLava
0000C600 4E75                       		rts	
0000C602                            ; ===========================================================================
0000C602                            
0000C602                            Obj33_ChkLava2:
0000C602 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C608 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C60A 343C 0020                  		move.w	#$20,d2
0000C60E 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C614 6700                       		beq.s	Obj33_LoadLava
0000C616 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C61C 6700                       		beq.s	Obj33_LoadLava
0000C61E                            
0000C61E                            Obj33_NoLava:
0000C61E 4E75                       		rts	
0000C620                            ; ===========================================================================
0000C620                            
0000C620                            Obj33_LoadLava:
0000C620 6100 0000                  		bsr.w	SingleObjLoad
0000C624 6600                       		bne.s	locret_C184
0000C626 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C62A 3368 0008 0008             		move.w	8(a0),8(a1)
0000C630 D569 0008                  		add.w	d2,8(a1)
0000C634 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C63A 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C640 2348 003C                  		move.l	a0,$3C(a1)
0000C644                            
0000C644                            locret_C184:
0000C644 4E75                       		rts	
0000C646                            ; ===========================================================================
0000C646                            
0000C646                            loc_C186:				; XREF: loc_BF6E
0000C646 1028 0025                  		move.b	$25(a0),d0
0000C64A 6700 0000                  		beq.w	loc_C218
0000C64E 5500                       		subq.b	#2,d0
0000C650 6600                       		bne.s	loc_C1AA
0000C652 6100 B3BE                  		bsr.w	ExitPlatform
0000C656 0829 0003 0022             		btst	#3,$22(a1)
0000C65C 6600                       		bne.s	loc_C1A4
0000C65E 4228 0025                  		clr.b	$25(a0)
0000C662 4E75                       		rts	
0000C664                            ; ===========================================================================
0000C664                            
0000C664                            loc_C1A4:
0000C664 3404                       		move.w	d4,d2
0000C666 6000 B908                  		bra.w	MvSonicOnPtfm
0000C66A                            ; ===========================================================================
0000C66A                            
0000C66A                            loc_C1AA:
0000C66A 5500                       		subq.b	#2,d0
0000C66C 6600                       		bne.s	loc_C1F2
0000C66E 6100 0000                  		bsr.w	SpeedToPos
0000C672 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C678 4EB9 0000 0000             		jsr	ObjHitFloor
0000C67E 4A41                       		tst.w	d1
0000C680 6A00 0000                  		bpl.w	locret_C1F0
0000C684 D368 000C                  		add.w	d1,$C(a0)
0000C688 4268 0012                  		clr.w	$12(a0)
0000C68C 4228 0025                  		clr.b	$25(a0)
0000C690 3011                       		move.w	(a1),d0
0000C692 0240 03FF                  		andi.w	#$3FF,d0
0000C696 0C40 016A                  		cmpi.w	#$16A,d0
0000C69A 6500                       		bcs.s	locret_C1F0
0000C69C 3028 0030                  		move.w	$30(a0),d0
0000C6A0 E640                       		asr.w	#3,d0
0000C6A2 3140 0010                  		move.w	d0,$10(a0)
0000C6A6 117C 0001 0032             		move.b	#1,$32(a0)
0000C6AC 4268 000E                  		clr.w	$E(a0)
0000C6B0                            
0000C6B0                            locret_C1F0:
0000C6B0 4E75                       		rts	
0000C6B2                            ; ===========================================================================
0000C6B2                            
0000C6B2                            loc_C1F2:
0000C6B2 6100 0000                  		bsr.w	SpeedToPos
0000C6B6 3028 0008                  		move.w	8(a0),d0
0000C6BA 0240 000C                  		andi.w	#$C,d0
0000C6BE 6600 0000                  		bne.w	locret_C2E4
0000C6C2 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C6C8 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C6CE 4268 0010                  		clr.w	$10(a0)
0000C6D2 5528 0025                  		subq.b	#2,$25(a0)
0000C6D6 4E75                       		rts	
0000C6D8                            ; ===========================================================================
0000C6D8                            
0000C6D8                            loc_C218:
0000C6D8 6100 0000                  		bsr.w	loc_FAC8
0000C6DC 4A44                       		tst.w	d4
0000C6DE 6700 0000                  		beq.w	locret_C2E4
0000C6E2 6B00 0000                  		bmi.w	locret_C2E4
0000C6E6 4A28 0032                  		tst.b	$32(a0)
0000C6EA 6700                       		beq.s	loc_C230
0000C6EC 6000 0000                  		bra.w	locret_C2E4
0000C6F0                            ; ===========================================================================
0000C6F0                            
0000C6F0                            loc_C230:
0000C6F0 4A40                       		tst.w	d0
0000C6F2 6700 0000                  		beq.w	locret_C2E4
0000C6F6 6B00                       		bmi.s	loc_C268
0000C6F8 0829 0000 0022             		btst	#0,$22(a1)
0000C6FE 6600 0000                  		bne.w	locret_C2E4
0000C702 3F00                       		move.w	d0,-(sp)
0000C704 7600                       		moveq	#0,d3
0000C706 1628 0019                  		move.b	$19(a0),d3
0000C70A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C710 301F                       		move.w	(sp)+,d0
0000C712 4A41                       		tst.w	d1
0000C714 6B00 0000                  		bmi.w	locret_C2E4
0000C718 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C720 7001                       		moveq	#1,d0
0000C722 323C 0040                  		move.w	#$40,d1
0000C726 6000                       		bra.s	loc_C294
0000C728                            ; ===========================================================================
0000C728                            
0000C728                            loc_C268:
0000C728 0829 0000 0022             		btst	#0,$22(a1)
0000C72E 6700                       		beq.s	locret_C2E4
0000C730 3F00                       		move.w	d0,-(sp)
0000C732 7600                       		moveq	#0,d3
0000C734 1628 0019                  		move.b	$19(a0),d3
0000C738 4643                       		not.w	d3
0000C73A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C740 301F                       		move.w	(sp)+,d0
0000C742 4A41                       		tst.w	d1
0000C744 6B00                       		bmi.s	locret_C2E4
0000C746 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C74E 70FF                       		moveq	#-1,d0
0000C750 323C FFC0                  		move.w	#-$40,d1
0000C754                            
0000C754                            loc_C294:
0000C754 43F8 D000                  		lea	($FFFFD000).w,a1
0000C758 D169 0008                  		add.w	d0,8(a1)
0000C75C 3341 0014                  		move.w	d1,$14(a1)
0000C760 337C 0000 0010             		move.w	#0,$10(a1)
0000C766 3F00                       		move.w	d0,-(sp)
0000C768 303C 00A7                  		move.w	#$A7,d0
0000C76C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C772 301F                       		move.w	(sp)+,d0
0000C774 4A28 0028                  		tst.b	$28(a0)
0000C778 6B00                       		bmi.s	locret_C2E4
0000C77A 3F00                       		move.w	d0,-(sp)
0000C77C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C782 301F                       		move.w	(sp)+,d0
0000C784 0C41 0004                  		cmpi.w	#4,d1
0000C788 6F00                       		ble.s	loc_C2E0
0000C78A 317C 0400 0010             		move.w	#$400,$10(a0)
0000C790 4A40                       		tst.w	d0
0000C792 6A00                       		bpl.s	loc_C2D8
0000C794 4468 0010                  		neg.w	$10(a0)
0000C798                            
0000C798                            loc_C2D8:
0000C798 117C 0006 0025             		move.b	#6,$25(a0)
0000C79E 6000                       		bra.s	locret_C2E4
0000C7A0                            ; ===========================================================================
0000C7A0                            
0000C7A0                            loc_C2E0:
0000C7A0 D368 000C                  		add.w	d1,$C(a0)
0000C7A4                            
0000C7A4                            locret_C2E4:
0000C7A4 4E75                       		rts	
0000C7A6                            ; ===========================================================================
0000C7A6                            ; ---------------------------------------------------------------------------
0000C7A6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7A6                            ; ---------------------------------------------------------------------------
0000C7A6                            Map_obj33:
0000C7A6                            	include "_maps\obj33.asm"
0000C7A6                            ; ---------------------------------------------------------------------------
0000C7A6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7A6                            ; ---------------------------------------------------------------------------
0000C7A6 0000                       		dc.w byte_C2EA-Map_obj33
0000C7A8 0000                       		dc.w byte_C2F0-Map_obj33
0000C7AA 01                         byte_C2EA:	dc.b 1
0000C7AB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C7B0 04                         byte_C2F0:	dc.b 4
0000C7B1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C7B6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C7BB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C7C0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C7C6 00                         		even
0000C7C6 00                         		even
0000C7C6                            
0000C7C6                            ; ===========================================================================
0000C7C6                            ; ---------------------------------------------------------------------------
0000C7C6                            ; Object 34 - zone title cards
0000C7C6                            ; ---------------------------------------------------------------------------
0000C7C6                            
0000C7C6                            Obj34:					; XREF: Obj_Index
0000C7C6 7000                       		moveq	#0,d0
0000C7C8 1028 0024                  		move.b	$24(a0),d0
0000C7CC 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C7D0 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C7D4                            ; ===========================================================================
0000C7D4 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C7D6 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C7D8 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C7DA 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C7DC                            ; ===========================================================================
0000C7DC                            
0000C7DC                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C7DC 2248                       		movea.l	a0,a1
0000C7DE 7000                       		moveq	#0,d0
0000C7E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C7E4 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C7EA 6600                       		bne.s	Obj34_CheckFZ
0000C7EC 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C7EE                            
0000C7EE                            Obj34_CheckFZ:
0000C7EE 3400                       		move.w	d0,d2
0000C7F0 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C7F6 6600                       		bne.s	Obj34_LoadConfig
0000C7F8 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C7FA 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C7FC                            
0000C7FC                            Obj34_LoadConfig:
0000C7FC 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C802 E948                       		lsl.w	#4,d0
0000C804 D6C0                       		adda.w	d0,a3
0000C806 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C80C 7203                       		moveq	#3,d1
0000C80E                            
0000C80E                            Obj34_Loop:
0000C80E 12BC 0034                  		move.b	#$34,0(a1)
0000C812 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C816 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C81A 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C81E 335A 000A                  		move.w	(a2)+,$A(a1)
0000C822 135A 0024                  		move.b	(a2)+,$24(a1)
0000C826 101A                       		move.b	(a2)+,d0
0000C828 6600                       		bne.s	Obj34_ActNumber
0000C82A 1002                       		move.b	d2,d0
0000C82C                            
0000C82C                            Obj34_ActNumber:
0000C82C 0C00 0007                  		cmpi.b	#7,d0
0000C830 6600                       		bne.s	Obj34_MakeSprite
0000C832 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C836 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C83C 6600                       		bne.s	Obj34_MakeSprite
0000C83E 5300                       		subq.b	#1,d0
0000C840                            
0000C840                            Obj34_MakeSprite:
0000C840 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C844 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C84C 337C 8580 0002             		move.w	#$8580,2(a1)
0000C852 137C 0078 0019             		move.b	#$78,$19(a1)
0000C858 137C 0000 0001             		move.b	#0,1(a1)
0000C85E 137C 0000 0018             		move.b	#0,$18(a1)
0000C864 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C86A 43E9 0040                  		lea	$40(a1),a1	; next object
0000C86E 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C872                            
0000C872                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C872 7210                       		moveq	#$10,d1		; set horizontal speed
0000C874 3028 0030                  		move.w	$30(a0),d0
0000C878 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C87C 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C87E 6C00                       		bge.s	Obj34_Move
0000C880 4441                       		neg.w	d1
0000C882                            
0000C882                            Obj34_Move:
0000C882 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C886                            
0000C886                            loc_C3C8:
0000C886 3028 0008                  		move.w	8(a0),d0
0000C88A 6B00                       		bmi.s	locret_C3D8
0000C88C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C890 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C892 6000 0000                  		bra.w	DisplaySprite
0000C896                            ; ===========================================================================
0000C896                            
0000C896                            locret_C3D8:
0000C896 4E75                       		rts	
0000C898                            ; ===========================================================================
0000C898                            
0000C898                            Obj34_Wait:				; XREF: Obj34_Index
0000C898 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C89C 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C89E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C8A2 6000 0000                  		bra.w	DisplaySprite
0000C8A6                            ; ===========================================================================
0000C8A6                            
0000C8A6                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C8A6 4A28 0001                  		tst.b	1(a0)
0000C8AA 6A00                       		bpl.s	Obj34_ChangeArt
0000C8AC 7220                       		moveq	#$20,d1
0000C8AE 3028 0032                  		move.w	$32(a0),d0
0000C8B2 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C8B6 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C8B8 6C00                       		bge.s	Obj34_Move2
0000C8BA 4441                       		neg.w	d1
0000C8BC                            
0000C8BC                            Obj34_Move2:
0000C8BC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8C0 3028 0008                  		move.w	8(a0),d0
0000C8C4 6B00                       		bmi.s	locret_C412
0000C8C6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C8CA 6400                       		bcc.s	locret_C412	; if yes, branch
0000C8CC 6000 0000                  		bra.w	DisplaySprite
0000C8D0                            ; ===========================================================================
0000C8D0                            
0000C8D0                            locret_C412:
0000C8D0 4E75                       		rts	
0000C8D2                            ; ===========================================================================
0000C8D2                            
0000C8D2                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C8D2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C8D8 6600                       		bne.s	Obj34_Delete
0000C8DA 7002                       		moveq	#2,d0
0000C8DC 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
0000C8E2 7000                       		moveq	#0,d0
0000C8E4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C8E8 0640 0015                  		addi.w	#$15,d0
0000C8EC 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns
0000C8F2                            
0000C8F2                            Obj34_Delete:
0000C8F2 6000 0000                  		bra.w	DeleteObject
0000C8F6                            ; ===========================================================================
0000C8F6 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C8F8 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C8FA 00E4                       		dc.w $E4
0000C8FC 0206                       		dc.b 2,	6
0000C8FE 00EA                       		dc.w $EA
0000C900 0207                       		dc.b 2,	7
0000C902 00E0                       		dc.w $E0
0000C904 020A                       		dc.b 2,	$A
0000C906                            ; ---------------------------------------------------------------------------
0000C906                            ; Title	card configuration data
0000C906                            ; Format:
0000C906                            ; 4 bytes per item (YYYY XXXX)
0000C906                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C906                            ; ---------------------------------------------------------------------------
0000C906 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C916 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C926 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C936 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C946 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C956 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C966 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C976                            ; ===========================================================================
0000C976                            ; ---------------------------------------------------------------------------
0000C976                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C976                            ; ---------------------------------------------------------------------------
0000C976                            
0000C976                            Obj39:					; XREF: Obj_Index
0000C976 7000                       		moveq	#0,d0
0000C978 1028 0024                  		move.b	$24(a0),d0
0000C97C 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C980 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C984                            ; ===========================================================================
0000C984 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C986 0000                       		dc.w loc_C50C-Obj39_Index
0000C988 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C98A                            ; ===========================================================================
0000C98A                            
0000C98A                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C98A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C98E 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C990 4E75                       		rts	
0000C992                            ; ===========================================================================
0000C992                            
0000C992                            Obj39_Main:
0000C992 5428 0024                  		addq.b	#2,$24(a0)
0000C996 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C99C 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C9A2 6700                       		beq.s	loc_C4EC	; if not, branch
0000C9A4 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C9AA                            
0000C9AA                            loc_C4EC:
0000C9AA 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C9B0 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C9B8 317C 855E 0002             		move.w	#$855E,2(a0)
0000C9BE 117C 0000 0001             		move.b	#0,1(a0)
0000C9C4 117C 0000 0018             		move.b	#0,$18(a0)
0000C9CA                            
0000C9CA                            loc_C50C:				; XREF: Obj39_Index
0000C9CA 7210                       		moveq	#$10,d1		; set horizontal speed
0000C9CC 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C9D2 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C9D4 6500                       		bcs.s	Obj39_Move
0000C9D6 4441                       		neg.w	d1
0000C9D8                            
0000C9D8                            Obj39_Move:
0000C9D8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C9DC 6000 0000                  		bra.w	DisplaySprite
0000C9E0                            ; ===========================================================================
0000C9E0                            
0000C9E0                            Obj39_SetWait:				; XREF: Obj39_Main
0000C9E0 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C9E6 5428 0024                  		addq.b	#2,$24(a0)
0000C9EA 4E75                       		rts	
0000C9EC                            ; ===========================================================================
0000C9EC                            
0000C9EC                            Obj39_Wait:				; XREF: Obj39_Index
0000C9EC 1038 F605                  		move.b	($FFFFF605).w,d0
0000C9F0 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C9F4 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C9F6 0828 0000 001A             		btst	#0,$1A(a0)
0000C9FC 6600                       		bne.s	Obj39_Display
0000C9FE 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CA02 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CA04 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CA08 6000 0000                  		bra.w	DisplaySprite
0000CA0C                            ; ===========================================================================
0000CA0C                            
0000CA0C                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CA0C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CA10 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CA12 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CA18 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CA1C 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CA1E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CA24 6000                       		bra.s	Obj39_Display
0000CA26                            ; ===========================================================================
0000CA26                            
0000CA26                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CA26 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CA2C                            
0000CA2C                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CA2C 6000 0000                  		bra.w	DisplaySprite
0000CA30                            ; ===========================================================================
0000CA30                            ; ---------------------------------------------------------------------------
0000CA30                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CA30                            ; ---------------------------------------------------------------------------
0000CA30                            
0000CA30                            Obj3A:					; XREF: Obj_Index
0000CA30 7000                       		moveq	#0,d0
0000CA32 1028 0024                  		move.b	$24(a0),d0
0000CA36 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CA3A 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CA3E                            ; ===========================================================================
0000CA3E 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CA40 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CA42 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA44 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CA46 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA48 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CA4A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA4C 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CA4E 0000                       		dc.w loc_C766-Obj3A_Index
0000CA50                            ; ===========================================================================
0000CA50                            
0000CA50                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CA50 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CA54 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CA56 4E75                       		rts	
0000CA58                            ; ===========================================================================
0000CA58                            
0000CA58                            Obj3A_Main:
0000CA58 2248                       		movea.l	a0,a1
0000CA5A 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CA60 7206                       		moveq	#6,d1
0000CA62                            
0000CA62                            Obj3A_Loop:
0000CA62 12BC 003A                  		move.b	#$3A,0(a1)
0000CA66 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CA6A 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CA6E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CA72 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CA76 135A 0024                  		move.b	(a2)+,$24(a1)
0000CA7A 101A                       		move.b	(a2)+,d0
0000CA7C 0C00 0006                  		cmpi.b	#6,d0
0000CA80 6600                       		bne.s	loc_C5CA
0000CA82 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CA86                            
0000CA86                            loc_C5CA:
0000CA86 1340 001A                  		move.b	d0,$1A(a1)
0000CA8A 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CA92 337C 8580 0002             		move.w	#$8580,2(a1)
0000CA98 137C 0000 0001             		move.b	#0,1(a1)
0000CA9E 43E9 0040                  		lea	$40(a1),a1
0000CAA2 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CAA6                            
0000CAA6                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CAA6 7210                       		moveq	#$10,d1		; set horizontal speed
0000CAA8 3028 0030                  		move.w	$30(a0),d0
0000CAAC B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CAB0 6700                       		beq.s	loc_C61A	; if yes, branch
0000CAB2 6C00                       		bge.s	Obj3A_Move
0000CAB4 4441                       		neg.w	d1
0000CAB6                            
0000CAB6                            Obj3A_Move:
0000CAB6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CABA                            
0000CABA                            loc_C5FE:				; XREF: loc_C61A
0000CABA 3028 0008                  		move.w	8(a0),d0
0000CABE 6B00                       		bmi.s	locret_C60E
0000CAC0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CAC4 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CAC6 6000 0000                  		bra.w	DisplaySprite
0000CACA                            ; ===========================================================================
0000CACA                            
0000CACA                            locret_C60E:
0000CACA 4E75                       		rts	
0000CACC                            ; ===========================================================================
0000CACC                            
0000CACC                            loc_C610:				; XREF: loc_C61A
0000CACC 117C 000E 0024             		move.b	#$E,$24(a0)
0000CAD2 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CAD6                            ; ===========================================================================
0000CAD6                            
0000CAD6                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CAD6 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CADC 67EE                       		beq.s	loc_C610
0000CADE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CAE4 66D4                       		bne.s	loc_C5FE
0000CAE6 5428 0024                  		addq.b	#2,$24(a0)
0000CAEA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CAF0                            
0000CAF0                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CAF0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CAF4 6600                       		bne.s	Obj3A_Display
0000CAF6 5428 0024                  		addq.b	#2,$24(a0)
0000CAFA                            
0000CAFA                            Obj3A_Display:
0000CAFA 6000 0000                  		bra.w	DisplaySprite
0000CAFE                            ; ===========================================================================
0000CAFE                            
0000CAFE                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CAFE 6100 0000                  		bsr.w	DisplaySprite
0000CB02 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CB08 7000                       		moveq	#0,d0
0000CB0A 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CB0E 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CB10 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB14 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CB1A                            
0000CB1A                            Obj3A_RingBonus:
0000CB1A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CB1E 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CB20 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB24 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CB2A                            
0000CB2A                            Obj3A_ChkBonus:
0000CB2A 4A40                       		tst.w	d0		; is there any bonus?
0000CB2C 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CB2E 303C 00C5                  		move.w	#$C5,d0
0000CB32 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CB38 5428 0024                  		addq.b	#2,$24(a0)
0000CB3C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CB42 6600                       		bne.s	Obj3A_SetDelay
0000CB44 5828 0024                  		addq.b	#4,$24(a0)
0000CB48                            
0000CB48                            Obj3A_SetDelay:
0000CB48 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB4E                            
0000CB4E                            locret_C692:
0000CB4E 4E75                       		rts	
0000CB50                            ; ===========================================================================
0000CB50                            
0000CB50                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CB50 4EB9 0000 0000             		jsr	AddPoints
0000CB56 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB5A 0200 0003                  		andi.b	#3,d0
0000CB5E 66EE                       		bne.s	locret_C692
0000CB60 303C 00CD                  		move.w	#$CD,d0
0000CB64 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CB6A                            ; ===========================================================================
0000CB6A                            
0000CB6A                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CB6A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB6E 0240 0007                  		andi.w	#7,d0
0000CB72 E748                       		lsl.w	#3,d0
0000CB74 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CB78 0241 0003                  		andi.w	#3,d1
0000CB7C D241                       		add.w	d1,d1
0000CB7E D041                       		add.w	d1,d0
0000CB80 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CB84 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CB88 4A40                       		tst.w	d0
0000CB8A 6600                       		bne.s	Obj3A_ChkSS
0000CB8C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CB92 6000                       		bra.s	Obj3A_Display2
0000CB94                            ; ===========================================================================
0000CB94                            
0000CB94                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CB94 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CB98 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CB9C 6700                       		beq.s	loc_C6EA	; if not, branch
0000CB9E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CBA4 6000                       		bra.s	Obj3A_Display2
0000CBA6                            ; ===========================================================================
0000CBA6                            
0000CBA6                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CBA6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CBAC                            
0000CBAC                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CBAC 6000 0000                  		bra.w	DisplaySprite
0000CBB0                            ; ===========================================================================
0000CBB0                            ; ---------------------------------------------------------------------------
0000CBB0                            ; Level	order array
0000CBB0                            ; ---------------------------------------------------------------------------
0000CBB0                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CBE0                            		even
0000CBE0                            ; ===========================================================================
0000CBE0                            
0000CBE0                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CBE0 7220                       		moveq	#$20,d1		; set horizontal speed
0000CBE2 3028 0032                  		move.w	$32(a0),d0
0000CBE6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CBEA 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CBEC 6C00                       		bge.s	Obj3A_Move2
0000CBEE 4441                       		neg.w	d1
0000CBF0                            
0000CBF0                            Obj3A_Move2:
0000CBF0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CBF4 3028 0008                  		move.w	8(a0),d0
0000CBF8 6B00                       		bmi.s	locret_C748
0000CBFA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CBFE 6400                       		bcc.s	locret_C748	; if yes, branch
0000CC00 6000 0000                  		bra.w	DisplaySprite
0000CC04                            ; ===========================================================================
0000CC04                            
0000CC04                            locret_C748:
0000CC04 4E75                       		rts	
0000CC06                            ; ===========================================================================
0000CC06                            
0000CC06                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CC06 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CC0C 6600 0000                  		bne.w	DeleteObject
0000CC10 5428 0024                  		addq.b	#2,$24(a0)
0000CC14 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CC18 303C 008D                  		move.w	#$8D,d0
0000CC1C 4EF9 0000 15B6             		jmp	(PlaySound).l	; play FZ music
0000CC22                            ; ===========================================================================
0000CC22                            
0000CC22                            loc_C766:				; XREF: Obj3A_Index
0000CC22 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CC26 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CC2C 6700 0000                  		beq.w	DeleteObject
0000CC30 4E75                       		rts	
0000CC32                            ; ===========================================================================
0000CC32 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CC38 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CC3A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CC40 0201                       		dc.b 2,	1
0000CC42 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CC48 0206                       		dc.b 2,	6
0000CC4A 0520 0120 00EC             		dc.w $520, $120, $EC
0000CC50 0202                       		dc.b 2,	2
0000CC52 0540 0120 00FC             		dc.w $540, $120, $FC
0000CC58 0203                       		dc.b 2,	3
0000CC5A 0560 0120 010C             		dc.w $560, $120, $10C
0000CC60 0204                       		dc.b 2,	4
0000CC62 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CC68 0205                       		dc.b 2,	5
0000CC6A                            ; ===========================================================================
0000CC6A                            ; ---------------------------------------------------------------------------
0000CC6A                            ; Object 7E - special stage results screen
0000CC6A                            ; ---------------------------------------------------------------------------
0000CC6A                            
0000CC6A                            Obj7E:					; XREF: Obj_Index
0000CC6A 7000                       		moveq	#0,d0
0000CC6C 1028 0024                  		move.b	$24(a0),d0
0000CC70 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CC74 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CC78                            ; ===========================================================================
0000CC78 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CC7A 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CC7C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC7E 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CC80 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC82 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CC84 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC86 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CC88 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC8A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CC8C 0000                       		dc.w loc_C91A-Obj7E_Index
0000CC8E                            ; ===========================================================================
0000CC8E                            
0000CC8E                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CC8E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC92 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CC94 4E75                       		rts	
0000CC96                            ; ===========================================================================
0000CC96                            
0000CC96                            Obj7E_Main:
0000CC96 2248                       		movea.l	a0,a1
0000CC98 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CC9E 7203                       		moveq	#3,d1
0000CCA0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CCA6 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CCA8 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CCAA                            
0000CCAA                            Obj7E_Loop:
0000CCAA 12BC 007E                  		move.b	#$7E,0(a1)
0000CCAE 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CCB2 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CCB6 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CCBA 135A 0024                  		move.b	(a2)+,$24(a1)
0000CCBE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CCC2 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CCCA 337C 8580 0002             		move.w	#$8580,2(a1)
0000CCD0 137C 0000 0001             		move.b	#0,1(a1)
0000CCD6 43E9 0040                  		lea	$40(a1),a1
0000CCDA 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CCDE                            
0000CCDE 7007                       		moveq	#7,d0
0000CCE0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CCE4 6700                       		beq.s	loc_C842
0000CCE6 7000                       		moveq	#0,d0
0000CCE8 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CCEC 6600                       		bne.s	loc_C842	; if not, branch
0000CCEE 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CCF0 317C 0018 0008             		move.w	#$18,8(a0)
0000CCF6 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CCFC                            
0000CCFC                            loc_C842:
0000CCFC 1140 001A                  		move.b	d0,$1A(a0)
0000CD00                            
0000CD00                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CD00 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD02 3028 0030                  		move.w	$30(a0),d0
0000CD06 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD0A 6700                       		beq.s	loc_C86C	; if yes, branch
0000CD0C 6C00                       		bge.s	Obj7E_Move
0000CD0E 4441                       		neg.w	d1
0000CD10                            
0000CD10                            Obj7E_Move:
0000CD10 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD14                            
0000CD14                            loc_C85A:				; XREF: loc_C86C
0000CD14 3028 0008                  		move.w	8(a0),d0
0000CD18 6B00                       		bmi.s	locret_C86A
0000CD1A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD1E 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CD20 6000 0000                  		bra.w	DisplaySprite
0000CD24                            ; ===========================================================================
0000CD24                            
0000CD24                            locret_C86A:
0000CD24 4E75                       		rts	
0000CD26                            ; ===========================================================================
0000CD26                            
0000CD26                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CD26 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CD2C 66E6                       		bne.s	loc_C85A
0000CD2E 5428 0024                  		addq.b	#2,$24(a0)
0000CD32 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD38 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CD3E                            
0000CD3E                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CD3E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD42 6600                       		bne.s	Obj7E_Display
0000CD44 5428 0024                  		addq.b	#2,$24(a0)
0000CD48                            
0000CD48                            Obj7E_Display:
0000CD48 6000 0000                  		bra.w	DisplaySprite
0000CD4C                            ; ===========================================================================
0000CD4C                            
0000CD4C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CD4C 6100 0000                  		bsr.w	DisplaySprite
0000CD50 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CD56 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CD5A 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CD5C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CD62 700A                       		moveq	#10,d0		; add 10 to score
0000CD64 4EB9 0000 0000             		jsr	AddPoints
0000CD6A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CD6E 0200 0003                  		andi.b	#3,d0
0000CD72 6600                       		bne.s	locret_C8EA
0000CD74 303C 00CD                  		move.w	#$CD,d0
0000CD78 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CD7E                            ; ===========================================================================
0000CD7E                            
0000CD7E                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CD7E 303C 00C5                  		move.w	#$C5,d0
0000CD82 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CD88 5428 0024                  		addq.b	#2,$24(a0)
0000CD8C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD92 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CD98 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CD9A 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CDA0 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CDA4                            
0000CDA4                            locret_C8EA:
0000CDA4 4E75                       		rts	
0000CDA6                            ; ===========================================================================
0000CDA6                            
0000CDA6                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CDA6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CDAC 6000 0000                  		bra.w	DisplaySprite
0000CDB0                            ; ===========================================================================
0000CDB0                            
0000CDB0                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CDB0 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CDB6 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CDBC 303C 00BF                  		move.w	#$BF,d0
0000CDC0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play continues music
0000CDC6 5428 0024                  		addq.b	#2,$24(a0)
0000CDCA 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CDD0 6000 0000                  		bra.w	DisplaySprite
0000CDD4                            ; ===========================================================================
0000CDD4                            
0000CDD4                            loc_C91A:				; XREF: Obj7E_Index
0000CDD4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDD8 0200 000F                  		andi.b	#$F,d0
0000CDDC 6600                       		bne.s	Obj7E_Display2
0000CDDE 0868 0000 001A             		bchg	#0,$1A(a0)
0000CDE4                            
0000CDE4                            Obj7E_Display2:
0000CDE4 6000 0000                  		bra.w	DisplaySprite
0000CDE8                            ; ===========================================================================
0000CDE8 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CDEE 0200                       		dc.b 2,	0		; rountine number, frame number
0000CDF0 0320 0120 0118             		dc.w $320, $120, $118
0000CDF6 0201                       		dc.b 2,	1
0000CDF8 0360 0120 0128             		dc.w $360, $120, $128
0000CDFE 0202                       		dc.b 2,	2
0000CE00 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CE06 0203                       		dc.b 2,	3
0000CE08 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CE0E 0206                       		dc.b 2,	6
0000CE10                            ; ===========================================================================
0000CE10                            ; ---------------------------------------------------------------------------
0000CE10                            ; Object 7F - chaos emeralds from the special stage results screen
0000CE10                            ; ---------------------------------------------------------------------------
0000CE10                            
0000CE10                            Obj7F:					; XREF: Obj_Index
0000CE10 7000                       		moveq	#0,d0
0000CE12 1028 0024                  		move.b	$24(a0),d0
0000CE16 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CE1A 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CE1E                            ; ===========================================================================
0000CE1E 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CE20 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CE22                            
0000CE22                            ; ---------------------------------------------------------------------------
0000CE22                            ; X-axis positions for chaos emeralds
0000CE22                            ; ---------------------------------------------------------------------------
0000CE22 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CE2E                            ; ===========================================================================
0000CE2E                            
0000CE2E                            Obj7F_Main:				; XREF: Obj7F_Index
0000CE2E 2248                       		movea.l	a0,a1
0000CE30 45F9 0000 CE22             		lea	(Obj7F_PosData).l,a2
0000CE36 7400                       		moveq	#0,d2
0000CE38 7200                       		moveq	#0,d1
0000CE3A 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CE3E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CE40 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CE44                            
0000CE44                            Obj7F_Loop:
0000CE44 12BC 007F                  		move.b	#$7F,0(a1)
0000CE48 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CE4C 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CE52 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CE56 1633 2000                  		move.b	(a3,d2.w),d3
0000CE5A 1343 001A                  		move.b	d3,$1A(a1)
0000CE5E 1343 001C                  		move.b	d3,$1C(a1)
0000CE62 5202                       		addq.b	#1,d2
0000CE64 5429 0024                  		addq.b	#2,$24(a1)
0000CE68 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CE70 337C 8541 0002             		move.w	#$8541,2(a1)
0000CE76 137C 0000 0001             		move.b	#0,1(a1)
0000CE7C 43E9 0040                  		lea	$40(a1),a1	; next object
0000CE80 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CE84                            
0000CE84                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CE84 1028 001A                  		move.b	$1A(a0),d0
0000CE88 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CE8E 0C00 0006                  		cmpi.b	#6,d0
0000CE92 6600                       		bne.s	Obj7F_Display
0000CE94 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CE9A                            
0000CE9A                            Obj7F_Display:
0000CE9A 6000 0000                  		bra.w	DisplaySprite
0000CE9E                            ; ===========================================================================
0000CE9E                            ; ---------------------------------------------------------------------------
0000CE9E                            ; Sprite mappings - zone title cards
0000CE9E                            ; ---------------------------------------------------------------------------
0000CE9E 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CEA0 0000                       		dc.w byte_CA2C-Map_obj34
0000CEA2 0000                       		dc.w byte_CA5A-Map_obj34
0000CEA4 0000                       		dc.w byte_CA7A-Map_obj34
0000CEA6 0000                       		dc.w byte_CAA8-Map_obj34
0000CEA8 0000                       		dc.w byte_CADC-Map_obj34
0000CEAA 0000                       		dc.w byte_CB10-Map_obj34
0000CEAC 0000                       		dc.w byte_CB26-Map_obj34
0000CEAE 0000                       		dc.w byte_CB31-Map_obj34
0000CEB0 0000                       		dc.w byte_CB3C-Map_obj34
0000CEB2 0000                       		dc.w byte_CB47-Map_obj34
0000CEB4 0000                       		dc.w byte_CB8A-Map_obj34
0000CEB6 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CEB7 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CEBC F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CEC1 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CEC6 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CECB F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CED0 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CED5 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CEDA F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CEDF F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CEE4 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CEE9 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CEEE F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CEF3 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CEF4 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CEF9 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CEFE F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CF03 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CF08 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CF0D F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CF12 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CF17 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CF1C F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CF21 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CF26 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CF2B F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CF30 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CF35 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CF3A F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CF3F F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CF44 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CF49 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CF4E F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CF53 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CF58 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CF5D F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CF62 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CF63 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CF68 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CF6D F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CF72 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CF77 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CF7C 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CF7D F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CF82 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CF87 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CF8C F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CF91 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CF96 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CF9B F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CFA0 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CFA5 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000CFAA F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000CFAF F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000CFB4 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000CFB9 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000CFBE F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000CFC3 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000CFC8 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000CFCD F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000CFD2 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000CFD3 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000CFD8 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000CFDD F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000CFE2 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CFE7 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000CFEC F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000CFF1 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000CFF6 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000CFFB F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D000 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D005 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D00A F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D00F F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D014 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D019 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D01E F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D023 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D028 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D02D F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D032 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D037 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D03C 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D03D F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D042 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D047 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D04C F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D051 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D056 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D05B F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D060 04                         byte_CB10:	dc.b 4			; ZONE
0000D061 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D066 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D06B F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D070 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D075 00                         		dc.b 0
0000D076 02                         byte_CB26:	dc.b 2			; ACT 1
0000D077 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D07C F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D081 02                         byte_CB31:	dc.b 2			; ACT 2
0000D082 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D087 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D08C 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D08D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D092 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D097 0D                         byte_CB47:	dc.b $D			; Oval
0000D098 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D09D E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D0A2 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D0A7 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D0AC 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D0B1 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D0B6 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D0BB FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D0C0 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D0C5 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D0CA FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D0CF 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D0D4 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D0D9 00                         		dc.b 0
0000D0DA 05                         byte_CB8A:	dc.b 5			; FINAL
0000D0DB F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D0E0 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D0E5 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D0EA F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D0EF F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D0F4                            		even
0000D0F4                            ; ---------------------------------------------------------------------------
0000D0F4                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D0F4                            ; ---------------------------------------------------------------------------
0000D0F4                            Map_obj39:
0000D0F4                            	include "_maps\obj39.asm"
0000D0F4                            ; ---------------------------------------------------------------------------
0000D0F4                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D0F4                            ; ---------------------------------------------------------------------------
0000D0F4 0000                       		dc.w byte_CBAC-Map_obj39
0000D0F6 0000                       		dc.w byte_CBB7-Map_obj39
0000D0F8 0000                       		dc.w byte_CBC2-Map_obj39
0000D0FA 0000                       		dc.w byte_CBCD-Map_obj39
0000D0FC 02                         byte_CBAC:	dc.b 2
0000D0FD F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D102 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D107 02                         byte_CBB7:	dc.b 2
0000D108 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D10D F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D112 02                         byte_CBC2:	dc.b 2
0000D113 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D118 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D11D 02                         byte_CBCD:	dc.b 2
0000D11E F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D123 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D128                            		even
0000D128                            		even
0000D128                            
0000D128                            ; ---------------------------------------------------------------------------
0000D128                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D128                            ; ---------------------------------------------------------------------------
0000D128 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D12A 0000                       		dc.w byte_CC13-Map_obj3A
0000D12C 0000                       		dc.w byte_CC32-Map_obj3A
0000D12E 0000                       		dc.w byte_CC51-Map_obj3A
0000D130 0000                       		dc.w byte_CC75-Map_obj3A
0000D132 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D134 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D136 FF59                       		dc.w byte_CB31-Map_obj3A
0000D138 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D13A 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D13B F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D140 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D145 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D14A F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D14F F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D154 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D159 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D15E F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D163 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D168 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D16D F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D172 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D177 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D17C F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D181 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D186 06                         byte_CC13:	dc.b 6			; PASSED
0000D187 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D18C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D191 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D196 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D19B F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D1A0 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D1A5 06                         byte_CC32:	dc.b 6			; SCORE
0000D1A6 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D1AB F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D1B0 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D1B5 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D1BA F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D1BF FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D1C4 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D1C5 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D1CA F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D1CF F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D1D4 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D1D9 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D1DE F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D1E3 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D1E8 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D1E9 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D1EE F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D1F3 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D1F8 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D1FD FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D202 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D207 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D20C                            		even
0000D20C                            ; ---------------------------------------------------------------------------
0000D20C                            ; Sprite mappings - special stage results screen
0000D20C                            ; ---------------------------------------------------------------------------
0000D20C 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D20E 0000                       		dc.w byte_CCEE-Map_obj7E
0000D210 0000                       		dc.w byte_CD0D-Map_obj7E
0000D212 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D214 0000                       		dc.w byte_CD31-Map_obj7E
0000D216 0000                       		dc.w byte_CD46-Map_obj7E
0000D218 0000                       		dc.w byte_CD5B-Map_obj7E
0000D21A 0000                       		dc.w byte_CD6B-Map_obj7E
0000D21C 0000                       		dc.w byte_CDA8-Map_obj7E
0000D21E 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D21F F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D224 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D229 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D22E F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D233 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D238 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D23D F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D242 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D247 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D24C F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D251 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D256 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D25B F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D260 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D261 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D266 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D26B F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D270 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D275 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D27A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D27F 07                         byte_CD0D:	dc.b 7
0000D280 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D285 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D28A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D28F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D294 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D299 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D29E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D2A3 04                         byte_CD31:	dc.b 4
0000D2A4 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2A9 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2AE F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2B3 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D2B8 04                         byte_CD46:	dc.b 4
0000D2B9 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2BE F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2C3 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2C8 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D2CD 03                         byte_CD5B:	dc.b 3
0000D2CE F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2D3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2D8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2DD 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D2DE F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D2E3 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D2E8 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D2ED F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D2F2 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D2F7 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D2FC F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D301 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D306 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D30B F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D310 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D315 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D31A 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D31B F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D320 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D325 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D32A F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D32F F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D334 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D339 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D33E F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D343 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D348 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D34D F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D352 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D357 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D35C F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D361 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D366                            		even
0000D366                            ; ---------------------------------------------------------------------------
0000D366                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D366                            ; ---------------------------------------------------------------------------
0000D366                            Map_obj7F:
0000D366                            	include "_maps\obj7F.asm"
0000D366                            ; ---------------------------------------------------------------------------
0000D366                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D366                            ; ---------------------------------------------------------------------------
0000D366 0000                       		dc.w byte_CE02-Map_obj7F
0000D368 0000                       		dc.w byte_CE08-Map_obj7F
0000D36A 0000                       		dc.w byte_CE0E-Map_obj7F
0000D36C 0000                       		dc.w byte_CE14-Map_obj7F
0000D36E 0000                       		dc.w byte_CE1A-Map_obj7F
0000D370 0000                       		dc.w byte_CE20-Map_obj7F
0000D372 0000                       		dc.w byte_CE26-Map_obj7F
0000D374 01                         byte_CE02:	dc.b 1
0000D375 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D37A 01                         byte_CE08:	dc.b 1
0000D37B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D380 01                         byte_CE0E:	dc.b 1
0000D381 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D386 01                         byte_CE14:	dc.b 1
0000D387 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D38C 01                         byte_CE1A:	dc.b 1
0000D38D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D392 01                         byte_CE20:	dc.b 1
0000D393 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D398 00                         byte_CE26:	dc.b 0			; Blank frame
0000D39A 00                         		even
0000D39A 00                         		even
0000D39A                            
0000D39A                            ; ===========================================================================
0000D39A                            ; ---------------------------------------------------------------------------
0000D39A                            ; Object 36 - spikes
0000D39A                            ; ---------------------------------------------------------------------------
0000D39A                            
0000D39A                            Obj36:					; XREF: Obj_Index
0000D39A 7000                       		moveq	#0,d0
0000D39C 1028 0024                  		move.b	$24(a0),d0
0000D3A0 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D3A4 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D3A8                            ; ===========================================================================
0000D3A8 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D3AA 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D3AC                            
0000D3AC 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D3AE 0110                       		dc.b 1,	$10
0000D3B0 0204                       		dc.b 2,	4
0000D3B2 031C                       		dc.b 3,	$1C
0000D3B4 0440                       		dc.b 4,	$40
0000D3B6 0510                       		dc.b 5,	$10
0000D3B8                            ; ===========================================================================
0000D3B8                            
0000D3B8                            Obj36_Main:				; XREF: Obj36_Index
0000D3B8 5428 0024                  		addq.b	#2,$24(a0)
0000D3BC 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D3C4 317C 051B 0002             		move.w	#$51B,2(a0)
0000D3CA 0028 0004 0001             		ori.b	#4,1(a0)
0000D3D0 117C 0004 0018             		move.b	#4,$18(a0)
0000D3D6 1028 0028                  		move.b	$28(a0),d0
0000D3DA 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D3E0 0240 00F0                  		andi.w	#$F0,d0
0000D3E4 43F9 0000 D3AC             		lea	(Obj36_Var).l,a1
0000D3EA E648                       		lsr.w	#3,d0
0000D3EC D2C0                       		adda.w	d0,a1
0000D3EE 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D3F2 1159 0019                  		move.b	(a1)+,$19(a0)
0000D3F6 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D3FC 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D402                            
0000D402                            Obj36_Solid:				; XREF: Obj36_Index
0000D402 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D406 343C 0004                  		move.w	#4,d2
0000D40A 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D410 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D412 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D418 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D41A 343C 0014                  		move.w	#$14,d2
0000D41E                            
0000D41E                            ; Spikes types $1x and $5x face	sideways
0000D41E                            
0000D41E                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D41E 323C 001B                  		move.w	#$1B,d1
0000D422 3602                       		move.w	d2,d3
0000D424 5243                       		addq.w	#1,d3
0000D426 3828 0008                  		move.w	8(a0),d4
0000D42A 6100 0000                  		bsr.w	SolidObject
0000D42E 0828 0003 0022             		btst	#3,$22(a0)
0000D434 6600                       		bne.s	Obj36_Display
0000D436 0C44 0001                  		cmpi.w	#1,d4
0000D43A 6700                       		beq.s	Obj36_Hurt
0000D43C 6000                       		bra.s	Obj36_Display
0000D43E                            ; ===========================================================================
0000D43E                            
0000D43E                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D43E                            
0000D43E                            Obj36_Upright:				; XREF: Obj36_Solid
0000D43E 7200                       		moveq	#0,d1
0000D440 1228 0019                  		move.b	$19(a0),d1
0000D444 0641 000B                  		addi.w	#$B,d1
0000D448 343C 0010                  		move.w	#$10,d2
0000D44C 363C 0011                  		move.w	#$11,d3
0000D450 3828 0008                  		move.w	8(a0),d4
0000D454 6100 0000                  		bsr.w	SolidObject
0000D458 0828 0003 0022             		btst	#3,$22(a0)
0000D45E 6600                       		bne.s	Obj36_Hurt
0000D460 4A44                       		tst.w	d4
0000D462 6A00                       		bpl.s	Obj36_Display
0000D464                            
0000D464                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D464 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D468 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D46A 2F08                       		move.l	a0,-(sp)
0000D46C 2448                       		movea.l	a0,a2
0000D46E 41F8 D000                  		lea	($FFFFD000).w,a0
0000D472 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D478 6400                       		bcc.s	loc_CF20
0000D47A 2628 000C                  		move.l	$C(a0),d3
0000D47E 3028 0012                  		move.w	$12(a0),d0
0000D482 48C0                       		ext.l	d0
0000D484 E180                       		asl.l	#8,d0
0000D486 9680                       		sub.l	d0,d3
0000D488 2143 000C                  		move.l	d3,$C(a0)
0000D48C 4EB9 0000 0000             		jsr	HurtSonic
0000D492                            
0000D492                            loc_CF20:
0000D492 205F                       		movea.l	(sp)+,a0
0000D494                            
0000D494                            Obj36_Display:
0000D494 6100 0000                  		bsr.w	DisplaySprite
0000D498 3028 0030                  		move.w	$30(a0),d0
0000D49C 0240 FF80                  		andi.w	#$FF80,d0
0000D4A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000D4A4 0441 0080                  		subi.w	#$80,d1
0000D4A8 0241 FF80                  		andi.w	#$FF80,d1
0000D4AC 9041                       		sub.w	d1,d0
0000D4AE 0C40 0280                  		cmpi.w	#$280,d0
0000D4B2 6200 0000                  		bhi.w	DeleteObject
0000D4B6 4E75                       		rts	
0000D4B8                            ; ===========================================================================
0000D4B8                            
0000D4B8                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D4B8 7000                       		moveq	#0,d0
0000D4BA 1028 0028                  		move.b	$28(a0),d0
0000D4BE D040                       		add.w	d0,d0
0000D4C0 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D4C4 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D4C8                            ; ===========================================================================
0000D4C8 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D4CA 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D4CC 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D4CE                            ; ===========================================================================
0000D4CE                            
0000D4CE                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D4CE 4E75                       		rts			; don't move the object
0000D4D0                            ; ===========================================================================
0000D4D0                            
0000D4D0                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D4D0 6100 0000                  		bsr.w	Obj36_Wait
0000D4D4 7000                       		moveq	#0,d0
0000D4D6 1028 0034                  		move.b	$34(a0),d0
0000D4DA D068 0032                  		add.w	$32(a0),d0
0000D4DE 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D4E2 4E75                       		rts	
0000D4E4                            ; ===========================================================================
0000D4E4                            
0000D4E4                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D4E4 6100 0000                  		bsr.w	Obj36_Wait
0000D4E8 7000                       		moveq	#0,d0
0000D4EA 1028 0034                  		move.b	$34(a0),d0
0000D4EE D068 0030                  		add.w	$30(a0),d0
0000D4F2 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D4F6 4E75                       		rts	
0000D4F8                            ; ===========================================================================
0000D4F8                            
0000D4F8                            Obj36_Wait:
0000D4F8 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D4FC 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D4FE 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D502 6600                       		bne.s	locret_CFE6
0000D504 4A28 0001                  		tst.b	1(a0)
0000D508 6A00                       		bpl.s	locret_CFE6
0000D50A 303C 00B6                  		move.w	#$B6,d0
0000D50E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D514 6000                       		bra.s	locret_CFE6
0000D516                            ; ===========================================================================
0000D516                            
0000D516                            loc_CFA4:
0000D516 4A68 0036                  		tst.w	$36(a0)
0000D51A 6700                       		beq.s	loc_CFC6
0000D51C 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D522 6400                       		bcc.s	locret_CFE6
0000D524 317C 0000 0034             		move.w	#0,$34(a0)
0000D52A 317C 0000 0036             		move.w	#0,$36(a0)
0000D530 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D536 6000                       		bra.s	locret_CFE6
0000D538                            ; ===========================================================================
0000D538                            
0000D538                            loc_CFC6:
0000D538 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D53E 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D544 6500                       		bcs.s	locret_CFE6
0000D546 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D54C 317C 0001 0036             		move.w	#1,$36(a0)
0000D552 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D558                            
0000D558                            locret_CFE6:
0000D558 4E75                       		rts	
0000D55A                            ; ===========================================================================
0000D55A                            ; ---------------------------------------------------------------------------
0000D55A                            ; Sprite mappings - spikes
0000D55A                            ; ---------------------------------------------------------------------------
0000D55A                            Map_obj36:
0000D55A                            	include "_maps\obj36.asm"
0000D55A                            ; ---------------------------------------------------------------------------
0000D55A                            ; Sprite mappings - spikes
0000D55A                            ; ---------------------------------------------------------------------------
0000D55A 0000                       		dc.w byte_CFF4-Map_obj36
0000D55C 0000                       		dc.w byte_D004-Map_obj36
0000D55E 0000                       		dc.w byte_D014-Map_obj36
0000D560 0000                       		dc.w byte_D01A-Map_obj36
0000D562 0000                       		dc.w byte_D02A-Map_obj36
0000D564 0000                       		dc.w byte_D049-Map_obj36
0000D566 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D567 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D56C F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D571 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D576 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D577 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D57C FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D581 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D586 01                         byte_D014:	dc.b 1			; 1 spike
0000D587 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D58C 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D58D F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D592 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D597 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D59C 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D59D F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D5A2 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D5A7 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D5AC F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D5B1 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D5B6 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D5BB 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D5BC FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D5C2 00                         		even
0000D5C2 00                         		even
0000D5C2                            
0000D5C2                            ; ===========================================================================
0000D5C2                            ; ---------------------------------------------------------------------------
0000D5C2                            ; Object 3B - purple rock (GHZ)
0000D5C2                            ; ---------------------------------------------------------------------------
0000D5C2                            
0000D5C2                            Obj3B:					; XREF: Obj_Index
0000D5C2 7000                       		moveq	#0,d0
0000D5C4 1028 0024                  		move.b	$24(a0),d0
0000D5C8 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D5CC 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D5D0                            ; ===========================================================================
0000D5D0 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D5D2 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D5D4                            ; ===========================================================================
0000D5D4                            
0000D5D4                            Obj3B_Main:				; XREF: Obj3B_Index
0000D5D4 5428 0024                  		addq.b	#2,$24(a0)
0000D5D8 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D5E0 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D5E6 117C 0004 0001             		move.b	#4,1(a0)
0000D5EC 117C 0013 0019             		move.b	#$13,$19(a0)
0000D5F2 117C 0004 0018             		move.b	#4,$18(a0)
0000D5F8                            
0000D5F8                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D5F8 323C 001B                  		move.w	#$1B,d1
0000D5FC 343C 0010                  		move.w	#$10,d2
0000D600 363C 0010                  		move.w	#$10,d3
0000D604 3828 0008                  		move.w	8(a0),d4
0000D608 6100 0000                  		bsr.w	SolidObject
0000D60C 6100 0000                  		bsr.w	DisplaySprite
0000D610 3028 0008                  		move.w	8(a0),d0
0000D614 0240 FF80                  		andi.w	#$FF80,d0
0000D618 3238 F700                  		move.w	($FFFFF700).w,d1
0000D61C 0441 0080                  		subi.w	#$80,d1
0000D620 0241 FF80                  		andi.w	#$FF80,d1
0000D624 9041                       		sub.w	d1,d0
0000D626 0C40 0280                  		cmpi.w	#$280,d0
0000D62A 6200 0000                  		bhi.w	DeleteObject
0000D62E 4E75                       		rts	
0000D630                            ; ===========================================================================
0000D630                            ; ---------------------------------------------------------------------------
0000D630                            ; Object 49 - waterfall	sound effect (GHZ)
0000D630                            ; ---------------------------------------------------------------------------
0000D630                            
0000D630                            Obj49:					; XREF: Obj_Index
0000D630 7000                       		moveq	#0,d0
0000D632 1028 0024                  		move.b	$24(a0),d0
0000D636 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D63A 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D63E                            ; ===========================================================================
0000D63E 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D640 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D642                            ; ===========================================================================
0000D642                            
0000D642                            Obj49_Main:				; XREF: Obj49_Index
0000D642 5428 0024                  		addq.b	#2,$24(a0)
0000D646 117C 0004 0001             		move.b	#4,1(a0)
0000D64C                            
0000D64C                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D64C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D650 0200 003F                  		andi.b	#$3F,d0
0000D654 6600                       		bne.s	Obj49_ChkDel
0000D656 303C 00D0                  		move.w	#$D0,d0
0000D65A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D660                            
0000D660                            Obj49_ChkDel:
0000D660 3028 0008                  		move.w	8(a0),d0
0000D664 0240 FF80                  		andi.w	#$FF80,d0
0000D668 3238 F700                  		move.w	($FFFFF700).w,d1
0000D66C 0441 0080                  		subi.w	#$80,d1
0000D670 0241 FF80                  		andi.w	#$FF80,d1
0000D674 9041                       		sub.w	d1,d0
0000D676 0C40 0280                  		cmpi.w	#$280,d0
0000D67A 6200 0000                  		bhi.w	DeleteObject
0000D67E 4E75                       		rts	
0000D680                            ; ===========================================================================
0000D680                            ; ---------------------------------------------------------------------------
0000D680                            ; Sprite mappings - purple rock	(GHZ)
0000D680                            ; ---------------------------------------------------------------------------
0000D680                            Map_obj3B:
0000D680                            	include "_maps\obj3B.asm"
0000D680                            ; ---------------------------------------------------------------------------
0000D680                            ; Sprite mappings - purple rock	(GHZ)
0000D680                            ; ---------------------------------------------------------------------------
0000D680 0000                       		dc.w byte_D110-Map_obj3B
0000D682 02                         byte_D110:	dc.b 2
0000D683 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D688 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D68E 00                         		even
0000D68E 00                         		even
0000D68E                            
0000D68E                            ; ===========================================================================
0000D68E                            ; ---------------------------------------------------------------------------
0000D68E                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D68E                            ; ---------------------------------------------------------------------------
0000D68E                            
0000D68E                            Obj3C:					; XREF: Obj_Index
0000D68E 7000                       		moveq	#0,d0
0000D690 1028 0024                  		move.b	$24(a0),d0
0000D694 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D698 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D69C 6000 0000                  		bra.w	MarkObjGone
0000D6A0                            ; ===========================================================================
0000D6A0 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D6A2 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D6A4 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D6A6                            ; ===========================================================================
0000D6A6                            
0000D6A6                            Obj3C_Main:				; XREF: Obj3C_Index
0000D6A6 5428 0024                  		addq.b	#2,$24(a0)
0000D6AA 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D6B2 317C 450F 0002             		move.w	#$450F,2(a0)
0000D6B8 117C 0004 0001             		move.b	#4,1(a0)
0000D6BE 117C 0010 0019             		move.b	#$10,$19(a0)
0000D6C4 117C 0004 0018             		move.b	#4,$18(a0)
0000D6CA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D6D0                            
0000D6D0                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D6D0 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D6D6 323C 001B                  		move.w	#$1B,d1
0000D6DA 343C 0020                  		move.w	#$20,d2
0000D6DE 363C 0020                  		move.w	#$20,d3
0000D6E2 3828 0008                  		move.w	8(a0),d4
0000D6E6 6100 0000                  		bsr.w	SolidObject
0000D6EA 0828 0005 0022             		btst	#5,$22(a0)
0000D6F0 6600                       		bne.s	Obj3C_ChkRoll
0000D6F2                            
0000D6F2                            locret_D180:
0000D6F2 4E75                       		rts	
0000D6F4                            ; ===========================================================================
0000D6F4                            
0000D6F4                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D6F4 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D6FA 66F6                       		bne.s	locret_D180	; if not, branch
0000D6FC 3028 0030                  		move.w	$30(a0),d0
0000D700 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D702 4440                       		neg.w	d0
0000D704                            
0000D704                            Obj3C_ChkSpeed:
0000D704 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D708 65E8                       		bcs.s	locret_D180	; if not, branch
0000D70A 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D710 5869 0008                  		addq.w	#4,8(a1)
0000D714 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D71A 3028 0008                  		move.w	8(a0),d0
0000D71E B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D722 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D724 5169 0008                  		subq.w	#8,8(a1)
0000D728 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D72E                            
0000D72E                            Obj3C_Smash:
0000D72E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D734 08A8 0005 0022             		bclr	#5,$22(a0)
0000D73A 08A9 0005 0022             		bclr	#5,$22(a1)
0000D740 7207                       		moveq	#7,d1		; load 8 fragments
0000D742 343C 0070                  		move.w	#$70,d2
0000D746 6100                       		bsr.s	SmashObject
0000D748                            
0000D748                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D748 6100 0000                  		bsr.w	SpeedToPos
0000D74C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D752 6100 0000                  		bsr.w	DisplaySprite
0000D756 4A28 0001                  		tst.b	1(a0)
0000D75A 6A00 0000                  		bpl.w	DeleteObject
0000D75E 4E75                       		rts	
0000D760                            
0000D760                            ; ---------------------------------------------------------------------------
0000D760                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D760                            ; ---------------------------------------------------------------------------
0000D760                            
0000D760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D760                            
0000D760                            
0000D760                            SmashObject:				; XREF: Obj3C_Smash
0000D760 7000                       		moveq	#0,d0
0000D762 1028 001A                  		move.b	$1A(a0),d0
0000D766 D040                       		add.w	d0,d0
0000D768 2668 0004                  		movea.l	4(a0),a3
0000D76C D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D770 524B                       		addq.w	#1,a3
0000D772 08E8 0005 0001             		bset	#5,1(a0)
0000D778 1810                       		move.b	0(a0),d4
0000D77A 1A28 0001                  		move.b	1(a0),d5
0000D77E 2248                       		movea.l	a0,a1
0000D780 6000                       		bra.s	Smash_LoadFrag
0000D782                            ; ===========================================================================
0000D782                            
0000D782                            Smash_Loop:
0000D782 6100 0000                  		bsr.w	SingleObjLoad
0000D786 6600                       		bne.s	Smash_PlaySnd
0000D788 5A4B                       		addq.w	#5,a3
0000D78A                            
0000D78A                            Smash_LoadFrag:				; XREF: SmashObject
0000D78A 137C 0004 0024             		move.b	#4,$24(a1)
0000D790 1284                       		move.b	d4,0(a1)
0000D792 234B 0004                  		move.l	a3,4(a1)
0000D796 1345 0001                  		move.b	d5,1(a1)
0000D79A 3368 0008 0008             		move.w	8(a0),8(a1)
0000D7A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D7A6 3368 0002 0002             		move.w	2(a0),2(a1)
0000D7AC 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D7B2 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D7B8 335C 0010                  		move.w	(a4)+,$10(a1)
0000D7BC 335C 0012                  		move.w	(a4)+,$12(a1)
0000D7C0 B3C8                       		cmpa.l	a0,a1
0000D7C2 6400                       		bcc.s	loc_D268
0000D7C4 2F08                       		move.l	a0,-(sp)
0000D7C6 2049                       		movea.l	a1,a0
0000D7C8 6100 0000                  		bsr.w	SpeedToPos
0000D7CC D568 0012                  		add.w	d2,$12(a0)
0000D7D0 205F                       		movea.l	(sp)+,a0
0000D7D2 6100 0000                  		bsr.w	DisplaySprite2
0000D7D6                            
0000D7D6                            loc_D268:
0000D7D6 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D7DA                            
0000D7DA                            Smash_PlaySnd:
0000D7DA 303C 00CB                  		move.w	#$CB,d0
0000D7DE 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D7E4                            ; End of function SmashObject
0000D7E4                            
0000D7E4                            ; ===========================================================================
0000D7E4                            ; Smashed block	fragment speeds
0000D7E4                            ;
0000D7E4 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D7E8 0600 FF00                  		dc.w $600, $FF00
0000D7EC 0600 0100                  		dc.w $600, $100
0000D7F0 0400 0500                  		dc.w $400, $500
0000D7F4 0600 FA00                  		dc.w $600, $FA00
0000D7F8 0800 FE00                  		dc.w $800, $FE00
0000D7FC 0800 0200                  		dc.w $800, $200
0000D800 0600 0600                  		dc.w $600, $600
0000D804                            
0000D804 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D808 F800 FE00                  		dc.w $F800, $FE00
0000D80C F800 0200                  		dc.w $F800, $200
0000D810 FA00 0600                  		dc.w $FA00, $600
0000D814 FC00 FB00                  		dc.w $FC00, $FB00
0000D818 FA00 FF00                  		dc.w $FA00, $FF00
0000D81C FA00 0100                  		dc.w $FA00, $100
0000D820 FC00 0500                  		dc.w $FC00, $500
0000D824                            ; ---------------------------------------------------------------------------
0000D824                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D824                            ; ---------------------------------------------------------------------------
0000D824                            Map_obj3C:
0000D824                            	include "_maps\obj3C.asm"
0000D824                            ; ---------------------------------------------------------------------------
0000D824                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D824                            ; ---------------------------------------------------------------------------
0000D824 0000                       		dc.w byte_D2BC-Map_obj3C
0000D826 0000                       		dc.w byte_D2E5-Map_obj3C
0000D828 0000                       		dc.w byte_D30E-Map_obj3C
0000D82A 08                         byte_D2BC:	dc.b 8
0000D82B E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D830 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D835 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D83A 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D83F E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D844 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D849 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D84E 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D853 08                         byte_D2E5:	dc.b 8
0000D854 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D859 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D85E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D863 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D868 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D86D F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D872 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D877 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D87C 08                         byte_D30E:	dc.b 8
0000D87D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D882 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D887 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D88C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D891 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D896 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D89B 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D8A0 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D8A6 00                         		even
0000D8A6 00                         		even
0000D8A6                            
0000D8A6                            ; ---------------------------------------------------------------------------
0000D8A6                            ; Object code loading subroutine
0000D8A6                            ; ---------------------------------------------------------------------------
0000D8A6                            
0000D8A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8A6                            
0000D8A6                            
0000D8A6                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D8A6 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D8AA 7E7F                       		moveq	#$7F,d7
0000D8AC 7000                       		moveq	#0,d0
0000D8AE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D8B4 6400                       		bcc.s	loc_D362
0000D8B6                            
0000D8B6                            loc_D348:
0000D8B6 1010                       		move.b	(a0),d0		; load object number from RAM
0000D8B8 6700                       		beq.s	loc_D358
0000D8BA D040                       		add.w	d0,d0
0000D8BC D040                       		add.w	d0,d0
0000D8BE 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D8C2 4E91                       		jsr	(a1)		; run the object's code
0000D8C4 7000                       		moveq	#0,d0
0000D8C6                            
0000D8C6                            loc_D358:
0000D8C6 41E8 0040                  		lea	$40(a0),a0	; next object
0000D8CA 51CF FFEA                  		dbf	d7,loc_D348
0000D8CE 4E75                       		rts	
0000D8D0                            ; ===========================================================================
0000D8D0                            
0000D8D0                            loc_D362:
0000D8D0 7E1F                       		moveq	#$1F,d7
0000D8D2 61E2                       		bsr.s	loc_D348
0000D8D4 7E5F                       		moveq	#$5F,d7
0000D8D6                            
0000D8D6                            loc_D368:
0000D8D6 7000                       		moveq	#0,d0
0000D8D8 1010                       		move.b	(a0),d0
0000D8DA 6700                       		beq.s	loc_D378
0000D8DC 4A28 0001                  		tst.b	1(a0)
0000D8E0 6A00                       		bpl.s	loc_D378
0000D8E2 6100 0000                  		bsr.w	DisplaySprite
0000D8E6                            
0000D8E6                            loc_D378:
0000D8E6 41E8 0040                  		lea	$40(a0),a0
0000D8EA                            
0000D8EA                            loc_D37C:
0000D8EA 51CF FFEA                  		dbf	d7,loc_D368
0000D8EE 4E75                       		rts	
0000D8F0                            ; End of function ObjectsLoad
0000D8F0                            
0000D8F0                            ; ===========================================================================
0000D8F0                            ; ---------------------------------------------------------------------------
0000D8F0                            ; Object pointers
0000D8F0                            ; ---------------------------------------------------------------------------
0000D8F0                            Obj_Index:
0000D8F0                            	include "_inc\Object pointers.asm"
0000D8F0                            ; ---------------------------------------------------------------------------
0000D8F0                            ; Object pointers
0000D8F0                            ; ---------------------------------------------------------------------------
0000D8F0 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D900 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D910 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D920 0000 0000 0000 AB46 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D930 0000 777E 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D940 0000 7DA4 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D950 0000 85F2 0000 865A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D960 0000 8CA4 0000 8F92 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D970 0000 0000 0000 9C42 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D980 0000 9F7A 0000 A566 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D990 0000 989E 0000 8D7A 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D9A0 0000 B134 0000 A75A 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D9B0 0000 BB42 0000 C1F0 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D9C0 0000 B6A6 0000 D39A 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D9D0 0000 C976 0000 CA30 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D9E0 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D9F0 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DA00 0000 BE5E 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DA10 0000 D630 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DA20 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DA30 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DA40 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DA50 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DA60 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DA70 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DA80 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DA90 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DAA0 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DAB0 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DAC0 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DAD0 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DAE0 0000 0000 0000 CC6A 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DAF0 0000 529E 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DB00 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DB10 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB10 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB20                            
0000DB20                            ; ---------------------------------------------------------------------------
0000DB20                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DB20                            ; ---------------------------------------------------------------------------
0000DB20                            
0000DB20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB20                            
0000DB20                            
0000DB20                            ObjectFall:
0000DB20 2428 0008                  		move.l	8(a0),d2
0000DB24 2628 000C                  		move.l	$C(a0),d3
0000DB28 3028 0010                  		move.w	$10(a0),d0
0000DB2C 48C0                       		ext.l	d0
0000DB2E E180                       		asl.l	#8,d0
0000DB30 D480                       		add.l	d0,d2
0000DB32 3028 0012                  		move.w	$12(a0),d0
0000DB36 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DB3C 48C0                       		ext.l	d0
0000DB3E E180                       		asl.l	#8,d0
0000DB40 D680                       		add.l	d0,d3
0000DB42 2142 0008                  		move.l	d2,8(a0)
0000DB46 2143 000C                  		move.l	d3,$C(a0)
0000DB4A 4E75                       		rts	
0000DB4C                            ; End of function ObjectFall
0000DB4C                            
0000DB4C                            ; ---------------------------------------------------------------------------
0000DB4C                            ; Subroutine translating object	speed to update	object position
0000DB4C                            ; ---------------------------------------------------------------------------
0000DB4C                            
0000DB4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB4C                            
0000DB4C                            
0000DB4C                            SpeedToPos:
0000DB4C 2428 0008                  		move.l	8(a0),d2
0000DB50 2628 000C                  		move.l	$C(a0),d3
0000DB54 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DB58 48C0                       		ext.l	d0
0000DB5A E180                       		asl.l	#8,d0		; multiply speed by $100
0000DB5C D480                       		add.l	d0,d2		; add to x-axis	position
0000DB5E 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DB62 48C0                       		ext.l	d0
0000DB64 E180                       		asl.l	#8,d0		; multiply by $100
0000DB66 D680                       		add.l	d0,d3		; add to y-axis	position
0000DB68 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DB6C 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DB70 4E75                       		rts	
0000DB72                            ; End of function SpeedToPos
0000DB72                            
0000DB72                            ; ---------------------------------------------------------------------------
0000DB72                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DB72                            ; ---------------------------------------------------------------------------
0000DB72                            
0000DB72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB72                            
0000DB72                            
0000DB72                            DisplaySprite:
0000DB72 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DB76 3028 0018                  		move.w	$18(a0),d0
0000DB7A E248                       		lsr.w	#1,d0
0000DB7C 0240 0380                  		andi.w	#$380,d0
0000DB80 D2C0                       		adda.w	d0,a1
0000DB82 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DB86 6400                       		bcc.s	locret_D620
0000DB88 5451                       		addq.w	#2,(a1)
0000DB8A D2D1                       		adda.w	(a1),a1
0000DB8C 3288                       		move.w	a0,(a1)
0000DB8E                            
0000DB8E                            locret_D620:
0000DB8E 4E75                       		rts	
0000DB90                            ; End of function DisplaySprite
0000DB90                            
0000DB90                            ; ---------------------------------------------------------------------------
0000DB90                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DB90                            ; ---------------------------------------------------------------------------
0000DB90                            
0000DB90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB90                            
0000DB90                            
0000DB90                            DisplaySprite2:
0000DB90 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DB94 3029 0018                  		move.w	$18(a1),d0
0000DB98 E248                       		lsr.w	#1,d0
0000DB9A 0240 0380                  		andi.w	#$380,d0
0000DB9E D4C0                       		adda.w	d0,a2
0000DBA0 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DBA4 6400                       		bcc.s	locret_D63E
0000DBA6 5452                       		addq.w	#2,(a2)
0000DBA8 D4D2                       		adda.w	(a2),a2
0000DBAA 3489                       		move.w	a1,(a2)
0000DBAC                            
0000DBAC                            locret_D63E:
0000DBAC 4E75                       		rts	
0000DBAE                            ; End of function DisplaySprite2
0000DBAE                            
0000DBAE                            ; ---------------------------------------------------------------------------
0000DBAE                            ; Subroutine to	delete an object
0000DBAE                            ; ---------------------------------------------------------------------------
0000DBAE                            
0000DBAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBAE                            
0000DBAE                            
0000DBAE                            DeleteObject:
0000DBAE 2248                       		movea.l	a0,a1
0000DBB0                            
0000DBB0                            DeleteObject2:
0000DBB0 7200                       		moveq	#0,d1
0000DBB2 700F                       		moveq	#$F,d0
0000DBB4                            
0000DBB4                            loc_D646:
0000DBB4 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DBB6 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DBBA 4E75                       		rts	
0000DBBC                            ; End of function DeleteObject
0000DBBC                            
0000DBBC                            ; ===========================================================================
0000DBBC 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DBC0 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DBC4 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DBC8 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DBCC                            ; ---------------------------------------------------------------------------
0000DBCC                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DBCC                            ; ---------------------------------------------------------------------------
0000DBCC                            
0000DBCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBCC                            
0000DBCC                            
0000DBCC                            BuildSprites:				; XREF: TitleScreen; et al
0000DBCC 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DBD0 7A00                       		moveq	#0,d5
0000DBD2 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DBD6 7E07                       		moveq	#7,d7
0000DBD8                            
0000DBD8                            loc_D66A:
0000DBD8 4A54                       		tst.w	(a4)
0000DBDA 6700 0000                  		beq.w	loc_D72E
0000DBDE 7C02                       		moveq	#2,d6
0000DBE0                            
0000DBE0                            loc_D672:
0000DBE0 3074 6000                  		movea.w	(a4,d6.w),a0
0000DBE4 4A10                       		tst.b	(a0)
0000DBE6 6700 0000                  		beq.w	loc_D726
0000DBEA 08A8 0007 0001             		bclr	#7,1(a0)
0000DBF0 1028 0001                  		move.b	1(a0),d0
0000DBF4 1800                       		move.b	d0,d4
0000DBF6 0240 000C                  		andi.w	#$C,d0
0000DBFA 6700                       		beq.s	loc_D6DE
0000DBFC 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DC00 7000                       		moveq	#0,d0
0000DC02 1028 0019                  		move.b	$19(a0),d0
0000DC06 3628 0008                  		move.w	8(a0),d3
0000DC0A 9651                       		sub.w	(a1),d3
0000DC0C 3203                       		move.w	d3,d1
0000DC0E D240                       		add.w	d0,d1
0000DC10 6B00 0000                  		bmi.w	loc_D726
0000DC14 3203                       		move.w	d3,d1
0000DC16 9240                       		sub.w	d0,d1
0000DC18 0C41 0140                  		cmpi.w	#$140,d1
0000DC1C 6C00                       		bge.s	loc_D726
0000DC1E 0643 0080                  		addi.w	#$80,d3
0000DC22 0804 0004                  		btst	#4,d4
0000DC26 6700                       		beq.s	loc_D6E8
0000DC28 7000                       		moveq	#0,d0
0000DC2A 1028 0016                  		move.b	$16(a0),d0
0000DC2E 3428 000C                  		move.w	$C(a0),d2
0000DC32 9469 0004                  		sub.w	4(a1),d2
0000DC36 3202                       		move.w	d2,d1
0000DC38 D240                       		add.w	d0,d1
0000DC3A 6B00                       		bmi.s	loc_D726
0000DC3C 3202                       		move.w	d2,d1
0000DC3E 9240                       		sub.w	d0,d1
0000DC40 0C41 00E0                  		cmpi.w	#$E0,d1
0000DC44 6C00                       		bge.s	loc_D726
0000DC46 0642 0080                  		addi.w	#$80,d2
0000DC4A 6000                       		bra.s	loc_D700
0000DC4C                            ; ===========================================================================
0000DC4C                            
0000DC4C                            loc_D6DE:
0000DC4C 3428 000A                  		move.w	$A(a0),d2
0000DC50 3628 0008                  		move.w	8(a0),d3
0000DC54 6000                       		bra.s	loc_D700
0000DC56                            ; ===========================================================================
0000DC56                            
0000DC56                            loc_D6E8:
0000DC56 3428 000C                  		move.w	$C(a0),d2
0000DC5A 9469 0004                  		sub.w	4(a1),d2
0000DC5E 0642 0080                  		addi.w	#$80,d2
0000DC62 0C42 0060                  		cmpi.w	#$60,d2
0000DC66 6500                       		bcs.s	loc_D726
0000DC68 0C42 0180                  		cmpi.w	#$180,d2
0000DC6C 6400                       		bcc.s	loc_D726
0000DC6E                            
0000DC6E                            loc_D700:
0000DC6E 2268 0004                  		movea.l	4(a0),a1
0000DC72 7200                       		moveq	#0,d1
0000DC74 0804 0005                  		btst	#5,d4
0000DC78 6600                       		bne.s	loc_D71C
0000DC7A 1228 001A                  		move.b	$1A(a0),d1
0000DC7E D201                       		add.b	d1,d1
0000DC80 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DC84 1219                       		move.b	(a1)+,d1
0000DC86 5301                       		subq.b	#1,d1
0000DC88 6B00                       		bmi.s	loc_D720
0000DC8A                            
0000DC8A                            loc_D71C:
0000DC8A 6100 0000                  		bsr.w	sub_D750
0000DC8E                            
0000DC8E                            loc_D720:
0000DC8E 08E8 0007 0001             		bset	#7,1(a0)
0000DC94                            
0000DC94                            loc_D726:
0000DC94 5446                       		addq.w	#2,d6
0000DC96 5554                       		subq.w	#2,(a4)
0000DC98 6600 FF46                  		bne.w	loc_D672
0000DC9C                            
0000DC9C                            loc_D72E:
0000DC9C 49EC 0080                  		lea	$80(a4),a4
0000DCA0 51CF FF36                  		dbf	d7,loc_D66A
0000DCA4 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DCA8 0C05 0050                  		cmpi.b	#$50,d5
0000DCAC 6700                       		beq.s	loc_D748
0000DCAE 24BC 0000 0000             		move.l	#0,(a2)
0000DCB4 4E75                       		rts	
0000DCB6                            ; ===========================================================================
0000DCB6                            
0000DCB6                            loc_D748:
0000DCB6 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DCBC 4E75                       		rts	
0000DCBE                            ; End of function BuildSprites
0000DCBE                            
0000DCBE                            
0000DCBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCBE                            
0000DCBE                            
0000DCBE                            sub_D750:				; XREF: BuildSprites
0000DCBE 3668 0002                  		movea.w	2(a0),a3
0000DCC2 0804 0000                  		btst	#0,d4
0000DCC6 6600                       		bne.s	loc_D796
0000DCC8 0804 0001                  		btst	#1,d4
0000DCCC 6600 0000                  		bne.w	loc_D7E4
0000DCD0                            ; End of function sub_D750
0000DCD0                            
0000DCD0                            
0000DCD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCD0                            
0000DCD0                            
0000DCD0                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DCD0 0C05 0050                  		cmpi.b	#$50,d5
0000DCD4 6700                       		beq.s	locret_D794
0000DCD6 1019                       		move.b	(a1)+,d0
0000DCD8 4880                       		ext.w	d0
0000DCDA D042                       		add.w	d2,d0
0000DCDC 34C0                       		move.w	d0,(a2)+
0000DCDE 14D9                       		move.b	(a1)+,(a2)+
0000DCE0 5205                       		addq.b	#1,d5
0000DCE2 14C5                       		move.b	d5,(a2)+
0000DCE4 1019                       		move.b	(a1)+,d0
0000DCE6 E148                       		lsl.w	#8,d0
0000DCE8 1019                       		move.b	(a1)+,d0
0000DCEA D04B                       		add.w	a3,d0
0000DCEC 34C0                       		move.w	d0,(a2)+
0000DCEE 1019                       		move.b	(a1)+,d0
0000DCF0 4880                       		ext.w	d0
0000DCF2 D043                       		add.w	d3,d0
0000DCF4 0240 01FF                  		andi.w	#$1FF,d0
0000DCF8 6600                       		bne.s	loc_D78E
0000DCFA 5240                       		addq.w	#1,d0
0000DCFC                            
0000DCFC                            loc_D78E:
0000DCFC 34C0                       		move.w	d0,(a2)+
0000DCFE 51C9 FFD0                  		dbf	d1,sub_D762
0000DD02                            
0000DD02                            locret_D794:
0000DD02 4E75                       		rts	
0000DD04                            ; End of function sub_D762
0000DD04                            
0000DD04                            ; ===========================================================================
0000DD04                            
0000DD04                            loc_D796:
0000DD04 0804 0001                  		btst	#1,d4
0000DD08 6600 0000                  		bne.w	loc_D82A
0000DD0C                            
0000DD0C                            loc_D79E:
0000DD0C 0C05 0050                  		cmpi.b	#$50,d5
0000DD10 6700                       		beq.s	locret_D7E2
0000DD12 1019                       		move.b	(a1)+,d0
0000DD14 4880                       		ext.w	d0
0000DD16 D042                       		add.w	d2,d0
0000DD18 34C0                       		move.w	d0,(a2)+
0000DD1A 1819                       		move.b	(a1)+,d4
0000DD1C 14C4                       		move.b	d4,(a2)+
0000DD1E 5205                       		addq.b	#1,d5
0000DD20 14C5                       		move.b	d5,(a2)+
0000DD22 1019                       		move.b	(a1)+,d0
0000DD24 E148                       		lsl.w	#8,d0
0000DD26 1019                       		move.b	(a1)+,d0
0000DD28 D04B                       		add.w	a3,d0
0000DD2A 0A40 0800                  		eori.w	#$800,d0
0000DD2E 34C0                       		move.w	d0,(a2)+
0000DD30 1019                       		move.b	(a1)+,d0
0000DD32 4880                       		ext.w	d0
0000DD34 4440                       		neg.w	d0
0000DD36 D804                       		add.b	d4,d4
0000DD38 0244 0018                  		andi.w	#$18,d4
0000DD3C 5044                       		addq.w	#8,d4
0000DD3E 9044                       		sub.w	d4,d0
0000DD40 D043                       		add.w	d3,d0
0000DD42 0240 01FF                  		andi.w	#$1FF,d0
0000DD46 6600                       		bne.s	loc_D7DC
0000DD48 5240                       		addq.w	#1,d0
0000DD4A                            
0000DD4A                            loc_D7DC:
0000DD4A 34C0                       		move.w	d0,(a2)+
0000DD4C 51C9 FFBE                  		dbf	d1,loc_D79E
0000DD50                            
0000DD50                            locret_D7E2:
0000DD50 4E75                       		rts	
0000DD52                            ; ===========================================================================
0000DD52                            
0000DD52                            loc_D7E4:				; XREF: sub_D750
0000DD52 0C05 0050                  		cmpi.b	#$50,d5
0000DD56 6700                       		beq.s	locret_D828
0000DD58 1019                       		move.b	(a1)+,d0
0000DD5A 1811                       		move.b	(a1),d4
0000DD5C 4880                       		ext.w	d0
0000DD5E 4440                       		neg.w	d0
0000DD60 E70C                       		lsl.b	#3,d4
0000DD62 0244 0018                  		andi.w	#$18,d4
0000DD66 5044                       		addq.w	#8,d4
0000DD68 9044                       		sub.w	d4,d0
0000DD6A D042                       		add.w	d2,d0
0000DD6C 34C0                       		move.w	d0,(a2)+
0000DD6E 14D9                       		move.b	(a1)+,(a2)+
0000DD70 5205                       		addq.b	#1,d5
0000DD72 14C5                       		move.b	d5,(a2)+
0000DD74 1019                       		move.b	(a1)+,d0
0000DD76 E148                       		lsl.w	#8,d0
0000DD78 1019                       		move.b	(a1)+,d0
0000DD7A D04B                       		add.w	a3,d0
0000DD7C 0A40 1000                  		eori.w	#$1000,d0
0000DD80 34C0                       		move.w	d0,(a2)+
0000DD82 1019                       		move.b	(a1)+,d0
0000DD84 4880                       		ext.w	d0
0000DD86 D043                       		add.w	d3,d0
0000DD88 0240 01FF                  		andi.w	#$1FF,d0
0000DD8C 6600                       		bne.s	loc_D822
0000DD8E 5240                       		addq.w	#1,d0
0000DD90                            
0000DD90                            loc_D822:
0000DD90 34C0                       		move.w	d0,(a2)+
0000DD92 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DD96                            
0000DD96                            locret_D828:
0000DD96 4E75                       		rts	
0000DD98                            ; ===========================================================================
0000DD98                            
0000DD98                            loc_D82A:
0000DD98 0C05 0050                  		cmpi.b	#$50,d5
0000DD9C 6700                       		beq.s	locret_D87C
0000DD9E 1019                       		move.b	(a1)+,d0
0000DDA0 1811                       		move.b	(a1),d4
0000DDA2 4880                       		ext.w	d0
0000DDA4 4440                       		neg.w	d0
0000DDA6 E70C                       		lsl.b	#3,d4
0000DDA8 0244 0018                  		andi.w	#$18,d4
0000DDAC 5044                       		addq.w	#8,d4
0000DDAE 9044                       		sub.w	d4,d0
0000DDB0 D042                       		add.w	d2,d0
0000DDB2 34C0                       		move.w	d0,(a2)+
0000DDB4 1819                       		move.b	(a1)+,d4
0000DDB6 14C4                       		move.b	d4,(a2)+
0000DDB8 5205                       		addq.b	#1,d5
0000DDBA 14C5                       		move.b	d5,(a2)+
0000DDBC 1019                       		move.b	(a1)+,d0
0000DDBE E148                       		lsl.w	#8,d0
0000DDC0 1019                       		move.b	(a1)+,d0
0000DDC2 D04B                       		add.w	a3,d0
0000DDC4 0A40 1800                  		eori.w	#$1800,d0
0000DDC8 34C0                       		move.w	d0,(a2)+
0000DDCA 1019                       		move.b	(a1)+,d0
0000DDCC 4880                       		ext.w	d0
0000DDCE 4440                       		neg.w	d0
0000DDD0 D804                       		add.b	d4,d4
0000DDD2 0244 0018                  		andi.w	#$18,d4
0000DDD6 5044                       		addq.w	#8,d4
0000DDD8 9044                       		sub.w	d4,d0
0000DDDA D043                       		add.w	d3,d0
0000DDDC 0240 01FF                  		andi.w	#$1FF,d0
0000DDE0 6600                       		bne.s	loc_D876
0000DDE2 5240                       		addq.w	#1,d0
0000DDE4                            
0000DDE4                            loc_D876:
0000DDE4 34C0                       		move.w	d0,(a2)+
0000DDE6 51C9 FFB0                  		dbf	d1,loc_D82A
0000DDEA                            
0000DDEA                            locret_D87C:
0000DDEA 4E75                       		rts	
0000DDEC                            ; ---------------------------------------------------------------------------
0000DDEC                            ; Subroutine to	check if an object is on the screen
0000DDEC                            ; ---------------------------------------------------------------------------
0000DDEC                            
0000DDEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDEC                            
0000DDEC                            
0000DDEC                            ChkObjOnScreen:
0000DDEC 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DDF0 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DDF4 6B00                       		bmi.s	NotOnScreen
0000DDF6 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DDFA 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DDFC                            
0000DDFC 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DE00 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DE04 6B00                       		bmi.s	NotOnScreen
0000DE06 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DE0A 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE0C                            
0000DE0C 7000                       		moveq	#0,d0		; set flag to 0
0000DE0E 4E75                       		rts	
0000DE10                            ; ===========================================================================
0000DE10                            
0000DE10                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DE10 7001                       		moveq	#1,d0		; set flag to 1
0000DE12 4E75                       		rts	
0000DE14                            ; End of function ChkObjOnScreen
0000DE14                            
0000DE14                            
0000DE14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE14                            
0000DE14                            
0000DE14                            ChkObjOnScreen2:
0000DE14 7200                       		moveq	#0,d1
0000DE16 1228 0019                  		move.b	$19(a0),d1
0000DE1A 3028 0008                  		move.w	8(a0),d0
0000DE1E 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DE22 D041                       		add.w	d1,d0
0000DE24 6B00                       		bmi.s	NotOnScreen2
0000DE26 D241                       		add.w	d1,d1
0000DE28 9041                       		sub.w	d1,d0
0000DE2A 0C40 0140                  		cmpi.w	#320,d0
0000DE2E 6C00                       		bge.s	NotOnScreen2
0000DE30                            
0000DE30 3228 000C                  		move.w	$C(a0),d1
0000DE34 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DE38 6B00                       		bmi.s	NotOnScreen2
0000DE3A 0C41 00E0                  		cmpi.w	#224,d1
0000DE3E 6C00                       		bge.s	NotOnScreen2
0000DE40                            
0000DE40 7000                       		moveq	#0,d0
0000DE42 4E75                       		rts	
0000DE44                            ; ===========================================================================
0000DE44                            
0000DE44                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DE44 7001                       		moveq	#1,d0
0000DE46 4E75                       		rts	
0000DE48                            ; End of function ChkObjOnScreen2
0000DE48                            
0000DE48                            ; ---------------------------------------------------------------------------
0000DE48                            ; Subroutine to	load a level's objects
0000DE48                            ; ---------------------------------------------------------------------------
0000DE48                            
0000DE48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE48                            
0000DE48                            
0000DE48                            ObjPosLoad:				; XREF: Level; et al
0000DE48 7000                       		moveq	#0,d0
0000DE4A 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DE4E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DE52 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DE56                            ; End of function ObjPosLoad
0000DE56                            
0000DE56                            ; ===========================================================================
0000DE56 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DE58 0000                       		dc.w OPL_Next-OPL_Index
0000DE5A                            ; ===========================================================================
0000DE5A                            
0000DE5A                            OPL_Main:				; XREF: OPL_Index
0000DE5A 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DE5E 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DE62 ED08                       		lsl.b	#6,d0
0000DE64 E848                       		lsr.w	#4,d0
0000DE66 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DE6C 2248                       		movea.l	a0,a1
0000DE6E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DE72 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DE76 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DE7A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DE7E 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DE82 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DE86 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DE8A 34FC 0101                  		move.w	#$101,(a2)+
0000DE8E 303C 005E                  		move.w	#$5E,d0
0000DE92                            
0000DE92                            OPL_ClrList:
0000DE92 429A                       		clr.l	(a2)+
0000DE94 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DE98                            
0000DE98 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DE9C 7400                       		moveq	#0,d2
0000DE9E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DEA2 0446 0080                  		subi.w	#$80,d6
0000DEA6 6400                       		bcc.s	loc_D93C
0000DEA8 7C00                       		moveq	#0,d6
0000DEAA                            
0000DEAA                            loc_D93C:
0000DEAA 0246 FF80                  		andi.w	#$FF80,d6
0000DEAE 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DEB2                            
0000DEB2                            loc_D944:
0000DEB2 BC50                       		cmp.w	(a0),d6
0000DEB4 6300                       		bls.s	loc_D956
0000DEB6 4A28 0004                  		tst.b	4(a0)
0000DEBA 6A00                       		bpl.s	loc_D952
0000DEBC 1412                       		move.b	(a2),d2
0000DEBE 5212                       		addq.b	#1,(a2)
0000DEC0                            
0000DEC0                            loc_D952:
0000DEC0 5C48                       		addq.w	#6,a0
0000DEC2 60EE                       		bra.s	loc_D944
0000DEC4                            ; ===========================================================================
0000DEC4                            
0000DEC4                            loc_D956:
0000DEC4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DEC8 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DECC 0446 0080                  		subi.w	#$80,d6
0000DED0 6500                       		bcs.s	loc_D976
0000DED2                            
0000DED2                            loc_D964:
0000DED2 BC50                       		cmp.w	(a0),d6
0000DED4 6300                       		bls.s	loc_D976
0000DED6 4A28 0004                  		tst.b	4(a0)
0000DEDA 6A00                       		bpl.s	loc_D972
0000DEDC 522A 0001                  		addq.b	#1,1(a2)
0000DEE0                            
0000DEE0                            loc_D972:
0000DEE0 5C48                       		addq.w	#6,a0
0000DEE2 60EE                       		bra.s	loc_D964
0000DEE4                            ; ===========================================================================
0000DEE4                            
0000DEE4                            loc_D976:
0000DEE4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DEE8 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DEEE                            
0000DEEE                            OPL_Next:				; XREF: OPL_Index
0000DEEE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DEF2 7400                       		moveq	#0,d2
0000DEF4 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DEF8 0246 FF80                  		andi.w	#$FF80,d6
0000DEFC BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DF00 6700 0000                  		beq.w	locret_DA3A
0000DF04 6C00                       		bge.s	loc_D9F6
0000DF06 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF0A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF0E 0446 0080                  		subi.w	#$80,d6
0000DF12 6500                       		bcs.s	loc_D9D2
0000DF14                            
0000DF14                            loc_D9A6:
0000DF14 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF18 6C00                       		bge.s	loc_D9D2
0000DF1A 5D48                       		subq.w	#6,a0
0000DF1C 4A28 0004                  		tst.b	4(a0)
0000DF20 6A00                       		bpl.s	loc_D9BC
0000DF22 532A 0001                  		subq.b	#1,1(a2)
0000DF26 142A 0001                  		move.b	1(a2),d2
0000DF2A                            
0000DF2A                            loc_D9BC:
0000DF2A 6100 0000                  		bsr.w	loc_DA3C
0000DF2E 6600                       		bne.s	loc_D9C6
0000DF30 5D48                       		subq.w	#6,a0
0000DF32 60E0                       		bra.s	loc_D9A6
0000DF34                            ; ===========================================================================
0000DF34                            
0000DF34                            loc_D9C6:
0000DF34 4A28 0004                  		tst.b	4(a0)
0000DF38 6A00                       		bpl.s	loc_D9D0
0000DF3A 522A 0001                  		addq.b	#1,1(a2)
0000DF3E                            
0000DF3E                            loc_D9D0:
0000DF3E 5C48                       		addq.w	#6,a0
0000DF40                            
0000DF40                            loc_D9D2:
0000DF40 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF44 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF48 0646 0300                  		addi.w	#$300,d6
0000DF4C                            
0000DF4C                            loc_D9DE:
0000DF4C BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF50 6E00                       		bgt.s	loc_D9F0
0000DF52 4A28 FFFE                  		tst.b	-2(a0)
0000DF56 6A00                       		bpl.s	loc_D9EC
0000DF58 5312                       		subq.b	#1,(a2)
0000DF5A                            
0000DF5A                            loc_D9EC:
0000DF5A 5D48                       		subq.w	#6,a0
0000DF5C 60EE                       		bra.s	loc_D9DE
0000DF5E                            ; ===========================================================================
0000DF5E                            
0000DF5E                            loc_D9F0:
0000DF5E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF62 4E75                       		rts	
0000DF64                            ; ===========================================================================
0000DF64                            
0000DF64                            loc_D9F6:
0000DF64 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF68 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF6C 0646 0280                  		addi.w	#$280,d6
0000DF70                            
0000DF70                            loc_DA02:
0000DF70 BC50                       		cmp.w	(a0),d6
0000DF72 6300                       		bls.s	loc_DA16
0000DF74 4A28 0004                  		tst.b	4(a0)
0000DF78 6A00                       		bpl.s	loc_DA10
0000DF7A 1412                       		move.b	(a2),d2
0000DF7C 5212                       		addq.b	#1,(a2)
0000DF7E                            
0000DF7E                            loc_DA10:
0000DF7E 6100 0000                  		bsr.w	loc_DA3C
0000DF82 67EC                       		beq.s	loc_DA02
0000DF84                            
0000DF84                            loc_DA16:
0000DF84 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF88 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF8C 0446 0300                  		subi.w	#$300,d6
0000DF90 6500                       		bcs.s	loc_DA36
0000DF92                            
0000DF92                            loc_DA24:
0000DF92 BC50                       		cmp.w	(a0),d6
0000DF94 6300                       		bls.s	loc_DA36
0000DF96 4A28 0004                  		tst.b	4(a0)
0000DF9A 6A00                       		bpl.s	loc_DA32
0000DF9C 522A 0001                  		addq.b	#1,1(a2)
0000DFA0                            
0000DFA0                            loc_DA32:
0000DFA0 5C48                       		addq.w	#6,a0
0000DFA2 60EE                       		bra.s	loc_DA24
0000DFA4                            ; ===========================================================================
0000DFA4                            
0000DFA4                            loc_DA36:
0000DFA4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DFA8                            
0000DFA8                            locret_DA3A:
0000DFA8 4E75                       		rts	
0000DFAA                            ; ===========================================================================
0000DFAA                            
0000DFAA                            loc_DA3C:
0000DFAA 4A28 0004                  		tst.b	4(a0)
0000DFAE 6A00                       		bpl.s	OPL_MakeItem
0000DFB0 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DFB6 6700                       		beq.s	OPL_MakeItem
0000DFB8 5C48                       		addq.w	#6,a0
0000DFBA 7000                       		moveq	#0,d0
0000DFBC 4E75                       		rts	
0000DFBE                            ; ===========================================================================
0000DFBE                            
0000DFBE                            OPL_MakeItem:
0000DFBE 6100 0000                  		bsr.w	SingleObjLoad
0000DFC2 6600                       		bne.s	locret_DA8A
0000DFC4 3358 0008                  		move.w	(a0)+,8(a1)
0000DFC8 3018                       		move.w	(a0)+,d0
0000DFCA 3200                       		move.w	d0,d1
0000DFCC 0240 0FFF                  		andi.w	#$FFF,d0
0000DFD0 3340 000C                  		move.w	d0,$C(a1)
0000DFD4 E559                       		rol.w	#2,d1
0000DFD6 0201 0003                  		andi.b	#3,d1
0000DFDA 1341 0001                  		move.b	d1,1(a1)
0000DFDE 1341 0022                  		move.b	d1,$22(a1)
0000DFE2 1018                       		move.b	(a0)+,d0
0000DFE4 6A00                       		bpl.s	loc_DA80
0000DFE6 0200 007F                  		andi.b	#$7F,d0
0000DFEA 1342 0023                  		move.b	d2,$23(a1)
0000DFEE                            
0000DFEE                            loc_DA80:
0000DFEE 1280                       		move.b	d0,0(a1)
0000DFF0 1358 0028                  		move.b	(a0)+,$28(a1)
0000DFF4 7000                       		moveq	#0,d0
0000DFF6                            
0000DFF6                            locret_DA8A:
0000DFF6 4E75                       		rts	
0000DFF8                            ; ---------------------------------------------------------------------------
0000DFF8                            ; Single object	loading	subroutine
0000DFF8                            ; ---------------------------------------------------------------------------
0000DFF8                            
0000DFF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFF8                            
0000DFF8                            
0000DFF8                            SingleObjLoad:
0000DFF8 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DFFC 303C 005F                  		move.w	#$5F,d0
0000E000                            
0000E000                            loc_DA94:
0000E000 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E002 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E004 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E008 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E00C                            
0000E00C                            locret_DAA0:
0000E00C 4E75                       		rts	
0000E00E                            ; End of function SingleObjLoad
0000E00E                            
0000E00E                            
0000E00E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E00E                            
0000E00E                            
0000E00E                            SingleObjLoad2:
0000E00E 2248                       		movea.l	a0,a1
0000E010 303C F000                  		move.w	#-$1000,d0
0000E014 9048                       		sub.w	a0,d0
0000E016 EC48                       		lsr.w	#6,d0
0000E018 5340                       		subq.w	#1,d0
0000E01A 6500                       		bcs.s	locret_DABC
0000E01C                            
0000E01C                            loc_DAB0:
0000E01C 4A11                       		tst.b	(a1)
0000E01E 6700                       		beq.s	locret_DABC
0000E020 43E9 0040                  		lea	$40(a1),a1
0000E024 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E028                            
0000E028                            locret_DABC:
0000E028 4E75                       		rts	
0000E02A                            ; End of function SingleObjLoad2
0000E02A                            
0000E02A                            ; ===========================================================================
0000E02A                            ; ---------------------------------------------------------------------------
0000E02A                            ; Object 41 - springs
0000E02A                            ; ---------------------------------------------------------------------------
0000E02A                            
0000E02A                            Obj41:					; XREF: Obj_Index
0000E02A 7000                       		moveq	#0,d0
0000E02C 1028 0024                  		move.b	$24(a0),d0
0000E030 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E034 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E038 6100 FB38                  		bsr.w	DisplaySprite
0000E03C 3028 0008                  		move.w	8(a0),d0
0000E040 0240 FF80                  		andi.w	#$FF80,d0
0000E044 3238 F700                  		move.w	($FFFFF700).w,d1
0000E048 0441 0080                  		subi.w	#$80,d1
0000E04C 0241 FF80                  		andi.w	#$FF80,d1
0000E050 9041                       		sub.w	d1,d0
0000E052 0C40 0280                  		cmpi.w	#$280,d0
0000E056 6200 FB56                  		bhi.w	DeleteObject
0000E05A 4E75                       		rts	
0000E05C                            ; ===========================================================================
0000E05C 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E05E 0000                       		dc.w Obj41_Up-Obj41_Index
0000E060 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E062 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E064 0000                       		dc.w Obj41_LR-Obj41_Index
0000E066 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E068 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E06A 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E06C 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E06E 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E070                            
0000E070 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E072 F600                       		dc.w -$A00		; power	of yellow spring
0000E074                            ; ===========================================================================
0000E074                            
0000E074                            Obj41_Main:				; XREF: Obj41_Index
0000E074 5428 0024                  		addq.b	#2,$24(a0)
0000E078 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E080 317C 0523 0002             		move.w	#$523,2(a0)
0000E086 0028 0004 0001             		ori.b	#4,1(a0)
0000E08C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E092 117C 0004 0018             		move.b	#4,$18(a0)
0000E098 1028 0028                  		move.b	$28(a0),d0
0000E09C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E0A0 6700                       		beq.s	loc_DB54	; if not, branch
0000E0A2 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E0A8 117C 0001 001C             		move.b	#1,$1C(a0)
0000E0AE 117C 0003 001A             		move.b	#3,$1A(a0)
0000E0B4 317C 0533 0002             		move.w	#$533,2(a0)
0000E0BA 117C 0008 0019             		move.b	#8,$19(a0)
0000E0C0                            
0000E0C0                            loc_DB54:
0000E0C0 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E0C4 6700                       		beq.s	loc_DB66	; if not, branch
0000E0C6 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E0CC 08E8 0001 0022             		bset	#1,$22(a0)
0000E0D2                            
0000E0D2                            loc_DB66:
0000E0D2 0800 0001                  		btst	#1,d0
0000E0D6 6700                       		beq.s	loc_DB72
0000E0D8 08E8 0005 0002             		bset	#5,2(a0)
0000E0DE                            
0000E0DE                            loc_DB72:
0000E0DE 0240 000F                  		andi.w	#$F,d0
0000E0E2 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E0E8 4E75                       		rts	
0000E0EA                            ; ===========================================================================
0000E0EA                            
0000E0EA                            Obj41_Up:				; XREF: Obj41_Index
0000E0EA 323C 001B                  		move.w	#$1B,d1
0000E0EE 343C 0008                  		move.w	#8,d2
0000E0F2 363C 0010                  		move.w	#$10,d3
0000E0F6 3828 0008                  		move.w	8(a0),d4
0000E0FA 6100 0000                  		bsr.w	SolidObject
0000E0FE 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E102 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E104 4E75                       		rts	
0000E106                            ; ===========================================================================
0000E106                            
0000E106                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E106 5428 0024                  		addq.b	#2,$24(a0)
0000E10A 5069 000C                  		addq.w	#8,$C(a1)
0000E10E 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E114 08E9 0001 0022             		bset	#1,$22(a1)
0000E11A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E120 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E126 137C 0002 0024             		move.b	#2,$24(a1)
0000E12C 08A8 0003 0022             		bclr	#3,$22(a0)
0000E132 4228 0025                  		clr.b	$25(a0)
0000E136 303C 00CC                  		move.w	#$CC,d0
0000E13A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E140                            
0000E140                            Obj41_AniUp:				; XREF: Obj41_Index
0000E140 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E146 6000 CAFA                  		bra.w	AnimateSprite
0000E14A                            ; ===========================================================================
0000E14A                            
0000E14A                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E14A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E150 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E154 4E75                       		rts	
0000E156                            ; ===========================================================================
0000E156                            
0000E156                            Obj41_LR:				; XREF: Obj41_Index
0000E156 323C 0013                  		move.w	#$13,d1
0000E15A 343C 000E                  		move.w	#$E,d2
0000E15E 363C 000F                  		move.w	#$F,d3
0000E162 3828 0008                  		move.w	8(a0),d4
0000E166 6100 0000                  		bsr.w	SolidObject
0000E16A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E170 6600                       		bne.s	loc_DC0C
0000E172 117C 0008 0024             		move.b	#8,$24(a0)
0000E178                            
0000E178                            loc_DC0C:
0000E178 0828 0005 0022             		btst	#5,$22(a0)
0000E17E 6600                       		bne.s	Obj41_BounceLR
0000E180 4E75                       		rts	
0000E182                            ; ===========================================================================
0000E182                            
0000E182                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E182 5428 0024                  		addq.b	#2,$24(a0)
0000E186 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E18C 5069 0008                  		addq.w	#8,8(a1)
0000E190 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E196 6600                       		bne.s	loc_DC36	; if yes, branch
0000E198 0469 0010 0008             		subi.w	#$10,8(a1)
0000E19E 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E1A2                            
0000E1A2                            loc_DC36:
0000E1A2 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E1A8 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E1AE 0869 0000 0022             		bchg	#0,$22(a1)
0000E1B4 0829 0002 0022             		btst	#2,$22(a1)
0000E1BA 6600                       		bne.s	loc_DC56
0000E1BC 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E1C2                            
0000E1C2                            loc_DC56:
0000E1C2 08A8 0005 0022             		bclr	#5,$22(a0)
0000E1C8 08A9 0005 0022             		bclr	#5,$22(a1)
0000E1CE 303C 00CC                  		move.w	#$CC,d0
0000E1D2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E1D8                            
0000E1D8                            Obj41_AniLR:				; XREF: Obj41_Index
0000E1D8 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E1DE 6000 CA62                  		bra.w	AnimateSprite
0000E1E2                            ; ===========================================================================
0000E1E2                            
0000E1E2                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E1E2 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E1E8 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E1EC 4E75                       		rts	
0000E1EE                            ; ===========================================================================
0000E1EE                            
0000E1EE                            Obj41_Dwn:				; XREF: Obj41_Index
0000E1EE 323C 001B                  		move.w	#$1B,d1
0000E1F2 343C 0008                  		move.w	#8,d2
0000E1F6 363C 0010                  		move.w	#$10,d3
0000E1FA 3828 0008                  		move.w	8(a0),d4
0000E1FE 6100 0000                  		bsr.w	SolidObject
0000E202 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E208 6600                       		bne.s	loc_DCA4
0000E20A 117C 000E 0024             		move.b	#$E,$24(a0)
0000E210                            
0000E210                            loc_DCA4:
0000E210 4A28 0025                  		tst.b	$25(a0)
0000E214 6600                       		bne.s	locret_DCAE
0000E216 4A44                       		tst.w	d4
0000E218 6B00                       		bmi.s	Obj41_BounceDwn
0000E21A                            
0000E21A                            locret_DCAE:
0000E21A 4E75                       		rts	
0000E21C                            ; ===========================================================================
0000E21C                            
0000E21C                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E21C 5428 0024                  		addq.b	#2,$24(a0)
0000E220 5169 000C                  		subq.w	#8,$C(a1)
0000E224 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E22A 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E22E 08E9 0001 0022             		bset	#1,$22(a1)
0000E234 08A9 0003 0022             		bclr	#3,$22(a1)
0000E23A 137C 0002 0024             		move.b	#2,$24(a1)
0000E240 08A8 0003 0022             		bclr	#3,$22(a0)
0000E246 4228 0025                  		clr.b	$25(a0)
0000E24A 303C 00CC                  		move.w	#$CC,d0
0000E24E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E254                            
0000E254                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E254 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E25A 6000 C9E6                  		bra.w	AnimateSprite
0000E25E                            ; ===========================================================================
0000E25E                            
0000E25E                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E25E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E264 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E268 4E75                       		rts	
0000E26A                            ; ===========================================================================
0000E26A                            Ani_obj41:
0000E26A                            	include "_anim\obj41.asm"
0000E26A                            ; ---------------------------------------------------------------------------
0000E26A                            ; Animation script - springs
0000E26A                            ; ---------------------------------------------------------------------------
0000E26A 0000                       		dc.w byte_DD02-Ani_obj41
0000E26C 0000                       		dc.w byte_DD0E-Ani_obj41
0000E26E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E27A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E286                            		even
0000E286                            		even
0000E286                            
0000E286                            ; ---------------------------------------------------------------------------
0000E286                            ; Sprite mappings - springs
0000E286                            ; ---------------------------------------------------------------------------
0000E286                            Map_obj41:
0000E286                            	include "_maps\obj41.asm"
0000E286                            ; ---------------------------------------------------------------------------
0000E286                            ; Sprite mappings - springs
0000E286                            ; ---------------------------------------------------------------------------
0000E286 0000                       		dc.w byte_DD26-Map_obj41
0000E288 0000                       		dc.w byte_DD31-Map_obj41
0000E28A 0000                       		dc.w byte_DD37-Map_obj41
0000E28C 0000                       		dc.w byte_DD47-Map_obj41
0000E28E 0000                       		dc.w byte_DD4D-Map_obj41
0000E290 0000                       		dc.w byte_DD53-Map_obj41
0000E292 02                         byte_DD26:	dc.b 2
0000E293 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E298 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E29D 01                         byte_DD31:	dc.b 1
0000E29E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E2A3 03                         byte_DD37:	dc.b 3
0000E2A4 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E2A9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E2AE 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E2B3 01                         byte_DD47:	dc.b 1
0000E2B4 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E2B9 01                         byte_DD4D:	dc.b 1
0000E2BA F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E2BF 04                         byte_DD53:	dc.b 4
0000E2C0 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E2C5 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E2CA F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E2CF 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E2D4                            		even
0000E2D4                            		even
0000E2D4                            
0000E2D4                            ; ===========================================================================
0000E2D4                            ; ---------------------------------------------------------------------------
0000E2D4                            ; Object 42 - Newtron enemy (GHZ)
0000E2D4                            ; ---------------------------------------------------------------------------
0000E2D4                            
0000E2D4                            Obj42:					; XREF: Obj_Index
0000E2D4 7000                       		moveq	#0,d0
0000E2D6 1028 0024                  		move.b	$24(a0),d0
0000E2DA 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E2DE 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E2E2                            ; ===========================================================================
0000E2E2 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E2E4 0000                       		dc.w Obj42_Action-Obj42_Index
0000E2E6 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E2E8                            ; ===========================================================================
0000E2E8                            
0000E2E8                            Obj42_Main:				; XREF: Obj42_Index
0000E2E8 5428 0024                  		addq.b	#2,$24(a0)
0000E2EC 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E2F4 317C 049B 0002             		move.w	#$49B,2(a0)
0000E2FA 117C 0004 0001             		move.b	#4,1(a0)
0000E300 117C 0004 0018             		move.b	#4,$18(a0)
0000E306 117C 0014 0019             		move.b	#$14,$19(a0)
0000E30C 117C 0010 0016             		move.b	#$10,$16(a0)
0000E312 117C 0008 0017             		move.b	#8,$17(a0)
0000E318                            
0000E318                            Obj42_Action:				; XREF: Obj42_Index
0000E318 7000                       		moveq	#0,d0
0000E31A 1028 0025                  		move.b	$25(a0),d0
0000E31E 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E322 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E326 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E32C 6100 C914                  		bsr.w	AnimateSprite
0000E330 6000 0000                  		bra.w	MarkObjGone
0000E334                            ; ===========================================================================
0000E334 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E336 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E338 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E33A 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E33C 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E33E                            ; ===========================================================================
0000E33E                            
0000E33E                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E33E 08E8 0000 0022             		bset	#0,$22(a0)
0000E344 3038 D008                  		move.w	($FFFFD008).w,d0
0000E348 9068 0008                  		sub.w	8(a0),d0
0000E34C 6400                       		bcc.s	loc_DDEA
0000E34E 4440                       		neg.w	d0
0000E350 08A8 0000 0022             		bclr	#0,$22(a0)
0000E356                            
0000E356                            loc_DDEA:
0000E356 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E35A 6400                       		bcc.s	locret_DE12	; if not, branch
0000E35C 5428 0025                  		addq.b	#2,$25(a0)
0000E360 117C 0001 001C             		move.b	#1,$1C(a0)
0000E366 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E36A 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E36C 317C 249B 0002             		move.w	#$249B,2(a0)
0000E372 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E378 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E37E                            
0000E37E                            locret_DE12:
0000E37E 4E75                       		rts	
0000E380                            ; ===========================================================================
0000E380                            
0000E380                            Obj42_Type00:				; XREF: Obj42_Index2
0000E380 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E386 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E388 08E8 0000 0022             		bset	#0,$22(a0)
0000E38E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E392 9068 0008                  		sub.w	8(a0),d0
0000E396 6400                       		bcc.s	locret_DE32
0000E398 08A8 0000 0022             		bclr	#0,$22(a0)
0000E39E                            
0000E39E                            locret_DE32:
0000E39E 4E75                       		rts	
0000E3A0                            ; ===========================================================================
0000E3A0                            
0000E3A0                            Obj42_Fall:				; XREF: Obj42_Type00
0000E3A0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E3A6 6600                       		bne.s	loc_DE42
0000E3A8 117C 000C 0020             		move.b	#$C,$20(a0)
0000E3AE                            
0000E3AE                            loc_DE42:
0000E3AE 6100 F770                  		bsr.w	ObjectFall
0000E3B2 6100 0000                  		bsr.w	ObjHitFloor
0000E3B6 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E3B8 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E3BA D368 000C                  		add.w	d1,$C(a0)
0000E3BE 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E3C4 5428 0025                  		addq.b	#2,$25(a0)
0000E3C8 117C 0002 001C             		move.b	#2,$1C(a0)
0000E3CE 0828 0005 0002             		btst	#5,2(a0)
0000E3D4 6700                       		beq.s	Obj42_Move
0000E3D6 5228 001C                  		addq.b	#1,$1C(a0)
0000E3DA                            
0000E3DA                            Obj42_Move:
0000E3DA 117C 000D 0020             		move.b	#$D,$20(a0)
0000E3E0 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E3E6 0828 0000 0022             		btst	#0,$22(a0)
0000E3EC 6600                       		bne.s	locret_DE86
0000E3EE 4468 0010                  		neg.w	$10(a0)
0000E3F2                            
0000E3F2                            locret_DE86:
0000E3F2 4E75                       		rts	
0000E3F4                            ; ===========================================================================
0000E3F4                            
0000E3F4                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E3F4 6100 F756                  		bsr.w	SpeedToPos
0000E3F8 6100 0000                  		bsr.w	ObjHitFloor
0000E3FC 0C41 FFF8                  		cmpi.w	#-8,d1
0000E400 6D00                       		blt.s	loc_DEA2
0000E402 0C41 000C                  		cmpi.w	#$C,d1
0000E406 6C00                       		bge.s	loc_DEA2
0000E408 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E40C 4E75                       		rts	
0000E40E                            ; ===========================================================================
0000E40E                            
0000E40E                            loc_DEA2:
0000E40E 5428 0025                  		addq.b	#2,$25(a0)
0000E412 4E75                       		rts	
0000E414                            ; ===========================================================================
0000E414                            
0000E414                            Obj42_Speed:				; XREF: Obj42_Index2
0000E414 6100 F736                  		bsr.w	SpeedToPos
0000E418 4E75                       		rts	
0000E41A                            ; ===========================================================================
0000E41A                            
0000E41A                            Obj42_Type01:				; XREF: Obj42_Index2
0000E41A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E420 6600                       		bne.s	Obj42_FireMissile
0000E422 117C 000C 0020             		move.b	#$C,$20(a0)
0000E428                            
0000E428                            Obj42_FireMissile:
0000E428 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E42E 6600                       		bne.s	locret_DF14
0000E430 4A28 0032                  		tst.b	$32(a0)
0000E434 6600                       		bne.s	locret_DF14
0000E436 117C 0001 0032             		move.b	#1,$32(a0)
0000E43C 6100 FBBA                  		bsr.w	SingleObjLoad
0000E440 6600                       		bne.s	locret_DF14
0000E442 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E446 3368 0008 0008             		move.w	8(a0),8(a1)
0000E44C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E452 5169 000C                  		subq.w	#8,$C(a1)
0000E456 337C 0200 0010             		move.w	#$200,$10(a1)
0000E45C 303C 0014                  		move.w	#$14,d0
0000E460 0828 0000 0022             		btst	#0,$22(a0)
0000E466 6600                       		bne.s	loc_DF04
0000E468 4440                       		neg.w	d0
0000E46A 4469 0010                  		neg.w	$10(a1)
0000E46E                            
0000E46E                            loc_DF04:
0000E46E D169 0008                  		add.w	d0,8(a1)
0000E472 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E478 137C 0001 0028             		move.b	#1,$28(a1)
0000E47E                            
0000E47E                            locret_DF14:
0000E47E 4E75                       		rts	
0000E480                            ; ===========================================================================
0000E480                            
0000E480                            Obj42_Delete:				; XREF: Obj42_Index
0000E480 6000 F72C                  		bra.w	DeleteObject
0000E484                            ; ===========================================================================
0000E484                            Ani_obj42:
0000E484                            	include "_anim\obj42.asm"
0000E484                            ; ---------------------------------------------------------------------------
0000E484                            ; Animation script - Newtron enemy
0000E484                            ; ---------------------------------------------------------------------------
0000E484 0000                       		dc.w byte_DF24-Ani_obj42
0000E486 0000                       		dc.w byte_DF28-Ani_obj42
0000E488 0000                       		dc.w byte_DF30-Ani_obj42
0000E48A 0000                       		dc.w byte_DF34-Ani_obj42
0000E48C 0000                       		dc.w byte_DF38-Ani_obj42
0000E48E 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E492 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E49A 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E49E 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E4A2 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E4AC                            		even
0000E4AC                            		even
0000E4AC                            
0000E4AC                            ; ---------------------------------------------------------------------------
0000E4AC                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4AC                            ; ---------------------------------------------------------------------------
0000E4AC                            Map_obj42:
0000E4AC                            	include "_maps\obj42.asm"
0000E4AC                            ; ---------------------------------------------------------------------------
0000E4AC                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4AC                            ; ---------------------------------------------------------------------------
0000E4AC 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E4B0 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E4B4 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E4B8 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E4BC 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E4C0 0000                       		dc.w byte_DFF8-Map_obj42
0000E4C2 03                         byte_DF58:	dc.b 3
0000E4C3 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E4C8 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E4CD FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E4D2 03                         byte_DF68:	dc.b 3
0000E4D3 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E4D8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E4DD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E4E2 03                         byte_DF78:	dc.b 3
0000E4E3 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E4E8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E4ED FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E4F2 04                         byte_DF88:	dc.b 4
0000E4F3 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E4F8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E4FD FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E502 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E507 03                         byte_DF9D:	dc.b 3
0000E508 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E50D FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E512 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E517 02                         byte_DFAD:	dc.b 2
0000E518 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E51D F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E522 03                         byte_DFB8:	dc.b 3
0000E523 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E528 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E52D FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E532 03                         byte_DFC8:	dc.b 3
0000E533 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E538 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E53D FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E542 03                         byte_DFD8:	dc.b 3
0000E543 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E548 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E54D FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E552 03                         byte_DFE8:	dc.b 3
0000E553 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E558 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E55D FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E562 00                         byte_DFF8:	dc.b 0
0000E564 00                         		even
0000E564 00                         		even
0000E564                            
0000E564                            ; ===========================================================================
0000E564                            ; ---------------------------------------------------------------------------
0000E564                            ; Object 43 - Roller enemy (SYZ)
0000E564                            ; ---------------------------------------------------------------------------
0000E564                            
0000E564                            Obj43:					; XREF: Obj_Index
0000E564 7000                       		moveq	#0,d0
0000E566 1028 0024                  		move.b	$24(a0),d0
0000E56A 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E56E 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E572                            ; ===========================================================================
0000E572 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E574 0000                       		dc.w Obj43_Action-Obj43_Index
0000E576                            ; ===========================================================================
0000E576                            
0000E576                            Obj43_Main:				; XREF: Obj43_Index
0000E576 117C 000E 0016             		move.b	#$E,$16(a0)
0000E57C 117C 0008 0017             		move.b	#8,$17(a0)
0000E582 6100 F59C                  		bsr.w	ObjectFall
0000E586 6100 0000                  		bsr.w	ObjHitFloor
0000E58A 4A41                       		tst.w	d1
0000E58C 6A00                       		bpl.s	locret_E052
0000E58E D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E592 317C 0000 0012             		move.w	#0,$12(a0)
0000E598 5428 0024                  		addq.b	#2,$24(a0)
0000E59C 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E5A4 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E5AA 117C 0004 0001             		move.b	#4,1(a0)
0000E5B0 117C 0004 0018             		move.b	#4,$18(a0)
0000E5B6 117C 0010 0019             		move.b	#$10,$19(a0)
0000E5BC                            
0000E5BC                            locret_E052:
0000E5BC 4E75                       		rts	
0000E5BE                            ; ===========================================================================
0000E5BE                            
0000E5BE                            Obj43_Action:				; XREF: Obj43_Index
0000E5BE 7000                       		moveq	#0,d0
0000E5C0 1028 0025                  		move.b	$25(a0),d0
0000E5C4 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E5C8 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E5CC 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E5D2 6100 C66E                  		bsr.w	AnimateSprite
0000E5D6 3028 0008                  		move.w	8(a0),d0
0000E5DA 0240 FF80                  		andi.w	#$FF80,d0
0000E5DE 3238 F700                  		move.w	($FFFFF700).w,d1
0000E5E2 0441 0080                  		subi.w	#$80,d1
0000E5E6 0241 FF80                  		andi.w	#$FF80,d1
0000E5EA 9041                       		sub.w	d1,d0
0000E5EC 0C40 0280                  		cmpi.w	#$280,d0
0000E5F0 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E5F4 6000 F57C                  		bra.w	DisplaySprite
0000E5F8                            ; ===========================================================================
0000E5F8                            
0000E5F8                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E5F8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E5FC 7000                       		moveq	#0,d0
0000E5FE 1028 0023                  		move.b	$23(a0),d0
0000E602 6700                       		beq.s	Obj43_Delete
0000E604 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E60A                            
0000E60A                            Obj43_Delete:
0000E60A 6000 F5A2                  		bra.w	DeleteObject
0000E60E                            ; ===========================================================================
0000E60E 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E610 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E612 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E614 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E616                            ; ===========================================================================
0000E616                            
0000E616                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E616 3038 D008                  		move.w	($FFFFD008).w,d0
0000E61A 0440 0100                  		subi.w	#$100,d0
0000E61E 6500                       		bcs.s	loc_E0D2
0000E620 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E624 6500                       		bcs.s	loc_E0D2
0000E626 5828 0025                  		addq.b	#4,$25(a0)
0000E62A 117C 0002 001C             		move.b	#2,$1C(a0)
0000E630 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E636 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E63C                            
0000E63C                            loc_E0D2:
0000E63C 588F                       		addq.l	#4,sp
0000E63E 4E75                       		rts	
0000E640                            ; ===========================================================================
0000E640                            
0000E640                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E640 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E646 6700                       		beq.s	loc_E0F8
0000E648 5368 0030                  		subq.w	#1,$30(a0)
0000E64C 6A00                       		bpl.s	locret_E0F6
0000E64E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E654 317C 0700 0010             		move.w	#$700,$10(a0)
0000E65A 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E660                            
0000E660                            locret_E0F6:
0000E660 4E75                       		rts	
0000E662                            ; ===========================================================================
0000E662                            
0000E662                            loc_E0F8:
0000E662 5428 0025                  		addq.b	#2,$25(a0)
0000E666 4E75                       		rts	
0000E668                            ; ===========================================================================
0000E668                            
0000E668                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E668 6100 0000                  		bsr.w	Obj43_Stop
0000E66C 6100 F4DE                  		bsr.w	SpeedToPos
0000E670 6100 0000                  		bsr.w	ObjHitFloor
0000E674 0C41 FFF8                  		cmpi.w	#-8,d1
0000E678 6D00                       		blt.s	Obj43_Jump
0000E67A 0C41 000C                  		cmpi.w	#$C,d1
0000E67E 6C00                       		bge.s	Obj43_Jump
0000E680 D368 000C                  		add.w	d1,$C(a0)
0000E684 4E75                       		rts	
0000E686                            ; ===========================================================================
0000E686                            
0000E686                            Obj43_Jump:
0000E686 5428 0025                  		addq.b	#2,$25(a0)
0000E68A 08E8 0000 0032             		bset	#0,$32(a0)
0000E690 6700                       		beq.s	locret_E12E
0000E692 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E698                            
0000E698                            locret_E12E:
0000E698 4E75                       		rts	
0000E69A                            ; ===========================================================================
0000E69A                            
0000E69A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E69A 6100 F484                  		bsr.w	ObjectFall
0000E69E 4A68 0012                  		tst.w	$12(a0)
0000E6A2 6B00                       		bmi.s	locret_E150
0000E6A4 6100 0000                  		bsr.w	ObjHitFloor
0000E6A8 4A41                       		tst.w	d1
0000E6AA 6A00                       		bpl.s	locret_E150
0000E6AC D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E6B0 5528 0025                  		subq.b	#2,$25(a0)
0000E6B4 317C 0000 0012             		move.w	#0,$12(a0)
0000E6BA                            
0000E6BA                            locret_E150:
0000E6BA 4E75                       		rts	
0000E6BC                            
0000E6BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6BC                            
0000E6BC                            
0000E6BC                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E6BC 4A28 0032                  		tst.b	$32(a0)
0000E6C0 6B00                       		bmi.s	locret_E188
0000E6C2 3038 D008                  		move.w	($FFFFD008).w,d0
0000E6C6 0440 0030                  		subi.w	#$30,d0
0000E6CA 9068 0008                  		sub.w	8(a0),d0
0000E6CE 6400                       		bcc.s	locret_E188
0000E6D0 117C 0000 001C             		move.b	#0,$1C(a0)
0000E6D6 117C 000E 0020             		move.b	#$E,$20(a0)
0000E6DC 4268 0010                  		clr.w	$10(a0)
0000E6E0 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E6E6 117C 0002 0025             		move.b	#2,$25(a0)
0000E6EC 08E8 0007 0032             		bset	#7,$32(a0)
0000E6F2                            
0000E6F2                            locret_E188:
0000E6F2 4E75                       		rts	
0000E6F4                            ; End of function Obj43_Stop
0000E6F4                            
0000E6F4                            ; ===========================================================================
0000E6F4                            Ani_obj43:
0000E6F4                            	include "_anim\obj43.asm"
0000E6F4                            ; ---------------------------------------------------------------------------
0000E6F4                            ; Animation script - Roller enemy
0000E6F4                            ; ---------------------------------------------------------------------------
0000E6F4 0000                       		dc.w byte_E190-Ani_obj43
0000E6F6 0000                       		dc.w byte_E196-Ani_obj43
0000E6F8 0000                       		dc.w byte_E19C-Ani_obj43
0000E6FA 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E700 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E706 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E70C 00                         		even
0000E70C 00                         		even
0000E70C                            
0000E70C                            ; ---------------------------------------------------------------------------
0000E70C                            ; Sprite mappings - Roller enemy (SYZ)
0000E70C                            ; ---------------------------------------------------------------------------
0000E70C                            Map_obj43:
0000E70C                            	include "_maps\obj43.asm"
0000E70C                            Map_61da:
0000E70C 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E70E 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E710 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E712 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E714 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E716 02                         Map_61da_A: 	dc.b $2
0000E717 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E71C F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E721 02                         Map_61da_15: 	dc.b $2
0000E722 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E727 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E72C 01                         Map_61da_20: 	dc.b $1
0000E72D F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E732 01                         Map_61da_26: 	dc.b $1
0000E733 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E738 01                         Map_61da_2C: 	dc.b $1
0000E739 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E73E                            	even
0000E73E                            	even
0000E73E                            
0000E73E                            ; ===========================================================================
0000E73E                            ; ---------------------------------------------------------------------------
0000E73E                            ; Object 44 - walls (GHZ)
0000E73E                            ; ---------------------------------------------------------------------------
0000E73E                            
0000E73E                            Obj44:					; XREF: Obj_Index
0000E73E 7000                       		moveq	#0,d0
0000E740 1028 0024                  		move.b	$24(a0),d0
0000E744 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E748 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E74C                            ; ===========================================================================
0000E74C 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E74E 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E750 0000                       		dc.w Obj44_Display-Obj44_Index
0000E752                            ; ===========================================================================
0000E752                            
0000E752                            Obj44_Main:				; XREF: Obj44_Index
0000E752 5428 0024                  		addq.b	#2,$24(a0)
0000E756 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E75E 317C 434C 0002             		move.w	#$434C,2(a0)
0000E764 0028 0004 0001             		ori.b	#4,1(a0)
0000E76A 117C 0008 0019             		move.b	#8,$19(a0)
0000E770 117C 0006 0018             		move.b	#6,$18(a0)
0000E776 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E77C 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E782 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E784 5428 0024                  		addq.b	#2,$24(a0)
0000E788 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E78A                            ; ===========================================================================
0000E78A                            
0000E78A                            Obj44_Solid:				; XREF: Obj44_Index
0000E78A 323C 0013                  		move.w	#$13,d1
0000E78E 343C 0028                  		move.w	#$28,d2
0000E792 6100 A714                  		bsr.w	Obj44_SolidWall
0000E796                            
0000E796                            Obj44_Display:				; XREF: Obj44_Index
0000E796 6100 F3DA                  		bsr.w	DisplaySprite
0000E79A 3028 0008                  		move.w	8(a0),d0
0000E79E 0240 FF80                  		andi.w	#$FF80,d0
0000E7A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7A6 0441 0080                  		subi.w	#$80,d1
0000E7AA 0241 FF80                  		andi.w	#$FF80,d1
0000E7AE 9041                       		sub.w	d1,d0
0000E7B0 0C40 0280                  		cmpi.w	#$280,d0
0000E7B4 6200 F3F8                  		bhi.w	DeleteObject
0000E7B8 4E75                       		rts	
0000E7BA                            ; ===========================================================================
0000E7BA                            ; ---------------------------------------------------------------------------
0000E7BA                            ; Sprite mappings - walls (GHZ)
0000E7BA                            ; ---------------------------------------------------------------------------
0000E7BA                            Map_obj44:
0000E7BA                            	include "_maps\obj44.asm"
0000E7BA                            ; ---------------------------------------------------------------------------
0000E7BA                            ; Sprite mappings - walls (GHZ)
0000E7BA                            ; ---------------------------------------------------------------------------
0000E7BA 0000                       		dc.w byte_E256-Map_obj44
0000E7BC 0000                       		dc.w byte_E26B-Map_obj44
0000E7BE 0000                       		dc.w byte_E280-Map_obj44
0000E7C0 04                         byte_E256:	dc.b 4
0000E7C1 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E7C6 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E7CB 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E7D0 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E7D5 04                         byte_E26B:	dc.b 4
0000E7D6 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E7DB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E7E0 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E7E5 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E7EA 04                         byte_E280:	dc.b 4
0000E7EB E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E7F0 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E7F5 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E7FA 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E800 00                         		even
0000E800 00                         		even
0000E800                            
0000E800                            ; ===========================================================================
0000E800                            ; ---------------------------------------------------------------------------
0000E800                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E800                            ; ---------------------------------------------------------------------------
0000E800                            
0000E800                            Obj13:					; XREF: Obj_Index
0000E800 7000                       		moveq	#0,d0
0000E802 1028 0024                  		move.b	$24(a0),d0
0000E806 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E80A 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E80E 6000 0000                  		bra.w	Obj14_ChkDel
0000E812                            ; ===========================================================================
0000E812 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E814 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E816                            ; ---------------------------------------------------------------------------
0000E816                            ;
0000E816                            ; Lava ball production rates
0000E816                            ;
0000E816 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E81C                            ; ===========================================================================
0000E81C                            
0000E81C                            Obj13_Main:				; XREF: Obj13_Index
0000E81C 5428 0024                  		addq.b	#2,$24(a0)
0000E820 1028 0028                  		move.b	$28(a0),d0
0000E824 E848                       		lsr.w	#4,d0
0000E826 0240 000F                  		andi.w	#$F,d0
0000E82A 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E830 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E836 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E83C                            
0000E83C                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E83C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E840 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E842 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E848 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E84C 6600                       		bne.s	locret_E302
0000E84E 6100 F7A8                  		bsr.w	SingleObjLoad
0000E852 6600                       		bne.s	locret_E302
0000E854 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E858 3368 0008 0008             		move.w	8(a0),8(a1)
0000E85E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E864 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E86A                            
0000E86A                            locret_E302:
0000E86A 4E75                       		rts	
0000E86C                            ; ===========================================================================
0000E86C                            ; ---------------------------------------------------------------------------
0000E86C                            ; Object 14 - lava balls (MZ, SLZ)
0000E86C                            ; ---------------------------------------------------------------------------
0000E86C                            
0000E86C                            Obj14:					; XREF: Obj_Index
0000E86C 7000                       		moveq	#0,d0
0000E86E 1028 0024                  		move.b	$24(a0),d0
0000E872 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E876 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E87A 6000 F2F6                  		bra.w	DisplaySprite
0000E87E                            ; ===========================================================================
0000E87E 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E880 0000                       		dc.w Obj14_Action-Obj14_Index
0000E882 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E884                            
0000E884 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E88E 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E896                            ; ===========================================================================
0000E896                            
0000E896                            Obj14_Main:				; XREF: Obj14_Index
0000E896 5428 0024                  		addq.b	#2,$24(a0)
0000E89A 117C 0008 0016             		move.b	#8,$16(a0)
0000E8A0 117C 0008 0017             		move.b	#8,$17(a0)
0000E8A6 217C 0000 B836 0004        		move.l	#Map_obj14,4(a0)
0000E8AE 317C 0345 0002             		move.w	#$345,2(a0)
0000E8B4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E8BA 6600                       		bne.s	loc_E35A
0000E8BC 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E8C2                            
0000E8C2                            loc_E35A:
0000E8C2 117C 0004 0001             		move.b	#4,1(a0)
0000E8C8 117C 0003 0018             		move.b	#3,$18(a0)
0000E8CE 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E8D4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E8DA 4A28 0029                  		tst.b	$29(a0)
0000E8DE 6700                       		beq.s	Obj14_SetSpeed
0000E8E0 5428 0018                  		addq.b	#2,$18(a0)
0000E8E4                            
0000E8E4                            Obj14_SetSpeed:
0000E8E4 7000                       		moveq	#0,d0
0000E8E6 1028 0028                  		move.b	$28(a0),d0
0000E8EA D040                       		add.w	d0,d0
0000E8EC 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E8F2 117C 0008 0019             		move.b	#8,$19(a0)
0000E8F8 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E8FE 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E900 117C 0010 0019             		move.b	#$10,$19(a0)
0000E906 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E90C 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E912 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E918                            
0000E918                            Obj14_PlaySnd:
0000E918 303C 00AE                  		move.w	#$AE,d0
0000E91C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E922                            
0000E922                            Obj14_Action:				; XREF: Obj14_Index
0000E922 7000                       		moveq	#0,d0
0000E924 1028 0028                  		move.b	$28(a0),d0
0000E928 D040                       		add.w	d0,d0
0000E92A 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E92E 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E932 6100 F218                  		bsr.w	SpeedToPos
0000E936 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E93C 6100 C304                  		bsr.w	AnimateSprite
0000E940                            
0000E940                            Obj14_ChkDel:				; XREF: Obj13
0000E940 3028 0008                  		move.w	8(a0),d0
0000E944 0240 FF80                  		andi.w	#$FF80,d0
0000E948 3238 F700                  		move.w	($FFFFF700).w,d1
0000E94C 0441 0080                  		subi.w	#$80,d1
0000E950 0241 FF80                  		andi.w	#$FF80,d1
0000E954 9041                       		sub.w	d1,d0
0000E956 0C40 0280                  		cmpi.w	#$280,d0
0000E95A 6200 F252                  		bhi.w	DeleteObject
0000E95E 4E75                       		rts	
0000E960                            ; ===========================================================================
0000E960 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E964 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E968 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E96C 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E970 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E972                            ; ===========================================================================
0000E972                            ; lavaball types 00-03 fly up and fall back down
0000E972                            
0000E972                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E972 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E978 3028 0030                  		move.w	$30(a0),d0
0000E97C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E980 6400                       		bcc.s	loc_E41E	; if not, branch
0000E982 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E986                            
0000E986                            loc_E41E:
0000E986 08A8 0001 0022             		bclr	#1,$22(a0)
0000E98C 4A68 0012                  		tst.w	$12(a0)
0000E990 6A00                       		bpl.s	locret_E430
0000E992 08E8 0001 0022             		bset	#1,$22(a0)
0000E998                            
0000E998                            locret_E430:
0000E998 4E75                       		rts	
0000E99A                            ; ===========================================================================
0000E99A                            ; lavaball type	04 flies up until it hits the ceiling
0000E99A                            
0000E99A                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E99A 08E8 0001 0022             		bset	#1,$22(a0)
0000E9A0 6100 0000                  		bsr.w	ObjHitCeiling
0000E9A4 4A41                       		tst.w	d1
0000E9A6 6A00                       		bpl.s	locret_E452
0000E9A8 117C 0008 0028             		move.b	#8,$28(a0)
0000E9AE 117C 0001 001C             		move.b	#1,$1C(a0)
0000E9B4 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E9BA                            
0000E9BA                            locret_E452:
0000E9BA 4E75                       		rts	
0000E9BC                            ; ===========================================================================
0000E9BC                            ; lavaball type	05 falls down until it hits the	floor
0000E9BC                            
0000E9BC                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E9BC 08A8 0001 0022             		bclr	#1,$22(a0)
0000E9C2 6100 0000                  		bsr.w	ObjHitFloor
0000E9C6 4A41                       		tst.w	d1
0000E9C8 6A00                       		bpl.s	locret_E474
0000E9CA 117C 0008 0028             		move.b	#8,$28(a0)
0000E9D0 117C 0001 001C             		move.b	#1,$1C(a0)
0000E9D6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E9DC                            
0000E9DC                            locret_E474:
0000E9DC 4E75                       		rts	
0000E9DE                            ; ===========================================================================
0000E9DE                            ; lavaball types 06-07 move sideways
0000E9DE                            
0000E9DE                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E9DE 08E8 0000 0022             		bset	#0,$22(a0)
0000E9E4 76F8                       		moveq	#-8,d3
0000E9E6 6100 0000                  		bsr.w	ObjHitWallLeft
0000E9EA 4A41                       		tst.w	d1
0000E9EC 6A00                       		bpl.s	locret_E498
0000E9EE 117C 0008 0028             		move.b	#8,$28(a0)
0000E9F4 117C 0003 001C             		move.b	#3,$1C(a0)
0000E9FA 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA00                            
0000EA00                            locret_E498:
0000EA00 4E75                       		rts	
0000EA02                            ; ===========================================================================
0000EA02                            
0000EA02                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EA02 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA08 7608                       		moveq	#8,d3
0000EA0A 6100 0000                  		bsr.w	ObjHitWallRight
0000EA0E 4A41                       		tst.w	d1
0000EA10 6A00                       		bpl.s	locret_E4BC
0000EA12 117C 0008 0028             		move.b	#8,$28(a0)
0000EA18 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA1E 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA24                            
0000EA24                            locret_E4BC:
0000EA24 4E75                       		rts	
0000EA26                            ; ===========================================================================
0000EA26                            
0000EA26                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EA26 4E75                       		rts	
0000EA28                            ; ===========================================================================
0000EA28                            
0000EA28                            Obj14_Delete:				; XREF: Obj14_Index
0000EA28 6000 F184                  		bra.w	DeleteObject
0000EA2C                            ; ===========================================================================
0000EA2C                            Ani_obj14:
0000EA2C                            	include "_anim\obj14.asm"
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C                            ; Animation script - lava balls
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C 0000                       		dc.w byte_E4CC-Ani_obj14
0000EA2E 0000                       		dc.w byte_E4D2-Ani_obj14
0000EA30 0000                       		dc.w byte_E4D6-Ani_obj14
0000EA32 0000                       		dc.w byte_E4DC-Ani_obj14
0000EA34 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EA3A 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EA3E 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EA44 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EA48                            		even
0000EA48                            		even
0000EA48                            
0000EA48                            ; ===========================================================================
0000EA48                            ; ---------------------------------------------------------------------------
0000EA48                            ; Object 6D - flame thrower (SBZ)
0000EA48                            ; ---------------------------------------------------------------------------
0000EA48                            
0000EA48                            Obj6D:					; XREF: Obj_Index
0000EA48 7000                       		moveq	#0,d0
0000EA4A 1028 0024                  		move.b	$24(a0),d0
0000EA4E 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EA52 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EA56                            ; ===========================================================================
0000EA56 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EA58 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EA5A                            ; ===========================================================================
0000EA5A                            
0000EA5A                            Obj6D_Main:				; XREF: Obj6D_Index
0000EA5A 5428 0024                  		addq.b	#2,$24(a0)
0000EA5E 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EA66 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EA6C 0028 0004 0001             		ori.b	#4,1(a0)
0000EA72 117C 0001 0018             		move.b	#1,$18(a0)
0000EA78 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EA7E 117C 000C 0019             		move.b	#$C,$19(a0)
0000EA84 1028 0028                  		move.b	$28(a0),d0
0000EA88 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EA8C D040                       		add.w	d0,d0		; multiply by 2
0000EA8E 3140 0030                  		move.w	d0,$30(a0)
0000EA92 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EA96 1028 0028                  		move.b	$28(a0),d0
0000EA9A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EA9E EB48                       		lsl.w	#5,d0		; multiply by $20
0000EAA0 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EAA4 117C 000A 0036             		move.b	#$A,$36(a0)
0000EAAA 0828 0001 0022             		btst	#1,$22(a0)
0000EAB0 6700                       		beq.s	Obj6D_Action
0000EAB2 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAB8 117C 0015 0036             		move.b	#$15,$36(a0)
0000EABE                            
0000EABE                            Obj6D_Action:				; XREF: Obj6D_Index
0000EABE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EAC2 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EAC4 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EACA 0868 0000 001C             		bchg	#0,$1C(a0)
0000EAD0 6700                       		beq.s	loc_E57A
0000EAD2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EAD8 303C 00B3                  		move.w	#$B3,d0
0000EADC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000EAE2                            
0000EAE2                            loc_E57A:
0000EAE2 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EAE8 6100 C158                  		bsr.w	AnimateSprite
0000EAEC 117C 0000 0020             		move.b	#0,$20(a0)
0000EAF2 1028 0036                  		move.b	$36(a0),d0
0000EAF6 B028 001A                  		cmp.b	$1A(a0),d0
0000EAFA 6600                       		bne.s	Obj6D_ChkDel
0000EAFC 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EB02                            
0000EB02                            Obj6D_ChkDel:
0000EB02 3028 0008                  		move.w	8(a0),d0
0000EB06 0240 FF80                  		andi.w	#$FF80,d0
0000EB0A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB0E 0441 0080                  		subi.w	#$80,d1
0000EB12 0241 FF80                  		andi.w	#$FF80,d1
0000EB16 9041                       		sub.w	d1,d0
0000EB18 0C40 0280                  		cmpi.w	#$280,d0
0000EB1C 6200 F090                  		bhi.w	DeleteObject
0000EB20 6000 F050                  		bra.w	DisplaySprite
0000EB24                            ; ===========================================================================
0000EB24                            Ani_obj6D:
0000EB24                            	include "_anim\obj6D.asm"
0000EB24                            ; ---------------------------------------------------------------------------
0000EB24                            ; Animation script - flamethrower (SBZ)
0000EB24                            ; ---------------------------------------------------------------------------
0000EB24 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EB26 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EB28 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EB2A 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EB2C 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EB3A 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EB44 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EB52 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EB5C                            		even
0000EB5C                            		even
0000EB5C                            
0000EB5C                            ; ---------------------------------------------------------------------------
0000EB5C                            ; Sprite mappings - flame thrower (SBZ)
0000EB5C                            ; ---------------------------------------------------------------------------
0000EB5C                            Map_obj6D:
0000EB5C                            	include "_maps\obj6D.asm"
0000EB5C                            ; ---------------------------------------------------------------------------
0000EB5C                            ; Sprite mappings - flame thrower (SBZ)
0000EB5C                            ; ---------------------------------------------------------------------------
0000EB5C 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EB60 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EB64 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EB68 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EB6C 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EB70 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EB74 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EB78 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EB7C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EB80 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EB84 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EB88 01                         byte_E620:	dc.b 1
0000EB89 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EB8E 02                         byte_E626:	dc.b 2
0000EB8F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EB94 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EB99 02                         byte_E631:	dc.b 2
0000EB9A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EB9F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBA4 03                         byte_E63C:	dc.b 3
0000EBA5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBAA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBAF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBB4 03                         byte_E64C:	dc.b 3
0000EBB5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBBA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBBF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBC4 04                         byte_E65C:	dc.b 4
0000EBC5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EBCA 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBCF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBD4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBD9 04                         byte_E671:	dc.b 4
0000EBDA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EBDF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBE4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBE9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBEE 05                         byte_E686:	dc.b 5
0000EBEF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EBF4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EBF9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBFE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC03 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC08 05                         byte_E6A0:	dc.b 5
0000EC09 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC0E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC13 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC18 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC1D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC22 06                         byte_E6BA:	dc.b 6
0000EC23 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EC28 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EC2D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC32 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EC37 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC3C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC41 06                         byte_E6D9:	dc.b 6
0000EC42 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EC47 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC4C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EC51 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC56 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC5B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC60 01                         byte_E6F8:	dc.b 1
0000EC61 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC66 02                         byte_E6FE:	dc.b 2
0000EC67 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC6C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC71 02                         byte_E709:	dc.b 2
0000EC72 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC77 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC7C 03                         byte_E714:	dc.b 3
0000EC7D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC82 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC87 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC8C 03                         byte_E724:	dc.b 3
0000EC8D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC92 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC97 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC9C 04                         byte_E734:	dc.b 4
0000EC9D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECA2 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECA7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECAC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECB1 04                         byte_E749:	dc.b 4
0000ECB2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ECB7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECBC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECC1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECC6 05                         byte_E75E:	dc.b 5
0000ECC7 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ECCC 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECD1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECD6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECDB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECE0 05                         byte_E778:	dc.b 5
0000ECE1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ECE6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ECEB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECF0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECF5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECFA 06                         byte_E792:	dc.b 6
0000ECFB E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ED00 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ED05 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED0A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ED0F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED14 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED19 06                         byte_E7B1:	dc.b 6
0000ED1A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ED1F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED24 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ED29 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED2E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED33 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED38                            		even
0000ED38                            		even
0000ED38                            
0000ED38                            ; ===========================================================================
0000ED38                            ; ---------------------------------------------------------------------------
0000ED38                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000ED38                            ; ---------------------------------------------------------------------------
0000ED38                            
0000ED38                            Obj46:					; XREF: Obj_Index
0000ED38 7000                       		moveq	#0,d0
0000ED3A 1028 0024                  		move.b	$24(a0),d0
0000ED3E 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000ED42 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000ED46                            ; ===========================================================================
0000ED46 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000ED48 0000                       		dc.w Obj46_Action-Obj46_Index
0000ED4A                            ; ===========================================================================
0000ED4A                            
0000ED4A                            Obj46_Main:				; XREF: Obj46_Index
0000ED4A 5428 0024                  		addq.b	#2,$24(a0)
0000ED4E 117C 000F 0016             		move.b	#$F,$16(a0)
0000ED54 117C 000F 0017             		move.b	#$F,$17(a0)
0000ED5A 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000ED62 317C 4000 0002             		move.w	#$4000,2(a0)
0000ED68 117C 0004 0001             		move.b	#4,1(a0)
0000ED6E 117C 0003 0018             		move.b	#3,$18(a0)
0000ED74 117C 0010 0019             		move.b	#$10,$19(a0)
0000ED7A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED80 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000ED86                            
0000ED86                            Obj46_Action:				; XREF: Obj46_Index
0000ED86 4A28 0001                  		tst.b	1(a0)
0000ED8A 6A00                       		bpl.s	Obj46_ChkDel
0000ED8C 7000                       		moveq	#0,d0
0000ED8E 1028 0028                  		move.b	$28(a0),d0	; get object type
0000ED92 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000ED96 D040                       		add.w	d0,d0
0000ED98 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000ED9C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EDA0 323C 001B                  		move.w	#$1B,d1
0000EDA4 343C 0010                  		move.w	#$10,d2
0000EDA8 363C 0011                  		move.w	#$11,d3
0000EDAC 3828 0008                  		move.w	8(a0),d4
0000EDB0 6100 0000                  		bsr.w	SolidObject
0000EDB4                            
0000EDB4                            Obj46_ChkDel:
0000EDB4 6100 EDBC                  		bsr.w	DisplaySprite
0000EDB8 3028 0008                  		move.w	8(a0),d0
0000EDBC 0240 FF80                  		andi.w	#$FF80,d0
0000EDC0 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDC4 0441 0080                  		subi.w	#$80,d1
0000EDC8 0241 FF80                  		andi.w	#$FF80,d1
0000EDCC 9041                       		sub.w	d1,d0
0000EDCE 0C40 0280                  		cmpi.w	#$280,d0
0000EDD2 6200 EDDA                  		bhi.w	DeleteObject
0000EDD6 4E75                       		rts	
0000EDD8                            ; ===========================================================================
0000EDD8 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EDDA 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EDDC 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EDDE 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EDE0 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EDE2                            ; ===========================================================================
0000EDE2                            
0000EDE2                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EDE2 4E75                       		rts	
0000EDE4                            ; ===========================================================================
0000EDE4                            
0000EDE4                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EDE4 3038 D008                  		move.w	($FFFFD008).w,d0
0000EDE8 9068 0008                  		sub.w	8(a0),d0
0000EDEC 6400                       		bcc.s	loc_E888
0000EDEE 4440                       		neg.w	d0
0000EDF0                            
0000EDF0                            loc_E888:
0000EDF0 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EDF4 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EDF6 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EDFC                            
0000EDFC                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EDFC 7000                       		moveq	#0,d0
0000EDFE 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EE02 0828 0003 0028             		btst	#3,$28(a0)
0000EE08 6700                       		beq.s	loc_E8A8
0000EE0A 4440                       		neg.w	d0
0000EE0C 0640 0010                  		addi.w	#$10,d0
0000EE10                            
0000EE10                            loc_E8A8:
0000EE10 3228 0030                  		move.w	$30(a0),d1
0000EE14 9240                       		sub.w	d0,d1
0000EE16 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EE1A 4E75                       		rts	
0000EE1C                            ; ===========================================================================
0000EE1C                            
0000EE1C                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EE1C 6100 ED2E                  		bsr.w	SpeedToPos
0000EE20 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EE26 6100 0000                  		bsr.w	ObjHitFloor
0000EE2A 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EE2C 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EE30 D368 000C                  		add.w	d1,$C(a0)
0000EE34 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EE38 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE3E 117C 0004 0028             		move.b	#4,$28(a0)
0000EE44 3011                       		move.w	(a1),d0
0000EE46 0240 03FF                  		andi.w	#$3FF,d0
0000EE4A 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EE4E 6400                       		bcc.s	locret_E8EE
0000EE50 117C 0000 0028             		move.b	#0,$28(a0)
0000EE56                            
0000EE56                            locret_E8EE:
0000EE56 4E75                       		rts	
0000EE58                            ; ===========================================================================
0000EE58                            
0000EE58                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EE58 7000                       		moveq	#0,d0
0000EE5A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EE5E E648                       		lsr.w	#3,d0
0000EE60 3228 0030                  		move.w	$30(a0),d1
0000EE64 9240                       		sub.w	d0,d1
0000EE66 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EE6A 4E75                       		rts	
0000EE6C                            ; ===========================================================================
0000EE6C                            ; ---------------------------------------------------------------------------
0000EE6C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EE6C                            ; ---------------------------------------------------------------------------
0000EE6C                            Map_obj46:
0000EE6C                            	include "_maps\obj46.asm"
0000EE6C                            ; ---------------------------------------------------------------------------
0000EE6C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EE6C                            ; ---------------------------------------------------------------------------
0000EE6C 0000                       		dc.w byte_E906-Map_obj46
0000EE6E 01                         byte_E906:	dc.b 1
0000EE6F F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EE74                            		even
0000EE74                            		even
0000EE74                            
0000EE74                            ; ===========================================================================
0000EE74                            ; ---------------------------------------------------------------------------
0000EE74                            ; Object 12 - lamp (SYZ)
0000EE74                            ; ---------------------------------------------------------------------------
0000EE74                            
0000EE74                            Obj12:					; XREF: Obj_Index
0000EE74 7000                       		moveq	#0,d0
0000EE76 1028 0024                  		move.b	$24(a0),d0
0000EE7A 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EE7E 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EE82                            ; ===========================================================================
0000EE82 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EE84 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EE86                            ; ===========================================================================
0000EE86                            
0000EE86                            Obj12_Main:				; XREF: Obj12_Index
0000EE86 5428 0024                  		addq.b	#2,$24(a0)
0000EE8A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EE92 317C 0000 0002             		move.w	#0,2(a0)
0000EE98 117C 0004 0001             		move.b	#4,1(a0)
0000EE9E 117C 0010 0019             		move.b	#$10,$19(a0)
0000EEA4 117C 0006 0018             		move.b	#6,$18(a0)
0000EEAA                            
0000EEAA                            Obj12_Animate:				; XREF: Obj12_Index
0000EEAA 5328 001E                  		subq.b	#1,$1E(a0)
0000EEAE 6A00                       		bpl.s	Obj12_ChkDel
0000EEB0 117C 0007 001E             		move.b	#7,$1E(a0)
0000EEB6 5228 001A                  		addq.b	#1,$1A(a0)
0000EEBA 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EEC0 6500                       		bcs.s	Obj12_ChkDel
0000EEC2 117C 0000 001A             		move.b	#0,$1A(a0)
0000EEC8                            
0000EEC8                            Obj12_ChkDel:
0000EEC8 3028 0008                  		move.w	8(a0),d0
0000EECC 0240 FF80                  		andi.w	#$FF80,d0
0000EED0 3238 F700                  		move.w	($FFFFF700).w,d1
0000EED4 0441 0080                  		subi.w	#$80,d1
0000EED8 0241 FF80                  		andi.w	#$FF80,d1
0000EEDC 9041                       		sub.w	d1,d0
0000EEDE 0C40 0280                  		cmpi.w	#$280,d0
0000EEE2 6200 ECCA                  		bhi.w	DeleteObject
0000EEE6 6000 EC8A                  		bra.w	DisplaySprite
0000EEEA                            ; ===========================================================================
0000EEEA                            ; ---------------------------------------------------------------------------
0000EEEA                            ; Sprite mappings - lamp (SYZ)
0000EEEA                            ; ---------------------------------------------------------------------------
0000EEEA                            Map_obj12:
0000EEEA                            	include "_maps\obj12.asm"
0000EEEA                            ; ---------------------------------------------------------------------------
0000EEEA                            ; Sprite mappings - lamp (SYZ)
0000EEEA                            ; ---------------------------------------------------------------------------
0000EEEA 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EEEE 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EEF2 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EEF6 02                         byte_E98E:	dc.b 2
0000EEF7 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EEFC 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EF01 02                         byte_E999:	dc.b 2
0000EF02 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EF07 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EF0C 02                         byte_E9A4:	dc.b 2
0000EF0D F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EF12 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EF17 02                         byte_E9AF:	dc.b 2
0000EF18 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EF1D 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EF22 02                         byte_E9BA:	dc.b 2
0000EF23 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EF28 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EF2D 02                         byte_E9C5:	dc.b 2
0000EF2E F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EF33 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EF38                            		even
0000EF38                            		even
0000EF38                            
0000EF38                            ; ===========================================================================
0000EF38                            ; ---------------------------------------------------------------------------
0000EF38                            ; Object 47 - pinball bumper (SYZ)
0000EF38                            ; ---------------------------------------------------------------------------
0000EF38                            
0000EF38                            Obj47:					; XREF: Obj_Index
0000EF38 7000                       		moveq	#0,d0
0000EF3A 1028 0024                  		move.b	$24(a0),d0
0000EF3E 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EF42 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EF46                            ; ===========================================================================
0000EF46 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EF48 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EF4A                            ; ===========================================================================
0000EF4A                            
0000EF4A                            Obj47_Main:				; XREF: Obj47_Index
0000EF4A 5428 0024                  		addq.b	#2,$24(a0)
0000EF4E 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EF56 317C 0380 0002             		move.w	#$380,2(a0)
0000EF5C 117C 0004 0001             		move.b	#4,1(a0)
0000EF62 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF68 117C 0001 0018             		move.b	#1,$18(a0)
0000EF6E 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EF74                            
0000EF74                            Obj47_Hit:				; XREF: Obj47_Index
0000EF74 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EF78 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EF7C 4228 0021                  		clr.b	$21(a0)
0000EF80 43F8 D000                  		lea	($FFFFD000).w,a1
0000EF84 3228 0008                  		move.w	8(a0),d1
0000EF88 3428 000C                  		move.w	$C(a0),d2
0000EF8C 9269 0008                  		sub.w	8(a1),d1
0000EF90 9469 000C                  		sub.w	$C(a1),d2
0000EF94 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0000EF9A 4EB9 0000 2C22             		jsr	(CalcSine).l
0000EFA0 C3FC F900                  		muls.w	#-$700,d1
0000EFA4 E081                       		asr.l	#8,d1
0000EFA6 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EFAA C1FC F900                  		muls.w	#-$700,d0
0000EFAE E080                       		asr.l	#8,d0
0000EFB0 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EFB4 08E9 0001 0022             		bset	#1,$22(a1)
0000EFBA 08A9 0004 0022             		bclr	#4,$22(a1)
0000EFC0 08A9 0005 0022             		bclr	#5,$22(a1)
0000EFC6 4229 003C                  		clr.b	$3C(a1)
0000EFCA 117C 0001 001C             		move.b	#1,$1C(a0)
0000EFD0 303C 00B4                  		move.w	#$B4,d0
0000EFD4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EFDA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EFDE 7000                       		moveq	#0,d0
0000EFE0 1028 0023                  		move.b	$23(a0),d0
0000EFE4 6700                       		beq.s	Obj47_Score
0000EFE6 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EFEC 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EFEE 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EFF2                            
0000EFF2                            Obj47_Score:
0000EFF2 7001                       		moveq	#1,d0
0000EFF4 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EFFA 6100 EFFC                  		bsr.w	SingleObjLoad
0000EFFE 6600                       		bne.s	Obj47_Display
0000F000 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F004 3368 0008 0008             		move.w	8(a0),8(a1)
0000F00A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F010 137C 0004 001A             		move.b	#4,$1A(a1)
0000F016                            
0000F016                            Obj47_Display:
0000F016 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F01C 6100 BC24                  		bsr.w	AnimateSprite
0000F020 3028 0008                  		move.w	8(a0),d0
0000F024 0240 FF80                  		andi.w	#$FF80,d0
0000F028 3238 F700                  		move.w	($FFFFF700).w,d1
0000F02C 0441 0080                  		subi.w	#$80,d1
0000F030 0241 FF80                  		andi.w	#$FF80,d1
0000F034 9041                       		sub.w	d1,d0
0000F036 0C40 0280                  		cmpi.w	#$280,d0
0000F03A 6200                       		bhi.s	Obj47_ChkHit
0000F03C 6000 EB34                  		bra.w	DisplaySprite
0000F040                            ; ===========================================================================
0000F040                            
0000F040                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F040 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F044 7000                       		moveq	#0,d0
0000F046 1028 0023                  		move.b	$23(a0),d0
0000F04A 6700                       		beq.s	Obj47_Delete
0000F04C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F052                            
0000F052                            Obj47_Delete:
0000F052 6000 EB5A                  		bra.w	DeleteObject
0000F056                            ; ===========================================================================
0000F056                            Ani_obj47:
0000F056                            	include "_anim\obj47.asm"
0000F056                            ; ---------------------------------------------------------------------------
0000F056                            ; Animation script - flamethrower (SBZ)
0000F056                            ; ---------------------------------------------------------------------------
0000F056 0000                       		dc.w byte_EAF4-Ani_obj47
0000F058 0000                       		dc.w byte_EAF8-Ani_obj47
0000F05A 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F05E 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F066                            		even
0000F066                            		even
0000F066                            
0000F066                            ; ---------------------------------------------------------------------------
0000F066                            ; Sprite mappings - pinball bumper (SYZ)
0000F066                            ; ---------------------------------------------------------------------------
0000F066                            Map_obj47:
0000F066                            	include "_maps\obj47.asm"
0000F066                            ; ---------------------------------------------------------------------------
0000F066                            ; Sprite mappings - pinball bumper (SYZ)
0000F066                            ; ---------------------------------------------------------------------------
0000F066 0000                       		dc.w byte_EB06-Map_obj47
0000F068 0000                       		dc.w byte_EB11-Map_obj47
0000F06A 0000                       		dc.w byte_EB1C-Map_obj47
0000F06C 02                         byte_EB06:	dc.b 2
0000F06D F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F072 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F077 02                         byte_EB11:	dc.b 2
0000F078 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F07D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F082 02                         byte_EB1C:	dc.b 2
0000F083 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F088 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F08E 00                         		even
0000F08E 00                         		even
0000F08E                            
0000F08E                            ; ===========================================================================
0000F08E                            ; ---------------------------------------------------------------------------
0000F08E                            ; Object 0D - signpost at the end of a level
0000F08E                            ; ---------------------------------------------------------------------------
0000F08E                            
0000F08E                            Obj0D:					; XREF: Obj_Index
0000F08E 7000                       		moveq	#0,d0
0000F090 1028 0024                  		move.b	$24(a0),d0
0000F094 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F098 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F09C 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F0A2 6100 BB9E                  		bsr.w	AnimateSprite
0000F0A6 6100 EACA                  		bsr.w	DisplaySprite
0000F0AA 3028 0008                  		move.w	8(a0),d0
0000F0AE 0240 FF80                  		andi.w	#$FF80,d0
0000F0B2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0B6 0441 0080                  		subi.w	#$80,d1
0000F0BA 0241 FF80                  		andi.w	#$FF80,d1
0000F0BE 9041                       		sub.w	d1,d0
0000F0C0 0C40 0280                  		cmpi.w	#$280,d0
0000F0C4 6200 EAE8                  		bhi.w	DeleteObject
0000F0C8 4E75                       		rts	
0000F0CA                            ; ===========================================================================
0000F0CA 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F0CC 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F0CE 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F0D0 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F0D2 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F0D4                            ; ===========================================================================
0000F0D4                            
0000F0D4                            Obj0D_Main:				; XREF: Obj0D_Index
0000F0D4 5428 0024                  		addq.b	#2,$24(a0)
0000F0D8 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F0E0 317C 0680 0002             		move.w	#$680,2(a0)
0000F0E6 117C 0004 0001             		move.b	#4,1(a0)
0000F0EC 117C 0018 0019             		move.b	#$18,$19(a0)
0000F0F2 117C 0004 0018             		move.b	#4,$18(a0)
0000F0F8                            
0000F0F8                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F0F8 3038 D008                  		move.w	($FFFFD008).w,d0
0000F0FC 9068 0008                  		sub.w	8(a0),d0
0000F100 6500                       		bcs.s	locret_EBBA
0000F102 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F106 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F108 303C 00CF                  		move.w	#$CF,d0
0000F10C 4EB9 0000 15B6             		jsr	(PlaySound).l	; play signpost	sound
0000F112 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F116 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F11C 5428 0024                  		addq.b	#2,$24(a0)
0000F120                            
0000F120                            locret_EBBA:
0000F120 4E75                       		rts	
0000F122                            ; ===========================================================================
0000F122                            
0000F122                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F122 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F126 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F128 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F12E 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F132 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F138 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F13A 5428 0024                  		addq.b	#2,$24(a0)
0000F13E                            
0000F13E                            Obj0D_Sparkle:
0000F13E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F142 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F144 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F14A 7000                       		moveq	#0,d0
0000F14C 1028 0034                  		move.b	$34(a0),d0
0000F150 5428 0034                  		addq.b	#2,$34(a0)
0000F154 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F15A 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F15E 6100 EE98                  		bsr.w	SingleObjLoad
0000F162 6600                       		bne.s	locret_EC42
0000F164 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F168 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F16E 101A                       		move.b	(a2)+,d0
0000F170 4880                       		ext.w	d0
0000F172 D068 0008                  		add.w	8(a0),d0
0000F176 3340 0008                  		move.w	d0,8(a1)
0000F17A 101A                       		move.b	(a2)+,d0
0000F17C 4880                       		ext.w	d0
0000F17E D068 000C                  		add.w	$C(a0),d0
0000F182 3340 000C                  		move.w	d0,$C(a1)
0000F186 237C 0000 A3E0 0004        		move.l	#Map_obj25,4(a1)
0000F18E 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F194 137C 0004 0001             		move.b	#4,1(a1)
0000F19A 137C 0002 0018             		move.b	#2,$18(a1)
0000F1A0 137C 0008 0019             		move.b	#8,$19(a1)
0000F1A6                            
0000F1A6                            locret_EC42:
0000F1A6 4E75                       		rts	
0000F1A8                            ; ===========================================================================
0000F1A8 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F1AA 0808                       		dc.b	8,   8
0000F1AC F000                       		dc.b -$10,   0
0000F1AE 18F8                       		dc.b  $18,  -8
0000F1B0 00F8                       		dc.b	0,  -8
0000F1B2 1000                       		dc.b  $10,   0
0000F1B4 E808                       		dc.b -$18,   8
0000F1B6 1810                       		dc.b  $18, $10
0000F1B8                            ; ===========================================================================
0000F1B8                            
0000F1B8                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F1B8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F1BC 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F1C0 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F1C6 6600                       		bne.s	loc_EC70
0000F1C8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F1CE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F1D4 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F1D6 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F1DC 6000                       		bra.s	loc_EC70
0000F1DE                            
0000F1DE                            Obj0D_MoveLeft:
0000F1DE 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F1E4                            
0000F1E4                            loc_EC70:
0000F1E4 4A38 D000                  		tst.b	($FFFFD000).w
0000F1E8 6700                       		beq.s	loc_EC86
0000F1EA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F1EE 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F1F2 0641 0128                  		addi.w	#$128,d1
0000F1F6 B041                       		cmp.w	d1,d0
0000F1F8 6500                       		bcs.s	locret_ECEE
0000F1FA                            
0000F1FA                            loc_EC86:
0000F1FA 5428 0024                  		addq.b	#2,$24(a0)
0000F1FE                            
0000F1FE                            ; ---------------------------------------------------------------------------
0000F1FE                            ; Subroutine to	set up bonuses at the end of an	act
0000F1FE                            ; ---------------------------------------------------------------------------
0000F1FE                            
0000F1FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1FE                            
0000F1FE                            
0000F1FE                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F1FE 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F202 6600                       		bne.s	locret_ECEE
0000F204 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F20A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F20E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F212 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F218 7010                       		moveq	#$10,d0
0000F21A 4EB9 0000 17D2             		jsr	(LoadPLC2).l	; load title card patterns
0000F220 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F226 7000                       		moveq	#0,d0
0000F228 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F22C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F230 7200                       		moveq	#0,d1
0000F232 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F236 D041                       		add.w	d1,d0		; add up your time
0000F238 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F23C 7214                       		moveq	#$14,d1
0000F23E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F240 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F242 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F244                            
0000F244                            loc_ECD0:
0000F244 D040                       		add.w	d0,d0
0000F246 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F24C 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F250 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F254 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F258 303C 008E                  		move.w	#$8E,d0
0000F25C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F262                            
0000F262                            locret_ECEE:
0000F262 4E75                       		rts	
0000F264                            ; End of function GotThroughAct
0000F264                            
0000F264                            ; ===========================================================================
0000F264 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F278 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F28E                            ; ===========================================================================
0000F28E                            
0000F28E                            locret_ED1A:				; XREF: Obj0D_Index
0000F28E 4E75                       		rts	
0000F290                            ; ===========================================================================
0000F290                            Ani_obj0D:
0000F290                            	include "_anim\obj0D.asm"
0000F290                            ; ---------------------------------------------------------------------------
0000F290                            ; Animation script - signpost
0000F290                            ; ---------------------------------------------------------------------------
0000F290 0000                       		dc.w byte_ED24-Ani_obj0D
0000F292 0000                       		dc.w byte_ED28-Ani_obj0D
0000F294 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F296 0000                       		dc.w byte_ED34-Ani_obj0D
0000F298 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F29C 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F2A2 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F2A8 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F2AC 00                         		even
0000F2AC 00                         		even
0000F2AC                            
0000F2AC                            ; ---------------------------------------------------------------------------
0000F2AC                            ; Sprite mappings - signpost
0000F2AC                            ; ---------------------------------------------------------------------------
0000F2AC                            Map_obj0D:
0000F2AC                            	include "_maps\obj0D.asm"
0000F2AC                            ; ---------------------------------------------------------------------------
0000F2AC                            ; Sprite mappings - signpost
0000F2AC                            ; ---------------------------------------------------------------------------
0000F2AC 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F2B0 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F2B4 0000                       		dc.w byte_ED73-Map_obj0D
0000F2B6 03                         byte_ED42:	dc.b 3
0000F2B7 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F2BC F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F2C1 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F2C6 02                         byte_ED52:	dc.b 2
0000F2C7 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F2CC 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F2D1 02                         byte_ED5D:	dc.b 2
0000F2D2 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F2D7 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F2DC 02                         byte_ED68:	dc.b 2
0000F2DD F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F2E2 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F2E7 03                         byte_ED73:	dc.b 3
0000F2E8 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F2ED F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F2F2 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F2F8 00                         		even
0000F2F8 00                         		even
0000F2F8                            
0000F2F8                            ; ===========================================================================
0000F2F8                            ; ---------------------------------------------------------------------------
0000F2F8                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F2F8                            ; ---------------------------------------------------------------------------
0000F2F8                            
0000F2F8                            Obj4C:					; XREF: Obj_Index
0000F2F8 7000                       		moveq	#0,d0
0000F2FA 1028 0024                  		move.b	$24(a0),d0
0000F2FE 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F302 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F306 6000 0000                  		bra.w	Obj4D_ChkDel
0000F30A                            ; ===========================================================================
0000F30A 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F30C 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F30E 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F310 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F312 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F314 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F316                            ; ===========================================================================
0000F316                            
0000F316                            Obj4C_Main:				; XREF: Obj4C_Index
0000F316 5428 0024                  		addq.b	#2,$24(a0)
0000F31A 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F322 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F328 117C 0004 0001             		move.b	#4,1(a0)
0000F32E 117C 0001 0018             		move.b	#1,$18(a0)
0000F334 117C 0038 0019             		move.b	#$38,$19(a0)
0000F33A 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F340                            
0000F340                            loc_EDCC:				; XREF: Obj4C_Index
0000F340 5368 0032                  		subq.w	#1,$32(a0)
0000F344 6A00                       		bpl.s	locret_EDF0
0000F346 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F34C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F350 3228 000C                  		move.w	$C(a0),d1
0000F354 B041                       		cmp.w	d1,d0
0000F356 6400                       		bcc.s	locret_EDF0
0000F358 0441 0170                  		subi.w	#$170,d1
0000F35C B041                       		cmp.w	d1,d0
0000F35E 6500                       		bcs.s	locret_EDF0
0000F360 5428 0024                  		addq.b	#2,$24(a0)
0000F364                            
0000F364                            locret_EDF0:
0000F364 4E75                       		rts	
0000F366                            ; ===========================================================================
0000F366                            
0000F366                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F366 5428 0024                  		addq.b	#2,$24(a0)
0000F36A 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F36E 6600                       		bne.s	loc_EE18
0000F370 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F374 3368 0008 0008             		move.w	8(a0),8(a1)
0000F37A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F380 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F386 2348 003C                  		move.l	a0,$3C(a1)
0000F38A                            
0000F38A                            loc_EE18:
0000F38A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F390 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F394 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F396 117C 0004 001C             		move.b	#4,$1C(a0)
0000F39C 6000                       		bra.s	Obj4C_Display
0000F39E                            ; ===========================================================================
0000F39E                            
0000F39E                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F39E 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F3A2 08E9 0001 0022             		bset	#1,$22(a1)
0000F3A8 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F3AE 6000                       		bra.s	Obj4C_Display
0000F3B0                            ; ===========================================================================
0000F3B0                            
0000F3B0                            loc_EE3E:				; XREF: Obj4C_Index
0000F3B0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F3B4 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F3B6 5428 0024                  		addq.b	#2,$24(a0)
0000F3BA 4E75                       		rts	
0000F3BC                            ; ===========================================================================
0000F3BC                            
0000F3BC                            Obj4C_Display:				; XREF: Obj4C_Index
0000F3BC 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F3C2 6100 B87E                  		bsr.w	AnimateSprite
0000F3C6 6100 E7AA                  		bsr.w	DisplaySprite
0000F3CA 4E75                       		rts	
0000F3CC                            ; ===========================================================================
0000F3CC                            
0000F3CC                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F3CC 117C 0000 001C             		move.b	#0,$1C(a0)
0000F3D2 117C 0002 0024             		move.b	#2,$24(a0)
0000F3D8 4A28 0028                  		tst.b	$28(a0)
0000F3DC 6700 E7D0                  		beq.w	DeleteObject
0000F3E0 4E75                       		rts	
0000F3E2                            ; ===========================================================================
0000F3E2                            ; ---------------------------------------------------------------------------
0000F3E2                            ; Object 4D - lava geyser / lavafall (MZ)
0000F3E2                            ; ---------------------------------------------------------------------------
0000F3E2                            
0000F3E2                            Obj4D:					; XREF: Obj_Index
0000F3E2 7000                       		moveq	#0,d0
0000F3E4 1028 0024                  		move.b	$24(a0),d0
0000F3E8 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F3EC 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F3F0 6000 E780                  		bra.w	DisplaySprite
0000F3F4                            ; ===========================================================================
0000F3F4 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F3F6 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F3F8 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F3FA 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F3FC                            
0000F3FC FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F400                            ; ===========================================================================
0000F400                            
0000F400                            Obj4D_Main:				; XREF: Obj4D_Index
0000F400 5428 0024                  		addq.b	#2,$24(a0)
0000F404 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F40A 4A28 0028                  		tst.b	$28(a0)
0000F40E 6700                       		beq.s	loc_EEA4
0000F410 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F416                            
0000F416                            loc_EEA4:
0000F416 7000                       		moveq	#0,d0
0000F418 1028 0028                  		move.b	$28(a0),d0
0000F41C D040                       		add.w	d0,d0
0000F41E 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F424 2248                       		movea.l	a0,a1
0000F426 7201                       		moveq	#1,d1
0000F428 6100                       		bsr.s	Obj4D_MakeLava
0000F42A 6000                       		bra.s	loc_EF10
0000F42C                            ; ===========================================================================
0000F42C                            
0000F42C                            Obj4D_Loop:
0000F42C 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F430 6600                       		bne.s	loc_EF0A
0000F432                            
0000F432                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F432 12BC 004D                  		move.b	#$4D,0(a1)
0000F436 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F43E 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F444 137C 0004 0001             		move.b	#4,1(a1)
0000F44A 137C 0020 0019             		move.b	#$20,$19(a1)
0000F450 3368 0008 0008             		move.w	8(a0),8(a1)
0000F456 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F45C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F462 137C 0001 0018             		move.b	#1,$18(a1)
0000F468 137C 0005 001C             		move.b	#5,$1C(a1)
0000F46E 4A28 0028                  		tst.b	$28(a0)
0000F472 6700                       		beq.s	loc_EF0A
0000F474 137C 0002 001C             		move.b	#2,$1C(a1)
0000F47A                            
0000F47A                            loc_EF0A:
0000F47A 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F47E 4E75                       		rts	
0000F480                            ; ===========================================================================
0000F480                            
0000F480                            loc_EF10:				; XREF: Obj4D_Main
0000F480 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F486 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F48C 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F492 137C 0093 0020             		move.b	#$93,$20(a1)
0000F498 137C 0080 0016             		move.b	#$80,$16(a1)
0000F49E 08E9 0004 0001             		bset	#4,1(a1)
0000F4A4 5829 0024                  		addq.b	#4,$24(a1)
0000F4A8 2348 003C                  		move.l	a0,$3C(a1)
0000F4AC 4A28 0028                  		tst.b	$28(a0)
0000F4B0 6700                       		beq.s	Obj4D_PlaySnd
0000F4B2 7200                       		moveq	#0,d1
0000F4B4 6100 FF76                  		bsr.w	Obj4D_Loop
0000F4B8 5429 0024                  		addq.b	#2,$24(a1)
0000F4BC 08E9 0004 0002             		bset	#4,2(a1)
0000F4C2 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F4C8 137C 0000 0018             		move.b	#0,$18(a1)
0000F4CE 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F4D4 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F4DA 117C 0000 0028             		move.b	#0,$28(a0)
0000F4E0                            
0000F4E0                            Obj4D_PlaySnd:
0000F4E0 303C 00C8                  		move.w	#$C8,d0
0000F4E4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000F4EA                            
0000F4EA                            Obj4D_Action:				; XREF: Obj4D_Index
0000F4EA 7000                       		moveq	#0,d0
0000F4EC 1028 0028                  		move.b	$28(a0),d0
0000F4F0 D040                       		add.w	d0,d0
0000F4F2 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F4F6 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F4FA 6100 E650                  		bsr.w	SpeedToPos
0000F4FE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F504 6100 B73C                  		bsr.w	AnimateSprite
0000F508                            
0000F508                            Obj4D_ChkDel:				; XREF: Obj4C
0000F508 3028 0008                  		move.w	8(a0),d0
0000F50C 0240 FF80                  		andi.w	#$FF80,d0
0000F510 3238 F700                  		move.w	($FFFFF700).w,d1
0000F514 0441 0080                  		subi.w	#$80,d1
0000F518 0241 FF80                  		andi.w	#$FF80,d1
0000F51C 9041                       		sub.w	d1,d0
0000F51E 0C40 0280                  		cmpi.w	#$280,d0
0000F522 6200 E68A                  		bhi.w	DeleteObject
0000F526 4E75                       		rts	
0000F528                            ; ===========================================================================
0000F528 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F52A 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F52C                            ; ===========================================================================
0000F52C                            
0000F52C                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F52C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F532 3028 0030                  		move.w	$30(a0),d0
0000F536 B068 000C                  		cmp.w	$C(a0),d0
0000F53A 6400                       		bcc.s	locret_EFDA
0000F53C 5828 0024                  		addq.b	#4,$24(a0)
0000F540 2268 003C                  		movea.l	$3C(a0),a1
0000F544 137C 0003 001C             		move.b	#3,$1C(a1)
0000F54A                            
0000F54A                            locret_EFDA:
0000F54A 4E75                       		rts	
0000F54C                            ; ===========================================================================
0000F54C                            
0000F54C                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F54C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F552 3028 0030                  		move.w	$30(a0),d0
0000F556 B068 000C                  		cmp.w	$C(a0),d0
0000F55A 6400                       		bcc.s	locret_EFFA
0000F55C 5828 0024                  		addq.b	#4,$24(a0)
0000F560 2268 003C                  		movea.l	$3C(a0),a1
0000F564 137C 0001 001C             		move.b	#1,$1C(a1)
0000F56A                            
0000F56A                            locret_EFFA:
0000F56A 4E75                       		rts	
0000F56C                            ; ===========================================================================
0000F56C                            
0000F56C                            loc_EFFC:				; XREF: Obj4D_Index
0000F56C 2268 003C                  		movea.l	$3C(a0),a1
0000F570 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F576 6700 0000                  		beq.w	Obj4D_Delete
0000F57A 3029 000C                  		move.w	$C(a1),d0
0000F57E 0640 0060                  		addi.w	#$60,d0
0000F582 3140 000C                  		move.w	d0,$C(a0)
0000F586 9068 0030                  		sub.w	$30(a0),d0
0000F58A 4440                       		neg.w	d0
0000F58C 7208                       		moveq	#8,d1
0000F58E 0C40 0040                  		cmpi.w	#$40,d0
0000F592 6C00                       		bge.s	loc_F026
0000F594 720B                       		moveq	#$B,d1
0000F596                            
0000F596                            loc_F026:
0000F596 0C40 0080                  		cmpi.w	#$80,d0
0000F59A 6F00                       		ble.s	loc_F02E
0000F59C 720E                       		moveq	#$E,d1
0000F59E                            
0000F59E                            loc_F02E:
0000F59E 5328 001E                  		subq.b	#1,$1E(a0)
0000F5A2 6A00                       		bpl.s	loc_F04C
0000F5A4 117C 0007 001E             		move.b	#7,$1E(a0)
0000F5AA 5228 001B                  		addq.b	#1,$1B(a0)
0000F5AE 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F5B4 6500                       		bcs.s	loc_F04C
0000F5B6 117C 0000 001B             		move.b	#0,$1B(a0)
0000F5BC                            
0000F5BC                            loc_F04C:
0000F5BC 1028 001B                  		move.b	$1B(a0),d0
0000F5C0 D001                       		add.b	d1,d0
0000F5C2 1140 001A                  		move.b	d0,$1A(a0)
0000F5C6 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F5CA                            ; ===========================================================================
0000F5CA                            
0000F5CA                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F5CA 6000 E5E2                  		bra.w	DeleteObject
0000F5CE                            ; ===========================================================================
0000F5CE                            ; ---------------------------------------------------------------------------
0000F5CE                            ; Object 4E - advancing	wall of	lava (MZ)
0000F5CE                            ; ---------------------------------------------------------------------------
0000F5CE                            
0000F5CE                            Obj4E:					; XREF: Obj_Index
0000F5CE 7000                       		moveq	#0,d0
0000F5D0 1028 0024                  		move.b	$24(a0),d0
0000F5D4 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F5D8 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F5DC                            ; ===========================================================================
0000F5DC 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F5DE 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F5E0 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F5E2 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F5E4 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F5E6                            ; ===========================================================================
0000F5E6                            
0000F5E6                            Obj4E_Main:				; XREF: Obj4E_Index
0000F5E6 5828 0024                  		addq.b	#4,$24(a0)
0000F5EA 2248                       		movea.l	a0,a1
0000F5EC 7201                       		moveq	#1,d1
0000F5EE 6000                       		bra.s	Obj4E_Main2
0000F5F0                            ; ===========================================================================
0000F5F0                            
0000F5F0                            Obj4E_Loop:
0000F5F0 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F5F4 6600                       		bne.s	loc_F0C8
0000F5F6                            
0000F5F6                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F5F6 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F5FA 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F602 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F608 137C 0004 0001             		move.b	#4,1(a1)
0000F60E 137C 0050 0019             		move.b	#$50,$19(a1)
0000F614 3368 0008 0008             		move.w	8(a0),8(a1)
0000F61A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F620 137C 0001 0018             		move.b	#1,$18(a1)
0000F626 137C 0000 001C             		move.b	#0,$1C(a1)
0000F62C 137C 0094 0020             		move.b	#$94,$20(a1)
0000F632 2348 003C                  		move.l	a0,$3C(a1)
0000F636                            
0000F636                            loc_F0C8:
0000F636 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F63A                            
0000F63A 5C29 0024                  		addq.b	#6,$24(a1)
0000F63E 137C 0004 001A             		move.b	#4,$1A(a1)
0000F644                            
0000F644                            Obj4E_Action:				; XREF: Obj4E_Index
0000F644 3038 D008                  		move.w	($FFFFD008).w,d0
0000F648 9068 0008                  		sub.w	8(a0),d0
0000F64C 6400                       		bcc.s	Obj4E_ChkSonic
0000F64E 4440                       		neg.w	d0
0000F650                            
0000F650                            Obj4E_ChkSonic:
0000F650 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F654 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F656 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F65A 9068 000C                  		sub.w	$C(a0),d0
0000F65E 6400                       		bcc.s	loc_F0F4
0000F660 4440                       		neg.w	d0
0000F662                            
0000F662                            loc_F0F4:
0000F662 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F666 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F668 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F66E 6000                       		bra.s	Obj4E_Solid
0000F670                            ; ===========================================================================
0000F670                            
0000F670                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F670 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F674 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F676 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F67C 5528 0024                  		subq.b	#2,$24(a0)
0000F680                            
0000F680                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F680 323C 002B                  		move.w	#$2B,d1
0000F684 343C 0018                  		move.w	#$18,d2
0000F688 3602                       		move.w	d2,d3
0000F68A 5243                       		addq.w	#1,d3
0000F68C 3828 0008                  		move.w	8(a0),d4
0000F690 1028 0024                  		move.b	$24(a0),d0
0000F694 3F00                       		move.w	d0,-(sp)
0000F696 6100 0000                  		bsr.w	SolidObject
0000F69A 301F                       		move.w	(sp)+,d0
0000F69C 1140 0024                  		move.b	d0,$24(a0)
0000F6A0 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F6A6 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F6A8 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F6AC 4228 0036                  		clr.b	$36(a0)
0000F6B0                            
0000F6B0                            Obj4E_Animate:
0000F6B0 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F6B6 6100 B58A                  		bsr.w	AnimateSprite
0000F6BA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F6C0 6400                       		bcc.s	Obj4E_ChkDel
0000F6C2 6100 E488                  		bsr.w	SpeedToPos
0000F6C6                            
0000F6C6                            Obj4E_ChkDel:
0000F6C6 6100 E4AA                  		bsr.w	DisplaySprite
0000F6CA 4A28 0036                  		tst.b	$36(a0)
0000F6CE 6600                       		bne.s	locret_F17E
0000F6D0 3028 0008                  		move.w	8(a0),d0
0000F6D4 0240 FF80                  		andi.w	#$FF80,d0
0000F6D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F6DC 0441 0080                  		subi.w	#$80,d1
0000F6E0 0241 FF80                  		andi.w	#$FF80,d1
0000F6E4 9041                       		sub.w	d1,d0
0000F6E6 0C40 0280                  		cmpi.w	#$280,d0
0000F6EA 6200                       		bhi.s	Obj4E_ChkGone
0000F6EC                            
0000F6EC                            locret_F17E:
0000F6EC 4E75                       		rts	
0000F6EE                            ; ===========================================================================
0000F6EE                            
0000F6EE                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F6EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F6F2 7000                       		moveq	#0,d0
0000F6F4 1028 0023                  		move.b	$23(a0),d0
0000F6F8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F6FE 117C 0008 0024             		move.b	#8,$24(a0)
0000F704 4E75                       		rts	
0000F706                            ; ===========================================================================
0000F706                            
0000F706                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F706 2268 003C                  		movea.l	$3C(a0),a1
0000F70A 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F710 6700                       		beq.s	Obj4E_Delete
0000F712 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F718 0468 0080 0008             		subi.w	#$80,8(a0)
0000F71E 6000 E452                  		bra.w	DisplaySprite
0000F722                            ; ===========================================================================
0000F722                            
0000F722                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F722 6000 E48A                  		bra.w	DeleteObject
0000F726                            ; ===========================================================================
0000F726                            ; ---------------------------------------------------------------------------
0000F726                            ; Object 54 - invisible	lava tag (MZ)
0000F726                            ; ---------------------------------------------------------------------------
0000F726                            
0000F726                            Obj54:					; XREF: Obj_Index
0000F726 7000                       		moveq	#0,d0
0000F728 1028 0024                  		move.b	$24(a0),d0
0000F72C 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F730 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F734                            ; ===========================================================================
0000F734 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F736 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F738                            
0000F738 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F73C                            ; ===========================================================================
0000F73C                            
0000F73C                            Obj54_Main:				; XREF: Obj54_Index
0000F73C 5428 0024                  		addq.b	#2,$24(a0)
0000F740 7000                       		moveq	#0,d0
0000F742 1028 0028                  		move.b	$28(a0),d0
0000F746 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F74C 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F754 117C 0084 0001             		move.b	#$84,1(a0)
0000F75A                            
0000F75A                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F75A 3028 0008                  		move.w	8(a0),d0
0000F75E 0240 FF80                  		andi.w	#$FF80,d0
0000F762 3238 F700                  		move.w	($FFFFF700).w,d1
0000F766 0441 0080                  		subi.w	#$80,d1
0000F76A 0241 FF80                  		andi.w	#$FF80,d1
0000F76E 9041                       		sub.w	d1,d0
0000F770 6B00 E43C                  		bmi.w	DeleteObject
0000F774 0C40 0280                  		cmpi.w	#$280,d0
0000F778 6200 E434                  		bhi.w	DeleteObject
0000F77C 4E75                       		rts	
0000F77E                            ; ===========================================================================
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            ; Sprite mappings - invisible lava tag (MZ)
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            Map_obj54:
0000F77E                            	include "_maps\obj54.asm"
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            ; Sprite mappings - invisible lava tag (MZ)
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E 0000                       		dc.w byte_F212-Map_obj54
0000F780 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F782 00                         		even
0000F782 00                         		even
0000F782                            
0000F782                            Ani_obj4C:
0000F782                            	include "_anim\obj4C.asm"
0000F782                            ; ---------------------------------------------------------------------------
0000F782                            ; Animation script - geyser of lava (MZ)
0000F782                            ; ---------------------------------------------------------------------------
0000F782 0000                       		dc.w byte_F220-Ani_obj4C
0000F784 0000                       		dc.w byte_F22A-Ani_obj4C
0000F786 0000                       		dc.w byte_F22E-Ani_obj4C
0000F788 0000                       		dc.w byte_F232-Ani_obj4C
0000F78A 0000                       		dc.w byte_F23A-Ani_obj4C
0000F78C 0000                       		dc.w byte_F23E-Ani_obj4C
0000F78E 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F798 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F79C 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F7A0 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F7A8 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F7AC 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F7B0                            		even
0000F7B0                            		even
0000F7B0                            
0000F7B0                            Ani_obj4E:
0000F7B0                            	include "_anim\obj4E.asm"
0000F7B0                            ; ---------------------------------------------------------------------------
0000F7B0                            ; Animation script - advancing wall of lava (MZ)
0000F7B0                            ; ---------------------------------------------------------------------------
0000F7B0 0000                       		dc.w byte_F244-Ani_obj4E
0000F7B2 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F7B8                            		even
0000F7B8                            		even
0000F7B8                            
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8                            Map_obj4C:
0000F7B8                            	include "_maps\obj4C.asm"
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F7BC 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F7C0 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F7C4 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F7C8 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F7CC 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F7D0 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F7D4 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F7D8 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F7DC 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F7E0 02                         byte_F272:	dc.b 2
0000F7E1 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F7E6 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F7EB 02                         byte_F27D:	dc.b 2
0000F7EC EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F7F1 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F7F6 04                         byte_F288:	dc.b 4
0000F7F7 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F7FC F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F801 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F806 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F80B 04                         byte_F29D:	dc.b 4
0000F80C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F811 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F816 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F81B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F820 06                         byte_F2B2:	dc.b 6
0000F821 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F826 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F82B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F830 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F835 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F83A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F83F 06                         byte_F2D1:	dc.b 6
0000F840 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F845 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F84A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F84F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F854 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F859 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F85E 02                         byte_F2F0:	dc.b 2
0000F85F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F864 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F869 02                         byte_F2FB:	dc.b 2
0000F86A E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F86F E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F874 0A                         byte_F306:	dc.b $A
0000F875 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F87A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F87F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F884 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F889 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F88E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F893 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F898 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F89D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F8A2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F8A7 0A                         byte_F339:	dc.b $A
0000F8A8 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F8AD 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F8B2 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F8B7 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F8BC D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F8C1 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F8C6 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F8CB F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F8D0 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F8D5 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F8DA 0A                         byte_F36C:	dc.b $A
0000F8DB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F8E0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F8E5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F8EA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F8EF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F8F4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F8F9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F8FE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F903 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F908 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F90D 06                         byte_F39F:	dc.b 6
0000F90E 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F913 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F918 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F91D B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F922 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F927 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F92C 06                         byte_F3BE:	dc.b 6
0000F92D 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F932 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F937 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F93C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F941 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F946 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F94B 06                         byte_F3DD:	dc.b 6
0000F94C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F951 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F956 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F95B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F960 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F965 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F96A 10                         byte_F3FC:	dc.b $10
0000F96B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F970 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F975 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F97A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F97F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F984 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F989 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F98E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F993 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F998 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F99D 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F9A2 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F9A7 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F9AC 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F9B1 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F9B6 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F9BB 10                         byte_F44D:	dc.b $10
0000F9BC 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F9C1 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F9C6 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F9CB B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F9D0 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F9D5 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F9DA F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F9DF F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F9E4 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F9E9 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F9EE 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F9F3 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F9F8 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F9FD 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FA02 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FA07 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FA0C 10                         byte_F49E:	dc.b $10
0000FA0D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA12 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FA17 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FA1C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FA21 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FA26 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FA2B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FA30 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FA35 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FA3A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FA3F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FA44 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FA49 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FA4E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FA53 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FA58 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FA5D 06                         byte_F4EF:	dc.b 6
0000FA5E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FA63 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FA68 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FA6D E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FA72 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FA77 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FA7C 06                         byte_F50E:	dc.b 6
0000FA7D E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FA82 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FA87 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FA8C E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FA91 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FA96 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FA9B 00                         byte_F52D:	dc.b 0
0000FA9C                            		even
0000FA9C                            		even
0000FA9C                            
0000FA9C                            ; ---------------------------------------------------------------------------
0000FA9C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FA9C                            ; ---------------------------------------------------------------------------
0000FA9C                            Map_obj4E:
0000FA9C                            	include "_maps\obj4E.asm"
0000FA9C                            ; ---------------------------------------------------------------------------
0000FA9C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FA9C                            ; ---------------------------------------------------------------------------
0000FA9C 0000                       		dc.w byte_F538-Map_obj4E
0000FA9E 0000                       		dc.w byte_F566-Map_obj4E
0000FAA0 0000                       		dc.w byte_F594-Map_obj4E
0000FAA2 0000                       		dc.w byte_F5C2-Map_obj4E
0000FAA4 0000                       		dc.w byte_F5F0-Map_obj4E
0000FAA6 09                         byte_F538:	dc.b 9
0000FAA7 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FAAC 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FAB1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FAB6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FABB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FAC0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FAC5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FACA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FACF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FAD4 09                         byte_F566:	dc.b 9
0000FAD5 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FADA 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FADF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FAE4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FAE9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FAEE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FAF3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FAF8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FAFD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB02 09                         byte_F594:	dc.b 9
0000FB03 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FB08 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB0D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB12 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB17 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB1C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB21 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB26 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB2B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB30 09                         byte_F5C2:	dc.b 9
0000FB31 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB36 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FB3B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB40 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB45 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB4A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB4F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB54 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB59 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB5E 08                         byte_F5F0:	dc.b 8
0000FB5F E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FB64 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB69 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB6E 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB73 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB78 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB7D E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB82 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB88 00                         		even
0000FB88 00                         		even
0000FB88                            
0000FB88                            ; ===========================================================================
0000FB88                            ; ---------------------------------------------------------------------------
0000FB88                            ; Object 40 - Moto Bug enemy (GHZ)
0000FB88                            ; ---------------------------------------------------------------------------
0000FB88                            
0000FB88                            Obj40:					; XREF: Obj_Index
0000FB88 7000                       		moveq	#0,d0
0000FB8A 1028 0024                  		move.b	$24(a0),d0
0000FB8E 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FB92 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FB96                            ; ===========================================================================
0000FB96 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FB98 0000                       		dc.w Obj40_Action-Obj40_Index
0000FB9A 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FB9C 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FB9E                            ; ===========================================================================
0000FB9E                            
0000FB9E                            Obj40_Main:				; XREF: Obj40_Index
0000FB9E 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FBA6 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FBAC 117C 0004 0001             		move.b	#4,1(a0)
0000FBB2 117C 0004 0018             		move.b	#4,$18(a0)
0000FBB8 117C 0014 0019             		move.b	#$14,$19(a0)
0000FBBE 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FBC2 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FBC4 117C 000E 0016             		move.b	#$E,$16(a0)
0000FBCA 117C 0008 0017             		move.b	#8,$17(a0)
0000FBD0 117C 000C 0020             		move.b	#$C,$20(a0)
0000FBD6 6100 DF48                  		bsr.w	ObjectFall
0000FBDA 4EB9 0000 0000             		jsr	ObjHitFloor
0000FBE0 4A41                       		tst.w	d1
0000FBE2 6A00                       		bpl.s	locret_F68A
0000FBE4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FBE8 317C 0000 0012             		move.w	#0,$12(a0)
0000FBEE 5428 0024                  		addq.b	#2,$24(a0)
0000FBF2 0868 0000 0022             		bchg	#0,$22(a0)
0000FBF8                            
0000FBF8                            locret_F68A:
0000FBF8 4E75                       		rts	
0000FBFA                            ; ===========================================================================
0000FBFA                            
0000FBFA                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FBFA 5828 0024                  		addq.b	#4,$24(a0)
0000FBFE 6000 0000                  		bra.w	Obj40_Animate
0000FC02                            ; ===========================================================================
0000FC02                            
0000FC02                            Obj40_Action:				; XREF: Obj40_Index
0000FC02 7000                       		moveq	#0,d0
0000FC04 1028 0025                  		move.b	$25(a0),d0
0000FC08 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FC0C 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FC10 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FC16 6100 B02A                  		bsr.w	AnimateSprite
0000FC1A                            
0000FC1A                            ; ---------------------------------------------------------------------------
0000FC1A                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FC1A                            ; ---------------------------------------------------------------------------
0000FC1A                            
0000FC1A                            MarkObjGone:
0000FC1A 3028 0008                  		move.w	8(a0),d0
0000FC1E 0240 FF80                  		andi.w	#$FF80,d0
0000FC22 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC26 0441 0080                  		subi.w	#$80,d1
0000FC2A 0241 FF80                  		andi.w	#$FF80,d1
0000FC2E 9041                       		sub.w	d1,d0
0000FC30 0C40 0280                  		cmpi.w	#$280,d0
0000FC34 6200 0000                  		bhi.w	Mark_ChkGone
0000FC38 6000 DF38                  		bra.w	DisplaySprite
0000FC3C                            ; ===========================================================================
0000FC3C                            
0000FC3C                            Mark_ChkGone:
0000FC3C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC40 7000                       		moveq	#0,d0
0000FC42 1028 0023                  		move.b	$23(a0),d0
0000FC46 6700                       		beq.s	Mark_Delete
0000FC48 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC4E                            
0000FC4E                            Mark_Delete:
0000FC4E 6000 DF5E                  		bra.w	DeleteObject
0000FC52                            
0000FC52                            ; ===========================================================================
0000FC52 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FC54 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FC56                            ; ===========================================================================
0000FC56                            
0000FC56                            Obj40_Move:				; XREF: Obj40_Index2
0000FC56 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FC5A 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FC5C 5428 0025                  		addq.b	#2,$25(a0)
0000FC60 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FC66 117C 0001 001C             		move.b	#1,$1C(a0)
0000FC6C 0868 0000 0022             		bchg	#0,$22(a0)
0000FC72 6600                       		bne.s	locret_F70A
0000FC74 4468 0010                  		neg.w	$10(a0)		; change direction
0000FC78                            
0000FC78                            locret_F70A:
0000FC78 4E75                       		rts	
0000FC7A                            ; ===========================================================================
0000FC7A                            
0000FC7A                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FC7A 6100 DED0                  		bsr.w	SpeedToPos
0000FC7E 4EB9 0000 0000             		jsr	ObjHitFloor
0000FC84 0C41 FFF8                  		cmpi.w	#-8,d1
0000FC88 6D00                       		blt.s	Obj40_Pause
0000FC8A 0C41 000C                  		cmpi.w	#$C,d1
0000FC8E 6C00                       		bge.s	Obj40_Pause
0000FC90 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FC94 5328 0033                  		subq.b	#1,$33(a0)
0000FC98 6A00                       		bpl.s	locret_F756
0000FC9A 117C 000F 0033             		move.b	#$F,$33(a0)
0000FCA0 6100 E356                  		bsr.w	SingleObjLoad
0000FCA4 6600                       		bne.s	locret_F756
0000FCA6 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FCAA 3368 0008 0008             		move.w	8(a0),8(a1)
0000FCB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FCB6 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FCBC 137C 0002 001C             		move.b	#2,$1C(a1)
0000FCC2                            
0000FCC2                            locret_F756:
0000FCC2 4E75                       		rts	
0000FCC4                            ; ===========================================================================
0000FCC4                            
0000FCC4                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FCC4 5528 0025                  		subq.b	#2,$25(a0)
0000FCC8 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FCCE 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FCD4 117C 0000 001C             		move.b	#0,$1C(a0)
0000FCDA 4E75                       		rts	
0000FCDC                            ; ===========================================================================
0000FCDC                            
0000FCDC                            Obj40_Animate:				; XREF: Obj40_Index
0000FCDC 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FCE2 6100 AF5E                  		bsr.w	AnimateSprite
0000FCE6 6000 DE8A                  		bra.w	DisplaySprite
0000FCEA                            ; ===========================================================================
0000FCEA                            
0000FCEA                            Obj40_Delete:				; XREF: Obj40_Index
0000FCEA 6000 DEC2                  		bra.w	DeleteObject
0000FCEE                            ; ===========================================================================
0000FCEE                            Ani_obj40:
0000FCEE                            	include "_anim\obj40.asm"
0000FCEE                            ; ---------------------------------------------------------------------------
0000FCEE                            ; Animation script - Motobug enemy
0000FCEE                            ; ---------------------------------------------------------------------------
0000FCEE 0000                       		dc.w byte_F788-Ani_obj40
0000FCF0 0000                       		dc.w byte_F78C-Ani_obj40
0000FCF2 0000                       		dc.w byte_F792-Ani_obj40
0000FCF4 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FCF8 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FCFE 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FD0C                            		even
0000FD0C                            		even
0000FD0C                            
0000FD0C                            ; ---------------------------------------------------------------------------
0000FD0C                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FD0C                            ; ---------------------------------------------------------------------------
0000FD0C                            Map_obj40:
0000FD0C                            	include "_maps\obj40.asm"
0000FD0C                            Map_cedc:
0000FD0C 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FD0E 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FD10 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FD12 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FD14 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FD16 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FD18 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FD1A 04                         Map_cedc_E: 	dc.b $4
0000FD1B F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD20 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FD25 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD2A 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FD2F 04                         Map_cedc_23: 	dc.b $4
0000FD30 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FD35 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FD3A F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FD3F 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FD44 05                         Map_cedc_38: 	dc.b $5
0000FD45 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD4A 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FD4F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD54 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FD59 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FD5E 01                         Map_cedc_52: 	dc.b $1
0000FD5F FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FD64 01                         Map_cedc_58: 	dc.b $1
0000FD65 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FD6A 01                         Map_cedc_5E: 	dc.b $1
0000FD6B FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FD70 00                         Map_cedc_64: 	dc.b $0
0000FD72 00                         	even
0000FD72 00                         	even
0000FD72                            
0000FD72                            ; ===========================================================================
0000FD72                            ; ---------------------------------------------------------------------------
0000FD72                            ; Object 4F - blank
0000FD72                            ; ---------------------------------------------------------------------------
0000FD72                            
0000FD72                            Obj4F:					; XREF: Obj_Index
0000FD72 4E75                       		rts	
0000FD74                            
0000FD74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD74                            
0000FD74                            
0000FD74                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FD74 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FD78 D047                       		add.w	d7,d0
0000FD7A 0240 0003                  		andi.w	#3,d0
0000FD7E 6600                       		bne.s	loc_F836
0000FD80 7600                       		moveq	#0,d3
0000FD82 1628 0019                  		move.b	$19(a0),d3
0000FD86 4A68 0010                  		tst.w	$10(a0)
0000FD8A 6B00                       		bmi.s	loc_F82C
0000FD8C 6100 0000                  		bsr.w	ObjHitWallRight
0000FD90 4A41                       		tst.w	d1
0000FD92 6A00                       		bpl.s	loc_F836
0000FD94                            
0000FD94                            loc_F828:
0000FD94 7001                       		moveq	#1,d0
0000FD96 4E75                       		rts	
0000FD98                            ; ===========================================================================
0000FD98                            
0000FD98                            loc_F82C:
0000FD98 4643                       		not.w	d3
0000FD9A 6100 0000                  		bsr.w	ObjHitWallLeft
0000FD9E 4A41                       		tst.w	d1
0000FDA0 6BF2                       		bmi.s	loc_F828
0000FDA2                            
0000FDA2                            loc_F836:
0000FDA2 7000                       		moveq	#0,d0
0000FDA4 4E75                       		rts	
0000FDA6                            ; End of function Obj50_ChkWall
0000FDA6                            
0000FDA6                            ; ===========================================================================
0000FDA6                            ; ---------------------------------------------------------------------------
0000FDA6                            ; Object 50 - Yadrin enemy (SYZ)
0000FDA6                            ; ---------------------------------------------------------------------------
0000FDA6                            
0000FDA6                            Obj50:					; XREF: Obj_Index
0000FDA6 7000                       		moveq	#0,d0
0000FDA8 1028 0024                  		move.b	$24(a0),d0
0000FDAC 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FDB0 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FDB4                            ; ===========================================================================
0000FDB4 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FDB6 0000                       		dc.w Obj50_Action-Obj50_Index
0000FDB8                            ; ===========================================================================
0000FDB8                            
0000FDB8                            Obj50_Main:				; XREF: Obj50_Index
0000FDB8 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FDC0 317C 247B 0002             		move.w	#$247B,2(a0)
0000FDC6 117C 0004 0001             		move.b	#4,1(a0)
0000FDCC 117C 0004 0018             		move.b	#4,$18(a0)
0000FDD2 117C 0014 0019             		move.b	#$14,$19(a0)
0000FDD8 117C 0011 0016             		move.b	#$11,$16(a0)
0000FDDE 117C 0008 0017             		move.b	#8,$17(a0)
0000FDE4 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FDEA 6100 DD34                  		bsr.w	ObjectFall
0000FDEE 6100 0000                  		bsr.w	ObjHitFloor
0000FDF2 4A41                       		tst.w	d1
0000FDF4 6A00                       		bpl.s	locret_F89E
0000FDF6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FDFA 317C 0000 0012             		move.w	#0,$12(a0)
0000FE00 5428 0024                  		addq.b	#2,$24(a0)
0000FE04 0868 0000 0022             		bchg	#0,$22(a0)
0000FE0A                            
0000FE0A                            locret_F89E:
0000FE0A 4E75                       		rts	
0000FE0C                            ; ===========================================================================
0000FE0C                            
0000FE0C                            Obj50_Action:				; XREF: Obj50_Index
0000FE0C 7000                       		moveq	#0,d0
0000FE0E 1028 0025                  		move.b	$25(a0),d0
0000FE12 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FE16 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FE1A 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FE20 6100 AE20                  		bsr.w	AnimateSprite
0000FE24 6000 FDF4                  		bra.w	MarkObjGone
0000FE28                            ; ===========================================================================
0000FE28 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FE2A 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FE2C                            ; ===========================================================================
0000FE2C                            
0000FE2C                            Obj50_Move:				; XREF: Obj50_Index2
0000FE2C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FE30 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FE32 5428 0025                  		addq.b	#2,$25(a0)
0000FE36 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FE3C 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE42 0868 0000 0022             		bchg	#0,$22(a0)
0000FE48 6600                       		bne.s	locret_F8E2
0000FE4A 4468 0010                  		neg.w	$10(a0)		; change direction
0000FE4E                            
0000FE4E                            locret_F8E2:
0000FE4E 4E75                       		rts	
0000FE50                            ; ===========================================================================
0000FE50                            
0000FE50                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FE50 6100 DCFA                  		bsr.w	SpeedToPos
0000FE54 6100 0000                  		bsr.w	ObjHitFloor
0000FE58 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE5C 6D00                       		blt.s	Obj50_Pause
0000FE5E 0C41 000C                  		cmpi.w	#$C,d1
0000FE62 6C00                       		bge.s	Obj50_Pause
0000FE64 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FE68 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FE6C 6600                       		bne.s	Obj50_Pause
0000FE6E 4E75                       		rts	
0000FE70                            ; ===========================================================================
0000FE70                            
0000FE70                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FE70 5528 0025                  		subq.b	#2,$25(a0)
0000FE74 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FE7A 317C 0000 0010             		move.w	#0,$10(a0)
0000FE80 117C 0000 001C             		move.b	#0,$1C(a0)
0000FE86 4E75                       		rts	
0000FE88                            ; ===========================================================================
0000FE88                            Ani_obj50:
0000FE88                            	include "_anim\obj50.asm"
0000FE88                            ; ---------------------------------------------------------------------------
0000FE88                            ; Animation script - Yadrin enemy
0000FE88                            ; ---------------------------------------------------------------------------
0000FE88 0000                       		dc.w byte_F920-Ani_obj50
0000FE8A 0000                       		dc.w byte_F924-Ani_obj50
0000FE8C 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FE90 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FE9A                            		even
0000FE9A                            		even
0000FE9A                            
0000FE9A                            ; ---------------------------------------------------------------------------
0000FE9A                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FE9A                            ; ---------------------------------------------------------------------------
0000FE9A                            Map_obj50:
0000FE9A                            	include "_maps\obj50.asm"
0000FE9A                            ; ---------------------------------------------------------------------------
0000FE9A                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FE9A                            ; ---------------------------------------------------------------------------
0000FE9A 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FE9E 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FEA2 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FEA6 05                         byte_F93A:	dc.b 5
0000FEA7 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FEAC FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FEB1 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FEB6 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEBB 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEC0 05                         byte_F954:	dc.b 5
0000FEC1 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FEC6 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FECB EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FED0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FED5 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEDA 05                         byte_F96E:	dc.b 5
0000FEDB F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FEE0 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FEE5 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FEEA F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEEF 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEF4 05                         byte_F988:	dc.b 5
0000FEF5 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FEFA FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FEFF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF04 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF09 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF0E 05                         byte_F9A2:	dc.b 5
0000FF0F F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FF14 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF19 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF1E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF23 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF28 05                         byte_F9BC:	dc.b 5
0000FF29 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF2E 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF33 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF38 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF3D 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF42                            		even
0000FF42                            		even
0000FF42                            
0000FF42                            ; ---------------------------------------------------------------------------
0000FF42                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FF42                            ;
0000FF42                            ; variables:
0000FF42                            ; d1 = width
0000FF42                            ; d2 = height /	2 (when	jumping)
0000FF42                            ; d3 = height /	2 (when	walking)
0000FF42                            ; d4 = x-axis position
0000FF42                            ; ---------------------------------------------------------------------------
0000FF42                            
0000FF42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF42                            
0000FF42                            
0000FF42                            SolidObject:
0000FF42 4A28 0025                  		tst.b	$25(a0)
0000FF46 6700 0000                  		beq.w	loc_FAC8
0000FF4A 3401                       		move.w	d1,d2
0000FF4C D442                       		add.w	d2,d2
0000FF4E 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF52 0829 0001 0022             		btst	#1,$22(a1)
0000FF58 6600                       		bne.s	loc_F9FE
0000FF5A 3029 0008                  		move.w	8(a1),d0
0000FF5E 9068 0008                  		sub.w	8(a0),d0
0000FF62 D041                       		add.w	d1,d0
0000FF64 6B00                       		bmi.s	loc_F9FE
0000FF66 B042                       		cmp.w	d2,d0
0000FF68 6500                       		bcs.s	loc_FA12
0000FF6A                            
0000FF6A                            loc_F9FE:
0000FF6A 08A9 0003 0022             		bclr	#3,$22(a1)
0000FF70 08A8 0003 0022             		bclr	#3,$22(a0)
0000FF76 4228 0025                  		clr.b	$25(a0)
0000FF7A 7800                       		moveq	#0,d4
0000FF7C 4E75                       		rts	
0000FF7E                            ; ===========================================================================
0000FF7E                            
0000FF7E                            loc_FA12:
0000FF7E 3404                       		move.w	d4,d2
0000FF80                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
0000FF80 7800                       		moveq	#0,d4
0000FF82 4E75                       		rts	
0000FF84                            ; ===========================================================================
0000FF84                            
0000FF84                            SolidObject71:				; XREF: Obj71_Solid
0000FF84 4A28 0025                  		tst.b	$25(a0)
0000FF88 6700 0000                  		beq.w	loc_FAD0
0000FF8C 3401                       		move.w	d1,d2
0000FF8E D442                       		add.w	d2,d2
0000FF90 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF94 0829 0001 0022             		btst	#1,$22(a1)
0000FF9A 6600                       		bne.s	loc_FA44
0000FF9C 3029 0008                  		move.w	8(a1),d0
0000FFA0 9068 0008                  		sub.w	8(a0),d0
0000FFA4 D041                       		add.w	d1,d0
0000FFA6 6B00                       		bmi.s	loc_FA44
0000FFA8 B042                       		cmp.w	d2,d0
0000FFAA 6500                       		bcs.s	loc_FA58
0000FFAC                            
0000FFAC                            loc_FA44:
0000FFAC 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFB2 08A8 0003 0022             		bclr	#3,$22(a0)
0000FFB8 4228 0025                  		clr.b	$25(a0)
0000FFBC 7800                       		moveq	#0,d4
0000FFBE 4E75                       		rts	
0000FFC0                            ; ===========================================================================
0000FFC0                            
0000FFC0                            loc_FA58:
0000FFC0 3404                       		move.w	d4,d2
0000FFC2                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0000FFC2 7800                       		moveq	#0,d4
0000FFC4 4E75                       		rts	
0000FFC6                            ; ===========================================================================
0000FFC6                            
0000FFC6                            SolidObject2F:				; XREF: Obj2F_Solid
0000FFC6 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFCA 4A28 0001                  		tst.b	1(a0)
0000FFCE 6A00 0000                  		bpl.w	loc_FB92
0000FFD2 3029 0008                  		move.w	8(a1),d0
0000FFD6 9068 0008                  		sub.w	8(a0),d0
0000FFDA D041                       		add.w	d1,d0
0000FFDC 6B00 0000                  		bmi.w	loc_FB92
0000FFE0 3601                       		move.w	d1,d3
0000FFE2 D643                       		add.w	d3,d3
0000FFE4 B043                       		cmp.w	d3,d0
0000FFE6 6200 0000                  		bhi.w	loc_FB92
0000FFEA 3A00                       		move.w	d0,d5
0000FFEC 0828 0000 0001             		btst	#0,1(a0)
0000FFF2 6700                       		beq.s	loc_FA94
0000FFF4 4645                       		not.w	d5
0000FFF6 DA43                       		add.w	d3,d5
0000FFF8                            
0000FFF8                            loc_FA94:
0000FFF8 E24D                       		lsr.w	#1,d5
0000FFFA 7600                       		moveq	#0,d3
0000FFFC 1632 5000                  		move.b	(a2,d5.w),d3
00010000 9612                       		sub.b	(a2),d3
00010002 3A28 000C                  		move.w	$C(a0),d5
00010006 9A43                       		sub.w	d3,d5
00010008 1629 0016                  		move.b	$16(a1),d3
0001000C 4883                       		ext.w	d3
0001000E D443                       		add.w	d3,d2
00010010 3629 000C                  		move.w	$C(a1),d3
00010014 9645                       		sub.w	d5,d3
00010016 5843                       		addq.w	#4,d3
00010018 D642                       		add.w	d2,d3
0001001A 6B00 0000                  		bmi.w	loc_FB92
0001001E 3802                       		move.w	d2,d4
00010020 D844                       		add.w	d4,d4
00010022 B644                       		cmp.w	d4,d3
00010024 6400 0000                  		bcc.w	loc_FB92
00010028 6000 0000                  		bra.w	loc_FB0E
0001002C                            ; ===========================================================================
0001002C                            
0001002C                            loc_FAC8:
0001002C 4A28 0001                  		tst.b	1(a0)
00010030 6A00 0000                  		bpl.w	loc_FB92
00010034                            
00010034                            loc_FAD0:
00010034 43F8 D000                  		lea	($FFFFD000).w,a1
00010038 3029 0008                  		move.w	8(a1),d0
0001003C 9068 0008                  		sub.w	8(a0),d0
00010040 D041                       		add.w	d1,d0
00010042 6B00 0000                  		bmi.w	loc_FB92
00010046 3601                       		move.w	d1,d3
00010048 D643                       		add.w	d3,d3
0001004A B043                       		cmp.w	d3,d0
0001004C 6200 0000                  		bhi.w	loc_FB92
00010050 1629 0016                  		move.b	$16(a1),d3
00010054 4883                       		ext.w	d3
00010056 D443                       		add.w	d3,d2
00010058 3629 000C                  		move.w	$C(a1),d3
0001005C 9668 000C                  		sub.w	$C(a0),d3
00010060 5843                       		addq.w	#4,d3
00010062 D642                       		add.w	d2,d3
00010064 6B00 0000                  		bmi.w	loc_FB92
00010068 3802                       		move.w	d2,d4
0001006A D844                       		add.w	d4,d4
0001006C B644                       		cmp.w	d4,d3
0001006E 6400 0000                  		bcc.w	loc_FB92
00010072                            
00010072                            loc_FB0E:
00010072 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010076 6B00 0000                  		bmi.w	loc_FB92
0001007A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010080 6400 0000                  		bcc.w	loc_FB92
00010084 4A78 FE08                  		tst.w	($FFFFFE08).w
00010088 6600 0000                  		bne.w	loc_FBAC
0001008C 3A00                       		move.w	d0,d5
0001008E B240                       		cmp.w	d0,d1
00010090 6400                       		bcc.s	loc_FB36
00010092 D241                       		add.w	d1,d1
00010094 9041                       		sub.w	d1,d0
00010096 3A00                       		move.w	d0,d5
00010098 4445                       		neg.w	d5
0001009A                            
0001009A                            loc_FB36:
0001009A 3203                       		move.w	d3,d1
0001009C B443                       		cmp.w	d3,d2
0001009E 6400                       		bcc.s	loc_FB44
000100A0 5943                       		subq.w	#4,d3
000100A2 9644                       		sub.w	d4,d3
000100A4 3203                       		move.w	d3,d1
000100A6 4441                       		neg.w	d1
000100A8                            
000100A8                            loc_FB44:
000100A8 BA41                       		cmp.w	d1,d5
000100AA 6200 0000                  		bhi.w	loc_FBB0
000100AE 0C41 0004                  		cmpi.w	#4,d1
000100B2 6300                       		bls.s	loc_FB8C
000100B4 4A40                       		tst.w	d0
000100B6 6700                       		beq.s	loc_FB70
000100B8 6B00                       		bmi.s	loc_FB5E
000100BA 4A69 0010                  		tst.w	$10(a1)
000100BE 6B00                       		bmi.s	loc_FB70
000100C0 6000                       		bra.s	loc_FB64
000100C2                            ; ===========================================================================
000100C2                            
000100C2                            loc_FB5E:
000100C2 4A69 0010                  		tst.w	$10(a1)
000100C6 6A00                       		bpl.s	loc_FB70
000100C8                            
000100C8                            loc_FB64:
000100C8 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000100CE 337C 0000 0010             		move.w	#0,$10(a1)
000100D4                            
000100D4                            loc_FB70:
000100D4 9169 0008                  		sub.w	d0,8(a1)
000100D8 0829 0001 0022             		btst	#1,$22(a1)
000100DE 6600                       		bne.s	loc_FB8C
000100E0 08E9 0005 0022             		bset	#5,$22(a1)
000100E6 08E8 0005 0022             		bset	#5,$22(a0)
000100EC 7801                       		moveq	#1,d4
000100EE 4E75                       		rts	
000100F0                            ; ===========================================================================
000100F0                            
000100F0                            loc_FB8C:
000100F0 6100                       		bsr.s	loc_FBA0
000100F2 7801                       		moveq	#1,d4
000100F4 4E75                       		rts	
000100F6                            ; ===========================================================================
000100F6                            
000100F6                            loc_FB92:
000100F6 0828 0005 0022             		btst	#5,$22(a0)
000100FC 6700                       		beq.s	loc_FBAC
000100FE 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010104                            
00010104                            loc_FBA0:
00010104 08A8 0005 0022             		bclr	#5,$22(a0)
0001010A 08A9 0005 0022             		bclr	#5,$22(a1)
00010110                            
00010110                            loc_FBAC:
00010110 7800                       		moveq	#0,d4
00010112 4E75                       		rts	
00010114                            ; ===========================================================================
00010114                            
00010114                            loc_FBB0:
00010114 4A43                       		tst.w	d3
00010116 6B00                       		bmi.s	loc_FBBC
00010118 0C43 0010                  		cmpi.w	#$10,d3
0001011C 6500                       		bcs.s	loc_FBEE
0001011E 60D6                       		bra.s	loc_FB92
00010120                            ; ===========================================================================
00010120                            
00010120                            loc_FBBC:
00010120 4A69 0012                  		tst.w	$12(a1)
00010124 6700                       		beq.s	loc_FBD6
00010126 6A00                       		bpl.s	loc_FBD2
00010128 4A43                       		tst.w	d3
0001012A 6A00                       		bpl.s	loc_FBD2
0001012C 9769 000C                  		sub.w	d3,$C(a1)
00010130 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010136                            
00010136                            loc_FBD2:
00010136 78FF                       		moveq	#-1,d4
00010138 4E75                       		rts	
0001013A                            ; ===========================================================================
0001013A                            
0001013A                            loc_FBD6:
0001013A 0829 0001 0022             		btst	#1,$22(a1)
00010140 66F4                       		bne.s	loc_FBD2
00010142 2F08                       		move.l	a0,-(sp)
00010144 2049                       		movea.l	a1,a0
00010146 4EB9 0000 0000             		jsr	KillSonic
0001014C 205F                       		movea.l	(sp)+,a0
0001014E 78FF                       		moveq	#-1,d4
00010150 4E75                       		rts	
00010152                            ; ===========================================================================
00010152                            
00010152                            loc_FBEE:
00010152 5943                       		subq.w	#4,d3
00010154 7200                       		moveq	#0,d1
00010156 1228 0019                  		move.b	$19(a0),d1
0001015A 3401                       		move.w	d1,d2
0001015C D442                       		add.w	d2,d2
0001015E D269 0008                  		add.w	8(a1),d1
00010162 9268 0008                  		sub.w	8(a0),d1
00010166 6B00                       		bmi.s	loc_FC28
00010168 B242                       		cmp.w	d2,d1
0001016A 6400                       		bcc.s	loc_FC28
0001016C 4A69 0012                  		tst.w	$12(a1)
00010170 6B00                       		bmi.s	loc_FC28
00010172 9769 000C                  		sub.w	d3,$C(a1)
00010176 5369 000C                  		subq.w	#1,$C(a1)
0001017A 6100                       		bsr.s	sub_FC2C
0001017C 117C 0002 0025             		move.b	#2,$25(a0)
00010182 08E8 0003 0022             		bset	#3,$22(a0)
00010188 78FF                       		moveq	#-1,d4
0001018A 4E75                       		rts	
0001018C                            ; ===========================================================================
0001018C                            
0001018C                            loc_FC28:
0001018C 7800                       		moveq	#0,d4
0001018E 4E75                       		rts	
00010190                            ; End of function SolidObject
00010190                            
00010190                            
00010190                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010190                            
00010190                            
00010190                            sub_FC2C:				; XREF: SolidObject
00010190 0829 0003 0022             		btst	#3,$22(a1)
00010196 6700                       		beq.s	loc_FC4E
00010198 7000                       		moveq	#0,d0
0001019A 1029 003D                  		move.b	$3D(a1),d0
0001019E ED48                       		lsl.w	#6,d0
000101A0 0680 00FF D000             		addi.l	#$FFD000,d0
000101A6 2440                       		movea.l	d0,a2
000101A8 08AA 0003 0022             		bclr	#3,$22(a2)
000101AE 422A 0025                  		clr.b	$25(a2)
000101B2                            
000101B2                            loc_FC4E:
000101B2 3008                       		move.w	a0,d0
000101B4 0440 D000                  		subi.w	#-$3000,d0
000101B8 EC48                       		lsr.w	#6,d0
000101BA 0240 007F                  		andi.w	#$7F,d0
000101BE 1340 003D                  		move.b	d0,$3D(a1)
000101C2 137C 0000 0026             		move.b	#0,$26(a1)
000101C8 337C 0000 0012             		move.w	#0,$12(a1)
000101CE 3369 0010 0014             		move.w	$10(a1),$14(a1)
000101D4 0829 0001 0022             		btst	#1,$22(a1)
000101DA 6700                       		beq.s	loc_FC84
000101DC 2F08                       		move.l	a0,-(sp)
000101DE 2049                       		movea.l	a1,a0
000101E0 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000101E6 205F                       		movea.l	(sp)+,a0
000101E8                            
000101E8                            loc_FC84:
000101E8 08E9 0003 0022             		bset	#3,$22(a1)
000101EE 08E8 0003 0022             		bset	#3,$22(a0)
000101F4 4E75                       		rts	
000101F6                            ; End of function sub_FC2C
000101F6                            
000101F6                            ; ===========================================================================
000101F6                            ; ---------------------------------------------------------------------------
000101F6                            ; Object 51 - smashable	green block (MZ)
000101F6                            ; ---------------------------------------------------------------------------
000101F6                            
000101F6                            Obj51:					; XREF: Obj_Index
000101F6 7000                       		moveq	#0,d0
000101F8 1028 0024                  		move.b	$24(a0),d0
000101FC 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010200 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010204 6000 FA14                  		bra.w	MarkObjGone
00010208                            ; ===========================================================================
00010208 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0001020A 0000                       		dc.w Obj51_Solid-Obj51_Index
0001020C 0000                       		dc.w Obj51_Display-Obj51_Index
0001020E                            ; ===========================================================================
0001020E                            
0001020E                            Obj51_Main:				; XREF: Obj51_Index
0001020E 5428 0024                  		addq.b	#2,$24(a0)
00010212 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0001021A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010220 117C 0004 0001             		move.b	#4,1(a0)
00010226 117C 0010 0019             		move.b	#$10,$19(a0)
0001022C 117C 0004 0018             		move.b	#4,$18(a0)
00010232 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010238                            
00010238                            Obj51_Solid:				; XREF: Obj51_Index
00010238 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001023E 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010244 323C 001B                  		move.w	#$1B,d1
00010248 343C 0010                  		move.w	#$10,d2
0001024C 363C 0011                  		move.w	#$11,d3
00010250 3828 0008                  		move.w	8(a0),d4
00010254 6100 FCEC                  		bsr.w	SolidObject
00010258 0828 0003 0022             		btst	#3,$22(a0)
0001025E 6600                       		bne.s	Obj51_Smash
00010260                            
00010260                            locret_FCFC:
00010260 4E75                       		rts	
00010262                            ; ===========================================================================
00010262                            
00010262                            Obj51_Smash:				; XREF: Obj51_Solid
00010262 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010268 66F6                       		bne.s	locret_FCFC	; if not, branch
0001026A 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010270 08E9 0002 0022             		bset	#2,$22(a1)
00010276 137C 000E 0016             		move.b	#$E,$16(a1)
0001027C 137C 0007 0017             		move.b	#7,$17(a1)
00010282 137C 0002 001C             		move.b	#2,$1C(a1)
00010288 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001028E 08E9 0001 0022             		bset	#1,$22(a1)
00010294 08A9 0003 0022             		bclr	#3,$22(a1)
0001029A 137C 0002 0024             		move.b	#2,$24(a1)
000102A0 08A8 0003 0022             		bclr	#3,$22(a0)
000102A6 4228 0025                  		clr.b	$25(a0)
000102AA 117C 0001 001A             		move.b	#1,$1A(a0)
000102B0 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000102B6 7203                       		moveq	#3,d1		; set number of	fragments to 4
000102B8 343C 0038                  		move.w	#$38,d2
000102BC 6100 D4A2                  		bsr.w	SmashObject
000102C0 6100 DD36                  		bsr.w	SingleObjLoad
000102C4 6600                       		bne.s	Obj51_Display
000102C6 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000102CA 3368 0008 0008             		move.w	8(a0),8(a1)
000102D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000102D6 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000102DA 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000102DE 0C42 0006                  		cmpi.w	#6,d2
000102E2 6500                       		bcs.s	Obj51_Bonus
000102E4 7406                       		moveq	#6,d2
000102E6                            
000102E6                            Obj51_Bonus:
000102E6 7000                       		moveq	#0,d0
000102E8 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000102EC 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000102F2 6500                       		bcs.s	loc_FD98	; if not, branch
000102F4 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000102F8 740A                       		moveq	#10,d2
000102FA                            
000102FA                            loc_FD98:
000102FA 4EB9 0000 0000             		jsr	AddPoints
00010300 E24A                       		lsr.w	#1,d2
00010302 1342 001A                  		move.b	d2,$1A(a1)
00010306                            
00010306                            Obj51_Display:				; XREF: Obj51_Index
00010306 6100 D844                  		bsr.w	SpeedToPos
0001030A 0668 0038 0012             		addi.w	#$38,$12(a0)
00010310 6100 D860                  		bsr.w	DisplaySprite
00010314 4A28 0001                  		tst.b	1(a0)
00010318 6A00 D894                  		bpl.w	DeleteObject
0001031C 4E75                       		rts	
0001031E                            ; ===========================================================================
0001031E FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010322 FF00 FF00                  		dc.w $FF00, $FF00
00010326 0200 FE00                  		dc.w $200, $FE00
0001032A 0100 FF00                  		dc.w $100, $FF00
0001032E                            
0001032E 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010336                            ; ---------------------------------------------------------------------------
00010336                            ; Sprite mappings - smashable green block (MZ)
00010336                            ; ---------------------------------------------------------------------------
00010336                            Map_obj51:
00010336                            	include "_maps\obj51.asm"
00010336                            ; ---------------------------------------------------------------------------
00010336                            ; Sprite mappings - smashable green block (MZ)
00010336                            ; ---------------------------------------------------------------------------
00010336 0000                       		dc.w byte_FDD8-Map_obj51
00010338 0000                       		dc.w byte_FDE3-Map_obj51
0001033A 02                         byte_FDD8:	dc.b 2
0001033B F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010340 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010345 04                         byte_FDE3:	dc.b 4
00010346 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0001034B 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010350 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010355 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0001035A                            		even
0001035A                            		even
0001035A                            
0001035A                            ; ===========================================================================
0001035A                            ; ---------------------------------------------------------------------------
0001035A                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0001035A                            ; ---------------------------------------------------------------------------
0001035A                            
0001035A                            Obj52:					; XREF: Obj_Index
0001035A 7000                       		moveq	#0,d0
0001035C 1028 0024                  		move.b	$24(a0),d0
00010360 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010364 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010368                            ; ===========================================================================
00010368 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0001036A 0000                       		dc.w Obj52_Platform-Obj52_Index
0001036C 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001036E                            
0001036E 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010370 2001                       		dc.b $20, 1
00010372 2002                       		dc.b $20, 2
00010374 4003                       		dc.b $40, 3
00010376 3004                       		dc.b $30, 4
00010378                            ; ===========================================================================
00010378                            
00010378                            Obj52_Main:				; XREF: Obj52_Index
00010378 5428 0024                  		addq.b	#2,$24(a0)
0001037C 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010384 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001038A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010390 6600                       		bne.s	loc_FE44
00010392 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0001039A 317C 43BC 0002             		move.w	#$43BC,2(a0)
000103A0 117C 0007 0016             		move.b	#7,$16(a0)
000103A6                            
000103A6                            loc_FE44:
000103A6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000103AC 6600                       		bne.s	loc_FE60
000103AE 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000103B4 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000103BA 6700                       		beq.s	loc_FE60	; if yes, branch
000103BC 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000103C2                            
000103C2                            loc_FE60:
000103C2 117C 0004 0001             		move.b	#4,1(a0)
000103C8 7000                       		moveq	#0,d0
000103CA 1028 0028                  		move.b	$28(a0),d0
000103CE E648                       		lsr.w	#3,d0
000103D0 0240 001E                  		andi.w	#$1E,d0
000103D4 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000103D8 115A 0019                  		move.b	(a2)+,$19(a0)
000103DC 115A 001A                  		move.b	(a2)+,$1A(a0)
000103E0 117C 0004 0018             		move.b	#4,$18(a0)
000103E6 3168 0008 0030             		move.w	8(a0),$30(a0)
000103EC 3168 000C 0032             		move.w	$C(a0),$32(a0)
000103F2 0228 000F 0028             		andi.b	#$F,$28(a0)
000103F8                            
000103F8                            Obj52_Platform:				; XREF: Obj52_Index
000103F8 6100 0000                  		bsr.w	Obj52_Move
000103FC 7200                       		moveq	#0,d1
000103FE 1228 0019                  		move.b	$19(a0),d1
00010402 4EB9 0000 789E             		jsr	(PlatformObject).l
00010408 6000                       		bra.s	Obj52_ChkDel
0001040A                            ; ===========================================================================
0001040A                            
0001040A                            Obj52_StandOn:				; XREF: Obj52_Index
0001040A 7200                       		moveq	#0,d1
0001040C 1228 0019                  		move.b	$19(a0),d1
00010410 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00010416 3F28 0008                  		move.w	8(a0),-(sp)
0001041A 6100 0000                  		bsr.w	Obj52_Move
0001041E 341F                       		move.w	(sp)+,d2
00010420 4EB9 0000 7F7C             		jsr	(MvSonicOnPtfm2).l
00010426                            
00010426                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010426 3028 0030                  		move.w	$30(a0),d0
0001042A 0240 FF80                  		andi.w	#$FF80,d0
0001042E 3238 F700                  		move.w	($FFFFF700).w,d1
00010432 0441 0080                  		subi.w	#$80,d1
00010436 0241 FF80                  		andi.w	#$FF80,d1
0001043A 9041                       		sub.w	d1,d0
0001043C 0C40 0280                  		cmpi.w	#$280,d0
00010440 6200 D76C                  		bhi.w	DeleteObject
00010444 6000 D72C                  		bra.w	DisplaySprite
00010448                            ; ===========================================================================
00010448                            
00010448                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010448 7000                       		moveq	#0,d0
0001044A 1028 0028                  		move.b	$28(a0),d0
0001044E 0240 000F                  		andi.w	#$F,d0
00010452 D040                       		add.w	d0,d0
00010454 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010458 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0001045C                            ; ===========================================================================
0001045C 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010460 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010464 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010468 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0001046C 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010470 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010472                            ; ===========================================================================
00010472                            
00010472                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010472 4E75                       		rts	
00010474                            ; ===========================================================================
00010474                            
00010474                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010474 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010478 323C 0060                  		move.w	#$60,d1
0001047C 0828 0000 0022             		btst	#0,$22(a0)
00010482 6700                       		beq.s	loc_FF26
00010484 4440                       		neg.w	d0
00010486 D041                       		add.w	d1,d0
00010488                            
00010488                            loc_FF26:
00010488 3228 0030                  		move.w	$30(a0),d1
0001048C 9240                       		sub.w	d0,d1
0001048E 3141 0008                  		move.w	d1,8(a0)
00010492 4E75                       		rts	
00010494                            ; ===========================================================================
00010494                            
00010494                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010494 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0001049A 6600                       		bne.s	Obj52_02_Wait
0001049C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000104A0                            
000104A0                            Obj52_02_Wait:
000104A0 4E75                       		rts	
000104A2                            ; ===========================================================================
000104A2                            
000104A2                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000104A2 7600                       		moveq	#0,d3
000104A4 1628 0019                  		move.b	$19(a0),d3
000104A8 6100 0000                  		bsr.w	ObjHitWallRight
000104AC 4A41                       		tst.w	d1		; has the platform hit a wall?
000104AE 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000104B0 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000104B4 3168 0008 0030             		move.w	8(a0),$30(a0)
000104BA 4E75                       		rts	
000104BC                            ; ===========================================================================
000104BC                            
000104BC                            Obj52_03_End:
000104BC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000104C0 4E75                       		rts	
000104C2                            ; ===========================================================================
000104C2                            
000104C2                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000104C2 7600                       		moveq	#0,d3
000104C4 1628 0019                  		move.b	$19(a0),d3
000104C8 6100 0000                  		bsr.w	ObjHitWallRight
000104CC 4A41                       		tst.w	d1		; has the platform hit a wall?
000104CE 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000104D0 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000104D4 3168 0008 0030             		move.w	8(a0),$30(a0)
000104DA 4E75                       		rts	
000104DC                            ; ===========================================================================
000104DC                            
000104DC                            Obj52_05_End:
000104DC 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000104E0 4E75                       		rts	
000104E2                            ; ===========================================================================
000104E2                            
000104E2                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000104E2 6100 D668                  		bsr.w	SpeedToPos
000104E6 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000104EC 6100 0000                  		bsr.w	ObjHitFloor
000104F0 4A41                       		tst.w	d1		; has platform hit the floor?
000104F2 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000104F6 D368 000C                  		add.w	d1,$C(a0)
000104FA 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000104FE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010502                            
00010502                            locret_FFA0:
00010502 4E75                       		rts	
00010504                            ; ===========================================================================
00010504                            
00010504                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010504 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010508 6700                       		beq.s	Obj52_07_ChkDel
0001050A 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0001050E                            
0001050E                            Obj52_07_ChkDel:
0001050E 588F                       		addq.l	#4,sp
00010510 3028 0030                  		move.w	$30(a0),d0
00010514 0240 FF80                  		andi.w	#$FF80,d0
00010518 3238 F700                  		move.w	($FFFFF700).w,d1
0001051C 0441 0080                  		subi.w	#$80,d1
00010520 0241 FF80                  		andi.w	#$FF80,d1
00010524 9041                       		sub.w	d1,d0
00010526 0C40 0280                  		cmpi.w	#$280,d0
0001052A 6200 D682                  		bhi.w	DeleteObject
0001052E 4E75                       		rts	
00010530                            ; ===========================================================================
00010530                            
00010530                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010530 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010534 323C 0080                  		move.w	#$80,d1
00010538 0828 0000 0022             		btst	#0,$22(a0)
0001053E 6700                       		beq.s	loc_FFE2
00010540 4440                       		neg.w	d0
00010542 D041                       		add.w	d1,d0
00010544                            
00010544                            loc_FFE2:
00010544 3228 0032                  		move.w	$32(a0),d1
00010548 9240                       		sub.w	d0,d1
0001054A 3141 000C                  		move.w	d1,$C(a0)
0001054E 4E75                       		rts	
00010550                            ; ===========================================================================
00010550                            
00010550                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010550 7600                       		moveq	#0,d3
00010552 1628 0019                  		move.b	$19(a0),d3
00010556 D643                       		add.w	d3,d3
00010558 7208                       		moveq	#8,d1
0001055A 0828 0000 0022             		btst	#0,$22(a0)
00010560 6700                       		beq.s	loc_10004
00010562 4441                       		neg.w	d1
00010564 4443                       		neg.w	d3
00010566                            
00010566                            loc_10004:
00010566 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0001056A 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0001056C 3028 0008                  		move.w	8(a0),d0
00010570 9068 0030                  		sub.w	$30(a0),d0
00010574 B043                       		cmp.w	d3,d0
00010576 6700                       		beq.s	Obj52_0A_Wait
00010578 D368 0008                  		add.w	d1,8(a0)	; move platform
0001057C 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010582 4E75                       		rts	
00010584                            ; ===========================================================================
00010584                            
00010584                            Obj52_0A_Wait:
00010584 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010588 6600                       		bne.s	locret_1002E	; if time remains, branch
0001058A 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010590                            
00010590                            locret_1002E:
00010590 4E75                       		rts	
00010592                            ; ===========================================================================
00010592                            
00010592                            Obj52_0A_Back:
00010592 3028 0008                  		move.w	8(a0),d0
00010596 9068 0030                  		sub.w	$30(a0),d0
0001059A 6700                       		beq.s	Obj52_0A_Reset
0001059C 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000105A0 4E75                       		rts	
000105A2                            ; ===========================================================================
000105A2                            
000105A2                            Obj52_0A_Reset:
000105A2 4268 0036                  		clr.w	$36(a0)
000105A6 5328 0028                  		subq.b	#1,$28(a0)
000105AA 4E75                       		rts	
000105AC                            ; ===========================================================================
000105AC                            ; ---------------------------------------------------------------------------
000105AC                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105AC                            ; ---------------------------------------------------------------------------
000105AC                            Map_obj52:
000105AC                            	include "_maps\obj52mz.asm"
000105AC                            ; ---------------------------------------------------------------------------
000105AC                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105AC                            ; ---------------------------------------------------------------------------
000105AC 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000105B0 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000105B4 0000                       		dc.w byte_1008F-Map_obj52
000105B6 01                         byte_10054:	dc.b 1
000105B7 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000105BC 02                         byte_1005A:	dc.b 2
000105BD F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000105C2 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000105C7 04                         byte_10065:	dc.b 4
000105C8 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000105CD 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000105D2 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000105D7 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000105DC 04                         byte_1007A:	dc.b 4
000105DD F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000105E2 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000105E7 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000105EC F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000105F1 03                         byte_1008F:	dc.b 3
000105F2 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000105F7 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000105FC F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010602 00                         		even
00010602 00                         		even
00010602                            
00010602                            ; ---------------------------------------------------------------------------
00010602                            ; Sprite mappings - moving block (LZ)
00010602                            ; ---------------------------------------------------------------------------
00010602                            Map_obj52a:
00010602                            	include "_maps\obj52lz.asm"
00010602                            ; ---------------------------------------------------------------------------
00010602                            ; Sprite mappings - moving block (LZ)
00010602                            ; ---------------------------------------------------------------------------
00010602 0000                       		dc.w byte_100A2-Map_obj52a
00010604 01                         byte_100A2:	dc.b 1
00010605 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001060A                            		even
0001060A                            		even
0001060A                            
0001060A                            ; ===========================================================================
0001060A                            ; ---------------------------------------------------------------------------
0001060A                            ; Object 55 - Basaran enemy (MZ)
0001060A                            ; ---------------------------------------------------------------------------
0001060A                            
0001060A                            Obj55:					; XREF: Obj_Index
0001060A 7000                       		moveq	#0,d0
0001060C 1028 0024                  		move.b	$24(a0),d0
00010610 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010614 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010618                            ; ===========================================================================
00010618 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0001061A 0000                       		dc.w Obj55_Action-Obj55_Index
0001061C                            ; ===========================================================================
0001061C                            
0001061C                            Obj55_Main:				; XREF: Obj55_Index
0001061C 5428 0024                  		addq.b	#2,$24(a0)
00010620 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010628 317C 84B8 0002             		move.w	#$84B8,2(a0)
0001062E 117C 0004 0001             		move.b	#4,1(a0)
00010634 117C 000C 0016             		move.b	#$C,$16(a0)
0001063A 117C 0002 0018             		move.b	#2,$18(a0)
00010640 117C 000B 0020             		move.b	#$B,$20(a0)
00010646 117C 0010 0019             		move.b	#$10,$19(a0)
0001064C                            
0001064C                            Obj55_Action:				; XREF: Obj55_Index
0001064C 7000                       		moveq	#0,d0
0001064E 1028 0025                  		move.b	$25(a0),d0
00010652 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010656 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
0001065A 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010660 6100 A5E0                  		bsr.w	AnimateSprite
00010664 6000 F5B4                  		bra.w	MarkObjGone
00010668                            ; ===========================================================================
00010668 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
0001066A 0000                       		dc.w Obj55_DropFly-Obj55_Index2
0001066C 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
0001066E 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010670                            ; ===========================================================================
00010670                            
00010670                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010670 343C 0080                  		move.w	#$80,d2
00010674 6100 0000                  		bsr.w	Obj55_ChkSonic
00010678 6400                       		bcc.s	Obj55_NoDrop
0001067A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001067E 3140 0036                  		move.w	d0,$36(a0)
00010682 9068 000C                  		sub.w	$C(a0),d0
00010686 6500                       		bcs.s	Obj55_NoDrop
00010688 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
0001068C 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
0001068E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010692 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010694 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010698 D007                       		add.b	d7,d0
0001069A 0200 0007                  		andi.b	#7,d0
0001069E 6600                       		bne.s	Obj55_NoDrop
000106A0 117C 0001 001C             		move.b	#1,$1C(a0)
000106A6 5428 0025                  		addq.b	#2,$25(a0)
000106AA                            
000106AA                            Obj55_NoDrop:
000106AA 4E75                       		rts	
000106AC                            ; ===========================================================================
000106AC                            
000106AC                            Obj55_DropFly:				; XREF: Obj55_Index2
000106AC 6100 D49E                  		bsr.w	SpeedToPos
000106B0 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000106B6 343C 0080                  		move.w	#$80,d2
000106BA 6100 0000                  		bsr.w	Obj55_ChkSonic
000106BE 3028 0036                  		move.w	$36(a0),d0
000106C2 9068 000C                  		sub.w	$C(a0),d0
000106C6 6500                       		bcs.s	Obj55_ChkDel
000106C8 0C40 0010                  		cmpi.w	#$10,d0
000106CC 6400                       		bcc.s	locret_10180
000106CE 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000106D2 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000106D8 117C 0002 001C             		move.b	#2,$1C(a0)
000106DE 5428 0025                  		addq.b	#2,$25(a0)
000106E2                            
000106E2                            locret_10180:
000106E2 4E75                       		rts	
000106E4                            ; ===========================================================================
000106E4                            
000106E4                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000106E4 4A28 0001                  		tst.b	1(a0)
000106E8 6A00 D4C4                  		bpl.w	DeleteObject
000106EC 4E75                       		rts	
000106EE                            ; ===========================================================================
000106EE                            
000106EE                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000106EE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000106F2 0200 000F                  		andi.b	#$F,d0
000106F6 6600                       		bne.s	loc_101A0
000106F8 303C 00C0                  		move.w	#$C0,d0
000106FC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flapping sound
00010702                            
00010702                            loc_101A0:
00010702 6100 D448                  		bsr.w	SpeedToPos
00010706 3038 D008                  		move.w	($FFFFD008).w,d0
0001070A 9068 0008                  		sub.w	8(a0),d0
0001070E 6400                       		bcc.s	loc_101B0
00010710 4440                       		neg.w	d0
00010712                            
00010712                            loc_101B0:
00010712 0C40 0080                  		cmpi.w	#$80,d0
00010716 6500                       		bcs.s	locret_101C6
00010718 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001071C D007                       		add.b	d7,d0
0001071E 0200 0007                  		andi.b	#7,d0
00010722 6600                       		bne.s	locret_101C6
00010724 5428 0025                  		addq.b	#2,$25(a0)
00010728                            
00010728                            locret_101C6:
00010728 4E75                       		rts	
0001072A                            ; ===========================================================================
0001072A                            
0001072A                            Obj55_FlyUp:				; XREF: Obj55_Index2
0001072A 6100 D420                  		bsr.w	SpeedToPos
0001072E 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010734 6100 0000                  		bsr.w	ObjHitCeiling
00010738 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001073A 6A00                       		bpl.s	locret_101F4	; if not, branch
0001073C 9368 000C                  		sub.w	d1,$C(a0)
00010740 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010746 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
0001074A 4268 0012                  		clr.w	$12(a0)
0001074E 4228 001C                  		clr.b	$1C(a0)
00010752 4228 0025                  		clr.b	$25(a0)
00010756                            
00010756                            locret_101F4:
00010756 4E75                       		rts	
00010758                            ; ===========================================================================
00010758                            
00010758                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010758 323C 0100                  		move.w	#$100,d1
0001075C 08E8 0000 0022             		bset	#0,$22(a0)
00010762 3038 D008                  		move.w	($FFFFD008).w,d0
00010766 9068 0008                  		sub.w	8(a0),d0
0001076A 6400                       		bcc.s	loc_10214
0001076C 4440                       		neg.w	d0
0001076E 4441                       		neg.w	d1
00010770 08A8 0000 0022             		bclr	#0,$22(a0)
00010776                            
00010776                            loc_10214:
00010776 B042                       		cmp.w	d2,d0
00010778 4E75                       		rts	
0001077A                            ; ===========================================================================
0001077A 6100 D3D0                  		bsr.w	SpeedToPos
0001077E 6100 D3F2                  		bsr.w	DisplaySprite
00010782 4A28 0001                  		tst.b	1(a0)
00010786 6A00 D426                  		bpl.w	DeleteObject
0001078A 4E75                       		rts	
0001078C                            ; ===========================================================================
0001078C                            Ani_obj55:
0001078C                            	include "_anim\obj55.asm"
0001078C                            ; ---------------------------------------------------------------------------
0001078C                            ; Animation script - Basaran enemy
0001078C                            ; ---------------------------------------------------------------------------
0001078C 0000                       		dc.w byte_10230-Ani_obj55
0001078E 0000                       		dc.w byte_10234-Ani_obj55
00010790 0000                       		dc.w byte_10238-Ani_obj55
00010792 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010796 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
0001079A 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000107A0                            		even
000107A0                            		even
000107A0                            
000107A0                            ; ---------------------------------------------------------------------------
000107A0                            ; Sprite mappings - Basaran enemy (MZ)
000107A0                            ; ---------------------------------------------------------------------------
000107A0                            Map_obj55:
000107A0                            	include "_maps\obj55.asm"
000107A0                            ; ---------------------------------------------------------------------------
000107A0                            ; Sprite mappings - Basaran enemy (MZ)
000107A0                            ; ---------------------------------------------------------------------------
000107A0 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000107A4 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000107A8 01                         byte_10246:	dc.b 1
000107A9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000107AE 03                         byte_1024C:	dc.b 3
000107AF F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000107B4 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000107B9 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000107BE 04                         byte_1025C:	dc.b 4
000107BF F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000107C4 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000107C9 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000107CE 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000107D3 04                         byte_10271:	dc.b 4
000107D4 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000107D9 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000107DE 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000107E3 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000107E8                            		even
000107E8                            		even
000107E8                            
000107E8                            ; ===========================================================================
000107E8                            ; ---------------------------------------------------------------------------
000107E8                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000107E8                            ; ---------------------------------------------------------------------------
000107E8                            
000107E8                            Obj56:					; XREF: Obj_Index
000107E8 7000                       		moveq	#0,d0
000107EA 1028 0024                  		move.b	$24(a0),d0
000107EE 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000107F2 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000107F6                            ; ===========================================================================
000107F6 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000107F8 0000                       		dc.w Obj56_Action-Obj56_Index
000107FA                            
000107FA 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000107FC 2020                       		dc.b  $20, $20
000107FE 1020                       		dc.b  $10, $20
00010800 201A                       		dc.b  $20, $1A
00010802 1027                       		dc.b  $10, $27
00010804 1010                       		dc.b  $10, $10
00010806 0820                       		dc.b	8, $20
00010808 4010                       		dc.b  $40, $10
0001080A                            ; ===========================================================================
0001080A                            
0001080A                            Obj56_Main:				; XREF: Obj56_Index
0001080A 5428 0024                  		addq.b	#2,$24(a0)
0001080E 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010816 317C 4000 0002             		move.w	#$4000,2(a0)
0001081C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010822 6600                       		bne.s	loc_102C8
00010824 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
0001082A                            
0001082A                            loc_102C8:
0001082A 117C 0004 0001             		move.b	#4,1(a0)
00010830 117C 0003 0018             		move.b	#3,$18(a0)
00010836 7000                       		moveq	#0,d0
00010838 1028 0028                  		move.b	$28(a0),d0
0001083C E648                       		lsr.w	#3,d0
0001083E 0240 000E                  		andi.w	#$E,d0
00010842 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010846 115A 0019                  		move.b	(a2)+,$19(a0)
0001084A 1152 0016                  		move.b	(a2),$16(a0)
0001084E E248                       		lsr.w	#1,d0
00010850 1140 001A                  		move.b	d0,$1A(a0)
00010854 3168 0008 0034             		move.w	8(a0),$34(a0)
0001085A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010860 7000                       		moveq	#0,d0
00010862 1012                       		move.b	(a2),d0
00010864 D040                       		add.w	d0,d0
00010866 3140 003A                  		move.w	d0,$3A(a0)
0001086A 7000                       		moveq	#0,d0
0001086C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010872 6700                       		beq.s	loc_10332
00010874 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010878 0240 000F                  		andi.w	#$F,d0
0001087C 5140                       		subq.w	#8,d0
0001087E 6500                       		bcs.s	loc_10332
00010880 E548                       		lsl.w	#2,d0
00010882 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010886 45F2 0000                  		lea	(a2,d0.w),a2
0001088A 4A52                       		tst.w	(a2)
0001088C 6A00                       		bpl.s	loc_10332
0001088E 0868 0000 0022             		bchg	#0,$22(a0)
00010894                            
00010894                            loc_10332:
00010894 1028 0028                  		move.b	$28(a0),d0
00010898 6A00                       		bpl.s	Obj56_Action
0001089A 0200 000F                  		andi.b	#$F,d0
0001089E 1140 003C                  		move.b	d0,$3C(a0)
000108A2 117C 0005 0028             		move.b	#5,$28(a0)
000108A8 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000108AE 6600                       		bne.s	Obj56_ChkGone
000108B0 117C 000C 0028             		move.b	#$C,$28(a0)
000108B6 317C 0080 003A             		move.w	#$80,$3A(a0)
000108BC                            
000108BC                            Obj56_ChkGone:
000108BC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000108C0 7000                       		moveq	#0,d0
000108C2 1028 0023                  		move.b	$23(a0),d0
000108C6 6700                       		beq.s	Obj56_Action
000108C8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000108CE 0832 0000 0002             		btst	#0,2(a2,d0.w)
000108D4 6700                       		beq.s	Obj56_Action
000108D6 5228 0028                  		addq.b	#1,$28(a0)
000108DA 4268 003A                  		clr.w	$3A(a0)
000108DE                            
000108DE                            Obj56_Action:				; XREF: Obj56_Index
000108DE 3F28 0008                  		move.w	8(a0),-(sp)
000108E2 7000                       		moveq	#0,d0
000108E4 1028 0028                  		move.b	$28(a0),d0	; get object type
000108E8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000108EC D040                       		add.w	d0,d0
000108EE 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000108F2 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000108F6 381F                       		move.w	(sp)+,d4
000108F8 4A28 0001                  		tst.b	1(a0)
000108FC 6A00                       		bpl.s	Obj56_ChkDel
000108FE 7200                       		moveq	#0,d1
00010900 1228 0019                  		move.b	$19(a0),d1
00010904 0641 000B                  		addi.w	#$B,d1
00010908 7400                       		moveq	#0,d2
0001090A 1428 0016                  		move.b	$16(a0),d2
0001090E 3602                       		move.w	d2,d3
00010910 5243                       		addq.w	#1,d3
00010912 6100 F62E                  		bsr.w	SolidObject
00010916                            
00010916                            Obj56_ChkDel:
00010916 3028 0034                  		move.w	$34(a0),d0
0001091A 0240 FF80                  		andi.w	#$FF80,d0
0001091E 3238 F700                  		move.w	($FFFFF700).w,d1
00010922 0441 0080                  		subi.w	#$80,d1
00010926 0241 FF80                  		andi.w	#$FF80,d1
0001092A 9041                       		sub.w	d1,d0
0001092C 0C40 0280                  		cmpi.w	#$280,d0
00010930 6200 D27C                  		bhi.w	DeleteObject
00010934 6000 D23C                  		bra.w	DisplaySprite
00010938                            ; ===========================================================================
00010938 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
0001093C 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010940 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010944 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010948 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
0001094C 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010950 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010954                            ; ===========================================================================
00010954                            
00010954                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010954 4E75                       		rts	
00010956                            ; ===========================================================================
00010956                            
00010956                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010956 323C 0040                  		move.w	#$40,d1
0001095A 7000                       		moveq	#0,d0
0001095C 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010960 6000                       		bra.s	Obj56_Move_LR
00010962                            ; ===========================================================================
00010962                            
00010962                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010962 323C 0080                  		move.w	#$80,d1
00010966 7000                       		moveq	#0,d0
00010968 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001096C                            
0001096C                            Obj56_Move_LR:
0001096C 0828 0000 0022             		btst	#0,$22(a0)
00010972 6700                       		beq.s	loc_10416
00010974 4440                       		neg.w	d0
00010976 D041                       		add.w	d1,d0
00010978                            
00010978                            loc_10416:
00010978 3228 0034                  		move.w	$34(a0),d1
0001097C 9240                       		sub.w	d0,d1
0001097E 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010982 4E75                       		rts	
00010984                            ; ===========================================================================
00010984                            
00010984                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010984 323C 0040                  		move.w	#$40,d1
00010988 7000                       		moveq	#0,d0
0001098A 1038 FE68                  		move.b	($FFFFFE68).w,d0
0001098E 6000                       		bra.s	Obj56_Move_UD
00010990                            ; ===========================================================================
00010990                            
00010990                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010990 323C 0080                  		move.w	#$80,d1
00010994 7000                       		moveq	#0,d0
00010996 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001099A                            
0001099A                            Obj56_Move_UD:
0001099A 0828 0000 0022             		btst	#0,$22(a0)
000109A0 6700                       		beq.s	loc_10444
000109A2 4440                       		neg.w	d0
000109A4 D041                       		add.w	d1,d0
000109A6                            
000109A6                            loc_10444:
000109A6 3228 0030                  		move.w	$30(a0),d1
000109AA 9240                       		sub.w	d0,d1
000109AC 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000109B0 4E75                       		rts	
000109B2                            ; ===========================================================================
000109B2                            
000109B2                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000109B2 4A28 0038                  		tst.b	$38(a0)
000109B6 6600                       		bne.s	loc_104A4
000109B8 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000109BE 6600                       		bne.s	loc_1047A	; if not, branch
000109C0 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000109C6 6600                       		bne.s	loc_1047A
000109C8 4238 F7C9                  		clr.b	($FFFFF7C9).w
000109CC 3038 D008                  		move.w	($FFFFD008).w,d0
000109D0 B068 0008                  		cmp.w	8(a0),d0
000109D4 6400                       		bcc.s	loc_1047A
000109D6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000109DC                            
000109DC                            loc_1047A:
000109DC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000109E0 7000                       		moveq	#0,d0
000109E2 1028 003C                  		move.b	$3C(a0),d0
000109E6 0832 0000 0000             		btst	#0,(a2,d0.w)
000109EC 6700                       		beq.s	loc_104AE
000109EE 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000109F4 6600                       		bne.s	loc_1049E	; if not, branch
000109F6 0C00 0003                  		cmpi.b	#3,d0
000109FA 6600                       		bne.s	loc_1049E
000109FC 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A00                            
00010A00                            loc_1049E:
00010A00 117C 0001 0038             		move.b	#1,$38(a0)
00010A06                            
00010A06                            loc_104A4:
00010A06 4A68 003A                  		tst.w	$3A(a0)
00010A0A 6700                       		beq.s	loc_104C8
00010A0C 5568 003A                  		subq.w	#2,$3A(a0)
00010A10                            
00010A10                            loc_104AE:
00010A10 3028 003A                  		move.w	$3A(a0),d0
00010A14 0828 0000 0022             		btst	#0,$22(a0)
00010A1A 6700                       		beq.s	loc_104BC
00010A1C 4440                       		neg.w	d0
00010A1E                            
00010A1E                            loc_104BC:
00010A1E 3228 0030                  		move.w	$30(a0),d1
00010A22 D240                       		add.w	d0,d1
00010A24 3141 000C                  		move.w	d1,$C(a0)
00010A28 4E75                       		rts	
00010A2A                            ; ===========================================================================
00010A2A                            
00010A2A                            loc_104C8:
00010A2A 5228 0028                  		addq.b	#1,$28(a0)
00010A2E 4228 0038                  		clr.b	$38(a0)
00010A32 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A36 7000                       		moveq	#0,d0
00010A38 1028 0023                  		move.b	$23(a0),d0
00010A3C 67D2                       		beq.s	loc_104AE
00010A3E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010A44 60CA                       		bra.s	loc_104AE
00010A46                            ; ===========================================================================
00010A46                            
00010A46                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010A46 4A28 0038                  		tst.b	$38(a0)
00010A4A 6600                       		bne.s	loc_10500
00010A4C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A50 7000                       		moveq	#0,d0
00010A52 1028 003C                  		move.b	$3C(a0),d0
00010A56 4A32 0000                  		tst.b	(a2,d0.w)
00010A5A 6A00                       		bpl.s	loc_10512
00010A5C 117C 0001 0038             		move.b	#1,$38(a0)
00010A62                            
00010A62                            loc_10500:
00010A62 7000                       		moveq	#0,d0
00010A64 1028 0016                  		move.b	$16(a0),d0
00010A68 D040                       		add.w	d0,d0
00010A6A B068 003A                  		cmp.w	$3A(a0),d0
00010A6E 6700                       		beq.s	loc_1052C
00010A70 5468 003A                  		addq.w	#2,$3A(a0)
00010A74                            
00010A74                            loc_10512:
00010A74 3028 003A                  		move.w	$3A(a0),d0
00010A78 0828 0000 0022             		btst	#0,$22(a0)
00010A7E 6700                       		beq.s	loc_10520
00010A80 4440                       		neg.w	d0
00010A82                            
00010A82                            loc_10520:
00010A82 3228 0030                  		move.w	$30(a0),d1
00010A86 D240                       		add.w	d0,d1
00010A88 3141 000C                  		move.w	d1,$C(a0)
00010A8C 4E75                       		rts	
00010A8E                            ; ===========================================================================
00010A8E                            
00010A8E                            loc_1052C:
00010A8E 5328 0028                  		subq.b	#1,$28(a0)
00010A92 4228 0038                  		clr.b	$38(a0)
00010A96 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A9A 7000                       		moveq	#0,d0
00010A9C 1028 0023                  		move.b	$23(a0),d0
00010AA0 67D2                       		beq.s	loc_10512
00010AA2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010AA8 60CA                       		bra.s	loc_10512
00010AAA                            ; ===========================================================================
00010AAA                            
00010AAA                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010AAA 4A28 0038                  		tst.b	$38(a0)
00010AAE 6600                       		bne.s	loc_1055E
00010AB0 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010AB4 6700                       		beq.s	locret_10578
00010AB6 117C 0001 0038             		move.b	#1,$38(a0)
00010ABC 4268 003A                  		clr.w	$3A(a0)
00010AC0                            
00010AC0                            loc_1055E:
00010AC0 5268 0008                  		addq.w	#1,8(a0)
00010AC4 3168 0008 0034             		move.w	8(a0),$34(a0)
00010ACA 5268 003A                  		addq.w	#1,$3A(a0)
00010ACE 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010AD4 6600                       		bne.s	locret_10578
00010AD6 4228 0028                  		clr.b	$28(a0)
00010ADA                            
00010ADA                            locret_10578:
00010ADA 4E75                       		rts	
00010ADC                            ; ===========================================================================
00010ADC                            
00010ADC                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010ADC 4A28 0038                  		tst.b	$38(a0)
00010AE0 6600                       		bne.s	loc_10598
00010AE2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010AE6 7000                       		moveq	#0,d0
00010AE8 1028 003C                  		move.b	$3C(a0),d0
00010AEC 0832 0000 0000             		btst	#0,(a2,d0.w)
00010AF2 6700                       		beq.s	loc_105A2
00010AF4 117C 0001 0038             		move.b	#1,$38(a0)
00010AFA                            
00010AFA                            loc_10598:
00010AFA 4A68 003A                  		tst.w	$3A(a0)
00010AFE 6700                       		beq.s	loc_105C0
00010B00 5568 003A                  		subq.w	#2,$3A(a0)
00010B04                            
00010B04                            loc_105A2:
00010B04 3028 003A                  		move.w	$3A(a0),d0
00010B08 0828 0000 0022             		btst	#0,$22(a0)
00010B0E 6700                       		beq.s	loc_105B4
00010B10 4440                       		neg.w	d0
00010B12 0640 0080                  		addi.w	#$80,d0
00010B16                            
00010B16                            loc_105B4:
00010B16 3228 0034                  		move.w	$34(a0),d1
00010B1A D240                       		add.w	d0,d1
00010B1C 3141 0008                  		move.w	d1,8(a0)
00010B20 4E75                       		rts	
00010B22                            ; ===========================================================================
00010B22                            
00010B22                            loc_105C0:
00010B22 5228 0028                  		addq.b	#1,$28(a0)
00010B26 4228 0038                  		clr.b	$38(a0)
00010B2A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B2E 7000                       		moveq	#0,d0
00010B30 1028 0023                  		move.b	$23(a0),d0
00010B34 67CE                       		beq.s	loc_105A2
00010B36 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010B3C 60C6                       		bra.s	loc_105A2
00010B3E                            ; ===========================================================================
00010B3E                            
00010B3E                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010B3E 4A28 0038                  		tst.b	$38(a0)
00010B42 6600                       		bne.s	loc_105F8
00010B44 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B48 7000                       		moveq	#0,d0
00010B4A 1028 003C                  		move.b	$3C(a0),d0
00010B4E 4A32 0000                  		tst.b	(a2,d0.w)
00010B52 6A00                       		bpl.s	loc_10606
00010B54 117C 0001 0038             		move.b	#1,$38(a0)
00010B5A                            
00010B5A                            loc_105F8:
00010B5A 303C 0080                  		move.w	#$80,d0
00010B5E B068 003A                  		cmp.w	$3A(a0),d0
00010B62 6700                       		beq.s	loc_10624
00010B64 5468 003A                  		addq.w	#2,$3A(a0)
00010B68                            
00010B68                            loc_10606:
00010B68 3028 003A                  		move.w	$3A(a0),d0
00010B6C 0828 0000 0022             		btst	#0,$22(a0)
00010B72 6700                       		beq.s	loc_10618
00010B74 4440                       		neg.w	d0
00010B76 0640 0080                  		addi.w	#$80,d0
00010B7A                            
00010B7A                            loc_10618:
00010B7A 3228 0034                  		move.w	$34(a0),d1
00010B7E D240                       		add.w	d0,d1
00010B80 3141 0008                  		move.w	d1,8(a0)
00010B84 4E75                       		rts	
00010B86                            ; ===========================================================================
00010B86                            
00010B86                            loc_10624:
00010B86 5328 0028                  		subq.b	#1,$28(a0)
00010B8A 4228 0038                  		clr.b	$38(a0)
00010B8E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B92 7000                       		moveq	#0,d0
00010B94 1028 0023                  		move.b	$23(a0),d0
00010B98 67CE                       		beq.s	loc_10606
00010B9A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010BA0 60C6                       		bra.s	loc_10606
00010BA2                            ; ===========================================================================
00010BA2                            
00010BA2                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010BA2 323C 0010                  		move.w	#$10,d1
00010BA6 7000                       		moveq	#0,d0
00010BA8 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010BAC E248                       		lsr.w	#1,d0
00010BAE 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010BB2 6000                       		bra.s	Obj56_Move_Sqr
00010BB4                            ; ===========================================================================
00010BB4                            
00010BB4                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010BB4 323C 0030                  		move.w	#$30,d1
00010BB8 7000                       		moveq	#0,d0
00010BBA 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010BBE 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010BC2 6000                       		bra.s	Obj56_Move_Sqr
00010BC4                            ; ===========================================================================
00010BC4                            
00010BC4                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010BC4 323C 0050                  		move.w	#$50,d1
00010BC8 7000                       		moveq	#0,d0
00010BCA 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010BCE 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010BD2 6000                       		bra.s	Obj56_Move_Sqr
00010BD4                            ; ===========================================================================
00010BD4                            
00010BD4                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010BD4 323C 0070                  		move.w	#$70,d1
00010BD8 7000                       		moveq	#0,d0
00010BDA 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010BDE 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010BE2                            
00010BE2                            Obj56_Move_Sqr:
00010BE2 4A43                       		tst.w	d3
00010BE4 6600                       		bne.s	loc_1068E
00010BE6 5228 0022                  		addq.b	#1,$22(a0)
00010BEA 0228 0003 0022             		andi.b	#3,$22(a0)
00010BF0                            
00010BF0                            loc_1068E:
00010BF0 1428 0022                  		move.b	$22(a0),d2
00010BF4 0202 0003                  		andi.b	#3,d2
00010BF8 6600                       		bne.s	loc_106AE
00010BFA 9041                       		sub.w	d1,d0
00010BFC D068 0034                  		add.w	$34(a0),d0
00010C00 3140 0008                  		move.w	d0,8(a0)
00010C04 4441                       		neg.w	d1
00010C06 D268 0030                  		add.w	$30(a0),d1
00010C0A 3141 000C                  		move.w	d1,$C(a0)
00010C0E 4E75                       		rts	
00010C10                            ; ===========================================================================
00010C10                            
00010C10                            loc_106AE:
00010C10 5302                       		subq.b	#1,d2
00010C12 6600                       		bne.s	loc_106CC
00010C14 5341                       		subq.w	#1,d1
00010C16 9041                       		sub.w	d1,d0
00010C18 4440                       		neg.w	d0
00010C1A D068 0030                  		add.w	$30(a0),d0
00010C1E 3140 000C                  		move.w	d0,$C(a0)
00010C22 5241                       		addq.w	#1,d1
00010C24 D268 0034                  		add.w	$34(a0),d1
00010C28 3141 0008                  		move.w	d1,8(a0)
00010C2C 4E75                       		rts	
00010C2E                            ; ===========================================================================
00010C2E                            
00010C2E                            loc_106CC:
00010C2E 5302                       		subq.b	#1,d2
00010C30 6600                       		bne.s	loc_106EA
00010C32 5341                       		subq.w	#1,d1
00010C34 9041                       		sub.w	d1,d0
00010C36 4440                       		neg.w	d0
00010C38 D068 0034                  		add.w	$34(a0),d0
00010C3C 3140 0008                  		move.w	d0,8(a0)
00010C40 5241                       		addq.w	#1,d1
00010C42 D268 0030                  		add.w	$30(a0),d1
00010C46 3141 000C                  		move.w	d1,$C(a0)
00010C4A 4E75                       		rts	
00010C4C                            ; ===========================================================================
00010C4C                            
00010C4C                            loc_106EA:
00010C4C 9041                       		sub.w	d1,d0
00010C4E D068 0030                  		add.w	$30(a0),d0
00010C52 3140 000C                  		move.w	d0,$C(a0)
00010C56 4441                       		neg.w	d1
00010C58 D268 0034                  		add.w	$34(a0),d1
00010C5C 3141 0008                  		move.w	d1,8(a0)
00010C60 4E75                       		rts	
00010C62                            ; ===========================================================================
00010C62                            ; ---------------------------------------------------------------------------
00010C62                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C62                            ; ---------------------------------------------------------------------------
00010C62                            Map_obj56:
00010C62                            	include "_maps\obj56.asm"
00010C62                            ; ---------------------------------------------------------------------------
00010C62                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C62                            ; ---------------------------------------------------------------------------
00010C62 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010C66 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010C6A 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010C6E 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010C72 01                         byte_10710:	dc.b 1
00010C73 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010C78 04                         byte_10716:	dc.b 4
00010C79 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010C7E E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010C83 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010C88 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010C8D 02                         byte_1072B:	dc.b 2
00010C8E E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010C93 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010C98 04                         byte_10736:	dc.b 4
00010C99 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010C9E E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010CA3 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010CA8 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010CAD 03                         byte_1074B:	dc.b 3
00010CAE D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010CB3 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010CB8 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010CBD 01                         byte_1075B:	dc.b 1
00010CBE F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010CC3 02                         byte_10761:	dc.b 2
00010CC4 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010CC9 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010CCE 04                         byte_1076C:	dc.b 4
00010CCF F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010CD4 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010CD9 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010CDE F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010CE4 00                         		even
00010CE4 00                         		even
00010CE4                            
00010CE4                            ; ===========================================================================
00010CE4                            ; ---------------------------------------------------------------------------
00010CE4                            ; Object 57 - spiked balls (SYZ, LZ)
00010CE4                            ; ---------------------------------------------------------------------------
00010CE4                            
00010CE4                            Obj57:					; XREF: Obj_Index
00010CE4 7000                       		moveq	#0,d0
00010CE6 1028 0024                  		move.b	$24(a0),d0
00010CEA 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010CEE 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010CF2                            ; ===========================================================================
00010CF2 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010CF4 0000                       		dc.w Obj57_Move-Obj57_Index
00010CF6 0000                       		dc.w Obj57_Display-Obj57_Index
00010CF8                            ; ===========================================================================
00010CF8                            
00010CF8                            Obj57_Main:				; XREF: Obj57_Index
00010CF8 5428 0024                  		addq.b	#2,$24(a0)
00010CFC 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010D04 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010D0A 117C 0004 0001             		move.b	#4,1(a0)
00010D10 117C 0004 0018             		move.b	#4,$18(a0)
00010D16 117C 0008 0019             		move.b	#8,$19(a0)
00010D1C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010D22 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010D28 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010D2E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D34 6600                       		bne.s	loc_107E8
00010D36 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010D3C 317C 0310 0002             		move.w	#$310,2(a0)
00010D42 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010D4A                            
00010D4A                            loc_107E8:
00010D4A 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D4E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010D52 4881                       		ext.w	d1
00010D54 E741                       		asl.w	#3,d1		; multiply by 8
00010D56 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010D5A 1028 0022                  		move.b	$22(a0),d0
00010D5E E418                       		ror.b	#2,d0
00010D60 0200 00C0                  		andi.b	#-$40,d0
00010D64 1140 0026                  		move.b	d0,$26(a0)
00010D68 45E8 0029                  		lea	$29(a0),a2
00010D6C 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D70 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010D74 14FC 0000                  		move.b	#0,(a2)+
00010D78 3601                       		move.w	d1,d3
00010D7A E94B                       		lsl.w	#4,d3
00010D7C 1143 003C                  		move.b	d3,$3C(a0)
00010D80 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010D82 6500                       		bcs.s	loc_10894
00010D84 0828 0003 0028             		btst	#3,$28(a0)
00010D8A 6700                       		beq.s	Obj57_MakeChain
00010D8C 5341                       		subq.w	#1,d1
00010D8E 6500                       		bcs.s	loc_10894
00010D90                            
00010D90                            Obj57_MakeChain:
00010D90 6100 D266                  		bsr.w	SingleObjLoad
00010D94 6600                       		bne.s	loc_10894
00010D96 5228 0029                  		addq.b	#1,$29(a0)
00010D9A 3A09                       		move.w	a1,d5
00010D9C 0445 D000                  		subi.w	#-$3000,d5
00010DA0 EC4D                       		lsr.w	#6,d5
00010DA2 0245 007F                  		andi.w	#$7F,d5
00010DA6 14C5                       		move.b	d5,(a2)+
00010DA8 137C 0004 0024             		move.b	#4,$24(a1)
00010DAE 1290                       		move.b	0(a0),0(a1)
00010DB0 2368 0004 0004             		move.l	4(a0),4(a1)
00010DB6 3368 0002 0002             		move.w	2(a0),2(a1)
00010DBC 1368 0001 0001             		move.b	1(a0),1(a1)
00010DC2 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010DC8 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010DCE 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010DD4 0403 0010                  		subi.b	#$10,d3
00010DD8 1343 003C                  		move.b	d3,$3C(a1)
00010DDC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010DE2 6600                       		bne.s	loc_10890
00010DE4 4A03                       		tst.b	d3
00010DE6 6600                       		bne.s	loc_10890
00010DE8 137C 0002 001A             		move.b	#2,$1A(a1)
00010DEE                            
00010DEE                            loc_10890:
00010DEE 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010DF2                            
00010DF2                            loc_10894:
00010DF2 3A08                       		move.w	a0,d5
00010DF4 0445 D000                  		subi.w	#-$3000,d5
00010DF8 EC4D                       		lsr.w	#6,d5
00010DFA 0245 007F                  		andi.w	#$7F,d5
00010DFE 14C5                       		move.b	d5,(a2)+
00010E00 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E06 6600                       		bne.s	Obj57_Move
00010E08 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010E0E 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010E14                            
00010E14                            Obj57_Move:				; XREF: Obj57_Index
00010E14 6100 0000                  		bsr.w	Obj57_MoveSub
00010E18 6000 0000                  		bra.w	Obj57_ChkDel
00010E1C                            ; ===========================================================================
00010E1C                            
00010E1C                            Obj57_MoveSub:				; XREF: Obj57_Move
00010E1C 3028 003E                  		move.w	$3E(a0),d0
00010E20 D168 0026                  		add.w	d0,$26(a0)
00010E24 1028 0026                  		move.b	$26(a0),d0
00010E28 4EB9 0000 2C22             		jsr	(CalcSine).l
00010E2E 3428 0038                  		move.w	$38(a0),d2
00010E32 3628 003A                  		move.w	$3A(a0),d3
00010E36 45E8 0029                  		lea	$29(a0),a2
00010E3A 7C00                       		moveq	#0,d6
00010E3C 1C1A                       		move.b	(a2)+,d6
00010E3E                            
00010E3E                            Obj57_MoveLoop:
00010E3E 7800                       		moveq	#0,d4
00010E40 181A                       		move.b	(a2)+,d4
00010E42 ED4C                       		lsl.w	#6,d4
00010E44 0684 00FF D000             		addi.l	#$FFD000,d4
00010E4A 2244                       		movea.l	d4,a1
00010E4C 7800                       		moveq	#0,d4
00010E4E 1829 003C                  		move.b	$3C(a1),d4
00010E52 2A04                       		move.l	d4,d5
00010E54 C9C0                       		muls.w	d0,d4
00010E56 E084                       		asr.l	#8,d4
00010E58 CBC1                       		muls.w	d1,d5
00010E5A E085                       		asr.l	#8,d5
00010E5C D842                       		add.w	d2,d4
00010E5E DA43                       		add.w	d3,d5
00010E60 3344 000C                  		move.w	d4,$C(a1)
00010E64 3345 0008                  		move.w	d5,8(a1)
00010E68 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010E6C 4E75                       		rts	
00010E6E                            ; ===========================================================================
00010E6E                            
00010E6E                            Obj57_ChkDel:				; XREF: Obj57_Move
00010E6E 3028 003A                  		move.w	$3A(a0),d0
00010E72 0240 FF80                  		andi.w	#$FF80,d0
00010E76 3238 F700                  		move.w	($FFFFF700).w,d1
00010E7A 0441 0080                  		subi.w	#$80,d1
00010E7E 0241 FF80                  		andi.w	#$FF80,d1
00010E82 9041                       		sub.w	d1,d0
00010E84 0C40 0280                  		cmpi.w	#$280,d0
00010E88 6200 0000                  		bhi.w	Obj57_Delete
00010E8C 6000 CCE4                  		bra.w	DisplaySprite
00010E90                            ; ===========================================================================
00010E90                            
00010E90                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010E90 7400                       		moveq	#0,d2
00010E92 45E8 0029                  		lea	$29(a0),a2
00010E96 141A                       		move.b	(a2)+,d2
00010E98                            
00010E98                            Obj57_DelLoop:
00010E98 7000                       		moveq	#0,d0
00010E9A 101A                       		move.b	(a2)+,d0
00010E9C ED48                       		lsl.w	#6,d0
00010E9E 0680 00FF D000             		addi.l	#$FFD000,d0
00010EA4 2240                       		movea.l	d0,a1
00010EA6 6100 CD08                  		bsr.w	DeleteObject2
00010EAA 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010EAE                            
00010EAE 4E75                       		rts	
00010EB0                            ; ===========================================================================
00010EB0                            
00010EB0                            Obj57_Display:				; XREF: Obj57_Index
00010EB0 6000 CCC0                  		bra.w	DisplaySprite
00010EB4                            ; ===========================================================================
00010EB4                            ; ---------------------------------------------------------------------------
00010EB4                            ; Sprite mappings - chain of spiked balls (SYZ)
00010EB4                            ; ---------------------------------------------------------------------------
00010EB4                            Map_obj57:
00010EB4                            	include "_maps\obj57syz.asm"
00010EB4                            ; ---------------------------------------------------------------------------
00010EB4                            ; Sprite mappings - chain of spiked balls (SYZ)
00010EB4                            ; ---------------------------------------------------------------------------
00010EB4 0000                       		dc.w byte_10958-Map_obj57
00010EB6 01                         byte_10958:	dc.b 1
00010EB7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010EBC                            		even
00010EBC                            		even
00010EBC                            
00010EBC                            ; ---------------------------------------------------------------------------
00010EBC                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EBC                            ; ---------------------------------------------------------------------------
00010EBC                            Map_obj57a:
00010EBC                            	include "_maps\obj57lz.asm"
00010EBC                            ; ---------------------------------------------------------------------------
00010EBC                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EBC                            ; ---------------------------------------------------------------------------
00010EBC 0000                       		dc.w byte_10964-Map_obj57a
00010EBE 0000                       		dc.w byte_1096A-Map_obj57a
00010EC0 0000                       		dc.w byte_10970-Map_obj57a
00010EC2 01                         byte_10964:	dc.b 1
00010EC3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010EC8 01                         byte_1096A:	dc.b 1
00010EC9 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010ECE 01                         byte_10970:	dc.b 1
00010ECF F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010ED4                            		even
00010ED4                            		even
00010ED4                            
00010ED4                            ; ===========================================================================
00010ED4                            ; ---------------------------------------------------------------------------
00010ED4                            ; Object 58 - giant spiked balls (SYZ)
00010ED4                            ; ---------------------------------------------------------------------------
00010ED4                            
00010ED4                            Obj58:					; XREF: Obj_Index
00010ED4 7000                       		moveq	#0,d0
00010ED6 1028 0024                  		move.b	$24(a0),d0
00010EDA 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010EDE 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010EE2                            ; ===========================================================================
00010EE2 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010EE4 0000                       		dc.w Obj58_Move-Obj58_Index
00010EE6                            ; ===========================================================================
00010EE6                            
00010EE6                            Obj58_Main:				; XREF: Obj58_Index
00010EE6 5428 0024                  		addq.b	#2,$24(a0)
00010EEA 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010EF2 317C 0396 0002             		move.w	#$396,2(a0)
00010EF8 117C 0004 0001             		move.b	#4,1(a0)
00010EFE 117C 0004 0018             		move.b	#4,$18(a0)
00010F04 117C 0018 0019             		move.b	#$18,$19(a0)
00010F0A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F10 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F16 117C 0086 0020             		move.b	#$86,$20(a0)
00010F1C 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F20 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010F24 4881                       		ext.w	d1
00010F26 E741                       		asl.w	#3,d1		; multiply by 8
00010F28 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010F2C 1028 0022                  		move.b	$22(a0),d0
00010F30 E418                       		ror.b	#2,d0
00010F32 0200 00C0                  		andi.b	#$C0,d0
00010F36 1140 0026                  		move.b	d0,$26(a0)
00010F3A 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010F40                            
00010F40                            Obj58_Move:				; XREF: Obj58_Index
00010F40 7000                       		moveq	#0,d0
00010F42 1028 0028                  		move.b	$28(a0),d0	; get object type
00010F46 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010F4A D040                       		add.w	d0,d0
00010F4C 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010F50 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010F54 3028 003A                  		move.w	$3A(a0),d0
00010F58 0240 FF80                  		andi.w	#$FF80,d0
00010F5C 3238 F700                  		move.w	($FFFFF700).w,d1
00010F60 0441 0080                  		subi.w	#$80,d1
00010F64 0241 FF80                  		andi.w	#$FF80,d1
00010F68 9041                       		sub.w	d1,d0
00010F6A 0C40 0280                  		cmpi.w	#$280,d0
00010F6E 6200 CC3E                  		bhi.w	DeleteObject
00010F72 6000 CBFE                  		bra.w	DisplaySprite
00010F76                            ; ===========================================================================
00010F76 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010F78 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010F7A 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010F7C 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010F7E                            ; ===========================================================================
00010F7E                            
00010F7E                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010F7E 4E75                       		rts	
00010F80                            ; ===========================================================================
00010F80                            
00010F80                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010F80 323C 0060                  		move.w	#$60,d1
00010F84 7000                       		moveq	#0,d0
00010F86 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010F8A 0828 0000 0022             		btst	#0,$22(a0)
00010F90 6700                       		beq.s	loc_10A38
00010F92 4440                       		neg.w	d0
00010F94 D041                       		add.w	d1,d0
00010F96                            
00010F96                            loc_10A38:
00010F96 3228 003A                  		move.w	$3A(a0),d1
00010F9A 9240                       		sub.w	d0,d1
00010F9C 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010FA0 4E75                       		rts	
00010FA2                            ; ===========================================================================
00010FA2                            
00010FA2                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010FA2 323C 0060                  		move.w	#$60,d1
00010FA6 7000                       		moveq	#0,d0
00010FA8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010FAC 0828 0000 0022             		btst	#0,$22(a0)
00010FB2 6700                       		beq.s	loc_10A5C
00010FB4 4440                       		neg.w	d0
00010FB6 0640 0080                  		addi.w	#$80,d0
00010FBA                            
00010FBA                            loc_10A5C:
00010FBA 3228 0038                  		move.w	$38(a0),d1
00010FBE 9240                       		sub.w	d0,d1
00010FC0 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010FC4 4E75                       		rts	
00010FC6                            ; ===========================================================================
00010FC6                            
00010FC6                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010FC6 3028 003E                  		move.w	$3E(a0),d0
00010FCA D168 0026                  		add.w	d0,$26(a0)
00010FCE 1028 0026                  		move.b	$26(a0),d0
00010FD2 4EB9 0000 2C22             		jsr	(CalcSine).l
00010FD8 3428 0038                  		move.w	$38(a0),d2
00010FDC 3628 003A                  		move.w	$3A(a0),d3
00010FE0 7800                       		moveq	#0,d4
00010FE2 1828 003C                  		move.b	$3C(a0),d4
00010FE6 2A04                       		move.l	d4,d5
00010FE8 C9C0                       		muls.w	d0,d4
00010FEA E084                       		asr.l	#8,d4
00010FEC CBC1                       		muls.w	d1,d5
00010FEE E085                       		asr.l	#8,d5
00010FF0 D842                       		add.w	d2,d4
00010FF2 DA43                       		add.w	d3,d5
00010FF4 3144 000C                  		move.w	d4,$C(a0)
00010FF8 3145 0008                  		move.w	d5,8(a0)
00010FFC 4E75                       		rts	
00010FFE                            ; ===========================================================================
00010FFE                            ; ---------------------------------------------------------------------------
00010FFE                            ; Sprite mappings - SBZ	spiked ball on a chain
00010FFE                            ; ---------------------------------------------------------------------------
00010FFE                            Map_obj15b:
00010FFE                            	include "_maps\obj15sbz.asm"
00010FFE                            ; ---------------------------------------------------------------------------
00010FFE                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010FFE                            ; ---------------------------------------------------------------------------
00010FFE 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011002 0000                       		dc.w byte_10AC6-Map_obj15b
00011004 05                         byte_10AA6:	dc.b 5
00011005 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
0001100A F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001100F F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011014 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011019 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001101E 01                         byte_10AC0:	dc.b 1
0001101F F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011024 02                         byte_10AC6:	dc.b 2
00011025 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
0001102A E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011030 00                         		even
00011030 00                         		even
00011030                            
00011030                            ; ===========================================================================
00011030                            ; ---------------------------------------------------------------------------
00011030                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011030                            ; ---------------------------------------------------------------------------
00011030                            
00011030                            Obj59:					; XREF: Obj_Index
00011030 7000                       		moveq	#0,d0
00011032 1028 0024                  		move.b	$24(a0),d0
00011036 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
0001103A 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001103E 3028 0032                  		move.w	$32(a0),d0
00011042 0240 FF80                  		andi.w	#$FF80,d0
00011046 3238 F700                  		move.w	($FFFFF700).w,d1
0001104A 0441 0080                  		subi.w	#$80,d1
0001104E 0241 FF80                  		andi.w	#$FF80,d1
00011052 9041                       		sub.w	d1,d0
00011054 0C40 0280                  		cmpi.w	#$280,d0
00011058 6200 CB54                  		bhi.w	DeleteObject
0001105C 6000 CB14                  		bra.w	DisplaySprite
00011060                            ; ===========================================================================
00011060 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011062 0000                       		dc.w Obj59_Platform-Obj59_Index
00011064 0000                       		dc.w Obj59_Action-Obj59_Index
00011066 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011068                            
00011068 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
0001106A                            
0001106A 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001106C 2001                       		dc.b $20, 1
0001106E 3401                       		dc.b $34, 1
00011070 1003                       		dc.b $10, 3
00011072 2003                       		dc.b $20, 3
00011074 3403                       		dc.b $34, 3
00011076 1401                       		dc.b $14, 1
00011078 2401                       		dc.b $24, 1
0001107A 2C01                       		dc.b $2C, 1
0001107C 1403                       		dc.b $14, 3
0001107E 2403                       		dc.b $24, 3
00011080 2C03                       		dc.b $2C, 3
00011082 2005                       		dc.b $20, 5
00011084 2007                       		dc.b $20, 7
00011086 3009                       		dc.b $30, 9
00011088                            ; ===========================================================================
00011088                            
00011088                            Obj59_Main:				; XREF: Obj59_Index
00011088 5428 0024                  		addq.b	#2,$24(a0)
0001108C 7000                       		moveq	#0,d0
0001108E 1028 0028                  		move.b	$28(a0),d0
00011092 6A00                       		bpl.s	Obj59_Main2
00011094 5828 0024                  		addq.b	#4,$24(a0)
00011098 0240 007F                  		andi.w	#$7F,d0
0001109C C0FC 0006                  		mulu.w	#6,d0
000110A0 3140 003C                  		move.w	d0,$3C(a0)
000110A4 3140 003E                  		move.w	d0,$3E(a0)
000110A8 588F                       		addq.l	#4,sp
000110AA 4E75                       		rts	
000110AC                            ; ===========================================================================
000110AC                            
000110AC                            Obj59_Main2:
000110AC E648                       		lsr.w	#3,d0
000110AE 0240 001E                  		andi.w	#$1E,d0
000110B2 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000110B6 115A 0019                  		move.b	(a2)+,$19(a0)
000110BA 115A 001A                  		move.b	(a2)+,$1A(a0)
000110BE 7000                       		moveq	#0,d0
000110C0 1028 0028                  		move.b	$28(a0),d0
000110C4 D040                       		add.w	d0,d0
000110C6 0240 001E                  		andi.w	#$1E,d0
000110CA 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000110CE 101A                       		move.b	(a2)+,d0
000110D0 E548                       		lsl.w	#2,d0
000110D2 3140 003C                  		move.w	d0,$3C(a0)
000110D6 115A 0028                  		move.b	(a2)+,$28(a0)
000110DA 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000110E2 317C 4000 0002             		move.w	#$4000,2(a0)
000110E8 117C 0004 0001             		move.b	#4,1(a0)
000110EE 117C 0004 0018             		move.b	#4,$18(a0)
000110F4 3168 0008 0032             		move.w	8(a0),$32(a0)
000110FA 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011100                            
00011100                            Obj59_Platform:				; XREF: Obj59_Index
00011100 7200                       		moveq	#0,d1
00011102 1228 0019                  		move.b	$19(a0),d1
00011106 4EB9 0000 789E             		jsr	(PlatformObject).l
0001110C 6000 0000                  		bra.w	Obj59_Types
00011110                            ; ===========================================================================
00011110                            
00011110                            Obj59_Action:				; XREF: Obj59_Index
00011110 7200                       		moveq	#0,d1
00011112 1228 0019                  		move.b	$19(a0),d1
00011116 4EB9 0000 7A12             		jsr	(ExitPlatform).l
0001111C 3F28 0008                  		move.w	8(a0),-(sp)
00011120 6100 0000                  		bsr.w	Obj59_Types
00011124 341F                       		move.w	(sp)+,d2
00011126 4A10                       		tst.b	0(a0)
00011128 6700                       		beq.s	locret_10BD4
0001112A 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00011130                            ; ===========================================================================
00011130                            
00011130                            locret_10BD4:
00011130 4E75                       		rts	
00011132                            ; ===========================================================================
00011132                            
00011132                            Obj59_Types:
00011132 7000                       		moveq	#0,d0
00011134 1028 0028                  		move.b	$28(a0),d0
00011138 0240 000F                  		andi.w	#$F,d0
0001113C D040                       		add.w	d0,d0
0001113E 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011142 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011146                            ; ===========================================================================
00011146 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001114A 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001114E 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011152 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011156 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0001115A                            ; ===========================================================================
0001115A                            
0001115A                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0001115A 4E75                       		rts	
0001115C                            ; ===========================================================================
0001115C                            
0001115C                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001115C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011162 6600                       		bne.s	locret_10C0C
00011164 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011168                            
00011168                            locret_10C0C:
00011168 4E75                       		rts	
0001116A                            ; ===========================================================================
0001116A                            
0001116A                            Obj59_Type02:				; XREF: Obj59_TypeIndex
0001116A 6100 0000                  		bsr.w	Obj59_Move
0001116E 3028 0034                  		move.w	$34(a0),d0
00011172 4440                       		neg.w	d0
00011174 D068 0030                  		add.w	$30(a0),d0
00011178 3140 000C                  		move.w	d0,$C(a0)
0001117C 4E75                       		rts	
0001117E                            ; ===========================================================================
0001117E                            
0001117E                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001117E 6100 0000                  		bsr.w	Obj59_Move
00011182 3028 0034                  		move.w	$34(a0),d0
00011186 D068 0030                  		add.w	$30(a0),d0
0001118A 3140 000C                  		move.w	d0,$C(a0)
0001118E 4E75                       		rts	
00011190                            ; ===========================================================================
00011190                            
00011190                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011190 6100 0000                  		bsr.w	Obj59_Move
00011194 3028 0034                  		move.w	$34(a0),d0
00011198 E240                       		asr.w	#1,d0
0001119A 4440                       		neg.w	d0
0001119C D068 0030                  		add.w	$30(a0),d0
000111A0 3140 000C                  		move.w	d0,$C(a0)
000111A4 3028 0034                  		move.w	$34(a0),d0
000111A8 D068 0032                  		add.w	$32(a0),d0
000111AC 3140 0008                  		move.w	d0,8(a0)
000111B0 4E75                       		rts	
000111B2                            ; ===========================================================================
000111B2                            
000111B2                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000111B2 6100 0000                  		bsr.w	Obj59_Move
000111B6 3028 0034                  		move.w	$34(a0),d0
000111BA E240                       		asr.w	#1,d0
000111BC D068 0030                  		add.w	$30(a0),d0
000111C0 3140 000C                  		move.w	d0,$C(a0)
000111C4 3028 0034                  		move.w	$34(a0),d0
000111C8 4440                       		neg.w	d0
000111CA D068 0032                  		add.w	$32(a0),d0
000111CE 3140 0008                  		move.w	d0,8(a0)
000111D2 4E75                       		rts	
000111D4                            ; ===========================================================================
000111D4                            
000111D4                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000111D4 6100 0000                  		bsr.w	Obj59_Move
000111D8 3028 0034                  		move.w	$34(a0),d0
000111DC 4440                       		neg.w	d0
000111DE D068 0030                  		add.w	$30(a0),d0
000111E2 3140 000C                  		move.w	d0,$C(a0)
000111E6 4A28 0028                  		tst.b	$28(a0)
000111EA 6700 0000                  		beq.w	loc_10C94
000111EE 4E75                       		rts	
000111F0                            ; ===========================================================================
000111F0                            
000111F0                            loc_10C94:
000111F0 0828 0003 0022             		btst	#3,$22(a0)
000111F6 6700                       		beq.s	Obj59_Delete
000111F8 08E9 0001 0022             		bset	#1,$22(a1)
000111FE 08A9 0003 0022             		bclr	#3,$22(a1)
00011204 137C 0002 0024             		move.b	#2,$24(a1)
0001120A                            
0001120A                            Obj59_Delete:
0001120A 6000 C9A2                  		bra.w	DeleteObject
0001120E                            
0001120E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001120E                            
0001120E                            
0001120E                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001120E 3028 0038                  		move.w	$38(a0),d0
00011212 4A28 003A                  		tst.b	$3A(a0)
00011216 6600                       		bne.s	loc_10CC8
00011218 0C40 0800                  		cmpi.w	#$800,d0
0001121C 6400                       		bcc.s	loc_10CD0
0001121E 0640 0010                  		addi.w	#$10,d0
00011222 6000                       		bra.s	loc_10CD0
00011224                            ; ===========================================================================
00011224                            
00011224                            loc_10CC8:
00011224 4A40                       		tst.w	d0
00011226 6700                       		beq.s	loc_10CD0
00011228 0440 0010                  		subi.w	#$10,d0
0001122C                            
0001122C                            loc_10CD0:
0001122C 3140 0038                  		move.w	d0,$38(a0)
00011230 48C0                       		ext.l	d0
00011232 E180                       		asl.l	#8,d0
00011234 D0A8 0034                  		add.l	$34(a0),d0
00011238 2140 0034                  		move.l	d0,$34(a0)
0001123C 4840                       		swap	d0
0001123E 3428 003C                  		move.w	$3C(a0),d2
00011242 B042                       		cmp.w	d2,d0
00011244 6300                       		bls.s	loc_10CF0
00011246 117C 0001 003A             		move.b	#1,$3A(a0)
0001124C                            
0001124C                            loc_10CF0:
0001124C D442                       		add.w	d2,d2
0001124E B042                       		cmp.w	d2,d0
00011250 6600                       		bne.s	locret_10CFA
00011252 4228 0028                  		clr.b	$28(a0)
00011256                            
00011256                            locret_10CFA:
00011256 4E75                       		rts	
00011258                            ; End of function Obj59_Move
00011258                            
00011258                            ; ===========================================================================
00011258                            
00011258                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011258 5368 003C                  		subq.w	#1,$3C(a0)
0001125C 6600                       		bne.s	Obj59_ChkDel
0001125E 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011264 6100 CD92                  		bsr.w	SingleObjLoad
00011268 6600                       		bne.s	Obj59_ChkDel
0001126A 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001126E 3368 0008 0008             		move.w	8(a0),8(a1)
00011274 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001127A 137C 000E 0028             		move.b	#$E,$28(a1)
00011280                            
00011280                            Obj59_ChkDel:
00011280 588F                       		addq.l	#4,sp
00011282 3028 0008                  		move.w	8(a0),d0
00011286 0240 FF80                  		andi.w	#$FF80,d0
0001128A 3238 F700                  		move.w	($FFFFF700).w,d1
0001128E 0441 0080                  		subi.w	#$80,d1
00011292 0241 FF80                  		andi.w	#$FF80,d1
00011296 9041                       		sub.w	d1,d0
00011298 0C40 0280                  		cmpi.w	#$280,d0
0001129C 6200 C910                  		bhi.w	DeleteObject
000112A0 4E75                       		rts	
000112A2                            ; ===========================================================================
000112A2                            ; ---------------------------------------------------------------------------
000112A2                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112A2                            ; ---------------------------------------------------------------------------
000112A2                            Map_obj59:
000112A2                            	include "_maps\obj59.asm"
000112A2                            ; ---------------------------------------------------------------------------
000112A2                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112A2                            ; ---------------------------------------------------------------------------
000112A2 0000                       		dc.w byte_10D4A-Map_obj59
000112A4 03                         byte_10D4A:	dc.b 3
000112A5 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000112AA F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000112AF F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000112B4                            		even
000112B4                            		even
000112B4                            
000112B4                            ; ===========================================================================
000112B4                            ; ---------------------------------------------------------------------------
000112B4                            ; Object 5A - platforms	moving in circles (SLZ)
000112B4                            ; ---------------------------------------------------------------------------
000112B4                            
000112B4                            Obj5A:					; XREF: Obj_Index
000112B4 7000                       		moveq	#0,d0
000112B6 1028 0024                  		move.b	$24(a0),d0
000112BA 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000112BE 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000112C2 3028 0032                  		move.w	$32(a0),d0
000112C6 0240 FF80                  		andi.w	#$FF80,d0
000112CA 3238 F700                  		move.w	($FFFFF700).w,d1
000112CE 0441 0080                  		subi.w	#$80,d1
000112D2 0241 FF80                  		andi.w	#$FF80,d1
000112D6 9041                       		sub.w	d1,d0
000112D8 0C40 0280                  		cmpi.w	#$280,d0
000112DC 6200 C8D0                  		bhi.w	DeleteObject
000112E0 6000 C890                  		bra.w	DisplaySprite
000112E4                            ; ===========================================================================
000112E4 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000112E6 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000112E8 0000                       		dc.w Obj5A_Action-Obj5A_Index
000112EA                            ; ===========================================================================
000112EA                            
000112EA                            Obj5A_Main:				; XREF: Obj5A_Index
000112EA 5428 0024                  		addq.b	#2,$24(a0)
000112EE 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000112F6 317C 4000 0002             		move.w	#$4000,2(a0)
000112FC 117C 0004 0001             		move.b	#4,1(a0)
00011302 117C 0004 0018             		move.b	#4,$18(a0)
00011308 117C 0018 0019             		move.b	#$18,$19(a0)
0001130E 3168 0008 0032             		move.w	8(a0),$32(a0)
00011314 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001131A                            
0001131A                            Obj5A_Platform:				; XREF: Obj5A_Index
0001131A 7200                       		moveq	#0,d1
0001131C 1228 0019                  		move.b	$19(a0),d1
00011320 4EB9 0000 789E             		jsr	(PlatformObject).l
00011326 6000 0000                  		bra.w	Obj5A_Types
0001132A                            ; ===========================================================================
0001132A                            
0001132A                            Obj5A_Action:				; XREF: Obj5A_Index
0001132A 7200                       		moveq	#0,d1
0001132C 1228 0019                  		move.b	$19(a0),d1
00011330 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00011336 3F28 0008                  		move.w	8(a0),-(sp)
0001133A 6100 0000                  		bsr.w	Obj5A_Types
0001133E 341F                       		move.w	(sp)+,d2
00011340 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00011346                            ; ===========================================================================
00011346                            
00011346                            Obj5A_Types:
00011346 7000                       		moveq	#0,d0
00011348 1028 0028                  		move.b	$28(a0),d0
0001134C 0240 000C                  		andi.w	#$C,d0
00011350 E248                       		lsr.w	#1,d0
00011352 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011356 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001135A                            ; ===========================================================================
0001135A 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001135C 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001135E                            ; ===========================================================================
0001135E                            
0001135E                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001135E 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011362 0401 0050                  		subi.b	#$50,d1
00011366 4881                       		ext.w	d1
00011368 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001136C 0402 0050                  		subi.b	#$50,d2
00011370 4882                       		ext.w	d2
00011372 0828 0000 0028             		btst	#0,$28(a0)
00011378 6700                       		beq.s	loc_10E24
0001137A 4441                       		neg.w	d1
0001137C 4442                       		neg.w	d2
0001137E                            
0001137E                            loc_10E24:
0001137E 0828 0001 0028             		btst	#1,$28(a0)
00011384 6700                       		beq.s	loc_10E30
00011386 4441                       		neg.w	d1
00011388 C342                       		exg	d1,d2
0001138A                            
0001138A                            loc_10E30:
0001138A D268 0032                  		add.w	$32(a0),d1
0001138E 3141 0008                  		move.w	d1,8(a0)
00011392 D468 0030                  		add.w	$30(a0),d2
00011396 3142 000C                  		move.w	d2,$C(a0)
0001139A 4E75                       		rts	
0001139C                            ; ===========================================================================
0001139C                            
0001139C                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001139C 1238 FE80                  		move.b	($FFFFFE80).w,d1
000113A0 0401 0050                  		subi.b	#$50,d1
000113A4 4881                       		ext.w	d1
000113A6 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113AA 0402 0050                  		subi.b	#$50,d2
000113AE 4882                       		ext.w	d2
000113B0 0828 0000 0028             		btst	#0,$28(a0)
000113B6 6700                       		beq.s	loc_10E62
000113B8 4441                       		neg.w	d1
000113BA 4442                       		neg.w	d2
000113BC                            
000113BC                            loc_10E62:
000113BC 0828 0001 0028             		btst	#1,$28(a0)
000113C2 6700                       		beq.s	loc_10E6E
000113C4 4441                       		neg.w	d1
000113C6 C342                       		exg	d1,d2
000113C8                            
000113C8                            loc_10E6E:
000113C8 4441                       		neg.w	d1
000113CA D268 0032                  		add.w	$32(a0),d1
000113CE 3141 0008                  		move.w	d1,8(a0)
000113D2 D468 0030                  		add.w	$30(a0),d2
000113D6 3142 000C                  		move.w	d2,$C(a0)
000113DA 4E75                       		rts	
000113DC                            ; ===========================================================================
000113DC                            ; ---------------------------------------------------------------------------
000113DC                            ; Sprite mappings - platforms that move	in circles (SLZ)
000113DC                            ; ---------------------------------------------------------------------------
000113DC                            Map_obj5A:
000113DC                            	include "_maps\obj5A.asm"
000113DC                            ; ---------------------------------------------------------------------------
000113DC                            ; Sprite mappings - platforms that move	in circles (SLZ)
000113DC                            ; ---------------------------------------------------------------------------
000113DC 0000                       		dc.w byte_10E84-Map_obj5A
000113DE 02                         byte_10E84:	dc.b 2
000113DF F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000113E4 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000113EA 00                         		even
000113EA 00                         		even
000113EA                            
000113EA                            ; ===========================================================================
000113EA                            ; ---------------------------------------------------------------------------
000113EA                            ; Object 5B - blocks that form a staircase (SLZ)
000113EA                            ; ---------------------------------------------------------------------------
000113EA                            
000113EA                            Obj5B:					; XREF: Obj_Index
000113EA 7000                       		moveq	#0,d0
000113EC 1028 0024                  		move.b	$24(a0),d0
000113F0 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000113F4 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000113F8 3028 0030                  		move.w	$30(a0),d0
000113FC 0240 FF80                  		andi.w	#$FF80,d0
00011400 3238 F700                  		move.w	($FFFFF700).w,d1
00011404 0441 0080                  		subi.w	#$80,d1
00011408 0241 FF80                  		andi.w	#$FF80,d1
0001140C 9041                       		sub.w	d1,d0
0001140E 0C40 0280                  		cmpi.w	#$280,d0
00011412 6200 C79A                  		bhi.w	DeleteObject
00011416 6000 C75A                  		bra.w	DisplaySprite
0001141A                            ; ===========================================================================
0001141A 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001141C 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001141E 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011420                            ; ===========================================================================
00011420                            
00011420                            Obj5B_Main:				; XREF: Obj5B_Index
00011420 5428 0024                  		addq.b	#2,$24(a0)
00011424 7638                       		moveq	#$38,d3
00011426 7801                       		moveq	#1,d4
00011428 0828 0000 0022             		btst	#0,$22(a0)
0001142E 6700                       		beq.s	loc_10EDA
00011430 763B                       		moveq	#$3B,d3
00011432 78FF                       		moveq	#-1,d4
00011434                            
00011434                            loc_10EDA:
00011434 3428 0008                  		move.w	8(a0),d2
00011438 2248                       		movea.l	a0,a1
0001143A 7203                       		moveq	#3,d1
0001143C 6000                       		bra.s	Obj5B_MakeBlocks
0001143E                            ; ===========================================================================
0001143E                            
0001143E                            Obj5B_Loop:
0001143E 6100 CBCE                  		bsr.w	SingleObjLoad2
00011442 6600 0000                  		bne.w	Obj5B_Move
00011446 137C 0004 0024             		move.b	#4,$24(a1)
0001144C                            
0001144C                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001144C 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011450 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011458 337C 4000 0002             		move.w	#$4000,2(a1)
0001145E 137C 0004 0001             		move.b	#4,1(a1)
00011464 137C 0003 0018             		move.b	#3,$18(a1)
0001146A 137C 0010 0019             		move.b	#$10,$19(a1)
00011470 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011476 3342 0008                  		move.w	d2,8(a1)
0001147A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011480 3368 0008 0030             		move.w	8(a0),$30(a1)
00011486 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001148C 0642 0020                  		addi.w	#$20,d2
00011490 1343 0037                  		move.b	d3,$37(a1)
00011494 2348 003C                  		move.l	a0,$3C(a1)
00011498 D604                       		add.b	d4,d3
0001149A 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001149E                            
0001149E                            Obj5B_Move:				; XREF: Obj5B_Index
0001149E 7000                       		moveq	#0,d0
000114A0 1028 0028                  		move.b	$28(a0),d0
000114A4 0240 0007                  		andi.w	#7,d0
000114A8 D040                       		add.w	d0,d0
000114AA 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000114AE 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000114B2                            
000114B2                            Obj5B_Solid:				; XREF: Obj5B_Index
000114B2 2468 003C                  		movea.l	$3C(a0),a2
000114B6 7000                       		moveq	#0,d0
000114B8 1028 0037                  		move.b	$37(a0),d0
000114BC 1032 0000                  		move.b	(a2,d0.w),d0
000114C0 D068 0032                  		add.w	$32(a0),d0
000114C4 3140 000C                  		move.w	d0,$C(a0)
000114C8 7200                       		moveq	#0,d1
000114CA 1228 0019                  		move.b	$19(a0),d1
000114CE 0641 000B                  		addi.w	#$B,d1
000114D2 343C 0010                  		move.w	#$10,d2
000114D6 363C 0011                  		move.w	#$11,d3
000114DA 3828 0008                  		move.w	8(a0),d4
000114DE 6100 EA62                  		bsr.w	SolidObject
000114E2 4A04                       		tst.b	d4
000114E4 6A00                       		bpl.s	loc_10F92
000114E6 1544 0036                  		move.b	d4,$36(a2)
000114EA                            
000114EA                            loc_10F92:
000114EA 0828 0003 0022             		btst	#3,$22(a0)
000114F0 6700                       		beq.s	locret_10FA0
000114F2 157C 0001 0036             		move.b	#1,$36(a2)
000114F8                            
000114F8                            locret_10FA0:
000114F8 4E75                       		rts	
000114FA                            ; ===========================================================================
000114FA 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000114FC 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000114FE 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011500 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011502                            ; ===========================================================================
00011502                            
00011502                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011502 4A68 0034                  		tst.w	$34(a0)
00011506 6600                       		bne.s	loc_10FC0
00011508 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001150E 6600                       		bne.s	locret_10FBE
00011510 317C 001E 0034             		move.w	#$1E,$34(a0)
00011516                            
00011516                            locret_10FBE:
00011516 4E75                       		rts	
00011518                            ; ===========================================================================
00011518                            
00011518                            loc_10FC0:
00011518 5368 0034                  		subq.w	#1,$34(a0)
0001151C 66F8                       		bne.s	locret_10FBE
0001151E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011522 4E75                       		rts	
00011524                            ; ===========================================================================
00011524                            
00011524                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011524 4A68 0034                  		tst.w	$34(a0)
00011528 6600                       		bne.s	loc_10FE0
0001152A 4A28 0036                  		tst.b	$36(a0)
0001152E 6A00                       		bpl.s	locret_10FDE
00011530 317C 003C 0034             		move.w	#$3C,$34(a0)
00011536                            
00011536                            locret_10FDE:
00011536 4E75                       		rts	
00011538                            ; ===========================================================================
00011538                            
00011538                            loc_10FE0:
00011538 5368 0034                  		subq.w	#1,$34(a0)
0001153C 6600                       		bne.s	loc_10FEC
0001153E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011542 4E75                       		rts	
00011544                            ; ===========================================================================
00011544                            
00011544                            loc_10FEC:
00011544 43E8 0038                  		lea	$38(a0),a1
00011548 3028 0034                  		move.w	$34(a0),d0
0001154C E408                       		lsr.b	#2,d0
0001154E 0200 0001                  		andi.b	#1,d0
00011552 12C0                       		move.b	d0,(a1)+
00011554 0A00 0001                  		eori.b	#1,d0
00011558 12C0                       		move.b	d0,(a1)+
0001155A 0A00 0001                  		eori.b	#1,d0
0001155E 12C0                       		move.b	d0,(a1)+
00011560 0A00 0001                  		eori.b	#1,d0
00011564 12C0                       		move.b	d0,(a1)+
00011566 4E75                       		rts	
00011568                            ; ===========================================================================
00011568                            
00011568                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011568 43E8 0038                  		lea	$38(a0),a1
0001156C 0C11 0080                  		cmpi.b	#$80,(a1)
00011570 6700                       		beq.s	locret_11038
00011572 5211                       		addq.b	#1,(a1)
00011574 7200                       		moveq	#0,d1
00011576 1219                       		move.b	(a1)+,d1
00011578 4841                       		swap	d1
0001157A E289                       		lsr.l	#1,d1
0001157C 2401                       		move.l	d1,d2
0001157E E289                       		lsr.l	#1,d1
00011580 2601                       		move.l	d1,d3
00011582 D682                       		add.l	d2,d3
00011584 4841                       		swap	d1
00011586 4842                       		swap	d2
00011588 4843                       		swap	d3
0001158A 12C3                       		move.b	d3,(a1)+
0001158C 12C2                       		move.b	d2,(a1)+
0001158E 12C1                       		move.b	d1,(a1)+
00011590                            
00011590                            locret_11038:
00011590 4E75                       		rts	
00011592 4E75                       		rts	
00011594                            ; ===========================================================================
00011594                            ; ---------------------------------------------------------------------------
00011594                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011594                            ; ---------------------------------------------------------------------------
00011594                            Map_obj5B:
00011594                            	include "_maps\obj5B.asm"
00011594                            ; ---------------------------------------------------------------------------
00011594                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011594                            ; ---------------------------------------------------------------------------
00011594 0000                       		dc.w byte_1103E-Map_obj5B
00011596 01                         byte_1103E:	dc.b 1
00011597 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001159C                            		even
0001159C                            		even
0001159C                            
0001159C                            ; ===========================================================================
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            ; Object 5C - metal girders in foreground (SLZ)
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            
0001159C                            Obj5C:					; XREF: Obj_Index
0001159C 7000                       		moveq	#0,d0
0001159E 1028 0024                  		move.b	$24(a0),d0
000115A2 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000115A6 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000115AA                            ; ===========================================================================
000115AA 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000115AC 0000                       		dc.w Obj5C_Display-Obj5C_Index
000115AE                            ; ===========================================================================
000115AE                            
000115AE                            Obj5C_Main:				; XREF: Obj5C_Index
000115AE 5428 0024                  		addq.b	#2,$24(a0)
000115B2 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000115BA 317C 83CC 0002             		move.w	#$83CC,2(a0)
000115C0 117C 0010 0019             		move.b	#$10,$19(a0)
000115C6                            
000115C6                            Obj5C_Display:				; XREF: Obj5C_Index
000115C6 2238 F700                  		move.l	($FFFFF700).w,d1
000115CA D281                       		add.l	d1,d1
000115CC 4841                       		swap	d1
000115CE 4441                       		neg.w	d1
000115D0 3141 0008                  		move.w	d1,8(a0)
000115D4 2238 F704                  		move.l	($FFFFF704).w,d1
000115D8 D281                       		add.l	d1,d1
000115DA 4841                       		swap	d1
000115DC 0241 003F                  		andi.w	#$3F,d1
000115E0 4441                       		neg.w	d1
000115E2 0641 0100                  		addi.w	#$100,d1
000115E6 3141 000A                  		move.w	d1,$A(a0)
000115EA 6000 C586                  		bra.w	DisplaySprite
000115EE                            ; ===========================================================================
000115EE                            ; ---------------------------------------------------------------------------
000115EE                            ; Sprite mappings - metal girders in foreground	(SLZ)
000115EE                            ; ---------------------------------------------------------------------------
000115EE                            Map_obj5C:
000115EE                            	include "_maps\obj5C.asm"
000115EE                            ; ---------------------------------------------------------------------------
000115EE                            ; Sprite mappings - metal girders in foreground	(SLZ)
000115EE                            ; ---------------------------------------------------------------------------
000115EE 0000                       		dc.w byte_11098-Map_obj5C
000115F0 09                         byte_11098:	dc.b 9
000115F1 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000115F6 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000115FB C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011600 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011605 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001160A 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001160F 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011614 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011619 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001161E                            		even
0001161E                            		even
0001161E                            
0001161E                            ; ===========================================================================
0001161E                            ; ---------------------------------------------------------------------------
0001161E                            ; Object 1B - water surface (LZ)
0001161E                            ; ---------------------------------------------------------------------------
0001161E                            
0001161E                            Obj1B:					; XREF: Obj_Index
0001161E 7000                       		moveq	#0,d0
00011620 1028 0024                  		move.b	$24(a0),d0
00011624 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011628 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001162C                            ; ===========================================================================
0001162C 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001162E 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011630                            ; ===========================================================================
00011630                            
00011630                            Obj1B_Main:				; XREF: Obj1B_Index
00011630 5428 0024                  		addq.b	#2,$24(a0)
00011634 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001163C 317C C300 0002             		move.w	#$C300,2(a0)
00011642 117C 0004 0001             		move.b	#4,1(a0)
00011648 117C 0080 0019             		move.b	#$80,$19(a0)
0001164E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011654                            
00011654                            Obj1B_Action:				; XREF: Obj1B_Index
00011654 3238 F700                  		move.w	($FFFFF700).w,d1
00011658 0241 FFE0                  		andi.w	#$FFE0,d1
0001165C D268 0030                  		add.w	$30(a0),d1
00011660 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011666 6700                       		beq.s	loc_11114
00011668 0641 0020                  		addi.w	#$20,d1
0001166C                            
0001166C                            loc_11114:
0001166C 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011670 3238 F646                  		move.w	($FFFFF646).w,d1
00011674 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011678 4A28 0032                  		tst.b	$32(a0)
0001167C 6600                       		bne.s	Obj1B_Animate
0001167E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011684 6700                       		beq.s	loc_1114A	; if not, branch
00011686 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
0001168A 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011690 6000                       		bra.s	Obj1B_Display
00011692                            ; ===========================================================================
00011692                            
00011692                            Obj1B_Animate:				; XREF: loc_11114
00011692 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011696 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011698 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001169E 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000116A2                            
000116A2                            loc_1114A:				; XREF: loc_11114
000116A2 5328 001E                  		subq.b	#1,$1E(a0)
000116A6 6A00                       		bpl.s	Obj1B_Display
000116A8 117C 0007 001E             		move.b	#7,$1E(a0)
000116AE 5228 001A                  		addq.b	#1,$1A(a0)
000116B2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000116B8 6500                       		bcs.s	Obj1B_Display
000116BA 117C 0000 001A             		move.b	#0,$1A(a0)
000116C0                            
000116C0                            Obj1B_Display:
000116C0 6000 C4B0                  		bra.w	DisplaySprite
000116C4                            ; ===========================================================================
000116C4                            ; ---------------------------------------------------------------------------
000116C4                            ; Sprite mappings - water surface (LZ)
000116C4                            ; ---------------------------------------------------------------------------
000116C4                            Map_obj1B:
000116C4                            	include "_maps\obj1B.asm"
000116C4                            ; ---------------------------------------------------------------------------
000116C4                            ; Sprite mappings - water surface (LZ)
000116C4                            ; ---------------------------------------------------------------------------
000116C4 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000116C8 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000116CC 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000116D0 03                         byte_11178:	dc.b 3
000116D1 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000116D6 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000116DB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000116E0 03                         byte_11188:	dc.b 3
000116E1 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000116E6 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000116EB FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000116F0 03                         byte_11198:	dc.b 3
000116F1 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000116F6 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000116FB FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011700 06                         byte_111A8:	dc.b 6
00011701 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011706 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001170B FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011710 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011715 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001171A FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001171F 06                         byte_111C7:	dc.b 6
00011720 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011725 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001172A FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001172F FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011734 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011739 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001173E 06                         byte_111E6:	dc.b 6
0001173F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011744 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011749 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001174E FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011753 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011758 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
0001175E 00                         		even
0001175E 00                         		even
0001175E                            
0001175E                            ; ===========================================================================
0001175E                            ; ---------------------------------------------------------------------------
0001175E                            ; Object 0B - pole that	breaks (LZ)
0001175E                            ; ---------------------------------------------------------------------------
0001175E                            
0001175E                            Obj0B:					; XREF: Obj_Index
0001175E 7000                       		moveq	#0,d0
00011760 1028 0024                  		move.b	$24(a0),d0
00011764 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011768 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001176C                            ; ===========================================================================
0001176C 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
0001176E 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011770 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011772                            ; ===========================================================================
00011772                            
00011772                            Obj0B_Main:				; XREF: Obj0B_Index
00011772 5428 0024                  		addq.b	#2,$24(a0)
00011776 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
0001177E 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011784 117C 0004 0001             		move.b	#4,1(a0)
0001178A 117C 0008 0019             		move.b	#8,$19(a0)
00011790 117C 0004 0018             		move.b	#4,$18(a0)
00011796 117C 00E1 0020             		move.b	#$E1,$20(a0)
0001179C 7000                       		moveq	#0,d0
0001179E 1028 0028                  		move.b	$28(a0),d0	; get object type
000117A2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000117A6 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000117AA                            
000117AA                            Obj0B_Action:				; XREF: Obj0B_Index
000117AA 4A28 0032                  		tst.b	$32(a0)
000117AE 6700                       		beq.s	Obj0B_Grab
000117B0 4A68 0030                  		tst.w	$30(a0)
000117B4 6700                       		beq.s	Obj0B_MoveUp
000117B6 5368 0030                  		subq.w	#1,$30(a0)
000117BA 6600                       		bne.s	Obj0B_MoveUp
000117BC 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000117C2 6000                       		bra.s	Obj0B_Release
000117C4                            ; ===========================================================================
000117C4                            
000117C4                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000117C4 43F8 D000                  		lea	($FFFFD000).w,a1
000117C8 3028 000C                  		move.w	$C(a0),d0
000117CC 0440 0018                  		subi.w	#$18,d0
000117D0 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000117D6 6700                       		beq.s	Obj0B_MoveDown
000117D8 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000117DC B069 000C                  		cmp.w	$C(a1),d0
000117E0 6500                       		bcs.s	Obj0B_MoveDown
000117E2 3340 000C                  		move.w	d0,$C(a1)
000117E6                            
000117E6                            Obj0B_MoveDown:
000117E6 0640 0024                  		addi.w	#$24,d0
000117EA 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000117F0 6700                       		beq.s	Obj0B_LetGo
000117F2 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000117F6 B069 000C                  		cmp.w	$C(a1),d0
000117FA 6400                       		bcc.s	Obj0B_LetGo
000117FC 3340 000C                  		move.w	d0,$C(a1)
00011800                            
00011800                            Obj0B_LetGo:
00011800 1038 F603                  		move.b	($FFFFF603).w,d0
00011804 0240 0070                  		andi.w	#$70,d0
00011808 6700                       		beq.s	Obj0B_Display
0001180A                            
0001180A                            Obj0B_Release:				; XREF: Obj0B_Action
0001180A 4228 0020                  		clr.b	$20(a0)
0001180E 5428 0024                  		addq.b	#2,$24(a0)
00011812 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011816 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001181A 4228 0032                  		clr.b	$32(a0)
0001181E 6000                       		bra.s	Obj0B_Display
00011820                            ; ===========================================================================
00011820                            
00011820                            Obj0B_Grab:				; XREF: Obj0B_Action
00011820 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011824 6700                       		beq.s	Obj0B_Display	; if not, branch
00011826 43F8 D000                  		lea	($FFFFD000).w,a1
0001182A 3028 0008                  		move.w	8(a0),d0
0001182E 0640 0014                  		addi.w	#$14,d0
00011832 B069 0008                  		cmp.w	8(a1),d0
00011836 6400                       		bcc.s	Obj0B_Display
00011838 4228 0021                  		clr.b	$21(a0)
0001183C 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011842 6400                       		bcc.s	Obj0B_Display
00011844 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011848 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
0001184C 3028 0008                  		move.w	8(a0),d0
00011850 0640 0014                  		addi.w	#$14,d0
00011854 3340 0008                  		move.w	d0,8(a1)
00011858 08A9 0000 0022             		bclr	#0,$22(a1)
0001185E 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011864 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001186A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011870 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011876                            
00011876                            Obj0B_Display:				; XREF: Obj0B_Index
00011876 6000 E3A2                  		bra.w	MarkObjGone
0001187A                            ; ===========================================================================
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            ; Sprite mappings - pole that breaks (LZ)
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            Map_obj0B:
0001187A                            	include "_maps\obj0B.asm"
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            ; Sprite mappings - pole that breaks (LZ)
0001187A                            ; ---------------------------------------------------------------------------
0001187A 0000                       		dc.w byte_11326-Map_obj0B
0001187C 0000                       		dc.w byte_11331-Map_obj0B
0001187E 02                         byte_11326:	dc.b 2			; normal pole
0001187F E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011884 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011889 04                         byte_11331:	dc.b 4			; broken pole
0001188A E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001188F F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011894 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011899 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001189E                            		even
0001189E                            		even
0001189E                            
0001189E                            ; ===========================================================================
0001189E                            ; ---------------------------------------------------------------------------
0001189E                            ; Object 0C - flapping door (LZ)
0001189E                            ; ---------------------------------------------------------------------------
0001189E                            
0001189E                            Obj0C:					; XREF: Obj_Index
0001189E 7000                       		moveq	#0,d0
000118A0 1028 0024                  		move.b	$24(a0),d0
000118A4 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000118A8 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000118AC                            ; ===========================================================================
000118AC 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000118AE 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000118B0                            ; ===========================================================================
000118B0                            
000118B0                            Obj0C_Main:				; XREF: Obj0C_Index
000118B0 5428 0024                  		addq.b	#2,$24(a0)
000118B4 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000118BC 317C 4328 0002             		move.w	#$4328,2(a0)
000118C2 0028 0004 0001             		ori.b	#4,1(a0)
000118C8 117C 0028 0019             		move.b	#$28,$19(a0)
000118CE 7000                       		moveq	#0,d0
000118D0 1028 0028                  		move.b	$28(a0),d0	; get object type
000118D4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000118D8 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000118DC                            
000118DC                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000118DC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000118E0 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000118E2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000118E8 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000118EE 4A28 0001                  		tst.b	1(a0)
000118F2 6A00                       		bpl.s	Obj0C_Solid
000118F4 303C 00BB                  		move.w	#$BB,d0
000118F8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
000118FE                            
000118FE                            Obj0C_Solid:
000118FE 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011904 6100 933C                  		bsr.w	AnimateSprite
00011908 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0001190C 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011910 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011912 3038 D008                  		move.w	($FFFFD008).w,d0
00011916 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
0001191A 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0001191C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011922 323C 0013                  		move.w	#$13,d1
00011926 343C 0020                  		move.w	#$20,d2
0001192A 3602                       		move.w	d2,d3
0001192C 5243                       		addq.w	#1,d3
0001192E 3828 0008                  		move.w	8(a0),d4
00011932 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011936                            
00011936                            Obj0C_Display:
00011936 6000 E2E2                  		bra.w	MarkObjGone
0001193A                            ; ===========================================================================
0001193A                            Ani_obj0C:
0001193A                            	include "_anim\obj0C.asm"
0001193A                            ; ---------------------------------------------------------------------------
0001193A                            ; Animation script - flapping door (LZ)
0001193A                            ; ---------------------------------------------------------------------------
0001193A 0000                       		dc.w byte_113E6-Ani_obj0C
0001193C 0000                       		dc.w byte_113EC-Ani_obj0C
0001193E 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011944 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0001194A                            		even
0001194A                            		even
0001194A                            
0001194A                            ; ---------------------------------------------------------------------------
0001194A                            ; Sprite mappings - flapping door (LZ)
0001194A                            ; ---------------------------------------------------------------------------
0001194A                            Map_obj0C:
0001194A                            	include "_maps\obj0C.asm"
0001194A                            ; ---------------------------------------------------------------------------
0001194A                            ; Sprite mappings - flapping door (LZ)
0001194A                            ; ---------------------------------------------------------------------------
0001194A 0000                       		dc.w byte_113F8-Map_obj0C
0001194C 0000                       		dc.w byte_11403-Map_obj0C
0001194E 0000                       		dc.w byte_1140E-Map_obj0C
00011950 02                         byte_113F8:	dc.b 2
00011951 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011956 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001195B 02                         byte_11403:	dc.b 2
0001195C DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011961 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011966 02                         byte_1140E:	dc.b 2
00011967 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001196C 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011972 00                         		even
00011972 00                         		even
00011972                            
00011972                            ; ===========================================================================
00011972                            ; ---------------------------------------------------------------------------
00011972                            ; Object 71 - invisible	solid blocks
00011972                            ; ---------------------------------------------------------------------------
00011972                            
00011972                            Obj71:					; XREF: Obj_Index
00011972 7000                       		moveq	#0,d0
00011974 1028 0024                  		move.b	$24(a0),d0
00011978 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
0001197C 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011980                            ; ===========================================================================
00011980 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011982 0000                       		dc.w Obj71_Solid-Obj71_Index
00011984                            ; ===========================================================================
00011984                            
00011984                            Obj71_Main:				; XREF: Obj71_Index
00011984 5428 0024                  		addq.b	#2,$24(a0)
00011988 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011990 317C 8680 0002             		move.w	#$8680,2(a0)
00011996 0028 0004 0001             		ori.b	#4,1(a0)
0001199C 1028 0028                  		move.b	$28(a0),d0	; get object type
000119A0 1200                       		move.b	d0,d1
000119A2 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000119A6 0640 0010                  		addi.w	#$10,d0
000119AA E248                       		lsr.w	#1,d0
000119AC 1140 0019                  		move.b	d0,$19(a0)	; set object width
000119B0 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000119B4 5241                       		addq.w	#1,d1
000119B6 E749                       		lsl.w	#3,d1
000119B8 1141 0016                  		move.b	d1,$16(a0)	; set object height
000119BC                            
000119BC                            Obj71_Solid:				; XREF: Obj71_Index
000119BC 6100 C42E                  		bsr.w	ChkObjOnScreen
000119C0 6600                       		bne.s	Obj71_ChkDel
000119C2 7200                       		moveq	#0,d1
000119C4 1228 0019                  		move.b	$19(a0),d1
000119C8 0641 000B                  		addi.w	#$B,d1
000119CC 7400                       		moveq	#0,d2
000119CE 1428 0016                  		move.b	$16(a0),d2
000119D2 3602                       		move.w	d2,d3
000119D4 5243                       		addq.w	#1,d3
000119D6 3828 0008                  		move.w	8(a0),d4
000119DA 6100 E5A8                  		bsr.w	SolidObject71
000119DE                            
000119DE                            Obj71_ChkDel:
000119DE 3028 0008                  		move.w	8(a0),d0
000119E2 0240 FF80                  		andi.w	#$FF80,d0
000119E6 3238 F700                  		move.w	($FFFFF700).w,d1
000119EA 0441 0080                  		subi.w	#$80,d1
000119EE 0241 FF80                  		andi.w	#$FF80,d1
000119F2 9041                       		sub.w	d1,d0
000119F4 0C40 0280                  		cmpi.w	#$280,d0
000119F8 6200                       		bhi.s	Obj71_Delete
000119FA 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000119FE 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011A00 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011A04                            ; ===========================================================================
00011A04                            
00011A04                            Obj71_NoDisplay:
00011A04 4E75                       		rts	
00011A06                            ; ===========================================================================
00011A06                            
00011A06                            Obj71_Delete:
00011A06 4EFA C1A6                  		jmp	DeleteObject
00011A0A                            ; ===========================================================================
00011A0A                            ; ---------------------------------------------------------------------------
00011A0A                            ; Sprite mappings - invisible solid blocks
00011A0A                            ; ---------------------------------------------------------------------------
00011A0A                            Map_obj71:
00011A0A                            	include "_maps\obj71.asm"
00011A0A                            ; ---------------------------------------------------------------------------
00011A0A                            ; Sprite mappings - invisible solid blocks
00011A0A                            ; ---------------------------------------------------------------------------
00011A0A 0000                       		dc.w byte_114BC-Map_obj71
00011A0C 0000                       		dc.w byte_114D1-Map_obj71
00011A0E 0000                       		dc.w byte_114E6-Map_obj71
00011A10 04                         byte_114BC:	dc.b 4
00011A11 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011A16 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011A1B 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011A20 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011A25 04                         byte_114D1:	dc.b 4
00011A26 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011A2B E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011A30 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011A35 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011A3A 04                         byte_114E6:	dc.b 4
00011A3B E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011A40 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011A45 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011A4A 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011A50 00                         		even
00011A50 00                         		even
00011A50                            
00011A50                            ; ===========================================================================
00011A50                            ; ---------------------------------------------------------------------------
00011A50                            ; Object 5D - fans (SLZ)
00011A50                            ; ---------------------------------------------------------------------------
00011A50                            
00011A50                            Obj5D:					; XREF: Obj_Index
00011A50 7000                       		moveq	#0,d0
00011A52 1028 0024                  		move.b	$24(a0),d0
00011A56 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011A5A 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011A5E                            ; ===========================================================================
00011A5E 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011A60 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011A62                            ; ===========================================================================
00011A62                            
00011A62                            Obj5D_Main:				; XREF: Obj5D_Index
00011A62 5428 0024                  		addq.b	#2,$24(a0)
00011A66 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011A6E 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011A74 0028 0004 0001             		ori.b	#4,1(a0)
00011A7A 117C 0010 0019             		move.b	#$10,$19(a0)
00011A80 117C 0004 0018             		move.b	#4,$18(a0)
00011A86                            
00011A86                            Obj5D_Delay:				; XREF: Obj5D_Index
00011A86 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011A8C 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011A8E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011A92 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011A94 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011A9A 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011AA0 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011AA2 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011AA8                            
00011AA8                            Obj5D_Blow:
00011AA8 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011AAC 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011AB0 43F8 D000                  		lea	($FFFFD000).w,a1
00011AB4 3029 0008                  		move.w	8(a1),d0
00011AB8 9068 0008                  		sub.w	8(a0),d0
00011ABC 0828 0000 0022             		btst	#0,$22(a0)
00011AC2 6600                       		bne.s	Obj5D_ChkSonic
00011AC4 4440                       		neg.w	d0
00011AC6                            
00011AC6                            Obj5D_ChkSonic:
00011AC6 0640 0050                  		addi.w	#$50,d0
00011ACA 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011ACE 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011AD0 3229 000C                  		move.w	$C(a1),d1
00011AD4 0641 0060                  		addi.w	#$60,d1
00011AD8 9268 000C                  		sub.w	$C(a0),d1
00011ADC 6500                       		bcs.s	Obj5D_Animate
00011ADE 0C41 0070                  		cmpi.w	#$70,d1
00011AE2 6400                       		bcc.s	Obj5D_Animate
00011AE4 0440 0050                  		subi.w	#$50,d0
00011AE8 6400                       		bcc.s	loc_1159A
00011AEA 4640                       		not.w	d0
00011AEC D040                       		add.w	d0,d0
00011AEE                            
00011AEE                            loc_1159A:
00011AEE 0640 0060                  		addi.w	#$60,d0
00011AF2 0828 0000 0022             		btst	#0,$22(a0)
00011AF8 6600                       		bne.s	loc_115A8
00011AFA 4440                       		neg.w	d0
00011AFC                            
00011AFC                            loc_115A8:
00011AFC 4400                       		neg.b	d0
00011AFE E840                       		asr.w	#4,d0
00011B00 0828 0000 0028             		btst	#0,$28(a0)
00011B06 6700                       		beq.s	Obj5D_MoveSonic
00011B08 4440                       		neg.w	d0
00011B0A                            
00011B0A                            Obj5D_MoveSonic:
00011B0A D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011B0E                            
00011B0E                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011B0E 5328 001E                  		subq.b	#1,$1E(a0)
00011B12 6A00                       		bpl.s	Obj5D_ChkDel
00011B14 117C 0000 001E             		move.b	#0,$1E(a0)
00011B1A 5228 001B                  		addq.b	#1,$1B(a0)
00011B1E 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011B24 6500                       		bcs.s	loc_115D8
00011B26 117C 0000 001B             		move.b	#0,$1B(a0)
00011B2C                            
00011B2C                            loc_115D8:
00011B2C 7000                       		moveq	#0,d0
00011B2E 0828 0000 0028             		btst	#0,$28(a0)
00011B34 6700                       		beq.s	loc_115E4
00011B36 7002                       		moveq	#2,d0
00011B38                            
00011B38                            loc_115E4:
00011B38 D028 001B                  		add.b	$1B(a0),d0
00011B3C 1140 001A                  		move.b	d0,$1A(a0)
00011B40                            
00011B40                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011B40 6100 C030                  		bsr.w	DisplaySprite
00011B44 3028 0008                  		move.w	8(a0),d0
00011B48 0240 FF80                  		andi.w	#$FF80,d0
00011B4C 3238 F700                  		move.w	($FFFFF700).w,d1
00011B50 0441 0080                  		subi.w	#$80,d1
00011B54 0241 FF80                  		andi.w	#$FF80,d1
00011B58 9041                       		sub.w	d1,d0
00011B5A 0C40 0280                  		cmpi.w	#$280,d0
00011B5E 6200 C04E                  		bhi.w	DeleteObject
00011B62 4E75                       		rts	
00011B64                            ; ===========================================================================
00011B64                            ; ---------------------------------------------------------------------------
00011B64                            ; Sprite mappings - fans (SLZ)
00011B64                            ; ---------------------------------------------------------------------------
00011B64                            Map_obj5D:
00011B64                            	include "_maps\obj5D.asm"
00011B64                            ; ---------------------------------------------------------------------------
00011B64                            ; Sprite mappings - fans (SLZ)
00011B64                            ; ---------------------------------------------------------------------------
00011B64 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011B68 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011B6C 0000                       		dc.w byte_1161A-Map_obj5D
00011B6E 02                         byte_1161A:	dc.b 2
00011B6F F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011B74 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011B79 02                         byte_11625:	dc.b 2
00011B7A F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011B7F 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011B84 02                         byte_11630:	dc.b 2
00011B85 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011B8A 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011B90 00                         		even
00011B90 00                         		even
00011B90                            
00011B90                            ; ===========================================================================
00011B90                            ; ---------------------------------------------------------------------------
00011B90                            ; Object 5E - seesaws (SLZ)
00011B90                            ; ---------------------------------------------------------------------------
00011B90                            
00011B90                            Obj5E:					; XREF: Obj_Index
00011B90 7000                       		moveq	#0,d0
00011B92 1028 0024                  		move.b	$24(a0),d0
00011B96 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011B9A 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011B9E 3028 0030                  		move.w	$30(a0),d0
00011BA2 0240 FF80                  		andi.w	#$FF80,d0
00011BA6 3238 F700                  		move.w	($FFFFF700).w,d1
00011BAA 0441 0080                  		subi.w	#$80,d1
00011BAE 0241 FF80                  		andi.w	#$FF80,d1
00011BB2 9041                       		sub.w	d1,d0
00011BB4 6B00 BFF8                  		bmi.w	DeleteObject
00011BB8 0C40 0280                  		cmpi.w	#$280,d0
00011BBC 6200 BFF0                  		bhi.w	DeleteObject
00011BC0 6000 BFB0                  		bra.w	DisplaySprite
00011BC4                            ; ===========================================================================
00011BC4 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011BC6 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011BC8 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011BCA 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011BCC 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011BCE 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011BD0                            ; ===========================================================================
00011BD0                            
00011BD0                            Obj5E_Main:				; XREF: Obj5E_Index
00011BD0 5428 0024                  		addq.b	#2,$24(a0)
00011BD4 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011BDC 317C 0374 0002             		move.w	#$374,2(a0)
00011BE2 0028 0004 0001             		ori.b	#4,1(a0)
00011BE8 117C 0004 0018             		move.b	#4,$18(a0)
00011BEE 117C 0030 0019             		move.b	#$30,$19(a0)
00011BF4 3168 0008 0030             		move.w	8(a0),$30(a0)
00011BFA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011BFE 6600                       		bne.s	loc_116D2	; if not, branch
00011C00 6100 C40C                  		bsr.w	SingleObjLoad2
00011C04 6600                       		bne.s	loc_116D2
00011C06 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011C0A 5C29 0024                  		addq.b	#6,$24(a1)
00011C0E 3368 0008 0008             		move.w	8(a0),8(a1)
00011C14 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C1A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011C20 2348 003C                  		move.l	a0,$3C(a1)
00011C24                            
00011C24                            loc_116D2:
00011C24 0828 0000 0022             		btst	#0,$22(a0)
00011C2A 6700                       		beq.s	loc_116E0
00011C2C 117C 0002 001A             		move.b	#2,$1A(a0)
00011C32                            
00011C32                            loc_116E0:
00011C32 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011C38                            
00011C38                            Obj5E_Slope:				; XREF: Obj5E_Index
00011C38 1228 003A                  		move.b	$3A(a0),d1
00011C3C 6100 0000                  		bsr.w	loc_11766
00011C40 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011C46 0828 0000 001A             		btst	#0,$1A(a0)
00011C4C 6700                       		beq.s	loc_11702
00011C4E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011C54                            
00011C54                            loc_11702:
00011C54 43F8 D000                  		lea	($FFFFD000).w,a1
00011C58 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011C5E 323C 0030                  		move.w	#$30,d1
00011C62 4EB9 0000 7972             		jsr	(SlopeObject).l
00011C68 4E75                       		rts	
00011C6A                            ; ===========================================================================
00011C6A                            
00011C6A                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011C6A 6100 0000                  		bsr.w	loc_1174A
00011C6E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011C74 0828 0000 001A             		btst	#0,$1A(a0)
00011C7A 6700                       		beq.s	loc_11730
00011C7C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011C82                            
00011C82                            loc_11730:
00011C82 323C 0030                  		move.w	#$30,d1
00011C86 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00011C8C 323C 0030                  		move.w	#$30,d1
00011C90 3428 0008                  		move.w	8(a0),d2
00011C94 4EB9 0000 8970             		jsr	SlopeObject2
00011C9A 4E75                       		rts	
00011C9C                            ; ===========================================================================
00011C9C                            
00011C9C                            loc_1174A:				; XREF: Obj5E_Slope2
00011C9C 7202                       		moveq	#2,d1
00011C9E 43F8 D000                  		lea	($FFFFD000).w,a1
00011CA2 3028 0008                  		move.w	8(a0),d0
00011CA6 9069 0008                  		sub.w	8(a1),d0
00011CAA 6400                       		bcc.s	loc_1175E
00011CAC 4440                       		neg.w	d0
00011CAE 7200                       		moveq	#0,d1
00011CB0                            
00011CB0                            loc_1175E:
00011CB0 0C40 0008                  		cmpi.w	#8,d0
00011CB4 6400                       		bcc.s	loc_11766
00011CB6 7201                       		moveq	#1,d1
00011CB8                            
00011CB8                            loc_11766:
00011CB8 1028 001A                  		move.b	$1A(a0),d0
00011CBC B001                       		cmp.b	d1,d0
00011CBE 6700                       		beq.s	locret_11790
00011CC0 6400                       		bcc.s	loc_11772
00011CC2 5400                       		addq.b	#2,d0
00011CC4                            
00011CC4                            loc_11772:
00011CC4 5300                       		subq.b	#1,d0
00011CC6 1140 001A                  		move.b	d0,$1A(a0)
00011CCA 1141 003A                  		move.b	d1,$3A(a0)
00011CCE 08A8 0000 0001             		bclr	#0,1(a0)
00011CD4 0828 0001 001A             		btst	#1,$1A(a0)
00011CDA 6700                       		beq.s	locret_11790
00011CDC 08E8 0000 0001             		bset	#0,1(a0)
00011CE2                            
00011CE2                            locret_11790:
00011CE2 4E75                       		rts	
00011CE4                            ; ===========================================================================
00011CE4                            
00011CE4                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011CE4 5428 0024                  		addq.b	#2,$24(a0)
00011CE8 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011CF0 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011CF6 0028 0004 0001             		ori.b	#4,1(a0)
00011CFC 117C 0004 0018             		move.b	#4,$18(a0)
00011D02 117C 008B 0020             		move.b	#$8B,$20(a0)
00011D08 117C 000C 0019             		move.b	#$C,$19(a0)
00011D0E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D14 0668 0028 0008             		addi.w	#$28,8(a0)
00011D1A 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011D20 117C 0001 001A             		move.b	#1,$1A(a0)
00011D26 0828 0000 0022             		btst	#0,$22(a0)
00011D2C 6700                       		beq.s	Obj5E_MoveSpike
00011D2E 0468 0050 0008             		subi.w	#$50,8(a0)
00011D34 117C 0002 003A             		move.b	#2,$3A(a0)
00011D3A                            
00011D3A                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011D3A 2268 003C                  		movea.l	$3C(a0),a1
00011D3E 7000                       		moveq	#0,d0
00011D40 1028 003A                  		move.b	$3A(a0),d0
00011D44 9029 003A                  		sub.b	$3A(a1),d0
00011D48 6700                       		beq.s	loc_1183E
00011D4A 6400                       		bcc.s	loc_117FC
00011D4C 4400                       		neg.b	d0
00011D4E                            
00011D4E                            loc_117FC:
00011D4E 323C F7E8                  		move.w	#-$818,d1
00011D52 343C FEEC                  		move.w	#-$114,d2
00011D56 0C00 0001                  		cmpi.b	#1,d0
00011D5A 6700                       		beq.s	loc_11822
00011D5C 323C F510                  		move.w	#-$AF0,d1
00011D60 343C FF34                  		move.w	#-$CC,d2
00011D64 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011D6A 6D00                       		blt.s	loc_11822
00011D6C 323C F200                  		move.w	#-$E00,d1
00011D70 343C FF60                  		move.w	#-$A0,d2
00011D74                            
00011D74                            loc_11822:
00011D74 3141 0012                  		move.w	d1,$12(a0)
00011D78 3142 0010                  		move.w	d2,$10(a0)
00011D7C 3028 0008                  		move.w	8(a0),d0
00011D80 9068 0030                  		sub.w	$30(a0),d0
00011D84 6400                       		bcc.s	loc_11838
00011D86 4468 0010                  		neg.w	$10(a0)
00011D8A                            
00011D8A                            loc_11838:
00011D8A 5428 0024                  		addq.b	#2,$24(a0)
00011D8E 6000                       		bra.s	Obj5E_SpikeFall
00011D90                            ; ===========================================================================
00011D90                            
00011D90                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011D90 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011D96 7000                       		moveq	#0,d0
00011D98 1029 001A                  		move.b	$1A(a1),d0
00011D9C 343C 0028                  		move.w	#$28,d2
00011DA0 3228 0008                  		move.w	8(a0),d1
00011DA4 9268 0030                  		sub.w	$30(a0),d1
00011DA8 6400                       		bcc.s	loc_1185C
00011DAA 4442                       		neg.w	d2
00011DAC 5440                       		addq.w	#2,d0
00011DAE                            
00011DAE                            loc_1185C:
00011DAE D040                       		add.w	d0,d0
00011DB0 3228 0034                  		move.w	$34(a0),d1
00011DB4 D272 0000                  		add.w	(a2,d0.w),d1
00011DB8 3141 000C                  		move.w	d1,$C(a0)
00011DBC D468 0030                  		add.w	$30(a0),d2
00011DC0 3142 0008                  		move.w	d2,8(a0)
00011DC4 4268 000E                  		clr.w	$E(a0)
00011DC8 4268 000A                  		clr.w	$A(a0)
00011DCC 4E75                       		rts	
00011DCE                            ; ===========================================================================
00011DCE                            
00011DCE                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011DCE 4A68 0012                  		tst.w	$12(a0)
00011DD2 6A00                       		bpl.s	loc_1189A
00011DD4 6100 BD4A                  		bsr.w	ObjectFall
00011DD8 3028 0034                  		move.w	$34(a0),d0
00011DDC 0440 002F                  		subi.w	#$2F,d0
00011DE0 B068 000C                  		cmp.w	$C(a0),d0
00011DE4 6E00                       		bgt.s	locret_11898
00011DE6 6100 BD38                  		bsr.w	ObjectFall
00011DEA                            
00011DEA                            locret_11898:
00011DEA 4E75                       		rts	
00011DEC                            ; ===========================================================================
00011DEC                            
00011DEC                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011DEC 6100 BD32                  		bsr.w	ObjectFall
00011DF0 2268 003C                  		movea.l	$3C(a0),a1
00011DF4 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011DFA 7000                       		moveq	#0,d0
00011DFC 1029 001A                  		move.b	$1A(a1),d0
00011E00 3228 0008                  		move.w	8(a0),d1
00011E04 9268 0030                  		sub.w	$30(a0),d1
00011E08 6400                       		bcc.s	loc_118BA
00011E0A 5440                       		addq.w	#2,d0
00011E0C                            
00011E0C                            loc_118BA:
00011E0C D040                       		add.w	d0,d0
00011E0E 3228 0034                  		move.w	$34(a0),d1
00011E12 D272 0000                  		add.w	(a2,d0.w),d1
00011E16 B268 000C                  		cmp.w	$C(a0),d1
00011E1A 6E00                       		bgt.s	locret_11938
00011E1C 2268 003C                  		movea.l	$3C(a0),a1
00011E20 7202                       		moveq	#2,d1
00011E22 4A68 0010                  		tst.w	$10(a0)
00011E26 6B00                       		bmi.s	Obj5E_Spring
00011E28 7200                       		moveq	#0,d1
00011E2A                            
00011E2A                            Obj5E_Spring:
00011E2A 1341 003A                  		move.b	d1,$3A(a1)
00011E2E 1141 003A                  		move.b	d1,$3A(a0)
00011E32 B229 001A                  		cmp.b	$1A(a1),d1
00011E36 6700                       		beq.s	loc_1192C
00011E38 08A9 0003 0022             		bclr	#3,$22(a1)
00011E3E 6700                       		beq.s	loc_1192C
00011E40 4229 0025                  		clr.b	$25(a1)
00011E44 137C 0002 0024             		move.b	#2,$24(a1)
00011E4A 45F8 D000                  		lea	($FFFFD000).w,a2
00011E4E 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011E54 446A 0012                  		neg.w	$12(a2)
00011E58 08EA 0001 0022             		bset	#1,$22(a2)
00011E5E 08AA 0003 0022             		bclr	#3,$22(a2)
00011E64 422A 003C                  		clr.b	$3C(a2)
00011E68 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011E6E 157C 0002 0024             		move.b	#2,$24(a2)
00011E74 303C 00CC                  		move.w	#$CC,d0
00011E78 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
00011E7E                            
00011E7E                            loc_1192C:
00011E7E 4268 0010                  		clr.w	$10(a0)
00011E82 4268 0012                  		clr.w	$12(a0)
00011E86 5528 0024                  		subq.b	#2,$24(a0)
00011E8A                            
00011E8A                            locret_11938:
00011E8A 4E75                       		rts	
00011E8C                            ; ===========================================================================
00011E8C FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011E96                            
00011E96                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011EC6                            		even
00011EC6                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011EF6                            		even
00011EF6                            ; ---------------------------------------------------------------------------
00011EF6                            ; Sprite mappings - seesaws (SLZ)
00011EF6                            ; ---------------------------------------------------------------------------
00011EF6                            Map_obj5E:
00011EF6                            	include "_maps\obj5E.asm"
00011EF6                            ; ---------------------------------------------------------------------------
00011EF6                            ; Sprite mappings - seesaws (SLZ)
00011EF6                            ; ---------------------------------------------------------------------------
00011EF6 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011EFA 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011EFE 07                         byte_119AC:	dc.b 7
00011EFF D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011F04 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011F09 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011F0E EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011F13 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011F18 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011F1D FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011F22 04                         byte_119D0:	dc.b 4
00011F23 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011F28 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011F2D E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011F32 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011F38 00                         		even
00011F38 00                         		even
00011F38                            
00011F38                            ; ---------------------------------------------------------------------------
00011F38                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F38                            ; ---------------------------------------------------------------------------
00011F38                            Map_obj5Ea:
00011F38                            	include "_maps\obj5Eballs.asm"
00011F38                            ; ---------------------------------------------------------------------------
00011F38                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F38                            ; ---------------------------------------------------------------------------
00011F38 0000                       		dc.w byte_119EA-Map_obj5Ea
00011F3A 0000                       		dc.w byte_119F0-Map_obj5Ea
00011F3C 01                         byte_119EA:	dc.b 1
00011F3D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011F42 01                         byte_119F0:	dc.b 1
00011F43 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011F48                            		even
00011F48                            		even
00011F48                            
00011F48                            ; ===========================================================================
00011F48                            ; ---------------------------------------------------------------------------
00011F48                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011F48                            ; ---------------------------------------------------------------------------
00011F48                            
00011F48                            Obj5F:					; XREF: Obj_Index
00011F48 7000                       		moveq	#0,d0
00011F4A 1028 0024                  		move.b	$24(a0),d0
00011F4E 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011F52 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011F56                            ; ===========================================================================
00011F56 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011F58 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011F5A 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011F5C 0000                       		dc.w Obj5F_End-Obj5F_Index
00011F5E                            ; ===========================================================================
00011F5E                            
00011F5E                            Obj5F_Main:				; XREF: Obj5F_Index
00011F5E 5428 0024                  		addq.b	#2,$24(a0)
00011F62 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011F6A 317C 0400 0002             		move.w	#$400,2(a0)
00011F70 0028 0004 0001             		ori.b	#4,1(a0)
00011F76 117C 0003 0018             		move.b	#3,$18(a0)
00011F7C 117C 000C 0019             		move.b	#$C,$19(a0)
00011F82 1028 0028                  		move.b	$28(a0),d0
00011F86 6700                       		beq.s	loc_11A3C
00011F88 1140 0024                  		move.b	d0,$24(a0)
00011F8C 4E75                       		rts	
00011F8E                            ; ===========================================================================
00011F8E                            
00011F8E                            loc_11A3C:
00011F8E 117C 009A 0020             		move.b	#$9A,$20(a0)
00011F94 0868 0000 0022             		bchg	#0,$22(a0)
00011F9A                            
00011F9A                            Obj5F_Action:				; XREF: Obj5F_Index
00011F9A 7000                       		moveq	#0,d0
00011F9C 1028 0025                  		move.b	$25(a0),d0
00011FA0 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011FA4 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011FA8 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011FAE 6100 8C92                  		bsr.w	AnimateSprite
00011FB2 6000 DC66                  		bra.w	MarkObjGone
00011FB6                            ; ===========================================================================
00011FB6 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011FB8 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011FBA 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011FBC                            ; ===========================================================================
00011FBC                            
00011FBC                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011FBC 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011FC0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011FC4 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011FC6 5428 0025                  		addq.b	#2,$25(a0)
00011FCA 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011FD0 317C 0010 0010             		move.w	#$10,$10(a0)
00011FD6 117C 0001 001C             		move.b	#1,$1C(a0)
00011FDC 0868 0000 0022             		bchg	#0,$22(a0)
00011FE2 6700                       		beq.s	locret_11A96
00011FE4 4468 0010                  		neg.w	$10(a0)		; change direction
00011FE8                            
00011FE8                            locret_11A96:
00011FE8 4E75                       		rts	
00011FEA                            ; ===========================================================================
00011FEA                            
00011FEA                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011FEA 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011FEE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011FF2 6B00                       		bmi.s	loc_11AA8
00011FF4 6100 BB56                  		bsr.w	SpeedToPos
00011FF8 4E75                       		rts	
00011FFA                            ; ===========================================================================
00011FFA                            
00011FFA                            loc_11AA8:
00011FFA 5528 0025                  		subq.b	#2,$25(a0)
00011FFE 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012004 4268 0010                  		clr.w	$10(a0)		; stop walking
00012008 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001200E 4E75                       		rts	
00012010                            ; ===========================================================================
00012010                            
00012010                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012010 5368 0030                  		subq.w	#1,$30(a0)
00012014 6A00                       		bpl.s	locret_11AD0
00012016 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001201A 117C 0000 0024             		move.b	#0,$24(a0)
00012020                            
00012020                            locret_11AD0:
00012020 4E75                       		rts	
00012022                            ; ===========================================================================
00012022                            
00012022                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012022 3038 D008                  		move.w	($FFFFD008).w,d0
00012026 9068 0008                  		sub.w	8(a0),d0
0001202A 6400                       		bcc.s	loc_11ADE
0001202C 4440                       		neg.w	d0
0001202E                            
0001202E                            loc_11ADE:
0001202E 0C40 0060                  		cmpi.w	#$60,d0
00012032 6400                       		bcc.s	locret_11B5E
00012034 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012038 9068 000C                  		sub.w	$C(a0),d0
0001203C 6400                       		bcc.s	Obj5F_MakeFuse
0001203E 4440                       		neg.w	d0
00012040                            
00012040                            Obj5F_MakeFuse:
00012040 0C40 0060                  		cmpi.w	#$60,d0
00012044 6400                       		bcc.s	locret_11B5E
00012046 4A78 FE08                  		tst.w	($FFFFFE08).w
0001204A 6600                       		bne.s	locret_11B5E
0001204C 117C 0004 0025             		move.b	#4,$25(a0)
00012052 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012058 4268 0010                  		clr.w	$10(a0)
0001205C 117C 0002 001C             		move.b	#2,$1C(a0)
00012062 6100 BFAA                  		bsr.w	SingleObjLoad2
00012066 6600                       		bne.s	locret_11B5E
00012068 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001206C 3368 0008 0008             		move.w	8(a0),8(a1)
00012072 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012078 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001207E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012084 137C 0004 0028             		move.b	#4,$28(a1)
0001208A 137C 0003 001C             		move.b	#3,$1C(a1)
00012090 337C 0010 0012             		move.w	#$10,$12(a1)
00012096 0828 0001 0022             		btst	#1,$22(a0)
0001209C 6700                       		beq.s	loc_11B54
0001209E 4469 0012                  		neg.w	$12(a1)
000120A2                            
000120A2                            loc_11B54:
000120A2 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000120A8 2348 003C                  		move.l	a0,$3C(a1)
000120AC                            
000120AC                            locret_11B5E:
000120AC 4E75                       		rts	
000120AE                            ; ===========================================================================
000120AE                            
000120AE                            Obj5F_Display:				; XREF: Obj5F_Index
000120AE 6100                       		bsr.s	loc_11B70
000120B0 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000120B6 6100 8B8A                  		bsr.w	AnimateSprite
000120BA 6000 DB5E                  		bra.w	MarkObjGone
000120BE                            ; ===========================================================================
000120BE                            
000120BE                            loc_11B70:
000120BE 5368 0030                  		subq.w	#1,$30(a0)
000120C2 6B00                       		bmi.s	loc_11B7C
000120C4 6100 BA86                  		bsr.w	SpeedToPos
000120C8 4E75                       		rts	
000120CA                            ; ===========================================================================
000120CA                            
000120CA                            loc_11B7C:
000120CA 4268 0030                  		clr.w	$30(a0)
000120CE 4228 0024                  		clr.b	$24(a0)
000120D2 3168 0034 000C             		move.w	$34(a0),$C(a0)
000120D8 7203                       		moveq	#3,d1
000120DA 2248                       		movea.l	a0,a1
000120DC 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000120E2 6000                       		bra.s	Obj5F_MakeShrap
000120E4                            ; ===========================================================================
000120E4                            
000120E4                            Obj5F_Loop:
000120E4 6100 BF28                  		bsr.w	SingleObjLoad2
000120E8 6600                       		bne.s	loc_11BCE
000120EA                            
000120EA                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000120EA 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000120EE 3368 0008 0008             		move.w	8(a0),8(a1)
000120F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120FA 137C 0006 0028             		move.b	#6,$28(a1)
00012100 137C 0004 001C             		move.b	#4,$1C(a1)
00012106 335A 0010                  		move.w	(a2)+,$10(a1)
0001210A 335A 0012                  		move.w	(a2)+,$12(a1)
0001210E 137C 0098 0020             		move.b	#$98,$20(a1)
00012114 08E9 0007 0001             		bset	#7,1(a1)
0001211A                            
0001211A                            loc_11BCE:
0001211A 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001211E                            
0001211E 117C 0006 0024             		move.b	#6,$24(a0)
00012124                            
00012124                            Obj5F_End:				; XREF: Obj5F_Index
00012124 6100 BA26                  		bsr.w	SpeedToPos
00012128 0668 0018 0012             		addi.w	#$18,$12(a0)
0001212E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012134 6100 8B0C                  		bsr.w	AnimateSprite
00012138 4A28 0001                  		tst.b	1(a0)
0001213C 6A00 BA70                  		bpl.w	DeleteObject
00012140 6000 BA30                  		bra.w	DisplaySprite
00012144                            ; ===========================================================================
00012144 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012154                            
00012154                            Ani_obj5F:
00012154                            	include "_anim\obj5F.asm"
00012154                            ; ---------------------------------------------------------------------------
00012154                            ; Animation script - Bomb enemy
00012154                            ; ---------------------------------------------------------------------------
00012154 0000                       		dc.w byte_11C12-Ani_obj5F
00012156 0000                       		dc.w byte_11C16-Ani_obj5F
00012158 0000                       		dc.w byte_11C1C-Ani_obj5F
0001215A 0000                       		dc.w byte_11C20-Ani_obj5F
0001215C 0000                       		dc.w byte_11C24-Ani_obj5F
0001215E 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012162 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012168 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001216C 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012170 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012174                            		even
00012174                            		even
00012174                            
00012174                            ; ---------------------------------------------------------------------------
00012174                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012174                            ; ---------------------------------------------------------------------------
00012174                            Map_obj5F:
00012174                            	include "_maps\obj5F.asm"
00012174                            ; ---------------------------------------------------------------------------
00012174                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012174                            ; ---------------------------------------------------------------------------
00012174 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012178 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001217C 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012180 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012184 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012188 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001218C 03                         byte_11C40:	dc.b 3
0001218D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012192 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012197 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001219C 03                         byte_11C50:	dc.b 3
0001219D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121A2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121A7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121AC 03                         byte_11C60:	dc.b 3
000121AD F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000121B2 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000121B7 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000121BC 03                         byte_11C70:	dc.b 3
000121BD F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121C2 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000121C7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121CC 03                         byte_11C80:	dc.b 3
000121CD F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000121D2 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000121D7 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000121DC 03                         byte_11C90:	dc.b 3
000121DD F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121E2 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000121E7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121EC 02                         byte_11CA0:	dc.b 2
000121ED F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000121F2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121F7 02                         byte_11CAB:	dc.b 2
000121F8 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121FD 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012202 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012203 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012208 01                         byte_11CBC:	dc.b 1			; fuse
00012209 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001220E 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001220F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012214 01                         byte_11CC8:	dc.b 1			; fireball
00012215 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001221A                            		even
0001221A                            		even
0001221A                            
0001221A                            ; ===========================================================================
0001221A                            ; ---------------------------------------------------------------------------
0001221A                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001221A                            ; ---------------------------------------------------------------------------
0001221A                            
0001221A                            Obj60:					; XREF: Obj_Index
0001221A 7000                       		moveq	#0,d0
0001221C 1028 0024                  		move.b	$24(a0),d0
00012220 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012224 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012228                            ; ===========================================================================
00012228 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001222A 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001222C 0000                       		dc.w Obj60_Display-Obj60_Index
0001222E 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012230 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012232                            ; ===========================================================================
00012232                            
00012232                            Obj60_Main:				; XREF: Obj60_Index
00012232 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001223A 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012240 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012246 6700                       		beq.s	loc_11D02
00012248 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001224E                            
0001224E                            loc_11D02:
0001224E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012254 6600                       		bne.s	loc_11D10
00012256 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001225C                            
0001225C                            loc_11D10:
0001225C 0028 0004 0001             		ori.b	#4,1(a0)
00012262 117C 0004 0018             		move.b	#4,$18(a0)
00012268 117C 000B 0020             		move.b	#$B,$20(a0)
0001226E 117C 000C 0019             		move.b	#$C,$19(a0)
00012274 7400                       		moveq	#0,d2
00012276 45E8 0037                  		lea	$37(a0),a2
0001227A 264A                       		movea.l	a2,a3
0001227C 524A                       		addq.w	#1,a2
0001227E 7203                       		moveq	#3,d1
00012280                            
00012280                            Obj60_MakeOrbs:
00012280 6100 BD8C                  		bsr.w	SingleObjLoad2
00012284 6600                       		bne.s	loc_11D90
00012286 5213                       		addq.b	#1,(a3)
00012288 3A09                       		move.w	a1,d5
0001228A 0445 D000                  		subi.w	#-$3000,d5
0001228E EC4D                       		lsr.w	#6,d5
00012290 0245 007F                  		andi.w	#$7F,d5
00012294 14C5                       		move.b	d5,(a2)+
00012296 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012298 137C 0006 0024             		move.b	#6,$24(a1)
0001229E 2368 0004 0004             		move.l	4(a0),4(a1)
000122A4 3368 0002 0002             		move.w	2(a0),2(a1)
000122AA 0029 0004 0001             		ori.b	#4,1(a1)
000122B0 137C 0004 0018             		move.b	#4,$18(a1)
000122B6 137C 0008 0019             		move.b	#8,$19(a1)
000122BC 137C 0003 001A             		move.b	#3,$1A(a1)
000122C2 137C 0098 0020             		move.b	#$98,$20(a1)
000122C8 1342 0026                  		move.b	d2,$26(a1)
000122CC 0602 0040                  		addi.b	#$40,d2
000122D0 2348 003C                  		move.l	a0,$3C(a1)
000122D4 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000122D8                            
000122D8                            loc_11D90:
000122D8 7001                       		moveq	#1,d0
000122DA 0828 0000 0022             		btst	#0,$22(a0)
000122E0 6700                       		beq.s	Obj60_Move
000122E2 4440                       		neg.w	d0
000122E4                            
000122E4                            Obj60_Move:
000122E4 1140 0036                  		move.b	d0,$36(a0)
000122E8 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000122EE 5428 0024                  		addq.b	#2,$24(a0)
000122F2 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000122F8 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000122FE 6700                       		beq.s	locret_11DBC	; if not, branch
00012300 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012304                            
00012304                            locret_11DBC:
00012304 4E75                       		rts	
00012306                            ; ===========================================================================
00012306                            
00012306                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012306 3038 D008                  		move.w	($FFFFD008).w,d0
0001230A 9068 0008                  		sub.w	8(a0),d0
0001230E 6400                       		bcc.s	loc_11DCA
00012310 4440                       		neg.w	d0
00012312                            
00012312                            loc_11DCA:
00012312 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012316 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012318 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001231C 9068 000C                  		sub.w	$C(a0),d0
00012320 6400                       		bcc.s	loc_11DDC
00012322 4440                       		neg.w	d0
00012324                            
00012324                            loc_11DDC:
00012324 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012328 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001232A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001232E 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012330 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012336                            
00012336                            Obj60_Animate:
00012336 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001233C 6100 8904                  		bsr.w	AnimateSprite
00012340 6000 0000                  		bra.w	Obj60_ChkDel
00012344                            ; ===========================================================================
00012344                            
00012344                            Obj60_Display:				; XREF: Obj60_Index
00012344 6100 B806                  		bsr.w	SpeedToPos
00012348                            
00012348                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012348 3028 0008                  		move.w	8(a0),d0
0001234C 0240 FF80                  		andi.w	#$FF80,d0
00012350 3238 F700                  		move.w	($FFFFF700).w,d1
00012354 0441 0080                  		subi.w	#$80,d1
00012358 0241 FF80                  		andi.w	#$FF80,d1
0001235C 9041                       		sub.w	d1,d0
0001235E 0C40 0280                  		cmpi.w	#$280,d0
00012362 6200 0000                  		bhi.w	Obj60_ChkGone
00012366 6000 B80A                  		bra.w	DisplaySprite
0001236A                            ; ===========================================================================
0001236A                            
0001236A                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001236A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001236E 7000                       		moveq	#0,d0
00012370 1028 0023                  		move.b	$23(a0),d0
00012374 6700                       		beq.s	loc_11E34
00012376 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001237C                            
0001237C                            loc_11E34:
0001237C 45E8 0037                  		lea	$37(a0),a2
00012380 7400                       		moveq	#0,d2
00012382 141A                       		move.b	(a2)+,d2
00012384 5342                       		subq.w	#1,d2
00012386 6500                       		bcs.s	Obj60_Delete
00012388                            
00012388                            loc_11E40:
00012388 7000                       		moveq	#0,d0
0001238A 101A                       		move.b	(a2)+,d0
0001238C ED48                       		lsl.w	#6,d0
0001238E 0680 00FF D000             		addi.l	#$FFD000,d0
00012394 2240                       		movea.l	d0,a1
00012396 6100 B818                  		bsr.w	DeleteObject2
0001239A 51CA FFEC                  		dbf	d2,loc_11E40
0001239E                            
0001239E                            Obj60_Delete:
0001239E 6000 B80E                  		bra.w	DeleteObject
000123A2                            ; ===========================================================================
000123A2                            
000123A2                            Obj60_MoveOrb:				; XREF: Obj60_Index
000123A2 2268 003C                  		movea.l	$3C(a0),a1
000123A6 0C11 0060                  		cmpi.b	#$60,0(a1)
000123AA 6600 B802                  		bne.w	DeleteObject
000123AE 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000123B4 6600                       		bne.s	Obj60_Circle
000123B6 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000123BC 6600                       		bne.s	Obj60_Circle
000123BE 5428 0024                  		addq.b	#2,$24(a0)
000123C2 5329 0037                  		subq.b	#1,$37(a1)
000123C6 6600                       		bne.s	Obj60_FireOrb
000123C8 5429 0024                  		addq.b	#2,$24(a1)
000123CC                            
000123CC                            Obj60_FireOrb:
000123CC 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000123D2 0829 0000 0022             		btst	#0,$22(a1)
000123D8 6700                       		beq.s	Obj60_Display2
000123DA 4468 0010                  		neg.w	$10(a0)
000123DE                            
000123DE                            Obj60_Display2:
000123DE 6000 B792                  		bra.w	DisplaySprite
000123E2                            ; ===========================================================================
000123E2                            
000123E2                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000123E2 1028 0026                  		move.b	$26(a0),d0
000123E6 4EB9 0000 2C22             		jsr	(CalcSine).l
000123EC E841                       		asr.w	#4,d1
000123EE D269 0008                  		add.w	8(a1),d1
000123F2 3141 0008                  		move.w	d1,8(a0)
000123F6 E840                       		asr.w	#4,d0
000123F8 D069 000C                  		add.w	$C(a1),d0
000123FC 3140 000C                  		move.w	d0,$C(a0)
00012400 1029 0036                  		move.b	$36(a1),d0
00012404 D128 0026                  		add.b	d0,$26(a0)
00012408 6000 B768                  		bra.w	DisplaySprite
0001240C                            ; ===========================================================================
0001240C                            
0001240C                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001240C 6100 B73E                  		bsr.w	SpeedToPos
00012410 4A28 0001                  		tst.b	1(a0)
00012414 6A00 B798                  		bpl.w	DeleteObject
00012418 6000 B758                  		bra.w	DisplaySprite
0001241C                            ; ===========================================================================
0001241C                            Ani_obj60:
0001241C                            	include "_anim\obj60.asm"
0001241C                            ; ---------------------------------------------------------------------------
0001241C                            ; Animation script - Orbinaut enemy
0001241C                            ; ---------------------------------------------------------------------------
0001241C 0000                       		dc.w byte_11EDA-Ani_obj60
0001241E 0000                       		dc.w byte_11EDE-Ani_obj60
00012420 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012424 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001242A                            		even
0001242A                            		even
0001242A                            
0001242A                            ; ---------------------------------------------------------------------------
0001242A                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001242A                            ; ---------------------------------------------------------------------------
0001242A                            Map_obj60:
0001242A                            	include "_maps\obj60.asm"
0001242A                            ; ---------------------------------------------------------------------------
0001242A                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001242A                            ; ---------------------------------------------------------------------------
0001242A 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001242E 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012432 01                         byte_11EEC:	dc.b 1
00012433 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012438 01                         byte_11EF2:	dc.b 1
00012439 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001243E 01                         byte_11EF8:	dc.b 1
0001243F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012444 01                         byte_11EFE:	dc.b 1
00012445 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001244A                            		even
0001244A                            		even
0001244A                            
0001244A                            ; ===========================================================================
0001244A                            ; ---------------------------------------------------------------------------
0001244A                            ; Object 16 - harpoon (LZ)
0001244A                            ; ---------------------------------------------------------------------------
0001244A                            
0001244A                            Obj16:					; XREF: Obj_Index
0001244A 7000                       		moveq	#0,d0
0001244C 1028 0024                  		move.b	$24(a0),d0
00012450 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012454 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012458                            ; ===========================================================================
00012458 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001245A 0000                       		dc.w Obj16_Move-Obj16_Index
0001245C 0000                       		dc.w Obj16_Wait-Obj16_Index
0001245E                            ; ===========================================================================
0001245E                            
0001245E                            Obj16_Main:				; XREF: Obj16_Index
0001245E 5428 0024                  		addq.b	#2,$24(a0)
00012462 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001246A 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012470 0028 0004 0001             		ori.b	#4,1(a0)
00012476 117C 0004 0018             		move.b	#4,$18(a0)
0001247C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012482 117C 0014 0019             		move.b	#$14,$19(a0)
00012488 317C 003C 0030             		move.w	#60,$30(a0)
0001248E                            
0001248E                            Obj16_Move:				; XREF: Obj16_Index
0001248E 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012494 6100 87AC                  		bsr.w	AnimateSprite
00012498 7000                       		moveq	#0,d0
0001249A 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001249E 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000124A4 6000 D774                  		bra.w	MarkObjGone
000124A8                            ; ===========================================================================
000124A8 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000124AE                            ; ===========================================================================
000124AE                            
000124AE                            Obj16_Wait:				; XREF: Obj16_Index
000124AE 5368 0030                  		subq.w	#1,$30(a0)
000124B2 6A00                       		bpl.s	Obj16_ChkDel
000124B4 317C 003C 0030             		move.w	#60,$30(a0)
000124BA 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000124BE 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000124C4                            
000124C4                            Obj16_ChkDel:
000124C4 6000 D754                  		bra.w	MarkObjGone
000124C8                            ; ===========================================================================
000124C8                            Ani_obj16:
000124C8                            	include "_anim\obj16.asm"
000124C8                            ; ---------------------------------------------------------------------------
000124C8                            ; Animation script - harpoon (LZ)
000124C8                            ; ---------------------------------------------------------------------------
000124C8 0000                       		dc.w byte_11F8A-Ani_obj16
000124CA 0000                       		dc.w byte_11F8E-Ani_obj16
000124CC 0000                       		dc.w byte_11F92-Ani_obj16
000124CE 0000                       		dc.w byte_11F96-Ani_obj16
000124D0 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000124D4 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000124D8 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000124DC 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000124E0                            		even
000124E0                            		even
000124E0                            
000124E0                            ; ---------------------------------------------------------------------------
000124E0                            ; Sprite mappings - harpoon (LZ)
000124E0                            ; ---------------------------------------------------------------------------
000124E0                            Map_obj16:
000124E0                            	include "_maps\obj16.asm"
000124E0                            ; ---------------------------------------------------------------------------
000124E0                            ; Sprite mappings - harpoon (LZ)
000124E0                            ; ---------------------------------------------------------------------------
000124E0 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000124E4 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000124E8 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000124EC 01                         byte_11FA6:	dc.b 1
000124ED FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000124F2 01                         byte_11FAC:	dc.b 1
000124F3 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000124F8 02                         byte_11FB2:	dc.b 2
000124F9 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000124FE FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012503 01                         byte_11FBD:	dc.b 1
00012504 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012509 01                         byte_11FC3:	dc.b 1
0001250A E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001250F 02                         byte_11FC9:	dc.b 2
00012510 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012515 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001251A                            		even
0001251A                            		even
0001251A                            
0001251A                            ; ===========================================================================
0001251A                            ; ---------------------------------------------------------------------------
0001251A                            ; Object 61 - blocks (LZ)
0001251A                            ; ---------------------------------------------------------------------------
0001251A                            
0001251A                            Obj61:					; XREF: Obj_Index
0001251A 7000                       		moveq	#0,d0
0001251C 1028 0024                  		move.b	$24(a0),d0
00012520 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012524 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012528                            ; ===========================================================================
00012528 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001252A 0000                       		dc.w Obj61_Action-Obj61_Index
0001252C                            
0001252C 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001252E 200C                       		dc.b $20, $C
00012530 1010                       		dc.b $10, $10
00012532 1010                       		dc.b $10, $10
00012534                            ; ===========================================================================
00012534                            
00012534                            Obj61_Main:				; XREF: Obj61_Index
00012534 5428 0024                  		addq.b	#2,$24(a0)
00012538 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012540 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012546 117C 0004 0001             		move.b	#4,1(a0)
0001254C 117C 0003 0018             		move.b	#3,$18(a0)
00012552 7000                       		moveq	#0,d0
00012554 1028 0028                  		move.b	$28(a0),d0
00012558 E648                       		lsr.w	#3,d0
0001255A 0240 000E                  		andi.w	#$E,d0
0001255E 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012562 115A 0019                  		move.b	(a2)+,$19(a0)
00012566 1152 0016                  		move.b	(a2),$16(a0)
0001256A E248                       		lsr.w	#1,d0
0001256C 1140 001A                  		move.b	d0,$1A(a0)
00012570 3168 0008 0034             		move.w	8(a0),$34(a0)
00012576 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001257C 1028 0028                  		move.b	$28(a0),d0
00012580 0200 000F                  		andi.b	#$F,d0
00012584 6700                       		beq.s	Obj61_Action
00012586 0C00 0007                  		cmpi.b	#7,d0
0001258A 6700                       		beq.s	Obj61_Action
0001258C 117C 0001 0038             		move.b	#1,$38(a0)
00012592                            
00012592                            Obj61_Action:				; XREF: Obj61_Index
00012592 3F28 0008                  		move.w	8(a0),-(sp)
00012596 7000                       		moveq	#0,d0
00012598 1028 0028                  		move.b	$28(a0),d0
0001259C 0240 000F                  		andi.w	#$F,d0
000125A0 D040                       		add.w	d0,d0
000125A2 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000125A6 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000125AA 381F                       		move.w	(sp)+,d4
000125AC 4A28 0001                  		tst.b	1(a0)
000125B0 6A00                       		bpl.s	Obj61_ChkDel
000125B2 7200                       		moveq	#0,d1
000125B4 1228 0019                  		move.b	$19(a0),d1
000125B8 0641 000B                  		addi.w	#$B,d1
000125BC 7400                       		moveq	#0,d2
000125BE 1428 0016                  		move.b	$16(a0),d2
000125C2 3602                       		move.w	d2,d3
000125C4 5243                       		addq.w	#1,d3
000125C6 6100 D97A                  		bsr.w	SolidObject
000125CA 1144 003F                  		move.b	d4,$3F(a0)
000125CE 6100 0000                  		bsr.w	loc_12180
000125D2                            
000125D2                            Obj61_ChkDel:
000125D2 3028 0034                  		move.w	$34(a0),d0
000125D6 0240 FF80                  		andi.w	#$FF80,d0
000125DA 3238 F700                  		move.w	($FFFFF700).w,d1
000125DE 0441 0080                  		subi.w	#$80,d1
000125E2 0241 FF80                  		andi.w	#$FF80,d1
000125E6 9041                       		sub.w	d1,d0
000125E8 0C40 0280                  		cmpi.w	#$280,d0
000125EC 6200 B5C0                  		bhi.w	DeleteObject
000125F0 6000 B580                  		bra.w	DisplaySprite
000125F4                            ; ===========================================================================
000125F4 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000125F8 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000125FC 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012600 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012604                            ; ===========================================================================
00012604                            
00012604                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012604 4E75                       		rts	
00012606                            ; ===========================================================================
00012606                            
00012606                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012606 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001260A 6600                       		bne.s	loc_120D6	; if yes, branch
0001260C 0828 0003 0022             		btst	#3,$22(a0)
00012612 6700                       		beq.s	locret_120D4
00012614 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
0001261A                            
0001261A                            locret_120D4:
0001261A 4E75                       		rts	
0001261C                            ; ===========================================================================
0001261C                            
0001261C                            loc_120D6:
0001261C 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012620 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012622 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012626 4228 0038                  		clr.b	$38(a0)
0001262A 4E75                       		rts	
0001262C                            ; ===========================================================================
0001262C                            
0001262C                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001262C 6100 B51E                  		bsr.w	SpeedToPos
00012630 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012634 6100 0000                  		bsr.w	ObjHitFloor
00012638 4A41                       		tst.w	d1
0001263A 6A00 0000                  		bpl.w	locret_12106
0001263E 5241                       		addq.w	#1,d1
00012640 D368 000C                  		add.w	d1,$C(a0)
00012644 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012648 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001264C                            
0001264C                            locret_12106:
0001264C 4E75                       		rts	
0001264E                            ; ===========================================================================
0001264E                            
0001264E                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001264E 6100 B4FC                  		bsr.w	SpeedToPos
00012652 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012656 6100 0000                  		bsr.w	ObjHitCeiling
0001265A 4A41                       		tst.w	d1
0001265C 6A00 0000                  		bpl.w	locret_12126
00012660 9368 000C                  		sub.w	d1,$C(a0)
00012664 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012668 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001266C                            
0001266C                            locret_12126:
0001266C 4E75                       		rts	
0001266E                            ; ===========================================================================
0001266E                            
0001266E                            Obj61_Type05:				; XREF: Obj61_TypeIndex
0001266E 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012674 6600                       		bne.s	locret_12138	; if not, branch
00012676 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001267A 4228 0038                  		clr.b	$38(a0)
0001267E                            
0001267E                            locret_12138:
0001267E 4E75                       		rts	
00012680                            ; ===========================================================================
00012680                            
00012680                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012680 3038 F646                  		move.w	($FFFFF646).w,d0
00012684 9068 000C                  		sub.w	$C(a0),d0
00012688 6700                       		beq.s	locret_1217E
0001268A 6400                       		bcc.s	loc_12162
0001268C 0C40 FFFE                  		cmpi.w	#-2,d0
00012690 6C00                       		bge.s	loc_1214E
00012692 70FE                       		moveq	#-2,d0
00012694                            
00012694                            loc_1214E:
00012694 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012698 6100 0000                  		bsr.w	ObjHitCeiling
0001269C 4A41                       		tst.w	d1
0001269E 6A00 0000                  		bpl.w	locret_12160
000126A2 9368 000C                  		sub.w	d1,$C(a0)
000126A6                            
000126A6                            locret_12160:
000126A6 4E75                       		rts	
000126A8                            ; ===========================================================================
000126A8                            
000126A8                            loc_12162:				; XREF: Obj61_Type07
000126A8 0C40 0002                  		cmpi.w	#2,d0
000126AC 6F00                       		ble.s	loc_1216A
000126AE 7002                       		moveq	#2,d0
000126B0                            
000126B0                            loc_1216A:
000126B0 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000126B4 6100 0000                  		bsr.w	ObjHitFloor
000126B8 4A41                       		tst.w	d1
000126BA 6A00 0000                  		bpl.w	locret_1217E
000126BE 5241                       		addq.w	#1,d1
000126C0 D368 000C                  		add.w	d1,$C(a0)
000126C4                            
000126C4                            locret_1217E:
000126C4 4E75                       		rts	
000126C6                            ; ===========================================================================
000126C6                            
000126C6                            loc_12180:				; XREF: Obj61_Action
000126C6 4A28 0038                  		tst.b	$38(a0)
000126CA 6700                       		beq.s	locret_121C0
000126CC 0828 0003 0022             		btst	#3,$22(a0)
000126D2 6600                       		bne.s	loc_1219A
000126D4 4A28 003E                  		tst.b	$3E(a0)
000126D8 6700                       		beq.s	locret_121C0
000126DA 5928 003E                  		subq.b	#4,$3E(a0)
000126DE 6000                       		bra.s	loc_121A6
000126E0                            ; ===========================================================================
000126E0                            
000126E0                            loc_1219A:
000126E0 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000126E6 6700                       		beq.s	locret_121C0
000126E8 5828 003E                  		addq.b	#4,$3E(a0)
000126EC                            
000126EC                            loc_121A6:
000126EC 1028 003E                  		move.b	$3E(a0),d0
000126F0 4EB9 0000 2C22             		jsr	(CalcSine).l
000126F6 323C 0400                  		move.w	#$400,d1
000126FA C1C1                       		muls.w	d1,d0
000126FC 4840                       		swap	d0
000126FE D068 0030                  		add.w	$30(a0),d0
00012702 3140 000C                  		move.w	d0,$C(a0)
00012706                            
00012706                            locret_121C0:
00012706 4E75                       		rts	
00012708                            ; ===========================================================================
00012708                            ; ---------------------------------------------------------------------------
00012708                            ; Sprite mappings - blocks (LZ)
00012708                            ; ---------------------------------------------------------------------------
00012708                            Map_obj61:
00012708                            	include "_maps\obj61.asm"
00012708                            ; ---------------------------------------------------------------------------
00012708                            ; Sprite mappings - blocks (LZ)
00012708                            ; ---------------------------------------------------------------------------
00012708 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001270C 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012710 01                         byte_121CA:	dc.b 1
00012711 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012716 02                         byte_121D0:	dc.b 2
00012717 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001271C F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012721 01                         byte_121DB:	dc.b 1
00012722 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012727 01                         byte_121E1:	dc.b 1
00012728 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001272E 00                         		even
0001272E 00                         		even
0001272E                            
0001272E                            ; ===========================================================================
0001272E                            ; ---------------------------------------------------------------------------
0001272E                            ; Object 62 - gargoyle head (LZ)
0001272E                            ; ---------------------------------------------------------------------------
0001272E                            
0001272E                            Obj62:					; XREF: Obj_Index
0001272E 7000                       		moveq	#0,d0
00012730 1028 0024                  		move.b	$24(a0),d0
00012734 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012738 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001273C 6000 D4DC                  		bra.w	MarkObjGone
00012740                            ; ===========================================================================
00012740 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012742 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012744 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012746 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012748                            
00012748 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012750                            ; ===========================================================================
00012750                            
00012750                            Obj62_Main:				; XREF: Obj62_Index
00012750 5428 0024                  		addq.b	#2,$24(a0)
00012754 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001275C 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012762 0028 0004 0001             		ori.b	#4,1(a0)
00012768 117C 0003 0018             		move.b	#3,$18(a0)
0001276E 117C 0010 0019             		move.b	#$10,$19(a0)
00012774 1028 0028                  		move.b	$28(a0),d0	; get object type
00012778 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001277C 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012782 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012788 0228 000F 0028             		andi.b	#$F,$28(a0)
0001278E                            
0001278E                            Obj62_MakeFire:				; XREF: Obj62_Index
0001278E 5328 001E                  		subq.b	#1,$1E(a0)
00012792 6600                       		bne.s	Obj62_NoFire
00012794 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001279A 6100 B650                  		bsr.w	ChkObjOnScreen
0001279E 6600                       		bne.s	Obj62_NoFire
000127A0 6100 B856                  		bsr.w	SingleObjLoad
000127A4 6600                       		bne.s	Obj62_NoFire
000127A6 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000127AA 5829 0024                  		addq.b	#4,$24(a1)
000127AE 3368 0008 0008             		move.w	8(a0),8(a1)
000127B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000127BA 1368 0001 0001             		move.b	1(a0),1(a1)
000127C0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000127C6                            
000127C6                            Obj62_NoFire:
000127C6 4E75                       		rts	
000127C8                            ; ===========================================================================
000127C8                            
000127C8                            Obj62_FireBall:				; XREF: Obj62_Index
000127C8 5428 0024                  		addq.b	#2,$24(a0)
000127CC 117C 0008 0016             		move.b	#8,$16(a0)
000127D2 117C 0008 0017             		move.b	#8,$17(a0)
000127D8 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000127E0 317C 02E9 0002             		move.w	#$2E9,2(a0)
000127E6 0028 0004 0001             		ori.b	#4,1(a0)
000127EC 117C 0004 0018             		move.b	#4,$18(a0)
000127F2 117C 0098 0020             		move.b	#$98,$20(a0)
000127F8 117C 0008 0019             		move.b	#8,$19(a0)
000127FE 117C 0002 001A             		move.b	#2,$1A(a0)
00012804 5068 000C                  		addq.w	#8,$C(a0)
00012808 317C 0200 0010             		move.w	#$200,$10(a0)
0001280E 0828 0000 0022             		btst	#0,$22(a0)
00012814 6600                       		bne.s	Obj62_Sound
00012816 4468 0010                  		neg.w	$10(a0)
0001281A                            
0001281A                            Obj62_Sound:
0001281A 303C 00AE                  		move.w	#$AE,d0
0001281E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012824                            
00012824                            Obj62_AniFire:				; XREF: Obj62_Index
00012824 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012828 0200 0007                  		andi.b	#7,d0
0001282C 6600                       		bne.s	Obj62_StopFire
0001282E 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012834                            
00012834                            Obj62_StopFire:
00012834 6100 B316                  		bsr.w	SpeedToPos
00012838 0828 0000 0022             		btst	#0,$22(a0)
0001283E 6600                       		bne.s	Obj62_StopFire2
00012840 76F8                       		moveq	#-8,d3
00012842 6100 0000                  		bsr.w	ObjHitWallLeft
00012846 4A41                       		tst.w	d1
00012848 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001284C 4E75                       		rts	
0001284E                            ; ===========================================================================
0001284E                            
0001284E                            Obj62_StopFire2:
0001284E 7608                       		moveq	#8,d3
00012850 6100 0000                  		bsr.w	ObjHitWallRight
00012854 4A41                       		tst.w	d1
00012856 6B00 B356                  		bmi.w	DeleteObject
0001285A 4E75                       		rts	
0001285C                            ; ===========================================================================
0001285C                            ; ---------------------------------------------------------------------------
0001285C                            ; Sprite mappings - gargoyle head (LZ)
0001285C                            ; ---------------------------------------------------------------------------
0001285C                            Map_obj62:
0001285C                            	include "_maps\obj62.asm"
0001285C                            ; ---------------------------------------------------------------------------
0001285C                            ; Sprite mappings - gargoyle head (LZ)
0001285C                            ; ---------------------------------------------------------------------------
0001285C 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012860 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012864 03                         byte_12320:	dc.b 3
00012865 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001286A F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
0001286F 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012874 01                         byte_12330:	dc.b 1
00012875 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001287A 01                         byte_12336:	dc.b 1
0001287B FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012880                            		even
00012880                            		even
00012880                            
00012880                            ; ===========================================================================
00012880                            ; ---------------------------------------------------------------------------
00012880                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012880                            ; ---------------------------------------------------------------------------
00012880                            
00012880                            Obj63:					; XREF: Obj_Index
00012880 7000                       		moveq	#0,d0
00012882 1028 0024                  		move.b	$24(a0),d0
00012886 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
0001288A 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
0001288E 3028 0030                  		move.w	$30(a0),d0
00012892 0240 FF80                  		andi.w	#$FF80,d0
00012896 3238 F700                  		move.w	($FFFFF700).w,d1
0001289A 0441 0080                  		subi.w	#$80,d1
0001289E 0241 FF80                  		andi.w	#$FF80,d1
000128A2 9041                       		sub.w	d1,d0
000128A4 0C40 0280                  		cmpi.w	#$280,d0
000128A8 6200                       		bhi.s	loc_1236A
000128AA                            
000128AA                            Obj63_Display:				; XREF: loc_1236A
000128AA 6000 B2C6                  		bra.w	DisplaySprite
000128AE                            ; ===========================================================================
000128AE                            
000128AE                            loc_1236A:				; XREF: Obj63
000128AE 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000128B4 6600                       		bne.s	loc_12378
000128B6 0C40 FF80                  		cmpi.w	#-$80,d0
000128BA 64EE                       		bcc.s	Obj63_Display
000128BC                            
000128BC                            loc_12378:
000128BC 1028 002F                  		move.b	$2F(a0),d0
000128C0 6A00 B2EC                  		bpl.w	DeleteObject
000128C4 0240 007F                  		andi.w	#$7F,d0
000128C8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000128CC 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000128D2 6000 B2DA                  		bra.w	DeleteObject
000128D6                            ; ===========================================================================
000128D6 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000128D8 0000                       		dc.w loc_124B2-Obj63_Index
000128DA 0000                       		dc.w loc_124C2-Obj63_Index
000128DC 0000                       		dc.w loc_124DE-Obj63_Index
000128DE                            ; ===========================================================================
000128DE                            
000128DE                            Obj63_Main:				; XREF: Obj63_Index
000128DE 1028 0028                  		move.b	$28(a0),d0
000128E2 6B00 0000                  		bmi.w	loc_12460
000128E6 5428 0024                  		addq.b	#2,$24(a0)
000128EA 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000128F2 317C 43F6 0002             		move.w	#$43F6,2(a0)
000128F8 0028 0004 0001             		ori.b	#4,1(a0)
000128FE 117C 0010 0019             		move.b	#$10,$19(a0)
00012904 117C 0004 0018             		move.b	#4,$18(a0)
0001290A 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012910 6600                       		bne.s	loc_123E2
00012912 5828 0024                  		addq.b	#4,$24(a0)
00012916 317C 03F6 0002             		move.w	#$3F6,2(a0)
0001291C 117C 0001 0018             		move.b	#1,$18(a0)
00012922 6000 0000                  		bra.w	loc_124DE
00012926                            ; ===========================================================================
00012926                            
00012926                            loc_123E2:
00012926 117C 0004 001A             		move.b	#4,$1A(a0)
0001292C 7000                       		moveq	#0,d0
0001292E 1028 0028                  		move.b	$28(a0),d0
00012932 3200                       		move.w	d0,d1
00012934 E648                       		lsr.w	#3,d0
00012936 0240 001E                  		andi.w	#$1E,d0
0001293A 45FA 0000                  		lea	Obj63_Data(pc),a2
0001293E D4F2 0000                  		adda.w	(a2,d0.w),a2
00012942 315A 0038                  		move.w	(a2)+,$38(a0)
00012946 315A 0030                  		move.w	(a2)+,$30(a0)
0001294A 214A 003C                  		move.l	a2,$3C(a0)
0001294E 0241 000F                  		andi.w	#$F,d1
00012952 E549                       		lsl.w	#2,d1
00012954 1141 0038                  		move.b	d1,$38(a0)
00012958 117C 0004 003A             		move.b	#4,$3A(a0)
0001295E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012962 6700                       		beq.s	loc_1244C
00012964 117C 0001 003B             		move.b	#1,$3B(a0)
0001296A 4428 003A                  		neg.b	$3A(a0)
0001296E 7200                       		moveq	#0,d1
00012970 1228 0038                  		move.b	$38(a0),d1
00012974 D228 003A                  		add.b	$3A(a0),d1
00012978 B228 0039                  		cmp.b	$39(a0),d1
0001297C 6500                       		bcs.s	loc_12448
0001297E 1001                       		move.b	d1,d0
00012980 7200                       		moveq	#0,d1
00012982 4A00                       		tst.b	d0
00012984 6A00                       		bpl.s	loc_12448
00012986 1228 0039                  		move.b	$39(a0),d1
0001298A 5901                       		subq.b	#4,d1
0001298C                            
0001298C                            loc_12448:
0001298C 1141 0038                  		move.b	d1,$38(a0)
00012990                            
00012990                            loc_1244C:
00012990 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012996 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001299C 6100 0000                  		bsr.w	Obj63_ChangeDir
000129A0 6000 0000                  		bra.w	loc_124B2
000129A4                            ; ===========================================================================
000129A4                            
000129A4                            loc_12460:				; XREF: Obj63_Main
000129A4 1140 002F                  		move.b	d0,$2F(a0)
000129A8 0240 007F                  		andi.w	#$7F,d0
000129AC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000129B0 08F2 0000 0000             		bset	#0,(a2,d0.w)
000129B6 6600 B1F6                  		bne.w	DeleteObject
000129BA D040                       		add.w	d0,d0
000129BC 0240 001E                  		andi.w	#$1E,d0
000129C0 0640 0070                  		addi.w	#$70,d0
000129C4 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000129CA D4F2 0000                  		adda.w	(a2,d0.w),a2
000129CE 321A                       		move.w	(a2)+,d1
000129D0 2248                       		movea.l	a0,a1
000129D2 6000                       		bra.s	Obj63_MakePtfms
000129D4                            ; ===========================================================================
000129D4                            
000129D4                            Obj63_Loop:
000129D4 6100 B622                  		bsr.w	SingleObjLoad
000129D8 6600                       		bne.s	loc_124AA
000129DA                            
000129DA                            Obj63_MakePtfms:			; XREF: loc_12460
000129DA 12BC 0063                  		move.b	#$63,0(a1)
000129DE 335A 0008                  		move.w	(a2)+,8(a1)
000129E2 335A 000C                  		move.w	(a2)+,$C(a1)
000129E6 301A                       		move.w	(a2)+,d0
000129E8 1340 0028                  		move.b	d0,$28(a1)
000129EC                            
000129EC                            loc_124AA:
000129EC 51C9 FFE6                  		dbf	d1,Obj63_Loop
000129F0                            
000129F0 588F                       		addq.l	#4,sp
000129F2 4E75                       		rts	
000129F4                            ; ===========================================================================
000129F4                            
000129F4                            loc_124B2:				; XREF: Obj63_Index
000129F4 7200                       		moveq	#0,d1
000129F6 1228 0019                  		move.b	$19(a0),d1
000129FA 4EB9 0000 789E             		jsr	(PlatformObject).l
00012A00 6000 0000                  		bra.w	sub_12502
00012A04                            ; ===========================================================================
00012A04                            
00012A04                            loc_124C2:				; XREF: Obj63_Index
00012A04 7200                       		moveq	#0,d1
00012A06 1228 0019                  		move.b	$19(a0),d1
00012A0A 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00012A10 3F28 0008                  		move.w	8(a0),-(sp)
00012A14 6100 0000                  		bsr.w	sub_12502
00012A18 341F                       		move.w	(sp)+,d2
00012A1A 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00012A20                            ; ===========================================================================
00012A20                            
00012A20                            loc_124DE:				; XREF: Obj63_Index
00012A20 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012A24 0240 0003                  		andi.w	#3,d0
00012A28 6600                       		bne.s	loc_124FC
00012A2A 7201                       		moveq	#1,d1
00012A2C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012A30 6700                       		beq.s	loc_124F2
00012A32 4401                       		neg.b	d1
00012A34                            
00012A34                            loc_124F2:
00012A34 D328 001A                  		add.b	d1,$1A(a0)
00012A38 0228 0003 001A             		andi.b	#3,$1A(a0)
00012A3E                            
00012A3E                            loc_124FC:
00012A3E 588F                       		addq.l	#4,sp
00012A40 6000 D1D8                  		bra.w	MarkObjGone
00012A44                            
00012A44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012A44                            
00012A44                            
00012A44                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012A44 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012A48 6700                       		beq.s	loc_12520
00012A4A 4A28 003B                  		tst.b	$3B(a0)
00012A4E 6600                       		bne.s	loc_12520
00012A50 117C 0001 003B             		move.b	#1,$3B(a0)
00012A56 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012A5C 4428 003A                  		neg.b	$3A(a0)
00012A60 6000                       		bra.s	loc_12534
00012A62                            ; ===========================================================================
00012A62                            
00012A62                            loc_12520:
00012A62 3028 0008                  		move.w	8(a0),d0
00012A66 B068 0034                  		cmp.w	$34(a0),d0
00012A6A 6600                       		bne.s	loc_1256A
00012A6C 3028 000C                  		move.w	$C(a0),d0
00012A70 B068 0036                  		cmp.w	$36(a0),d0
00012A74 6600                       		bne.s	loc_1256A
00012A76                            
00012A76                            loc_12534:
00012A76 7200                       		moveq	#0,d1
00012A78 1228 0038                  		move.b	$38(a0),d1
00012A7C D228 003A                  		add.b	$3A(a0),d1
00012A80 B228 0039                  		cmp.b	$39(a0),d1
00012A84 6500                       		bcs.s	loc_12552
00012A86 1001                       		move.b	d1,d0
00012A88 7200                       		moveq	#0,d1
00012A8A 4A00                       		tst.b	d0
00012A8C 6A00                       		bpl.s	loc_12552
00012A8E 1228 0039                  		move.b	$39(a0),d1
00012A92 5901                       		subq.b	#4,d1
00012A94                            
00012A94                            loc_12552:
00012A94 1141 0038                  		move.b	d1,$38(a0)
00012A98 2268 003C                  		movea.l	$3C(a0),a1
00012A9C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012AA2 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012AA8 6100 0000                  		bsr.w	Obj63_ChangeDir
00012AAC                            
00012AAC                            loc_1256A:
00012AAC 6100 B09E                  		bsr.w	SpeedToPos
00012AB0 4E75                       		rts	
00012AB2                            ; End of function sub_12502
00012AB2                            
00012AB2                            
00012AB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012AB2                            
00012AB2                            
00012AB2                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012AB2 7000                       		moveq	#0,d0
00012AB4 343C FF00                  		move.w	#-$100,d2
00012AB8 3028 0008                  		move.w	8(a0),d0
00012ABC 9068 0034                  		sub.w	$34(a0),d0
00012AC0 6400                       		bcc.s	loc_12584
00012AC2 4440                       		neg.w	d0
00012AC4 4442                       		neg.w	d2
00012AC6                            
00012AC6                            loc_12584:
00012AC6 7200                       		moveq	#0,d1
00012AC8 363C FF00                  		move.w	#-$100,d3
00012ACC 3228 000C                  		move.w	$C(a0),d1
00012AD0 9268 0036                  		sub.w	$36(a0),d1
00012AD4 6400                       		bcc.s	loc_12598
00012AD6 4441                       		neg.w	d1
00012AD8 4443                       		neg.w	d3
00012ADA                            
00012ADA                            loc_12598:
00012ADA B240                       		cmp.w	d0,d1
00012ADC 6500                       		bcs.s	loc_125C2
00012ADE 3028 0008                  		move.w	8(a0),d0
00012AE2 9068 0034                  		sub.w	$34(a0),d0
00012AE6 6700                       		beq.s	loc_125AE
00012AE8 48C0                       		ext.l	d0
00012AEA E180                       		asl.l	#8,d0
00012AEC 81C1                       		divs.w	d1,d0
00012AEE 4440                       		neg.w	d0
00012AF0                            
00012AF0                            loc_125AE:
00012AF0 3140 0010                  		move.w	d0,$10(a0)
00012AF4 3143 0012                  		move.w	d3,$12(a0)
00012AF8 4840                       		swap	d0
00012AFA 3140 000A                  		move.w	d0,$A(a0)
00012AFE 4268 000E                  		clr.w	$E(a0)
00012B02 4E75                       		rts	
00012B04                            ; ===========================================================================
00012B04                            
00012B04                            loc_125C2:				; XREF: Obj63_ChangeDir
00012B04 3228 000C                  		move.w	$C(a0),d1
00012B08 9268 0036                  		sub.w	$36(a0),d1
00012B0C 6700                       		beq.s	loc_125D4
00012B0E 48C1                       		ext.l	d1
00012B10 E181                       		asl.l	#8,d1
00012B12 83C0                       		divs.w	d0,d1
00012B14 4441                       		neg.w	d1
00012B16                            
00012B16                            loc_125D4:
00012B16 3141 0012                  		move.w	d1,$12(a0)
00012B1A 3142 0010                  		move.w	d2,$10(a0)
00012B1E 4841                       		swap	d1
00012B20 3141 000E                  		move.w	d1,$E(a0)
00012B24 4268 000A                  		clr.w	$A(a0)
00012B28 4E75                       		rts	
00012B2A                            ; End of function Obj63_ChangeDir
00012B2A                            
00012B2A                            ; ===========================================================================
00012B2A 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012B2C 0000                       		dc.w word_12610-Obj63_Data
00012B2E 0000                       		dc.w word_12628-Obj63_Data
00012B30 0000                       		dc.w word_1263C-Obj63_Data
00012B32 0000                       		dc.w word_12650-Obj63_Data
00012B34 0000                       		dc.w word_12668-Obj63_Data
00012B36 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012B46 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012B52 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012B62 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012B6A 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012B7E 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012B92 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012BAA 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012BBE                            
00012BBE                            ; ---------------------------------------------------------------------------
00012BBE                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012BBE                            ; ---------------------------------------------------------------------------
00012BBE                            Map_obj63:
00012BBE                            	include "_maps\obj63.asm"
00012BBE                            ; ---------------------------------------------------------------------------
00012BBE                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012BBE                            ; ---------------------------------------------------------------------------
00012BBE 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012BC2 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012BC6 0000                       		dc.w byte_1269E-Map_obj63
00012BC8 01                         byte_12686:	dc.b 1
00012BC9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012BCE 01                         byte_1268C:	dc.b 1
00012BCF F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012BD4 01                         byte_12692:	dc.b 1
00012BD5 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012BDA 01                         byte_12698:	dc.b 1
00012BDB F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012BE0 01                         byte_1269E:	dc.b 1
00012BE1 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012BE6                            		even
00012BE6                            		even
00012BE6                            
00012BE6                            ; ===========================================================================
00012BE6                            ; ---------------------------------------------------------------------------
00012BE6                            ; Object 64 - bubbles (LZ)
00012BE6                            ; ---------------------------------------------------------------------------
00012BE6                            
00012BE6                            Obj64:					; XREF: Obj_Index
00012BE6 7000                       		moveq	#0,d0
00012BE8 1028 0024                  		move.b	$24(a0),d0
00012BEC 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012BF0 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012BF4                            ; ===========================================================================
00012BF4 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012BF6 0000                       		dc.w Obj64_Animate-Obj64_Index
00012BF8 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012BFA 0000                       		dc.w Obj64_Display2-Obj64_Index
00012BFC 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012BFE 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012C00                            ; ===========================================================================
00012C00                            
00012C00                            Obj64_Main:				; XREF: Obj64_Index
00012C00 5428 0024                  		addq.b	#2,$24(a0)
00012C04 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012C0C 317C 8348 0002             		move.w	#$8348,2(a0)
00012C12 117C 0084 0001             		move.b	#$84,1(a0)
00012C18 117C 0010 0019             		move.b	#$10,$19(a0)
00012C1E 117C 0001 0018             		move.b	#1,$18(a0)
00012C24 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C28 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012C2A 5028 0024                  		addq.b	#8,$24(a0)
00012C2E 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012C32 1140 0032                  		move.b	d0,$32(a0)
00012C36 1140 0033                  		move.b	d0,$33(a0)
00012C3A 117C 0006 001C             		move.b	#6,$1C(a0)
00012C40 6000 0000                  		bra.w	Obj64_BblMaker
00012C44                            ; ===========================================================================
00012C44                            
00012C44                            Obj64_Bubble:				; XREF: Obj64_Main
00012C44 1140 001C                  		move.b	d0,$1C(a0)
00012C48 3168 0008 0030             		move.w	8(a0),$30(a0)
00012C4E 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012C54 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012C5A 1140 0026                  		move.b	d0,$26(a0)
00012C5E                            
00012C5E                            Obj64_Animate:				; XREF: Obj64_Index
00012C5E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012C64 4EB9 0000 AC42             		jsr	AnimateSprite
00012C6A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012C70 6600                       		bne.s	Obj64_ChkWater
00012C72 117C 0001 002E             		move.b	#1,$2E(a0)
00012C78                            
00012C78                            Obj64_ChkWater:				; XREF: Obj64_Index
00012C78 3038 F646                  		move.w	($FFFFF646).w,d0
00012C7C B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012C80 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012C82                            
00012C82                            Obj64_Burst:				; XREF: Obj64_Wobble
00012C82 117C 0006 0024             		move.b	#6,$24(a0)
00012C88 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012C8C 6000 0000                  		bra.w	Obj64_Display2
00012C90                            ; ===========================================================================
00012C90                            
00012C90                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012C90 1028 0026                  		move.b	$26(a0),d0
00012C94 5228 0026                  		addq.b	#1,$26(a0)
00012C98 0240 007F                  		andi.w	#$7F,d0
00012C9C 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012CA2 1031 0000                  		move.b	(a1,d0.w),d0
00012CA6 4880                       		ext.w	d0
00012CA8 D068 0030                  		add.w	$30(a0),d0
00012CAC 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012CB0 4A28 002E                  		tst.b	$2E(a0)
00012CB4 6700                       		beq.s	Obj64_Display
00012CB6 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012CBA 6700                       		beq.s	Obj64_Display	; if not, branch
00012CBC                            
00012CBC 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012CC0 303C 00AD                  		move.w	#$AD,d0
00012CC4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012CCA 43F8 D000                  		lea	($FFFFD000).w,a1
00012CCE 4269 0010                  		clr.w	$10(a1)
00012CD2 4269 0012                  		clr.w	$12(a1)
00012CD6 4269 0014                  		clr.w	$14(a1)
00012CDA 137C 0015 001C             		move.b	#$15,$1C(a1)
00012CE0 337C 0023 003E             		move.w	#$23,$3E(a1)
00012CE6 137C 0000 003C             		move.b	#0,$3C(a1)
00012CEC 08A9 0005 0022             		bclr	#5,$22(a1)
00012CF2 08A9 0004 0022             		bclr	#4,$22(a1)
00012CF8 0829 0002 0022             		btst	#2,$22(a1)
00012CFE 6700 FF82                  		beq.w	Obj64_Burst
00012D02 08A9 0002 0022             		bclr	#2,$22(a1)
00012D08 137C 0013 0016             		move.b	#$13,$16(a1)
00012D0E 137C 0009 0017             		move.b	#9,$17(a1)
00012D14 5B69 000C                  		subq.w	#5,$C(a1)
00012D18 6000 FF68                  		bra.w	Obj64_Burst
00012D1C                            ; ===========================================================================
00012D1C                            
00012D1C                            Obj64_Display:				; XREF: Obj64_Wobble
00012D1C 6100 AE2E                  		bsr.w	SpeedToPos
00012D20 4A28 0001                  		tst.b	1(a0)
00012D24 6A00                       		bpl.s	Obj64_Delete
00012D26 4EFA AE4A                  		jmp	DisplaySprite
00012D2A                            ; ===========================================================================
00012D2A                            
00012D2A                            Obj64_Delete:
00012D2A 4EFA AE82                  		jmp	DeleteObject
00012D2E                            ; ===========================================================================
00012D2E                            
00012D2E                            Obj64_Display2:				; XREF: Obj64_Index
00012D2E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012D34 4EB9 0000 AC42             		jsr	AnimateSprite
00012D3A 4A28 0001                  		tst.b	1(a0)
00012D3E 6A00                       		bpl.s	Obj64_Delete2
00012D40 4EFA AE30                  		jmp	DisplaySprite
00012D44                            ; ===========================================================================
00012D44                            
00012D44                            Obj64_Delete2:
00012D44 4EFA AE68                  		jmp	DeleteObject
00012D48                            ; ===========================================================================
00012D48                            
00012D48                            Obj64_Delete3:				; XREF: Obj64_Index
00012D48 6000 AE64                  		bra.w	DeleteObject
00012D4C                            ; ===========================================================================
00012D4C                            
00012D4C                            Obj64_BblMaker:				; XREF: Obj64_Index
00012D4C 4A68 0036                  		tst.w	$36(a0)
00012D50 6600                       		bne.s	loc_12874
00012D52 3038 F646                  		move.w	($FFFFF646).w,d0
00012D56 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012D5A 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012D5E 4A28 0001                  		tst.b	1(a0)
00012D62 6A00 0000                  		bpl.w	Obj64_ChkDel
00012D66 5368 0038                  		subq.w	#1,$38(a0)
00012D6A 6A00 0000                  		bpl.w	loc_12914
00012D6E 317C 0001 0036             		move.w	#1,$36(a0)
00012D74                            
00012D74                            loc_1283A:
00012D74 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012D7A 3200                       		move.w	d0,d1
00012D7C 0240 0007                  		andi.w	#7,d0
00012D80 0C40 0006                  		cmpi.w	#6,d0
00012D84 64EE                       		bcc.s	loc_1283A
00012D86                            
00012D86 1140 0034                  		move.b	d0,$34(a0)
00012D8A 0241 000C                  		andi.w	#$C,d1
00012D8E 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012D94 D2C1                       		adda.w	d1,a1
00012D96 2149 003C                  		move.l	a1,$3C(a0)
00012D9A 5328 0032                  		subq.b	#1,$32(a0)
00012D9E 6A00                       		bpl.s	loc_12872
00012DA0 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012DA6 08E8 0007 0036             		bset	#7,$36(a0)
00012DAC                            
00012DAC                            loc_12872:
00012DAC 6000                       		bra.s	loc_1287C
00012DAE                            ; ===========================================================================
00012DAE                            
00012DAE                            loc_12874:				; XREF: Obj64_BblMaker
00012DAE 5368 0038                  		subq.w	#1,$38(a0)
00012DB2 6A00 0000                  		bpl.w	loc_12914
00012DB6                            
00012DB6                            loc_1287C:
00012DB6 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DBC 0240 001F                  		andi.w	#$1F,d0
00012DC0 3140 0038                  		move.w	d0,$38(a0)
00012DC4 6100 B232                  		bsr.w	SingleObjLoad
00012DC8 6600                       		bne.s	loc_128F8
00012DCA 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012DCE 3368 0008 0008             		move.w	8(a0),8(a1)
00012DD4 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DDA 0240 000F                  		andi.w	#$F,d0
00012DDE 5140                       		subq.w	#8,d0
00012DE0 D169 0008                  		add.w	d0,8(a1)
00012DE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012DEA 7000                       		moveq	#0,d0
00012DEC 1028 0034                  		move.b	$34(a0),d0
00012DF0 2468 003C                  		movea.l	$3C(a0),a2
00012DF4 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012DFA 0828 0007 0036             		btst	#7,$36(a0)
00012E00 6700                       		beq.s	loc_128F8
00012E02 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E08 0240 0003                  		andi.w	#3,d0
00012E0C 6600                       		bne.s	loc_128E4
00012E0E 08E8 0006 0036             		bset	#6,$36(a0)
00012E14 6600                       		bne.s	loc_128F8
00012E16 137C 0002 0028             		move.b	#2,$28(a1)
00012E1C                            
00012E1C                            loc_128E4:
00012E1C 4A28 0034                  		tst.b	$34(a0)
00012E20 6600                       		bne.s	loc_128F8
00012E22 08E8 0006 0036             		bset	#6,$36(a0)
00012E28 6600                       		bne.s	loc_128F8
00012E2A 137C 0002 0028             		move.b	#2,$28(a1)
00012E30                            
00012E30                            loc_128F8:
00012E30 5328 0034                  		subq.b	#1,$34(a0)
00012E34 6A00                       		bpl.s	loc_12914
00012E36 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E3C 0240 007F                  		andi.w	#$7F,d0
00012E40 0640 0080                  		addi.w	#$80,d0
00012E44 D168 0038                  		add.w	d0,$38(a0)
00012E48 4268 0036                  		clr.w	$36(a0)
00012E4C                            
00012E4C                            loc_12914:
00012E4C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012E52 4EB9 0000 AC42             		jsr	AnimateSprite
00012E58                            
00012E58                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012E58 3028 0008                  		move.w	8(a0),d0
00012E5C 0240 FF80                  		andi.w	#$FF80,d0
00012E60 3238 F700                  		move.w	($FFFFF700).w,d1
00012E64 0441 0080                  		subi.w	#$80,d1
00012E68 0241 FF80                  		andi.w	#$FF80,d1
00012E6C 9041                       		sub.w	d1,d0
00012E6E 0C40 0280                  		cmpi.w	#$280,d0
00012E72 6200 AD3A                  		bhi.w	DeleteObject
00012E76 3038 F646                  		move.w	($FFFFF646).w,d0
00012E7A B068 000C                  		cmp.w	$C(a0),d0
00012E7E 6500 ACF2                  		bcs.w	DisplaySprite
00012E82 4E75                       		rts	
00012E84                            ; ===========================================================================
00012E84                            ; bubble production sequence
00012E84                            
00012E84                            ; 0 = small bubble, 1 =	large bubble
00012E84                            
00012E84 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012E96                            
00012E96                            ; ===========================================================================
00012E96                            
00012E96                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012E96 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012E9A 6B00                       		bmi.s	loc_12998
00012E9C 43F8 D000                  		lea	($FFFFD000).w,a1
00012EA0 3029 0008                  		move.w	8(a1),d0
00012EA4 3228 0008                  		move.w	8(a0),d1
00012EA8 0441 0010                  		subi.w	#$10,d1
00012EAC B240                       		cmp.w	d0,d1
00012EAE 6400                       		bcc.s	loc_12998
00012EB0 0641 0020                  		addi.w	#$20,d1
00012EB4 B240                       		cmp.w	d0,d1
00012EB6 6500                       		bcs.s	loc_12998
00012EB8 3029 000C                  		move.w	$C(a1),d0
00012EBC 3228 000C                  		move.w	$C(a0),d1
00012EC0 B240                       		cmp.w	d0,d1
00012EC2 6400                       		bcc.s	loc_12998
00012EC4 0641 0010                  		addi.w	#$10,d1
00012EC8 B240                       		cmp.w	d0,d1
00012ECA 6500                       		bcs.s	loc_12998
00012ECC 7001                       		moveq	#1,d0
00012ECE 4E75                       		rts	
00012ED0                            ; ===========================================================================
00012ED0                            
00012ED0                            loc_12998:
00012ED0 7000                       		moveq	#0,d0
00012ED2 4E75                       		rts	
00012ED4                            ; ===========================================================================
00012ED4                            Ani_obj64:
00012ED4                            	include "_anim\obj64.asm"
00012ED4                            ; ---------------------------------------------------------------------------
00012ED4                            ; Animation script - bubbles (LZ)
00012ED4                            ; ---------------------------------------------------------------------------
00012ED4 0000                       		dc.w byte_129AA-Ani_obj64
00012ED6 0000                       		dc.w byte_129B0-Ani_obj64
00012ED8 0000                       		dc.w byte_129B6-Ani_obj64
00012EDA 0000                       		dc.w byte_129BE-Ani_obj64
00012EDC 0000                       		dc.w byte_129BE-Ani_obj64
00012EDE 0000                       		dc.w byte_129C0-Ani_obj64
00012EE0 0000                       		dc.w byte_129C6-Ani_obj64
00012EE2 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012EE8 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012EEE 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012EF6 04FC                       byte_129BE:	dc.b 4,	$FC
00012EF8 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012EFE 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012F04 00                         		even
00012F04 00                         		even
00012F04                            
00012F04                            ; ---------------------------------------------------------------------------
00012F04                            ; Sprite mappings - bubbles (LZ)
00012F04                            ; ---------------------------------------------------------------------------
00012F04                            Map_obj64:
00012F04                            	include "_maps\obj64.asm"
00012F04                            ; ---------------------------------------------------------------------------
00012F04                            ; Sprite mappings - bubbles (LZ)
00012F04                            ; ---------------------------------------------------------------------------
00012F04 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012F08 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012F0C 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012F10 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012F14 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012F18 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012F1C 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012F20 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012F24 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012F28 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012F2C 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012F30 0000                       		dc.w byte_12A9C-Map_obj64
00012F32 01                         byte_129FA:	dc.b 1
00012F33 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012F38 01                         byte_12A00:	dc.b 1
00012F39 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012F3E 01                         byte_12A06:	dc.b 1
00012F3F FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012F44 01                         byte_12A0C:	dc.b 1
00012F45 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012F4A 01                         byte_12A12:	dc.b 1
00012F4B F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012F50 01                         byte_12A18:	dc.b 1
00012F51 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012F56 01                         byte_12A1E:	dc.b 1
00012F57 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012F5C 04                         byte_12A24:	dc.b 4
00012F5D F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012F62 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012F67 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012F6C 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012F71 04                         byte_12A39:	dc.b 4
00012F72 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012F77 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012F7C 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012F81 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012F86 01                         byte_12A4E:	dc.b 1
00012F87 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012F8C 01                         byte_12A54:	dc.b 1
00012F8D F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012F92 01                         byte_12A5A:	dc.b 1
00012F93 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012F98 01                         byte_12A60:	dc.b 1
00012F99 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012F9E 01                         byte_12A66:	dc.b 1
00012F9F F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012FA4 01                         byte_12A6C:	dc.b 1
00012FA5 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012FAA 01                         byte_12A72:	dc.b 1
00012FAB F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012FB0 01                         byte_12A78:	dc.b 1
00012FB1 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012FB6 01                         byte_12A7E:	dc.b 1
00012FB7 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012FBC 01                         byte_12A84:	dc.b 1
00012FBD F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012FC2 01                         byte_12A8A:	dc.b 1
00012FC3 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012FC8 01                         byte_12A90:	dc.b 1
00012FC9 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012FCE 01                         byte_12A96:	dc.b 1
00012FCF F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012FD4 00                         byte_12A9C:	dc.b 0
00012FD6 00                         		even
00012FD6 00                         		even
00012FD6                            
00012FD6                            ; ===========================================================================
00012FD6                            ; ---------------------------------------------------------------------------
00012FD6                            ; Object 65 - waterfalls (LZ)
00012FD6                            ; ---------------------------------------------------------------------------
00012FD6                            
00012FD6                            Obj65:					; XREF: Obj_Index
00012FD6 7000                       		moveq	#0,d0
00012FD8 1028 0024                  		move.b	$24(a0),d0
00012FDC 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012FE0 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012FE4                            ; ===========================================================================
00012FE4 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012FE6 0000                       		dc.w Obj65_Animate-Obj65_Index
00012FE8 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012FEA 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012FEC 0000                       		dc.w loc_12B36-Obj65_Index
00012FEE                            ; ===========================================================================
00012FEE                            
00012FEE                            Obj65_Main:				; XREF: Obj65_Index
00012FEE 5828 0024                  		addq.b	#4,$24(a0)
00012FF2 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012FFA 317C 4259 0002             		move.w	#$4259,2(a0)
00013000 0028 0004 0001             		ori.b	#4,1(a0)
00013006 117C 0018 0019             		move.b	#$18,$19(a0)
0001300C 117C 0001 0018             		move.b	#1,$18(a0)
00013012 1028 0028                  		move.b	$28(a0),d0	; get object type
00013016 6A00                       		bpl.s	loc_12AE6
00013018 08E8 0007 0002             		bset	#7,2(a0)
0001301E                            
0001301E                            loc_12AE6:
0001301E 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013022 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013026 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
0001302A 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001302C 4228 0018                  		clr.b	$18(a0)
00013030 5528 0024                  		subq.b	#2,$24(a0)
00013034 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
0001303A 6700                       		beq.s	loc_12B0A	; if not, branch
0001303C 117C 0006 0024             		move.b	#6,$24(a0)
00013042                            
00013042                            loc_12B0A:
00013042 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013048 6700                       		beq.s	Obj65_Animate	; if not, branch
0001304A 117C 0008 0024             		move.b	#8,$24(a0)
00013050                            
00013050                            Obj65_Animate:				; XREF: Obj65_Index
00013050 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013056 4EB9 0000 AC42             		jsr	AnimateSprite
0001305C                            
0001305C                            Obj65_ChkDel:				; XREF: Obj65_Index
0001305C 6000 CBBC                  		bra.w	MarkObjGone
00013060                            ; ===========================================================================
00013060                            
00013060                            Obj65_FixHeight:			; XREF: Obj65_Index
00013060 3038 F646                  		move.w	($FFFFF646).w,d0
00013064 0440 0010                  		subi.w	#$10,d0
00013068 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001306C 60E2                       		bra.s	Obj65_Animate
0001306E                            ; ===========================================================================
0001306E                            
0001306E                            loc_12B36:				; XREF: Obj65_Index
0001306E 08A8 0007 0002             		bclr	#7,2(a0)
00013074 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001307A 6600                       		bne.s	Obj65_Animate2
0001307C 08E8 0007 0002             		bset	#7,2(a0)
00013082                            
00013082                            Obj65_Animate2:
00013082 60CC                       		bra.s	Obj65_Animate
00013084                            ; ===========================================================================
00013084                            Ani_obj65:
00013084                            	include "_anim\obj65.asm"
00013084                            ; ---------------------------------------------------------------------------
00013084                            ; Animation script - waterfall (LZ)
00013084                            ; ---------------------------------------------------------------------------
00013084 0000                       		dc.w byte_12B4E-Ani_obj65
00013086 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001308C 00                         		even
0001308C 00                         		even
0001308C                            
0001308C                            ; ---------------------------------------------------------------------------
0001308C                            ; Sprite mappings - waterfalls (LZ)
0001308C                            ; ---------------------------------------------------------------------------
0001308C                            Map_obj65:
0001308C                            	include "_maps\obj65.asm"
0001308C                            ; ---------------------------------------------------------------------------
0001308C                            ; Sprite mappings - waterfalls (LZ)
0001308C                            ; ---------------------------------------------------------------------------
0001308C 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013090 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013094 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013098 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001309C 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000130A0 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000130A4 01                         byte_12B6C:	dc.b 1
000130A5 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000130AA 02                         byte_12B72:	dc.b 2
000130AB F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000130B0 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000130B5 02                         byte_12B7D:	dc.b 2
000130B6 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000130BB 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000130C0 01                         byte_12B88:	dc.b 1
000130C1 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000130C6 02                         byte_12B8E:	dc.b 2
000130C7 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000130CC 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000130D1 01                         byte_12B99:	dc.b 1
000130D2 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000130D7 01                         byte_12B9F:	dc.b 1
000130D8 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000130DD 01                         byte_12BA5:	dc.b 1
000130DE F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000130E3 02                         byte_12BAB:	dc.b 2
000130E4 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000130E9 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000130EE 02                         byte_12BB6:	dc.b 2
000130EF F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000130F4 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000130F9 02                         byte_12BC1:	dc.b 2
000130FA F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000130FF F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013104 02                         byte_12BCC:	dc.b 2
00013105 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001310A F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013110 00                         		even
00013110 00                         		even
00013110                            
00013110                            ; ===========================================================================
00013110                            ; ---------------------------------------------------------------------------
00013110                            ; Object 01 - Sonic
00013110                            ; ---------------------------------------------------------------------------
00013110                            
00013110                            Obj01:					; XREF: Obj_Index
00013110 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013114 6700                       		beq.s	Obj01_Normal	; if not, branch
00013116 4EF9 0000 0000             		jmp	DebugMode
0001311C                            ; ===========================================================================
0001311C                            
0001311C                            Obj01_Normal:
0001311C 7000                       		moveq	#0,d0
0001311E 1028 0024                  		move.b	$24(a0),d0
00013122 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013126 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001312A                            ; ===========================================================================
0001312A 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001312C 0000                       		dc.w Obj01_Control-Obj01_Index
0001312E 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013130 0000                       		dc.w Obj01_Death-Obj01_Index
00013132 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013134                            ; ===========================================================================
00013134                            
00013134                            Obj01_Main:				; XREF: Obj01_Index
00013134 5428 0024                  		addq.b	#2,$24(a0)
00013138 117C 0013 0016             		move.b	#$13,$16(a0)
0001313E 117C 0009 0017             		move.b	#9,$17(a0)
00013144 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001314C 317C 0780 0002             		move.w	#$780,2(a0)
00013152 117C 0002 0018             		move.b	#2,$18(a0)
00013158 117C 0018 0019             		move.b	#$18,$19(a0)
0001315E 117C 0004 0001             		move.b	#4,1(a0)
00013164 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001316A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013170 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013176                            
00013176                            Obj01_Control:				; XREF: Obj01_Index
00013176 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001317A 6700                       		beq.s	loc_12C58	; if not, branch
0001317C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013182 6700                       		beq.s	loc_12C58	; if not, branch
00013184 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
0001318A 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001318E 4E75                       		rts	
00013190                            ; ===========================================================================
00013190                            
00013190                            loc_12C58:
00013190 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013194 6600                       		bne.s	loc_12C64	; if yes, branch
00013196 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
0001319C                            
0001319C                            loc_12C64:
0001319C 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000131A2 6600                       		bne.s	loc_12C7E	; if yes, branch
000131A4 7000                       		moveq	#0,d0
000131A6 1028 0022                  		move.b	$22(a0),d0
000131AA 0240 0006                  		andi.w	#6,d0
000131AE 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000131B2 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000131B6                            
000131B6                            loc_12C7E:
000131B6 6100                       		bsr.s	Sonic_Display
000131B8 6100 0000                  		bsr.w	Sonic_RecordPos
000131BC 6100 0000                  		bsr.w	Sonic_Water
000131C0 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000131C6 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000131CC 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000131D0 6700                       		beq.s	loc_12CA6
000131D2 4A28 001C                  		tst.b	$1C(a0)
000131D6 6600                       		bne.s	loc_12CA6
000131D8 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000131DE                            
000131DE                            loc_12CA6:
000131DE 6100 0000                  		bsr.w	Sonic_Animate
000131E2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000131E6 6B00                       		bmi.s	loc_12CB6
000131E8 4EB9 0000 0000             		jsr	TouchResponse
000131EE                            
000131EE                            loc_12CB6:
000131EE 6100 0000                  		bsr.w	Sonic_Loops
000131F2 6100 0000                  		bsr.w	LoadSonicDynPLC
000131F6 4E75                       		rts	
000131F8                            ; ===========================================================================
000131F8 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000131FA 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000131FC 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000131FE 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013200                            ; ---------------------------------------------------------------------------
00013200                            ; Music	to play	after invincibility wears off
00013200                            ; ---------------------------------------------------------------------------
00013200                            ; ===========================================================================
00013200                            
00013200                            Sonic_Display:				; XREF: loc_12C7E
00013200 3028 0030                  		move.w	$30(a0),d0
00013204 6700                       		beq.s	Obj01_Display
00013206 5368 0030                  		subq.w	#1,$30(a0)
0001320A E648                       		lsr.w	#3,d0
0001320C 6400                       		bcc.s	Obj01_ChkInvin
0001320E                            
0001320E                            Obj01_Display:
0001320E 4EBA A962                  		jsr	DisplaySprite
00013212                            
00013212                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013212                             
00013212                            Obj01_ChkInvin:
00013212 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013216 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
0001321A 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001321E 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013222 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013226 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001322A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001322E 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013232 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013238 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001323C 7000                       		moveq	#0,d0
0001323E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013242                             
00013242 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013248 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001324A 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013250 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013252                             
00013252                            Obj01_GetBgm2:
00013252 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013258 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
0001325A 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013260 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013262                             
00013262                            Obj01_GetBgm3:
00013262 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013268 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001326A 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013270 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013272                             
00013272                            Obj01_GetBgm4:
00013272 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013278 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001327A 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013280                             
00013280                            Obj01_PlayMusic:
00013280 1031 0000                  		move.b	(a1,d0.w),d0
00013284 4EB9 0000 15B6             		jsr	(PlaySound).l	; play normal music
0001328A                             
0001328A                            ; NineKode ends here.
0001328A                            
0001328A                            Obj01_RmvInvin:
0001328A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013290                            
00013290                            Obj01_ChkShoes:
00013290 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013294 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013296 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
0001329A 6700                       		beq.s	Obj01_ExitChk
0001329C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000132A0 6600                       		bne.s	Obj01_ExitChk
000132A2 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000132A8 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000132AE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000132B4 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000132BA 303C 00E3                  		move.w	#$E3,d0
000132BE 4EF9 0000 15B6             		jmp	(PlaySound).l	; run music at normal speed
000132C4                            ; ===========================================================================
000132C4                            
000132C4                            Obj01_ExitChk:
000132C4 4E75                       		rts	
000132C6                            
000132C6                            ; ---------------------------------------------------------------------------
000132C6                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000132C6                            ; ---------------------------------------------------------------------------
000132C6                            
000132C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132C6                            
000132C6                            
000132C6                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000132C6 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000132CA 43F8 CB00                  		lea	($FFFFCB00).w,a1
000132CE 43F1 0000                  		lea	(a1,d0.w),a1
000132D2 32E8 0008                  		move.w	8(a0),(a1)+
000132D6 32E8 000C                  		move.w	$C(a0),(a1)+
000132DA 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000132DE 4E75                       		rts	
000132E0                            ; End of function Sonic_RecordPos
000132E0                            
000132E0                            ; ---------------------------------------------------------------------------
000132E0                            ; Subroutine for Sonic when he's underwater
000132E0                            ; ---------------------------------------------------------------------------
000132E0                            
000132E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132E0                            
000132E0                            
000132E0                            Sonic_Water:				; XREF: loc_12C7E
000132E0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000132E6 6700                       		beq.s	Obj01_InWater	; if yes, branch
000132E8                            
000132E8                            locret_12D80:
000132E8 4E75                       		rts	
000132EA                            ; ===========================================================================
000132EA                            
000132EA                            Obj01_InWater:
000132EA 3038 F646                  		move.w	($FFFFF646).w,d0
000132EE B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000132F2 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000132F4 08E8 0006 0022             		bset	#6,$22(a0)
000132FA 66EC                       		bne.s	locret_12D80
000132FC 6100 0000                  		bsr.w	ResumeMusic
00013300 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013306 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001330C 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013312 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013318 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001331E E0E8 0010                  		asr	$10(a0)
00013322 E0E8 0012                  		asr	$12(a0)
00013326 E0E8 0012                  		asr	$12(a0)
0001332A 67BC                       		beq.s	locret_12D80
0001332C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013332 303C 00AA                  		move.w	#$AA,d0
00013336 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
0001333C                            ; ===========================================================================
0001333C                            
0001333C                            Obj01_OutWater:
0001333C 08A8 0006 0022             		bclr	#6,$22(a0)
00013342 67A4                       		beq.s	locret_12D80
00013344 6100 0000                  		bsr.w	ResumeMusic
00013348 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001334E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013354 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001335A E1E8 0012                  		asl	$12(a0)
0001335E 6700 FF88                  		beq.w	locret_12D80
00013362 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013368 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001336E 6E00                       		bgt.s	loc_12E0E
00013370 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013376                            
00013376                            loc_12E0E:
00013376 303C 00AA                  		move.w	#$AA,d0
0001337A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
00013380                            ; End of function Sonic_Water
00013380                            
00013380                            ; ===========================================================================
00013380                            ; ---------------------------------------------------------------------------
00013380                            ; Modes	for controlling	Sonic
00013380                            ; ---------------------------------------------------------------------------
00013380                            
00013380                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013380 6100 0000                  		bsr.w	Sonic_Jump
00013384 6100 0000                  		bsr.w	Sonic_SlopeResist
00013388 6100 0000                  		bsr.w	Sonic_Move
0001338C 6100 0000                  		bsr.w	Sonic_Roll
00013390 6100 0000                  		bsr.w	Sonic_LevelBound
00013394 4EBA A7B6                  		jsr	SpeedToPos
00013398 6100 0000                  		bsr.w	Sonic_AnglePos
0001339C 6100 0000                  		bsr.w	Sonic_SlopeRepel
000133A0 4E75                       		rts	
000133A2                            ; ===========================================================================
000133A2                            
000133A2                            Obj01_MdJump:				; XREF: Obj01_Modes
000133A2 6100 0000                  		bsr.w	Sonic_JumpHeight
000133A6 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000133AA 6100 0000                  		bsr.w	Sonic_LevelBound
000133AE 4EBA A770                  		jsr	ObjectFall
000133B2 0828 0006 0022             		btst	#6,$22(a0)
000133B8 6700                       		beq.s	loc_12E5C
000133BA 0468 0028 0012             		subi.w	#$28,$12(a0)
000133C0                            
000133C0                            loc_12E5C:
000133C0 6100 0000                  		bsr.w	Sonic_JumpAngle
000133C4 6100 0000                  		bsr.w	Sonic_Floor
000133C8 4E75                       		rts	
000133CA                            ; ===========================================================================
000133CA                            
000133CA                            Obj01_MdRoll:				; XREF: Obj01_Modes
000133CA 6100 0000                  		bsr.w	Sonic_Jump
000133CE 6100 0000                  		bsr.w	Sonic_RollRepel
000133D2 6100 0000                  		bsr.w	Sonic_RollSpeed
000133D6 6100 0000                  		bsr.w	Sonic_LevelBound
000133DA 4EBA A770                  		jsr	SpeedToPos
000133DE 6100 0000                  		bsr.w	Sonic_AnglePos
000133E2 6100 0000                  		bsr.w	Sonic_SlopeRepel
000133E6 4E75                       		rts	
000133E8                            ; ===========================================================================
000133E8                            
000133E8                            Obj01_MdJump2:				; XREF: Obj01_Modes
000133E8 6100 0000                  		bsr.w	Sonic_JumpHeight
000133EC 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000133F0 6100 0000                  		bsr.w	Sonic_LevelBound
000133F4 6100 0000                  		bsr.w	Sonic_AirUnroll
000133F8 4EBA A726                  		jsr	ObjectFall
000133FC 0828 0006 0022             		btst	#6,$22(a0)
00013402 6700                       		beq.s	loc_12EA6
00013404 0468 0028 0012             		subi.w	#$28,$12(a0)
0001340A                            
0001340A                            loc_12EA6:
0001340A 6100 0000                  		bsr.w	Sonic_JumpAngle
0001340E 6100 0000                  		bsr.w	Sonic_Floor
00013412 4E75                       		rts	
00013414                            ; ---------------------------------------------------------------------------
00013414                            ; Subroutine to	make Sonic walk/run
00013414                            ; ---------------------------------------------------------------------------
00013414                            
00013414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013414                            
00013414                            
00013414                            Sonic_Move:				; XREF: Obj01_MdNormal
00013414 3C38 F760                  		move.w	($FFFFF760).w,d6
00013418 3A38 F762                  		move.w	($FFFFF762).w,d5
0001341C 3838 F764                  		move.w	($FFFFF764).w,d4
00013420 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013424 6600 0000                  		bne.w	loc_12FEE
00013428 4A68 003E                  		tst.w	$3E(a0)
0001342C 6600 0000                  		bne.w	Obj01_ResetScr
00013430 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013436 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013438 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001343E 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013440 6100 0000                  		bsr.w	Sonic_MoveLeft
00013444                            
00013444                            Obj01_NotLeft:
00013444 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001344A 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001344C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013452 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013454 6100 0000                  		bsr.w	Sonic_MoveLeft
00013458 6000                       		bra.s	Obj01_NotRight
0001345A                            
0001345A                            Obj01_MoveRight:
0001345A 6100 0000                  		bsr.w	Sonic_MoveRight
0001345E                            
0001345E                            Obj01_NotRight:
0001345E 1028 0026                  		move.b	$26(a0),d0
00013462 0600 0020                  		addi.b	#$20,d0
00013466 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001346A 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001346E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013472 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013476 08A8 0005 0022             		bclr	#5,$22(a0)
0001347C 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013482 0828 0003 0022             		btst	#3,$22(a0)
00013488 6700                       		beq.s	Sonic_Balance
0001348A 7000                       		moveq	#0,d0
0001348C 1028 003D                  		move.b	$3D(a0),d0
00013490 ED48                       		lsl.w	#6,d0
00013492 43F8 D000                  		lea	($FFFFD000).w,a1
00013496 43F1 0000                  		lea	(a1,d0.w),a1
0001349A 4A29 0022                  		tst.b	$22(a1)
0001349E 6B00                       		bmi.s	Sonic_LookUp
000134A0 7200                       		moveq	#0,d1
000134A2 1229 0019                  		move.b	$19(a1),d1
000134A6 3401                       		move.w	d1,d2
000134A8 D442                       		add.w	d2,d2
000134AA 5942                       		subq.w	#4,d2
000134AC D268 0008                  		add.w	8(a0),d1
000134B0 9269 0008                  		sub.w	8(a1),d1
000134B4 0C41 0004                  		cmpi.w	#4,d1
000134B8 6D00                       		blt.s	loc_12F6A
000134BA B242                       		cmp.w	d2,d1
000134BC 6C00                       		bge.s	loc_12F5A
000134BE 6000                       		bra.s	Sonic_LookUp
000134C0                            ; ===========================================================================
000134C0                            
000134C0                            Sonic_Balance:
000134C0 4EB9 0000 0000             		jsr	ObjHitFloor
000134C6 0C41 000C                  		cmpi.w	#$C,d1
000134CA 6D00                       		blt.s	Sonic_LookUp
000134CC 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000134D2 6600                       		bne.s	loc_12F62
000134D4                            
000134D4                            loc_12F5A:
000134D4 08A8 0000 0022             		bclr	#0,$22(a0)
000134DA 6000                       		bra.s	loc_12F70
000134DC                            ; ===========================================================================
000134DC                            
000134DC                            loc_12F62:
000134DC 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000134E2 6600                       		bne.s	Sonic_LookUp
000134E4                            
000134E4                            loc_12F6A:
000134E4 08E8 0000 0022             		bset	#0,$22(a0)
000134EA                            
000134EA                            loc_12F70:
000134EA 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000134F0 6000                       		bra.s	Obj01_ResetScr
000134F2                            ; ===========================================================================
000134F2                            
000134F2                            Sonic_LookUp:
000134F2 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000134F8 6700                       		beq.s	Sonic_Duck	; if not, branch
000134FA 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013500 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013506 6700                       		beq.s	loc_12FC2
00013508 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001350C 6000                       		bra.s	loc_12FC2
0001350E                            ; ===========================================================================
0001350E                            
0001350E                            Sonic_Duck:
0001350E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013514 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013516 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001351C 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013522 6700                       		beq.s	loc_12FC2
00013524 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013528 6000                       		bra.s	loc_12FC2
0001352A                            ; ===========================================================================
0001352A                            
0001352A                            Obj01_ResetScr:
0001352A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013530 6700                       		beq.s	loc_12FC2	; if yes, branch
00013532 6400                       		bcc.s	loc_12FBE
00013534 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013538                            
00013538                            loc_12FBE:
00013538 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001353C                            
0001353C                            loc_12FC2:
0001353C 1038 F602                  		move.b	($FFFFF602).w,d0
00013540 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013544 6600                       		bne.s	loc_12FEE	; if yes, branch
00013546 3028 0014                  		move.w	$14(a0),d0
0001354A 6700                       		beq.s	loc_12FEE
0001354C 6B00                       		bmi.s	loc_12FE2
0001354E 9045                       		sub.w	d5,d0
00013550 6400                       		bcc.s	loc_12FDC
00013552 303C 0000                  		move.w	#0,d0
00013556                            
00013556                            loc_12FDC:
00013556 3140 0014                  		move.w	d0,$14(a0)
0001355A 6000                       		bra.s	loc_12FEE
0001355C                            ; ===========================================================================
0001355C                            
0001355C                            loc_12FE2:
0001355C D045                       		add.w	d5,d0
0001355E 6400                       		bcc.s	loc_12FEA
00013560 303C 0000                  		move.w	#0,d0
00013564                            
00013564                            loc_12FEA:
00013564 3140 0014                  		move.w	d0,$14(a0)
00013568                            
00013568                            loc_12FEE:
00013568 1028 0026                  		move.b	$26(a0),d0
0001356C 4EB9 0000 2C22             		jsr	(CalcSine).l
00013572 C3E8 0014                  		muls.w	$14(a0),d1
00013576 E081                       		asr.l	#8,d1
00013578 3141 0010                  		move.w	d1,$10(a0)
0001357C C1E8 0014                  		muls.w	$14(a0),d0
00013580 E080                       		asr.l	#8,d0
00013582 3140 0012                  		move.w	d0,$12(a0)
00013586                            
00013586                            loc_1300C:
00013586 1028 0026                  		move.b	$26(a0),d0
0001358A 0600 0040                  		addi.b	#$40,d0
0001358E 6B00                       		bmi.s	locret_1307C
00013590 123C 0040                  		move.b	#$40,d1
00013594 4A68 0014                  		tst.w	$14(a0)
00013598 6700                       		beq.s	locret_1307C
0001359A 6B00                       		bmi.s	loc_13024
0001359C 4441                       		neg.w	d1
0001359E                            
0001359E                            loc_13024:
0001359E 1028 0026                  		move.b	$26(a0),d0
000135A2 D001                       		add.b	d1,d0
000135A4 3F00                       		move.w	d0,-(sp)
000135A6 6100 0000                  		bsr.w	Sonic_WalkSpeed
000135AA 301F                       		move.w	(sp)+,d0
000135AC 4A41                       		tst.w	d1
000135AE 6A00                       		bpl.s	locret_1307C
000135B0 E141                       		asl.w	#8,d1
000135B2 0600 0020                  		addi.b	#$20,d0
000135B6 0200 00C0                  		andi.b	#$C0,d0
000135BA 6700                       		beq.s	loc_13078
000135BC 0C00 0040                  		cmpi.b	#$40,d0
000135C0 6700                       		beq.s	loc_13066
000135C2 0C00 0080                  		cmpi.b	#$80,d0
000135C6 6700                       		beq.s	loc_13060
000135C8 D368 0010                  		add.w	d1,$10(a0)
000135CC 08E8 0005 0022             		bset	#5,$22(a0)
000135D2 317C 0000 0014             		move.w	#0,$14(a0)
000135D8 4E75                       		rts	
000135DA                            ; ===========================================================================
000135DA                            
000135DA                            loc_13060:
000135DA 9368 0012                  		sub.w	d1,$12(a0)
000135DE 4E75                       		rts	
000135E0                            ; ===========================================================================
000135E0                            
000135E0                            loc_13066:
000135E0 9368 0010                  		sub.w	d1,$10(a0)
000135E4 08E8 0005 0022             		bset	#5,$22(a0)
000135EA 317C 0000 0014             		move.w	#0,$14(a0)
000135F0 4E75                       		rts	
000135F2                            ; ===========================================================================
000135F2                            
000135F2                            loc_13078:
000135F2 D368 0012                  		add.w	d1,$12(a0)
000135F6                            
000135F6                            locret_1307C:
000135F6 4E75                       		rts	
000135F8                            ; End of function Sonic_Move
000135F8                            
000135F8                            
000135F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135F8                            
000135F8                            
000135F8                            Sonic_MoveLeft:				; XREF: Sonic_Move
000135F8 3028 0014                  		move.w	$14(a0),d0
000135FC 6700                       		beq.s	loc_13086
000135FE 6A00                       		bpl.s	loc_130B2
00013600                            
00013600                            loc_13086:
00013600 08E8 0000 0022             		bset	#0,$22(a0)
00013606 6600                       		bne.s	loc_1309A
00013608 08A8 0005 0022             		bclr	#5,$22(a0)
0001360E 117C 0001 001D             		move.b	#1,$1D(a0)
00013614                            
00013614                            loc_1309A:
00013614 9045                       		sub.w	d5,d0
00013616 3206                       		move.w	d6,d1
00013618 4441                       		neg.w	d1
0001361A B041                       		cmp.w	d1,d0
0001361C 6E00                       		bgt.s	loc_130A6
0001361E 3001                       		move.w	d1,d0
00013620                            
00013620                            loc_130A6:
00013620 3140 0014                  		move.w	d0,$14(a0)
00013624 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001362A 4E75                       		rts	
0001362C                            ; ===========================================================================
0001362C                            
0001362C                            loc_130B2:				; XREF: Sonic_MoveLeft
0001362C 9044                       		sub.w	d4,d0
0001362E 6400                       		bcc.s	loc_130BA
00013630 303C FF80                  		move.w	#-$80,d0
00013634                            
00013634                            loc_130BA:
00013634 3140 0014                  		move.w	d0,$14(a0)
00013638 1028 0026                  		move.b	$26(a0),d0
0001363C 0600 0020                  		addi.b	#$20,d0
00013640 0200 00C0                  		andi.b	#$C0,d0
00013644 6600                       		bne.s	locret_130E8
00013646 0C40 0400                  		cmpi.w	#$400,d0
0001364A 6D00                       		blt.s	locret_130E8
0001364C 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013652 08A8 0000 0022             		bclr	#0,$22(a0)
00013658 303C 00A4                  		move.w	#$A4,d0
0001365C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
00013662                            
00013662                            locret_130E8:
00013662 4E75                       		rts	
00013664                            ; End of function Sonic_MoveLeft
00013664                            
00013664                            
00013664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013664                            
00013664                            
00013664                            Sonic_MoveRight:			; XREF: Sonic_Move
00013664 3028 0014                  		move.w	$14(a0),d0
00013668 6B00                       		bmi.s	loc_13118
0001366A 08A8 0000 0022             		bclr	#0,$22(a0)
00013670 6700                       		beq.s	loc_13104
00013672 08A8 0005 0022             		bclr	#5,$22(a0)
00013678 117C 0001 001D             		move.b	#1,$1D(a0)
0001367E                            
0001367E                            loc_13104:
0001367E D045                       		add.w	d5,d0
00013680 B046                       		cmp.w	d6,d0
00013682 6D00                       		blt.s	loc_1310C
00013684 3006                       		move.w	d6,d0
00013686                            
00013686                            loc_1310C:
00013686 3140 0014                  		move.w	d0,$14(a0)
0001368A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013690 4E75                       		rts	
00013692                            ; ===========================================================================
00013692                            
00013692                            loc_13118:				; XREF: Sonic_MoveRight
00013692 D044                       		add.w	d4,d0
00013694 6400                       		bcc.s	loc_13120
00013696 303C 0080                  		move.w	#$80,d0
0001369A                            
0001369A                            loc_13120:
0001369A 3140 0014                  		move.w	d0,$14(a0)
0001369E 1028 0026                  		move.b	$26(a0),d0
000136A2 0600 0020                  		addi.b	#$20,d0
000136A6 0200 00C0                  		andi.b	#$C0,d0
000136AA 6600                       		bne.s	locret_1314E
000136AC 0C40 FC00                  		cmpi.w	#-$400,d0
000136B0 6E00                       		bgt.s	locret_1314E
000136B2 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000136B8 08E8 0000 0022             		bset	#0,$22(a0)
000136BE 303C 00A4                  		move.w	#$A4,d0
000136C2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
000136C8                            
000136C8                            locret_1314E:
000136C8 4E75                       		rts	
000136CA                            ; End of function Sonic_MoveRight
000136CA                            
000136CA                            ; ---------------------------------------------------------------------------
000136CA                            ; Subroutine to	change Sonic's speed as he rolls
000136CA                            ; ---------------------------------------------------------------------------
000136CA                            
000136CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136CA                            
000136CA                            
000136CA                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000136CA 3C38 F760                  		move.w	($FFFFF760).w,d6
000136CE E346                       		asl.w	#1,d6
000136D0 3A38 F762                  		move.w	($FFFFF762).w,d5
000136D4 E245                       		asr.w	#1,d5
000136D6 3838 F764                  		move.w	($FFFFF764).w,d4
000136DA E444                       		asr.w	#2,d4
000136DC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000136E0 6600 0000                  		bne.w	loc_131CC
000136E4 4A68 003E                  		tst.w	$3E(a0)
000136E8 6600                       		bne.s	loc_13188
000136EA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000136F0 6700                       		beq.s	loc_1317C	; if not, branch
000136F2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136F8 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000136FA 6100 0000                  		bsr.w	Sonic_RollLeft
000136FE                            
000136FE                            loc_1317C:
000136FE 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013704 6700                       		beq.s	loc_13188	; if not, branch
00013706 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001370C 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
0001370E 6100 0000                  		bsr.w	Sonic_RollLeft
00013712 6000                       		bra.s	loc_13188
00013714                            
00013714                            SonicRS_RollRight:
00013714 6100 0000                  		bsr.w	Sonic_RollRight
00013718                            
00013718                            loc_13188:
00013718 3028 0014                  		move.w	$14(a0),d0
0001371C 6700                       		beq.s	loc_131AA
0001371E 6B00                       		bmi.s	loc_1319E
00013720 9045                       		sub.w	d5,d0
00013722 6400                       		bcc.s	loc_13198
00013724 303C 0000                  		move.w	#0,d0
00013728                            
00013728                            loc_13198:
00013728 3140 0014                  		move.w	d0,$14(a0)
0001372C 6000                       		bra.s	loc_131AA
0001372E                            ; ===========================================================================
0001372E                            
0001372E                            loc_1319E:				; XREF: Sonic_RollSpeed
0001372E D045                       		add.w	d5,d0
00013730 6400                       		bcc.s	loc_131A6
00013732 303C 0000                  		move.w	#0,d0
00013736                            
00013736                            loc_131A6:
00013736 3140 0014                  		move.w	d0,$14(a0)
0001373A                            
0001373A                            loc_131AA:
0001373A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001373E 6600                       		bne.s	loc_131CC	; if yes, branch
00013740 08A8 0002 0022             		bclr	#2,$22(a0)
00013746 117C 0013 0016             		move.b	#$13,$16(a0)
0001374C 117C 0009 0017             		move.b	#9,$17(a0)
00013752 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013758 5B68 000C                  		subq.w	#5,$C(a0)
0001375C                            
0001375C                            loc_131CC:
0001375C 1028 0026                  		move.b	$26(a0),d0
00013760 4EB9 0000 2C22             		jsr	(CalcSine).l
00013766 C1E8 0014                  		muls.w	$14(a0),d0
0001376A E080                       		asr.l	#8,d0
0001376C 3140 0012                  		move.w	d0,$12(a0)
00013770 C3E8 0014                  		muls.w	$14(a0),d1
00013774 E081                       		asr.l	#8,d1
00013776 0C41 1000                  		cmpi.w	#$1000,d1
0001377A 6F00                       		ble.s	loc_131F0
0001377C 323C 1000                  		move.w	#$1000,d1
00013780                            
00013780                            loc_131F0:
00013780 0C41 F000                  		cmpi.w	#-$1000,d1
00013784 6C00                       		bge.s	loc_131FA
00013786 323C F000                  		move.w	#-$1000,d1
0001378A                            
0001378A                            loc_131FA:
0001378A 3141 0010                  		move.w	d1,$10(a0)
0001378E 6000 FDF6                  		bra.w	loc_1300C
00013792                            ; End of function Sonic_RollSpeed
00013792                            
00013792                            
00013792                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013792                            
00013792                            
00013792                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013792 3028 0014                  		move.w	$14(a0),d0
00013796 6700                       		beq.s	loc_1320A
00013798 6A00                       		bpl.s	loc_13218
0001379A                            
0001379A                            loc_1320A:
0001379A 08E8 0000 0022             		bset	#0,$22(a0)
000137A0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000137A6 4E75                       		rts	
000137A8                            ; ===========================================================================
000137A8                            
000137A8                            loc_13218:
000137A8 9044                       		sub.w	d4,d0
000137AA 6400                       		bcc.s	loc_13220
000137AC 303C FF80                  		move.w	#-$80,d0
000137B0                            
000137B0                            loc_13220:
000137B0 3140 0014                  		move.w	d0,$14(a0)
000137B4 4E75                       		rts	
000137B6                            ; End of function Sonic_RollLeft
000137B6                            
000137B6                            
000137B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137B6                            
000137B6                            
000137B6                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000137B6 3028 0014                  		move.w	$14(a0),d0
000137BA 6B00                       		bmi.s	loc_1323A
000137BC 08A8 0000 0022             		bclr	#0,$22(a0)
000137C2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000137C8 4E75                       		rts	
000137CA                            ; ===========================================================================
000137CA                            
000137CA                            loc_1323A:
000137CA D044                       		add.w	d4,d0
000137CC 6400                       		bcc.s	loc_13242
000137CE 303C 0080                  		move.w	#$80,d0
000137D2                            
000137D2                            loc_13242:
000137D2 3140 0014                  		move.w	d0,$14(a0)
000137D6 4E75                       		rts	
000137D8                            ; End of function Sonic_RollRight
000137D8                            
000137D8                            Sonic_AirUnroll:
000137D8                            		
000137D8 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
000137DC 6600                       		bne.s	@timer
000137DE 1038 F605                  		move.b	($FFFFF605).w,d0
000137E2 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
000137E6 6700                       		beq.s	@end	; if not, branch
000137E8 08A8 0002 0022             		bclr	#2,$22(a0)
000137EE 117C 0013 0016             		move.b	#$13,$16(a0)
000137F4 117C 0009 0017             		move.b	#9,$17(a0)
000137FA 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013800 2028 0010                  		move.l	$10(a0),d0
00013804 D080                       		add.l	d0,d0
00013806 2140 0010                  		move.l	d0,$10(a0)
0001380A 5B68 000C                  		subq.w	#5,$C(a0)
0001380E                            	@end:
0001380E 4E75                       		rts
00013810                            	@timer:
00013810 5328 003A                  		subq.b	#1,$3A(a0)
00013814 4E75                       		rts
00013816                            
00013816                            ; ---------------------------------------------------------------------------
00013816                            ; Subroutine to	change Sonic's direction while jumping
00013816                            ; ---------------------------------------------------------------------------
00013816                            
00013816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013816                            
00013816                            
00013816                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013816 3C38 F760                  		move.w	($FFFFF760).w,d6
0001381A 3A38 F762                  		move.w	($FFFFF762).w,d5
0001381E E345                       		asl.w	#1,d5
00013820 0828 0004 0022             		btst	#4,$22(a0)
00013826 6600                       		bne.s	Obj01_ResetScr2
00013828 3028 0010                  		move.w	$10(a0),d0
0001382C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013832 6700                       		beq.s	loc_13278	; if not, branch
00013834 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001383A 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
0001383C 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013840 6E00                       		bgt.s	loc_13278
00013842 3001                       		move.w	d1,d0
00013844                            
00013844                            loc_13278:
00013844 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001384A 6700                       		beq.s	Obj01_JumpMove	; if not, branch
0001384C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013852 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013854 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013858 6E00                       		bgt.s	Obj01_JumpMove
0001385A 3001                       		move.w	d1,d0
0001385C 6000                       		bra.s	Obj01_JumpMove
0001385E                            
0001385E                            SonicCJD_JumpLeft:
0001385E 08E8 0000 0022             		bset	#0,$22(a0)
00013864 9045                       		sub.w	d5,d0
00013866 3206                       		move.w	d6,d1
00013868 4441                       		neg.w	d1
0001386A B041                       		cmp.w	d1,d0
0001386C                            		; bgt.s	loc_13278
0001386C                            		; move.w	d1,d0
0001386C 4E75                       		rts
0001386E                            
0001386E                            SonicCJD_JumpRight:
0001386E 08A8 0000 0022             		bclr	#0,$22(a0)
00013874 D045                       		add.w	d5,d0
00013876 B046                       		cmp.w	d6,d0
00013878 6D00                       		blt.s	Obj01_JumpMove
0001387A 3006                       		move.w	d6,d0
0001387C                            
0001387C                            Obj01_JumpMove:
0001387C 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013880                            
00013880                            Obj01_ResetScr2:
00013880 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013886 6700                       		beq.s	loc_132A4	; if yes, branch
00013888 6400                       		bcc.s	loc_132A0
0001388A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001388E                            
0001388E                            loc_132A0:
0001388E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013892                            
00013892                            loc_132A4:
00013892 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013898 6500                       		bcs.s	locret_132D2	; if yes, branch
0001389A 3028 0010                  		move.w	$10(a0),d0
0001389E 3200                       		move.w	d0,d1
000138A0 EA41                       		asr.w	#5,d1
000138A2 6700                       		beq.s	locret_132D2
000138A4 6B00                       		bmi.s	loc_132C6
000138A6 9041                       		sub.w	d1,d0
000138A8 6400                       		bcc.s	loc_132C0
000138AA 303C 0000                  		move.w	#0,d0
000138AE                            
000138AE                            loc_132C0:
000138AE 3140 0010                  		move.w	d0,$10(a0)
000138B2 4E75                       		rts	
000138B4                            ; ===========================================================================
000138B4                            
000138B4                            loc_132C6:
000138B4 9041                       		sub.w	d1,d0
000138B6 6500                       		bcs.s	loc_132CE
000138B8 303C 0000                  		move.w	#0,d0
000138BC                            
000138BC                            loc_132CE:
000138BC 3140 0010                  		move.w	d0,$10(a0)
000138C0                            
000138C0                            locret_132D2:
000138C0 4E75                       		rts	
000138C2                            ; End of function Sonic_ChgJumpDir
000138C2                            
000138C2                            ; ===========================================================================
000138C2                            ; ---------------------------------------------------------------------------
000138C2                            ; Unused subroutine to squash Sonic
000138C2                            ; ---------------------------------------------------------------------------
000138C2 1028 0026                  		move.b	$26(a0),d0
000138C6 0600 0020                  		addi.b	#$20,d0
000138CA 0200 00C0                  		andi.b	#$C0,d0
000138CE 6600                       		bne.s	locret_13302
000138D0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000138D4 4A41                       		tst.w	d1
000138D6 6A00                       		bpl.s	locret_13302
000138D8 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000138DE 317C 0000 0010             		move.w	#0,$10(a0)
000138E4 317C 0000 0012             		move.w	#0,$12(a0)
000138EA 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000138F0                            
000138F0                            locret_13302:
000138F0 4E75                       		rts	
000138F2                            ; ---------------------------------------------------------------------------
000138F2                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000138F2                            ; ---------------------------------------------------------------------------
000138F2                            
000138F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138F2                            
000138F2                            
000138F2                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000138F2 2228 0008                  		move.l	8(a0),d1
000138F6 3028 0010                  		move.w	$10(a0),d0
000138FA 48C0                       		ext.l	d0
000138FC E180                       		asl.l	#8,d0
000138FE D280                       		add.l	d0,d1
00013900 4841                       		swap	d1
00013902 3038 F728                  		move.w	($FFFFF728).w,d0
00013906 0640 0010                  		addi.w	#$10,d0
0001390A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001390C 6200                       		bhi.s	Boundary_Sides	; if yes, branch
0001390E 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013912 0640 0128                  		addi.w	#$128,d0
00013916 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001391A 6600                       		bne.s	loc_13332
0001391C 0640 0040                  		addi.w	#$40,d0
00013920                            
00013920                            loc_13332:
00013920 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013922 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013924                            
00013924                            loc_13336:
00013924 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013928 0640 00E0                  		addi.w	#$E0,d0
0001392C B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013930 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013932 4E75                       		rts	
00013934                            ; ===========================================================================
00013934                            
00013934                            Boundary_Bottom:
00013934 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
0001393A 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
0001393E 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013944 6500 0000                  		bcs.w	KillSonic
00013948 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0001394C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013952 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013958 4E75                       		rts	
0001395A                            ; ===========================================================================
0001395A                            
0001395A                            Boundary_Sides:
0001395A 3140 0008                  		move.w	d0,8(a0)
0001395E 317C 0000 000A             		move.w	#0,$A(a0)
00013964 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
0001396A 317C 0000 0014             		move.w	#0,$14(a0)
00013970 60B2                       		bra.s	loc_13336
00013972                            ; End of function Sonic_LevelBound
00013972                            
00013972                            ; ---------------------------------------------------------------------------
00013972                            ; Subroutine allowing Sonic to roll when he's moving
00013972                            ; ---------------------------------------------------------------------------
00013972                            
00013972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013972                            
00013972                            
00013972                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013972 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013976 6600                       		bne.s	Obj01_NoRoll
00013978 3028 0014                  		move.w	$14(a0),d0
0001397C 6A00                       		bpl.s	loc_13392
0001397E 4440                       		neg.w	d0
00013980                            
00013980                            loc_13392:
00013980 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013984 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013986 1038 F602                  		move.b	($FFFFF602).w,d0
0001398A 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
0001398E 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013990 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013996 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013998                            
00013998                            Obj01_NoRoll:
00013998 4E75                       		rts	
0001399A                            ; ===========================================================================
0001399A                            
0001399A                            Obj01_ChkRoll:
0001399A 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
000139A0 6700                       		beq.s	Obj01_DoRoll	; if not, branch
000139A2 4E75                       		rts	
000139A4                            ; ===========================================================================
000139A4                            
000139A4                            Obj01_DoRoll:
000139A4 08E8 0002 0022             		bset	#2,$22(a0)
000139AA 117C 000E 0016             		move.b	#$E,$16(a0)
000139B0 117C 0007 0017             		move.b	#7,$17(a0)
000139B6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139BC 5A68 000C                  		addq.w	#5,$C(a0)
000139C0 303C 00BE                  		move.w	#$BE,d0
000139C4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rolling sound
000139CA 4A68 0014                  		tst.w	$14(a0)
000139CE 6600                       		bne.s	locret_133E8
000139D0 317C 0200 0014             		move.w	#$200,$14(a0)
000139D6                            
000139D6                            locret_133E8:
000139D6 4E75                       		rts	
000139D8                            ; End of function Sonic_Roll
000139D8                            
000139D8                            ; ---------------------------------------------------------------------------
000139D8                            ; Subroutine allowing Sonic to jump
000139D8                            ; ---------------------------------------------------------------------------
000139D8                            
000139D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139D8                            
000139D8                            
000139D8                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000139D8 1038 F603                  		move.b	($FFFFF603).w,d0
000139DC 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000139E0 6700 0000                  		beq.w	locret_1348E	; if not, branch
000139E4 7000                       		moveq	#0,d0
000139E6 1028 0026                  		move.b	$26(a0),d0
000139EA 0600 0080                  		addi.b	#$80,d0
000139EE 6100 0000                  		bsr.w	sub_14D48
000139F2 0C41 0006                  		cmpi.w	#6,d1
000139F6 6D00 0000                  		blt.w	locret_1348E
000139FA 343C 0680                  		move.w	#$680,d2
000139FE 0828 0006 0022             		btst	#6,$22(a0)
00013A04 6700                       		beq.s	loc_1341C
00013A06 343C 0380                  		move.w	#$380,d2
00013A0A                            
00013A0A                            loc_1341C:
00013A0A 7000                       		moveq	#0,d0
00013A0C 1028 0026                  		move.b	$26(a0),d0
00013A10 0400 0040                  		subi.b	#$40,d0
00013A14 4EB9 0000 2C22             		jsr	(CalcSine).l
00013A1A C3C2                       		muls.w	d2,d1
00013A1C E081                       		asr.l	#8,d1
00013A1E D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013A22 C1C2                       		muls.w	d2,d0
00013A24 E080                       		asr.l	#8,d0
00013A26 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013A2A 08E8 0001 0022             		bset	#1,$22(a0)
00013A30 08A8 0005 0022             		bclr	#5,$22(a0)
00013A36 588F                       		addq.l	#4,sp
00013A38 117C 0001 003C             		move.b	#1,$3C(a0)
00013A3E 4228 0038                  		clr.b	$38(a0)
00013A42 303C 00A0                  		move.w	#$A0,d0
00013A46 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
00013A4C 117C 0013 0016             		move.b	#$13,$16(a0)
00013A52 117C 0009 0017             		move.b	#9,$17(a0)
00013A58 0828 0002 0022             		btst	#2,$22(a0)
00013A5E 6600                       		bne.s	loc_13490
00013A60 117C 000E 0016             		move.b	#$E,$16(a0)
00013A66 117C 0007 0017             		move.b	#7,$17(a0)
00013A6C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013A72 08E8 0002 0022             		bset	#2,$22(a0)
00013A78 5A68 000C                  		addq.w	#5,$C(a0)
00013A7C 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013A82                            
00013A82                            locret_1348E:
00013A82 4E75                       		rts	
00013A84                            ; ===========================================================================
00013A84                            
00013A84                            loc_13490:
00013A84 08E8 0004 0022             		bset	#4,$22(a0)
00013A8A 4E75                       		rts	
00013A8C                            ; End of function Sonic_Jump
00013A8C                            
00013A8C                            
00013A8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A8C                            
00013A8C                            
00013A8C                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A8C 4A28 003C                  		tst.b	$3C(a0)
00013A90 6700                       		beq.s	loc_134C4
00013A92 323C FC00                  		move.w	#-$400,d1
00013A96 0828 0006 0022             		btst	#6,$22(a0)
00013A9C 6700                       		beq.s	loc_134AE
00013A9E 323C FE00                  		move.w	#-$200,d1
00013AA2                            
00013AA2                            loc_134AE:
00013AA2 B268 0012                  		cmp.w	$12(a0),d1
00013AA6 6F00                       		ble.s	locret_134C2
00013AA8 1038 F602                  		move.b	($FFFFF602).w,d0
00013AAC 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013AB0 6600                       		bne.s	locret_134C2	; if yes, branch
00013AB2 3141 0012                  		move.w	d1,$12(a0)
00013AB6                            
00013AB6                            locret_134C2:
00013AB6 4E75                       		rts	
00013AB8                            ; ===========================================================================
00013AB8                            
00013AB8                            loc_134C4:
00013AB8 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013ABE 6C00                       		bge.s	locret_134D2
00013AC0 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013AC6                            
00013AC6                            locret_134D2:
00013AC6 4E75                       		rts	
00013AC8                            ; End of function Sonic_JumpHeight
00013AC8                            
00013AC8                            ; ---------------------------------------------------------------------------
00013AC8                            ; Subroutine to	slow Sonic walking up a	slope
00013AC8                            ; ---------------------------------------------------------------------------
00013AC8                            
00013AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AC8                            
00013AC8                            
00013AC8                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013AC8 1028 0026                  		move.b	$26(a0),d0
00013ACC 0600 0060                  		addi.b	#$60,d0
00013AD0 0C00 00C0                  		cmpi.b	#$C0,d0
00013AD4 6400                       		bcc.s	locret_13508
00013AD6 1028 0026                  		move.b	$26(a0),d0
00013ADA 4EB9 0000 2C22             		jsr	(CalcSine).l
00013AE0 C1FC 0020                  		muls.w	#$20,d0
00013AE4 E080                       		asr.l	#8,d0
00013AE6 4A68 0014                  		tst.w	$14(a0)
00013AEA 6700                       		beq.s	locret_13508
00013AEC 6B00                       		bmi.s	loc_13504
00013AEE 4A40                       		tst.w	d0
00013AF0 6700                       		beq.s	locret_13502
00013AF2 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013AF6                            
00013AF6                            locret_13502:
00013AF6 4E75                       		rts	
00013AF8                            ; ===========================================================================
00013AF8                            
00013AF8                            loc_13504:
00013AF8 D168 0014                  		add.w	d0,$14(a0)
00013AFC                            
00013AFC                            locret_13508:
00013AFC 4E75                       		rts	
00013AFE                            ; End of function Sonic_SlopeResist
00013AFE                            
00013AFE                            ; ---------------------------------------------------------------------------
00013AFE                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013AFE                            ; ---------------------------------------------------------------------------
00013AFE                            
00013AFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AFE                            
00013AFE                            
00013AFE                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013AFE 1028 0026                  		move.b	$26(a0),d0
00013B02 0600 0060                  		addi.b	#$60,d0
00013B06 0C00 00C0                  		cmpi.b	#-$40,d0
00013B0A 6400                       		bcc.s	locret_13544
00013B0C 1028 0026                  		move.b	$26(a0),d0
00013B10 4EB9 0000 2C22             		jsr	(CalcSine).l
00013B16 C1FC 0050                  		muls.w	#$50,d0
00013B1A E080                       		asr.l	#8,d0
00013B1C 4A68 0014                  		tst.w	$14(a0)
00013B20 6B00                       		bmi.s	loc_1353A
00013B22 4A40                       		tst.w	d0
00013B24 6A00                       		bpl.s	loc_13534
00013B26 E480                       		asr.l	#2,d0
00013B28                            
00013B28                            loc_13534:
00013B28 D168 0014                  		add.w	d0,$14(a0)
00013B2C 4E75                       		rts	
00013B2E                            ; ===========================================================================
00013B2E                            
00013B2E                            loc_1353A:
00013B2E 4A40                       		tst.w	d0
00013B30 6B00                       		bmi.s	loc_13540
00013B32 E480                       		asr.l	#2,d0
00013B34                            
00013B34                            loc_13540:
00013B34 D168 0014                  		add.w	d0,$14(a0)
00013B38                            
00013B38                            locret_13544:
00013B38 4E75                       		rts	
00013B3A                            ; End of function Sonic_RollRepel
00013B3A                            
00013B3A                            ; ---------------------------------------------------------------------------
00013B3A                            ; Subroutine to	push Sonic down	a slope
00013B3A                            ; ---------------------------------------------------------------------------
00013B3A                            
00013B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B3A                            
00013B3A                            
00013B3A                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013B3A 4E71                       		nop	
00013B3C 4A28 0038                  		tst.b	$38(a0)
00013B40 6600                       		bne.s	locret_13580
00013B42 4A68 003E                  		tst.w	$3E(a0)
00013B46 6600                       		bne.s	loc_13582
00013B48 1028 0026                  		move.b	$26(a0),d0
00013B4C 0600 0020                  		addi.b	#$20,d0
00013B50 0200 00C0                  		andi.b	#$C0,d0
00013B54 6700                       		beq.s	locret_13580
00013B56 3028 0014                  		move.w	$14(a0),d0
00013B5A 6A00                       		bpl.s	loc_1356A
00013B5C 4440                       		neg.w	d0
00013B5E                            
00013B5E                            loc_1356A:
00013B5E 0C40 0280                  		cmpi.w	#$280,d0
00013B62 6400                       		bcc.s	locret_13580
00013B64 4268 0014                  		clr.w	$14(a0)
00013B68 08E8 0001 0022             		bset	#1,$22(a0)
00013B6E 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013B74                            
00013B74                            locret_13580:
00013B74 4E75                       		rts	
00013B76                            ; ===========================================================================
00013B76                            
00013B76                            loc_13582:
00013B76 5368 003E                  		subq.w	#1,$3E(a0)
00013B7A 4E75                       		rts	
00013B7C                            ; End of function Sonic_SlopeRepel
00013B7C                            
00013B7C                            ; ---------------------------------------------------------------------------
00013B7C                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013B7C                            ; ---------------------------------------------------------------------------
00013B7C                            
00013B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B7C                            
00013B7C                            
00013B7C                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B7C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013B80 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013B82 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013B84                            
00013B84 5400                       		addq.b	#2,d0		; increase angle
00013B86 6400                       		bcc.s	loc_13596
00013B88 7000                       		moveq	#0,d0
00013B8A                            
00013B8A                            loc_13596:
00013B8A 6000                       		bra.s	loc_1359E
00013B8C                            ; ===========================================================================
00013B8C                            
00013B8C                            loc_13598:
00013B8C 5500                       		subq.b	#2,d0		; decrease angle
00013B8E 6400                       		bcc.s	loc_1359E
00013B90 7000                       		moveq	#0,d0
00013B92                            
00013B92                            loc_1359E:
00013B92 1140 0026                  		move.b	d0,$26(a0)
00013B96                            
00013B96                            locret_135A2:
00013B96 4E75                       		rts	
00013B98                            ; End of function Sonic_JumpAngle
00013B98                            
00013B98                            ; ---------------------------------------------------------------------------
00013B98                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013B98                            ; ---------------------------------------------------------------------------
00013B98                            
00013B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B98                            
00013B98                            
00013B98                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013B98 3228 0010                  		move.w	$10(a0),d1
00013B9C 3428 0012                  		move.w	$12(a0),d2
00013BA0 4EB9 0000 2EF0             		jsr	(CalcAngle).l
00013BA6 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013BAA 0400 0020                  		subi.b	#$20,d0
00013BAE 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013BB2 0200 00C0                  		andi.b	#$C0,d0
00013BB6 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013BBA 0C00 0040                  		cmpi.b	#$40,d0
00013BBE 6700 0000                  		beq.w	loc_13680
00013BC2 0C00 0080                  		cmpi.b	#$80,d0
00013BC6 6700 0000                  		beq.w	loc_136E2
00013BCA 0C00 00C0                  		cmpi.b	#-$40,d0
00013BCE 6700 0000                  		beq.w	loc_1373E
00013BD2 6100 0000                  		bsr.w	Sonic_HitWall
00013BD6 4A41                       		tst.w	d1
00013BD8 6A00                       		bpl.s	loc_135F0
00013BDA 9368 0008                  		sub.w	d1,8(a0)
00013BDE 317C 0000 0010             		move.w	#0,$10(a0)
00013BE4                            
00013BE4                            loc_135F0:
00013BE4 6100 0000                  		bsr.w	sub_14EB4
00013BE8 4A41                       		tst.w	d1
00013BEA 6A00                       		bpl.s	loc_13602
00013BEC D368 0008                  		add.w	d1,8(a0)
00013BF0 317C 0000 0010             		move.w	#0,$10(a0)
00013BF6                            
00013BF6                            loc_13602:
00013BF6 6100 0000                  		bsr.w	Sonic_HitFloor
00013BFA 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013BFE 4A41                       		tst.w	d1
00013C00 6A00                       		bpl.s	locret_1367E
00013C02 1428 0012                  		move.b	$12(a0),d2
00013C06 5002                       		addq.b	#8,d2
00013C08 4402                       		neg.b	d2
00013C0A B202                       		cmp.b	d2,d1
00013C0C 6C00                       		bge.s	loc_1361E
00013C0E B002                       		cmp.b	d2,d0
00013C10 6D00                       		blt.s	locret_1367E
00013C12                            
00013C12                            loc_1361E:
00013C12 D368 000C                  		add.w	d1,$C(a0)
00013C16 1143 0026                  		move.b	d3,$26(a0)
00013C1A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013C1E 117C 0000 001C             		move.b	#0,$1C(a0)
00013C24 1003                       		move.b	d3,d0
00013C26 0600 0020                  		addi.b	#$20,d0
00013C2A 0200 0040                  		andi.b	#$40,d0
00013C2E 6600                       		bne.s	loc_1365C
00013C30 1003                       		move.b	d3,d0
00013C32 0600 0010                  		addi.b	#$10,d0
00013C36 0200 0020                  		andi.b	#$20,d0
00013C3A 6700                       		beq.s	loc_1364E
00013C3C E0E8 0012                  		asr	$12(a0)
00013C40 6000                       		bra.s	loc_13670
00013C42                            ; ===========================================================================
00013C42                            
00013C42                            loc_1364E:
00013C42 317C 0000 0012             		move.w	#0,$12(a0)
00013C48 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013C4E 4E75                       		rts	
00013C50                            ; ===========================================================================
00013C50                            
00013C50                            loc_1365C:
00013C50 317C 0000 0010             		move.w	#0,$10(a0)
00013C56 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013C5C 6F00                       		ble.s	loc_13670
00013C5E 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013C64                            
00013C64                            loc_13670:
00013C64 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C6A 4A03                       		tst.b	d3
00013C6C 6A00                       		bpl.s	locret_1367E
00013C6E 4468 0014                  		neg.w	$14(a0)
00013C72                            
00013C72                            locret_1367E:
00013C72 4E75                       		rts	
00013C74                            ; ===========================================================================
00013C74                            
00013C74                            loc_13680:
00013C74 6100 0000                  		bsr.w	Sonic_HitWall
00013C78 4A41                       		tst.w	d1
00013C7A 6A00                       		bpl.s	loc_1369A
00013C7C 9368 0008                  		sub.w	d1,8(a0)
00013C80 317C 0000 0010             		move.w	#0,$10(a0)
00013C86 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C8C 4E75                       		rts	
00013C8E                            ; ===========================================================================
00013C8E                            
00013C8E                            loc_1369A:
00013C8E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013C92 4A41                       		tst.w	d1
00013C94 6A00                       		bpl.s	loc_136B4
00013C96 9368 000C                  		sub.w	d1,$C(a0)
00013C9A 4A68 0012                  		tst.w	$12(a0)
00013C9E 6A00                       		bpl.s	locret_136B2
00013CA0 317C 0000 0012             		move.w	#0,$12(a0)
00013CA6                            
00013CA6                            locret_136B2:
00013CA6 4E75                       		rts	
00013CA8                            ; ===========================================================================
00013CA8                            
00013CA8                            loc_136B4:
00013CA8 4A68 0012                  		tst.w	$12(a0)
00013CAC 6B00                       		bmi.s	locret_136E0
00013CAE 6100 0000                  		bsr.w	Sonic_HitFloor
00013CB2 4A41                       		tst.w	d1
00013CB4 6A00                       		bpl.s	locret_136E0
00013CB6 D368 000C                  		add.w	d1,$C(a0)
00013CBA 1143 0026                  		move.b	d3,$26(a0)
00013CBE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013CC2 117C 0000 001C             		move.b	#0,$1C(a0)
00013CC8 317C 0000 0012             		move.w	#0,$12(a0)
00013CCE 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013CD4                            
00013CD4                            locret_136E0:
00013CD4 4E75                       		rts	
00013CD6                            ; ===========================================================================
00013CD6                            
00013CD6                            loc_136E2:
00013CD6 6100 0000                  		bsr.w	Sonic_HitWall
00013CDA 4A41                       		tst.w	d1
00013CDC 6A00                       		bpl.s	loc_136F4
00013CDE 9368 0008                  		sub.w	d1,8(a0)
00013CE2 317C 0000 0010             		move.w	#0,$10(a0)
00013CE8                            
00013CE8                            loc_136F4:
00013CE8 6100 0000                  		bsr.w	sub_14EB4
00013CEC 4A41                       		tst.w	d1
00013CEE 6A00                       		bpl.s	loc_13706
00013CF0 D368 0008                  		add.w	d1,8(a0)
00013CF4 317C 0000 0010             		move.w	#0,$10(a0)
00013CFA                            
00013CFA                            loc_13706:
00013CFA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013CFE 4A41                       		tst.w	d1
00013D00 6A00                       		bpl.s	locret_1373C
00013D02 9368 000C                  		sub.w	d1,$C(a0)
00013D06 1003                       		move.b	d3,d0
00013D08 0600 0020                  		addi.b	#$20,d0
00013D0C 0200 0040                  		andi.b	#$40,d0
00013D10 6600                       		bne.s	loc_13726
00013D12 317C 0000 0012             		move.w	#0,$12(a0)
00013D18 4E75                       		rts	
00013D1A                            ; ===========================================================================
00013D1A                            
00013D1A                            loc_13726:
00013D1A 1143 0026                  		move.b	d3,$26(a0)
00013D1E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D22 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D28 4A03                       		tst.b	d3
00013D2A 6A00                       		bpl.s	locret_1373C
00013D2C 4468 0014                  		neg.w	$14(a0)
00013D30                            
00013D30                            locret_1373C:
00013D30 4E75                       		rts	
00013D32                            ; ===========================================================================
00013D32                            
00013D32                            loc_1373E:
00013D32 6100 0000                  		bsr.w	sub_14EB4
00013D36 4A41                       		tst.w	d1
00013D38 6A00                       		bpl.s	loc_13758
00013D3A D368 0008                  		add.w	d1,8(a0)
00013D3E 317C 0000 0010             		move.w	#0,$10(a0)
00013D44 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D4A 4E75                       		rts	
00013D4C                            ; ===========================================================================
00013D4C                            
00013D4C                            loc_13758:
00013D4C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D50 4A41                       		tst.w	d1
00013D52 6A00                       		bpl.s	loc_13772
00013D54 9368 000C                  		sub.w	d1,$C(a0)
00013D58 4A68 0012                  		tst.w	$12(a0)
00013D5C 6A00                       		bpl.s	locret_13770
00013D5E 317C 0000 0012             		move.w	#0,$12(a0)
00013D64                            
00013D64                            locret_13770:
00013D64 4E75                       		rts	
00013D66                            ; ===========================================================================
00013D66                            
00013D66                            loc_13772:
00013D66 4A68 0012                  		tst.w	$12(a0)
00013D6A 6B00                       		bmi.s	locret_1379E
00013D6C 6100 0000                  		bsr.w	Sonic_HitFloor
00013D70 4A41                       		tst.w	d1
00013D72 6A00                       		bpl.s	locret_1379E
00013D74 D368 000C                  		add.w	d1,$C(a0)
00013D78 1143 0026                  		move.b	d3,$26(a0)
00013D7C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D80 117C 0000 001C             		move.b	#0,$1C(a0)
00013D86 317C 0000 0012             		move.w	#0,$12(a0)
00013D8C 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013D92                            
00013D92                            locret_1379E:
00013D92 4E75                       		rts	
00013D94                            ; End of function Sonic_Floor
00013D94                            
00013D94                            ; ---------------------------------------------------------------------------
00013D94                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013D94                            ; ---------------------------------------------------------------------------
00013D94                            
00013D94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D94                            
00013D94                            
00013D94                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013D94 0828 0004 0022             		btst	#4,$22(a0)
00013D9A 6700                       		beq.s	loc_137AE
00013D9C 4E71                       		nop	
00013D9E 4E71                       		nop	
00013DA0 4E71                       		nop	
00013DA2                            
00013DA2                            loc_137AE:
00013DA2 08A8 0005 0022             		bclr	#5,$22(a0)
00013DA8 08A8 0001 0022             		bclr	#1,$22(a0)
00013DAE 08A8 0004 0022             		bclr	#4,$22(a0)
00013DB4 0828 0002 0022             		btst	#2,$22(a0)
00013DBA 6700                       		beq.s	loc_137E4
00013DBC 08A8 0002 0022             		bclr	#2,$22(a0)
00013DC2 117C 0013 0016             		move.b	#$13,$16(a0)
00013DC8 117C 0009 0017             		move.b	#9,$17(a0)
00013DCE 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013DD4 5B68 000C                  		subq.w	#5,$C(a0)
00013DD8                            
00013DD8                            loc_137E4:
00013DD8 117C 0000 003C             		move.b	#0,$3C(a0)
00013DDE 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013DE4 4E75                       		rts	
00013DE6                            ; End of function Sonic_ResetOnFloor
00013DE6                            
00013DE6                            ; ===========================================================================
00013DE6                            ; ---------------------------------------------------------------------------
00013DE6                            ; Sonic	when he	gets hurt
00013DE6                            ; ---------------------------------------------------------------------------
00013DE6                            
00013DE6                            Obj01_Hurt:				; XREF: Obj01_Index
00013DE6 4EBA 9D64                  		jsr	SpeedToPos
00013DEA 0668 0030 0012             		addi.w	#$30,$12(a0)
00013DF0 0828 0006 0022             		btst	#6,$22(a0)
00013DF6 6700                       		beq.s	loc_1380C
00013DF8 0468 0020 0012             		subi.w	#$20,$12(a0)
00013DFE                            
00013DFE                            loc_1380C:
00013DFE 6100 0000                  		bsr.w	Sonic_HurtStop
00013E02 6100 FAEE                  		bsr.w	Sonic_LevelBound
00013E06 6100 F4BE                  		bsr.w	Sonic_RecordPos
00013E0A 6100 0000                  		bsr.w	Sonic_Animate
00013E0E 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E12 4EFA 9D5E                  		jmp	DisplaySprite
00013E16                            
00013E16                            ; ---------------------------------------------------------------------------
00013E16                            ; Subroutine to	stop Sonic falling after he's been hurt
00013E16                            ; ---------------------------------------------------------------------------
00013E16                            
00013E16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E16                            
00013E16                            
00013E16                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013E16 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E1A 0640 00E0                  		addi.w	#$E0,d0
00013E1E B068 000C                  		cmp.w	$C(a0),d0
00013E22 6500 0000                  		bcs.w	KillSonic
00013E26 6100 FD70                  		bsr.w	Sonic_Floor
00013E2A 0828 0001 0022             		btst	#1,$22(a0)
00013E30 6600                       		bne.s	locret_13860
00013E32 7000                       		moveq	#0,d0
00013E34 3140 0012                  		move.w	d0,$12(a0)
00013E38 3140 0010                  		move.w	d0,$10(a0)
00013E3C 3140 0014                  		move.w	d0,$14(a0)
00013E40 117C 0000 001C             		move.b	#0,$1C(a0)
00013E46 5528 0024                  		subq.b	#2,$24(a0)
00013E4A 317C 0078 0030             		move.w	#$78,$30(a0)
00013E50                            
00013E50                            locret_13860:
00013E50 4E75                       		rts	
00013E52                            ; End of function Sonic_HurtStop
00013E52                            
00013E52                            ; ===========================================================================
00013E52                            ; ---------------------------------------------------------------------------
00013E52                            ; Sonic	when he	dies
00013E52                            ; ---------------------------------------------------------------------------
00013E52                            
00013E52                            Obj01_Death:				; XREF: Obj01_Index
00013E52 6100 0000                  		bsr.w	GameOver
00013E56 4EBA 9CC8                  		jsr	ObjectFall
00013E5A 6100 F46A                  		bsr.w	Sonic_RecordPos
00013E5E 6100 0000                  		bsr.w	Sonic_Animate
00013E62 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E66 4EFA 9D0A                  		jmp	DisplaySprite
00013E6A                            
00013E6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E6A                            
00013E6A                            
00013E6A                            GameOver:				; XREF: Obj01_Death
00013E6A 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E6E 0640 0100                  		addi.w	#$100,d0
00013E72 B068 000C                  		cmp.w	$C(a0),d0
00013E76 6400 0000                  		bcc.w	locret_13900
00013E7A 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013E80 5428 0024                  		addq.b	#2,$24(a0)
00013E84 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013E88 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013E8C 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013E90 6600                       		bne.s	loc_138D4
00013E92 317C 0000 003A             		move.w	#0,$3A(a0)
00013E98 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013E9E 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013EA4 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013EAA 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013EAE                            
00013EAE                            loc_138C2:
00013EAE 303C 008F                  		move.w	#$8F,d0
00013EB2 4EB9 0000 15B6             		jsr	(PlaySound).l	; play game over music
00013EB8 7003                       		moveq	#3,d0
00013EBA 4EF9 0000 17A0             		jmp	(LoadPLC).l	; load game over patterns
00013EC0                            ; ===========================================================================
00013EC0                            
00013EC0                            loc_138D4:
00013EC0 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013EC6 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013ECA 6700                       		beq.s	locret_13900	; if not, branch
00013ECC 317C 0000 003A             		move.w	#0,$3A(a0)
00013ED2 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013ED8 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013EDE 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013EE4 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013EEA 60C2                       		bra.s	loc_138C2
00013EEC                            ; ===========================================================================
00013EEC                            
00013EEC                            locret_13900:
00013EEC 4E75                       		rts	
00013EEE                            ; End of function GameOver
00013EEE                            
00013EEE                            ; ===========================================================================
00013EEE                            ; ---------------------------------------------------------------------------
00013EEE                            ; Sonic	when the level is restarted
00013EEE                            ; ---------------------------------------------------------------------------
00013EEE                            
00013EEE                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013EEE 4A68 003A                  		tst.w	$3A(a0)
00013EF2 6700                       		beq.s	locret_13914
00013EF4 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013EF8 6600                       		bne.s	locret_13914
00013EFA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013F00                            
00013F00                            locret_13914:
00013F00 4E75                       		rts	
00013F02                            
00013F02                            ; ---------------------------------------------------------------------------
00013F02                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013F02                            ; ---------------------------------------------------------------------------
00013F02                            
00013F02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F02                            
00013F02                            
00013F02                            Sonic_Loops:				; XREF: Obj01_Control
00013F02 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013F08 6700                       		beq.s	loc_13926	; if yes, branch
00013F0A 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013F0E 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013F12                            
00013F12                            loc_13926:
00013F12 3028 000C                  		move.w	$C(a0),d0
00013F16 E248                       		lsr.w	#1,d0
00013F18 0240 0380                  		andi.w	#$380,d0
00013F1C 1228 0008                  		move.b	8(a0),d1
00013F20 0241 007F                  		andi.w	#$7F,d1
00013F24 D041                       		add.w	d1,d0
00013F26 43F8 A400                  		lea	($FFFFA400).w,a1
00013F2A 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013F2E B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013F32 6700 FA66                  		beq.w	Obj01_ChkRoll
00013F36 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013F3A 6700 FA5E                  		beq.w	Obj01_ChkRoll
00013F3E B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013F42 6700                       		beq.s	loc_13976
00013F44 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013F48 6700                       		beq.s	loc_13966
00013F4A 08A8 0006 0001             		bclr	#6,1(a0)
00013F50 4E75                       		rts	
00013F52                            ; ===========================================================================
00013F52                            
00013F52                            loc_13966:
00013F52 0828 0001 0022             		btst	#1,$22(a0)
00013F58 6700                       		beq.s	loc_13976
00013F5A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F60 4E75                       		rts	
00013F62                            ; ===========================================================================
00013F62                            
00013F62                            loc_13976:
00013F62 3428 0008                  		move.w	8(a0),d2
00013F66 0C02 002C                  		cmpi.b	#$2C,d2
00013F6A 6400                       		bcc.s	loc_13988
00013F6C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F72 4E75                       		rts	
00013F74                            ; ===========================================================================
00013F74                            
00013F74                            loc_13988:
00013F74 0C02 00E0                  		cmpi.b	#-$20,d2
00013F78 6500                       		bcs.s	loc_13996
00013F7A 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F80 4E75                       		rts	
00013F82                            ; ===========================================================================
00013F82                            
00013F82                            loc_13996:
00013F82 0828 0006 0001             		btst	#6,1(a0)
00013F88 6600                       		bne.s	loc_139B2
00013F8A 1228 0026                  		move.b	$26(a0),d1
00013F8E 6700                       		beq.s	locret_139C2
00013F90 0C01 0080                  		cmpi.b	#-$80,d1
00013F94 6200                       		bhi.s	locret_139C2
00013F96 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F9C 4E75                       		rts	
00013F9E                            ; ===========================================================================
00013F9E                            
00013F9E                            loc_139B2:
00013F9E 1228 0026                  		move.b	$26(a0),d1
00013FA2 0C01 0080                  		cmpi.b	#-$80,d1
00013FA6 6300                       		bls.s	locret_139C2
00013FA8 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013FAE                            
00013FAE                            locret_139C2:
00013FAE 4E75                       		rts	
00013FB0                            ; End of function Sonic_Loops
00013FB0                            
00013FB0                            ; ---------------------------------------------------------------------------
00013FB0                            ; Subroutine to	animate	Sonic's sprites
00013FB0                            ; ---------------------------------------------------------------------------
00013FB0                            
00013FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FB0                            
00013FB0                            
00013FB0                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013FB0 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013FB6 7000                       		moveq	#0,d0
00013FB8 1028 001C                  		move.b	$1C(a0),d0
00013FBC B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013FC0 6700                       		beq.s	SAnim_Do	; if not, branch
00013FC2 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013FC6 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013FCC 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013FD2                            
00013FD2                            SAnim_Do:
00013FD2 D040                       		add.w	d0,d0
00013FD4 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013FD8 1011                       		move.b	(a1),d0
00013FDA 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013FDC 1228 0022                  		move.b	$22(a0),d1
00013FE0 0201 0001                  		andi.b	#1,d1
00013FE4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013FEA 8328 0001                  		or.b	d1,1(a0)
00013FEE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013FF2 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013FF4 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013FF8                            
00013FF8                            SAnim_Do2:
00013FF8 7200                       		moveq	#0,d1
00013FFA 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013FFE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014002 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014004                            
00014004                            SAnim_Next:
00014004 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014008 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001400C                            
0001400C                            SAnim_Delay:
0001400C 4E75                       		rts	
0001400E                            ; ===========================================================================
0001400E                            
0001400E                            SAnim_End_FF:
0001400E 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014010 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014012 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014018 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001401C 60E6                       		bra.s	SAnim_Next
0001401E                            ; ===========================================================================
0001401E                            
0001401E                            SAnim_End_FE:
0001401E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014020 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014022 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014026 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001402A 9200                       		sub.b	d0,d1
0001402C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014030 60D2                       		bra.s	SAnim_Next
00014032                            ; ===========================================================================
00014032                            
00014032                            SAnim_End_FD:
00014032 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014034 6600                       		bne.s	SAnim_End	; if not, branch
00014036 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001403C                            
0001403C                            SAnim_End:
0001403C 4E75                       		rts	
0001403E                            ; ===========================================================================
0001403E                            
0001403E                            SAnim_WalkRun:				; XREF: SAnim_Do
0001403E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014042 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014044 5200                       		addq.b	#1,d0		; is animation walking/running?
00014046 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001404A 7200                       		moveq	#0,d1
0001404C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014050 1428 0022                  		move.b	$22(a0),d2
00014054 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014058 6600                       		bne.s	loc_13A70	; if yes, branch
0001405A 4600                       		not.b	d0		; reverse angle
0001405C                            
0001405C                            loc_13A70:
0001405C 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014060 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014062 7203                       		moveq	#3,d1
00014064                            
00014064                            loc_13A78:
00014064 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001406A B302                       		eor.b	d1,d2
0001406C 8528 0001                  		or.b	d2,1(a0)
00014070 0828 0005 0022             		btst	#5,$22(a0)
00014076 6600 0000                  		bne.w	SAnim_Push
0001407A E808                       		lsr.b	#4,d0		; divide angle by $10
0001407C 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014080 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014084 6A00                       		bpl.s	loc_13A9C
00014086 4442                       		neg.w	d2
00014088                            
00014088                            loc_13A9C:
00014088 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001408E 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014092 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014094 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
0001409A 1200                       		move.b	d0,d1
0001409C E209                       		lsr.b	#1,d1
0001409E D001                       		add.b	d1,d0
000140A0                            
000140A0                            loc_13AB4:
000140A0 D000                       		add.b	d0,d0
000140A2 1600                       		move.b	d0,d3
000140A4 4442                       		neg.w	d2
000140A6 0642 0800                  		addi.w	#$800,d2
000140AA 6A00                       		bpl.s	loc_13AC2
000140AC 7400                       		moveq	#0,d2
000140AE                            
000140AE                            loc_13AC2:
000140AE E04A                       		lsr.w	#8,d2
000140B0 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140B4 6100 FF42                  		bsr.w	SAnim_Do2
000140B8 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000140BC 4E75                       		rts	
000140BE                            ; ===========================================================================
000140BE                            
000140BE                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000140BE 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000140C0 6600                       		bne.s	SAnim_Push	; if not, branch
000140C2 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000140C6 6A00                       		bpl.s	loc_13ADE
000140C8 4442                       		neg.w	d2
000140CA                            
000140CA                            loc_13ADE:
000140CA 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000140D0 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000140D4 6400                       		bcc.s	loc_13AF0	; if yes, branch
000140D6 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000140DC                            
000140DC                            loc_13AF0:
000140DC 4442                       		neg.w	d2
000140DE 0642 0400                  		addi.w	#$400,d2
000140E2 6A00                       		bpl.s	loc_13AFA
000140E4 7400                       		moveq	#0,d2
000140E6                            
000140E6                            loc_13AFA:
000140E6 E04A                       		lsr.w	#8,d2
000140E8 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140EC 1228 0022                  		move.b	$22(a0),d1
000140F0 0201 0001                  		andi.b	#1,d1
000140F4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000140FA 8328 0001                  		or.b	d1,1(a0)
000140FE 6000 FEF8                  		bra.w	SAnim_Do2
00014102                            ; ===========================================================================
00014102                            
00014102                            SAnim_Push:				; XREF: SAnim_RollJump
00014102 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014106 6B00                       		bmi.s	loc_13B1E
00014108 4442                       		neg.w	d2
0001410A                            
0001410A                            loc_13B1E:
0001410A 0642 0800                  		addi.w	#$800,d2
0001410E 6A00                       		bpl.s	loc_13B26
00014110 7400                       		moveq	#0,d2
00014112                            
00014112                            loc_13B26:
00014112 EC4A                       		lsr.w	#6,d2
00014114 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014118 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001411E 1228 0022                  		move.b	$22(a0),d1
00014122 0201 0001                  		andi.b	#1,d1
00014126 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001412C 8328 0001                  		or.b	d1,1(a0)
00014130 6000 FEC6                  		bra.w	SAnim_Do2
00014134                            ; End of function Sonic_Animate
00014134                            
00014134                            ; ===========================================================================
00014134                            SonicAniData:
00014134                            	include "_anim\Sonic.asm"
00014134                            ; ---------------------------------------------------------------------------
00014134                            ; Animation script - Sonic
00014134                            ; ---------------------------------------------------------------------------
00014134 0000                       		dc.w SonAni_Walk-SonicAniData
00014136 0000                       		dc.w SonAni_Run-SonicAniData
00014138 0000                       		dc.w SonAni_Roll-SonicAniData
0001413A 0000                       		dc.w SonAni_Roll2-SonicAniData
0001413C 0000                       		dc.w SonAni_Push-SonicAniData
0001413E 0000                       		dc.w SonAni_Wait-SonicAniData
00014140 0000                       		dc.w SonAni_Balance-SonicAniData
00014142 0000                       		dc.w SonAni_LookUp-SonicAniData
00014144 0000                       		dc.w SonAni_Duck-SonicAniData
00014146 0000                       		dc.w SonAni_Warp1-SonicAniData
00014148 0000                       		dc.w SonAni_Warp2-SonicAniData
0001414A 0000                       		dc.w SonAni_Warp3-SonicAniData
0001414C 0000                       		dc.w SonAni_Warp4-SonicAniData
0001414E 0000                       		dc.w SonAni_Stop-SonicAniData
00014150 0000                       		dc.w SonAni_Float1-SonicAniData
00014152 0000                       		dc.w SonAni_Float2-SonicAniData
00014154 0000                       		dc.w SonAni_Spring-SonicAniData
00014156 0000                       		dc.w SonAni_LZHang-SonicAniData
00014158 0000                       		dc.w SonAni_Leap1-SonicAniData
0001415A 0000                       		dc.w SonAni_Leap2-SonicAniData
0001415C 0000                       		dc.w SonAni_Surf-SonicAniData
0001415E 0000                       		dc.w SonAni_Bubble-SonicAniData
00014160 0000                       		dc.w SonAni_Death1-SonicAniData
00014162 0000                       		dc.w SonAni_Drown-SonicAniData
00014164 0000                       		dc.w SonAni_Death2-SonicAniData
00014166 0000                       		dc.w SonAni_Shrink-SonicAniData
00014168 0000                       		dc.w SonAni_Hurt-SonicAniData
0001416A 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001416C 0000                       		dc.w SonAni_Blank-SonicAniData
0001416E 0000                       		dc.w SonAni_Float3-SonicAniData
00014170 0000                       		dc.w SonAni_Float4-SonicAniData
00014172 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
0001417C FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014184 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
0001418C FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014194 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
0001419C 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000141B2 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000141B6 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000141BA 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000141BE 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000141C2 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000141C6 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000141CA 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000141CE 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000141D2 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000141D6 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000141DE 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000141E2 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000141E6 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000141EC 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000141F2 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000141F6 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000141FE 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014202 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014206 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
0001420A 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014214 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00014218 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001421C 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014220 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014228 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001422C                            		even
0001422C                            		even
0001422C                            
0001422C                            ; ---------------------------------------------------------------------------
0001422C                            ; Sonic	pattern	loading	subroutine
0001422C                            ; ---------------------------------------------------------------------------
0001422C                            
0001422C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001422C                            
0001422C                            
0001422C                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001422C 7000                       		moveq	#0,d0
0001422E 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014232 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014236 6700                       		beq.s	locret_13C96
00014238 11C0 F766                  		move.b	d0,($FFFFF766).w
0001423C 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00014242 D040                       		add.w	d0,d0
00014244 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014248 7200                       		moveq	#0,d1
0001424A 121A                       		move.b	(a2)+,d1	; read "number of entries" value
0001424C 5301                       		subq.b	#1,d1
0001424E 6B00                       		bmi.s	locret_13C96
00014250 47F8 C800                  		lea	($FFFFC800).w,a3
00014254 11FC 0001 F767             		move.b	#1,($FFFFF767).w
0001425A                            
0001425A                            SPLC_ReadEntry:
0001425A 7400                       		moveq	#0,d2
0001425C 141A                       		move.b	(a2)+,d2
0001425E 3002                       		move.w	d2,d0
00014260 E808                       		lsr.b	#4,d0
00014262 E14A                       		lsl.w	#8,d2
00014264 141A                       		move.b	(a2)+,d2
00014266 EB4A                       		lsl.w	#5,d2
00014268 43F9 0000 0000             		lea	(Art_Sonic).l,a1
0001426E D3C2                       		adda.l	d2,a1
00014270                            
00014270                            SPLC_LoadTile:
00014270 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014274 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014278 47EB 0020                  		lea	$20(a3),a3	; next tile
0001427C 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014280                            
00014280 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014284                            
00014284                            locret_13C96:
00014284 4E75                       		rts	
00014286                            ; End of function LoadSonicDynPLC
00014286                            
00014286                            ; ===========================================================================
00014286                            ; ---------------------------------------------------------------------------
00014286                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014286                            ; ---------------------------------------------------------------------------
00014286                            
00014286                            Obj0A:					; XREF: Obj_Index
00014286 7000                       		moveq	#0,d0
00014288 1028 0024                  		move.b	$24(a0),d0
0001428C 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014290 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014294                            ; ===========================================================================
00014294 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014298 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001429C 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000142A0 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000142A4 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000142A6                            ; ===========================================================================
000142A6                            
000142A6                            Obj0A_Main:				; XREF: Obj0A_Index
000142A6 5428 0024                  		addq.b	#2,$24(a0)
000142AA 217C 0001 2F04 0004        		move.l	#Map_obj64,4(a0)
000142B2 317C 8348 0002             		move.w	#$8348,2(a0)
000142B8 117C 0084 0001             		move.b	#$84,1(a0)
000142BE 117C 0010 0019             		move.b	#$10,$19(a0)
000142C4 117C 0001 0018             		move.b	#1,$18(a0)
000142CA 1028 0028                  		move.b	$28(a0),d0
000142CE 6A00                       		bpl.s	loc_13D00
000142D0 5028 0024                  		addq.b	#8,$24(a0)
000142D4 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000142DC 317C 0440 0002             		move.w	#$440,2(a0)
000142E2 0240 007F                  		andi.w	#$7F,d0
000142E6 1140 0033                  		move.b	d0,$33(a0)
000142EA 6000 0000                  		bra.w	Obj0A_Countdown
000142EE                            ; ===========================================================================
000142EE                            
000142EE                            loc_13D00:
000142EE 1140 001C                  		move.b	d0,$1C(a0)
000142F2 3168 0008 0030             		move.w	8(a0),$30(a0)
000142F8 317C FF78 0012             		move.w	#-$88,$12(a0)
000142FE                            
000142FE                            Obj0A_Animate:				; XREF: Obj0A_Index
000142FE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014304 4EB9 0000 AC42             		jsr	AnimateSprite
0001430A                            
0001430A                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001430A 3038 F646                  		move.w	($FFFFF646).w,d0
0001430E B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014312 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014314 117C 0006 0024             		move.b	#6,$24(a0)
0001431A 5E28 001C                  		addq.b	#7,$1C(a0)
0001431E 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014324 6700                       		beq.s	Obj0A_Display
00014326 6000                       		bra.s	Obj0A_Display
00014328                            ; ===========================================================================
00014328                            
00014328                            Obj0A_Wobble:
00014328 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001432C 6700                       		beq.s	loc_13D44
0001432E 5868 0030                  		addq.w	#4,$30(a0)
00014332                            
00014332                            loc_13D44:
00014332 1028 0026                  		move.b	$26(a0),d0
00014336 5228 0026                  		addq.b	#1,$26(a0)
0001433A 0240 007F                  		andi.w	#$7F,d0
0001433E 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014344 1031 0000                  		move.b	(a1,d0.w),d0
00014348 4880                       		ext.w	d0
0001434A D068 0030                  		add.w	$30(a0),d0
0001434E 3140 0008                  		move.w	d0,8(a0)
00014352 6100                       		bsr.s	Obj0A_ShowNumber
00014354 4EBA 97F6                  		jsr	SpeedToPos
00014358 4A28 0001                  		tst.b	1(a0)
0001435C 6A00                       		bpl.s	Obj0A_Delete
0001435E 4EFA 9812                  		jmp	DisplaySprite
00014362                            ; ===========================================================================
00014362                            
00014362                            Obj0A_Delete:
00014362 4EFA 984A                  		jmp	DeleteObject
00014366                            ; ===========================================================================
00014366                            
00014366                            Obj0A_Display:				; XREF: Obj0A_Index
00014366 6100                       		bsr.s	Obj0A_ShowNumber
00014368 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001436E 4EB9 0000 AC42             		jsr	AnimateSprite
00014374 4EFA 97FC                  		jmp	DisplaySprite
00014378                            ; ===========================================================================
00014378                            
00014378                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014378 4EFA 9834                  		jmp	DeleteObject
0001437C                            ; ===========================================================================
0001437C                            
0001437C                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001437C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014382 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014384 5368 0038                  		subq.w	#1,$38(a0)
00014388 6600                       		bne.s	Obj0A_Display2
0001438A 117C 000E 0024             		move.b	#$E,$24(a0)
00014390 5E28 001C                  		addq.b	#7,$1C(a0)
00014394 60D0                       		bra.s	Obj0A_Display
00014396                            ; ===========================================================================
00014396                            
00014396                            Obj0A_Display2:
00014396 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001439C 4EB9 0000 AC42             		jsr	AnimateSprite
000143A2 4A28 0001                  		tst.b	1(a0)
000143A6 6A00                       		bpl.s	Obj0A_Delete3
000143A8 4EFA 97C8                  		jmp	DisplaySprite
000143AC                            ; ===========================================================================
000143AC                            
000143AC                            Obj0A_Delete3:
000143AC 4EFA 9800                  		jmp	DeleteObject
000143B0                            ; ===========================================================================
000143B0                            
000143B0                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000143B0 4A68 0038                  		tst.w	$38(a0)
000143B4 6700                       		beq.s	locret_13E1A
000143B6 5368 0038                  		subq.w	#1,$38(a0)
000143BA 6600                       		bne.s	locret_13E1A
000143BC 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000143C2 6400                       		bcc.s	locret_13E1A
000143C4 317C 000F 0038             		move.w	#$F,$38(a0)
000143CA 4268 0012                  		clr.w	$12(a0)
000143CE 117C 0080 0001             		move.b	#$80,1(a0)
000143D4 3028 0008                  		move.w	8(a0),d0
000143D8 9078 F700                  		sub.w	($FFFFF700).w,d0
000143DC 0640 0080                  		addi.w	#$80,d0
000143E0 3140 0008                  		move.w	d0,8(a0)
000143E4 3028 000C                  		move.w	$C(a0),d0
000143E8 9078 F704                  		sub.w	($FFFFF704).w,d0
000143EC 0640 0080                  		addi.w	#$80,d0
000143F0 3140 000A                  		move.w	d0,$A(a0)
000143F4 117C 000C 0024             		move.b	#$C,$24(a0)
000143FA                            
000143FA                            locret_13E1A:
000143FA 4E75                       		rts	
000143FC                            ; ===========================================================================
000143FC                            Obj0A_WobbleData:
000143FC 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001440D 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001441E 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001442F 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001443F FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001444C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014459 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014466 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014473 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001447C                            ; ===========================================================================
0001447C                            
0001447C                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001447C 4A68 002C                  		tst.w	$2C(a0)
00014480 6600 0000                  		bne.w	loc_13F86
00014484 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001448A 6400 0000                  		bcc.w	locret_1408C
0001448E 0838 0006 D022             		btst	#6,($FFFFD022).w
00014494 6700 0000                  		beq.w	locret_1408C
00014498 5368 0038                  		subq.w	#1,$38(a0)
0001449C 6A00 0000                  		bpl.w	loc_13FAC
000144A0 317C 003B 0038             		move.w	#59,$38(a0)
000144A6 317C 0001 0036             		move.w	#1,$36(a0)
000144AC 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000144B2 0240 0001                  		andi.w	#1,d0
000144B6 1140 0034                  		move.b	d0,$34(a0)
000144BA 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000144BE 0C40 0019                  		cmpi.w	#$19,d0
000144C2 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000144C4 0C40 0014                  		cmpi.w	#$14,d0
000144C8 6700                       		beq.s	Obj0A_WarnSound
000144CA 0C40 000F                  		cmpi.w	#$F,d0
000144CE 6700                       		beq.s	Obj0A_WarnSound
000144D0 0C40 000C                  		cmpi.w	#$C,d0
000144D4 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000144D6 6600                       		bne.s	loc_13F02
000144D8 303C 0092                  		move.w	#$92,d0
000144DC 4EB9 0000 15B6             		jsr	(PlaySound).l	; play countdown music
000144E2                            
000144E2                            loc_13F02:
000144E2 5328 0032                  		subq.b	#1,$32(a0)
000144E6 6A00                       		bpl.s	Obj0A_ReduceAir
000144E8 1168 0033 0032             		move.b	$33(a0),$32(a0)
000144EE 08E8 0007 0036             		bset	#7,$36(a0)
000144F4 6000                       		bra.s	Obj0A_ReduceAir
000144F6                            ; ===========================================================================
000144F6                            
000144F6                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000144F6 303C 00C2                  		move.w	#$C2,d0
000144FA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014500                            
00014500                            Obj0A_ReduceAir:
00014500 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014504 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014508 6100 0000                  		bsr.w	ResumeMusic
0001450C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014512 303C 00B2                  		move.w	#$B2,d0
00014516 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play drowning sound
0001451C 117C 000A 0034             		move.b	#$A,$34(a0)
00014522 317C 0001 0036             		move.w	#1,$36(a0)
00014528 317C 0078 002C             		move.w	#$78,$2C(a0)
0001452E 2F08                       		move.l	a0,-(sp)
00014530 41F8 D000                  		lea	($FFFFD000).w,a0
00014534 6100 F85E                  		bsr.w	Sonic_ResetOnFloor
00014538 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
0001453E 08E8 0001 0022             		bset	#1,$22(a0)
00014544 08E8 0007 0002             		bset	#7,2(a0)
0001454A 317C 0000 0012             		move.w	#0,$12(a0)
00014550 317C 0000 0010             		move.w	#0,$10(a0)
00014556 317C 0000 0014             		move.w	#0,$14(a0)
0001455C 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014562 205F                       		movea.l	(sp)+,a0
00014564 4E75                       		rts	
00014566                            ; ===========================================================================
00014566                            
00014566                            loc_13F86:
00014566 5368 002C                  		subq.w	#1,$2C(a0)
0001456A 6600                       		bne.s	loc_13F94
0001456C 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014572 4E75                       		rts	
00014574                            ; ===========================================================================
00014574                            
00014574                            loc_13F94:
00014574 2F08                       		move.l	a0,-(sp)
00014576 41F8 D000                  		lea	($FFFFD000).w,a0
0001457A 4EBA 95D0                  		jsr	SpeedToPos
0001457E 0668 0010 0012             		addi.w	#$10,$12(a0)
00014584 205F                       		movea.l	(sp)+,a0
00014586 6000                       		bra.s	loc_13FAC
00014588                            ; ===========================================================================
00014588                            
00014588                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014588 6000                       		bra.s	Obj0A_MakeItem
0001458A                            ; ===========================================================================
0001458A                            
0001458A                            loc_13FAC:
0001458A 4A68 0036                  		tst.w	$36(a0)
0001458E 6700 0000                  		beq.w	locret_1408C
00014592 5368 003A                  		subq.w	#1,$3A(a0)
00014596 6A00 0000                  		bpl.w	locret_1408C
0001459A                            
0001459A                            Obj0A_MakeItem:
0001459A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000145A0 0240 000F                  		andi.w	#$F,d0
000145A4 3140 003A                  		move.w	d0,$3A(a0)
000145A8 4EBA 9A4E                  		jsr	SingleObjLoad
000145AC 6600 0000                  		bne.w	locret_1408C
000145B0 12BC 000A                  		move.b	#$A,0(a1)	; load object
000145B4 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
000145BA 7006                       		moveq	#6,d0
000145BC 0838 0000 D022             		btst	#0,($FFFFD022).w
000145C2 6700                       		beq.s	loc_13FF2
000145C4 4440                       		neg.w	d0
000145C6 137C 0040 0026             		move.b	#$40,$26(a1)
000145CC                            
000145CC                            loc_13FF2:
000145CC D169 0008                  		add.w	d0,8(a1)
000145D0 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000145D6 137C 0006 0028             		move.b	#6,$28(a1)
000145DC 4A68 002C                  		tst.w	$2C(a0)
000145E0 6700 0000                  		beq.w	loc_1403E
000145E4 0268 0007 003A             		andi.w	#7,$3A(a0)
000145EA 0668 0000 003A             		addi.w	#0,$3A(a0)
000145F0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000145F4 0440 000C                  		subi.w	#$C,d0
000145F8 3340 000C                  		move.w	d0,$C(a1)
000145FC 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00014602 1340 0026                  		move.b	d0,$26(a1)
00014606 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001460A 0200 0003                  		andi.b	#3,d0
0001460E 6600                       		bne.s	loc_14082
00014610 137C 000E 0028             		move.b	#$E,$28(a1)
00014616 6000                       		bra.s	loc_14082
00014618                            ; ===========================================================================
00014618                            
00014618                            loc_1403E:
00014618 0828 0007 0036             		btst	#7,$36(a0)
0001461E 6700                       		beq.s	loc_14082
00014620 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014624 E24A                       		lsr.w	#1,d2
00014626 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001462C 0240 0003                  		andi.w	#3,d0
00014630 6600                       		bne.s	loc_1406A
00014632 08E8 0006 0036             		bset	#6,$36(a0)
00014638 6600                       		bne.s	loc_14082
0001463A 1342 0028                  		move.b	d2,$28(a1)
0001463E 337C 001C 0038             		move.w	#$1C,$38(a1)
00014644                            
00014644                            loc_1406A:
00014644 4A28 0034                  		tst.b	$34(a0)
00014648 6600                       		bne.s	loc_14082
0001464A 08E8 0006 0036             		bset	#6,$36(a0)
00014650 6600                       		bne.s	loc_14082
00014652 1342 0028                  		move.b	d2,$28(a1)
00014656 337C 001C 0038             		move.w	#$1C,$38(a1)
0001465C                            
0001465C                            loc_14082:
0001465C 5328 0034                  		subq.b	#1,$34(a0)
00014660 6A00                       		bpl.s	locret_1408C
00014662 4268 0036                  		clr.w	$36(a0)
00014666                            
00014666                            locret_1408C:
00014666 4E75                       		rts	
00014668                            
00014668                            ; ---------------------------------------------------------------------------
00014668                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014668                            ; ---------------------------------------------------------------------------
00014668                            
00014668                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014668                            
00014668                            
00014668                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014668 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001466E                             
0001466E                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001466E                             
0001466E 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014672                             
00014672 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014678 6600                       		bne.s	Air_GetBgm2	; if not, branch
0001467A 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014680 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014682                             
00014682                            Air_GetBgm2:
00014682 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014688 6600                       		bne.s	Air_GetBgm3	; if not, branch
0001468A 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014690 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014692                             
00014692                            Air_GetBgm3:
00014692 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014698 6600                       		bne.s	Air_GetBgm4	; if not, branch
0001469A 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
000146A0 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000146A2                             
000146A2                            Air_GetBgm4:
000146A2 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000146A8 6600                       		bne.s	Air_PlayMusic	; if not, branch
000146AA 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000146B0                             
000146B0                            Air_PlayMusic:
000146B0 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
000146B4                             
000146B4                            loc_140A6:
000146B4 4EB9 0000 15B6             		jsr	(PlaySound).l
000146BA                             
000146BA                            ; NineKode ends here
000146BA                            
000146BA                            loc_140AC:
000146BA 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000146C0 4238 D372                  		clr.b	($FFFFD372).w
000146C4 4E75                       		rts	
000146C6                            ; End of function ResumeMusic
000146C6                            
000146C6                            ; ===========================================================================
000146C6                            Ani_obj0A:
000146C6                            	include "_anim\obj0A.asm"
000146C6                            ; ---------------------------------------------------------------------------
000146C6                            ; Animation script - countdown numbers and bubbles (LZ)
000146C6                            ; ---------------------------------------------------------------------------
000146C6 0000                       		dc.w byte_140D6-Ani_obj0A
000146C8 0000                       		dc.w byte_140E0-Ani_obj0A
000146CA 0000                       		dc.w byte_140EA-Ani_obj0A
000146CC 0000                       		dc.w byte_140F4-Ani_obj0A
000146CE 0000                       		dc.w byte_140FE-Ani_obj0A
000146D0 0000                       		dc.w byte_14108-Ani_obj0A
000146D2 0000                       		dc.w byte_14112-Ani_obj0A
000146D4 0000                       		dc.w byte_14118-Ani_obj0A
000146D6 0000                       		dc.w byte_14120-Ani_obj0A
000146D8 0000                       		dc.w byte_14128-Ani_obj0A
000146DA 0000                       		dc.w byte_14130-Ani_obj0A
000146DC 0000                       		dc.w byte_14138-Ani_obj0A
000146DE 0000                       		dc.w byte_14140-Ani_obj0A
000146E0 0000                       		dc.w byte_14148-Ani_obj0A
000146E2 0000                       		dc.w byte_1414A-Ani_obj0A
000146E4 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000146EE 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000146F8 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014702 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001470C 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014716 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014720 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014726 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
0001472E 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014736 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001473E 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014746 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001474E 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014756 0EFC                       byte_14148:	dc.b $E, $FC
00014758 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001475E                            		even
0001475E                            		even
0001475E                            
0001475E                            ; ---------------------------------------------------------------------------
0001475E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001475E                            ; ---------------------------------------------------------------------------
0001475E                            Map_obj0A:
0001475E                            	include "_maps\obj0A.asm"
0001475E                            ; ---------------------------------------------------------------------------
0001475E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001475E                            ; ---------------------------------------------------------------------------
0001475E 0000                       		dc.w byte_14152-Map_obj0A
00014760 01                         byte_14152:	dc.b 1
00014761 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014766                            		even
00014766                            		even
00014766                            
00014766                            ; ===========================================================================
00014766                            ; ---------------------------------------------------------------------------
00014766                            ; Object 38 - shield and invincibility stars
00014766                            ; ---------------------------------------------------------------------------
00014766                            
00014766                            Obj38:					; XREF: Obj_Index
00014766 7000                       		moveq	#0,d0
00014768 1028 0024                  		move.b	$24(a0),d0
0001476C 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014770 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014774                            ; ===========================================================================
00014774 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014776 0000                       		dc.w Obj38_Shield-Obj38_Index
00014778 0000                       		dc.w Obj38_Stars-Obj38_Index
0001477A                            ; ===========================================================================
0001477A                            
0001477A                            Obj38_Main:				; XREF: Obj38_Index
0001477A 5428 0024                  		addq.b	#2,$24(a0)
0001477E 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014786 117C 0004 0001             		move.b	#4,1(a0)
0001478C 117C 0001 0018             		move.b	#1,$18(a0)
00014792 117C 0010 0019             		move.b	#$10,$19(a0)
00014798 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001479C 6600                       		bne.s	Obj38_DoStars	; if not, branch
0001479E 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
000147A4 4E75                       		rts	
000147A6                            ; ===========================================================================
000147A6                            
000147A6                            Obj38_DoStars:
000147A6 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
000147AA 317C 055C 0002             		move.w	#$55C,2(a0)
000147B0 4E75                       		rts	
000147B2                            ; ===========================================================================
000147B2                            
000147B2                            Obj38_Shield:				; XREF: Obj38_Index
000147B2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000147B6 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
000147B8 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
000147BC 6700                       		beq.s	Obj38_Delete	; if not, branch
000147BE 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000147C4 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000147CA 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000147D0 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000147D6 4EB9 0000 AC42             		jsr	AnimateSprite
000147DC 4EFA 9394                  		jmp	DisplaySprite
000147E0                            ; ===========================================================================
000147E0                            
000147E0                            Obj38_RmvShield:
000147E0 4E75                       		rts	
000147E2                            ; ===========================================================================
000147E2                            
000147E2                            Obj38_Delete:
000147E2 4EFA 93CA                  		jmp	DeleteObject
000147E6                            ; ===========================================================================
000147E6                            
000147E6                            Obj38_Stars:				; XREF: Obj38_Index
000147E6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000147EA 6700                       		beq.s	Obj38_Delete2	; if not, branch
000147EC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000147F0 1228 001C                  		move.b	$1C(a0),d1
000147F4 5301                       		subq.b	#1,d1
000147F6 6000                       		bra.s	Obj38_StarTrail
000147F8                            ; ===========================================================================
000147F8 E909                       		lsl.b	#4,d1
000147FA 5801                       		addq.b	#4,d1
000147FC 9001                       		sub.b	d1,d0
000147FE 1228 0030                  		move.b	$30(a0),d1
00014802 9001                       		sub.b	d1,d0
00014804 5801                       		addq.b	#4,d1
00014806 0201 000F                  		andi.b	#$F,d1
0001480A 1141 0030                  		move.b	d1,$30(a0)
0001480E 6000                       		bra.s	Obj38_StarTrail2a
00014810                            ; ===========================================================================
00014810                            
00014810                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014810 E709                       		lsl.b	#3,d1
00014812 1401                       		move.b	d1,d2
00014814 D201                       		add.b	d1,d1
00014816 D202                       		add.b	d2,d1
00014818 5801                       		addq.b	#4,d1
0001481A 9001                       		sub.b	d1,d0
0001481C 1228 0030                  		move.b	$30(a0),d1
00014820 9001                       		sub.b	d1,d0
00014822 5801                       		addq.b	#4,d1
00014824 0C01 0018                  		cmpi.b	#$18,d1
00014828 6500                       		bcs.s	Obj38_StarTrail2
0001482A 7200                       		moveq	#0,d1
0001482C                            
0001482C                            Obj38_StarTrail2:
0001482C 1141 0030                  		move.b	d1,$30(a0)
00014830                            
00014830                            Obj38_StarTrail2a:
00014830 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014834 43F1 0000                  		lea	(a1,d0.w),a1
00014838 3159 0008                  		move.w	(a1)+,8(a0)
0001483C 3159 000C                  		move.w	(a1)+,$C(a0)
00014840 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014846 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001484C 4EB9 0000 AC42             		jsr	AnimateSprite
00014852 4EFA 931E                  		jmp	DisplaySprite
00014856                            ; ===========================================================================
00014856                            
00014856                            Obj38_Delete2:				; XREF: Obj38_Stars
00014856 4EFA 9356                  		jmp	DeleteObject
0001485A                            ; ===========================================================================
0001485A                            ; ---------------------------------------------------------------------------
0001485A                            ; Object 4A - special stage entry from beta
0001485A                            ; ---------------------------------------------------------------------------
0001485A                            
0001485A                            Obj4A:					; XREF: Obj_Index
0001485A 7000                       		moveq	#0,d0
0001485C 1028 0024                  		move.b	$24(a0),d0
00014860 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014864 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014868                            ; ===========================================================================
00014868 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001486A 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001486C 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001486E                            ; ===========================================================================
0001486E                            
0001486E                            Obj4A_Main:				; XREF: Obj4A_Index
0001486E 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014872 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014874 4E75                       		rts	
00014876                            ; ===========================================================================
00014876                            
00014876                            Obj4A_Main2:
00014876 5428 0024                  		addq.b	#2,$24(a0)
0001487A 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014882 117C 0004 0001             		move.b	#4,1(a0)
00014888 117C 0001 0018             		move.b	#1,$18(a0)
0001488E 117C 0038 0019             		move.b	#$38,$19(a0)
00014894 317C 0541 0002             		move.w	#$541,2(a0)
0001489A 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
000148A0                            
000148A0                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
000148A0 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000148A6 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000148AC 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000148B2 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
000148B8 4EB9 0000 AC42             		jsr	AnimateSprite
000148BE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000148C4 6600                       		bne.s	Obj4A_Display
000148C6 4A38 D000                  		tst.b	($FFFFD000).w
000148CA 6700                       		beq.s	Obj4A_Display
000148CC 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000148D2 303C 00A8                  		move.w	#$A8,d0
000148D6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000148DC                            
000148DC                            Obj4A_Display:
000148DC 4EFA 9294                  		jmp	DisplaySprite
000148E0                            ; ===========================================================================
000148E0                            
000148E0                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000148E0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000148E4 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000148E6 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000148EC 4EFA 92C0                  		jmp	DeleteObject
000148F0                            ; ===========================================================================
000148F0                            
000148F0                            Obj4A_Wait:
000148F0 4E75                       		rts	
000148F2                            ; ===========================================================================
000148F2                            ; ---------------------------------------------------------------------------
000148F2                            ; Object 08 - water splash (LZ)
000148F2                            ; ---------------------------------------------------------------------------
000148F2                            
000148F2                            Obj08:					; XREF: Obj_Index
000148F2 7000                       		moveq	#0,d0
000148F4 1028 0024                  		move.b	$24(a0),d0
000148F8 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000148FC 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014900                            ; ===========================================================================
00014900 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014902 0000                       		dc.w Obj08_Display-Obj08_Index
00014904 0000                       		dc.w Obj08_Delete-Obj08_Index
00014906                            ; ===========================================================================
00014906                            
00014906                            Obj08_Main:				; XREF: Obj08_Index
00014906 5428 0024                  		addq.b	#2,$24(a0)
0001490A 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014912 0028 0004 0001             		ori.b	#4,1(a0)
00014918 117C 0001 0018             		move.b	#1,$18(a0)
0001491E 117C 0010 0019             		move.b	#$10,$19(a0)
00014924 317C 4259 0002             		move.w	#$4259,2(a0)
0001492A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014930                            
00014930                            Obj08_Display:				; XREF: Obj08_Index
00014930 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014936 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001493C 4EB9 0000 AC42             		jsr	AnimateSprite
00014942 4EFA 922E                  		jmp	DisplaySprite
00014946                            ; ===========================================================================
00014946                            
00014946                            Obj08_Delete:				; XREF: Obj08_Index
00014946 4EFA 9266                  		jmp	DeleteObject	; delete when animation	is complete
0001494A                            ; ===========================================================================
0001494A                            Ani_obj38:
0001494A                            	include "_anim\obj38.asm"
0001494A                            ; ---------------------------------------------------------------------------
0001494A                            ; Animation script - shield and invincibility stars
0001494A                            ; ---------------------------------------------------------------------------
0001494A 0000                       		dc.w byte_14356-Ani_obj38
0001494C 0000                       		dc.w byte_1435E-Ani_obj38
0001494E 0000                       		dc.w byte_14364-Ani_obj38
00014950 0000                       		dc.w byte_1437E-Ani_obj38
00014952 0000                       		dc.w byte_14398-Ani_obj38
00014954 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001495C 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014962 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014973 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001497C 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001498D 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014996 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000149A7 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000149B0                            		even
000149B0                            		even
000149B0                            
000149B0                            ; ---------------------------------------------------------------------------
000149B0                            ; Sprite mappings - shield and invincibility stars
000149B0                            ; ---------------------------------------------------------------------------
000149B0                            Map_obj38:
000149B0                            	include "_maps\obj38.asm"
000149B0                            ; ---------------------------------------------------------------------------
000149B0                            ; Sprite mappings - shield and invincibility stars
000149B0                            ; ---------------------------------------------------------------------------
000149B0 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000149B4 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000149B8 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000149BC 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000149C0 04                         byte_143C2:	dc.b 4
000149C1 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000149C6 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000149CB 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
000149D0 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000149D5 04                         byte_143D7:	dc.b 4
000149D6 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000149DB E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000149E0 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000149E5 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000149EA 04                         byte_143EC:	dc.b 4
000149EB E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000149F0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000149F5 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000149FA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000149FF 04                         byte_14401:	dc.b 4
00014A00 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014A05 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014A0A 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014A0F 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014A14 04                         byte_14416:	dc.b 4
00014A15 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014A1A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014A1F 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014A24 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014A29 04                         byte_1442B:	dc.b 4
00014A2A E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014A2F E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014A34 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014A39 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014A3E 04                         byte_14440:	dc.b 4
00014A3F E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014A44 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014A49 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014A4E 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014A54 00                         		even
00014A54 00                         		even
00014A54                            
00014A54                            Ani_obj4A:
00014A54                            	include "_anim\obj4A.asm"
00014A54                            ; ---------------------------------------------------------------------------
00014A54                            ; Animation script - special stage entry effect from beta
00014A54                            ; ---------------------------------------------------------------------------
00014A54 0000                       		dc.w byte_14458-Ani_obj4A
00014A56 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014A6A                            		even
00014A6A                            		even
00014A6A                            
00014A6A                            ; ---------------------------------------------------------------------------
00014A6A                            ; Sprite mappings - special stage entry	from beta
00014A6A                            ; ---------------------------------------------------------------------------
00014A6A                            Map_obj4A:
00014A6A                            	include "_maps\obj4A.asm"
00014A6A                            ; ---------------------------------------------------------------------------
00014A6A                            ; Sprite mappings - special stage entry	from beta
00014A6A                            ; ---------------------------------------------------------------------------
00014A6A 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014A6E 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014A72 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014A76 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014A7A 03                         byte_1447C:	dc.b 3
00014A7B F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014A80 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014A85 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014A8A 03                         byte_1448C:	dc.b 3
00014A8B F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014A90 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014A95 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014A9A 05                         byte_1449C:	dc.b 5
00014A9B E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014AA0 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014AA5 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014AAA 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014AAF 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014AB4 09                         byte_144B6:	dc.b 9
00014AB5 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014ABA F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014ABF 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014AC4 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014AC9 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014ACE F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014AD3 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014AD8 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014ADD F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014AE2 12                         byte_144E4:	dc.b $12
00014AE3 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014AE8 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014AED F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014AF2 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014AF7 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014AFC 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014B01 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014B06 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014B0B 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014B10 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014B15 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014B1A 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014B1F F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014B24 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014B29 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014B2E F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014B33 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014B38 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014B3D 11                         byte_1453F:	dc.b $11
00014B3E F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014B43 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014B48 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014B4D 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014B52 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014B57 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014B5C 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014B61 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014B66 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014B6B 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014B70 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014B75 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014B7A F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014B7F 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014B84 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014B89 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014B8E 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014B93 09                         byte_14595:	dc.b 9
00014B94 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014B99 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014B9E 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014BA3 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014BA8 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014BAD FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014BB2 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014BB7 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014BBC 04                         		dc.b 4
00014BBD 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014BC2                            		even
00014BC2                            		even
00014BC2                            
00014BC2                            Ani_obj08:
00014BC2                            	include "_anim\obj08.asm"
00014BC2                            ; ---------------------------------------------------------------------------
00014BC2                            ; Animation script - water splash (LZ)
00014BC2                            ; ---------------------------------------------------------------------------
00014BC2 0000                       		dc.w byte_145C6-Ani_obj08
00014BC4 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014BCA                            		even
00014BCA                            		even
00014BCA                            
00014BCA                            ; ---------------------------------------------------------------------------
00014BCA                            ; Sprite mappings - water splash (LZ)
00014BCA                            ; ---------------------------------------------------------------------------
00014BCA                            Map_obj08:
00014BCA                            	include "_maps\obj08.asm"
00014BCA                            ; ---------------------------------------------------------------------------
00014BCA                            ; Sprite mappings - water splash (LZ)
00014BCA                            ; ---------------------------------------------------------------------------
00014BCA 0000                       		dc.w byte_145D2-Map_obj08
00014BCC 0000                       		dc.w byte_145DD-Map_obj08
00014BCE 0000                       		dc.w byte_145E8-Map_obj08
00014BD0 02                         byte_145D2:	dc.b 2
00014BD1 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014BD6 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014BDB 02                         byte_145DD:	dc.b 2
00014BDC E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014BE1 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014BE6 01                         byte_145E8:	dc.b 1
00014BE7 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014BEC                            		even
00014BEC                            		even
00014BEC                            
00014BEC                            ; ---------------------------------------------------------------------------
00014BEC                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014BEC                            ; ---------------------------------------------------------------------------
00014BEC                            
00014BEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BEC                            
00014BEC                            
00014BEC                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014BEC 0828 0003 0022             		btst	#3,$22(a0)
00014BF2 6700                       		beq.s	loc_14602
00014BF4 7000                       		moveq	#0,d0
00014BF6 11C0 F768                  		move.b	d0,($FFFFF768).w
00014BFA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014BFE 4E75                       		rts	
00014C00                            ; ===========================================================================
00014C00                            
00014C00                            loc_14602:
00014C00 7003                       		moveq	#3,d0
00014C02 11C0 F768                  		move.b	d0,($FFFFF768).w
00014C06 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014C0A 1028 0026                  		move.b	$26(a0),d0
00014C0E 0600 0020                  		addi.b	#$20,d0
00014C12 6A00                       		bpl.s	loc_14624
00014C14 1028 0026                  		move.b	$26(a0),d0
00014C18 6A00                       		bpl.s	loc_1461E
00014C1A 5300                       		subq.b	#1,d0
00014C1C                            
00014C1C                            loc_1461E:
00014C1C 0600 0020                  		addi.b	#$20,d0
00014C20 6000                       		bra.s	loc_14630
00014C22                            ; ===========================================================================
00014C22                            
00014C22                            loc_14624:
00014C22 1028 0026                  		move.b	$26(a0),d0
00014C26 6A00                       		bpl.s	loc_1462C
00014C28 5200                       		addq.b	#1,d0
00014C2A                            
00014C2A                            loc_1462C:
00014C2A 0600 001F                  		addi.b	#$1F,d0
00014C2E                            
00014C2E                            loc_14630:
00014C2E 0200 00C0                  		andi.b	#$C0,d0
00014C32 0C00 0040                  		cmpi.b	#$40,d0
00014C36 6700 0000                  		beq.w	Sonic_WalkVertL
00014C3A 0C00 0080                  		cmpi.b	#$80,d0
00014C3E 6700 0000                  		beq.w	Sonic_WalkCeiling
00014C42 0C00 00C0                  		cmpi.b	#$C0,d0
00014C46 6700 0000                  		beq.w	Sonic_WalkVertR
00014C4A 3428 000C                  		move.w	$C(a0),d2
00014C4E 3628 0008                  		move.w	8(a0),d3
00014C52 7000                       		moveq	#0,d0
00014C54 1028 0016                  		move.b	$16(a0),d0
00014C58 4880                       		ext.w	d0
00014C5A D440                       		add.w	d0,d2
00014C5C 1028 0017                  		move.b	$17(a0),d0
00014C60 4880                       		ext.w	d0
00014C62 D640                       		add.w	d0,d3
00014C64 49F8 F768                  		lea	($FFFFF768).w,a4
00014C68 367C 0010                  		movea.w	#$10,a3
00014C6C 3C3C 0000                  		move.w	#0,d6
00014C70 7A0D                       		moveq	#$D,d5
00014C72 6100 0000                  		bsr.w	FindFloor
00014C76 3F01                       		move.w	d1,-(sp)
00014C78 3428 000C                  		move.w	$C(a0),d2
00014C7C 3628 0008                  		move.w	8(a0),d3
00014C80 7000                       		moveq	#0,d0
00014C82 1028 0016                  		move.b	$16(a0),d0
00014C86 4880                       		ext.w	d0
00014C88 D440                       		add.w	d0,d2
00014C8A 1028 0017                  		move.b	$17(a0),d0
00014C8E 4880                       		ext.w	d0
00014C90 4440                       		neg.w	d0
00014C92 D640                       		add.w	d0,d3
00014C94 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014C98 367C 0010                  		movea.w	#$10,a3
00014C9C 3C3C 0000                  		move.w	#0,d6
00014CA0 7A0D                       		moveq	#$D,d5
00014CA2 6100 0000                  		bsr.w	FindFloor
00014CA6 301F                       		move.w	(sp)+,d0
00014CA8 6100 0000                  		bsr.w	Sonic_Angle
00014CAC 4A41                       		tst.w	d1
00014CAE 6700                       		beq.s	locret_146BE
00014CB0 6A00                       		bpl.s	loc_146C0
00014CB2 0C41 FFF2                  		cmpi.w	#-$E,d1
00014CB6 6D00                       		blt.s	locret_146E6
00014CB8 D368 000C                  		add.w	d1,$C(a0)
00014CBC                            
00014CBC                            locret_146BE:
00014CBC 4E75                       		rts	
00014CBE                            ; ===========================================================================
00014CBE                            
00014CBE                            loc_146C0:
00014CBE 0C41 000E                  		cmpi.w	#$E,d1
00014CC2 6E00                       		bgt.s	loc_146CC
00014CC4                            
00014CC4                            loc_146C6:
00014CC4 D368 000C                  		add.w	d1,$C(a0)
00014CC8 4E75                       		rts	
00014CCA                            ; ===========================================================================
00014CCA                            
00014CCA                            loc_146CC:
00014CCA 4A28 0038                  		tst.b	$38(a0)
00014CCE 66F4                       		bne.s	loc_146C6
00014CD0 08E8 0001 0022             		bset	#1,$22(a0)
00014CD6 08A8 0005 0022             		bclr	#5,$22(a0)
00014CDC 117C 0001 001D             		move.b	#1,$1D(a0)
00014CE2 4E75                       		rts	
00014CE4                            ; ===========================================================================
00014CE4                            
00014CE4                            locret_146E6:
00014CE4 4E75                       		rts	
00014CE6                            ; End of function Sonic_AnglePos
00014CE6                            
00014CE6                            ; ===========================================================================
00014CE6 2428 0008                  		move.l	8(a0),d2
00014CEA 3028 0010                  		move.w	$10(a0),d0
00014CEE 48C0                       		ext.l	d0
00014CF0 E180                       		asl.l	#8,d0
00014CF2 9480                       		sub.l	d0,d2
00014CF4 2142 0008                  		move.l	d2,8(a0)
00014CF8 303C 0038                  		move.w	#$38,d0
00014CFC 48C0                       		ext.l	d0
00014CFE E180                       		asl.l	#8,d0
00014D00 9680                       		sub.l	d0,d3
00014D02 2143 000C                  		move.l	d3,$C(a0)
00014D06 4E75                       		rts	
00014D08                            ; ===========================================================================
00014D08                            
00014D08                            locret_1470A:
00014D08 4E75                       		rts	
00014D0A                            ; ===========================================================================
00014D0A 2628 000C                  		move.l	$C(a0),d3
00014D0E 3028 0012                  		move.w	$12(a0),d0
00014D12 0440 0038                  		subi.w	#$38,d0
00014D16 3140 0012                  		move.w	d0,$12(a0)
00014D1A 48C0                       		ext.l	d0
00014D1C E180                       		asl.l	#8,d0
00014D1E 9680                       		sub.l	d0,d3
00014D20 2143 000C                  		move.l	d3,$C(a0)
00014D24 4E75                       		rts	
00014D26 4E75                       		rts	
00014D28                            ; ===========================================================================
00014D28 2428 0008                  		move.l	8(a0),d2
00014D2C 2628 000C                  		move.l	$C(a0),d3
00014D30 3028 0010                  		move.w	$10(a0),d0
00014D34 48C0                       		ext.l	d0
00014D36 E180                       		asl.l	#8,d0
00014D38 9480                       		sub.l	d0,d2
00014D3A 3028 0012                  		move.w	$12(a0),d0
00014D3E 48C0                       		ext.l	d0
00014D40 E180                       		asl.l	#8,d0
00014D42 9680                       		sub.l	d0,d3
00014D44 2142 0008                  		move.l	d2,8(a0)
00014D48 2143 000C                  		move.l	d3,$C(a0)
00014D4C 4E75                       		rts	
00014D4E                            
00014D4E                            ; ---------------------------------------------------------------------------
00014D4E                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014D4E                            ; ---------------------------------------------------------------------------
00014D4E                            
00014D4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D4E                            
00014D4E                            
00014D4E                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014D4E 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014D52 B240                       		cmp.w	d0,d1
00014D54 6F00                       		ble.s	loc_1475E
00014D56 1438 F768                  		move.b	($FFFFF768).w,d2
00014D5A 3200                       		move.w	d0,d1
00014D5C                            
00014D5C                            loc_1475E:
00014D5C 0802 0000                  		btst	#0,d2
00014D60 6600                       		bne.s	loc_1476A
00014D62 1142 0026                  		move.b	d2,$26(a0)
00014D66 4E75                       		rts	
00014D68                            ; ===========================================================================
00014D68                            
00014D68                            loc_1476A:
00014D68 1428 0026                  		move.b	$26(a0),d2
00014D6C 0602 0020                  		addi.b	#$20,d2
00014D70 0202 00C0                  		andi.b	#$C0,d2
00014D74 1142 0026                  		move.b	d2,$26(a0)
00014D78 4E75                       		rts	
00014D7A                            ; End of function Sonic_Angle
00014D7A                            
00014D7A                            ; ---------------------------------------------------------------------------
00014D7A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014D7A                            ; ---------------------------------------------------------------------------
00014D7A                            
00014D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D7A                            
00014D7A                            
00014D7A                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014D7A 3428 000C                  		move.w	$C(a0),d2
00014D7E 3628 0008                  		move.w	8(a0),d3
00014D82 7000                       		moveq	#0,d0
00014D84 1028 0017                  		move.b	$17(a0),d0
00014D88 4880                       		ext.w	d0
00014D8A 4440                       		neg.w	d0
00014D8C D440                       		add.w	d0,d2
00014D8E 1028 0016                  		move.b	$16(a0),d0
00014D92 4880                       		ext.w	d0
00014D94 D640                       		add.w	d0,d3
00014D96 49F8 F768                  		lea	($FFFFF768).w,a4
00014D9A 367C 0010                  		movea.w	#$10,a3
00014D9E 3C3C 0000                  		move.w	#0,d6
00014DA2 7A0D                       		moveq	#$D,d5
00014DA4 6100 0000                  		bsr.w	FindWall
00014DA8 3F01                       		move.w	d1,-(sp)
00014DAA 3428 000C                  		move.w	$C(a0),d2
00014DAE 3628 0008                  		move.w	8(a0),d3
00014DB2 7000                       		moveq	#0,d0
00014DB4 1028 0017                  		move.b	$17(a0),d0
00014DB8 4880                       		ext.w	d0
00014DBA D440                       		add.w	d0,d2
00014DBC 1028 0016                  		move.b	$16(a0),d0
00014DC0 4880                       		ext.w	d0
00014DC2 D640                       		add.w	d0,d3
00014DC4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014DC8 367C 0010                  		movea.w	#$10,a3
00014DCC 3C3C 0000                  		move.w	#0,d6
00014DD0 7A0D                       		moveq	#$D,d5
00014DD2 6100 0000                  		bsr.w	FindWall
00014DD6 301F                       		move.w	(sp)+,d0
00014DD8 6100 FF74                  		bsr.w	Sonic_Angle
00014DDC 4A41                       		tst.w	d1
00014DDE 6700                       		beq.s	locret_147F0
00014DE0 6A00                       		bpl.s	loc_147F2
00014DE2 0C41 FFF2                  		cmpi.w	#-$E,d1
00014DE6 6D00 FF20                  		blt.w	locret_1470A
00014DEA D368 0008                  		add.w	d1,8(a0)
00014DEE                            
00014DEE                            locret_147F0:
00014DEE 4E75                       		rts	
00014DF0                            ; ===========================================================================
00014DF0                            
00014DF0                            loc_147F2:
00014DF0 0C41 000E                  		cmpi.w	#$E,d1
00014DF4 6E00                       		bgt.s	loc_147FE
00014DF6                            
00014DF6                            loc_147F8:
00014DF6 D368 0008                  		add.w	d1,8(a0)
00014DFA 4E75                       		rts	
00014DFC                            ; ===========================================================================
00014DFC                            
00014DFC                            loc_147FE:
00014DFC 4A28 0038                  		tst.b	$38(a0)
00014E00 66F4                       		bne.s	loc_147F8
00014E02 08E8 0001 0022             		bset	#1,$22(a0)
00014E08 08A8 0005 0022             		bclr	#5,$22(a0)
00014E0E 117C 0001 001D             		move.b	#1,$1D(a0)
00014E14 4E75                       		rts	
00014E16                            ; End of function Sonic_WalkVertR
00014E16                            
00014E16                            ; ---------------------------------------------------------------------------
00014E16                            ; Subroutine allowing Sonic to walk upside-down
00014E16                            ; ---------------------------------------------------------------------------
00014E16                            
00014E16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E16                            
00014E16                            
00014E16                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014E16 3428 000C                  		move.w	$C(a0),d2
00014E1A 3628 0008                  		move.w	8(a0),d3
00014E1E 7000                       		moveq	#0,d0
00014E20 1028 0016                  		move.b	$16(a0),d0
00014E24 4880                       		ext.w	d0
00014E26 9440                       		sub.w	d0,d2
00014E28 0A42 000F                  		eori.w	#$F,d2
00014E2C 1028 0017                  		move.b	$17(a0),d0
00014E30 4880                       		ext.w	d0
00014E32 D640                       		add.w	d0,d3
00014E34 49F8 F768                  		lea	($FFFFF768).w,a4
00014E38 367C FFF0                  		movea.w	#-$10,a3
00014E3C 3C3C 1000                  		move.w	#$1000,d6
00014E40 7A0D                       		moveq	#$D,d5
00014E42 6100 0000                  		bsr.w	FindFloor
00014E46 3F01                       		move.w	d1,-(sp)
00014E48 3428 000C                  		move.w	$C(a0),d2
00014E4C 3628 0008                  		move.w	8(a0),d3
00014E50 7000                       		moveq	#0,d0
00014E52 1028 0016                  		move.b	$16(a0),d0
00014E56 4880                       		ext.w	d0
00014E58 9440                       		sub.w	d0,d2
00014E5A 0A42 000F                  		eori.w	#$F,d2
00014E5E 1028 0017                  		move.b	$17(a0),d0
00014E62 4880                       		ext.w	d0
00014E64 9640                       		sub.w	d0,d3
00014E66 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E6A 367C FFF0                  		movea.w	#-$10,a3
00014E6E 3C3C 1000                  		move.w	#$1000,d6
00014E72 7A0D                       		moveq	#$D,d5
00014E74 6100 0000                  		bsr.w	FindFloor
00014E78 301F                       		move.w	(sp)+,d0
00014E7A 6100 FED2                  		bsr.w	Sonic_Angle
00014E7E 4A41                       		tst.w	d1
00014E80 6700                       		beq.s	locret_14892
00014E82 6A00                       		bpl.s	loc_14894
00014E84 0C41 FFF2                  		cmpi.w	#-$E,d1
00014E88 6D00 FE5A                  		blt.w	locret_146E6
00014E8C 9368 000C                  		sub.w	d1,$C(a0)
00014E90                            
00014E90                            locret_14892:
00014E90 4E75                       		rts	
00014E92                            ; ===========================================================================
00014E92                            
00014E92                            loc_14894:
00014E92 0C41 000E                  		cmpi.w	#$E,d1
00014E96 6E00                       		bgt.s	loc_148A0
00014E98                            
00014E98                            loc_1489A:
00014E98 9368 000C                  		sub.w	d1,$C(a0)
00014E9C 4E75                       		rts	
00014E9E                            ; ===========================================================================
00014E9E                            
00014E9E                            loc_148A0:
00014E9E 4A28 0038                  		tst.b	$38(a0)
00014EA2 66F4                       		bne.s	loc_1489A
00014EA4 08E8 0001 0022             		bset	#1,$22(a0)
00014EAA 08A8 0005 0022             		bclr	#5,$22(a0)
00014EB0 117C 0001 001D             		move.b	#1,$1D(a0)
00014EB6 4E75                       		rts	
00014EB8                            ; End of function Sonic_WalkCeiling
00014EB8                            
00014EB8                            ; ---------------------------------------------------------------------------
00014EB8                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014EB8                            ; ---------------------------------------------------------------------------
00014EB8                            
00014EB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EB8                            
00014EB8                            
00014EB8                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014EB8 3428 000C                  		move.w	$C(a0),d2
00014EBC 3628 0008                  		move.w	8(a0),d3
00014EC0 7000                       		moveq	#0,d0
00014EC2 1028 0017                  		move.b	$17(a0),d0
00014EC6 4880                       		ext.w	d0
00014EC8 9440                       		sub.w	d0,d2
00014ECA 1028 0016                  		move.b	$16(a0),d0
00014ECE 4880                       		ext.w	d0
00014ED0 9640                       		sub.w	d0,d3
00014ED2 0A43 000F                  		eori.w	#$F,d3
00014ED6 49F8 F768                  		lea	($FFFFF768).w,a4
00014EDA 367C FFF0                  		movea.w	#-$10,a3
00014EDE 3C3C 0800                  		move.w	#$800,d6
00014EE2 7A0D                       		moveq	#$D,d5
00014EE4 6100 0000                  		bsr.w	FindWall
00014EE8 3F01                       		move.w	d1,-(sp)
00014EEA 3428 000C                  		move.w	$C(a0),d2
00014EEE 3628 0008                  		move.w	8(a0),d3
00014EF2 7000                       		moveq	#0,d0
00014EF4 1028 0017                  		move.b	$17(a0),d0
00014EF8 4880                       		ext.w	d0
00014EFA D440                       		add.w	d0,d2
00014EFC 1028 0016                  		move.b	$16(a0),d0
00014F00 4880                       		ext.w	d0
00014F02 9640                       		sub.w	d0,d3
00014F04 0A43 000F                  		eori.w	#$F,d3
00014F08 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F0C 367C FFF0                  		movea.w	#-$10,a3
00014F10 3C3C 0800                  		move.w	#$800,d6
00014F14 7A0D                       		moveq	#$D,d5
00014F16 6100 0000                  		bsr.w	FindWall
00014F1A 301F                       		move.w	(sp)+,d0
00014F1C 6100 FE30                  		bsr.w	Sonic_Angle
00014F20 4A41                       		tst.w	d1
00014F22 6700                       		beq.s	locret_14934
00014F24 6A00                       		bpl.s	loc_14936
00014F26 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F2A 6D00 FDDC                  		blt.w	locret_1470A
00014F2E 9368 0008                  		sub.w	d1,8(a0)
00014F32                            
00014F32                            locret_14934:
00014F32 4E75                       		rts	
00014F34                            ; ===========================================================================
00014F34                            
00014F34                            loc_14936:
00014F34 0C41 000E                  		cmpi.w	#$E,d1
00014F38 6E00                       		bgt.s	loc_14942
00014F3A                            
00014F3A                            loc_1493C:
00014F3A 9368 0008                  		sub.w	d1,8(a0)
00014F3E 4E75                       		rts	
00014F40                            ; ===========================================================================
00014F40                            
00014F40                            loc_14942:
00014F40 4A28 0038                  		tst.b	$38(a0)
00014F44 66F4                       		bne.s	loc_1493C
00014F46 08E8 0001 0022             		bset	#1,$22(a0)
00014F4C 08A8 0005 0022             		bclr	#5,$22(a0)
00014F52 117C 0001 001D             		move.b	#1,$1D(a0)
00014F58 4E75                       		rts	
00014F5A                            ; End of function Sonic_WalkVertL
00014F5A                            
00014F5A                            ; ---------------------------------------------------------------------------
00014F5A                            ; Subroutine to	find which tile	the object is standing on
00014F5A                            ; ---------------------------------------------------------------------------
00014F5A                            
00014F5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F5A                            
00014F5A                            
00014F5A                            Floor_ChkTile:				; XREF: FindFloor; et al
00014F5A 3002                       		move.w	d2,d0
00014F5C E248                       		lsr.w	#1,d0
00014F5E 0240 0380                  		andi.w	#$380,d0
00014F62 3203                       		move.w	d3,d1
00014F64 E049                       		lsr.w	#8,d1
00014F66 0241 007F                  		andi.w	#$7F,d1
00014F6A D041                       		add.w	d1,d0
00014F6C 72FF                       		moveq	#-1,d1
00014F6E 43F8 A400                  		lea	($FFFFA400).w,a1
00014F72 1231 0000                  		move.b	(a1,d0.w),d1
00014F76 6700                       		beq.s	loc_14996
00014F78 6B00                       		bmi.s	loc_1499A
00014F7A 5301                       		subq.b	#1,d1
00014F7C 4881                       		ext.w	d1
00014F7E EE59                       		ror.w	#7,d1
00014F80 3002                       		move.w	d2,d0
00014F82 D040                       		add.w	d0,d0
00014F84 0240 01E0                  		andi.w	#$1E0,d0
00014F88 D240                       		add.w	d0,d1
00014F8A 3003                       		move.w	d3,d0
00014F8C E648                       		lsr.w	#3,d0
00014F8E 0240 001E                  		andi.w	#$1E,d0
00014F92 D240                       		add.w	d0,d1
00014F94                            
00014F94                            loc_14996:
00014F94 2241                       		movea.l	d1,a1
00014F96 4E75                       		rts	
00014F98                            ; ===========================================================================
00014F98                            
00014F98                            loc_1499A:
00014F98 0241 007F                  		andi.w	#$7F,d1
00014F9C 0828 0006 0001             		btst	#6,1(a0)
00014FA2 6700                       		beq.s	loc_149B2
00014FA4 5241                       		addq.w	#1,d1
00014FA6 0C41 0029                  		cmpi.w	#$29,d1
00014FAA 6600                       		bne.s	loc_149B2
00014FAC 323C 0051                  		move.w	#$51,d1
00014FB0                            
00014FB0                            loc_149B2:
00014FB0 5301                       		subq.b	#1,d1
00014FB2 EE59                       		ror.w	#7,d1
00014FB4 3002                       		move.w	d2,d0
00014FB6 D040                       		add.w	d0,d0
00014FB8 0240 01E0                  		andi.w	#$1E0,d0
00014FBC D240                       		add.w	d0,d1
00014FBE 3003                       		move.w	d3,d0
00014FC0 E648                       		lsr.w	#3,d0
00014FC2 0240 001E                  		andi.w	#$1E,d0
00014FC6 D240                       		add.w	d0,d1
00014FC8 2241                       		movea.l	d1,a1
00014FCA 4E75                       		rts	
00014FCC                            ; End of function Floor_ChkTile
00014FCC                            
00014FCC                            
00014FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FCC                            
00014FCC                            
00014FCC                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014FCC 618C                       		bsr.s	Floor_ChkTile
00014FCE 3011                       		move.w	(a1),d0
00014FD0 3800                       		move.w	d0,d4
00014FD2 0240 07FF                  		andi.w	#$7FF,d0
00014FD6 6700                       		beq.s	loc_149DE
00014FD8 0B04                       		btst	d5,d4
00014FDA 6600                       		bne.s	loc_149EC
00014FDC                            
00014FDC                            loc_149DE:
00014FDC D44B                       		add.w	a3,d2
00014FDE 6100 0000                  		bsr.w	FindFloor2
00014FE2 944B                       		sub.w	a3,d2
00014FE4 0641 0010                  		addi.w	#$10,d1
00014FE8 4E75                       		rts	
00014FEA                            ; ===========================================================================
00014FEA                            
00014FEA                            loc_149EC:
00014FEA 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014FEE 1032 0000                  		move.b	(a2,d0.w),d0
00014FF2 0240 00FF                  		andi.w	#$FF,d0
00014FF6 67E4                       		beq.s	loc_149DE
00014FF8 45F9 0000 0000             		lea	(AngleMap).l,a2
00014FFE 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015002 E948                       		lsl.w	#4,d0
00015004 3203                       		move.w	d3,d1
00015006 0804 000B                  		btst	#$B,d4
0001500A 6700                       		beq.s	loc_14A12
0001500C 4641                       		not.w	d1
0001500E 4414                       		neg.b	(a4)
00015010                            
00015010                            loc_14A12:
00015010 0804 000C                  		btst	#$C,d4
00015014 6700                       		beq.s	loc_14A22
00015016 0614 0040                  		addi.b	#$40,(a4)
0001501A 4414                       		neg.b	(a4)
0001501C 0414 0040                  		subi.b	#$40,(a4)
00015020                            
00015020                            loc_14A22:
00015020 0241 000F                  		andi.w	#$F,d1
00015024 D240                       		add.w	d0,d1
00015026 45F9 0000 0000             		lea	(CollArray1).l,a2
0001502C 1032 1000                  		move.b	(a2,d1.w),d0
00015030 4880                       		ext.w	d0
00015032 BD44                       		eor.w	d6,d4
00015034 0804 000C                  		btst	#$C,d4
00015038 6700                       		beq.s	loc_14A3E
0001503A 4440                       		neg.w	d0
0001503C                            
0001503C                            loc_14A3E:
0001503C 4A40                       		tst.w	d0
0001503E 679C                       		beq.s	loc_149DE
00015040 6B00                       		bmi.s	loc_14A5A
00015042 0C00 0010                  		cmpi.b	#$10,d0
00015046 6700                       		beq.s	loc_14A66
00015048 3202                       		move.w	d2,d1
0001504A 0241 000F                  		andi.w	#$F,d1
0001504E D041                       		add.w	d1,d0
00015050 323C 000F                  		move.w	#$F,d1
00015054 9240                       		sub.w	d0,d1
00015056 4E75                       		rts	
00015058                            ; ===========================================================================
00015058                            
00015058                            loc_14A5A:
00015058 3202                       		move.w	d2,d1
0001505A 0241 000F                  		andi.w	#$F,d1
0001505E D041                       		add.w	d1,d0
00015060 6A00 FF7A                  		bpl.w	loc_149DE
00015064                            
00015064                            loc_14A66:
00015064 944B                       		sub.w	a3,d2
00015066 6100 0000                  		bsr.w	FindFloor2
0001506A D44B                       		add.w	a3,d2
0001506C 0441 0010                  		subi.w	#$10,d1
00015070 4E75                       		rts	
00015072                            ; End of function FindFloor
00015072                            
00015072                            
00015072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015072                            
00015072                            
00015072                            FindFloor2:				; XREF: FindFloor
00015072 6100 FEE6                  		bsr.w	Floor_ChkTile
00015076 3011                       		move.w	(a1),d0
00015078 3800                       		move.w	d0,d4
0001507A 0240 07FF                  		andi.w	#$7FF,d0
0001507E 6700                       		beq.s	loc_14A86
00015080 0B04                       		btst	d5,d4
00015082 6600                       		bne.s	loc_14A94
00015084                            
00015084                            loc_14A86:
00015084 323C 000F                  		move.w	#$F,d1
00015088 3002                       		move.w	d2,d0
0001508A 0240 000F                  		andi.w	#$F,d0
0001508E 9240                       		sub.w	d0,d1
00015090 4E75                       		rts	
00015092                            ; ===========================================================================
00015092                            
00015092                            loc_14A94:
00015092 2478 F796                  		movea.l	($FFFFF796).w,a2
00015096 1032 0000                  		move.b	(a2,d0.w),d0
0001509A 0240 00FF                  		andi.w	#$FF,d0
0001509E 67E4                       		beq.s	loc_14A86
000150A0 45F9 0000 0000             		lea	(AngleMap).l,a2
000150A6 18B2 0000                  		move.b	(a2,d0.w),(a4)
000150AA E948                       		lsl.w	#4,d0
000150AC 3203                       		move.w	d3,d1
000150AE 0804 000B                  		btst	#$B,d4
000150B2 6700                       		beq.s	loc_14ABA
000150B4 4641                       		not.w	d1
000150B6 4414                       		neg.b	(a4)
000150B8                            
000150B8                            loc_14ABA:
000150B8 0804 000C                  		btst	#$C,d4
000150BC 6700                       		beq.s	loc_14ACA
000150BE 0614 0040                  		addi.b	#$40,(a4)
000150C2 4414                       		neg.b	(a4)
000150C4 0414 0040                  		subi.b	#$40,(a4)
000150C8                            
000150C8                            loc_14ACA:
000150C8 0241 000F                  		andi.w	#$F,d1
000150CC D240                       		add.w	d0,d1
000150CE 45F9 0000 0000             		lea	(CollArray1).l,a2
000150D4 1032 1000                  		move.b	(a2,d1.w),d0
000150D8 4880                       		ext.w	d0
000150DA BD44                       		eor.w	d6,d4
000150DC 0804 000C                  		btst	#$C,d4
000150E0 6700                       		beq.s	loc_14AE6
000150E2 4440                       		neg.w	d0
000150E4                            
000150E4                            loc_14AE6:
000150E4 4A40                       		tst.w	d0
000150E6 679C                       		beq.s	loc_14A86
000150E8 6B00                       		bmi.s	loc_14AFC
000150EA 3202                       		move.w	d2,d1
000150EC 0241 000F                  		andi.w	#$F,d1
000150F0 D041                       		add.w	d1,d0
000150F2 323C 000F                  		move.w	#$F,d1
000150F6 9240                       		sub.w	d0,d1
000150F8 4E75                       		rts	
000150FA                            ; ===========================================================================
000150FA                            
000150FA                            loc_14AFC:
000150FA 3202                       		move.w	d2,d1
000150FC 0241 000F                  		andi.w	#$F,d1
00015100 D041                       		add.w	d1,d0
00015102 6A00 FF80                  		bpl.w	loc_14A86
00015106 4641                       		not.w	d1
00015108 4E75                       		rts	
0001510A                            ; End of function FindFloor2
0001510A                            
0001510A                            
0001510A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001510A                            
0001510A                            
0001510A                            FindWall:				; XREF: Sonic_WalkVertR; et al
0001510A 6100 FE4E                  		bsr.w	Floor_ChkTile
0001510E 3011                       		move.w	(a1),d0
00015110 3800                       		move.w	d0,d4
00015112 0240 07FF                  		andi.w	#$7FF,d0
00015116 6700                       		beq.s	loc_14B1E
00015118 0B04                       		btst	d5,d4
0001511A 6600                       		bne.s	loc_14B2C
0001511C                            
0001511C                            loc_14B1E:
0001511C D64B                       		add.w	a3,d3
0001511E 6100 0000                  		bsr.w	FindWall2
00015122 964B                       		sub.w	a3,d3
00015124 0641 0010                  		addi.w	#$10,d1
00015128 4E75                       		rts	
0001512A                            ; ===========================================================================
0001512A                            
0001512A                            loc_14B2C:
0001512A 2478 F796                  		movea.l	($FFFFF796).w,a2
0001512E 1032 0000                  		move.b	(a2,d0.w),d0
00015132 0240 00FF                  		andi.w	#$FF,d0
00015136 67E4                       		beq.s	loc_14B1E
00015138 45F9 0000 0000             		lea	(AngleMap).l,a2
0001513E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015142 E948                       		lsl.w	#4,d0
00015144 3202                       		move.w	d2,d1
00015146 0804 000C                  		btst	#$C,d4
0001514A 6700                       		beq.s	loc_14B5A
0001514C 4641                       		not.w	d1
0001514E 0614 0040                  		addi.b	#$40,(a4)
00015152 4414                       		neg.b	(a4)
00015154 0414 0040                  		subi.b	#$40,(a4)
00015158                            
00015158                            loc_14B5A:
00015158 0804 000B                  		btst	#$B,d4
0001515C 6700                       		beq.s	loc_14B62
0001515E 4414                       		neg.b	(a4)
00015160                            
00015160                            loc_14B62:
00015160 0241 000F                  		andi.w	#$F,d1
00015164 D240                       		add.w	d0,d1
00015166 45F9 0000 0000             		lea	(CollArray2).l,a2
0001516C 1032 1000                  		move.b	(a2,d1.w),d0
00015170 4880                       		ext.w	d0
00015172 BD44                       		eor.w	d6,d4
00015174 0804 000B                  		btst	#$B,d4
00015178 6700                       		beq.s	loc_14B7E
0001517A 4440                       		neg.w	d0
0001517C                            
0001517C                            loc_14B7E:
0001517C 4A40                       		tst.w	d0
0001517E 679C                       		beq.s	loc_14B1E
00015180 6B00                       		bmi.s	loc_14B9A
00015182 0C00 0010                  		cmpi.b	#$10,d0
00015186 6700                       		beq.s	loc_14BA6
00015188 3203                       		move.w	d3,d1
0001518A 0241 000F                  		andi.w	#$F,d1
0001518E D041                       		add.w	d1,d0
00015190 323C 000F                  		move.w	#$F,d1
00015194 9240                       		sub.w	d0,d1
00015196 4E75                       		rts	
00015198                            ; ===========================================================================
00015198                            
00015198                            loc_14B9A:
00015198 3203                       		move.w	d3,d1
0001519A 0241 000F                  		andi.w	#$F,d1
0001519E D041                       		add.w	d1,d0
000151A0 6A00 FF7A                  		bpl.w	loc_14B1E
000151A4                            
000151A4                            loc_14BA6:
000151A4 964B                       		sub.w	a3,d3
000151A6 6100 0000                  		bsr.w	FindWall2
000151AA D64B                       		add.w	a3,d3
000151AC 0441 0010                  		subi.w	#$10,d1
000151B0 4E75                       		rts	
000151B2                            ; End of function FindWall
000151B2                            
000151B2                            
000151B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151B2                            
000151B2                            
000151B2                            FindWall2:				; XREF: FindWall
000151B2 6100 FDA6                  		bsr.w	Floor_ChkTile
000151B6 3011                       		move.w	(a1),d0
000151B8 3800                       		move.w	d0,d4
000151BA 0240 07FF                  		andi.w	#$7FF,d0
000151BE 6700                       		beq.s	loc_14BC6
000151C0 0B04                       		btst	d5,d4
000151C2 6600                       		bne.s	loc_14BD4
000151C4                            
000151C4                            loc_14BC6:
000151C4 323C 000F                  		move.w	#$F,d1
000151C8 3003                       		move.w	d3,d0
000151CA 0240 000F                  		andi.w	#$F,d0
000151CE 9240                       		sub.w	d0,d1
000151D0 4E75                       		rts	
000151D2                            ; ===========================================================================
000151D2                            
000151D2                            loc_14BD4:
000151D2 2478 F796                  		movea.l	($FFFFF796).w,a2
000151D6 1032 0000                  		move.b	(a2,d0.w),d0
000151DA 0240 00FF                  		andi.w	#$FF,d0
000151DE 67E4                       		beq.s	loc_14BC6
000151E0 45F9 0000 0000             		lea	(AngleMap).l,a2
000151E6 18B2 0000                  		move.b	(a2,d0.w),(a4)
000151EA E948                       		lsl.w	#4,d0
000151EC 3202                       		move.w	d2,d1
000151EE 0804 000C                  		btst	#$C,d4
000151F2 6700                       		beq.s	loc_14C02
000151F4 4641                       		not.w	d1
000151F6 0614 0040                  		addi.b	#$40,(a4)
000151FA 4414                       		neg.b	(a4)
000151FC 0414 0040                  		subi.b	#$40,(a4)
00015200                            
00015200                            loc_14C02:
00015200 0804 000B                  		btst	#$B,d4
00015204 6700                       		beq.s	loc_14C0A
00015206 4414                       		neg.b	(a4)
00015208                            
00015208                            loc_14C0A:
00015208 0241 000F                  		andi.w	#$F,d1
0001520C D240                       		add.w	d0,d1
0001520E 45F9 0000 0000             		lea	(CollArray2).l,a2
00015214 1032 1000                  		move.b	(a2,d1.w),d0
00015218 4880                       		ext.w	d0
0001521A BD44                       		eor.w	d6,d4
0001521C 0804 000B                  		btst	#$B,d4
00015220 6700                       		beq.s	loc_14C26
00015222 4440                       		neg.w	d0
00015224                            
00015224                            loc_14C26:
00015224 4A40                       		tst.w	d0
00015226 679C                       		beq.s	loc_14BC6
00015228 6B00                       		bmi.s	loc_14C3C
0001522A 3203                       		move.w	d3,d1
0001522C 0241 000F                  		andi.w	#$F,d1
00015230 D041                       		add.w	d1,d0
00015232 323C 000F                  		move.w	#$F,d1
00015236 9240                       		sub.w	d0,d1
00015238 4E75                       		rts	
0001523A                            ; ===========================================================================
0001523A                            
0001523A                            loc_14C3C:
0001523A 3203                       		move.w	d3,d1
0001523C 0241 000F                  		andi.w	#$F,d1
00015240 D041                       		add.w	d1,d0
00015242 6A00 FF80                  		bpl.w	loc_14BC6
00015246 4641                       		not.w	d1
00015248 4E75                       		rts	
0001524A                            ; End of function FindWall2
0001524A                            
0001524A                            ; ---------------------------------------------------------------------------
0001524A                            ; Unused floor/wall subroutine - logs something	to do with collision
0001524A                            ; ---------------------------------------------------------------------------
0001524A                            
0001524A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001524A                            
0001524A                            
0001524A                            FloorLog_Unk:				; XREF: Level
0001524A 4E75                       		rts	
0001524C                            
0001524C 43F9 0000 0000             		lea	(CollArray1).l,a1
00015252 45F9 0000 0000             		lea	(CollArray1).l,a2
00015258 363C 00FF                  		move.w	#$FF,d3
0001525C                            
0001525C                            loc_14C5E:
0001525C 7A10                       		moveq	#$10,d5
0001525E 343C 000F                  		move.w	#$F,d2
00015262                            
00015262                            loc_14C64:
00015262 7800                       		moveq	#0,d4
00015264 323C 000F                  		move.w	#$F,d1
00015268                            
00015268                            loc_14C6A:
00015268 3019                       		move.w	(a1)+,d0
0001526A EAA8                       		lsr.l	d5,d0
0001526C D944                       		addx.w	d4,d4
0001526E 51C9 FFF8                  		dbf	d1,loc_14C6A
00015272                            
00015272 34C4                       		move.w	d4,(a2)+
00015274 92FC 0020                  		suba.w	#$20,a1
00015278 5345                       		subq.w	#1,d5
0001527A 51CA FFE6                  		dbf	d2,loc_14C64
0001527E                            
0001527E D2FC 0020                  		adda.w	#$20,a1
00015282 51CB FFD8                  		dbf	d3,loc_14C5E
00015286                            
00015286 43F9 0000 0000             		lea	(CollArray1).l,a1
0001528C 45F9 0000 0000             		lea	(CollArray2).l,a2
00015292 6100                       		bsr.s	FloorLog_Unk2
00015294 43F9 0000 0000             		lea	(CollArray1).l,a1
0001529A 45F9 0000 0000             		lea	(CollArray1).l,a2
000152A0                            
000152A0                            ; End of function FloorLog_Unk
000152A0                            
000152A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152A0                            
000152A0                            
000152A0                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000152A0 363C 0FFF                  		move.w	#$FFF,d3
000152A4                            
000152A4                            loc_14CA6:
000152A4 7400                       		moveq	#0,d2
000152A6 323C 000F                  		move.w	#$F,d1
000152AA 3019                       		move.w	(a1)+,d0
000152AC 6700                       		beq.s	loc_14CD4
000152AE 6B00                       		bmi.s	loc_14CBE
000152B0                            
000152B0                            loc_14CB2:
000152B0 E248                       		lsr.w	#1,d0
000152B2 6400                       		bcc.s	loc_14CB8
000152B4 5202                       		addq.b	#1,d2
000152B6                            
000152B6                            loc_14CB8:
000152B6 51C9 FFF8                  		dbf	d1,loc_14CB2
000152BA                            
000152BA 6000                       		bra.s	loc_14CD6
000152BC                            ; ===========================================================================
000152BC                            
000152BC                            loc_14CBE:
000152BC 0C40 FFFF                  		cmpi.w	#-1,d0
000152C0 6700                       		beq.s	loc_14CD0
000152C2                            
000152C2                            loc_14CC4:
000152C2 E348                       		lsl.w	#1,d0
000152C4 6400                       		bcc.s	loc_14CCA
000152C6 5302                       		subq.b	#1,d2
000152C8                            
000152C8                            loc_14CCA:
000152C8 51C9 FFF8                  		dbf	d1,loc_14CC4
000152CC                            
000152CC 6000                       		bra.s	loc_14CD6
000152CE                            ; ===========================================================================
000152CE                            
000152CE                            loc_14CD0:
000152CE 303C 0010                  		move.w	#$10,d0
000152D2                            
000152D2                            loc_14CD4:
000152D2 3400                       		move.w	d0,d2
000152D4                            
000152D4                            loc_14CD6:
000152D4 14C2                       		move.b	d2,(a2)+
000152D6 51CB FFCC                  		dbf	d3,loc_14CA6
000152DA                            
000152DA 4E75                       		rts	
000152DC                            
000152DC                            ; End of function FloorLog_Unk2
000152DC                            
000152DC                            
000152DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152DC                            
000152DC                            
000152DC                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000152DC 2628 0008                  		move.l	8(a0),d3
000152E0 2428 000C                  		move.l	$C(a0),d2
000152E4 3228 0010                  		move.w	$10(a0),d1
000152E8 48C1                       		ext.l	d1
000152EA E181                       		asl.l	#8,d1
000152EC D681                       		add.l	d1,d3
000152EE 3228 0012                  		move.w	$12(a0),d1
000152F2 48C1                       		ext.l	d1
000152F4 E181                       		asl.l	#8,d1
000152F6 D481                       		add.l	d1,d2
000152F8 4842                       		swap	d2
000152FA 4843                       		swap	d3
000152FC 11C0 F768                  		move.b	d0,($FFFFF768).w
00015300 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015304 1200                       		move.b	d0,d1
00015306 0600 0020                  		addi.b	#$20,d0
0001530A 6A00                       		bpl.s	loc_14D1A
0001530C 1001                       		move.b	d1,d0
0001530E 6A00                       		bpl.s	loc_14D14
00015310 5300                       		subq.b	#1,d0
00015312                            
00015312                            loc_14D14:
00015312 0600 0020                  		addi.b	#$20,d0
00015316 6000                       		bra.s	loc_14D24
00015318                            ; ===========================================================================
00015318                            
00015318                            loc_14D1A:
00015318 1001                       		move.b	d1,d0
0001531A 6A00                       		bpl.s	loc_14D20
0001531C 5200                       		addq.b	#1,d0
0001531E                            
0001531E                            loc_14D20:
0001531E 0600 001F                  		addi.b	#$1F,d0
00015322                            
00015322                            loc_14D24:
00015322 0200 00C0                  		andi.b	#$C0,d0
00015326 6700 0000                  		beq.w	loc_14DF0
0001532A 0C00 0080                  		cmpi.b	#$80,d0
0001532E 6700 0000                  		beq.w	loc_14F7C
00015332 0201 0038                  		andi.b	#$38,d1
00015336 6600                       		bne.s	loc_14D3C
00015338 5042                       		addq.w	#8,d2
0001533A                            
0001533A                            loc_14D3C:
0001533A 0C00 0040                  		cmpi.b	#$40,d0
0001533E 6700 0000                  		beq.w	loc_1504A
00015342 6000 0000                  		bra.w	loc_14EBC
00015346                            
00015346                            ; End of function Sonic_WalkSpeed
00015346                            
00015346                            
00015346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015346                            
00015346                            
00015346                            sub_14D48:				; XREF: Sonic_Jump
00015346 11C0 F768                  		move.b	d0,($FFFFF768).w
0001534A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001534E 0600 0020                  		addi.b	#$20,d0
00015352 0200 00C0                  		andi.b	#$C0,d0
00015356 0C00 0040                  		cmpi.b	#$40,d0
0001535A 6700 0000                  		beq.w	loc_14FD6
0001535E 0C00 0080                  		cmpi.b	#$80,d0
00015362 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015366 0C00 00C0                  		cmpi.b	#$C0,d0
0001536A 6700 0000                  		beq.w	sub_14E50
0001536E                            
0001536E                            ; End of function sub_14D48
0001536E                            
0001536E                            ; ---------------------------------------------------------------------------
0001536E                            ; Subroutine to	make Sonic land	on the floor after jumping
0001536E                            ; ---------------------------------------------------------------------------
0001536E                            
0001536E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001536E                            
0001536E                            
0001536E                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001536E 3428 000C                  		move.w	$C(a0),d2
00015372 3628 0008                  		move.w	8(a0),d3
00015376 7000                       		moveq	#0,d0
00015378 1028 0016                  		move.b	$16(a0),d0
0001537C 4880                       		ext.w	d0
0001537E D440                       		add.w	d0,d2
00015380 1028 0017                  		move.b	$17(a0),d0
00015384 4880                       		ext.w	d0
00015386 D640                       		add.w	d0,d3
00015388 49F8 F768                  		lea	($FFFFF768).w,a4
0001538C 367C 0010                  		movea.w	#$10,a3
00015390 3C3C 0000                  		move.w	#0,d6
00015394 7A0D                       		moveq	#$D,d5
00015396 6100 FC34                  		bsr.w	FindFloor
0001539A 3F01                       		move.w	d1,-(sp)
0001539C 3428 000C                  		move.w	$C(a0),d2
000153A0 3628 0008                  		move.w	8(a0),d3
000153A4 7000                       		moveq	#0,d0
000153A6 1028 0016                  		move.b	$16(a0),d0
000153AA 4880                       		ext.w	d0
000153AC D440                       		add.w	d0,d2
000153AE 1028 0017                  		move.b	$17(a0),d0
000153B2 4880                       		ext.w	d0
000153B4 9640                       		sub.w	d0,d3
000153B6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153BA 367C 0010                  		movea.w	#$10,a3
000153BE 3C3C 0000                  		move.w	#0,d6
000153C2 7A0D                       		moveq	#$D,d5
000153C4 6100 FC06                  		bsr.w	FindFloor
000153C8 301F                       		move.w	(sp)+,d0
000153CA 143C 0000                  		move.b	#0,d2
000153CE                            
000153CE                            loc_14DD0:
000153CE 1638 F76A                  		move.b	($FFFFF76A).w,d3
000153D2 B240                       		cmp.w	d0,d1
000153D4 6F00                       		ble.s	loc_14DDE
000153D6 1638 F768                  		move.b	($FFFFF768).w,d3
000153DA C141                       		exg	d0,d1
000153DC                            
000153DC                            loc_14DDE:
000153DC 0803 0000                  		btst	#0,d3
000153E0 6700                       		beq.s	locret_14DE6
000153E2 1602                       		move.b	d2,d3
000153E4                            
000153E4                            locret_14DE6:
000153E4 4E75                       		rts	
000153E6                            
000153E6                            ; End of function Sonic_HitFloor
000153E6                            
000153E6                            ; ===========================================================================
000153E6 3428 000C                  		move.w	$C(a0),d2
000153EA 3628 0008                  		move.w	8(a0),d3
000153EE                            
000153EE                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000153EE 0642 000A                  		addi.w	#$A,d2
000153F2 49F8 F768                  		lea	($FFFFF768).w,a4
000153F6 367C 0010                  		movea.w	#$10,a3
000153FA 3C3C 0000                  		move.w	#0,d6
000153FE 7A0E                       		moveq	#$E,d5
00015400 6100 FBCA                  		bsr.w	FindFloor
00015404 143C 0000                  		move.b	#0,d2
00015408                            
00015408                            loc_14E0A:				; XREF: sub_14EB4
00015408 1638 F768                  		move.b	($FFFFF768).w,d3
0001540C 0803 0000                  		btst	#0,d3
00015410 6700                       		beq.s	locret_14E16
00015412 1602                       		move.b	d2,d3
00015414                            
00015414                            locret_14E16:
00015414 4E75                       		rts	
00015416                            
00015416                            ; ---------------------------------------------------------------------------
00015416                            ; Subroutine allowing objects to interact with the floor
00015416                            ; ---------------------------------------------------------------------------
00015416                            
00015416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015416                            
00015416                            
00015416                            ObjHitFloor:
00015416 3628 0008                  		move.w	8(a0),d3
0001541A                            
0001541A                            ; End of function ObjHitFloor
0001541A                            
0001541A                            
0001541A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001541A                            
0001541A                            
0001541A                            ObjHitFloor2:
0001541A 3428 000C                  		move.w	$C(a0),d2
0001541E 7000                       		moveq	#0,d0
00015420 1028 0016                  		move.b	$16(a0),d0
00015424 4880                       		ext.w	d0
00015426 D440                       		add.w	d0,d2
00015428 49F8 F768                  		lea	($FFFFF768).w,a4
0001542C 18BC 0000                  		move.b	#0,(a4)
00015430 367C 0010                  		movea.w	#$10,a3
00015434 3C3C 0000                  		move.w	#0,d6
00015438 7A0D                       		moveq	#$D,d5
0001543A 6100 FB90                  		bsr.w	FindFloor
0001543E 1638 F768                  		move.b	($FFFFF768).w,d3
00015442 0803 0000                  		btst	#0,d3
00015446 6700                       		beq.s	locret_14E4E
00015448 163C 0000                  		move.b	#0,d3
0001544C                            
0001544C                            locret_14E4E:
0001544C 4E75                       		rts	
0001544E                            ; End of function ObjHitFloor2
0001544E                            
0001544E                            
0001544E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001544E                            
0001544E                            
0001544E                            sub_14E50:				; XREF: sub_14D48
0001544E 3428 000C                  		move.w	$C(a0),d2
00015452 3628 0008                  		move.w	8(a0),d3
00015456 7000                       		moveq	#0,d0
00015458 1028 0017                  		move.b	$17(a0),d0
0001545C 4880                       		ext.w	d0
0001545E 9440                       		sub.w	d0,d2
00015460 1028 0016                  		move.b	$16(a0),d0
00015464 4880                       		ext.w	d0
00015466 D640                       		add.w	d0,d3
00015468 49F8 F768                  		lea	($FFFFF768).w,a4
0001546C 367C 0010                  		movea.w	#$10,a3
00015470 3C3C 0000                  		move.w	#0,d6
00015474 7A0E                       		moveq	#$E,d5
00015476 6100 FC92                  		bsr.w	FindWall
0001547A 3F01                       		move.w	d1,-(sp)
0001547C 3428 000C                  		move.w	$C(a0),d2
00015480 3628 0008                  		move.w	8(a0),d3
00015484 7000                       		moveq	#0,d0
00015486 1028 0017                  		move.b	$17(a0),d0
0001548A 4880                       		ext.w	d0
0001548C D440                       		add.w	d0,d2
0001548E 1028 0016                  		move.b	$16(a0),d0
00015492 4880                       		ext.w	d0
00015494 D640                       		add.w	d0,d3
00015496 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001549A 367C 0010                  		movea.w	#$10,a3
0001549E 3C3C 0000                  		move.w	#0,d6
000154A2 7A0E                       		moveq	#$E,d5
000154A4 6100 FC64                  		bsr.w	FindWall
000154A8 301F                       		move.w	(sp)+,d0
000154AA 143C 00C0                  		move.b	#-$40,d2
000154AE 6000 FF1E                  		bra.w	loc_14DD0
000154B2                            
000154B2                            ; End of function sub_14E50
000154B2                            
000154B2                            
000154B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154B2                            
000154B2                            
000154B2                            sub_14EB4:				; XREF: Sonic_Floor
000154B2 3428 000C                  		move.w	$C(a0),d2
000154B6 3628 0008                  		move.w	8(a0),d3
000154BA                            
000154BA                            loc_14EBC:
000154BA 0643 000A                  		addi.w	#$A,d3
000154BE 49F8 F768                  		lea	($FFFFF768).w,a4
000154C2 367C 0010                  		movea.w	#$10,a3
000154C6 3C3C 0000                  		move.w	#0,d6
000154CA 7A0E                       		moveq	#$E,d5
000154CC 6100 FC3C                  		bsr.w	FindWall
000154D0 143C 00C0                  		move.b	#-$40,d2
000154D4 6000 FF32                  		bra.w	loc_14E0A
000154D8                            
000154D8                            ; End of function sub_14EB4
000154D8                            
000154D8                            ; ---------------------------------------------------------------------------
000154D8                            ; Subroutine to	detect when an object hits a wall to its right
000154D8                            ; ---------------------------------------------------------------------------
000154D8                            
000154D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154D8                            
000154D8                            
000154D8                            ObjHitWallRight:
000154D8 D668 0008                  		add.w	8(a0),d3
000154DC 3428 000C                  		move.w	$C(a0),d2
000154E0 49F8 F768                  		lea	($FFFFF768).w,a4
000154E4 18BC 0000                  		move.b	#0,(a4)
000154E8 367C 0010                  		movea.w	#$10,a3
000154EC 3C3C 0000                  		move.w	#0,d6
000154F0 7A0E                       		moveq	#$E,d5
000154F2 6100 FC16                  		bsr.w	FindWall
000154F6 1638 F768                  		move.b	($FFFFF768).w,d3
000154FA 0803 0000                  		btst	#0,d3
000154FE 6700                       		beq.s	locret_14F06
00015500 163C 00C0                  		move.b	#-$40,d3
00015504                            
00015504                            locret_14F06:
00015504 4E75                       		rts	
00015506                            
00015506                            ; End of function ObjHitWallRight
00015506                            
00015506                            ; ---------------------------------------------------------------------------
00015506                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015506                            ; touches them
00015506                            ; ---------------------------------------------------------------------------
00015506                            
00015506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015506                            
00015506                            
00015506                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015506 3428 000C                  		move.w	$C(a0),d2
0001550A 3628 0008                  		move.w	8(a0),d3
0001550E 7000                       		moveq	#0,d0
00015510 1028 0016                  		move.b	$16(a0),d0
00015514 4880                       		ext.w	d0
00015516 9440                       		sub.w	d0,d2
00015518 0A42 000F                  		eori.w	#$F,d2
0001551C 1028 0017                  		move.b	$17(a0),d0
00015520 4880                       		ext.w	d0
00015522 D640                       		add.w	d0,d3
00015524 49F8 F768                  		lea	($FFFFF768).w,a4
00015528 367C FFF0                  		movea.w	#-$10,a3
0001552C 3C3C 1000                  		move.w	#$1000,d6
00015530 7A0E                       		moveq	#$E,d5
00015532 6100 FA98                  		bsr.w	FindFloor
00015536 3F01                       		move.w	d1,-(sp)
00015538 3428 000C                  		move.w	$C(a0),d2
0001553C 3628 0008                  		move.w	8(a0),d3
00015540 7000                       		moveq	#0,d0
00015542 1028 0016                  		move.b	$16(a0),d0
00015546 4880                       		ext.w	d0
00015548 9440                       		sub.w	d0,d2
0001554A 0A42 000F                  		eori.w	#$F,d2
0001554E 1028 0017                  		move.b	$17(a0),d0
00015552 4880                       		ext.w	d0
00015554 9640                       		sub.w	d0,d3
00015556 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001555A 367C FFF0                  		movea.w	#-$10,a3
0001555E 3C3C 1000                  		move.w	#$1000,d6
00015562 7A0E                       		moveq	#$E,d5
00015564 6100 FA66                  		bsr.w	FindFloor
00015568 301F                       		move.w	(sp)+,d0
0001556A 143C 0080                  		move.b	#-$80,d2
0001556E 6000 FE5E                  		bra.w	loc_14DD0
00015572                            ; End of function Sonic_DontRunOnWalls
00015572                            
00015572                            ; ===========================================================================
00015572 3428 000C                  		move.w	$C(a0),d2
00015576 3628 0008                  		move.w	8(a0),d3
0001557A                            
0001557A                            loc_14F7C:
0001557A 0442 000A                  		subi.w	#$A,d2
0001557E 0A42 000F                  		eori.w	#$F,d2
00015582 49F8 F768                  		lea	($FFFFF768).w,a4
00015586 367C FFF0                  		movea.w	#-$10,a3
0001558A 3C3C 1000                  		move.w	#$1000,d6
0001558E 7A0E                       		moveq	#$E,d5
00015590 6100 FA3A                  		bsr.w	FindFloor
00015594 143C 0080                  		move.b	#-$80,d2
00015598 6000 FE6E                  		bra.w	loc_14E0A
0001559C                            
0001559C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001559C                            
0001559C                            
0001559C                            ObjHitCeiling:
0001559C 3428 000C                  		move.w	$C(a0),d2
000155A0 3628 0008                  		move.w	8(a0),d3
000155A4 7000                       		moveq	#0,d0
000155A6 1028 0016                  		move.b	$16(a0),d0
000155AA 4880                       		ext.w	d0
000155AC 9440                       		sub.w	d0,d2
000155AE 0A42 000F                  		eori.w	#$F,d2
000155B2 49F8 F768                  		lea	($FFFFF768).w,a4
000155B6 367C FFF0                  		movea.w	#-$10,a3
000155BA 3C3C 1000                  		move.w	#$1000,d6
000155BE 7A0E                       		moveq	#$E,d5
000155C0 6100 FA0A                  		bsr.w	FindFloor
000155C4 1638 F768                  		move.b	($FFFFF768).w,d3
000155C8 0803 0000                  		btst	#0,d3
000155CC 6700                       		beq.s	locret_14FD4
000155CE 163C 0080                  		move.b	#-$80,d3
000155D2                            
000155D2                            locret_14FD4:
000155D2 4E75                       		rts	
000155D4                            ; End of function ObjHitCeiling
000155D4                            
000155D4                            ; ===========================================================================
000155D4                            
000155D4                            loc_14FD6:				; XREF: sub_14D48
000155D4 3428 000C                  		move.w	$C(a0),d2
000155D8 3628 0008                  		move.w	8(a0),d3
000155DC 7000                       		moveq	#0,d0
000155DE 1028 0017                  		move.b	$17(a0),d0
000155E2 4880                       		ext.w	d0
000155E4 9440                       		sub.w	d0,d2
000155E6 1028 0016                  		move.b	$16(a0),d0
000155EA 4880                       		ext.w	d0
000155EC 9640                       		sub.w	d0,d3
000155EE 0A43 000F                  		eori.w	#$F,d3
000155F2 49F8 F768                  		lea	($FFFFF768).w,a4
000155F6 367C FFF0                  		movea.w	#-$10,a3
000155FA 3C3C 0800                  		move.w	#$800,d6
000155FE 7A0E                       		moveq	#$E,d5
00015600 6100 FB08                  		bsr.w	FindWall
00015604 3F01                       		move.w	d1,-(sp)
00015606 3428 000C                  		move.w	$C(a0),d2
0001560A 3628 0008                  		move.w	8(a0),d3
0001560E 7000                       		moveq	#0,d0
00015610 1028 0017                  		move.b	$17(a0),d0
00015614 4880                       		ext.w	d0
00015616 D440                       		add.w	d0,d2
00015618 1028 0016                  		move.b	$16(a0),d0
0001561C 4880                       		ext.w	d0
0001561E 9640                       		sub.w	d0,d3
00015620 0A43 000F                  		eori.w	#$F,d3
00015624 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015628 367C FFF0                  		movea.w	#-$10,a3
0001562C 3C3C 0800                  		move.w	#$800,d6
00015630 7A0E                       		moveq	#$E,d5
00015632 6100 FAD6                  		bsr.w	FindWall
00015636 301F                       		move.w	(sp)+,d0
00015638 143C 0040                  		move.b	#$40,d2
0001563C 6000 FD90                  		bra.w	loc_14DD0
00015640                            
00015640                            ; ---------------------------------------------------------------------------
00015640                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015640                            ; ---------------------------------------------------------------------------
00015640                            
00015640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015640                            
00015640                            
00015640                            Sonic_HitWall:				; XREF: Sonic_Floor
00015640 3428 000C                  		move.w	$C(a0),d2
00015644 3628 0008                  		move.w	8(a0),d3
00015648                            
00015648                            loc_1504A:
00015648 0443 000A                  		subi.w	#$A,d3
0001564C 0A43 000F                  		eori.w	#$F,d3
00015650 49F8 F768                  		lea	($FFFFF768).w,a4
00015654 367C FFF0                  		movea.w	#-$10,a3
00015658 3C3C 0800                  		move.w	#$800,d6
0001565C 7A0E                       		moveq	#$E,d5
0001565E 6100 FAAA                  		bsr.w	FindWall
00015662 143C 0040                  		move.b	#$40,d2
00015666 6000 FDA0                  		bra.w	loc_14E0A
0001566A                            ; End of function Sonic_HitWall
0001566A                            
0001566A                            ; ---------------------------------------------------------------------------
0001566A                            ; Subroutine to	detect when an object hits a wall to its left
0001566A                            ; ---------------------------------------------------------------------------
0001566A                            
0001566A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001566A                            
0001566A                            
0001566A                            ObjHitWallLeft:
0001566A D668 0008                  		add.w	8(a0),d3
0001566E 3428 000C                  		move.w	$C(a0),d2
00015672 49F8 F768                  		lea	($FFFFF768).w,a4
00015676 18BC 0000                  		move.b	#0,(a4)
0001567A 367C FFF0                  		movea.w	#-$10,a3
0001567E 3C3C 0800                  		move.w	#$800,d6
00015682 7A0E                       		moveq	#$E,d5
00015684 6100 FA84                  		bsr.w	FindWall
00015688 1638 F768                  		move.b	($FFFFF768).w,d3
0001568C 0803 0000                  		btst	#0,d3
00015690 6700                       		beq.s	locret_15098
00015692 163C 0040                  		move.b	#$40,d3
00015696                            
00015696                            locret_15098:
00015696 4E75                       		rts	
00015698                            ; End of function ObjHitWallLeft
00015698                            
00015698                            ; ===========================================================================
00015698                            ; ---------------------------------------------------------------------------
00015698                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015698                            ; ---------------------------------------------------------------------------
00015698                            
00015698                            Obj66:					; XREF: Obj_Index
00015698 7000                       		moveq	#0,d0
0001569A 1028 0024                  		move.b	$24(a0),d0
0001569E 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000156A2 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000156A6                            ; ===========================================================================
000156A6 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000156A8 0000                       		dc.w Obj66_Action-Obj66_Index
000156AA 0000                       		dc.w Obj66_Display-Obj66_Index
000156AC 0000                       		dc.w Obj66_Release-Obj66_Index
000156AE                            ; ===========================================================================
000156AE                            
000156AE                            Obj66_Main:				; XREF: Obj66_Index
000156AE 5428 0024                  		addq.b	#2,$24(a0)
000156B2 323C 0001                  		move.w	#1,d1
000156B6 2248                       		movea.l	a0,a1
000156B8 6000                       		bra.s	Obj66_MakeItem
000156BA                            ; ===========================================================================
000156BA                            
000156BA                            Obj66_Loop:
000156BA 6100 893C                  		bsr.w	SingleObjLoad
000156BE 6600                       		bne.s	loc_150FE
000156C0 12BC 0066                  		move.b	#$66,0(a1)
000156C4 5829 0024                  		addq.b	#4,$24(a1)
000156C8 3368 0008 0008             		move.w	8(a0),8(a1)
000156CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000156D4 137C 0003 0018             		move.b	#3,$18(a1)
000156DA 137C 0010 001A             		move.b	#$10,$1A(a1)
000156E0                            
000156E0                            Obj66_MakeItem:				; XREF: Obj66_Main
000156E0 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000156E8 337C 4348 0002             		move.w	#$4348,2(a1)
000156EE 0029 0004 0001             		ori.b	#4,1(a1)
000156F4 137C 0038 0019             		move.b	#$38,$19(a1)
000156FA                            
000156FA                            loc_150FE:
000156FA 51C9 FFBE                  		dbf	d1,Obj66_Loop
000156FE                            
000156FE 117C 0030 0019             		move.b	#$30,$19(a0)
00015704 117C 0004 0018             		move.b	#4,$18(a0)
0001570A 317C 003C 0030             		move.w	#$3C,$30(a0)
00015710 117C 0001 0034             		move.b	#1,$34(a0)
00015716 1168 0028 0038             		move.b	$28(a0),$38(a0)
0001571C                            
0001571C                            Obj66_Action:				; XREF: Obj66_Index
0001571C 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015720 4A28 0001                  		tst.b	1(a0)
00015724 6A00 0000                  		bpl.w	Obj66_Display
00015728 323C 0030                  		move.w	#$30,d1
0001572C 3401                       		move.w	d1,d2
0001572E 3602                       		move.w	d2,d3
00015730 5243                       		addq.w	#1,d3
00015732 3828 0008                  		move.w	8(a0),d4
00015736 6100 A80A                  		bsr.w	SolidObject
0001573A 0828 0005 0022             		btst	#5,$22(a0)
00015740 6700 0000                  		beq.w	Obj66_Display
00015744 43F8 D000                  		lea	($FFFFD000).w,a1
00015748 720E                       		moveq	#$E,d1
0001574A 3029 0008                  		move.w	8(a1),d0
0001574E B068 0008                  		cmp.w	8(a0),d0
00015752 6500                       		bcs.s	Obj66_GrabSonic
00015754 7207                       		moveq	#7,d1
00015756                            
00015756                            Obj66_GrabSonic:
00015756 B228 001A                  		cmp.b	$1A(a0),d1
0001575A 6600                       		bne.s	Obj66_Display
0001575C 1141 0032                  		move.b	d1,$32(a0)
00015760 5828 0024                  		addq.b	#4,$24(a0)
00015764 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001576A 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015770 337C 0800 0014             		move.w	#$800,$14(a1)
00015776 337C 0000 0010             		move.w	#0,$10(a1)
0001577C 337C 0000 0012             		move.w	#0,$12(a1)
00015782 08A8 0005 0022             		bclr	#5,$22(a0)
00015788 08A9 0005 0022             		bclr	#5,$22(a1)
0001578E 08E9 0001 0022             		bset	#1,$22(a1)
00015794 3429 0008                  		move.w	8(a1),d2
00015798 3629 000C                  		move.w	$C(a1),d3
0001579C 6100 0000                  		bsr.w	Obj66_ChgPos
000157A0 D569 0008                  		add.w	d2,8(a1)
000157A4 D769 000C                  		add.w	d3,$C(a1)
000157A8 E0E9 0008                  		asr	8(a1)
000157AC E0E9 000C                  		asr	$C(a1)
000157B0                            
000157B0                            Obj66_Display:				; XREF: Obj66_Index
000157B0 6000 A468                  		bra.w	MarkObjGone
000157B4                            ; ===========================================================================
000157B4                            
000157B4                            Obj66_Release:				; XREF: Obj66_Index
000157B4 1028 001A                  		move.b	$1A(a0),d0
000157B8 0C00 0004                  		cmpi.b	#4,d0
000157BC 6700                       		beq.s	loc_151C8
000157BE 0C00 0007                  		cmpi.b	#7,d0
000157C2 6600                       		bne.s	loc_151F8
000157C4                            
000157C4                            loc_151C8:
000157C4 B028 0032                  		cmp.b	$32(a0),d0
000157C8 6700                       		beq.s	loc_151F8
000157CA 43F8 D000                  		lea	($FFFFD000).w,a1
000157CE 337C 0000 0010             		move.w	#0,$10(a1)
000157D4 337C 0800 0012             		move.w	#$800,$12(a1)
000157DA 0C00 0004                  		cmpi.b	#4,d0
000157DE 6700                       		beq.s	loc_151F0
000157E0 337C 0800 0010             		move.w	#$800,$10(a1)
000157E6 337C 0800 0012             		move.w	#$800,$12(a1)
000157EC                            
000157EC                            loc_151F0:
000157EC 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000157F0 5928 0024                  		subq.b	#4,$24(a0)
000157F4                            
000157F4                            loc_151F8:
000157F4 6100                       		bsr.s	Obj66_ChkSwitch
000157F6 6100                       		bsr.s	Obj66_ChgPos
000157F8 6000 A420                  		bra.w	MarkObjGone
000157FC                            
000157FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157FC                            
000157FC                            
000157FC                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000157FC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015800 7000                       		moveq	#0,d0
00015802 1028 0038                  		move.b	$38(a0),d0
00015806 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001580C 6700                       		beq.s	loc_15224	; if not, branch
0001580E 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015812 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015814 4428 0034                  		neg.b	$34(a0)
00015818 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
0001581E 6000                       		bra.s	Obj66_Animate
00015820                            ; ===========================================================================
00015820                            
00015820                            loc_15224:
00015820 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015824                            
00015824                            Obj66_Animate:
00015824 5328 001E                  		subq.b	#1,$1E(a0)
00015828 6A00                       		bpl.s	locret_15246
0001582A 117C 0007 001E             		move.b	#7,$1E(a0)
00015830 1228 0034                  		move.b	$34(a0),d1
00015834 1028 001A                  		move.b	$1A(a0),d0
00015838 D001                       		add.b	d1,d0
0001583A 0200 000F                  		andi.b	#$F,d0
0001583E 1140 001A                  		move.b	d0,$1A(a0)
00015842                            
00015842                            locret_15246:
00015842 4E75                       		rts	
00015844                            ; End of function Obj66_ChkSwitch
00015844                            
00015844                            
00015844                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015844                            
00015844                            
00015844                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015844 43F8 D000                  		lea	($FFFFD000).w,a1
00015848 7000                       		moveq	#0,d0
0001584A 1028 001A                  		move.b	$1A(a0),d0
0001584E D040                       		add.w	d0,d0
00015850 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015854 101A                       		move.b	(a2)+,d0
00015856 4880                       		ext.w	d0
00015858 D068 0008                  		add.w	8(a0),d0
0001585C 3340 0008                  		move.w	d0,8(a1)
00015860 101A                       		move.b	(a2)+,d0
00015862 4880                       		ext.w	d0
00015864 D068 000C                  		add.w	$C(a0),d0
00015868 3340 000C                  		move.w	d0,$C(a1)
0001586C 4E75                       		rts	
0001586E                            ; End of function Obj66_ChgPos
0001586E                            
0001586E                            ; ===========================================================================
0001586E E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015872 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015876 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001587A 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001587E 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015882 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015886 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001588A E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001588E                            ; ---------------------------------------------------------------------------
0001588E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001588E                            ; ---------------------------------------------------------------------------
0001588E                            Map_obj66:
0001588E                            	include "_maps\obj66.asm"
0001588E                            ; ---------------------------------------------------------------------------
0001588E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001588E                            ; ---------------------------------------------------------------------------
0001588E 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015892 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015896 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
0001589A 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001589E 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000158A2 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000158A6 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000158AA 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000158AE 0000                       		dc.w byte_154A4-Map_obj66
000158B0 06                         byte_152B4:	dc.b 6
000158B1 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000158B6 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000158BB E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000158C0 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000158C5 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000158CA 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000158CF 06                         byte_152D3:	dc.b 6
000158D0 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000158D5 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000158DA F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000158DF F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000158E4 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000158E9 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000158EE 06                         byte_152F2:	dc.b 6
000158EF 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000158F4 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000158F9 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000158FE 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015903 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015908 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001590D 06                         byte_15311:	dc.b 6
0001590E 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015913 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015918 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001591D 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015922 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015927 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001592C 06                         byte_15330:	dc.b 6
0001592D 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015932 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015937 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001593C 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015941 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015946 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001594B 06                         byte_1534F:	dc.b 6
0001594C 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015951 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015956 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001595B 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015960 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015965 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001596A 06                         byte_1536E:	dc.b 6
0001596B 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015970 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015975 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001597A 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001597F 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015984 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015989 06                         byte_1538D:	dc.b 6
0001598A 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001598F F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015994 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015999 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001599E 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000159A3 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000159A8 06                         byte_153AC:	dc.b 6
000159A9 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000159AE 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000159B3 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000159B8 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000159BD 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000159C2 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000159C7 06                         byte_153CB:	dc.b 6
000159C8 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000159CD E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000159D2 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000159D7 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000159DC F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000159E1 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000159E6 06                         byte_153EA:	dc.b 6
000159E7 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000159EC E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000159F1 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000159F6 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000159FB E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015A00 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015A05 06                         byte_15409:	dc.b 6
00015A06 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015A0B D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015A10 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015A15 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015A1A E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015A1F E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015A24 06                         byte_15428:	dc.b 6
00015A25 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015A2A D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015A2F C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015A34 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015A39 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015A3E E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015A43 06                         byte_15447:	dc.b 6
00015A44 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015A49 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015A4E CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015A53 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015A58 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015A5D E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015A62 06                         byte_15466:	dc.b 6
00015A63 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015A68 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015A6D D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015A72 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015A77 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015A7C E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015A81 06                         byte_15485:	dc.b 6
00015A82 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015A87 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015A8C DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015A91 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015A96 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015A9B F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015AA0 0C                         byte_154A4:	dc.b $C
00015AA1 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015AA6 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015AAB E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015AB0 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015AB5 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015ABA E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015ABF 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015AC4 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015AC9 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015ACE 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015AD3 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015AD8 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015ADE 00                         		even
00015ADE 00                         		even
00015ADE                            
00015ADE                            ; ===========================================================================
00015ADE                            ; ---------------------------------------------------------------------------
00015ADE                            ; Object 67 - disc that	you run	around (SBZ)
00015ADE                            ; ---------------------------------------------------------------------------
00015ADE                            
00015ADE                            Obj67:					; XREF: Obj_Index
00015ADE 7000                       		moveq	#0,d0
00015AE0 1028 0024                  		move.b	$24(a0),d0
00015AE4 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015AE8 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015AEC                            ; ===========================================================================
00015AEC 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015AEE 0000                       		dc.w Obj67_Action-Obj67_Index
00015AF0                            ; ===========================================================================
00015AF0                            
00015AF0                            Obj67_Main:				; XREF: Obj67_Index
00015AF0 5428 0024                  		addq.b	#2,$24(a0)
00015AF4 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015AFC 317C C344 0002             		move.w	#$C344,2(a0)
00015B02 117C 0004 0001             		move.b	#4,1(a0)
00015B08 117C 0004 0018             		move.b	#4,$18(a0)
00015B0E 117C 0008 0019             		move.b	#8,$19(a0)
00015B14 3168 0008 0032             		move.w	8(a0),$32(a0)
00015B1A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015B20 117C 0018 0034             		move.b	#$18,$34(a0)
00015B26 117C 0048 0038             		move.b	#$48,$38(a0)
00015B2C 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B30 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015B34 6700                       		beq.s	loc_15546
00015B36 117C 0010 0034             		move.b	#$10,$34(a0)
00015B3C 117C 0038 0038             		move.b	#$38,$38(a0)
00015B42                            
00015B42                            loc_15546:
00015B42 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B46 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015B4A 4881                       		ext.w	d1
00015B4C E741                       		asl.w	#3,d1
00015B4E 3141 0036                  		move.w	d1,$36(a0)
00015B52 1028 0022                  		move.b	$22(a0),d0
00015B56 E418                       		ror.b	#2,d0
00015B58 0200 00C0                  		andi.b	#-$40,d0
00015B5C 1140 0026                  		move.b	d0,$26(a0)
00015B60                            
00015B60                            Obj67_Action:				; XREF: Obj67_Index
00015B60 6100 0000                  		bsr.w	Obj67_MoveSonic
00015B64 6100 0000                  		bsr.w	Obj67_MoveSpot
00015B68 6000 0000                  		bra.w	Obj67_ChkDel
00015B6C                            ; ===========================================================================
00015B6C                            
00015B6C                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015B6C 7400                       		moveq	#0,d2
00015B6E 1428 0038                  		move.b	$38(a0),d2
00015B72 3602                       		move.w	d2,d3
00015B74 D643                       		add.w	d3,d3
00015B76 43F8 D000                  		lea	($FFFFD000).w,a1
00015B7A 3029 0008                  		move.w	8(a1),d0
00015B7E 9068 0032                  		sub.w	$32(a0),d0
00015B82 D042                       		add.w	d2,d0
00015B84 B043                       		cmp.w	d3,d0
00015B86 6400                       		bcc.s	loc_155A8
00015B88 3229 000C                  		move.w	$C(a1),d1
00015B8C 9268 0030                  		sub.w	$30(a0),d1
00015B90 D242                       		add.w	d2,d1
00015B92 B243                       		cmp.w	d3,d1
00015B94 6400                       		bcc.s	loc_155A8
00015B96 0829 0001 0022             		btst	#1,$22(a1)
00015B9C 6700                       		beq.s	loc_155B8
00015B9E 4228 003A                  		clr.b	$3A(a0)
00015BA2 4E75                       		rts	
00015BA4                            ; ===========================================================================
00015BA4                            
00015BA4                            loc_155A8:
00015BA4 4A28 003A                  		tst.b	$3A(a0)
00015BA8 6700                       		beq.s	locret_155B6
00015BAA 4229 0038                  		clr.b	$38(a1)
00015BAE 4228 003A                  		clr.b	$3A(a0)
00015BB2                            
00015BB2                            locret_155B6:
00015BB2 4E75                       		rts	
00015BB4                            ; ===========================================================================
00015BB4                            
00015BB4                            loc_155B8:
00015BB4 4A28 003A                  		tst.b	$3A(a0)
00015BB8 6600                       		bne.s	loc_155E2
00015BBA 117C 0001 003A             		move.b	#1,$3A(a0)
00015BC0 0829 0002 0022             		btst	#2,$22(a1)
00015BC6 6600                       		bne.s	loc_155D0
00015BC8 4229 001C                  		clr.b	$1C(a1)
00015BCC                            
00015BCC                            loc_155D0:
00015BCC 08A9 0005 0022             		bclr	#5,$22(a1)
00015BD2 137C 0001 001D             		move.b	#1,$1D(a1)
00015BD8 137C 0001 0038             		move.b	#1,$38(a1)
00015BDE                            
00015BDE                            loc_155E2:
00015BDE 3029 0014                  		move.w	$14(a1),d0
00015BE2 4A68 0036                  		tst.w	$36(a0)
00015BE6 6A00                       		bpl.s	loc_15608
00015BE8 0C40 FC00                  		cmpi.w	#-$400,d0
00015BEC 6F00                       		ble.s	loc_155FA
00015BEE 337C FC00 0014             		move.w	#-$400,$14(a1)
00015BF4 4E75                       		rts	
00015BF6                            ; ===========================================================================
00015BF6                            
00015BF6                            loc_155FA:
00015BF6 0C40 F100                  		cmpi.w	#-$F00,d0
00015BFA 6C00                       		bge.s	locret_15606
00015BFC 337C F100 0014             		move.w	#-$F00,$14(a1)
00015C02                            
00015C02                            locret_15606:
00015C02 4E75                       		rts	
00015C04                            ; ===========================================================================
00015C04                            
00015C04                            loc_15608:
00015C04 0C40 0400                  		cmpi.w	#$400,d0
00015C08 6C00                       		bge.s	loc_15616
00015C0A 337C 0400 0014             		move.w	#$400,$14(a1)
00015C10 4E75                       		rts	
00015C12                            ; ===========================================================================
00015C12                            
00015C12                            loc_15616:
00015C12 0C40 0F00                  		cmpi.w	#$F00,d0
00015C16 6F00                       		ble.s	locret_15622
00015C18 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015C1E                            
00015C1E                            locret_15622:
00015C1E 4E75                       		rts	
00015C20                            ; ===========================================================================
00015C20                            
00015C20                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015C20 3028 0036                  		move.w	$36(a0),d0
00015C24 D168 0026                  		add.w	d0,$26(a0)
00015C28 1028 0026                  		move.b	$26(a0),d0
00015C2C 4EB9 0000 2C22             		jsr	(CalcSine).l
00015C32 3428 0030                  		move.w	$30(a0),d2
00015C36 3628 0032                  		move.w	$32(a0),d3
00015C3A 7800                       		moveq	#0,d4
00015C3C 1828 0034                  		move.b	$34(a0),d4
00015C40 E14C                       		lsl.w	#8,d4
00015C42 2A04                       		move.l	d4,d5
00015C44 C9C0                       		muls.w	d0,d4
00015C46 4844                       		swap	d4
00015C48 CBC1                       		muls.w	d1,d5
00015C4A 4845                       		swap	d5
00015C4C D842                       		add.w	d2,d4
00015C4E DA43                       		add.w	d3,d5
00015C50 3144 000C                  		move.w	d4,$C(a0)
00015C54 3145 0008                  		move.w	d5,8(a0)
00015C58 4E75                       		rts	
00015C5A                            ; ===========================================================================
00015C5A                            
00015C5A                            Obj67_ChkDel:				; XREF: Obj67_Action
00015C5A 3028 0032                  		move.w	$32(a0),d0
00015C5E 0240 FF80                  		andi.w	#-$80,d0
00015C62 3238 F700                  		move.w	($FFFFF700).w,d1
00015C66 0441 0080                  		subi.w	#$80,d1
00015C6A 0241 FF80                  		andi.w	#-$80,d1
00015C6E 9041                       		sub.w	d1,d0
00015C70 0C40 0280                  		cmpi.w	#$280,d0
00015C74 6200                       		bhi.s	Obj67_Delete
00015C76 4EF9 0000 DB72             		jmp	DisplaySprite
00015C7C                            ; ===========================================================================
00015C7C                            
00015C7C                            Obj67_Delete:
00015C7C 4EF9 0000 DBAE             		jmp	DeleteObject
00015C82                            ; ===========================================================================
00015C82                            ; ---------------------------------------------------------------------------
00015C82                            ; Sprite mappings - disc that you run around (SBZ)
00015C82                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C82                            ; part of the level tiles.)
00015C82                            ; ---------------------------------------------------------------------------
00015C82                            Map_obj67:
00015C82                            	include "_maps\obj67.asm"
00015C82                            ; ---------------------------------------------------------------------------
00015C82                            ; Sprite mappings - disc that you run around (SBZ)
00015C82                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C82                            ; part of the level tiles.)
00015C82                            ; ---------------------------------------------------------------------------
00015C82 0000                       		dc.w byte_15688-Map_obj67
00015C84 01                         byte_15688:	dc.b 1
00015C85 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015C8A                            		even
00015C8A                            		even
00015C8A                            
00015C8A                            ; ===========================================================================
00015C8A                            ; ---------------------------------------------------------------------------
00015C8A                            ; Object 68 - conveyor belts (SBZ)
00015C8A                            ; ---------------------------------------------------------------------------
00015C8A                            
00015C8A                            Obj68:					; XREF: Obj_Index
00015C8A 7000                       		moveq	#0,d0
00015C8C 1028 0024                  		move.b	$24(a0),d0
00015C90 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015C94 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015C98                            ; ===========================================================================
00015C98 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015C9A 0000                       		dc.w Obj68_Action-Obj68_Index
00015C9C                            ; ===========================================================================
00015C9C                            
00015C9C                            Obj68_Main:				; XREF: Obj68_Index
00015C9C 5428 0024                  		addq.b	#2,$24(a0)
00015CA0 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015CA6 1228 0028                  		move.b	$28(a0),d1	; get object type
00015CAA 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015CAE 6700                       		beq.s	loc_156BA	; if zero, branch
00015CB0 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015CB6                            
00015CB6                            loc_156BA:
00015CB6 1228 0028                  		move.b	$28(a0),d1	; get object type
00015CBA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015CBE 4881                       		ext.w	d1
00015CC0 E841                       		asr.w	#4,d1
00015CC2 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015CC6                            
00015CC6                            Obj68_Action:				; XREF: Obj68_Index
00015CC6 6100                       		bsr.s	Obj68_MoveSonic
00015CC8 3028 0008                  		move.w	8(a0),d0
00015CCC 0240 FF80                  		andi.w	#$FF80,d0
00015CD0 3238 F700                  		move.w	($FFFFF700).w,d1
00015CD4 0441 0080                  		subi.w	#$80,d1
00015CD8 0241 FF80                  		andi.w	#$FF80,d1
00015CDC 9041                       		sub.w	d1,d0
00015CDE 0C40 0280                  		cmpi.w	#$280,d0
00015CE2 6200                       		bhi.s	Obj68_Delete
00015CE4 4E75                       		rts	
00015CE6                            ; ===========================================================================
00015CE6                            
00015CE6                            Obj68_Delete:
00015CE6 4EF9 0000 DBAE             		jmp	DeleteObject
00015CEC                            ; ===========================================================================
00015CEC                            
00015CEC                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015CEC 7400                       		moveq	#0,d2
00015CEE 1428 0038                  		move.b	$38(a0),d2
00015CF2 3602                       		move.w	d2,d3
00015CF4 D643                       		add.w	d3,d3
00015CF6 43F8 D000                  		lea	($FFFFD000).w,a1
00015CFA 3029 0008                  		move.w	8(a1),d0
00015CFE 9068 0008                  		sub.w	8(a0),d0
00015D02 D042                       		add.w	d2,d0
00015D04 B043                       		cmp.w	d3,d0
00015D06 6400                       		bcc.s	locret_1572E
00015D08 3229 000C                  		move.w	$C(a1),d1
00015D0C 9268 000C                  		sub.w	$C(a0),d1
00015D10 0641 0030                  		addi.w	#$30,d1
00015D14 0C41 0030                  		cmpi.w	#$30,d1
00015D18 6400                       		bcc.s	locret_1572E
00015D1A 0829 0001 0022             		btst	#1,$22(a1)
00015D20 6600                       		bne.s	locret_1572E
00015D22 3028 0036                  		move.w	$36(a0),d0
00015D26 D169 0008                  		add.w	d0,8(a1)
00015D2A                            
00015D2A                            locret_1572E:
00015D2A 4E75                       		rts	
00015D2C                            
00015D2C                            ; ===========================================================================
00015D2C                            ; ---------------------------------------------------------------------------
00015D2C                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015D2C                            ; ---------------------------------------------------------------------------
00015D2C                            
00015D2C                            Obj69:					; XREF: Obj_Index
00015D2C 7000                       		moveq	#0,d0
00015D2E 1028 0024                  		move.b	$24(a0),d0
00015D32 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015D36 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015D3A                            ; ===========================================================================
00015D3A 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015D3C 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015D3E 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015D40                            ; ===========================================================================
00015D40                            
00015D40                            Obj69_Main:				; XREF: Obj69_Index
00015D40 5428 0024                  		addq.b	#2,$24(a0)
00015D44 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015D4C 317C 4492 0002             		move.w	#$4492,2(a0)
00015D52 0028 0004 0001             		ori.b	#4,1(a0)
00015D58 117C 0080 0019             		move.b	#$80,$19(a0)
00015D5E 7000                       		moveq	#0,d0
00015D60 1028 0028                  		move.b	$28(a0),d0
00015D64 0240 000F                  		andi.w	#$F,d0
00015D68 C0FC 003C                  		mulu.w	#$3C,d0
00015D6C 3140 0032                  		move.w	d0,$32(a0)
00015D70 4A28 0028                  		tst.b	$28(a0)
00015D74 6A00                       		bpl.s	Obj69_Trapdoor
00015D76 5428 0024                  		addq.b	#2,$24(a0)
00015D7A 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015D82 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015D88 117C 0010 0019             		move.b	#$10,$19(a0)
00015D8E 117C 0002 001C             		move.b	#2,$1C(a0)
00015D94 7000                       		moveq	#0,d0
00015D96 1028 0028                  		move.b	$28(a0),d0	; get object type
00015D9A 3200                       		move.w	d0,d1
00015D9C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015DA0 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015DA4 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015DA8 3140 0032                  		move.w	d0,$32(a0)
00015DAC 0241 0070                  		andi.w	#$70,d1
00015DB0 0641 0010                  		addi.w	#$10,d1
00015DB4 E549                       		lsl.w	#2,d1
00015DB6 5341                       		subq.w	#1,d1
00015DB8 3141 0036                  		move.w	d1,$36(a0)
00015DBC 6000                       		bra.s	Obj69_Spinner
00015DBE                            ; ===========================================================================
00015DBE                            
00015DBE                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015DBE 5368 0030                  		subq.w	#1,$30(a0)
00015DC2 6A00                       		bpl.s	Obj69_Animate
00015DC4 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015DCA 0868 0000 001C             		bchg	#0,$1C(a0)
00015DD0 4A28 0001                  		tst.b	1(a0)
00015DD4 6A00                       		bpl.s	Obj69_Animate
00015DD6 303C 00BB                  		move.w	#$BB,d0
00015DDA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00015DE0                            
00015DE0                            Obj69_Animate:
00015DE0 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015DE6 4EB9 0000 AC42             		jsr	AnimateSprite
00015DEC 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015DF0 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015DF2 323C 004B                  		move.w	#$4B,d1
00015DF6 343C 000C                  		move.w	#$C,d2
00015DFA 3602                       		move.w	d2,d3
00015DFC 5243                       		addq.w	#1,d3
00015DFE 3828 0008                  		move.w	8(a0),d4
00015E02 6100 A13E                  		bsr.w	SolidObject
00015E06 6000 9E12                  		bra.w	MarkObjGone
00015E0A                            ; ===========================================================================
00015E0A                            
00015E0A                            Obj69_NotSolid:
00015E0A 0828 0003 0022             		btst	#3,$22(a0)
00015E10 6700                       		beq.s	Obj69_Display
00015E12 43F8 D000                  		lea	($FFFFD000).w,a1
00015E16 08A9 0003 0022             		bclr	#3,$22(a1)
00015E1C 08A8 0003 0022             		bclr	#3,$22(a0)
00015E22 4228 0025                  		clr.b	$25(a0)
00015E26                            
00015E26                            Obj69_Display:
00015E26 6000 9DF2                  		bra.w	MarkObjGone
00015E2A                            ; ===========================================================================
00015E2A                            
00015E2A                            Obj69_Spinner:				; XREF: Obj69_Index
00015E2A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015E2E C068 0036                  		and.w	$36(a0),d0
00015E32 6600                       		bne.s	Obj69_Delay
00015E34 117C 0001 0034             		move.b	#1,$34(a0)
00015E3A                            
00015E3A                            Obj69_Delay:
00015E3A 4A28 0034                  		tst.b	$34(a0)
00015E3E 6700                       		beq.s	Obj69_Animate2
00015E40 5368 0030                  		subq.w	#1,$30(a0)
00015E44 6A00                       		bpl.s	Obj69_Animate2
00015E46 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015E4C 4228 0034                  		clr.b	$34(a0)
00015E50 0868 0000 001C             		bchg	#0,$1C(a0)
00015E56                            
00015E56                            Obj69_Animate2:
00015E56 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015E5C 4EB9 0000 AC42             		jsr	AnimateSprite
00015E62 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015E66 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015E68 323C 001B                  		move.w	#$1B,d1
00015E6C 343C 0007                  		move.w	#7,d2
00015E70 3602                       		move.w	d2,d3
00015E72 5243                       		addq.w	#1,d3
00015E74 3828 0008                  		move.w	8(a0),d4
00015E78 6100 A0C8                  		bsr.w	SolidObject
00015E7C 6000 9D9C                  		bra.w	MarkObjGone
00015E80                            ; ===========================================================================
00015E80                            
00015E80                            Obj69_NotSolid2:
00015E80 0828 0003 0022             		btst	#3,$22(a0)
00015E86 6700                       		beq.s	Obj69_Display2
00015E88 43F8 D000                  		lea	($FFFFD000).w,a1
00015E8C 08A9 0003 0022             		bclr	#3,$22(a1)
00015E92 08A8 0003 0022             		bclr	#3,$22(a0)
00015E98 4228 0025                  		clr.b	$25(a0)
00015E9C                            
00015E9C                            Obj69_Display2:
00015E9C 6000 9D7C                  		bra.w	MarkObjGone
00015EA0                            ; ===========================================================================
00015EA0                            Ani_obj69:
00015EA0                            	include "_anim\obj69.asm"
00015EA0                            ; ---------------------------------------------------------------------------
00015EA0                            ; Animation script - trapdoor (SBZ)
00015EA0                            ; ---------------------------------------------------------------------------
00015EA0 0000                       		dc.w byte_158AC-Ani_obj69
00015EA2 0000                       		dc.w byte_158B2-Ani_obj69
00015EA4 0000                       		dc.w byte_158B8-Ani_obj69
00015EA6 0000                       		dc.w byte_158CC-Ani_obj69
00015EA8 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015EAE 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015EB4 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015EC1 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015EC8 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015ED5 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015EDC                            		even
00015EDC                            		even
00015EDC                            
00015EDC                            ; ---------------------------------------------------------------------------
00015EDC                            ; Sprite mappings - trapdoor (SBZ)
00015EDC                            ; ---------------------------------------------------------------------------
00015EDC                            Map_obj69:
00015EDC                            	include "_maps\obj69.asm"
00015EDC                            ; ---------------------------------------------------------------------------
00015EDC                            ; Sprite mappings - trapdoor (SBZ)
00015EDC                            ; ---------------------------------------------------------------------------
00015EDC 0000                       		dc.w byte_158E6-Map_obj69
00015EDE 0000                       		dc.w byte_158FB-Map_obj69
00015EE0 0000                       		dc.w byte_15924-Map_obj69
00015EE2 04                         byte_158E6:	dc.b 4
00015EE3 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015EE8 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015EED F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015EF2 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015EF7 08                         byte_158FB:	dc.b 8
00015EF8 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015EFD 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015F02 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015F07 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015F0C F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015F11 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015F16 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015F1B 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015F20 04                         byte_15924:	dc.b 4
00015F21 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015F26 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015F2B 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015F30 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015F36 00                         		even
00015F36 00                         		even
00015F36                            
00015F36                            ; ---------------------------------------------------------------------------
00015F36                            ; Sprite mappings - spinning platforms (SBZ)
00015F36                            ; ---------------------------------------------------------------------------
00015F36                            Map_obj69a:
00015F36                            	include "_maps\obj69a.asm"
00015F36                            ; ---------------------------------------------------------------------------
00015F36                            ; Sprite mappings - spinning platforms (SBZ)
00015F36                            ; ---------------------------------------------------------------------------
00015F36 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015F3A 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015F3E 0000                       		dc.w byte_15970-Map_obj69a
00015F40 02                         byte_15944:	dc.b 2
00015F41 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015F46 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015F4B 02                         byte_1594F:	dc.b 2
00015F4C F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015F51 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015F56 02                         byte_1595A:	dc.b 2
00015F57 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015F5C 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015F61 02                         byte_15965:	dc.b 2
00015F62 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015F67 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015F6C 02                         byte_15970:	dc.b 2
00015F6D F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015F72 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015F78 00                         		even
00015F78 00                         		even
00015F78                            
00015F78                            ; ===========================================================================
00015F78                            ; ---------------------------------------------------------------------------
00015F78                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015F78                            ; ---------------------------------------------------------------------------
00015F78                            
00015F78                            Obj6A:					; XREF: Obj_Index
00015F78 7000                       		moveq	#0,d0
00015F7A 1028 0024                  		move.b	$24(a0),d0
00015F7E 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015F82 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015F86                            ; ===========================================================================
00015F86 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015F88 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015F8A                            ; ===========================================================================
00015F8A                            
00015F8A                            Obj6A_Main:				; XREF: Obj6A_Index
00015F8A 5428 0024                  		addq.b	#2,$24(a0)
00015F8E 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015F96 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015F9C 117C 0004 0001             		move.b	#4,1(a0)
00015FA2 117C 0004 0018             		move.b	#4,$18(a0)
00015FA8 117C 0020 0019             		move.b	#$20,$19(a0)
00015FAE 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015FB4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015FBA 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015FC0 6400                       		bcc.s	Obj6A_Action
00015FC2 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015FC8                            
00015FC8                            Obj6A_Action:				; XREF: Obj6A_Index
00015FC8 7000                       		moveq	#0,d0
00015FCA 1028 0028                  		move.b	$28(a0),d0
00015FCE 0240 0007                  		andi.w	#7,d0
00015FD2 D040                       		add.w	d0,d0
00015FD4 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015FD8 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015FDC 3028 003A                  		move.w	$3A(a0),d0
00015FE0 0240 FF80                  		andi.w	#$FF80,d0
00015FE4 3238 F700                  		move.w	($FFFFF700).w,d1
00015FE8 0441 0080                  		subi.w	#$80,d1
00015FEC 0241 FF80                  		andi.w	#$FF80,d1
00015FF0 9041                       		sub.w	d1,d0
00015FF2 0C40 0280                  		cmpi.w	#$280,d0
00015FF6 6200                       		bhi.s	Obj6A_Delete
00015FF8 4EF9 0000 DB72             		jmp	DisplaySprite
00015FFE                            ; ===========================================================================
00015FFE                            
00015FFE                            Obj6A_Delete:
00015FFE 4EF9 0000 DBAE             		jmp	DeleteObject
00016004                            ; ===========================================================================
00016004 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016008 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
0001600C 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
0001600E                            ; ===========================================================================
0001600E                            
0001600E                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
0001600E 4E75                       		rts	
00016010                            ; ===========================================================================
00016010                            
00016010                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016010 323C 0060                  		move.w	#$60,d1
00016014 7000                       		moveq	#0,d0
00016016 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001601A 0828 0000 0022             		btst	#0,$22(a0)
00016020 6700                       		beq.s	Obj6A_Animate01
00016022 4440                       		neg.w	d0
00016024 D041                       		add.w	d1,d0
00016026                            
00016026                            Obj6A_Animate01:
00016026 3228 003A                  		move.w	$3A(a0),d1
0001602A 9240                       		sub.w	d0,d1
0001602C 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016030 5328 001E                  		subq.b	#1,$1E(a0)
00016034 6A00                       		bpl.s	loc_15A46
00016036 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001603C 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016042                            
00016042                            loc_15A46:
00016042 4A28 0001                  		tst.b	1(a0)
00016046 6A00                       		bpl.s	locret_15A60
00016048 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001604C 0240 000F                  		andi.w	#$F,d0
00016050 6600                       		bne.s	locret_15A60
00016052 303C 00B0                  		move.w	#$B0,d0
00016056 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
0001605C                            
0001605C                            locret_15A60:
0001605C 4E75                       		rts	
0001605E                            ; ===========================================================================
0001605E                            
0001605E                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001605E 323C 0030                  		move.w	#$30,d1
00016062 7000                       		moveq	#0,d0
00016064 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016068 0828 0000 0022             		btst	#0,$22(a0)
0001606E 6700                       		beq.s	Obj6A_Animate02
00016070 4440                       		neg.w	d0
00016072 0640 0080                  		addi.w	#$80,d0
00016076                            
00016076                            Obj6A_Animate02:
00016076 3228 0038                  		move.w	$38(a0),d1
0001607A 9240                       		sub.w	d0,d1
0001607C 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016080 5328 001E                  		subq.b	#1,$1E(a0)
00016084 6A00                       		bpl.s	loc_15A96
00016086 117C 0002 001E             		move.b	#2,$1E(a0)
0001608C 0868 0000 001A             		bchg	#0,$1A(a0)
00016092                            
00016092                            loc_15A96:
00016092 4A28 0001                  		tst.b	1(a0)
00016096 6A00                       		bpl.s	locret_15AB0
00016098 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001609C 0C00 0018                  		cmpi.b	#$18,d0
000160A0 6600                       		bne.s	locret_15AB0
000160A2 303C 00B0                  		move.w	#$B0,d0
000160A6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
000160AC                            
000160AC                            locret_15AB0:
000160AC 4E75                       		rts	
000160AE                            ; ===========================================================================
000160AE                            
000160AE                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000160AE 4A28 003D                  		tst.b	$3D(a0)
000160B2 6600                       		bne.s	Obj6A_Animate03
000160B4 3038 D008                  		move.w	($FFFFD008).w,d0
000160B8 0440 00C0                  		subi.w	#$C0,d0
000160BC 6500                       		bcs.s	loc_15B02
000160BE 9068 0008                  		sub.w	8(a0),d0
000160C2 6500                       		bcs.s	loc_15B02
000160C4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000160C8 0440 0080                  		subi.w	#$80,d0
000160CC B068 000C                  		cmp.w	$C(a0),d0
000160D0 6400                       		bcc.s	locret_15B04
000160D2 0640 0100                  		addi.w	#$100,d0
000160D6 B068 000C                  		cmp.w	$C(a0),d0
000160DA 6500                       		bcs.s	locret_15B04
000160DC 117C 0001 003D             		move.b	#1,$3D(a0)
000160E2 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000160E8 117C 00A2 0020             		move.b	#$A2,$20(a0)
000160EE 117C 0002 001A             		move.b	#2,$1A(a0)
000160F4 303C 00B0                  		move.w	#$B0,d0
000160F8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
000160FE                            
000160FE                            loc_15B02:
000160FE 588F                       		addq.l	#4,sp
00016100                            
00016100                            locret_15B04:
00016100 4E75                       		rts	
00016102                            ; ===========================================================================
00016102                            
00016102                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016102 4EB9 0000 DB4C             		jsr	SpeedToPos
00016108 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001610E 5328 001E                  		subq.b	#1,$1E(a0)
00016112 6A00                       		bpl.s	locret_15B24
00016114 117C 0002 001E             		move.b	#2,$1E(a0)
0001611A 0868 0000 001A             		bchg	#0,$1A(a0)
00016120                            
00016120                            locret_15B24:
00016120 4E75                       		rts	
00016122                            ; ===========================================================================
00016122                            
00016122                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016122 4A28 003D                  		tst.b	$3D(a0)
00016126 6600                       		bne.s	Obj6A_Animate04
00016128 3038 D008                  		move.w	($FFFFD008).w,d0
0001612C 0640 00E0                  		addi.w	#$E0,d0
00016130 9068 0008                  		sub.w	8(a0),d0
00016134 6400                       		bcc.s	loc_15B74
00016136 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001613A 0440 0080                  		subi.w	#$80,d0
0001613E B068 000C                  		cmp.w	$C(a0),d0
00016142 6400                       		bcc.s	locret_15B76
00016144 0640 0100                  		addi.w	#$100,d0
00016148 B068 000C                  		cmp.w	$C(a0),d0
0001614C 6500                       		bcs.s	locret_15B76
0001614E 117C 0001 003D             		move.b	#1,$3D(a0)
00016154 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001615A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016160 117C 0002 001A             		move.b	#2,$1A(a0)
00016166 303C 00B0                  		move.w	#$B0,d0
0001616A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016170                            
00016170                            loc_15B74:
00016170 588F                       		addq.l	#4,sp
00016172                            
00016172                            locret_15B76:
00016172 4E75                       		rts	
00016174                            ; ===========================================================================
00016174                            
00016174                            Obj6A_Animate04:
00016174 4EB9 0000 DB4C             		jsr	SpeedToPos
0001617A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016180 5328 001E                  		subq.b	#1,$1E(a0)
00016184 6A00                       		bpl.s	locret_15B96
00016186 117C 0002 001E             		move.b	#2,$1E(a0)
0001618C 0868 0000 001A             		bchg	#0,$1A(a0)
00016192                            
00016192                            locret_15B96:
00016192 4E75                       		rts	
00016194                            ; ===========================================================================
00016194                            ; ---------------------------------------------------------------------------
00016194                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016194                            ; ---------------------------------------------------------------------------
00016194                            Map_obj6A:
00016194                            	include "_maps\obj6A.asm"
00016194                            ; ---------------------------------------------------------------------------
00016194                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016194                            ; ---------------------------------------------------------------------------
00016194 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016198 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001619C 07                         byte_15BA0:	dc.b 7
0001619D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000161A2 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000161A7 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000161AC E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000161B1 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000161B6 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000161BB 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000161C0 07                         byte_15BC4:	dc.b 7
000161C1 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000161C6 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000161CB E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000161D0 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000161D5 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000161DA 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000161DF 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000161E4 04                         byte_15BE8:	dc.b 4
000161E5 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000161EA E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000161EF 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000161F4 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000161F9 04                         byte_15BFD:	dc.b 4
000161FA E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000161FF E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016204 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016209 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001620E                            		even
0001620E                            		even
0001620E                            
0001620E                            ; ===========================================================================
0001620E                            ; ---------------------------------------------------------------------------
0001620E                            ; Object 6B - stomper (SBZ)
0001620E                            ; ---------------------------------------------------------------------------
0001620E                            
0001620E                            Obj6B:					; XREF: Obj_Index
0001620E 7000                       		moveq	#0,d0
00016210 1028 0024                  		move.b	$24(a0),d0
00016214 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016218 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
0001621C                            ; ===========================================================================
0001621C 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
0001621E 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016220                            
00016220 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016224 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016228 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001622C 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016230 8040 0005                  		dc.b  $80, $40,	  0,   5
00016234                            ; ===========================================================================
00016234                            
00016234                            Obj6B_Main:				; XREF: Obj6B_Index
00016234 5428 0024                  		addq.b	#2,$24(a0)
00016238 7000                       		moveq	#0,d0
0001623A 1028 0028                  		move.b	$28(a0),d0
0001623E E448                       		lsr.w	#2,d0
00016240 0240 001C                  		andi.w	#$1C,d0
00016244 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016248 115B 0019                  		move.b	(a3)+,$19(a0)
0001624C 115B 0016                  		move.b	(a3)+,$16(a0)
00016250 E448                       		lsr.w	#2,d0
00016252 1140 001A                  		move.b	d0,$1A(a0)
00016256 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001625E 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016264 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001626A 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001626C 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016272 6700                       		beq.s	Obj6B_SBZ3
00016274                            
00016274                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016274 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016278 7000                       		moveq	#0,d0
0001627A 1028 0023                  		move.b	$23(a0),d0
0001627E 6700                       		beq.s	Obj6B_Delete
00016280 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016286                            
00016286                            Obj6B_Delete:
00016286 4EF9 0000 DBAE             		jmp	DeleteObject
0001628C                            ; ===========================================================================
0001628C                            
0001628C                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001628C 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016292 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016298 6600                       		bne.s	Obj6B_SBZ12
0001629A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001629E 7000                       		moveq	#0,d0
000162A0 1028 0023                  		move.b	$23(a0),d0
000162A4 6700                       		beq.s	Obj6B_SBZ12
000162A6 0832 0000 0002             		btst	#0,2(a2,d0.w)
000162AC 6700                       		beq.s	Obj6B_SBZ12
000162AE 4238 F7CB                  		clr.b	($FFFFF7CB).w
000162B2 60C0                       		bra.s	Obj6B_ChkGone
000162B4                            ; ===========================================================================
000162B4                            
000162B4                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000162B4 0028 0004 0001             		ori.b	#4,1(a0)
000162BA 117C 0004 0018             		move.b	#4,$18(a0)
000162C0 3168 0008 0034             		move.w	8(a0),$34(a0)
000162C6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000162CC 7000                       		moveq	#0,d0
000162CE 101B                       		move.b	(a3)+,d0
000162D0 3140 003C                  		move.w	d0,$3C(a0)
000162D4 7000                       		moveq	#0,d0
000162D6 1028 0028                  		move.b	$28(a0),d0
000162DA 6A00                       		bpl.s	Obj6B_Action
000162DC 0200 000F                  		andi.b	#$F,d0
000162E0 1140 003E                  		move.b	d0,$3E(a0)
000162E4 1153 0028                  		move.b	(a3),$28(a0)
000162E8 0C13 0005                  		cmpi.b	#5,(a3)
000162EC 6600                       		bne.s	Obj6B_ChkGone2
000162EE 08E8 0004 0001             		bset	#4,1(a0)
000162F4                            
000162F4                            Obj6B_ChkGone2:
000162F4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000162F8 7000                       		moveq	#0,d0
000162FA 1028 0023                  		move.b	$23(a0),d0
000162FE 6700                       		beq.s	Obj6B_Action
00016300 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016306                            
00016306                            Obj6B_Action:				; XREF: Obj6B_Index
00016306 3F28 0008                  		move.w	8(a0),-(sp)
0001630A 7000                       		moveq	#0,d0
0001630C 1028 0028                  		move.b	$28(a0),d0
00016310 0240 000F                  		andi.w	#$F,d0
00016314 D040                       		add.w	d0,d0
00016316 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
0001631A 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
0001631E 381F                       		move.w	(sp)+,d4
00016320 4A28 0001                  		tst.b	1(a0)
00016324 6A00                       		bpl.s	Obj6B_ChkDel
00016326 7200                       		moveq	#0,d1
00016328 1228 0019                  		move.b	$19(a0),d1
0001632C 0641 000B                  		addi.w	#$B,d1
00016330 7400                       		moveq	#0,d2
00016332 1428 0016                  		move.b	$16(a0),d2
00016336 3602                       		move.w	d2,d3
00016338 5243                       		addq.w	#1,d3
0001633A 6100 9C06                  		bsr.w	SolidObject
0001633E                            
0001633E                            Obj6B_ChkDel:
0001633E 3028 0034                  		move.w	$34(a0),d0
00016342 0240 FF80                  		andi.w	#$FF80,d0
00016346 3238 F700                  		move.w	($FFFFF700).w,d1
0001634A 0441 0080                  		subi.w	#$80,d1
0001634E 0241 FF80                  		andi.w	#$FF80,d1
00016352 9041                       		sub.w	d1,d0
00016354 0C40 0280                  		cmpi.w	#$280,d0
00016358 6200                       		bhi.s	loc_15D64
0001635A 4EF9 0000 DB72             		jmp	DisplaySprite
00016360                            ; ===========================================================================
00016360                            
00016360                            loc_15D64:
00016360 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016366 6600                       		bne.s	Obj6B_Delete2
00016368 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001636C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016370 7000                       		moveq	#0,d0
00016372 1028 0023                  		move.b	$23(a0),d0
00016376 6700                       		beq.s	Obj6B_Delete2
00016378 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001637E                            
0001637E                            Obj6B_Delete2:
0001637E 4EF9 0000 DBAE             		jmp	DeleteObject
00016384                            ; ===========================================================================
00016384 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016388 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001638C 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016390                            ; ===========================================================================
00016390                            
00016390                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016390 4E75                       		rts	
00016392                            ; ===========================================================================
00016392                            
00016392                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016392 4A28 0038                  		tst.b	$38(a0)
00016396 6600                       		bne.s	loc_15DB4
00016398 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001639C 7000                       		moveq	#0,d0
0001639E 1028 003E                  		move.b	$3E(a0),d0
000163A2 0832 0000 0000             		btst	#0,(a2,d0.w)
000163A8 6700                       		beq.s	loc_15DC2
000163AA 117C 0001 0038             		move.b	#1,$38(a0)
000163B0                            
000163B0                            loc_15DB4:
000163B0 3028 003C                  		move.w	$3C(a0),d0
000163B4 B068 003A                  		cmp.w	$3A(a0),d0
000163B8 6700                       		beq.s	loc_15DE0
000163BA 5468 003A                  		addq.w	#2,$3A(a0)
000163BE                            
000163BE                            loc_15DC2:
000163BE 3028 003A                  		move.w	$3A(a0),d0
000163C2 0828 0000 0022             		btst	#0,$22(a0)
000163C8 6700                       		beq.s	loc_15DD4
000163CA 4440                       		neg.w	d0
000163CC 0640 0080                  		addi.w	#$80,d0
000163D0                            
000163D0                            loc_15DD4:
000163D0 3228 0034                  		move.w	$34(a0),d1
000163D4 9240                       		sub.w	d0,d1
000163D6 3141 0008                  		move.w	d1,8(a0)
000163DA 4E75                       		rts	
000163DC                            ; ===========================================================================
000163DC                            
000163DC                            loc_15DE0:
000163DC 5228 0028                  		addq.b	#1,$28(a0)
000163E0 317C 00B4 0036             		move.w	#$B4,$36(a0)
000163E6 4228 0038                  		clr.b	$38(a0)
000163EA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163EE 7000                       		moveq	#0,d0
000163F0 1028 0023                  		move.b	$23(a0),d0
000163F4 67C8                       		beq.s	loc_15DC2
000163F6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000163FC 60C0                       		bra.s	loc_15DC2
000163FE                            ; ===========================================================================
000163FE                            
000163FE                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000163FE 4A28 0038                  		tst.b	$38(a0)
00016402 6600                       		bne.s	loc_15E14
00016404 5368 0036                  		subq.w	#1,$36(a0)
00016408 6600                       		bne.s	loc_15E1E
0001640A 117C 0001 0038             		move.b	#1,$38(a0)
00016410                            
00016410                            loc_15E14:
00016410 4A68 003A                  		tst.w	$3A(a0)
00016414 6700                       		beq.s	loc_15E3C
00016416 5568 003A                  		subq.w	#2,$3A(a0)
0001641A                            
0001641A                            loc_15E1E:
0001641A 3028 003A                  		move.w	$3A(a0),d0
0001641E 0828 0000 0022             		btst	#0,$22(a0)
00016424 6700                       		beq.s	loc_15E30
00016426 4440                       		neg.w	d0
00016428 0640 0080                  		addi.w	#$80,d0
0001642C                            
0001642C                            loc_15E30:
0001642C 3228 0034                  		move.w	$34(a0),d1
00016430 9240                       		sub.w	d0,d1
00016432 3141 0008                  		move.w	d1,8(a0)
00016436 4E75                       		rts	
00016438                            ; ===========================================================================
00016438                            
00016438                            loc_15E3C:
00016438 5328 0028                  		subq.b	#1,$28(a0)
0001643C 4228 0038                  		clr.b	$38(a0)
00016440 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016444 7000                       		moveq	#0,d0
00016446 1028 0023                  		move.b	$23(a0),d0
0001644A 67CE                       		beq.s	loc_15E1E
0001644C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016452 60C6                       		bra.s	loc_15E1E
00016454                            ; ===========================================================================
00016454                            
00016454                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016454 4A28 0038                  		tst.b	$38(a0)
00016458 6600                       		bne.s	loc_15E7C
0001645A 4A68 003A                  		tst.w	$3A(a0)
0001645E 6700                       		beq.s	loc_15E6A
00016460 5368 003A                  		subq.w	#1,$3A(a0)
00016464 6000                       		bra.s	loc_15E8E
00016466                            ; ===========================================================================
00016466                            
00016466                            loc_15E6A:
00016466 5368 0036                  		subq.w	#1,$36(a0)
0001646A 6A00                       		bpl.s	loc_15E8E
0001646C 317C 003C 0036             		move.w	#$3C,$36(a0)
00016472 117C 0001 0038             		move.b	#1,$38(a0)
00016478                            
00016478                            loc_15E7C:
00016478 5068 003A                  		addq.w	#8,$3A(a0)
0001647C 3028 003A                  		move.w	$3A(a0),d0
00016480 B068 003C                  		cmp.w	$3C(a0),d0
00016484 6600                       		bne.s	loc_15E8E
00016486 4228 0038                  		clr.b	$38(a0)
0001648A                            
0001648A                            loc_15E8E:
0001648A 3028 003A                  		move.w	$3A(a0),d0
0001648E 0828 0000 0022             		btst	#0,$22(a0)
00016494 6700                       		beq.s	loc_15EA0
00016496 4440                       		neg.w	d0
00016498 0640 0038                  		addi.w	#$38,d0
0001649C                            
0001649C                            loc_15EA0:
0001649C 3228 0030                  		move.w	$30(a0),d1
000164A0 D240                       		add.w	d0,d1
000164A2 3141 000C                  		move.w	d1,$C(a0)
000164A6 4E75                       		rts	
000164A8                            ; ===========================================================================
000164A8                            
000164A8                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000164A8 4A28 0038                  		tst.b	$38(a0)
000164AC 6600                       		bne.s	loc_15ED0
000164AE 4A68 003A                  		tst.w	$3A(a0)
000164B2 6700                       		beq.s	loc_15EBE
000164B4 5168 003A                  		subq.w	#8,$3A(a0)
000164B8 6000                       		bra.s	loc_15EF0
000164BA                            ; ===========================================================================
000164BA                            
000164BA                            loc_15EBE:
000164BA 5368 0036                  		subq.w	#1,$36(a0)
000164BE 6A00                       		bpl.s	loc_15EF0
000164C0 317C 003C 0036             		move.w	#$3C,$36(a0)
000164C6 117C 0001 0038             		move.b	#1,$38(a0)
000164CC                            
000164CC                            loc_15ED0:
000164CC 3028 003A                  		move.w	$3A(a0),d0
000164D0 B068 003C                  		cmp.w	$3C(a0),d0
000164D4 6700                       		beq.s	loc_15EE0
000164D6 5068 003A                  		addq.w	#8,$3A(a0)
000164DA 6000                       		bra.s	loc_15EF0
000164DC                            ; ===========================================================================
000164DC                            
000164DC                            loc_15EE0:
000164DC 5368 0036                  		subq.w	#1,$36(a0)
000164E0 6A00                       		bpl.s	loc_15EF0
000164E2 317C 003C 0036             		move.w	#$3C,$36(a0)
000164E8 4228 0038                  		clr.b	$38(a0)
000164EC                            
000164EC                            loc_15EF0:
000164EC 3028 003A                  		move.w	$3A(a0),d0
000164F0 0828 0000 0022             		btst	#0,$22(a0)
000164F6 6700                       		beq.s	loc_15F02
000164F8 4440                       		neg.w	d0
000164FA 0640 0038                  		addi.w	#$38,d0
000164FE                            
000164FE                            loc_15F02:
000164FE 3228 0030                  		move.w	$30(a0),d1
00016502 D240                       		add.w	d0,d1
00016504 3141 000C                  		move.w	d1,$C(a0)
00016508 4E75                       		rts	
0001650A                            ; ===========================================================================
0001650A                            
0001650A                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
0001650A 4A28 0038                  		tst.b	$38(a0)
0001650E 6600                       		bne.s	loc_15F3E
00016510 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016514 7000                       		moveq	#0,d0
00016516 1028 003E                  		move.b	$3E(a0),d0
0001651A 0832 0000 0000             		btst	#0,(a2,d0.w)
00016520 6700                       		beq.s	locret_15F5C
00016522 117C 0001 0038             		move.b	#1,$38(a0)
00016528 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001652C 7000                       		moveq	#0,d0
0001652E 1028 0023                  		move.b	$23(a0),d0
00016532 6700                       		beq.s	loc_15F3E
00016534 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001653A                            
0001653A                            loc_15F3E:
0001653A 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016542 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001654A 3168 0008 0034             		move.w	8(a0),$34(a0)
00016550 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016556 6700                       		beq.s	loc_15F5E
00016558                            
00016558                            locret_15F5C:
00016558 4E75                       		rts	
0001655A                            ; ===========================================================================
0001655A                            
0001655A                            loc_15F5E:
0001655A 4228 0028                  		clr.b	$28(a0)
0001655E 4228 0038                  		clr.b	$38(a0)
00016562 4E75                       		rts	
00016564                            ; ===========================================================================
00016564                            ; ---------------------------------------------------------------------------
00016564                            ; Sprite mappings - stomper and	platforms (SBZ)
00016564                            ; ---------------------------------------------------------------------------
00016564                            Map_obj6B:
00016564                            	include "_maps\obj6B.asm"
00016564                            ; ---------------------------------------------------------------------------
00016564                            ; Sprite mappings - stomper and	platforms (SBZ)
00016564                            ; ---------------------------------------------------------------------------
00016564 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016568 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001656C 0000                       		dc.w byte_15FB0-Map_obj6B
0001656E 04                         byte_15F72:	dc.b 4
0001656F F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016574 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016579 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001657E F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016583 08                         byte_15F87:	dc.b 8
00016584 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016589 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001658E E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016593 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016598 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001659D 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000165A2 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000165A7 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000165AC 0E                         byte_15FB0:	dc.b $E
000165AD C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000165B2 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000165B7 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000165BC C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000165C1 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000165C6 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000165CB C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000165D0 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000165D5 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000165DA E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000165DF E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000165E4 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000165E9 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000165EE 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000165F4 00                         		even
000165F4 00                         		even
000165F4                            
000165F4                            ; ===========================================================================
000165F4                            ; ---------------------------------------------------------------------------
000165F4                            ; Object 6C - vanishing	platforms (SBZ)
000165F4                            ; ---------------------------------------------------------------------------
000165F4                            
000165F4                            Obj6C:					; XREF: Obj_Index
000165F4 7000                       		moveq	#0,d0
000165F6 1028 0024                  		move.b	$24(a0),d0
000165FA 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000165FE 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016602                            ; ===========================================================================
00016602 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016604 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016606 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016608 0000                       		dc.w loc_16068-Obj6C_Index
0001660A                            ; ===========================================================================
0001660A                            
0001660A                            Obj6C_Main:				; XREF: Obj6C_Index
0001660A 5C28 0024                  		addq.b	#6,$24(a0)
0001660E 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016616 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001661C 0028 0004 0001             		ori.b	#4,1(a0)
00016622 117C 0010 0019             		move.b	#$10,$19(a0)
00016628 117C 0004 0018             		move.b	#4,$18(a0)
0001662E 7000                       		moveq	#0,d0
00016630 1028 0028                  		move.b	$28(a0),d0	; get object type
00016634 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016638 5240                       		addq.w	#1,d0		; add 1
0001663A EF48                       		lsl.w	#7,d0		; multiply by $80
0001663C 3200                       		move.w	d0,d1
0001663E 5340                       		subq.w	#1,d0
00016640 3140 0030                  		move.w	d0,$30(a0)
00016644 3140 0032                  		move.w	d0,$32(a0)
00016648 7000                       		moveq	#0,d0
0001664A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001664E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016652 0641 0080                  		addi.w	#$80,d1
00016656 C0C1                       		mulu.w	d1,d0
00016658 E088                       		lsr.l	#8,d0
0001665A 3140 0036                  		move.w	d0,$36(a0)
0001665E 5341                       		subq.w	#1,d1
00016660 3141 0038                  		move.w	d1,$38(a0)
00016664                            
00016664                            loc_16068:				; XREF: Obj6C_Index
00016664 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016668 9068 0036                  		sub.w	$36(a0),d0
0001666C C068 0038                  		and.w	$38(a0),d0
00016670 6600                       		bne.s	Obj6C_Animate
00016672 5928 0024                  		subq.b	#4,$24(a0)
00016676 6000                       		bra.s	Obj6C_Vanish
00016678                            ; ===========================================================================
00016678                            
00016678                            Obj6C_Animate:
00016678 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001667E 4EB9 0000 AC42             		jsr	AnimateSprite
00016684 6000 9594                  		bra.w	MarkObjGone
00016688                            ; ===========================================================================
00016688                            
00016688                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016688 5368 0030                  		subq.w	#1,$30(a0)
0001668C 6A00                       		bpl.s	loc_160AA
0001668E 317C 007F 0030             		move.w	#127,$30(a0)
00016694 4A28 001C                  		tst.b	$1C(a0)
00016698 6700                       		beq.s	loc_160A4
0001669A 3168 0032 0030             		move.w	$32(a0),$30(a0)
000166A0                            
000166A0                            loc_160A4:
000166A0 0868 0000 001C             		bchg	#0,$1C(a0)
000166A6                            
000166A6                            loc_160AA:
000166A6 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000166AC 4EB9 0000 AC42             		jsr	AnimateSprite
000166B2 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000166B8 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000166BA 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000166C0 6600                       		bne.s	loc_160D6
000166C2 7200                       		moveq	#0,d1
000166C4 1228 0019                  		move.b	$19(a0),d1
000166C8 4EB9 0000 789E             		jsr	(PlatformObject).l
000166CE 6000 954A                  		bra.w	MarkObjGone
000166D2                            ; ===========================================================================
000166D2                            
000166D2                            loc_160D6:
000166D2 7200                       		moveq	#0,d1
000166D4 1228 0019                  		move.b	$19(a0),d1
000166D8 4EB9 0000 7A12             		jsr	(ExitPlatform).l
000166DE 3428 0008                  		move.w	8(a0),d2
000166E2 4EB9 0000 7F7C             		jsr	(MvSonicOnPtfm2).l
000166E8 6000 9530                  		bra.w	MarkObjGone
000166EC                            ; ===========================================================================
000166EC                            
000166EC                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000166EC 0828 0003 0022             		btst	#3,$22(a0)
000166F2 6700                       		beq.s	Obj6C_Display
000166F4 43F8 D000                  		lea	($FFFFD000).w,a1
000166F8 08A9 0003 0022             		bclr	#3,$22(a1)
000166FE 08A8 0003 0022             		bclr	#3,$22(a0)
00016704 117C 0002 0024             		move.b	#2,$24(a0)
0001670A 4228 0025                  		clr.b	$25(a0)
0001670E                            
0001670E                            Obj6C_Display:
0001670E 6000 950A                  		bra.w	MarkObjGone
00016712                            ; ===========================================================================
00016712                            Ani_obj6C:
00016712                            	include "_anim\obj6C.asm"
00016712                            ; ---------------------------------------------------------------------------
00016712                            ; Animation script - vanishing platforms (SBZ)
00016712                            ; ---------------------------------------------------------------------------
00016712 0000                       		dc.w byte_1611A-Ani_obj6C
00016714 0000                       		dc.w byte_16122-Ani_obj6C
00016716 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
0001671E 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016726                            		even
00016726                            		even
00016726                            
00016726                            ; ---------------------------------------------------------------------------
00016726                            ; Sprite mappings - vanishing platforms	(SBZ)
00016726                            ; ---------------------------------------------------------------------------
00016726                            Map_obj6C:
00016726                            	include "_maps\obj6C.asm"
00016726                            ; ---------------------------------------------------------------------------
00016726                            ; Sprite mappings - vanishing platforms	(SBZ)
00016726                            ; ---------------------------------------------------------------------------
00016726 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
0001672A 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001672E 01                         byte_16132:	dc.b 1
0001672F F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016734 01                         byte_16138:	dc.b 1
00016735 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001673A 01                         byte_1613E:	dc.b 1
0001673B F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016740 00                         byte_16144:	dc.b 0
00016742 00                         		even
00016742 00                         		even
00016742                            
00016742                            ; ===========================================================================
00016742                            ; ---------------------------------------------------------------------------
00016742                            ; Object 6E - electrocution orbs (SBZ)
00016742                            ; ---------------------------------------------------------------------------
00016742                            
00016742                            Obj6E:					; XREF: Obj_Index
00016742 7000                       		moveq	#0,d0
00016744 1028 0024                  		move.b	$24(a0),d0
00016748 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001674C 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016750                            ; ===========================================================================
00016750 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016752 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016754                            ; ===========================================================================
00016754                            
00016754                            Obj6E_Main:				; XREF: Obj6E_Index
00016754 5428 0024                  		addq.b	#2,$24(a0)
00016758 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016760 317C 047E 0002             		move.w	#$47E,2(a0)
00016766 0028 0004 0001             		ori.b	#4,1(a0)
0001676C 117C 0028 0019             		move.b	#$28,$19(a0)
00016772 7000                       		moveq	#0,d0
00016774 1028 0028                  		move.b	$28(a0),d0	; read object type
00016778 E948                       		lsl.w	#4,d0		; multiply by $10
0001677A 5340                       		subq.w	#1,d0
0001677C 3140 0034                  		move.w	d0,$34(a0)
00016780                            
00016780                            Obj6E_Shock:				; XREF: Obj6E_Index
00016780 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016784 C068 0034                  		and.w	$34(a0),d0
00016788 6600                       		bne.s	Obj6E_Animate
0001678A 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016790 4A28 0001                  		tst.b	1(a0)
00016794 6A00                       		bpl.s	Obj6E_Animate
00016796 303C 00B1                  		move.w	#$B1,d0
0001679A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play electricity sound
000167A0                            
000167A0                            Obj6E_Animate:
000167A0 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000167A6 4EB9 0000 AC42             		jsr	AnimateSprite
000167AC 117C 0000 0020             		move.b	#0,$20(a0)
000167B2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000167B8 6600                       		bne.s	Obj6E_Display	; if not, branch
000167BA 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000167C0                            
000167C0                            Obj6E_Display:
000167C0 6000 9458                  		bra.w	MarkObjGone
000167C4                            ; ===========================================================================
000167C4                            Ani_obj6E:
000167C4                            	include "_anim\obj6E.asm"
000167C4                            ; ---------------------------------------------------------------------------
000167C4                            ; Animation script - electrocution orbs (SBZ)
000167C4                            ; ---------------------------------------------------------------------------
000167C4 0000                       		dc.w byte_161CC-Ani_obj6E
000167C6 0000                       		dc.w byte_161D0-Ani_obj6E
000167C8 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000167CC 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000167DC                            		even
000167DC                            		even
000167DC                            
000167DC                            ; ---------------------------------------------------------------------------
000167DC                            ; Sprite mappings - electrocution orbs (SBZ)
000167DC                            ; ---------------------------------------------------------------------------
000167DC                            Map_obj6E:
000167DC                            	include "_maps\obj6E.asm"
000167DC                            Map_26ed:
000167DC 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
000167DE 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
000167E0 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
000167E2 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
000167E4 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
000167E6 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
000167E8 01                         Map_26ed_C: 	dc.b $1
000167E9 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
000167EE 02                         Map_26ed_12: 	dc.b $2
000167EF F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000167F4 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000167F9 06                         Map_26ed_1D: 	dc.b $6
000167FA F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000167FF 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016804 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016809 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001680E F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016813 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016818 08                         Map_26ed_3C: 	dc.b $8
00016819 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001681E 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016823 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016828 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001682D F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016832 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016837 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001683C F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016841 06                         Map_26ed_65: 	dc.b $6
00016842 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016847 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001684C F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016851 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016856 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001685B F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016860 04                         Map_26ed_84: 	dc.b $4
00016861 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016866 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001686B F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016870 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016876 00                         	even
00016876 00                         	even
00016876                            
00016876                            ; ===========================================================================
00016876                            ; ---------------------------------------------------------------------------
00016876                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016876                            ; ---------------------------------------------------------------------------
00016876                            
00016876                            Obj6F:					; XREF: Obj_Index
00016876 7000                       		moveq	#0,d0
00016878 1028 0024                  		move.b	$24(a0),d0
0001687C 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016880 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016884 3028 0030                  		move.w	$30(a0),d0
00016888 0240 FF80                  		andi.w	#$FF80,d0
0001688C 3238 F700                  		move.w	($FFFFF700).w,d1
00016890 0441 0080                  		subi.w	#$80,d1
00016894 0241 FF80                  		andi.w	#$FF80,d1
00016898 9041                       		sub.w	d1,d0
0001689A 0C40 0280                  		cmpi.w	#$280,d0
0001689E 6200                       		bhi.s	loc_1629A
000168A0                            
000168A0                            Obj6F_Display:
000168A0 4EF9 0000 DB72             		jmp	DisplaySprite
000168A6                            ; ===========================================================================
000168A6                            
000168A6                            loc_1629A:
000168A6 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000168AC 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000168AE 0C40 FF80                  		cmpi.w	#-$80,d0
000168B2 64EC                       		bcc.s	Obj6F_Display
000168B4                            
000168B4                            Obj6F_Act1or2:
000168B4 1028 002F                  		move.b	$2F(a0),d0
000168B8 6A00                       		bpl.s	Obj6F_Delete
000168BA 0240 007F                  		andi.w	#$7F,d0
000168BE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000168C2 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000168C8                            
000168C8                            Obj6F_Delete:
000168C8 4EF9 0000 DBAE             		jmp	DeleteObject
000168CE                            ; ===========================================================================
000168CE 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000168D0 0000                       		dc.w loc_163D8-Obj6F_Index
000168D2                            ; ===========================================================================
000168D2                            
000168D2                            Obj6F_Main:				; XREF: Obj6F_Index
000168D2 1028 0028                  		move.b	$28(a0),d0
000168D6 6B00 0000                  		bmi.w	loc_16380
000168DA 5428 0024                  		addq.b	#2,$24(a0)
000168DE 217C 0001 5F36 0004        		move.l	#Map_obj69a,4(a0)
000168E6 317C 04DF 0002             		move.w	#$4DF,2(a0)
000168EC 117C 0010 0019             		move.b	#$10,$19(a0)
000168F2 0028 0004 0001             		ori.b	#4,1(a0)
000168F8 117C 0004 0018             		move.b	#4,$18(a0)
000168FE 7000                       		moveq	#0,d0
00016900 1028 0028                  		move.b	$28(a0),d0
00016904 3200                       		move.w	d0,d1
00016906 E648                       		lsr.w	#3,d0
00016908 0240 001E                  		andi.w	#$1E,d0
0001690C 45FA 0000                  		lea	off_164A6(pc),a2
00016910 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016914 315A 0038                  		move.w	(a2)+,$38(a0)
00016918 315A 0030                  		move.w	(a2)+,$30(a0)
0001691C 214A 003C                  		move.l	a2,$3C(a0)
00016920 0241 000F                  		andi.w	#$F,d1
00016924 E549                       		lsl.w	#2,d1
00016926 1141 0038                  		move.b	d1,$38(a0)
0001692A 117C 0004 003A             		move.b	#4,$3A(a0)
00016930 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016934 6700                       		beq.s	loc_16356
00016936 117C 0001 003B             		move.b	#1,$3B(a0)
0001693C 4428 003A                  		neg.b	$3A(a0)
00016940 7200                       		moveq	#0,d1
00016942 1228 0038                  		move.b	$38(a0),d1
00016946 D228 003A                  		add.b	$3A(a0),d1
0001694A B228 0039                  		cmp.b	$39(a0),d1
0001694E 6500                       		bcs.s	loc_16352
00016950 1001                       		move.b	d1,d0
00016952 7200                       		moveq	#0,d1
00016954 4A00                       		tst.b	d0
00016956 6A00                       		bpl.s	loc_16352
00016958 1228 0039                  		move.b	$39(a0),d1
0001695C 5901                       		subq.b	#4,d1
0001695E                            
0001695E                            loc_16352:
0001695E 1141 0038                  		move.b	d1,$38(a0)
00016962                            
00016962                            loc_16356:
00016962 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016968 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001696E 4A41                       		tst.w	d1
00016970 6600                       		bne.s	loc_1636C
00016972 117C 0001 001C             		move.b	#1,$1C(a0)
00016978                            
00016978                            loc_1636C:
00016978 0C41 0008                  		cmpi.w	#8,d1
0001697C 6600                       		bne.s	loc_16378
0001697E 117C 0000 001C             		move.b	#0,$1C(a0)
00016984                            
00016984                            loc_16378:
00016984 6100 C12C                  		bsr.w	Obj63_ChangeDir
00016988 6000 0000                  		bra.w	loc_163D8
0001698C                            ; ===========================================================================
0001698C                            
0001698C                            loc_16380:				; XREF: Obj6F_Main
0001698C 1140 002F                  		move.b	d0,$2F(a0)
00016990 0240 007F                  		andi.w	#$7F,d0
00016994 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016998 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001699E 6700                       		beq.s	loc_1639A
000169A0 4EF9 0000 DBAE             		jmp	DeleteObject
000169A6                            ; ===========================================================================
000169A6                            
000169A6                            loc_1639A:
000169A6 D040                       		add.w	d0,d0
000169A8 0240 001E                  		andi.w	#$1E,d0
000169AC 0640 0080                  		addi.w	#$80,d0
000169B0 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000169B6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000169BA 321A                       		move.w	(a2)+,d1
000169BC 2248                       		movea.l	a0,a1
000169BE 6000                       		bra.s	Obj6F_LoadPform
000169C0                            ; ===========================================================================
000169C0                            
000169C0                            Obj6F_Loop:
000169C0 4EB9 0000 DFF8             		jsr	SingleObjLoad
000169C6 6600                       		bne.s	loc_163D0
000169C8                            
000169C8                            Obj6F_LoadPform:			; XREF: loc_1639A
000169C8 12BC 006F                  		move.b	#$6F,0(a1)
000169CC 335A 0008                  		move.w	(a2)+,8(a1)
000169D0 335A 000C                  		move.w	(a2)+,$C(a1)
000169D4 301A                       		move.w	(a2)+,d0
000169D6 1340 0028                  		move.b	d0,$28(a1)
000169DA                            
000169DA                            loc_163D0:
000169DA 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000169DE                            
000169DE 588F                       		addq.l	#4,sp
000169E0 4E75                       		rts	
000169E2                            ; ===========================================================================
000169E2                            
000169E2                            loc_163D8:				; XREF: Obj6F_Index
000169E2 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000169E8 4EB9 0000 AC42             		jsr	AnimateSprite
000169EE 4A28 001A                  		tst.b	$1A(a0)
000169F2 6600                       		bne.s	loc_16404
000169F4 3F28 0008                  		move.w	8(a0),-(sp)
000169F8 6100 0000                  		bsr.w	loc_16424
000169FC 323C 001B                  		move.w	#$1B,d1
00016A00 343C 0007                  		move.w	#7,d2
00016A04 3602                       		move.w	d2,d3
00016A06 5243                       		addq.w	#1,d3
00016A08 381F                       		move.w	(sp)+,d4
00016A0A 6000 9536                  		bra.w	SolidObject
00016A0E                            ; ===========================================================================
00016A0E                            
00016A0E                            loc_16404:
00016A0E 0828 0003 0022             		btst	#3,$22(a0)
00016A14 6700                       		beq.s	loc_16420
00016A16 43F8 D000                  		lea	($FFFFD000).w,a1
00016A1A 08A9 0003 0022             		bclr	#3,$22(a1)
00016A20 08A8 0003 0022             		bclr	#3,$22(a0)
00016A26 4228 0025                  		clr.b	$25(a0)
00016A2A                            
00016A2A                            loc_16420:
00016A2A 6000 0002                  		bra.w	*+4
00016A2E                            
00016A2E                            loc_16424:
00016A2E 3028 0008                  		move.w	8(a0),d0
00016A32 B068 0034                  		cmp.w	$34(a0),d0
00016A36 6600                       		bne.s	loc_16484
00016A38 3028 000C                  		move.w	$C(a0),d0
00016A3C B068 0036                  		cmp.w	$36(a0),d0
00016A40 6600                       		bne.s	loc_16484
00016A42 7200                       		moveq	#0,d1
00016A44 1228 0038                  		move.b	$38(a0),d1
00016A48 D228 003A                  		add.b	$3A(a0),d1
00016A4C B228 0039                  		cmp.b	$39(a0),d1
00016A50 6500                       		bcs.s	loc_16456
00016A52 1001                       		move.b	d1,d0
00016A54 7200                       		moveq	#0,d1
00016A56 4A00                       		tst.b	d0
00016A58 6A00                       		bpl.s	loc_16456
00016A5A 1228 0039                  		move.b	$39(a0),d1
00016A5E 5901                       		subq.b	#4,d1
00016A60                            
00016A60                            loc_16456:
00016A60 1141 0038                  		move.b	d1,$38(a0)
00016A64 2268 003C                  		movea.l	$3C(a0),a1
00016A68 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016A6E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016A74 4A41                       		tst.w	d1
00016A76 6600                       		bne.s	loc_16474
00016A78 117C 0001 001C             		move.b	#1,$1C(a0)
00016A7E                            
00016A7E                            loc_16474:
00016A7E 0C41 0008                  		cmpi.w	#8,d1
00016A82 6600                       		bne.s	loc_16480
00016A84 117C 0000 001C             		move.b	#0,$1C(a0)
00016A8A                            
00016A8A                            loc_16480:
00016A8A 6100 C026                  		bsr.w	Obj63_ChangeDir
00016A8E                            
00016A8E                            loc_16484:
00016A8E 4EF9 0000 DB4C             		jmp	SpeedToPos
00016A94                            ; ===========================================================================
00016A94                            Ani_obj6F:
00016A94                            	include "_anim\obj6F.asm"
00016A94                            ; ---------------------------------------------------------------------------
00016A94                            ; Animation script - platform on conveyor belt (SBZ)
00016A94                            ; ---------------------------------------------------------------------------
00016A94 0000                       		dc.w byte_1648E-Ani_obj6F
00016A96 0000                       		dc.w byte_164A2-Ani_obj6F
00016A98 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016AA5 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016AAC 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016AB0 00                         		even
00016AB0 00                         		even
00016AB0                            
00016AB0 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016AB6 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016ABC 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016AD0 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016AE4 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016AF8 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016B0C 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016B20 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016B34                            ; ===========================================================================
00016B34                            ; ---------------------------------------------------------------------------
00016B34                            ; Object 70 - large girder block (SBZ)
00016B34                            ; ---------------------------------------------------------------------------
00016B34                            
00016B34                            Obj70:					; XREF: Obj_Index
00016B34 7000                       		moveq	#0,d0
00016B36 1028 0024                  		move.b	$24(a0),d0
00016B3A 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016B3E 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016B42                            ; ===========================================================================
00016B42 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016B44 0000                       		dc.w Obj70_Action-Obj70_Index
00016B46                            ; ===========================================================================
00016B46                            
00016B46                            Obj70_Main:				; XREF: Obj70_Index
00016B46 5428 0024                  		addq.b	#2,$24(a0)
00016B4A 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016B52 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016B58 0028 0004 0001             		ori.b	#4,1(a0)
00016B5E 117C 0004 0018             		move.b	#4,$18(a0)
00016B64 117C 0060 0019             		move.b	#$60,$19(a0)
00016B6A 117C 0018 0016             		move.b	#$18,$16(a0)
00016B70 3168 0008 0032             		move.w	8(a0),$32(a0)
00016B76 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016B7C 6100 0000                  		bsr.w	Obj70_Move2
00016B80                            
00016B80                            Obj70_Action:				; XREF: Obj70_Index
00016B80 3F28 0008                  		move.w	8(a0),-(sp)
00016B84 4A68 003A                  		tst.w	$3A(a0)
00016B88 6700                       		beq.s	Obj70_Move
00016B8A 5368 003A                  		subq.w	#1,$3A(a0)
00016B8E 6600                       		bne.s	Obj70_Solid
00016B90                            
00016B90                            Obj70_Move:
00016B90 4EB9 0000 DB4C             		jsr	SpeedToPos
00016B96 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016B9A 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016B9C 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016BA0                            
00016BA0                            Obj70_Solid:
00016BA0 381F                       		move.w	(sp)+,d4
00016BA2 4A28 0001                  		tst.b	1(a0)
00016BA6 6A00                       		bpl.s	Obj70_ChkDel
00016BA8 7200                       		moveq	#0,d1
00016BAA 1228 0019                  		move.b	$19(a0),d1
00016BAE 0641 000B                  		addi.w	#$B,d1
00016BB2 7400                       		moveq	#0,d2
00016BB4 1428 0016                  		move.b	$16(a0),d2
00016BB8 3602                       		move.w	d2,d3
00016BBA 5243                       		addq.w	#1,d3
00016BBC 6100 9384                  		bsr.w	SolidObject
00016BC0                            
00016BC0                            Obj70_ChkDel:
00016BC0 3028 0032                  		move.w	$32(a0),d0
00016BC4 0240 FF80                  		andi.w	#$FF80,d0
00016BC8 3238 F700                  		move.w	($FFFFF700).w,d1
00016BCC 0441 0080                  		subi.w	#$80,d1
00016BD0 0241 FF80                  		andi.w	#$FF80,d1
00016BD4 9041                       		sub.w	d1,d0
00016BD6 0C40 0280                  		cmpi.w	#$280,d0
00016BDA 6200                       		bhi.s	Obj70_Delete
00016BDC 4EF9 0000 DB72             		jmp	DisplaySprite
00016BE2                            ; ===========================================================================
00016BE2                            
00016BE2                            Obj70_Delete:
00016BE2 4EF9 0000 DBAE             		jmp	DeleteObject
00016BE8                            ; ===========================================================================
00016BE8                            
00016BE8                            Obj70_Move2:				; XREF: Obj70_Main
00016BE8 1028 0038                  		move.b	$38(a0),d0
00016BEC 0240 0018                  		andi.w	#$18,d0
00016BF0 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016BF6 43F1 0000                  		lea	(a1,d0.w),a1
00016BFA 3159 0010                  		move.w	(a1)+,$10(a0)
00016BFE 3159 0012                  		move.w	(a1)+,$12(a0)
00016C02 3159 0034                  		move.w	(a1)+,$34(a0)
00016C06 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016C0A 317C 0007 003A             		move.w	#7,$3A(a0)
00016C10 4E75                       		rts	
00016C12                            ; ===========================================================================
00016C12 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016C1A 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016C22 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016C2A 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016C32                            ; ---------------------------------------------------------------------------
00016C32                            ; Sprite mappings - large girder block (SBZ)
00016C32                            ; ---------------------------------------------------------------------------
00016C32                            Map_obj70:
00016C32                            	include "_maps\obj70.asm"
00016C32                            ; ---------------------------------------------------------------------------
00016C32                            ; Sprite mappings - large girder block (SBZ)
00016C32                            ; ---------------------------------------------------------------------------
00016C32 0000                       		dc.w byte_1662A-Map_obj70
00016C34 0C                         byte_1662A:	dc.b $C
00016C35 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016C3A 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016C3F E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016C44 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016C49 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016C4E 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016C53 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016C58 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016C5D E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016C62 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016C67 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016C6C 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016C72 00                         		even
00016C72 00                         		even
00016C72                            
00016C72                            ; ===========================================================================
00016C72                            ; ---------------------------------------------------------------------------
00016C72                            ; Object 72 - teleporter (SBZ)
00016C72                            ; ---------------------------------------------------------------------------
00016C72                            
00016C72                            Obj72:					; XREF: Obj_Index
00016C72 7000                       		moveq	#0,d0
00016C74 1028 0024                  		move.b	$24(a0),d0
00016C78 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016C7C 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016C80 3028 0008                  		move.w	8(a0),d0
00016C84 0240 FF80                  		andi.w	#$FF80,d0
00016C88 3238 F700                  		move.w	($FFFFF700).w,d1
00016C8C 0441 0080                  		subi.w	#$80,d1
00016C90 0241 FF80                  		andi.w	#$FF80,d1
00016C94 9041                       		sub.w	d1,d0
00016C96 0C40 0280                  		cmpi.w	#$280,d0
00016C9A 6200                       		bhi.s	Obj72_Delete
00016C9C 4E75                       		rts	
00016C9E                            ; ===========================================================================
00016C9E                            
00016C9E                            Obj72_Delete:
00016C9E 4EF9 0000 DBAE             		jmp	DeleteObject
00016CA4                            ; ===========================================================================
00016CA4 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016CA6 0000                       		dc.w loc_166C8-Obj72_Index
00016CA8 0000                       		dc.w loc_1675E-Obj72_Index
00016CAA 0000                       		dc.w loc_16798-Obj72_Index
00016CAC                            ; ===========================================================================
00016CAC                            
00016CAC                            Obj72_Main:				; XREF: Obj72_Index
00016CAC 5428 0024                  		addq.b	#2,$24(a0)
00016CB0 1028 0028                  		move.b	$28(a0),d0
00016CB4 D040                       		add.w	d0,d0
00016CB6 0240 001E                  		andi.w	#$1E,d0
00016CBA 45FA 0000                  		lea	Obj72_Data(pc),a2
00016CBE D4F2 0000                  		adda.w	(a2,d0.w),a2
00016CC2 315A 003A                  		move.w	(a2)+,$3A(a0)
00016CC6 214A 003C                  		move.l	a2,$3C(a0)
00016CCA 315A 0036                  		move.w	(a2)+,$36(a0)
00016CCE 315A 0038                  		move.w	(a2)+,$38(a0)
00016CD2                            
00016CD2                            loc_166C8:				; XREF: Obj72_Index
00016CD2 43F8 D000                  		lea	($FFFFD000).w,a1
00016CD6 3029 0008                  		move.w	8(a1),d0
00016CDA 9068 0008                  		sub.w	8(a0),d0
00016CDE 0828 0000 0022             		btst	#0,$22(a0)
00016CE4 6700                       		beq.s	loc_166E0
00016CE6 0640 000F                  		addi.w	#$F,d0
00016CEA                            
00016CEA                            loc_166E0:
00016CEA 0C40 0010                  		cmpi.w	#$10,d0
00016CEE 6400                       		bcc.s	locret_1675C
00016CF0 3229 000C                  		move.w	$C(a1),d1
00016CF4 9268 000C                  		sub.w	$C(a0),d1
00016CF8 0641 0020                  		addi.w	#$20,d1
00016CFC 0C41 0040                  		cmpi.w	#$40,d1
00016D00 6400                       		bcc.s	locret_1675C
00016D02 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016D06 6600                       		bne.s	locret_1675C
00016D08 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016D0E 6600                       		bne.s	loc_1670E
00016D10 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016D16 6500                       		bcs.s	locret_1675C
00016D18                            
00016D18                            loc_1670E:
00016D18 5428 0024                  		addq.b	#2,$24(a0)
00016D1C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016D22 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016D28 337C 0800 0014             		move.w	#$800,$14(a1)
00016D2E 337C 0000 0010             		move.w	#0,$10(a1)
00016D34 337C 0000 0012             		move.w	#0,$12(a1)
00016D3A 08A8 0005 0022             		bclr	#5,$22(a0)
00016D40 08A9 0005 0022             		bclr	#5,$22(a1)
00016D46 08E9 0001 0022             		bset	#1,$22(a1)
00016D4C 3368 0008 0008             		move.w	8(a0),8(a1)
00016D52 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016D58 4228 0032                  		clr.b	$32(a0)
00016D5C 303C 00BE                  		move.w	#$BE,d0
00016D60 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016D66                            
00016D66                            locret_1675C:
00016D66 4E75                       		rts	
00016D68                            ; ===========================================================================
00016D68                            
00016D68                            loc_1675E:				; XREF: Obj72_Index
00016D68 43F8 D000                  		lea	($FFFFD000).w,a1
00016D6C 1028 0032                  		move.b	$32(a0),d0
00016D70 5428 0032                  		addq.b	#2,$32(a0)
00016D74 4EB9 0000 2C22             		jsr	(CalcSine).l
00016D7A EA40                       		asr.w	#5,d0
00016D7C 3428 000C                  		move.w	$C(a0),d2
00016D80 9440                       		sub.w	d0,d2
00016D82 3342 000C                  		move.w	d2,$C(a1)
00016D86 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016D8C 6600                       		bne.s	locret_16796
00016D8E 6100 0000                  		bsr.w	sub_1681C
00016D92 5428 0024                  		addq.b	#2,$24(a0)
00016D96 303C 00BC                  		move.w	#$BC,d0
00016D9A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play teleport sound
00016DA0                            
00016DA0                            locret_16796:
00016DA0 4E75                       		rts	
00016DA2                            ; ===========================================================================
00016DA2                            
00016DA2                            loc_16798:				; XREF: Obj72_Index
00016DA2 588F                       		addq.l	#4,sp
00016DA4 43F8 D000                  		lea	($FFFFD000).w,a1
00016DA8 5328 002E                  		subq.b	#1,$2E(a0)
00016DAC 6A00                       		bpl.s	loc_167DA
00016DAE 3368 0036 0008             		move.w	$36(a0),8(a1)
00016DB4 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016DBA 7200                       		moveq	#0,d1
00016DBC 1228 003A                  		move.b	$3A(a0),d1
00016DC0 5801                       		addq.b	#4,d1
00016DC2 B228 003B                  		cmp.b	$3B(a0),d1
00016DC6 6500                       		bcs.s	loc_167C2
00016DC8 7200                       		moveq	#0,d1
00016DCA 6000                       		bra.s	loc_16800
00016DCC                            ; ===========================================================================
00016DCC                            
00016DCC                            loc_167C2:
00016DCC 1141 003A                  		move.b	d1,$3A(a0)
00016DD0 2468 003C                  		movea.l	$3C(a0),a2
00016DD4 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016DDA 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016DE0 6000 0000                  		bra.w	sub_1681C
00016DE4                            ; ===========================================================================
00016DE4                            
00016DE4                            loc_167DA:
00016DE4 2429 0008                  		move.l	8(a1),d2
00016DE8 2629 000C                  		move.l	$C(a1),d3
00016DEC 3029 0010                  		move.w	$10(a1),d0
00016DF0 48C0                       		ext.l	d0
00016DF2 E180                       		asl.l	#8,d0
00016DF4 D480                       		add.l	d0,d2
00016DF6 3029 0012                  		move.w	$12(a1),d0
00016DFA 48C0                       		ext.l	d0
00016DFC E180                       		asl.l	#8,d0
00016DFE D680                       		add.l	d0,d3
00016E00 2342 0008                  		move.l	d2,8(a1)
00016E04 2343 000C                  		move.l	d3,$C(a1)
00016E08 4E75                       		rts	
00016E0A                            ; ===========================================================================
00016E0A                            
00016E0A                            loc_16800:
00016E0A 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016E10 4228 0024                  		clr.b	$24(a0)
00016E14 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016E18 337C 0000 0010             		move.w	#0,$10(a1)
00016E1E 337C 0200 0012             		move.w	#$200,$12(a1)
00016E24 4E75                       		rts	
00016E26                            
00016E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E26                            
00016E26                            
00016E26                            sub_1681C:
00016E26 7000                       		moveq	#0,d0
00016E28 343C 1000                  		move.w	#$1000,d2
00016E2C 3028 0036                  		move.w	$36(a0),d0
00016E30 9069 0008                  		sub.w	8(a1),d0
00016E34 6C00                       		bge.s	loc_16830
00016E36 4440                       		neg.w	d0
00016E38 4442                       		neg.w	d2
00016E3A                            
00016E3A                            loc_16830:
00016E3A 7200                       		moveq	#0,d1
00016E3C 363C 1000                  		move.w	#$1000,d3
00016E40 3228 0038                  		move.w	$38(a0),d1
00016E44 9269 000C                  		sub.w	$C(a1),d1
00016E48 6C00                       		bge.s	loc_16844
00016E4A 4441                       		neg.w	d1
00016E4C 4443                       		neg.w	d3
00016E4E                            
00016E4E                            loc_16844:
00016E4E B240                       		cmp.w	d0,d1
00016E50 6500                       		bcs.s	loc_1687A
00016E52 7200                       		moveq	#0,d1
00016E54 3228 0038                  		move.w	$38(a0),d1
00016E58 9269 000C                  		sub.w	$C(a1),d1
00016E5C 4841                       		swap	d1
00016E5E 83C3                       		divs.w	d3,d1
00016E60 7000                       		moveq	#0,d0
00016E62 3028 0036                  		move.w	$36(a0),d0
00016E66 9069 0008                  		sub.w	8(a1),d0
00016E6A 6700                       		beq.s	loc_16866
00016E6C 4840                       		swap	d0
00016E6E 81C1                       		divs.w	d1,d0
00016E70                            
00016E70                            loc_16866:
00016E70 3340 0010                  		move.w	d0,$10(a1)
00016E74 3343 0012                  		move.w	d3,$12(a1)
00016E78 4A41                       		tst.w	d1
00016E7A 6A00                       		bpl.s	loc_16874
00016E7C 4441                       		neg.w	d1
00016E7E                            
00016E7E                            loc_16874:
00016E7E 3141 002E                  		move.w	d1,$2E(a0)
00016E82 4E75                       		rts	
00016E84                            ; ===========================================================================
00016E84                            
00016E84                            loc_1687A:
00016E84 7000                       		moveq	#0,d0
00016E86 3028 0036                  		move.w	$36(a0),d0
00016E8A 9069 0008                  		sub.w	8(a1),d0
00016E8E 4840                       		swap	d0
00016E90 81C2                       		divs.w	d2,d0
00016E92 7200                       		moveq	#0,d1
00016E94 3228 0038                  		move.w	$38(a0),d1
00016E98 9269 000C                  		sub.w	$C(a1),d1
00016E9C 6700                       		beq.s	loc_16898
00016E9E 4841                       		swap	d1
00016EA0 83C0                       		divs.w	d0,d1
00016EA2                            
00016EA2                            loc_16898:
00016EA2 3341 0012                  		move.w	d1,$12(a1)
00016EA6 3342 0010                  		move.w	d2,$10(a1)
00016EAA 4A40                       		tst.w	d0
00016EAC 6A00                       		bpl.s	loc_168A6
00016EAE 4440                       		neg.w	d0
00016EB0                            
00016EB0                            loc_168A6:
00016EB0 3140 002E                  		move.w	d0,$2E(a0)
00016EB4 4E75                       		rts	
00016EB6                            ; End of function sub_1681C
00016EB6                            
00016EB6                            ; ===========================================================================
00016EB6 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016EBC 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016EC2 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016EC6 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016ECC 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016ED2 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016ED8 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016EDE 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016EE4 0884 0298 0894             		dc.w $884, $298, $894
00016EEA 0270 0894 0190             		dc.w $270, $894, $190
00016EF0 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016EF6 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016EFC 1184 0498 1158             		dc.w $1184, $498, $1158
00016F02 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016F08 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016F0E 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016F14 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016F1A 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016F20 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016F26 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016F2C 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016F32 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016F38 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016F3E                            ; ===========================================================================
00016F3E                            ; ---------------------------------------------------------------------------
00016F3E                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016F3E                            ; ---------------------------------------------------------------------------
00016F3E                            
00016F3E                            Obj78:					; XREF: Obj_Index
00016F3E 7000                       		moveq	#0,d0
00016F40 1028 0024                  		move.b	$24(a0),d0
00016F44 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016F48 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016F4C                            ; ===========================================================================
00016F4C 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016F4E 0000                       		dc.w Obj78_Action-Obj78_Index
00016F50 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F52 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016F54 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F56 0000                       		dc.w Obj78_Delete-Obj78_Index
00016F58 0000                       		dc.w loc_16CC0-Obj78_Index
00016F5A                            ; ===========================================================================
00016F5A                            
00016F5A                            locret_16950:
00016F5A 4E75                       		rts	
00016F5C                            ; ===========================================================================
00016F5C                            
00016F5C                            Obj78_Main:				; XREF: Obj78_Index
00016F5C 117C 0007 0016             		move.b	#7,$16(a0)
00016F62 117C 0008 0017             		move.b	#8,$17(a0)
00016F68 4EB9 0000 DB20             		jsr	ObjectFall
00016F6E 4EBA E4A6                  		jsr	ObjHitFloor
00016F72 4A41                       		tst.w	d1
00016F74 6AE4                       		bpl.s	locret_16950
00016F76 D368 000C                  		add.w	d1,$C(a0)
00016F7A 4268 0012                  		clr.w	$12(a0)
00016F7E 5428 0024                  		addq.b	#2,$24(a0)
00016F82 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016F8A 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016F90 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016F96 6700                       		beq.s	loc_16996
00016F98 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016F9E                            
00016F9E                            loc_16996:
00016F9E 0228 0003 0001             		andi.b	#3,1(a0)
00016FA4 0028 0004 0001             		ori.b	#4,1(a0)
00016FAA 1168 0001 0022             		move.b	1(a0),$22(a0)
00016FB0 117C 0004 0018             		move.b	#4,$18(a0)
00016FB6 117C 0008 0019             		move.b	#8,$19(a0)
00016FBC 117C 000B 0020             		move.b	#$B,$20(a0)
00016FC2 3428 0008                  		move.w	8(a0),d2
00016FC6 7A0C                       		moveq	#$C,d5
00016FC8 0828 0000 0022             		btst	#0,$22(a0)
00016FCE 6700                       		beq.s	loc_169CA
00016FD0 4445                       		neg.w	d5
00016FD2                            
00016FD2                            loc_169CA:
00016FD2 1C3C 0004                  		move.b	#4,d6
00016FD6 7600                       		moveq	#0,d3
00016FD8 7804                       		moveq	#4,d4
00016FDA 2448                       		movea.l	a0,a2
00016FDC 7202                       		moveq	#2,d1
00016FDE                            
00016FDE                            Obj78_LoadBody:
00016FDE 4EB9 0000 E00E             		jsr	SingleObjLoad2
00016FE4 6600                       		bne.s	Obj78_QuitLoad
00016FE6 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016FEA 1346 0024                  		move.b	d6,$24(a1)
00016FEE 5406                       		addq.b	#2,d6
00016FF0 2368 0004 0004             		move.l	4(a0),4(a1)
00016FF6 3368 0002 0002             		move.w	2(a0),2(a1)
00016FFC 137C 0005 0018             		move.b	#5,$18(a1)
00017002 137C 0008 0019             		move.b	#8,$19(a1)
00017008 137C 00CB 0020             		move.b	#$CB,$20(a1)
0001700E D445                       		add.w	d5,d2
00017010 3342 0008                  		move.w	d2,8(a1)
00017014 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001701A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017020 1368 0022 0001             		move.b	$22(a0),1(a1)
00017026 137C 0008 001A             		move.b	#8,$1A(a1)
0001702C 234A 003C                  		move.l	a2,$3C(a1)
00017030 1344 003C                  		move.b	d4,$3C(a1)
00017034 5804                       		addq.b	#4,d4
00017036 2449                       		movea.l	a1,a2
00017038                            
00017038                            Obj78_QuitLoad:
00017038 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001703C                            
0001703C 117C 0007 002A             		move.b	#7,$2A(a0)
00017042 4228 003C                  		clr.b	$3C(a0)
00017046                            
00017046                            Obj78_Action:				; XREF: Obj78_Index
00017046 4A28 0022                  		tst.b	$22(a0)
0001704A 6B00 0000                  		bmi.w	loc_16C96
0001704E 7000                       		moveq	#0,d0
00017050 1028 0025                  		move.b	$25(a0),d0
00017054 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017058 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001705C 1228 002B                  		move.b	$2B(a0),d1
00017060 6A00                       		bpl.s	Obj78_Display
00017062 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017068 1028 0026                  		move.b	$26(a0),d0
0001706C 0240 007F                  		andi.w	#$7F,d0
00017070 5828 0026                  		addq.b	#4,$26(a0)
00017074 1031 0000                  		move.b	(a1,d0.w),d0
00017078 6A00                       		bpl.s	Obj78_AniHead
0001707A 08A8 0007 002B             		bclr	#7,$2B(a0)
00017080 6000                       		bra.s	Obj78_Display
00017082                            ; ===========================================================================
00017082                            
00017082                            Obj78_AniHead:
00017082 0201 0010                  		andi.b	#$10,d1
00017086 D001                       		add.b	d1,d0
00017088 1140 001A                  		move.b	d0,$1A(a0)
0001708C                            
0001708C                            Obj78_Display:
0001708C 3028 0008                  		move.w	8(a0),d0
00017090 0240 FF80                  		andi.w	#$FF80,d0
00017094 3238 F700                  		move.w	($FFFFF700).w,d1
00017098 0441 0080                  		subi.w	#$80,d1
0001709C 0241 FF80                  		andi.w	#$FF80,d1
000170A0 9041                       		sub.w	d1,d0
000170A2 0C40 0280                  		cmpi.w	#$280,d0
000170A6 6200 0000                  		bhi.w	Obj78_ChkGone
000170AA 4EF9 0000 DB72             		jmp	DisplaySprite
000170B0                            ; ===========================================================================
000170B0                            
000170B0                            Obj78_ChkGone:
000170B0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000170B4 7000                       		moveq	#0,d0
000170B6 1028 0023                  		move.b	$23(a0),d0
000170BA 6700                       		beq.s	loc_16ABC
000170BC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000170C2                            
000170C2                            loc_16ABC:
000170C2 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000170C8 4E75                       		rts	
000170CA                            ; ===========================================================================
000170CA                            
000170CA                            Obj78_Delete:				; XREF: Obj78_Index
000170CA 4EF9 0000 DBAE             		jmp	DeleteObject
000170D0                            ; ===========================================================================
000170D0 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000170D2 0000                       		dc.w loc_16B02-Obj78_Index2
000170D4                            ; ===========================================================================
000170D4                            
000170D4                            Obj78_Move:				; XREF: Obj78_Index2
000170D4 5328 002A                  		subq.b	#1,$2A(a0)
000170D8 6B00                       		bmi.s	Obj78_Move2
000170DA 4E75                       		rts	
000170DC                            ; ===========================================================================
000170DC                            
000170DC                            Obj78_Move2:
000170DC 5428 0025                  		addq.b	#2,$25(a0)
000170E0 117C 0010 002A             		move.b	#$10,$2A(a0)
000170E6 317C FF40 0010             		move.w	#-$C0,$10(a0)
000170EC 317C 0040 0014             		move.w	#$40,$14(a0)
000170F2 0868 0004 002B             		bchg	#4,$2B(a0)
000170F8 6600                       		bne.s	loc_16AFC
000170FA 4268 0010                  		clr.w	$10(a0)
000170FE 4468 0014                  		neg.w	$14(a0)
00017102                            
00017102                            loc_16AFC:
00017102 08E8 0007 002B             		bset	#7,$2B(a0)
00017108                            
00017108                            loc_16B02:				; XREF: Obj78_Index2
00017108 5328 002A                  		subq.b	#1,$2A(a0)
0001710C 6B00                       		bmi.s	loc_16B5E
0001710E 2F28 0008                  		move.l	8(a0),-(sp)
00017112 2428 0008                  		move.l	8(a0),d2
00017116 3028 0010                  		move.w	$10(a0),d0
0001711A 0828 0000 0022             		btst	#0,$22(a0)
00017120 6700                       		beq.s	loc_16B1E
00017122 4440                       		neg.w	d0
00017124                            
00017124                            loc_16B1E:
00017124 48C0                       		ext.l	d0
00017126 E180                       		asl.l	#8,d0
00017128 D480                       		add.l	d0,d2
0001712A 2142 0008                  		move.l	d2,8(a0)
0001712E 4EBA E2E6                  		jsr	ObjHitFloor
00017132 241F                       		move.l	(sp)+,d2
00017134 0C41 FFF8                  		cmpi.w	#-8,d1
00017138 6D00                       		blt.s	loc_16B70
0001713A 0C41 000C                  		cmpi.w	#$C,d1
0001713E 6C00                       		bge.s	loc_16B70
00017140 D368 000C                  		add.w	d1,$C(a0)
00017144 4842                       		swap	d2
00017146 B468 0008                  		cmp.w	8(a0),d2
0001714A 6700                       		beq.s	locret_16B5C
0001714C 7000                       		moveq	#0,d0
0001714E 1028 003C                  		move.b	$3C(a0),d0
00017152 5228 003C                  		addq.b	#1,$3C(a0)
00017156 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001715C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017160                            
00017160                            locret_16B5C:
00017160 4E75                       		rts	
00017162                            ; ===========================================================================
00017162                            
00017162                            loc_16B5E:
00017162 5528 0025                  		subq.b	#2,$25(a0)
00017166 117C 0007 002A             		move.b	#7,$2A(a0)
0001716C 317C 0000 0010             		move.w	#0,$10(a0)
00017172 4E75                       		rts	
00017174                            ; ===========================================================================
00017174                            
00017174                            loc_16B70:
00017174 2142 0008                  		move.l	d2,8(a0)
00017178 0868 0000 0022             		bchg	#0,$22(a0)
0001717E 1168 0022 0001             		move.b	$22(a0),1(a0)
00017184 7000                       		moveq	#0,d0
00017186 1028 003C                  		move.b	$3C(a0),d0
0001718A 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017190 5228 003C                  		addq.b	#1,$3C(a0)
00017194 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001719A 4E75                       		rts	
0001719C                            ; ===========================================================================
0001719C                            
0001719C                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001719C 2268 003C                  		movea.l	$3C(a0),a1
000171A0 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000171A6 6A00                       		bpl.s	Obj78_BodySeg1
000171A8 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000171AE 1028 0026                  		move.b	$26(a0),d0
000171B2 0240 007F                  		andi.w	#$7F,d0
000171B6 5828 0026                  		addq.b	#4,$26(a0)
000171BA 4A31 0004                  		tst.b	4(a1,d0.w)
000171BE 6A00                       		bpl.s	Obj78_AniBody
000171C0 5828 0026                  		addq.b	#4,$26(a0)
000171C4                            
000171C4                            Obj78_AniBody:
000171C4 1031 0000                  		move.b	(a1,d0.w),d0
000171C8 5000                       		addq.b	#8,d0
000171CA 1140 001A                  		move.b	d0,$1A(a0)
000171CE                            
000171CE                            Obj78_BodySeg1:				; XREF: Obj78_Index
000171CE 2268 003C                  		movea.l	$3C(a0),a1
000171D2 4A28 0022                  		tst.b	$22(a0)
000171D6 6B00 0000                  		bmi.w	loc_16C90
000171DA 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000171E0 1169 0025 0025             		move.b	$25(a1),$25(a0)
000171E6 6700 0000                  		beq.w	loc_16C64
000171EA 3169 0014 0014             		move.w	$14(a1),$14(a0)
000171F0 3029 0010                  		move.w	$10(a1),d0
000171F4 D069 0014                  		add.w	$14(a1),d0
000171F8 3140 0010                  		move.w	d0,$10(a0)
000171FC 2428 0008                  		move.l	8(a0),d2
00017200 2602                       		move.l	d2,d3
00017202 3028 0010                  		move.w	$10(a0),d0
00017206 0828 0000 0022             		btst	#0,$22(a0)
0001720C 6700                       		beq.s	loc_16C0C
0001720E 4440                       		neg.w	d0
00017210                            
00017210                            loc_16C0C:
00017210 48C0                       		ext.l	d0
00017212 E180                       		asl.l	#8,d0
00017214 D480                       		add.l	d0,d2
00017216 2142 0008                  		move.l	d2,8(a0)
0001721A 4843                       		swap	d3
0001721C B668 0008                  		cmp.w	8(a0),d3
00017220 6700                       		beq.s	loc_16C64
00017222 7000                       		moveq	#0,d0
00017224 1028 003C                  		move.b	$3C(a0),d0
00017228 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001722C 0C01 0080                  		cmpi.b	#-$80,d1
00017230 6600                       		bne.s	loc_16C50
00017232 4843                       		swap	d3
00017234 2143 0008                  		move.l	d3,8(a0)
00017238 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001723C 0868 0000 0022             		bchg	#0,$22(a0)
00017242 1168 0022 0001             		move.b	$22(a0),1(a0)
00017248 5228 003C                  		addq.b	#1,$3C(a0)
0001724C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017252 6000                       		bra.s	loc_16C64
00017254                            ; ===========================================================================
00017254                            
00017254                            loc_16C50:
00017254 4881                       		ext.w	d1
00017256 D368 000C                  		add.w	d1,$C(a0)
0001725A 5228 003C                  		addq.b	#1,$3C(a0)
0001725E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017264 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017268                            
00017268                            loc_16C64:
00017268 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001726E 6700                       		beq.s	loc_16C90
00017270 0C11 0027                  		cmpi.b	#$27,0(a1)
00017274 6700                       		beq.s	loc_16C7C
00017276 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001727C 6600                       		bne.s	loc_16C82
0001727E                            
0001727E                            loc_16C7C:
0001727E 117C 000A 0024             		move.b	#$A,$24(a0)
00017284                            
00017284                            loc_16C82:
00017284 4EF9 0000 DB72             		jmp	DisplaySprite
0001728A                            
0001728A                            ; ===========================================================================
0001728A FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017292                            ; ===========================================================================
00017292                            
00017292                            loc_16C90:
00017292 08E9 0007 0022             		bset	#7,$22(a1)
00017298                            
00017298                            loc_16C96:
00017298 7000                       		moveq	#0,d0
0001729A 1028 0024                  		move.b	$24(a0),d0
0001729E 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000172A2 0828 0000 0022             		btst	#0,$22(a0)
000172A8 6700                       		beq.s	loc_16CAA
000172AA 4440                       		neg.w	d0
000172AC                            
000172AC                            loc_16CAA:
000172AC 3140 0010                  		move.w	d0,$10(a0)
000172B0 317C FC00 0012             		move.w	#-$400,$12(a0)
000172B6 117C 000C 0024             		move.b	#$C,$24(a0)
000172BC 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000172C2                            
000172C2                            loc_16CC0:				; XREF: Obj78_Index
000172C2 4EB9 0000 DB20             		jsr	ObjectFall
000172C8 4A68 0012                  		tst.w	$12(a0)
000172CC 6B00                       		bmi.s	loc_16CE0
000172CE 4EBA E146                  		jsr	ObjHitFloor
000172D2 4A41                       		tst.w	d1
000172D4 6A00                       		bpl.s	loc_16CE0
000172D6 D368 000C                  		add.w	d1,$C(a0)
000172DA 317C FC00 0012             		move.w	#-$400,$12(a0)
000172E0                            
000172E0                            loc_16CE0:
000172E0 4A28 0001                  		tst.b	1(a0)
000172E4 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000172E8 4EF9 0000 DB72             		jmp	DisplaySprite
000172EE                            ; ===========================================================================
000172EE                            Ani_obj78:
000172EE                            	include "_anim\obj78.asm"
000172EE                            ; ---------------------------------------------------------------------------
000172EE                            ; Animation script - Caterkiller enemy (uses non-standard format)
000172EE                            ; ---------------------------------------------------------------------------
000172EE 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000172FE 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001730E 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001731E 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001732E 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001733E 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001734E 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001735E 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001736E                            	even
0001736E                            	even
0001736E                            
0001736E                            ; ---------------------------------------------------------------------------
0001736E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001736E                            ; ---------------------------------------------------------------------------
0001736E                            Map_obj78:
0001736E                            	include "_maps\obj78.asm"
0001736E                            ; ---------------------------------------------------------------------------
0001736E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001736E                            ; ---------------------------------------------------------------------------
0001736E 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017372 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017376 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001737A 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001737E 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017382 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017386 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001738A 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001738E 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017392 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017396 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001739A 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001739E 01                         byte_16D9E:	dc.b 1
0001739F F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000173A4 01                         byte_16DA4:	dc.b 1
000173A5 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000173AA 01                         byte_16DAA:	dc.b 1
000173AB F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000173B0 01                         byte_16DB0:	dc.b 1
000173B1 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000173B6 01                         byte_16DB6:	dc.b 1
000173B7 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000173BC 01                         byte_16DBC:	dc.b 1
000173BD ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000173C2 01                         byte_16DC2:	dc.b 1
000173C3 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000173C8 01                         byte_16DC8:	dc.b 1
000173C9 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000173CE 01                         byte_16DCE:	dc.b 1
000173CF F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000173D4 01                         byte_16DD4:	dc.b 1
000173D5 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000173DA 01                         byte_16DDA:	dc.b 1
000173DB F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000173E0 01                         byte_16DE0:	dc.b 1
000173E1 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000173E6 01                         byte_16DE6:	dc.b 1
000173E7 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000173EC 01                         byte_16DEC:	dc.b 1
000173ED F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000173F2 01                         byte_16DF2:	dc.b 1
000173F3 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000173F8 01                         byte_16DF8:	dc.b 1
000173F9 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000173FE 01                         byte_16DFE:	dc.b 1
000173FF F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017404 01                         byte_16E04:	dc.b 1
00017405 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001740A 01                         byte_16E0A:	dc.b 1
0001740B F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017410 01                         byte_16E10:	dc.b 1
00017411 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017416 01                         byte_16E16:	dc.b 1
00017417 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001741C 01                         byte_16E1C:	dc.b 1
0001741D ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017422 01                         byte_16E22:	dc.b 1
00017423 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017428 01                         byte_16E28:	dc.b 1
00017429 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001742E                            		even
0001742E                            		even
0001742E                            
0001742E                            ; ===========================================================================
0001742E                            ; ---------------------------------------------------------------------------
0001742E                            ; Object 79 - lamppost
0001742E                            ; ---------------------------------------------------------------------------
0001742E                            
0001742E                            Obj79:					; XREF: Obj_Index
0001742E 7000                       		moveq	#0,d0
00017430 1028 0024                  		move.b	$24(a0),d0
00017434 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017438 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001743C 4EFA 87DC                  		jmp	MarkObjGone
00017440                            ; ===========================================================================
00017440 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017442 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017444 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017446 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017448                            ; ===========================================================================
00017448                            
00017448                            Obj79_Main:				; XREF: Obj79_Index
00017448 5428 0024                  		addq.b	#2,$24(a0)
0001744C 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017454 317C 07A0 0002             		move.w	#$7A0,2(a0)
0001745A 117C 0004 0001             		move.b	#4,1(a0)
00017460 117C 0008 0019             		move.b	#8,$19(a0)
00017466 117C 0005 0018             		move.b	#5,$18(a0)
0001746C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017470 7000                       		moveq	#0,d0
00017472 1028 0023                  		move.b	$23(a0),d0
00017476 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001747C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017482 6600                       		bne.s	Obj79_RedLamp
00017484 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017488 0201 007F                  		andi.b	#$7F,d1
0001748C 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017490 0202 007F                  		andi.b	#$7F,d2
00017494 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017496 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017498                            
00017498                            Obj79_RedLamp:
00017498 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001749E 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000174A4 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000174AA 4E75                       		rts	
000174AC                            ; ===========================================================================
000174AC                            
000174AC                            Obj79_BlueLamp:				; XREF: Obj79_Index
000174AC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000174B0 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000174B4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000174B8 6B00 0000                  		bmi.w	locret_16F90
000174BC 1238 FE30                  		move.b	($FFFFFE30).w,d1
000174C0 0201 007F                  		andi.b	#$7F,d1
000174C4 1428 0028                  		move.b	$28(a0),d2
000174C8 0202 007F                  		andi.b	#$7F,d2
000174CC B202                       		cmp.b	d2,d1
000174CE 6500                       		bcs.s	Obj79_HitLamp
000174D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000174D4 7000                       		moveq	#0,d0
000174D6 1028 0023                  		move.b	$23(a0),d0
000174DA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000174E0 117C 0004 0024             		move.b	#4,$24(a0)
000174E6 117C 0003 001A             		move.b	#3,$1A(a0)
000174EC 6000 0000                  		bra.w	locret_16F90
000174F0                            ; ===========================================================================
000174F0                            
000174F0                            Obj79_HitLamp:
000174F0 3038 D008                  		move.w	($FFFFD008).w,d0
000174F4 9068 0008                  		sub.w	8(a0),d0
000174F8 5040                       		addq.w	#8,d0
000174FA 0C40 0010                  		cmpi.w	#$10,d0
000174FE 6400 0000                  		bcc.w	locret_16F90
00017502 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017506 9068 000C                  		sub.w	$C(a0),d0
0001750A 0640 0040                  		addi.w	#$40,d0
0001750E 0C40 0068                  		cmpi.w	#$68,d0
00017512 6400                       		bcc.s	locret_16F90
00017514 303C 00A1                  		move.w	#$A1,d0
00017518 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lamppost sound
0001751E 5428 0024                  		addq.b	#2,$24(a0)
00017522 4EB9 0000 DFF8             		jsr	SingleObjLoad
00017528 6600                       		bne.s	loc_16F76
0001752A 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
0001752E 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017534 3368 0008 0030             		move.w	8(a0),$30(a1)
0001753A 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017540 0469 0018 0032             		subi.w	#$18,$32(a1)
00017546 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001754E 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017554 137C 0004 0001             		move.b	#4,1(a1)
0001755A 137C 0008 0019             		move.b	#8,$19(a1)
00017560 137C 0004 0018             		move.b	#4,$18(a1)
00017566 137C 0002 001A             		move.b	#2,$1A(a1)
0001756C 337C 0020 0036             		move.w	#$20,$36(a1)
00017572                            
00017572                            loc_16F76:
00017572 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017578 6100 0000                  		bsr.w	Obj79_StoreInfo
0001757C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017580 7000                       		moveq	#0,d0
00017582 1028 0023                  		move.b	$23(a0),d0
00017586 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001758C                            
0001758C                            locret_16F90:
0001758C 4E75                       		rts	
0001758E                            ; ===========================================================================
0001758E                            
0001758E                            Obj79_AfterHit:				; XREF: Obj79_Index
0001758E 4E75                       		rts	
00017590                            ; ===========================================================================
00017590                            
00017590                            Obj79_Twirl:				; XREF: Obj79_Index
00017590 5368 0036                  		subq.w	#1,$36(a0)
00017594 6A00                       		bpl.s	loc_16FA0
00017596 117C 0004 0024             		move.b	#4,$24(a0)
0001759C                            
0001759C                            loc_16FA0:
0001759C 1028 0026                  		move.b	$26(a0),d0
000175A0 0428 0010 0026             		subi.b	#$10,$26(a0)
000175A6 0400 0040                  		subi.b	#$40,d0
000175AA 4EB9 0000 2C22             		jsr	(CalcSine).l
000175B0 C3FC 0C00                  		muls.w	#$C00,d1
000175B4 4841                       		swap	d1
000175B6 D268 0030                  		add.w	$30(a0),d1
000175BA 3141 0008                  		move.w	d1,8(a0)
000175BE C1FC 0C00                  		muls.w	#$C00,d0
000175C2 4840                       		swap	d0
000175C4 D068 0032                  		add.w	$32(a0),d0
000175C8 3140 000C                  		move.w	d0,$C(a0)
000175CC 4E75                       		rts	
000175CE                            ; ===========================================================================
000175CE                            ; ---------------------------------------------------------------------------
000175CE                            ; Subroutine to	store information when you hit a lamppost
000175CE                            ; ---------------------------------------------------------------------------
000175CE                            
000175CE                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000175CE 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000175D4 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000175DA 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000175E0 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000175E6 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000175EC 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000175F2 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000175F8 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000175FE 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017604 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0001760A 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017610 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017616 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001761C 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017622 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017628 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001762E 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017634 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001763A 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017640 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017646 4E75                       		rts	
00017648                            
00017648                            ; ---------------------------------------------------------------------------
00017648                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017648                            ; ---------------------------------------------------------------------------
00017648                            
00017648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017648                            
00017648                            
00017648                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017648 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001764E 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017654 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001765A 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017660 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017666 4278 FE20                  		clr.w	($FFFFFE20).w
0001766A 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001766E 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017674 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001767A 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001767E 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017684 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001768A 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017690 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017696 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001769C 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000176A2 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000176A8 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000176AE 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000176B4 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000176BA 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000176C0 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000176C6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000176CC 6600                       		bne.s	loc_170E4
000176CE 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000176D4 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000176DA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000176E0                            
000176E0                            loc_170E4:
000176E0 4A38 FE30                  		tst.b	($FFFFFE30).w
000176E4 6A00                       		bpl.s	locret_170F6
000176E6 3038 FE32                  		move.w	($FFFFFE32).w,d0
000176EA 0440 00A0                  		subi.w	#$A0,d0
000176EE 31C0 F728                  		move.w	d0,($FFFFF728).w
000176F2                            
000176F2                            locret_170F6:
000176F2 4E75                       		rts	
000176F4                            ; End of function Obj79_LoadInfo
000176F4                            
000176F4                            ; ===========================================================================
000176F4                            ; ---------------------------------------------------------------------------
000176F4                            ; Sprite mappings - lamppost
000176F4                            ; ---------------------------------------------------------------------------
000176F4                            Map_obj79:
000176F4                            	include "_maps\obj79.asm"
000176F4                            ; ---------------------------------------------------------------------------
000176F4                            ; Sprite mappings - lamppost
000176F4                            ; ---------------------------------------------------------------------------
000176F4 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000176F8 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000176FC 06                         byte_17100:	dc.b 6
000176FD E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017702 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017707 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001770C F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017711 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017716 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
0001771B 04                         byte_1711F:	dc.b 4
0001771C E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017721 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017726 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001772B F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017730 02                         byte_17134:	dc.b 2
00017731 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017736 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001773B 06                         byte_1713F:	dc.b 6
0001773C E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017741 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017746 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001774B F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017750 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017755 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001775A                            		even
0001775A                            		even
0001775A                            
0001775A                            ; ===========================================================================
0001775A                            ; ---------------------------------------------------------------------------
0001775A                            ; Object 7D - hidden points at the end of a level
0001775A                            ; ---------------------------------------------------------------------------
0001775A                            
0001775A                            Obj7D:					; XREF: Obj_Index
0001775A 7000                       		moveq	#0,d0
0001775C 1028 0024                  		move.b	$24(a0),d0
00017760 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017764 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017768                            ; ===========================================================================
00017768 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001776A 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001776C                            ; ===========================================================================
0001776C                            
0001776C                            Obj7D_Main:				; XREF: Obj7D_Index
0001776C 7410                       		moveq	#$10,d2
0001776E 3602                       		move.w	d2,d3
00017770 D643                       		add.w	d3,d3
00017772 43F8 D000                  		lea	($FFFFD000).w,a1
00017776 3029 0008                  		move.w	8(a1),d0
0001777A 9068 0008                  		sub.w	8(a0),d0
0001777E D042                       		add.w	d2,d0
00017780 B043                       		cmp.w	d3,d0
00017782 6400                       		bcc.s	Obj7D_ChkDel
00017784 3229 000C                  		move.w	$C(a1),d1
00017788 9268 000C                  		sub.w	$C(a0),d1
0001778C D242                       		add.w	d2,d1
0001778E B243                       		cmp.w	d3,d1
00017790 6400                       		bcc.s	Obj7D_ChkDel
00017792 4A78 FE08                  		tst.w	($FFFFFE08).w
00017796 6600                       		bne.s	Obj7D_ChkDel
00017798 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001779C 6600                       		bne.s	Obj7D_ChkDel
0001779E 5428 0024                  		addq.b	#2,$24(a0)
000177A2 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000177AA 317C 84B6 0002             		move.w	#$84B6,2(a0)
000177B0 0028 0004 0001             		ori.b	#4,1(a0)
000177B6 117C 0000 0018             		move.b	#0,$18(a0)
000177BC 117C 0010 0019             		move.b	#$10,$19(a0)
000177C2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000177C8 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000177CE 303C 00C9                  		move.w	#$C9,d0
000177D2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bonus sound
000177D8 7000                       		moveq	#0,d0
000177DA 1028 0028                  		move.b	$28(a0),d0
000177DE D040                       		add.w	d0,d0
000177E0 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000177E4 4EB9 0000 0000             		jsr	AddPoints
000177EA                            
000177EA                            Obj7D_ChkDel:
000177EA 3028 0008                  		move.w	8(a0),d0
000177EE 0240 FF80                  		andi.w	#$FF80,d0
000177F2 3238 F700                  		move.w	($FFFFF700).w,d1
000177F6 0441 0080                  		subi.w	#$80,d1
000177FA 0241 FF80                  		andi.w	#$FF80,d1
000177FE 9041                       		sub.w	d1,d0
00017800 0C40 0280                  		cmpi.w	#$280,d0
00017804 6200                       		bhi.s	Obj7D_Delete
00017806 4E75                       		rts	
00017808                            ; ===========================================================================
00017808                            
00017808                            Obj7D_Delete:
00017808 4EF9 0000 DBAE             		jmp	DeleteObject
0001780E                            ; ===========================================================================
0001780E 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017810 03E8                       		dc.w 1000
00017812 0064                       		dc.w 100
00017814 0001                       		dc.w 1
00017816                            ; ===========================================================================
00017816                            
00017816                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017816 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0001781A 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001781C 3028 0008                  		move.w	8(a0),d0
00017820 0240 FF80                  		andi.w	#-$80,d0
00017824 3238 F700                  		move.w	($FFFFF700).w,d1
00017828 0441 0080                  		subi.w	#$80,d1
0001782C 0241 FF80                  		andi.w	#-$80,d1
00017830 9041                       		sub.w	d1,d0
00017832 0C40 0280                  		cmpi.w	#$280,d0
00017836 6200                       		bhi.s	Obj7D_Delete2
00017838 4EF9 0000 DB72             		jmp	DisplaySprite
0001783E                            ; ===========================================================================
0001783E                            
0001783E                            Obj7D_Delete2:
0001783E 4EF9 0000 DBAE             		jmp	DeleteObject
00017844                            ; ===========================================================================
00017844                            ; ---------------------------------------------------------------------------
00017844                            ; Sprite mappings - hidden points at the end of	a level
00017844                            ; ---------------------------------------------------------------------------
00017844                            Map_obj7D:
00017844                            	include "_maps\obj7D.asm"
00017844                            ; ---------------------------------------------------------------------------
00017844                            ; Sprite mappings - hidden points at the end of	a level
00017844                            ; ---------------------------------------------------------------------------
00017844 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017848 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001784C 00                         byte_17250:	dc.b 0
0001784D 01                         byte_17251:	dc.b 1
0001784E F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017853 01                         byte_17257:	dc.b 1
00017854 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017859 01                         byte_1725D:	dc.b 1
0001785A F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017860 00                         		even
00017860 00                         		even
00017860                            
00017860                            ; ===========================================================================
00017860                            ; ---------------------------------------------------------------------------
00017860                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017860                            ; ---------------------------------------------------------------------------
00017860                            
00017860                            Obj8A:					; XREF: Obj_Index
00017860 7000                       		moveq	#0,d0
00017862 1028 0024                  		move.b	$24(a0),d0
00017866 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001786A 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001786E                            ; ===========================================================================
0001786E 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017870 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017872                            ; ===========================================================================
00017872                            
00017872                            Obj8A_Main:				; XREF: Obj8A_Index
00017872 5428 0024                  		addq.b	#2,$24(a0)
00017876 317C 0120 0008             		move.w	#$120,8(a0)
0001787C 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017882 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001788A 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017890 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017894 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017898 117C 0000 0001             		move.b	#0,1(a0)
0001789E 117C 0000 0018             		move.b	#0,$18(a0)
000178A4 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000178AA 6600                       		bne.s	Obj8A_Display	; if not, branch
000178AC 317C 00A6 0002             		move.w	#$A6,2(a0)
000178B2 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000178B8 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000178BC 6700                       		beq.s	Obj8A_Display	; if not, branch
000178BE 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000178C4 6600                       		bne.s	Obj8A_Display	; if not, branch
000178C6 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000178CC 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000178D2 4EF9 0000 DBAE             		jmp	DeleteObject
000178D8                            ; ===========================================================================
000178D8                            
000178D8                            Obj8A_Display:				; XREF: Obj8A_Index
000178D8 4EF9 0000 DB72             		jmp	DisplaySprite
000178DE                            ; ===========================================================================
000178DE                            ; ---------------------------------------------------------------------------
000178DE                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000178DE                            ; ---------------------------------------------------------------------------
000178DE                            Map_obj8A:
000178DE                            	include "_maps\obj8A.asm"
000178DE                            ; --------------------------------------------------------------------------------
000178DE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000178DE                            ; --------------------------------------------------------------------------------
000178DE                            
000178DE                            SME_MD8yg:	
000178DE 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
000178E2 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
000178E6 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
000178EA 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
000178EE 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
000178F2 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
000178F4 0E                         SME_MD8yg_16:	dc.b $E	
000178F5 F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
000178FA F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
000178FF F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
00017904 F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
00017909 F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
0001790E F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
00017913 F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
00017918 F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
0001791D F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
00017922 F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
00017927 F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
0001792C F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
00017931 F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
00017936 F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
0001793B 10                         SME_MD8yg_5D:	dc.b $10	
0001793C D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
00017941 D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
00017946 D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
0001794B D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
00017950 D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
00017955 D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
0001795A D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
0001795F D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
00017964 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
00017969 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
0001796E 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
00017973 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
00017978 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
0001797D 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
00017982 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
00017987 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
0001798C 0A                         SME_MD8yg_AE:	dc.b $A	
0001798D D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
00017992 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
00017997 D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
0001799C D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
000179A1 D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
000179A6 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
000179AB D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
000179B0 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
000179B5 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
000179BA 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
000179BF 18                         SME_MD8yg_E1:	dc.b $18	
000179C0 D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
000179C5 D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
000179CA D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
000179CF D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
000179D4 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
000179D9 D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
000179DE D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
000179E3 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
000179E8 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
000179ED D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
000179F2 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
000179F7 D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
000179FC D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
00017A01 D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
00017A06 D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
00017A0B 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
00017A10 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
00017A15 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
00017A1A 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
00017A1F 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
00017A24 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
00017A29 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00017A2E 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
00017A33 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
00017A38 14                         SME_MD8yg_15A:	dc.b $14	
00017A39 D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
00017A3E D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
00017A43 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
00017A48 D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
00017A4D D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
00017A52 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
00017A57 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
00017A5C 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
00017A61 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017A66 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
00017A6B 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
00017A70 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
00017A75 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
00017A7A 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
00017A7F 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017A84 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017A89 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
00017A8E 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
00017A93 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017A98 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
00017A9D 1A                         SME_MD8yg_1BF:	dc.b $1A	
00017A9E D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
00017AA3 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017AA8 D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
00017AAD D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017AB2 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017AB7 D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
00017ABC D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017AC1 D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017AC6 D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
00017ACB D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
00017AD0 D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017AD5 D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
00017ADA 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
00017ADF 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017AE4 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017AE9 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017AEE 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017AF3 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
00017AF8 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
00017AFD 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017B02 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017B07 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
00017B0C 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
00017B11 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017B16 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
00017B1B 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
00017B20 17                         SME_MD8yg_242:	dc.b $17	
00017B21 D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
00017B26 D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
00017B2B D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
00017B30 D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
00017B35 D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
00017B3A D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
00017B3F D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
00017B44 D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
00017B49 D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
00017B4E D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
00017B53 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
00017B58 D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
00017B5D 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017B62 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017B67 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
00017B6C 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
00017B71 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017B76 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
00017B7B 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
00017B80 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017B85 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
00017B8A 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
00017B8F 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
00017B94 1F                         SME_MD8yg_2B6:	dc.b $1F	
00017B95 D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
00017B9A D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
00017B9F D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
00017BA4 D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017BA9 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017BAE D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017BB3 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017BB8 D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
00017BBD D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017BC2 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017BC7 D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
00017BCC D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017BD1 D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017BD6 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
00017BDB 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017BE0 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017BE5 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017BEA 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017BEF 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017BF4 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
00017BF9 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017BFE 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017C03 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
00017C08 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
00017C0D 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017C12 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017C17 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
00017C1C 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017C21 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017C26 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
00017C2B 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017C30 0F                         SME_MD8yg_352:	dc.b $F	
00017C31 F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017C36 F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
00017C3B F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017C40 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017C45 F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
00017C4A F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
00017C4F F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017C54 F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
00017C59 F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
00017C5E F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017C63 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017C68 F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
00017C6D F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017C72 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017C77 F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
00017C7C 08                         SME_MD8yg_39E:	dc.b 8	
00017C7D 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017C82 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017C87 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
00017C8C 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017C91 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017C96 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
00017C9B 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017CA0 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017CA5 17                         SME_MD8yg_3C7:	dc.b $17	
00017CA6 E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
00017CAB D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017CB0 E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017CB5 E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
00017CBA D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017CBF D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017CC4 D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017CC9 E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017CCE D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017CD3 D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017CD8 D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
00017CDD D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017CE2 D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017CE7 E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
00017CEC E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017CF1 E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017CF6 E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
00017CFB E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017D00 F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017D05 F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
00017D0A F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017D0F D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017D14 F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
00017D1A 00                         		even
00017D1A 00                         		even
00017D1A                            
00017D1A                            ; ===========================================================================
00017D1A                            ; ---------------------------------------------------------------------------
00017D1A                            ; Object 3D - Eggman (GHZ)
00017D1A                            ; ---------------------------------------------------------------------------
00017D1A                            
00017D1A                            Obj3D:					; XREF: Obj_Index
00017D1A 7000                       		moveq	#0,d0
00017D1C 1028 0024                  		move.b	$24(a0),d0
00017D20 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017D24 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017D28                            ; ===========================================================================
00017D28 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017D2A 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017D2C 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017D2E 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017D30                            
00017D30 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017D32 0401                       		dc.b 4,	1
00017D34 0607                       		dc.b 6,	7
00017D36                            ; ===========================================================================
00017D36                            
00017D36                            Obj3D_Main:				; XREF: Obj3D_Index
00017D36 45F9 0001 7D30             		lea	(Obj3D_ObjData).l,a2
00017D3C 2248                       		movea.l	a0,a1
00017D3E 7202                       		moveq	#2,d1
00017D40 6000                       		bra.s	Obj3D_LoadBoss
00017D42                            ; ===========================================================================
00017D42                            
00017D42                            Obj3D_Loop:
00017D42 4EB9 0000 E00E             		jsr	SingleObjLoad2
00017D48 6600                       		bne.s	loc_17772
00017D4A                            
00017D4A                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017D4A 135A 0024                  		move.b	(a2)+,$24(a1)
00017D4E 12BC 003D                  		move.b	#$3D,0(a1)
00017D52 3368 0008 0008             		move.w	8(a0),8(a1)
00017D58 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017D5E 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017D66 337C 0400 0002             		move.w	#$400,2(a1)
00017D6C 137C 0004 0001             		move.b	#4,1(a1)
00017D72 137C 0020 0019             		move.b	#$20,$19(a1)
00017D78 137C 0003 0018             		move.b	#3,$18(a1)
00017D7E 135A 001C                  		move.b	(a2)+,$1C(a1)
00017D82 2348 0034                  		move.l	a0,$34(a1)
00017D86 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017D8A                            
00017D8A                            loc_17772:
00017D8A 3168 0008 0030             		move.w	8(a0),$30(a0)
00017D90 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017D96 117C 000F 0020             		move.b	#$F,$20(a0)
00017D9C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017DA2                            
00017DA2                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017DA2 7000                       		moveq	#0,d0
00017DA4 1028 0025                  		move.b	$25(a0),d0
00017DA8 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017DAC 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017DB0 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017DB6 4EB9 0000 AC42             		jsr	AnimateSprite
00017DBC 1028 0022                  		move.b	$22(a0),d0
00017DC0 0200 0003                  		andi.b	#3,d0
00017DC4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017DCA 8128 0001                  		or.b	d0,1(a0)
00017DCE 4EF9 0000 DB72             		jmp	DisplaySprite
00017DD4                            ; ===========================================================================
00017DD4 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017DD6 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017DD8 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017DDA 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017DDC 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017DDE 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017DE0 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017DE2                            ; ===========================================================================
00017DE2                            
00017DE2                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017DE2 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017DE8 6100 0000                  		bsr.w	BossMove
00017DEC 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017DF2 6600                       		bne.s	loc_177E6
00017DF4 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017DFA 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017DFE                            
00017DFE                            loc_177E6:
00017DFE 1028 003F                  		move.b	$3F(a0),d0
00017E02 4EB9 0000 2C22             		jsr	(CalcSine).l
00017E08 EC40                       		asr.w	#6,d0
00017E0A D068 0038                  		add.w	$38(a0),d0
00017E0E 3140 000C                  		move.w	d0,$C(a0)
00017E12 3168 0030 0008             		move.w	$30(a0),8(a0)
00017E18 5428 003F                  		addq.b	#2,$3F(a0)
00017E1C 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017E22 6400                       		bcc.s	locret_1784A
00017E24 4A28 0022                  		tst.b	$22(a0)
00017E28 6B00                       		bmi.s	loc_1784C
00017E2A 4A28 0020                  		tst.b	$20(a0)
00017E2E 6600                       		bne.s	locret_1784A
00017E30 4A28 003E                  		tst.b	$3E(a0)
00017E34 6600                       		bne.s	Obj3D_ShipFlash
00017E36 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017E3C 303C 00AC                  		move.w	#$AC,d0
00017E40 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017E46                            
00017E46                            Obj3D_ShipFlash:
00017E46 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017E4A 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017E4C 4A51                       		tst.w	(a1)
00017E4E 6600                       		bne.s	loc_1783C
00017E50 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017E54                            
00017E54                            loc_1783C:
00017E54 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017E56 5328 003E                  		subq.b	#1,$3E(a0)
00017E5A 6600                       		bne.s	locret_1784A
00017E5C 117C 000F 0020             		move.b	#$F,$20(a0)
00017E62                            
00017E62                            locret_1784A:
00017E62 4E75                       		rts	
00017E64                            ; ===========================================================================
00017E64                            
00017E64                            loc_1784C:				; XREF: loc_177E6
00017E64 7064                       		moveq	#100,d0
00017E66 6100 0000                  		bsr.w	AddPoints
00017E6A 117C 0008 0025             		move.b	#8,$25(a0)
00017E70 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017E76 4E75                       		rts	
00017E78                            
00017E78                            ; ---------------------------------------------------------------------------
00017E78                            ; Defeated boss	subroutine
00017E78                            ; ---------------------------------------------------------------------------
00017E78                            
00017E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E78                            
00017E78                            
00017E78                            BossDefeated:
00017E78 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017E7C 0200 0007                  		andi.b	#7,d0
00017E80 6600                       		bne.s	locret_178A2
00017E82 4EB9 0000 DFF8             		jsr	SingleObjLoad
00017E88 6600                       		bne.s	locret_178A2
00017E8A 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017E8E 3368 0008 0008             		move.w	8(a0),8(a1)
00017E94 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017E9A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00017EA0 3200                       		move.w	d0,d1
00017EA2 7200                       		moveq	#0,d1
00017EA4 1200                       		move.b	d0,d1
00017EA6 E409                       		lsr.b	#2,d1
00017EA8 0441 0020                  		subi.w	#$20,d1
00017EAC D369 0008                  		add.w	d1,8(a1)
00017EB0 E048                       		lsr.w	#8,d0
00017EB2 E608                       		lsr.b	#3,d0
00017EB4 D169 000C                  		add.w	d0,$C(a1)
00017EB8                            
00017EB8                            locret_178A2:
00017EB8 4E75                       		rts	
00017EBA                            ; End of function BossDefeated
00017EBA                            
00017EBA                            ; ---------------------------------------------------------------------------
00017EBA                            ; Subroutine to	move a boss
00017EBA                            ; ---------------------------------------------------------------------------
00017EBA                            
00017EBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EBA                            
00017EBA                            
00017EBA                            BossMove:
00017EBA 2428 0030                  		move.l	$30(a0),d2
00017EBE 2628 0038                  		move.l	$38(a0),d3
00017EC2 3028 0010                  		move.w	$10(a0),d0
00017EC6 48C0                       		ext.l	d0
00017EC8 E180                       		asl.l	#8,d0
00017ECA D480                       		add.l	d0,d2
00017ECC 3028 0012                  		move.w	$12(a0),d0
00017ED0 48C0                       		ext.l	d0
00017ED2 E180                       		asl.l	#8,d0
00017ED4 D680                       		add.l	d0,d3
00017ED6 2142 0030                  		move.l	d2,$30(a0)
00017EDA 2143 0038                  		move.l	d3,$38(a0)
00017EDE 4E75                       		rts	
00017EE0                            ; End of function BossMove
00017EE0                            
00017EE0                            ; ===========================================================================
00017EE0                            
00017EE0                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017EE0 317C FF00 0010             		move.w	#-$100,$10(a0)
00017EE6 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017EEC 6100 FFCC                  		bsr.w	BossMove
00017EF0 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017EF6 6600                       		bne.s	loc_17916
00017EF8 317C 0000 0010             		move.w	#0,$10(a0)
00017EFE 317C 0000 0012             		move.w	#0,$12(a0)
00017F04 5428 0025                  		addq.b	#2,$25(a0)
00017F08 4EB9 0000 E00E             		jsr	SingleObjLoad2
00017F0E 6600                       		bne.s	loc_17910
00017F10 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017F14 3368 0030 0008             		move.w	$30(a0),8(a1)
00017F1A 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017F20 2348 0034                  		move.l	a0,$34(a1)
00017F24                            
00017F24                            loc_17910:
00017F24 317C 0077 003C             		move.w	#$77,$3C(a0)
00017F2A                            
00017F2A                            loc_17916:
00017F2A 6000 FED2                  		bra.w	loc_177E6
00017F2E                            ; ===========================================================================
00017F2E                            
00017F2E                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017F2E 5368 003C                  		subq.w	#1,$3C(a0)
00017F32 6A00                       		bpl.s	Obj3D_Reverse
00017F34 5428 0025                  		addq.b	#2,$25(a0)
00017F38 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F3E 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017F44 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017F4A 6600                       		bne.s	Obj3D_Reverse
00017F4C 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017F52 317C 0040 0010             		move.w	#$40,$10(a0)
00017F58                            
00017F58                            Obj3D_Reverse:
00017F58 0828 0000 0022             		btst	#0,$22(a0)
00017F5E 6600                       		bne.s	loc_17950
00017F60 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017F64                            
00017F64                            loc_17950:
00017F64 6000 FE98                  		bra.w	loc_177E6
00017F68                            ; ===========================================================================
00017F68                            
00017F68                            loc_17954:				; XREF: Obj3D_ShipIndex
00017F68 5368 003C                  		subq.w	#1,$3C(a0)
00017F6C 6B00                       		bmi.s	loc_17960
00017F6E 6100 FF4A                  		bsr.w	BossMove
00017F72 6000                       		bra.s	loc_17976
00017F74                            ; ===========================================================================
00017F74                            
00017F74                            loc_17960:
00017F74 0868 0000 0022             		bchg	#0,$22(a0)
00017F7A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F80 5528 0025                  		subq.b	#2,$25(a0)
00017F84 317C 0000 0010             		move.w	#0,$10(a0)
00017F8A                            
00017F8A                            loc_17976:
00017F8A 6000 FE72                  		bra.w	loc_177E6
00017F8E                            ; ===========================================================================
00017F8E                            
00017F8E                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017F8E 5368 003C                  		subq.w	#1,$3C(a0)
00017F92 6B00                       		bmi.s	loc_17984
00017F94 6000 FEE2                  		bra.w	BossDefeated
00017F98                            ; ===========================================================================
00017F98                            
00017F98                            loc_17984:
00017F98 08E8 0000 0022             		bset	#0,$22(a0)
00017F9E 08A8 0007 0022             		bclr	#7,$22(a0)
00017FA4 4268 0010                  		clr.w	$10(a0)
00017FA8 5428 0025                  		addq.b	#2,$25(a0)
00017FAC 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017FB2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017FB6 6600                       		bne.s	locret_179AA
00017FB8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017FBE                            
00017FBE                            locret_179AA:
00017FBE 4E75                       		rts	
00017FC0                            ; ===========================================================================
00017FC0                            
00017FC0                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017FC0 5268 003C                  		addq.w	#1,$3C(a0)
00017FC4 6700                       		beq.s	loc_179BC
00017FC6 6A00                       		bpl.s	loc_179C2
00017FC8 0668 0018 0012             		addi.w	#$18,$12(a0)
00017FCE 6000                       		bra.s	loc_179EE
00017FD0                            ; ===========================================================================
00017FD0                            
00017FD0                            loc_179BC:
00017FD0 4268 0012                  		clr.w	$12(a0)
00017FD4 6000                       		bra.s	loc_179EE
00017FD6                            ; ===========================================================================
00017FD6                            
00017FD6                            loc_179C2:
00017FD6 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017FDC 6500                       		bcs.s	loc_179DA
00017FDE 6700                       		beq.s	loc_179E0
00017FE0 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017FE6 6500                       		bcs.s	loc_179EE
00017FE8 5428 0025                  		addq.b	#2,$25(a0)
00017FEC 6000                       		bra.s	loc_179EE
00017FEE                            ; ===========================================================================
00017FEE                            
00017FEE                            loc_179DA:
00017FEE 5168 0012                  		subq.w	#8,$12(a0)
00017FF2 6000                       		bra.s	loc_179EE
00017FF4                            ; ===========================================================================
00017FF4                            
00017FF4                            loc_179E0:
00017FF4 4268 0012                  		clr.w	$12(a0)
00017FF8 303C 0081                  		move.w	#$81,d0
00017FFC 4EB9 0000 15B6             		jsr	(PlaySound).l	; play GHZ music
00018002                            
00018002                            loc_179EE:
00018002 6100 FEB6                  		bsr.w	BossMove
00018006 6000 FDF6                  		bra.w	loc_177E6
0001800A                            ; ===========================================================================
0001800A                            
0001800A                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001800A 317C 0400 0010             		move.w	#$400,$10(a0)
00018010 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018016 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001801C 6700                       		beq.s	loc_17A10
0001801E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018022 6000                       		bra.s	loc_17A16
00018024                            ; ===========================================================================
00018024                            
00018024                            loc_17A10:
00018024 4A28 0001                  		tst.b	1(a0)
00018028 6A00                       		bpl.s	Obj3D_ShipDel
0001802A                            
0001802A                            loc_17A16:
0001802A 6100 FE8E                  		bsr.w	BossMove
0001802E 6000 FDCE                  		bra.w	loc_177E6
00018032                            ; ===========================================================================
00018032                            
00018032                            Obj3D_ShipDel:
00018032 4EF9 0000 DBAE             		jmp	DeleteObject
00018038                            ; ===========================================================================
00018038                            
00018038                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018038 7000                       		moveq	#0,d0
0001803A 7201                       		moveq	#1,d1
0001803C 2268 0034                  		movea.l	$34(a0),a1
00018040 1029 0025                  		move.b	$25(a1),d0
00018044 5900                       		subq.b	#4,d0
00018046 6600                       		bne.s	loc_17A3E
00018048 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001804E 6600                       		bne.s	loc_17A46
00018050 7204                       		moveq	#4,d1
00018052                            
00018052                            loc_17A3E:
00018052 5D00                       		subq.b	#6,d0
00018054 6B00                       		bmi.s	loc_17A46
00018056 720A                       		moveq	#$A,d1
00018058 6000                       		bra.s	loc_17A5A
0001805A                            ; ===========================================================================
0001805A                            
0001805A                            loc_17A46:
0001805A 4A29 0020                  		tst.b	$20(a1)
0001805E 6600                       		bne.s	loc_17A50
00018060 7205                       		moveq	#5,d1
00018062 6000                       		bra.s	loc_17A5A
00018064                            ; ===========================================================================
00018064                            
00018064                            loc_17A50:
00018064 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001806A 6500                       		bcs.s	loc_17A5A
0001806C 7204                       		moveq	#4,d1
0001806E                            
0001806E                            loc_17A5A:
0001806E 1141 001C                  		move.b	d1,$1C(a0)
00018072 5500                       		subq.b	#2,d0
00018074 6600                       		bne.s	Obj3D_FaceDisp
00018076 117C 0006 001C             		move.b	#6,$1C(a0)
0001807C 4A28 0001                  		tst.b	1(a0)
00018080 6A00                       		bpl.s	Obj3D_FaceDel
00018082                            
00018082                            Obj3D_FaceDisp:
00018082 6000                       		bra.s	Obj3D_Display
00018084                            ; ===========================================================================
00018084                            
00018084                            Obj3D_FaceDel:
00018084 4EF9 0000 DBAE             		jmp	DeleteObject
0001808A                            ; ===========================================================================
0001808A                            
0001808A                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001808A 117C 0007 001C             		move.b	#7,$1C(a0)
00018090 2268 0034                  		movea.l	$34(a0),a1
00018094 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001809A 6600                       		bne.s	loc_17A96
0001809C 117C 000B 001C             		move.b	#$B,$1C(a0)
000180A2 4A28 0001                  		tst.b	1(a0)
000180A6 6A00                       		bpl.s	Obj3D_FlameDel
000180A8 6000                       		bra.s	Obj3D_FlameDisp
000180AA                            ; ===========================================================================
000180AA                            
000180AA                            loc_17A96:
000180AA 3029 0010                  		move.w	$10(a1),d0
000180AE 6700                       		beq.s	Obj3D_FlameDisp
000180B0 117C 0008 001C             		move.b	#8,$1C(a0)
000180B6                            
000180B6                            Obj3D_FlameDisp:
000180B6 6000                       		bra.s	Obj3D_Display
000180B8                            ; ===========================================================================
000180B8                            
000180B8                            Obj3D_FlameDel:
000180B8 4EF9 0000 DBAE             		jmp	DeleteObject
000180BE                            ; ===========================================================================
000180BE                            
000180BE                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000180BE 2268 0034                  		movea.l	$34(a0),a1
000180C2 3169 0008 0008             		move.w	8(a1),8(a0)
000180C8 3169 000C 000C             		move.w	$C(a1),$C(a0)
000180CE 1169 0022 0022             		move.b	$22(a1),$22(a0)
000180D4 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000180DA 4EB9 0000 AC42             		jsr	AnimateSprite
000180E0 1028 0022                  		move.b	$22(a0),d0
000180E4 0200 0003                  		andi.b	#3,d0
000180E8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000180EE 8128 0001                  		or.b	d0,1(a0)
000180F2 4EF9 0000 DB72             		jmp	DisplaySprite
000180F8                            ; ===========================================================================
000180F8                            ; ---------------------------------------------------------------------------
000180F8                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000180F8                            ; ---------------------------------------------------------------------------
000180F8                            
000180F8                            Obj48:					; XREF: Obj_Index
000180F8 7000                       		moveq	#0,d0
000180FA 1028 0024                  		move.b	$24(a0),d0
000180FE 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018102 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018106                            ; ===========================================================================
00018106 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018108 0000                       		dc.w Obj48_Base-Obj48_Index
0001810A 0000                       		dc.w Obj48_Display2-Obj48_Index
0001810C 0000                       		dc.w loc_17C68-Obj48_Index
0001810E 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018110                            ; ===========================================================================
00018110                            
00018110                            Obj48_Main:				; XREF: Obj48_Index
00018110 5428 0024                  		addq.b	#2,$24(a0)
00018114 317C 4080 0026             		move.w	#$4080,$26(a0)
0001811A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018120 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018128 317C 046C 0002             		move.w	#$46C,2(a0)
0001812E 45E8 0028                  		lea	$28(a0),a2
00018132 14FC 0000                  		move.b	#0,(a2)+
00018136 7205                       		moveq	#5,d1
00018138 2248                       		movea.l	a0,a1
0001813A 6000                       		bra.s	loc_17B60
0001813C                            ; ===========================================================================
0001813C                            
0001813C                            Obj48_MakeLinks:
0001813C 4EB9 0000 E00E             		jsr	SingleObjLoad2
00018142 6600                       		bne.s	Obj48_MakeBall
00018144 3368 0008 0008             		move.w	8(a0),8(a1)
0001814A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018150 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018154 137C 0006 0024             		move.b	#6,$24(a1)
0001815A 237C 0000 8096 0004        		move.l	#Map_obj15,4(a1)
00018162 337C 0380 0002             		move.w	#$380,2(a1)
00018168 137C 0001 001A             		move.b	#1,$1A(a1)
0001816E 5228 0028                  		addq.b	#1,$28(a0)
00018172                            
00018172                            loc_17B60:				; XREF: Obj48_Main
00018172 3A09                       		move.w	a1,d5
00018174 0445 D000                  		subi.w	#$D000,d5
00018178 EC4D                       		lsr.w	#6,d5
0001817A 0245 007F                  		andi.w	#$7F,d5
0001817E 14C5                       		move.b	d5,(a2)+
00018180 137C 0004 0001             		move.b	#4,1(a1)
00018186 137C 0008 0019             		move.b	#8,$19(a1)
0001818C 137C 0006 0018             		move.b	#6,$18(a1)
00018192 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018198 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
0001819C                            
0001819C                            Obj48_MakeBall:
0001819C 137C 0008 0024             		move.b	#8,$24(a1)
000181A2 237C 0000 85F4 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000181AA 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000181B0 137C 0001 001A             		move.b	#1,$1A(a1)
000181B6 137C 0005 0018             		move.b	#5,$18(a1)
000181BC 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000181C2 4E75                       		rts	
000181C4                            ; ===========================================================================
000181C4                            
000181C4 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000181CA                            
000181CA                            ; ===========================================================================
000181CA                            
000181CA                            Obj48_Base:				; XREF: Obj48_Index
000181CA 47F9 0001 81C4             		lea	(Obj48_PosData).l,a3
000181D0 45E8 0028                  		lea	$28(a0),a2
000181D4 7C00                       		moveq	#0,d6
000181D6 1C1A                       		move.b	(a2)+,d6
000181D8                            
000181D8                            loc_17BC6:
000181D8 7800                       		moveq	#0,d4
000181DA 181A                       		move.b	(a2)+,d4
000181DC ED4C                       		lsl.w	#6,d4
000181DE 0684 00FF D000             		addi.l	#$FFD000,d4
000181E4 2244                       		movea.l	d4,a1
000181E6 101B                       		move.b	(a3)+,d0
000181E8 B029 003C                  		cmp.b	$3C(a1),d0
000181EC 6700                       		beq.s	loc_17BE0
000181EE 5229 003C                  		addq.b	#1,$3C(a1)
000181F2                            
000181F2                            loc_17BE0:
000181F2 51CE FFE4                  		dbf	d6,loc_17BC6
000181F6                            
000181F6 B029 003C                  		cmp.b	$3C(a1),d0
000181FA 6600                       		bne.s	loc_17BFA
000181FC 2268 0034                  		movea.l	$34(a0),a1
00018200 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018206 6600                       		bne.s	loc_17BFA
00018208 5428 0024                  		addq.b	#2,$24(a0)
0001820C                            
0001820C                            loc_17BFA:
0001820C 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018212 6700                       		beq.s	Obj48_Display
00018214 5268 0032                  		addq.w	#1,$32(a0)
00018218                            
00018218                            Obj48_Display:
00018218 6100 0000                  		bsr.w	sub_17C2A
0001821C 1028 0026                  		move.b	$26(a0),d0
00018220 4EB9 0000 8008             		jsr	(Obj15_Move2).l
00018226 4EF9 0000 DB72             		jmp	DisplaySprite
0001822C                            ; ===========================================================================
0001822C                            
0001822C                            Obj48_Display2:				; XREF: Obj48_Index
0001822C 6100 0000                  		bsr.w	sub_17C2A
00018230 4EB9 0000 7FC8             		jsr	(Obj48_Move).l
00018236 4EF9 0000 DB72             		jmp	DisplaySprite
0001823C                            
0001823C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001823C                            
0001823C                            
0001823C                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001823C 2268 0034                  		movea.l	$34(a0),a1
00018240 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018246 6400                       		bcc.s	loc_17C3C
00018248 0868 0000 001A             		bchg	#0,$1A(a0)
0001824E                            
0001824E                            loc_17C3C:
0001824E 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018254 3029 000C                  		move.w	$C(a1),d0
00018258 D068 0032                  		add.w	$32(a0),d0
0001825C 3140 0038                  		move.w	d0,$38(a0)
00018260 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018266 4A29 0022                  		tst.b	$22(a1)
0001826A 6A00                       		bpl.s	locret_17C66
0001826C 10BC 003F                  		move.b	#$3F,0(a0)
00018270 117C 0000 0024             		move.b	#0,$24(a0)
00018276                            
00018276                            locret_17C66:
00018276 4E75                       		rts	
00018278                            ; End of function sub_17C2A
00018278                            
00018278                            ; ===========================================================================
00018278                            
00018278                            loc_17C68:				; XREF: Obj48_Index
00018278 2268 0034                  		movea.l	$34(a0),a1
0001827C 4A29 0022                  		tst.b	$22(a1)
00018280 6A00                       		bpl.s	Obj48_Display3
00018282 10BC 003F                  		move.b	#$3F,0(a0)
00018286 117C 0000 0024             		move.b	#0,$24(a0)
0001828C                            
0001828C                            Obj48_Display3:
0001828C 4EF9 0000 DB72             		jmp	DisplaySprite
00018292                            ; ===========================================================================
00018292                            
00018292                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018292 7000                       		moveq	#0,d0
00018294 4A28 001A                  		tst.b	$1A(a0)
00018298 6600                       		bne.s	Obj48_Vanish
0001829A 5200                       		addq.b	#1,d0
0001829C                            
0001829C                            Obj48_Vanish:
0001829C 1140 001A                  		move.b	d0,$1A(a0)
000182A0 2268 0034                  		movea.l	$34(a0),a1
000182A4 4A29 0022                  		tst.b	$22(a1)
000182A8 6A00                       		bpl.s	Obj48_Display4
000182AA 117C 0000 0020             		move.b	#0,$20(a0)
000182B0 6100 FBC6                  		bsr.w	BossDefeated
000182B4 5328 003C                  		subq.b	#1,$3C(a0)
000182B8 6A00                       		bpl.s	Obj48_Display4
000182BA 10BC 003F                  		move.b	#$3F,(a0)
000182BE 117C 0000 0024             		move.b	#0,$24(a0)
000182C4                            
000182C4                            Obj48_Display4:
000182C4 4EF9 0000 DB72             		jmp	DisplaySprite
000182CA                            ; ===========================================================================
000182CA                            Ani_Eggman:
000182CA                            	include "_anim\Eggman.asm"
000182CA                            ; ---------------------------------------------------------------------------
000182CA                            ; Animation script - Eggman (bosses)
000182CA                            ; ---------------------------------------------------------------------------
000182CA 0000                       		dc.w byte_17CD4-Ani_Eggman
000182CC 0000                       		dc.w byte_17CD8-Ani_Eggman
000182CE 0000                       		dc.w byte_17CDC-Ani_Eggman
000182D0 0000                       		dc.w byte_17CE0-Ani_Eggman
000182D2 0000                       		dc.w byte_17CE4-Ani_Eggman
000182D4 0000                       		dc.w byte_17CE8-Ani_Eggman
000182D6 0000                       		dc.w byte_17CEC-Ani_Eggman
000182D8 0000                       		dc.w byte_17CF0-Ani_Eggman
000182DA 0000                       		dc.w byte_17CF4-Ani_Eggman
000182DC 0000                       		dc.w byte_17CF8-Ani_Eggman
000182DE 0000                       		dc.w byte_17CFC-Ani_Eggman
000182E0 0000                       		dc.w byte_17D00-Ani_Eggman
000182E2 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000182E6 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000182EA 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000182EE 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000182F2 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000182F6 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000182FA 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000182FE 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018302 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018306 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001830A 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001830E 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001831A                            		even
0001831A                            		even
0001831A                            
0001831A                            ; ---------------------------------------------------------------------------
0001831A                            ; Sprite mappings - Eggman (boss levels)
0001831A                            ; ---------------------------------------------------------------------------
0001831A                            Map_Eggman:
0001831A                            	include "_maps\Eggman.asm"
0001831A                            Map_dc7e:
0001831A 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001831C 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001831E 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018320 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018322 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018324 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018326 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018328 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001832A 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001832C 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
0001832E 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018330 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018332 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018334 06                         Map_dc7e_1A: 	dc.b $6
00018335 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001833A EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
0001833F FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018344 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018349 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001834E 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018353 02                         Map_dc7e_39: 	dc.b $2
00018354 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018359 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
0001835E 02                         Map_dc7e_44: 	dc.b $2
0001835F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018364 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018369 03                         Map_dc7e_4F: 	dc.b $3
0001836A E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
0001836F EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018374 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018379 03                         Map_dc7e_5F: 	dc.b $3
0001837A E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
0001837F EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00018384 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018389 03                         Map_dc7e_6F: 	dc.b $3
0001838A E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001838F EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018394 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018399 03                         Map_dc7e_7F: 	dc.b $3
0001839A E404 0064 04               	dc.b $E4, $4, $0, $64, $4
0001839F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000183A4 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000183A9 04                         Map_dc7e_8F: 	dc.b $4
000183AA E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000183AF E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000183B4 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000183B9 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000183BE 01                         Map_dc7e_A4: 	dc.b $1
000183BF 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000183C4 01                         Map_dc7e_AA: 	dc.b $1
000183C5 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000183CA 00                         Map_dc7e_B0: 	dc.b $0
000183CB 02                         Map_dc7e_B1: 	dc.b $2
000183CC 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000183D1 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000183D6 02                         Map_dc7e_BC: 	dc.b $2
000183D7 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000183DC 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000183E2 00                         	even
000183E2 00                         	even
000183E2                            
000183E2                            ; ---------------------------------------------------------------------------
000183E2                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183E2                            ; ---------------------------------------------------------------------------
000183E2                            Map_BossItems:
000183E2                            	include "_maps\Boss items.asm"
000183E2                            ; ---------------------------------------------------------------------------
000183E2                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183E2                            ; ---------------------------------------------------------------------------
000183E2 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000183E6 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000183EA 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000183EE 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000183F2 01                         byte_17DE4:	dc.b 1
000183F3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000183F8 02                         byte_17DEA:	dc.b 2
000183F9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000183FE F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018403 00                         		dc.b 0
00018404 01                         byte_17DF6:	dc.b 1
00018405 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001840A 01                         byte_17DFC:	dc.b 1
0001840B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018410 01                         byte_17E02:	dc.b 1
00018411 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018416 04                         byte_17E08:	dc.b 4
00018417 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001841C F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018421 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018426 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001842B 00                         		dc.b 0
0001842C 02                         byte_17E1E:	dc.b 2
0001842D 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018432 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018437 00                         		dc.b 0
00018438 02                         byte_17E2A:	dc.b 2
00018439 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001843E 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018444 00                         		even
00018444 00                         		even
00018444                            
00018444                            ; ===========================================================================
00018444                            ; ---------------------------------------------------------------------------
00018444                            ; Object 77 - Eggman (LZ)
00018444                            ; ---------------------------------------------------------------------------
00018444                            
00018444                            Obj77:					; XREF: Obj_Index
00018444 7000                       		moveq	#0,d0
00018446 1028 0024                  		move.b	$24(a0),d0
0001844A 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001844E 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018452                            ; ===========================================================================
00018452 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00018454 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00018456 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00018458 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001845A                            
0001845A 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001845C 0401                       		dc.b 4,	1
0001845E 0607                       		dc.b 6,	7
00018460                            ; ===========================================================================
00018460                            
00018460                            Obj77_Main:				; XREF: Obj77_Index
00018460 317C 1E10 0008             		move.w	#$1E10,8(a0)
00018466 317C 05C0 000C             		move.w	#$5C0,$C(a0)
0001846C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018472 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018478 117C 000F 0020             		move.b	#$F,$20(a0)
0001847E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018484 117C 0004 0018             		move.b	#4,$18(a0)
0001848A 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001848E 2248                       		movea.l	a0,a1
00018490 7202                       		moveq	#2,d1
00018492 6000                       		bra.s	Obj77_LoadBoss
00018494                            ; ===========================================================================
00018494                            
00018494                            Obj77_Loop:
00018494 4EB9 0000 E00E             		jsr	SingleObjLoad2
0001849A 6600                       		bne.s	Obj77_ShipMain
0001849C 12BC 0077                  		move.b	#$77,0(a1)
000184A0 3368 0008 0008             		move.w	8(a0),8(a1)
000184A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000184AC                            
000184AC                            Obj77_LoadBoss:				; XREF: Obj77_Main
000184AC 08A8 0000 0022             		bclr	#0,$22(a0)
000184B2 4229 0025                  		clr.b	$25(a1)
000184B6 135A 0024                  		move.b	(a2)+,$24(a1)
000184BA 135A 001C                  		move.b	(a2)+,$1C(a1)
000184BE 1368 0018 0018             		move.b	$18(a0),$18(a1)
000184C4 237C 0001 831A 0004        		move.l	#Map_Eggman,4(a1)
000184CC 337C 0400 0002             		move.w	#$400,2(a1)
000184D2 137C 0004 0001             		move.b	#4,1(a1)
000184D8 137C 0020 0019             		move.b	#$20,$19(a1)
000184DE 2348 0034                  		move.l	a0,$34(a1)
000184E2 51C9 FFB0                  		dbf	d1,Obj77_Loop
000184E6                            
000184E6                            Obj77_ShipMain:
000184E6 43F8 D000                  		lea	($FFFFD000).w,a1
000184EA 7000                       		moveq	#0,d0
000184EC 1028 0025                  		move.b	$25(a0),d0
000184F0 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000184F4 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000184F8 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
000184FE 4EB9 0000 AC42             		jsr	AnimateSprite
00018504 7003                       		moveq	#3,d0
00018506 C028 0022                  		and.b	$22(a0),d0
0001850A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018510 8128 0001                  		or.b	d0,1(a0)
00018514 4EF9 0000 DB72             		jmp	DisplaySprite
0001851A                            ; ===========================================================================
0001851A 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001851E 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018522 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00018526 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001852A                            ; ===========================================================================
0001852A                            
0001852A                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001852A 3029 0008                  		move.w	8(a1),d0
0001852E 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018532 6500                       		bcs.s	loc_17F38
00018534 317C FE80 0012             		move.w	#-$180,$12(a0)
0001853A 317C 0060 0010             		move.w	#$60,$10(a0)
00018540 5428 0025                  		addq.b	#2,$25(a0)
00018544                            
00018544                            loc_17F38:
00018544 6100 F974                  		bsr.w	BossMove
00018548 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001854E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018554                            
00018554                            loc_17F48:
00018554 4A28 003D                  		tst.b	$3D(a0)
00018558 6600                       		bne.s	loc_17F8E
0001855A 4A28 0022                  		tst.b	$22(a0)
0001855E 6B00                       		bmi.s	loc_17F92
00018560 4A28 0020                  		tst.b	$20(a0)
00018564 6600                       		bne.s	locret_17F8C
00018566 4A28 003E                  		tst.b	$3E(a0)
0001856A 6600                       		bne.s	loc_17F70
0001856C 117C 0020 003E             		move.b	#$20,$3E(a0)
00018572 303C 00AC                  		move.w	#$AC,d0
00018576 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001857C                            
0001857C                            loc_17F70:
0001857C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018580 7000                       		moveq	#0,d0
00018582 4A51                       		tst.w	(a1)
00018584 6600                       		bne.s	loc_17F7E
00018586 303C 0EEE                  		move.w	#$EEE,d0
0001858A                            
0001858A                            loc_17F7E:
0001858A 3280                       		move.w	d0,(a1)
0001858C 5328 003E                  		subq.b	#1,$3E(a0)
00018590 6600                       		bne.s	locret_17F8C
00018592 117C 000F 0020             		move.b	#$F,$20(a0)
00018598                            
00018598                            locret_17F8C:
00018598 4E75                       		rts	
0001859A                            ; ===========================================================================
0001859A                            
0001859A                            loc_17F8E:				; XREF: loc_17F48
0001859A 6000 F8DC                  		bra.w	BossDefeated
0001859E                            ; ===========================================================================
0001859E                            
0001859E                            loc_17F92:				; XREF: loc_17F48
0001859E 7064                       		moveq	#100,d0
000185A0 6100 0000                  		bsr.w	AddPoints
000185A4 117C 00FF 003D             		move.b	#-1,$3D(a0)
000185AA 4E75                       		rts	
000185AC                            ; ===========================================================================
000185AC                            
000185AC                            loc_17FA0:				; XREF: Obj77_ShipIndex
000185AC 70FE                       		moveq	#-2,d0
000185AE 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
000185B4 6500                       		bcs.s	loc_17FB6
000185B6 317C 1E48 0030             		move.w	#$1E48,$30(a0)
000185BC 4268 0010                  		clr.w	$10(a0)
000185C0 5240                       		addq.w	#1,d0
000185C2                            
000185C2                            loc_17FB6:
000185C2 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
000185C8 6E00                       		bgt.s	loc_17FCA
000185CA 317C 0500 0038             		move.w	#$500,$38(a0)
000185D0 4268 0012                  		clr.w	$12(a0)
000185D4 5240                       		addq.w	#1,d0
000185D6                            
000185D6                            loc_17FCA:
000185D6 6600                       		bne.s	loc_17FDC
000185D8 317C 0140 0010             		move.w	#$140,$10(a0)
000185DE 317C FE00 0012             		move.w	#-$200,$12(a0)
000185E4 5428 0025                  		addq.b	#2,$25(a0)
000185E8                            
000185E8                            loc_17FDC:
000185E8 6000 FF5A                  		bra.w	loc_17F38
000185EC                            ; ===========================================================================
000185EC                            
000185EC                            loc_17FE0:				; XREF: Obj77_ShipIndex
000185EC 70FE                       		moveq	#-2,d0
000185EE 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000185F4 6500                       		bcs.s	loc_17FF6
000185F6 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000185FC 4268 0010                  		clr.w	$10(a0)
00018600 5240                       		addq.w	#1,d0
00018602                            
00018602                            loc_17FF6:
00018602 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00018608 6E00                       		bgt.s	loc_1800A
0001860A 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018610 4268 0012                  		clr.w	$12(a0)
00018614 5240                       		addq.w	#1,d0
00018616                            
00018616                            loc_1800A:
00018616 6600                       		bne.s	loc_1801A
00018618 317C FE80 0012             		move.w	#-$180,$12(a0)
0001861E 5428 0025                  		addq.b	#2,$25(a0)
00018622 4228 003F                  		clr.b	$3F(a0)
00018626                            
00018626                            loc_1801A:
00018626 6000 FF1C                  		bra.w	loc_17F38
0001862A                            ; ===========================================================================
0001862A                            
0001862A                            loc_1801E:				; XREF: Obj77_ShipIndex
0001862A 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018630 6E00                       		bgt.s	loc_1804E
00018632 317C 0100 0038             		move.w	#$100,$38(a0)
00018638 317C 0140 0010             		move.w	#$140,$10(a0)
0001863E 317C FF80 0012             		move.w	#-$80,$12(a0)
00018644 4A28 003D                  		tst.b	$3D(a0)
00018648 6700                       		beq.s	loc_18046
0001864A E1E8 0010                  		asl	$10(a0)
0001864E E1E8 0012                  		asl	$12(a0)
00018652                            
00018652                            loc_18046:
00018652 5428 0025                  		addq.b	#2,$25(a0)
00018656 6000 FEEC                  		bra.w	loc_17F38
0001865A                            ; ===========================================================================
0001865A                            
0001865A                            loc_1804E:
0001865A 08E8 0000 0022             		bset	#0,$22(a0)
00018660 5428 003F                  		addq.b	#2,$3F(a0)
00018664 1028 003F                  		move.b	$3F(a0),d0
00018668 4EB9 0000 2C22             		jsr	(CalcSine).l
0001866E 4A41                       		tst.w	d1
00018670 6A00                       		bpl.s	loc_1806C
00018672 08A8 0000 0022             		bclr	#0,$22(a0)
00018678                            
00018678                            loc_1806C:
00018678 E840                       		asr.w	#4,d0
0001867A 4840                       		swap	d0
0001867C 4240                       		clr.w	d0
0001867E D0A8 0030                  		add.l	$30(a0),d0
00018682 4840                       		swap	d0
00018684 3140 0008                  		move.w	d0,8(a0)
00018688 3028 0012                  		move.w	$12(a0),d0
0001868C 3238 D00C                  		move.w	($FFFFD00C).w,d1
00018690 9268 000C                  		sub.w	$C(a0),d1
00018694 6500                       		bcs.s	loc_180A2
00018696 0441 0048                  		subi.w	#$48,d1
0001869A 6500                       		bcs.s	loc_180A2
0001869C E240                       		asr.w	#1,d0
0001869E 0441 0028                  		subi.w	#$28,d1
000186A2 6500                       		bcs.s	loc_180A2
000186A4 E240                       		asr.w	#1,d0
000186A6 0441 0028                  		subi.w	#$28,d1
000186AA 6500                       		bcs.s	loc_180A2
000186AC 7000                       		moveq	#0,d0
000186AE                            
000186AE                            loc_180A2:
000186AE 48C0                       		ext.l	d0
000186B0 E180                       		asl.l	#8,d0
000186B2 4A28 003D                  		tst.b	$3D(a0)
000186B6 6700                       		beq.s	loc_180AE
000186B8 D080                       		add.l	d0,d0
000186BA                            
000186BA                            loc_180AE:
000186BA D1A8 0038                  		add.l	d0,$38(a0)
000186BE 3168 0038 000C             		move.w	$38(a0),$C(a0)
000186C4 6000 FE8E                  		bra.w	loc_17F48
000186C8                            ; ===========================================================================
000186C8                            
000186C8                            loc_180BC:				; XREF: Obj77_ShipIndex
000186C8 70FE                       		moveq	#-2,d0
000186CA 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
000186D0 6500                       		bcs.s	loc_180D2
000186D2 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
000186D8 4268 0010                  		clr.w	$10(a0)
000186DC 5240                       		addq.w	#1,d0
000186DE                            
000186DE                            loc_180D2:
000186DE 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
000186E4 6E00                       		bgt.s	loc_180E6
000186E6 317C 00C0 0038             		move.w	#$C0,$38(a0)
000186EC 4268 0012                  		clr.w	$12(a0)
000186F0 5240                       		addq.w	#1,d0
000186F2                            
000186F2                            loc_180E6:
000186F2 6600                       		bne.s	loc_180F2
000186F4 5428 0025                  		addq.b	#2,$25(a0)
000186F8 08A8 0000 0022             		bclr	#0,$22(a0)
000186FE                            
000186FE                            loc_180F2:
000186FE 6000 FE44                  		bra.w	loc_17F38
00018702                            ; ===========================================================================
00018702                            
00018702                            loc_180F6:				; XREF: Obj77_ShipIndex
00018702 4A28 003D                  		tst.b	$3D(a0)
00018706 6600                       		bne.s	loc_18112
00018708 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001870E 6D00                       		blt.s	loc_18126
00018710 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018716 6E00                       		bgt.s	loc_18126
00018718 117C 0032 003C             		move.b	#$32,$3C(a0)
0001871E                            
0001871E                            loc_18112:
0001871E 303C 0082                  		move.w	#$82,d0
00018722 4EB9 0000 15B6             		jsr	(PlaySound).l	; play LZ music
00018728 08E8 0000 0022             		bset	#0,$22(a0)
0001872E 5428 0025                  		addq.b	#2,$25(a0)
00018732                            
00018732                            loc_18126:
00018732 6000 FE10                  		bra.w	loc_17F38
00018736                            ; ===========================================================================
00018736                            
00018736                            loc_1812A:				; XREF: Obj77_ShipIndex
00018736 4A28 003D                  		tst.b	$3D(a0)
0001873A 6600                       		bne.s	loc_18136
0001873C 5328 003C                  		subq.b	#1,$3C(a0)
00018740 6600                       		bne.s	loc_1814E
00018742                            
00018742                            loc_18136:
00018742 4228 003C                  		clr.b	$3C(a0)
00018746 317C 0400 0010             		move.w	#$400,$10(a0)
0001874C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018752 4228 003D                  		clr.b	$3D(a0)
00018756 5428 0025                  		addq.b	#2,$25(a0)
0001875A                            
0001875A                            loc_1814E:
0001875A 6000 FDE8                  		bra.w	loc_17F38
0001875E                            ; ===========================================================================
0001875E                            
0001875E                            loc_18152:				; XREF: Obj77_ShipIndex
0001875E 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018764 6400                       		bcc.s	loc_18160
00018766 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001876A 6000                       		bra.s	loc_18166
0001876C                            ; ===========================================================================
0001876C                            
0001876C                            loc_18160:
0001876C 4A28 0001                  		tst.b	1(a0)
00018770 6A00                       		bpl.s	Obj77_ShipDel
00018772                            
00018772                            loc_18166:
00018772 6000 FDD0                  		bra.w	loc_17F38
00018776                            ; ===========================================================================
00018776                            
00018776                            Obj77_ShipDel:
00018776 4EF9 0000 DBAE             		jmp	DeleteObject
0001877C                            ; ===========================================================================
0001877C                            
0001877C                            Obj77_FaceMain:				; XREF: Obj77_Index
0001877C 2268 0034                  		movea.l	$34(a0),a1
00018780 1011                       		move.b	(a1),d0
00018782 B010                       		cmp.b	(a0),d0
00018784 6600                       		bne.s	Obj77_FaceDel
00018786 7000                       		moveq	#0,d0
00018788 1029 0025                  		move.b	$25(a1),d0
0001878C 7201                       		moveq	#1,d1
0001878E 4A28 003D                  		tst.b	$3D(a0)
00018792 6700                       		beq.s	loc_1818C
00018794 720A                       		moveq	#$A,d1
00018796 6000                       		bra.s	loc_181A0
00018798                            ; ===========================================================================
00018798                            
00018798                            loc_1818C:
00018798 4A29 0020                  		tst.b	$20(a1)
0001879C 6600                       		bne.s	loc_18196
0001879E 7205                       		moveq	#5,d1
000187A0 6000                       		bra.s	loc_181A0
000187A2                            ; ===========================================================================
000187A2                            
000187A2                            loc_18196:
000187A2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000187A8 6500                       		bcs.s	loc_181A0
000187AA 7204                       		moveq	#4,d1
000187AC                            
000187AC                            loc_181A0:
000187AC 1141 001C                  		move.b	d1,$1C(a0)
000187B0 0C00 000E                  		cmpi.b	#$E,d0
000187B4 6600                       		bne.s	loc_181B6
000187B6 117C 0006 001C             		move.b	#6,$1C(a0)
000187BC 4A28 0001                  		tst.b	1(a0)
000187C0 6A00                       		bpl.s	Obj77_FaceDel
000187C2                            
000187C2                            loc_181B6:
000187C2 6000                       		bra.s	Obj77_Display
000187C4                            ; ===========================================================================
000187C4                            
000187C4                            Obj77_FaceDel:
000187C4 4EF9 0000 DBAE             		jmp	DeleteObject
000187CA                            ; ===========================================================================
000187CA                            
000187CA                            Obj77_FlameMain:			; XREF: Obj77_Index
000187CA 117C 0007 001C             		move.b	#7,$1C(a0)
000187D0 2268 0034                  		movea.l	$34(a0),a1
000187D4 1011                       		move.b	(a1),d0
000187D6 B010                       		cmp.b	(a0),d0
000187D8 6600                       		bne.s	Obj77_FlameDel
000187DA 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000187E0 6600                       		bne.s	loc_181F0
000187E2 117C 000B 001C             		move.b	#$B,$1C(a0)
000187E8 4A28 0001                  		tst.b	1(a0)
000187EC 6A00                       		bpl.s	Obj77_FlameDel
000187EE 6000                       		bra.s	loc_181F0
000187F0                            ; ===========================================================================
000187F0 4A69 0010                  		tst.w	$10(a1)
000187F4 6700                       		beq.s	loc_181F0
000187F6 117C 0008 001C             		move.b	#8,$1C(a0)
000187FC                            
000187FC                            loc_181F0:
000187FC 6000                       		bra.s	Obj77_Display
000187FE                            ; ===========================================================================
000187FE                            
000187FE                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
000187FE 4EF9 0000 DBAE             		jmp	DeleteObject
00018804                            ; ===========================================================================
00018804                            
00018804                            Obj77_Display:
00018804 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
0001880A 4EB9 0000 AC42             		jsr	AnimateSprite
00018810 2268 0034                  		movea.l	$34(a0),a1
00018814 3169 0008 0008             		move.w	8(a1),8(a0)
0001881A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018820 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018826 7003                       		moveq	#3,d0
00018828 C028 0022                  		and.b	$22(a0),d0
0001882C 0228 00FC 0001             		andi.b	#-4,1(a0)
00018832 8128 0001                  		or.b	d0,1(a0)
00018836 4EF9 0000 DB72             		jmp	DisplaySprite
0001883C                            ; ===========================================================================
0001883C                            ; ---------------------------------------------------------------------------
0001883C                            ; Object 73 - Eggman (MZ)
0001883C                            ; ---------------------------------------------------------------------------
0001883C                            
0001883C                            Obj73:					; XREF: Obj_Index
0001883C 7000                       		moveq	#0,d0
0001883E 1028 0024                  		move.b	$24(a0),d0
00018842 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018846 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001884A                            ; ===========================================================================
0001884A 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001884C 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001884E 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018850 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018852 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018854                            
00018854 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018857 0401 04                    		dc.b 4,	1, 4
0001885A 0607 04                    		dc.b 6,	7, 4
0001885D 0800 03                    		dc.b 8,	0, 3
00018860                            ; ===========================================================================
00018860                            
00018860                            Obj73_Main:				; XREF: Obj73_Index
00018860 3168 0008 0030             		move.w	8(a0),$30(a0)
00018866 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001886C 117C 000F 0020             		move.b	#$F,$20(a0)
00018872 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018878 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001887C 2248                       		movea.l	a0,a1
0001887E 7203                       		moveq	#3,d1
00018880 6000                       		bra.s	Obj73_LoadBoss
00018882                            ; ===========================================================================
00018882                            
00018882                            Obj73_Loop:
00018882 4EB9 0000 E00E             		jsr	SingleObjLoad2
00018888 6600                       		bne.s	Obj73_ShipMain
0001888A 12BC 0073                  		move.b	#$73,0(a1)
0001888E 3368 0008 0008             		move.w	8(a0),8(a1)
00018894 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001889A                            
0001889A                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001889A 08A8 0000 0022             		bclr	#0,$22(a0)
000188A0 4229 0025                  		clr.b	$25(a1)
000188A4 135A 0024                  		move.b	(a2)+,$24(a1)
000188A8 135A 001C                  		move.b	(a2)+,$1C(a1)
000188AC 135A 0018                  		move.b	(a2)+,$18(a1)
000188B0 237C 0001 831A 0004        		move.l	#Map_Eggman,4(a1)
000188B8 337C 0400 0002             		move.w	#$400,2(a1)
000188BE 137C 0004 0001             		move.b	#4,1(a1)
000188C4 137C 0020 0019             		move.b	#$20,$19(a1)
000188CA 2348 0034                  		move.l	a0,$34(a1)
000188CE 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000188D2                            
000188D2                            Obj73_ShipMain:
000188D2 7000                       		moveq	#0,d0
000188D4 1028 0025                  		move.b	$25(a0),d0
000188D8 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000188DC 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000188E0 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
000188E6 4EB9 0000 AC42             		jsr	AnimateSprite
000188EC 7003                       		moveq	#3,d0
000188EE C028 0022                  		and.b	$22(a0),d0
000188F2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000188F8 8128 0001                  		or.b	d0,1(a0)
000188FC 4EF9 0000 DB72             		jmp	DisplaySprite
00018902                            ; ===========================================================================
00018902 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018904 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018906 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018908 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001890A 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001890C                            ; ===========================================================================
0001890C                            
0001890C                            loc_18302:				; XREF: Obj73_ShipIndex
0001890C 1028 003F                  		move.b	$3F(a0),d0
00018910 5428 003F                  		addq.b	#2,$3F(a0)
00018914 4EB9 0000 2C22             		jsr	(CalcSine).l
0001891A E440                       		asr.w	#2,d0
0001891C 3140 0012                  		move.w	d0,$12(a0)
00018920 317C FF00 0010             		move.w	#-$100,$10(a0)
00018926 6100 F592                  		bsr.w	BossMove
0001892A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018930 6600                       		bne.s	loc_18334
00018932 5428 0025                  		addq.b	#2,$25(a0)
00018936 4228 0028                  		clr.b	$28(a0)
0001893A 42A8 0010                  		clr.l	$10(a0)
0001893E                            
0001893E                            loc_18334:
0001893E 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00018944 1140 0034                  		move.b	d0,$34(a0)
00018948                            
00018948                            loc_1833E:
00018948 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001894E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018954 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001895A 6400                       		bcc.s	locret_18390
0001895C 4A28 0022                  		tst.b	$22(a0)
00018960 6B00                       		bmi.s	loc_18392
00018962 4A28 0020                  		tst.b	$20(a0)
00018966 6600                       		bne.s	locret_18390
00018968 4A28 003E                  		tst.b	$3E(a0)
0001896C 6600                       		bne.s	loc_18374
0001896E 117C 0028 003E             		move.b	#$28,$3E(a0)
00018974 303C 00AC                  		move.w	#$AC,d0
00018978 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001897E                            
0001897E                            loc_18374:
0001897E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018982 7000                       		moveq	#0,d0
00018984 4A51                       		tst.w	(a1)
00018986 6600                       		bne.s	loc_18382
00018988 303C 0EEE                  		move.w	#$EEE,d0
0001898C                            
0001898C                            loc_18382:
0001898C 3280                       		move.w	d0,(a1)
0001898E 5328 003E                  		subq.b	#1,$3E(a0)
00018992 6600                       		bne.s	locret_18390
00018994 117C 000F 0020             		move.b	#$F,$20(a0)
0001899A                            
0001899A                            locret_18390:
0001899A 4E75                       		rts	
0001899C                            ; ===========================================================================
0001899C                            
0001899C                            loc_18392:				; XREF: loc_1833E
0001899C 7064                       		moveq	#100,d0
0001899E 6100 0000                  		bsr.w	AddPoints
000189A2 117C 0004 0025             		move.b	#4,$25(a0)
000189A8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000189AE 4268 0010                  		clr.w	$10(a0)
000189B2 4E75                       		rts	
000189B4                            ; ===========================================================================
000189B4                            
000189B4                            loc_183AA:				; XREF: Obj73_ShipIndex
000189B4 7000                       		moveq	#0,d0
000189B6 1028 0028                  		move.b	$28(a0),d0
000189BA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000189BE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000189C2 0228 0006 0028             		andi.b	#6,$28(a0)
000189C8 6000 FF7E                  		bra.w	loc_1833E
000189CC                            ; ===========================================================================
000189CC 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000189CE 0000                       		dc.w Obj73_MakeLava2-off_183C2
000189D0 0000                       		dc.w loc_183CA-off_183C2
000189D2 0000                       		dc.w Obj73_MakeLava2-off_183C2
000189D4                            ; ===========================================================================
000189D4                            
000189D4                            loc_183CA:				; XREF: off_183C2
000189D4 4A68 0010                  		tst.w	$10(a0)
000189D8 6600                       		bne.s	loc_183FE
000189DA 7040                       		moveq	#$40,d0
000189DC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000189E2 6700                       		beq.s	loc_183E6
000189E4 6500                       		bcs.s	loc_183DE
000189E6 4440                       		neg.w	d0
000189E8                            
000189E8                            loc_183DE:
000189E8 3140 0012                  		move.w	d0,$12(a0)
000189EC 6000 F4CC                  		bra.w	BossMove
000189F0                            ; ===========================================================================
000189F0                            
000189F0                            loc_183E6:
000189F0 317C 0200 0010             		move.w	#$200,$10(a0)
000189F6 317C 0100 0012             		move.w	#$100,$12(a0)
000189FC 0828 0000 0022             		btst	#0,$22(a0)
00018A02 6600                       		bne.s	loc_183FE
00018A04 4468 0010                  		neg.w	$10(a0)
00018A08                            
00018A08                            loc_183FE:
00018A08 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018A0E 6400                       		bcc.s	Obj73_MakeLava
00018A10 6100 F4A8                  		bsr.w	BossMove
00018A14 5968 0012                  		subq.w	#4,$12(a0)
00018A18                            
00018A18                            Obj73_MakeLava:
00018A18 5328 0034                  		subq.b	#1,$34(a0)
00018A1C 6400                       		bcc.s	loc_1845C
00018A1E 4EB9 0000 DFF8             		jsr	SingleObjLoad
00018A24 6600                       		bne.s	loc_1844A
00018A26 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018A2A 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018A30 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00018A36 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018A3C 80FC 0050                  		divu.w	#$50,d0
00018A40 4840                       		swap	d0
00018A42 0640 1878                  		addi.w	#$1878,d0
00018A46 3340 0008                  		move.w	d0,8(a1)
00018A4A EE09                       		lsr.b	#7,d1
00018A4C 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018A52                            
00018A52                            loc_1844A:
00018A52 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00018A58 0200 001F                  		andi.b	#$1F,d0
00018A5C 0600 0040                  		addi.b	#$40,d0
00018A60 1140 0034                  		move.b	d0,$34(a0)
00018A64                            
00018A64                            loc_1845C:
00018A64 0828 0000 0022             		btst	#0,$22(a0)
00018A6A 6700                       		beq.s	loc_18474
00018A6C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018A72 6D00                       		blt.s	locret_1849C
00018A74 317C 1910 0030             		move.w	#$1910,$30(a0)
00018A7A 6000                       		bra.s	loc_18482
00018A7C                            ; ===========================================================================
00018A7C                            
00018A7C                            loc_18474:
00018A7C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018A82 6E00                       		bgt.s	locret_1849C
00018A84 317C 1830 0030             		move.w	#$1830,$30(a0)
00018A8A                            
00018A8A                            loc_18482:
00018A8A 4268 0010                  		clr.w	$10(a0)
00018A8E 317C FE80 0012             		move.w	#-$180,$12(a0)
00018A94 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018A9A 6400                       		bcc.s	loc_18498
00018A9C 4468 0012                  		neg.w	$12(a0)
00018AA0                            
00018AA0                            loc_18498:
00018AA0 5428 0028                  		addq.b	#2,$28(a0)
00018AA4                            
00018AA4                            locret_1849C:
00018AA4 4E75                       		rts	
00018AA6                            ; ===========================================================================
00018AA6                            
00018AA6                            Obj73_MakeLava2:			; XREF: off_183C2
00018AA6 6100 F412                  		bsr.w	BossMove
00018AAA 3028 0038                  		move.w	$38(a0),d0
00018AAE 0440 022C                  		subi.w	#$22C,d0
00018AB2 6E00                       		bgt.s	locret_184F4
00018AB4 303C 022C                  		move.w	#$22C,d0
00018AB8 4A68 0012                  		tst.w	$12(a0)
00018ABC 6700                       		beq.s	loc_184EA
00018ABE 4268 0012                  		clr.w	$12(a0)
00018AC2 317C 0050 003C             		move.w	#$50,$3C(a0)
00018AC8 0868 0000 0022             		bchg	#0,$22(a0)
00018ACE 4EB9 0000 DFF8             		jsr	SingleObjLoad
00018AD4 6600                       		bne.s	loc_184EA
00018AD6 3368 0030 0008             		move.w	$30(a0),8(a1)
00018ADC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018AE2 0669 0018 000C             		addi.w	#$18,$C(a1)
00018AE8 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018AEC 137C 0001 0028             		move.b	#1,$28(a1)
00018AF2                            
00018AF2                            loc_184EA:
00018AF2 5368 003C                  		subq.w	#1,$3C(a0)
00018AF6 6600                       		bne.s	locret_184F4
00018AF8 5428 0028                  		addq.b	#2,$28(a0)
00018AFC                            
00018AFC                            locret_184F4:
00018AFC 4E75                       		rts	
00018AFE                            ; ===========================================================================
00018AFE                            
00018AFE                            loc_184F6:				; XREF: Obj73_ShipIndex
00018AFE 5368 003C                  		subq.w	#1,$3C(a0)
00018B02 6B00                       		bmi.s	loc_18500
00018B04 6000 F372                  		bra.w	BossDefeated
00018B08                            ; ===========================================================================
00018B08                            
00018B08                            loc_18500:
00018B08 08E8 0000 0022             		bset	#0,$22(a0)
00018B0E 08A8 0007 0022             		bclr	#7,$22(a0)
00018B14 4268 0010                  		clr.w	$10(a0)
00018B18 5428 0025                  		addq.b	#2,$25(a0)
00018B1C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018B22 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018B26 6600                       		bne.s	locret_1852A
00018B28 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018B2E 4268 0012                  		clr.w	$12(a0)
00018B32                            
00018B32                            locret_1852A:
00018B32 4E75                       		rts	
00018B34                            ; ===========================================================================
00018B34                            
00018B34                            loc_1852C:				; XREF: Obj73_ShipIndex
00018B34 5268 003C                  		addq.w	#1,$3C(a0)
00018B38 6700                       		beq.s	loc_18544
00018B3A 6A00                       		bpl.s	loc_1854E
00018B3C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018B42 6400                       		bcc.s	loc_18544
00018B44 0668 0018 0012             		addi.w	#$18,$12(a0)
00018B4A 6000                       		bra.s	loc_1857A
00018B4C                            ; ===========================================================================
00018B4C                            
00018B4C                            loc_18544:
00018B4C 4268 0012                  		clr.w	$12(a0)
00018B50 4268 003C                  		clr.w	$3C(a0)
00018B54 6000                       		bra.s	loc_1857A
00018B56                            ; ===========================================================================
00018B56                            
00018B56                            loc_1854E:
00018B56 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018B5C 6500                       		bcs.s	loc_18566
00018B5E 6700                       		beq.s	loc_1856C
00018B60 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018B66 6500                       		bcs.s	loc_1857A
00018B68 5428 0025                  		addq.b	#2,$25(a0)
00018B6C 6000                       		bra.s	loc_1857A
00018B6E                            ; ===========================================================================
00018B6E                            
00018B6E                            loc_18566:
00018B6E 5168 0012                  		subq.w	#8,$12(a0)
00018B72 6000                       		bra.s	loc_1857A
00018B74                            ; ===========================================================================
00018B74                            
00018B74                            loc_1856C:
00018B74 4268 0012                  		clr.w	$12(a0)
00018B78 303C 0083                  		move.w	#$83,d0
00018B7C 4EB9 0000 15B6             		jsr	(PlaySound).l	; play MZ music
00018B82                            
00018B82                            loc_1857A:
00018B82 6100 F336                  		bsr.w	BossMove
00018B86 6000 FDC0                  		bra.w	loc_1833E
00018B8A                            ; ===========================================================================
00018B8A                            
00018B8A                            loc_18582:				; XREF: Obj73_ShipIndex
00018B8A 317C 0500 0010             		move.w	#$500,$10(a0)
00018B90 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018B96 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018B9C 6400                       		bcc.s	loc_1859C
00018B9E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018BA2 6000                       		bra.s	loc_185A2
00018BA4                            ; ===========================================================================
00018BA4                            
00018BA4                            loc_1859C:
00018BA4 4A28 0001                  		tst.b	1(a0)
00018BA8 6A00                       		bpl.s	Obj73_ShipDel
00018BAA                            
00018BAA                            loc_185A2:
00018BAA 6100 F30E                  		bsr.w	BossMove
00018BAE 6000 FD98                  		bra.w	loc_1833E
00018BB2                            ; ===========================================================================
00018BB2                            
00018BB2                            Obj73_ShipDel:
00018BB2 4EF9 0000 DBAE             		jmp	DeleteObject
00018BB8                            ; ===========================================================================
00018BB8                            
00018BB8                            Obj73_FaceMain:				; XREF: Obj73_Index
00018BB8 7000                       		moveq	#0,d0
00018BBA 7201                       		moveq	#1,d1
00018BBC 2268 0034                  		movea.l	$34(a0),a1
00018BC0 1029 0025                  		move.b	$25(a1),d0
00018BC4 5540                       		subq.w	#2,d0
00018BC6 6600                       		bne.s	loc_185D2
00018BC8 0829 0001 0028             		btst	#1,$28(a1)
00018BCE 6700                       		beq.s	loc_185DA
00018BD0 4A69 0012                  		tst.w	$12(a1)
00018BD4 6600                       		bne.s	loc_185DA
00018BD6 7204                       		moveq	#4,d1
00018BD8 6000                       		bra.s	loc_185EE
00018BDA                            ; ===========================================================================
00018BDA                            
00018BDA                            loc_185D2:
00018BDA 5500                       		subq.b	#2,d0
00018BDC 6B00                       		bmi.s	loc_185DA
00018BDE 720A                       		moveq	#$A,d1
00018BE0 6000                       		bra.s	loc_185EE
00018BE2                            ; ===========================================================================
00018BE2                            
00018BE2                            loc_185DA:
00018BE2 4A29 0020                  		tst.b	$20(a1)
00018BE6 6600                       		bne.s	loc_185E4
00018BE8 7205                       		moveq	#5,d1
00018BEA 6000                       		bra.s	loc_185EE
00018BEC                            ; ===========================================================================
00018BEC                            
00018BEC                            loc_185E4:
00018BEC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018BF2 6500                       		bcs.s	loc_185EE
00018BF4 7204                       		moveq	#4,d1
00018BF6                            
00018BF6                            loc_185EE:
00018BF6 1141 001C                  		move.b	d1,$1C(a0)
00018BFA 5900                       		subq.b	#4,d0
00018BFC 6600                       		bne.s	loc_18602
00018BFE 117C 0006 001C             		move.b	#6,$1C(a0)
00018C04 4A28 0001                  		tst.b	1(a0)
00018C08 6A00                       		bpl.s	Obj73_FaceDel
00018C0A                            
00018C0A                            loc_18602:
00018C0A 6000                       		bra.s	Obj73_Display
00018C0C                            ; ===========================================================================
00018C0C                            
00018C0C                            Obj73_FaceDel:
00018C0C 4EF9 0000 DBAE             		jmp	DeleteObject
00018C12                            ; ===========================================================================
00018C12                            
00018C12                            Obj73_FlameMain:			; XREF: Obj73_Index
00018C12 117C 0007 001C             		move.b	#7,$1C(a0)
00018C18 2268 0034                  		movea.l	$34(a0),a1
00018C1C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C22 6D00                       		blt.s	loc_1862A
00018C24 117C 000B 001C             		move.b	#$B,$1C(a0)
00018C2A 4A28 0001                  		tst.b	1(a0)
00018C2E 6A00                       		bpl.s	Obj73_FlameDel
00018C30 6000                       		bra.s	loc_18636
00018C32                            ; ===========================================================================
00018C32                            
00018C32                            loc_1862A:
00018C32 4A69 0010                  		tst.w	$10(a1)
00018C36 6700                       		beq.s	loc_18636
00018C38 117C 0008 001C             		move.b	#8,$1C(a0)
00018C3E                            
00018C3E                            loc_18636:
00018C3E 6000                       		bra.s	Obj73_Display
00018C40                            ; ===========================================================================
00018C40                            
00018C40                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018C40 4EF9 0000 DBAE             		jmp	DeleteObject
00018C46                            ; ===========================================================================
00018C46                            
00018C46                            Obj73_Display:
00018C46 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
00018C4C 4EB9 0000 AC42             		jsr	AnimateSprite
00018C52                            
00018C52                            loc_1864A:
00018C52 2268 0034                  		movea.l	$34(a0),a1
00018C56 3169 0008 0008             		move.w	8(a1),8(a0)
00018C5C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018C62 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018C68 7003                       		moveq	#3,d0
00018C6A C028 0022                  		and.b	$22(a0),d0
00018C6E 0228 00FC 0001             		andi.b	#-4,1(a0)
00018C74 8128 0001                  		or.b	d0,1(a0)
00018C78 4EF9 0000 DB72             		jmp	DisplaySprite
00018C7E                            ; ===========================================================================
00018C7E                            
00018C7E                            Obj73_TubeMain:				; XREF: Obj73_Index
00018C7E 2268 0034                  		movea.l	$34(a0),a1
00018C82 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C88 6600                       		bne.s	loc_18688
00018C8A 4A28 0001                  		tst.b	1(a0)
00018C8E 6A00                       		bpl.s	Obj73_TubeDel
00018C90                            
00018C90                            loc_18688:
00018C90 217C 0001 83E2 0004        		move.l	#Map_BossItems,4(a0)
00018C98 317C 246C 0002             		move.w	#$246C,2(a0)
00018C9E 117C 0004 001A             		move.b	#4,$1A(a0)
00018CA4 60AC                       		bra.s	loc_1864A
00018CA6                            ; ===========================================================================
00018CA6                            
00018CA6                            Obj73_TubeDel:
00018CA6 4EF9 0000 DBAE             		jmp	DeleteObject
00018CAC                            ; ===========================================================================
00018CAC                            ; ---------------------------------------------------------------------------
00018CAC                            ; Object 74 - lava that	Eggman drops (MZ)
00018CAC                            ; ---------------------------------------------------------------------------
00018CAC                            
00018CAC                            Obj74:					; XREF: Obj_Index
00018CAC 7000                       		moveq	#0,d0
00018CAE 1028 0024                  		move.b	$24(a0),d0
00018CB2 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018CB6 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018CBA 4EF9 0000 DB72             		jmp	DisplaySprite
00018CC0                            ; ===========================================================================
00018CC0 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018CC2 0000                       		dc.w Obj74_Action-Obj74_Index
00018CC4 0000                       		dc.w loc_18886-Obj74_Index
00018CC6 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018CC8                            ; ===========================================================================
00018CC8                            
00018CC8                            Obj74_Main:				; XREF: Obj74_Index
00018CC8 117C 0008 0016             		move.b	#8,$16(a0)
00018CCE 117C 0008 0017             		move.b	#8,$17(a0)
00018CD4 217C 0000 B836 0004        		move.l	#Map_obj14,4(a0)
00018CDC 317C 0345 0002             		move.w	#$345,2(a0)
00018CE2 117C 0004 0001             		move.b	#4,1(a0)
00018CE8 117C 0005 0018             		move.b	#5,$18(a0)
00018CEE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018CF4 117C 0008 0019             		move.b	#8,$19(a0)
00018CFA 5428 0024                  		addq.b	#2,$24(a0)
00018CFE 4A28 0028                  		tst.b	$28(a0)
00018D02 6600                       		bne.s	loc_1870A
00018D04 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D0A 5428 0024                  		addq.b	#2,$24(a0)
00018D0E 6000 0000                  		bra.w	loc_18886
00018D12                            ; ===========================================================================
00018D12                            
00018D12                            loc_1870A:
00018D12 117C 001E 0029             		move.b	#$1E,$29(a0)
00018D18 303C 00AE                  		move.w	#$AE,d0
00018D1C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava sound
00018D22                            
00018D22                            Obj74_Action:				; XREF: Obj74_Index
00018D22 7000                       		moveq	#0,d0
00018D24 1028 0025                  		move.b	$25(a0),d0
00018D28 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018D2C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018D30 4EB9 0000 DB4C             		jsr	SpeedToPos
00018D36 43F9 0000 EA2C             		lea	(Ani_obj14).l,a1
00018D3C 4EB9 0000 AC42             		jsr	AnimateSprite
00018D42 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018D48 6200                       		bhi.s	Obj74_Delete
00018D4A 4E75                       		rts	
00018D4C                            ; ===========================================================================
00018D4C                            
00018D4C                            Obj74_Delete:
00018D4C 4EF9 0000 DBAE             		jmp	DeleteObject
00018D52                            ; ===========================================================================
00018D52 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018D54 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018D56 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018D58 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018D5A                            ; ===========================================================================
00018D5A                            
00018D5A                            Obj74_Drop:				; XREF: Obj74_Index2
00018D5A 08E8 0001 0022             		bset	#1,$22(a0)
00018D60 5328 0029                  		subq.b	#1,$29(a0)
00018D64 6A00                       		bpl.s	locret_18780
00018D66 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D6C 4228 0028                  		clr.b	$28(a0)
00018D70 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D76 08A8 0001 0022             		bclr	#1,$22(a0)
00018D7C 6100 C698                  		bsr.w	ObjHitFloor
00018D80 4A41                       		tst.w	d1
00018D82 6A00                       		bpl.s	locret_18780
00018D84 5428 0025                  		addq.b	#2,$25(a0)
00018D88                            
00018D88                            locret_18780:
00018D88 4E75                       		rts	
00018D8A                            ; ===========================================================================
00018D8A                            
00018D8A                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018D8A 5568 000C                  		subq.w	#2,$C(a0)
00018D8E 08E8 0007 0002             		bset	#7,2(a0)
00018D94 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018D9A 4268 0012                  		clr.w	$12(a0)
00018D9E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018DA4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018DAA 117C 0003 0029             		move.b	#3,$29(a0)
00018DB0 4EB9 0000 E00E             		jsr	SingleObjLoad2
00018DB6 6600                       		bne.s	loc_187CA
00018DB8 47D1                       		lea	(a1),a3
00018DBA 45D0                       		lea	(a0),a2
00018DBC 7003                       		moveq	#3,d0
00018DBE                            
00018DBE                            Obj74_Loop:
00018DBE 26DA                       		move.l	(a2)+,(a3)+
00018DC0 26DA                       		move.l	(a2)+,(a3)+
00018DC2 26DA                       		move.l	(a2)+,(a3)+
00018DC4 26DA                       		move.l	(a2)+,(a3)+
00018DC6 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018DCA                            
00018DCA 4469 0010                  		neg.w	$10(a1)
00018DCE 5429 0025                  		addq.b	#2,$25(a1)
00018DD2                            
00018DD2                            loc_187CA:
00018DD2 5428 0025                  		addq.b	#2,$25(a0)
00018DD6 4E75                       		rts	
00018DD8                            
00018DD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DD8                            
00018DD8                            
00018DD8                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018DD8 4EB9 0000 E00E             		jsr	SingleObjLoad2
00018DDE 6600                       		bne.s	locret_187EE
00018DE0 3368 0008 0008             		move.w	8(a0),8(a1)
00018DE6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018DEC 12BC 0074                  		move.b	#$74,(a1)
00018DF0 337C 0067 0028             		move.w	#$67,$28(a1)
00018DF6                            
00018DF6                            locret_187EE:
00018DF6 4E75                       		rts	
00018DF8                            ; End of function Obj74_Duplicate2
00018DF8                            
00018DF8                            ; ===========================================================================
00018DF8                            
00018DF8                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018DF8 6100 C61C                  		bsr.w	ObjHitFloor
00018DFC 4A41                       		tst.w	d1
00018DFE 6A00                       		bpl.s	loc_18826
00018E00 3028 0008                  		move.w	8(a0),d0
00018E04 0C40 1940                  		cmpi.w	#$1940,d0
00018E08 6E00                       		bgt.s	loc_1882C
00018E0A 3228 0030                  		move.w	$30(a0),d1
00018E0E B240                       		cmp.w	d0,d1
00018E10 6700                       		beq.s	loc_1881E
00018E12 0240 0010                  		andi.w	#$10,d0
00018E16 0241 0010                  		andi.w	#$10,d1
00018E1A B240                       		cmp.w	d0,d1
00018E1C 6700                       		beq.s	loc_1881E
00018E1E 61B8                       		bsr.s	Obj74_Duplicate2
00018E20 3168 0008 0032             		move.w	8(a0),$32(a0)
00018E26                            
00018E26                            loc_1881E:
00018E26 3168 0008 0030             		move.w	8(a0),$30(a0)
00018E2C 4E75                       		rts	
00018E2E                            ; ===========================================================================
00018E2E                            
00018E2E                            loc_18826:
00018E2E 5428 0025                  		addq.b	#2,$25(a0)
00018E32 4E75                       		rts	
00018E34                            ; ===========================================================================
00018E34                            
00018E34                            loc_1882C:
00018E34 5428 0024                  		addq.b	#2,$24(a0)
00018E38 4E75                       		rts	
00018E3A                            ; ===========================================================================
00018E3A                            
00018E3A                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018E3A 08A8 0001 0022             		bclr	#1,$22(a0)
00018E40 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018E46 3028 0008                  		move.w	8(a0),d0
00018E4A 9068 0032                  		sub.w	$32(a0),d0
00018E4E 6A00                       		bpl.s	loc_1884A
00018E50 4440                       		neg.w	d0
00018E52                            
00018E52                            loc_1884A:
00018E52 0C40 0012                  		cmpi.w	#$12,d0
00018E56 6600                       		bne.s	loc_18856
00018E58 08A8 0007 0002             		bclr	#7,2(a0)
00018E5E                            
00018E5E                            loc_18856:
00018E5E 6100 C5B6                  		bsr.w	ObjHitFloor
00018E62 4A41                       		tst.w	d1
00018E64 6A00                       		bpl.s	locret_1887E
00018E66 5328 0029                  		subq.b	#1,$29(a0)
00018E6A 6700                       		beq.s	Obj74_Delete2
00018E6C 4268 0012                  		clr.w	$12(a0)
00018E70 3168 0032 0008             		move.w	$32(a0),8(a0)
00018E76 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E7C 08E8 0007 0002             		bset	#7,2(a0)
00018E82 5528 0025                  		subq.b	#2,$25(a0)
00018E86                            
00018E86                            locret_1887E:
00018E86 4E75                       		rts	
00018E88                            ; ===========================================================================
00018E88                            
00018E88                            Obj74_Delete2:
00018E88 4EF9 0000 DBAE             		jmp	DeleteObject
00018E8E                            ; ===========================================================================
00018E8E                            
00018E8E                            loc_18886:				; XREF: Obj74_Index
00018E8E 08E8 0007 0002             		bset	#7,2(a0)
00018E94 5328 0029                  		subq.b	#1,$29(a0)
00018E98 6600                       		bne.s	Obj74_Animate
00018E9A 117C 0001 001C             		move.b	#1,$1C(a0)
00018EA0 5968 000C                  		subq.w	#4,$C(a0)
00018EA4 4228 0020                  		clr.b	$20(a0)
00018EA8                            
00018EA8                            Obj74_Animate:
00018EA8 43F9 0000 EA2C             		lea	(Ani_obj14).l,a1
00018EAE 4EF9 0000 AC42             		jmp	AnimateSprite
00018EB4                            ; ===========================================================================
00018EB4                            
00018EB4                            Obj74_Delete3:				; XREF: Obj74_Index
00018EB4 4EF9 0000 DBAE             		jmp	DeleteObject
00018EBA                            ; ===========================================================================
00018EBA                            
00018EBA                            Obj7A_Delete:
00018EBA 4EF9 0000 DBAE             		jmp	DeleteObject
00018EC0                            ; ===========================================================================
00018EC0                            ; ---------------------------------------------------------------------------
00018EC0                            ; Object 7A - Eggman (SLZ)
00018EC0                            ; ---------------------------------------------------------------------------
00018EC0                            
00018EC0                            Obj7A:					; XREF: Obj_Index
00018EC0 7000                       		moveq	#0,d0
00018EC2 1028 0024                  		move.b	$24(a0),d0
00018EC6 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018ECA 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018ECE                            ; ===========================================================================
00018ECE 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018ED0 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018ED2 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018ED4 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018ED6 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018ED8                            
00018ED8 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018EDB 0401 04                    		dc.b 4,	1, 4
00018EDE 0607 04                    		dc.b 6,	7, 4
00018EE1 0800 03                    		dc.b 8,	0, 3
00018EE4                            ; ===========================================================================
00018EE4                            
00018EE4                            Obj7A_Main:				; XREF: Obj7A_Index
00018EE4 317C 2188 0008             		move.w	#$2188,8(a0)
00018EEA 317C 0228 000C             		move.w	#$228,$C(a0)
00018EF0 3168 0008 0030             		move.w	8(a0),$30(a0)
00018EF6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018EFC 117C 000F 0020             		move.b	#$F,$20(a0)
00018F02 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018F08 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018F0C 2248                       		movea.l	a0,a1
00018F0E 7203                       		moveq	#3,d1
00018F10 6000                       		bra.s	Obj7A_LoadBoss
00018F12                            ; ===========================================================================
00018F12                            
00018F12                            Obj7A_Loop:
00018F12 4EB9 0000 E00E             		jsr	SingleObjLoad2
00018F18 6600                       		bne.s	loc_1895C
00018F1A 12BC 007A                  		move.b	#$7A,0(a1)
00018F1E 3368 0008 0008             		move.w	8(a0),8(a1)
00018F24 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F2A                            
00018F2A                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018F2A 08A8 0000 0022             		bclr	#0,$22(a0)
00018F30 4229 0025                  		clr.b	$25(a1)
00018F34 135A 0024                  		move.b	(a2)+,$24(a1)
00018F38 135A 001C                  		move.b	(a2)+,$1C(a1)
00018F3C 135A 0018                  		move.b	(a2)+,$18(a1)
00018F40 237C 0001 831A 0004        		move.l	#Map_Eggman,4(a1)
00018F48 337C 0400 0002             		move.w	#$400,2(a1)
00018F4E 137C 0004 0001             		move.b	#4,1(a1)
00018F54 137C 0020 0019             		move.b	#$20,$19(a1)
00018F5A 2348 0034                  		move.l	a0,$34(a1)
00018F5E 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018F62                            
00018F62                            loc_1895C:
00018F62 43F8 D040                  		lea	($FFFFD040).w,a1
00018F66 45E8 002A                  		lea	$2A(a0),a2
00018F6A 705E                       		moveq	#$5E,d0
00018F6C 723E                       		moveq	#$3E,d1
00018F6E                            
00018F6E                            loc_18968:
00018F6E B011                       		cmp.b	(a1),d0
00018F70 6600                       		bne.s	loc_18974
00018F72 4A29 0028                  		tst.b	$28(a1)
00018F76 6700                       		beq.s	loc_18974
00018F78 34C9                       		move.w	a1,(a2)+
00018F7A                            
00018F7A                            loc_18974:
00018F7A D2FC 0040                  		adda.w	#$40,a1
00018F7E 51C9 FFEE                  		dbf	d1,loc_18968
00018F82                            
00018F82                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018F82 7000                       		moveq	#0,d0
00018F84 1028 0025                  		move.b	$25(a0),d0
00018F88 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018F8C 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018F90 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
00018F96 4EB9 0000 AC42             		jsr	AnimateSprite
00018F9C 7003                       		moveq	#3,d0
00018F9E C028 0022                  		and.b	$22(a0),d0
00018FA2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018FA8 8128 0001                  		or.b	d0,1(a0)
00018FAC 4EF9 0000 DB72             		jmp	DisplaySprite
00018FB2                            ; ===========================================================================
00018FB2 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018FB4 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018FB6 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018FB8 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018FBA 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018FBC 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018FBE                            ; ===========================================================================
00018FBE                            
00018FBE                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018FBE 317C FF00 0010             		move.w	#-$100,$10(a0)
00018FC4 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018FCA 6400                       		bcc.s	loc_189CA
00018FCC 5428 0025                  		addq.b	#2,$25(a0)
00018FD0                            
00018FD0                            loc_189CA:
00018FD0 6100 EEE8                  		bsr.w	BossMove
00018FD4 1028 003F                  		move.b	$3F(a0),d0
00018FD8 5428 003F                  		addq.b	#2,$3F(a0)
00018FDC 4EB9 0000 2C22             		jsr	(CalcSine).l
00018FE2 EC40                       		asr.w	#6,d0
00018FE4 D068 0038                  		add.w	$38(a0),d0
00018FE8 3140 000C                  		move.w	d0,$C(a0)
00018FEC 3168 0030 0008             		move.w	$30(a0),8(a0)
00018FF2 6000                       		bra.s	loc_189FE
00018FF4                            ; ===========================================================================
00018FF4                            
00018FF4                            loc_189EE:
00018FF4 6100 EEC4                  		bsr.w	BossMove
00018FF8 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018FFE 3168 0030 0008             		move.w	$30(a0),8(a0)
00019004                            
00019004                            loc_189FE:
00019004 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001900A 6400                       		bcc.s	locret_18A44
0001900C 4A28 0022                  		tst.b	$22(a0)
00019010 6B00                       		bmi.s	loc_18A46
00019012 4A28 0020                  		tst.b	$20(a0)
00019016 6600                       		bne.s	locret_18A44
00019018 4A28 003E                  		tst.b	$3E(a0)
0001901C 6600                       		bne.s	loc_18A28
0001901E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019024 303C 00AC                  		move.w	#$AC,d0
00019028 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001902E                            
0001902E                            loc_18A28:
0001902E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019032 7000                       		moveq	#0,d0
00019034 4A51                       		tst.w	(a1)
00019036 6600                       		bne.s	loc_18A36
00019038 303C 0EEE                  		move.w	#$EEE,d0
0001903C                            
0001903C                            loc_18A36:
0001903C 3280                       		move.w	d0,(a1)
0001903E 5328 003E                  		subq.b	#1,$3E(a0)
00019042 6600                       		bne.s	locret_18A44
00019044 117C 000F 0020             		move.b	#$F,$20(a0)
0001904A                            
0001904A                            locret_18A44:
0001904A 4E75                       		rts	
0001904C                            ; ===========================================================================
0001904C                            
0001904C                            loc_18A46:
0001904C 7064                       		moveq	#100,d0
0001904E 6100 0000                  		bsr.w	AddPoints
00019052 117C 0006 0025             		move.b	#6,$25(a0)
00019058 117C 0078 003C             		move.b	#$78,$3C(a0)
0001905E 4268 0010                  		clr.w	$10(a0)
00019062 4E75                       		rts	
00019064                            ; ===========================================================================
00019064                            
00019064                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019064 3028 0030                  		move.w	$30(a0),d0
00019068 317C 0200 0010             		move.w	#$200,$10(a0)
0001906E 0828 0000 0022             		btst	#0,$22(a0)
00019074 6600                       		bne.s	loc_18A7C
00019076 4468 0010                  		neg.w	$10(a0)
0001907A 0C40 2008                  		cmpi.w	#$2008,d0
0001907E 6E00                       		bgt.s	loc_18A88
00019080 6000                       		bra.s	loc_18A82
00019082                            ; ===========================================================================
00019082                            
00019082                            loc_18A7C:
00019082 0C40 2138                  		cmpi.w	#$2138,d0
00019086 6D00                       		blt.s	loc_18A88
00019088                            
00019088                            loc_18A82:
00019088 0868 0000 0022             		bchg	#0,$22(a0)
0001908E                            
0001908E                            loc_18A88:
0001908E 3028 0008                  		move.w	8(a0),d0
00019092 72FF                       		moveq	#-1,d1
00019094 7402                       		moveq	#2,d2
00019096 45E8 002A                  		lea	$2A(a0),a2
0001909A 7828                       		moveq	#$28,d4
0001909C 4A68 0010                  		tst.w	$10(a0)
000190A0 6A00                       		bpl.s	loc_18A9E
000190A2 4444                       		neg.w	d4
000190A4                            
000190A4                            loc_18A9E:
000190A4 321A                       		move.w	(a2)+,d1
000190A6 2641                       		movea.l	d1,a3
000190A8 082B 0003 0022             		btst	#3,$22(a3)
000190AE 6600                       		bne.s	loc_18AB4
000190B0 362B 0008                  		move.w	8(a3),d3
000190B4 D644                       		add.w	d4,d3
000190B6 9640                       		sub.w	d0,d3
000190B8 6700                       		beq.s	loc_18AC0
000190BA                            
000190BA                            loc_18AB4:
000190BA 51CA FFE8                  		dbf	d2,loc_18A9E
000190BE                            
000190BE 1142 0028                  		move.b	d2,$28(a0)
000190C2 6000 FF0C                  		bra.w	loc_189CA
000190C6                            ; ===========================================================================
000190C6                            
000190C6                            loc_18AC0:
000190C6 1142 0028                  		move.b	d2,$28(a0)
000190CA 5428 0025                  		addq.b	#2,$25(a0)
000190CE 117C 0028 003C             		move.b	#$28,$3C(a0)
000190D4 6000 FEFA                  		bra.w	loc_189CA
000190D8                            ; ===========================================================================
000190D8                            
000190D8                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000190D8 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000190DE 6600                       		bne.s	loc_18B36
000190E0 70FF                       		moveq	#-1,d0
000190E2 1028 0028                  		move.b	$28(a0),d0
000190E6 4880                       		ext.w	d0
000190E8 6B00                       		bmi.s	loc_18B40
000190EA 5540                       		subq.w	#2,d0
000190EC 4440                       		neg.w	d0
000190EE D040                       		add.w	d0,d0
000190F0 43E8 002A                  		lea	$2A(a0),a1
000190F4 3031 0000                  		move.w	(a1,d0.w),d0
000190F8 2440                       		movea.l	d0,a2
000190FA 43F8 D040                  		lea	($FFFFD040).w,a1
000190FE 723E                       		moveq	#$3E,d1
00019100                            
00019100                            loc_18AFA:
00019100 B0A9 003C                  		cmp.l	$3C(a1),d0
00019104 6700                       		beq.s	loc_18B40
00019106 D2FC 0040                  		adda.w	#$40,a1
0001910A 51C9 FFF4                  		dbf	d1,loc_18AFA
0001910E                            
0001910E 2F08                       		move.l	a0,-(sp)
00019110 41D2                       		lea	(a2),a0
00019112 4EB9 0000 E00E             		jsr	SingleObjLoad2
00019118 205F                       		movea.l	(sp)+,a0
0001911A 6600                       		bne.s	loc_18B40
0001911C 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019120 3368 0008 0008             		move.w	8(a0),8(a1)
00019126 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001912C 0669 0020 000C             		addi.w	#$20,$C(a1)
00019132 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019138 234A 003C                  		move.l	a2,$3C(a1)
0001913C                            
0001913C                            loc_18B36:
0001913C 5328 003C                  		subq.b	#1,$3C(a0)
00019140 6700                       		beq.s	loc_18B40
00019142 6000 FEC0                  		bra.w	loc_189FE
00019146                            ; ===========================================================================
00019146                            
00019146                            loc_18B40:
00019146 5528 0025                  		subq.b	#2,$25(a0)
0001914A 6000 FE84                  		bra.w	loc_189CA
0001914E                            ; ===========================================================================
0001914E                            
0001914E                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001914E 5328 003C                  		subq.b	#1,$3C(a0)
00019152 6B00                       		bmi.s	loc_18B52
00019154 6000 ED22                  		bra.w	BossDefeated
00019158                            ; ===========================================================================
00019158                            
00019158                            loc_18B52:
00019158 5428 0025                  		addq.b	#2,$25(a0)
0001915C 4268 0012                  		clr.w	$12(a0)
00019160 08E8 0000 0022             		bset	#0,$22(a0)
00019166 08A8 0007 0022             		bclr	#7,$22(a0)
0001916C 4268 0010                  		clr.w	$10(a0)
00019170 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019176 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001917A 6600                       		bne.s	loc_18B7C
0001917C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019182                            
00019182                            loc_18B7C:
00019182 6000 FE80                  		bra.w	loc_189FE
00019186                            ; ===========================================================================
00019186                            
00019186                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019186 5228 003C                  		addq.b	#1,$3C(a0)
0001918A 6700                       		beq.s	loc_18B90
0001918C 6A00                       		bpl.s	loc_18B96
0001918E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019194 6000                       		bra.s	loc_18BC2
00019196                            ; ===========================================================================
00019196                            
00019196                            loc_18B90:
00019196 4268 0012                  		clr.w	$12(a0)
0001919A 6000                       		bra.s	loc_18BC2
0001919C                            ; ===========================================================================
0001919C                            
0001919C                            loc_18B96:
0001919C 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000191A2 6500                       		bcs.s	loc_18BAE
000191A4 6700                       		beq.s	loc_18BB4
000191A6 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000191AC 6500                       		bcs.s	loc_18BC2
000191AE 5428 0025                  		addq.b	#2,$25(a0)
000191B2 6000                       		bra.s	loc_18BC2
000191B4                            ; ===========================================================================
000191B4                            
000191B4                            loc_18BAE:
000191B4 5168 0012                  		subq.w	#8,$12(a0)
000191B8 6000                       		bra.s	loc_18BC2
000191BA                            ; ===========================================================================
000191BA                            
000191BA                            loc_18BB4:
000191BA 4268 0012                  		clr.w	$12(a0)
000191BE 303C 0084                  		move.w	#$84,d0
000191C2 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SLZ music
000191C8                            
000191C8                            loc_18BC2:
000191C8 6000 FE2A                  		bra.w	loc_189EE
000191CC                            ; ===========================================================================
000191CC                            
000191CC                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000191CC 317C 0400 0010             		move.w	#$400,$10(a0)
000191D2 317C FFC0 0012             		move.w	#-$40,$12(a0)
000191D8 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000191DE 6400                       		bcc.s	loc_18BE0
000191E0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000191E4 6000                       		bra.s	loc_18BE8
000191E6                            ; ===========================================================================
000191E6                            
000191E6                            loc_18BE0:
000191E6 4A28 0001                  		tst.b	1(a0)
000191EA 6A00 FCCE                  		bpl.w	Obj7A_Delete
000191EE                            
000191EE                            loc_18BE8:
000191EE 6100 ECCA                  		bsr.w	BossMove
000191F2 6000 FDDC                  		bra.w	loc_189CA
000191F6                            ; ===========================================================================
000191F6                            
000191F6                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000191F6 7000                       		moveq	#0,d0
000191F8 7201                       		moveq	#1,d1
000191FA 2268 0034                  		movea.l	$34(a0),a1
000191FE 1029 0025                  		move.b	$25(a1),d0
00019202 0C00 0006                  		cmpi.b	#6,d0
00019206 6B00                       		bmi.s	loc_18C06
00019208 720A                       		moveq	#$A,d1
0001920A 6000                       		bra.s	loc_18C1A
0001920C                            ; ===========================================================================
0001920C                            
0001920C                            loc_18C06:
0001920C 4A29 0020                  		tst.b	$20(a1)
00019210 6600                       		bne.s	loc_18C10
00019212 7205                       		moveq	#5,d1
00019214 6000                       		bra.s	loc_18C1A
00019216                            ; ===========================================================================
00019216                            
00019216                            loc_18C10:
00019216 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001921C 6500                       		bcs.s	loc_18C1A
0001921E 7204                       		moveq	#4,d1
00019220                            
00019220                            loc_18C1A:
00019220 1141 001C                  		move.b	d1,$1C(a0)
00019224 0C00 000A                  		cmpi.b	#$A,d0
00019228 6600                       		bne.s	loc_18C32
0001922A 117C 0006 001C             		move.b	#6,$1C(a0)
00019230 4A28 0001                  		tst.b	1(a0)
00019234 6A00 FC84                  		bpl.w	Obj7A_Delete
00019238                            
00019238                            loc_18C32:
00019238 6000                       		bra.s	loc_18C6C
0001923A                            ; ===========================================================================
0001923A                            
0001923A                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001923A 117C 0008 001C             		move.b	#8,$1C(a0)
00019240 2268 0034                  		movea.l	$34(a0),a1
00019244 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001924A 6600                       		bne.s	loc_18C56
0001924C 4A28 0001                  		tst.b	1(a0)
00019250 6A00 FC68                  		bpl.w	Obj7A_Delete
00019254 117C 000B 001C             		move.b	#$B,$1C(a0)
0001925A 6000                       		bra.s	loc_18C6C
0001925C                            ; ===========================================================================
0001925C                            
0001925C                            loc_18C56:
0001925C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019262 6E00                       		bgt.s	loc_18C6C
00019264 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001926A 6D00                       		blt.s	loc_18C6C
0001926C 117C 0007 001C             		move.b	#7,$1C(a0)
00019272                            
00019272                            loc_18C6C:
00019272 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
00019278 4EB9 0000 AC42             		jsr	AnimateSprite
0001927E                            
0001927E                            loc_18C78:
0001927E 2268 0034                  		movea.l	$34(a0),a1
00019282 3169 0008 0008             		move.w	8(a1),8(a0)
00019288 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001928E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019294 7003                       		moveq	#3,d0
00019296 C028 0022                  		and.b	$22(a0),d0
0001929A 0228 00FC 0001             		andi.b	#-4,1(a0)
000192A0 8128 0001                  		or.b	d0,1(a0)
000192A4 4EF9 0000 DB72             		jmp	DisplaySprite
000192AA                            ; ===========================================================================
000192AA                            
000192AA                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000192AA 2268 0034                  		movea.l	$34(a0),a1
000192AE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000192B4 6600                       		bne.s	loc_18CB8
000192B6 4A28 0001                  		tst.b	1(a0)
000192BA 6A00 FBFE                  		bpl.w	Obj7A_Delete
000192BE                            
000192BE                            loc_18CB8:
000192BE 217C 0001 83E2 0004        		move.l	#Map_BossItems,4(a0)
000192C6 317C 246C 0002             		move.w	#$246C,2(a0)
000192CC 117C 0003 001A             		move.b	#3,$1A(a0)
000192D2 60AA                       		bra.s	loc_18C78
000192D4                            ; ===========================================================================
000192D4                            ; ---------------------------------------------------------------------------
000192D4                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000192D4                            ; ---------------------------------------------------------------------------
000192D4                            
000192D4                            Obj7B:					; XREF: Obj_Index
000192D4 7000                       		moveq	#0,d0
000192D6 1028 0024                  		move.b	$24(a0),d0
000192DA 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000192DE 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000192E2 3028 0030                  		move.w	$30(a0),d0
000192E6 0240 FF80                  		andi.w	#$FF80,d0
000192EA 3238 F700                  		move.w	($FFFFF700).w,d1
000192EE 0441 0080                  		subi.w	#$80,d1
000192F2 0241 FF80                  		andi.w	#$FF80,d1
000192F6 9041                       		sub.w	d1,d0
000192F8 6B00 FBC0                  		bmi.w	Obj7A_Delete
000192FC 0C40 0280                  		cmpi.w	#$280,d0
00019300 6200 FBB8                  		bhi.w	Obj7A_Delete
00019304 4EF9 0000 DB72             		jmp	DisplaySprite
0001930A                            ; ===========================================================================
0001930A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001930C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001930E 0000                       		dc.w loc_18DC6-Obj7B_Index
00019310 0000                       		dc.w loc_18EAA-Obj7B_Index
00019312 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019314 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019316                            ; ===========================================================================
00019316                            
00019316                            Obj7B_Main:				; XREF: Obj7B_Index
00019316 217C 0001 1F38 0004        		move.l	#Map_obj5Ea,4(a0)
0001931E 317C 0518 0002             		move.w	#$518,2(a0)
00019324 117C 0001 001A             		move.b	#1,$1A(a0)
0001932A 0028 0004 0001             		ori.b	#4,1(a0)
00019330 117C 0004 0018             		move.b	#4,$18(a0)
00019336 117C 008B 0020             		move.b	#$8B,$20(a0)
0001933C 117C 000C 0019             		move.b	#$C,$19(a0)
00019342 2268 003C                  		movea.l	$3C(a0),a1
00019346 3169 0008 0030             		move.w	8(a1),$30(a0)
0001934C 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019352 08E8 0000 0022             		bset	#0,$22(a0)
00019358 3028 0008                  		move.w	8(a0),d0
0001935C B069 0008                  		cmp.w	8(a1),d0
00019360 6E00                       		bgt.s	loc_18D68
00019362 08A8 0000 0022             		bclr	#0,$22(a0)
00019368 117C 0002 003A             		move.b	#2,$3A(a0)
0001936E                            
0001936E                            loc_18D68:
0001936E 5428 0024                  		addq.b	#2,$24(a0)
00019372                            
00019372                            Obj7B_Fall:				; XREF: Obj7B_Index
00019372 4EB9 0000 DB20             		jsr	ObjectFall
00019378 2268 003C                  		movea.l	$3C(a0),a1
0001937C 45F9 0000 0000             		lea	(word_19018).l,a2
00019382 7000                       		moveq	#0,d0
00019384 1029 001A                  		move.b	$1A(a1),d0
00019388 3228 0008                  		move.w	8(a0),d1
0001938C 9268 0030                  		sub.w	$30(a0),d1
00019390 6400                       		bcc.s	loc_18D8E
00019392 5440                       		addq.w	#2,d0
00019394                            
00019394                            loc_18D8E:
00019394 D040                       		add.w	d0,d0
00019396 3228 0034                  		move.w	$34(a0),d1
0001939A D272 0000                  		add.w	(a2,d0.w),d1
0001939E B268 000C                  		cmp.w	$C(a0),d1
000193A2 6E00                       		bgt.s	locret_18DC4
000193A4 2268 003C                  		movea.l	$3C(a0),a1
000193A8 7202                       		moveq	#2,d1
000193AA 0828 0000 0022             		btst	#0,$22(a0)
000193B0 6700                       		beq.s	loc_18DAE
000193B2 7200                       		moveq	#0,d1
000193B4                            
000193B4                            loc_18DAE:
000193B4 317C 00F0 0028             		move.w	#$F0,$28(a0)
000193BA 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000193C0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000193C6 6000 0000                  		bra.w	loc_18FA2
000193CA                            ; ===========================================================================
000193CA                            
000193CA                            locret_18DC4:
000193CA 4E75                       		rts	
000193CC                            ; ===========================================================================
000193CC                            
000193CC                            loc_18DC6:				; XREF: Obj7B_Index
000193CC 2268 003C                  		movea.l	$3C(a0),a1
000193D0 7000                       		moveq	#0,d0
000193D2 1028 003A                  		move.b	$3A(a0),d0
000193D6 9029 003A                  		sub.b	$3A(a1),d0
000193DA 6700                       		beq.s	loc_18E2A
000193DC 6400                       		bcc.s	loc_18DDA
000193DE 4400                       		neg.b	d0
000193E0                            
000193E0                            loc_18DDA:
000193E0 323C F7E8                  		move.w	#-$818,d1
000193E4 343C FEEC                  		move.w	#-$114,d2
000193E8 0C00 0001                  		cmpi.b	#1,d0
000193EC 6700                       		beq.s	loc_18E00
000193EE 323C F6A0                  		move.w	#-$960,d1
000193F2 343C FF0C                  		move.w	#-$F4,d2
000193F6 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000193FC 6D00                       		blt.s	loc_18E00
000193FE 323C F5E0                  		move.w	#-$A20,d1
00019402 343C FF80                  		move.w	#-$80,d2
00019406                            
00019406                            loc_18E00:
00019406 3141 0012                  		move.w	d1,$12(a0)
0001940A 3142 0010                  		move.w	d2,$10(a0)
0001940E 3028 0008                  		move.w	8(a0),d0
00019412 9068 0030                  		sub.w	$30(a0),d0
00019416 6400                       		bcc.s	loc_18E16
00019418 4468 0010                  		neg.w	$10(a0)
0001941C                            
0001941C                            loc_18E16:
0001941C 117C 0001 001A             		move.b	#1,$1A(a0)
00019422 317C 0020 0028             		move.w	#$20,$28(a0)
00019428 5428 0024                  		addq.b	#2,$24(a0)
0001942C 6000 0000                  		bra.w	loc_18EAA
00019430                            ; ===========================================================================
00019430                            
00019430                            loc_18E2A:				; XREF: loc_18DC6
00019430 45F9 0000 0000             		lea	(word_19018).l,a2
00019436 7000                       		moveq	#0,d0
00019438 1029 001A                  		move.b	$1A(a1),d0
0001943C 343C 0028                  		move.w	#$28,d2
00019440 3228 0008                  		move.w	8(a0),d1
00019444 9268 0030                  		sub.w	$30(a0),d1
00019448 6400                       		bcc.s	loc_18E48
0001944A 4442                       		neg.w	d2
0001944C 5440                       		addq.w	#2,d0
0001944E                            
0001944E                            loc_18E48:
0001944E D040                       		add.w	d0,d0
00019450 3228 0034                  		move.w	$34(a0),d1
00019454 D272 0000                  		add.w	(a2,d0.w),d1
00019458 3141 000C                  		move.w	d1,$C(a0)
0001945C D468 0030                  		add.w	$30(a0),d2
00019460 3142 0008                  		move.w	d2,8(a0)
00019464 4268 000E                  		clr.w	$E(a0)
00019468 4268 000A                  		clr.w	$A(a0)
0001946C 5368 0028                  		subq.w	#1,$28(a0)
00019470 6600                       		bne.s	loc_18E7A
00019472 317C 0020 0028             		move.w	#$20,$28(a0)
00019478 117C 0008 0024             		move.b	#8,$24(a0)
0001947E 4E75                       		rts	
00019480                            ; ===========================================================================
00019480                            
00019480                            loc_18E7A:
00019480 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019486 6600                       		bne.s	loc_18E88
00019488 117C 0005 001F             		move.b	#5,$1F(a0)
0001948E                            
0001948E                            loc_18E88:
0001948E 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019494 6600                       		bne.s	loc_18E96
00019496 117C 0002 001F             		move.b	#2,$1F(a0)
0001949C                            
0001949C                            loc_18E96:
0001949C 5328 001E                  		subq.b	#1,$1E(a0)
000194A0 6E00                       		bgt.s	locret_18EA8
000194A2 0868 0000 001A             		bchg	#0,$1A(a0)
000194A8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000194AE                            
000194AE                            locret_18EA8:
000194AE 4E75                       		rts	
000194B0                            ; ===========================================================================
000194B0                            
000194B0                            loc_18EAA:				; XREF: Obj7B_Index
000194B0 43F8 D040                  		lea	($FFFFD040).w,a1
000194B4 707A                       		moveq	#$7A,d0
000194B6 7240                       		moveq	#$40,d1
000194B8 743E                       		moveq	#$3E,d2
000194BA                            
000194BA                            loc_18EB4:
000194BA B011                       		cmp.b	(a1),d0
000194BC 6700                       		beq.s	loc_18EC0
000194BE D2C1                       		adda.w	d1,a1
000194C0 51CA FFF8                  		dbf	d2,loc_18EB4
000194C4                            
000194C4 6000                       		bra.s	loc_18F38
000194C6                            ; ===========================================================================
000194C6                            
000194C6                            loc_18EC0:
000194C6 3029 0008                  		move.w	8(a1),d0
000194CA 3229 000C                  		move.w	$C(a1),d1
000194CE 3428 0008                  		move.w	8(a0),d2
000194D2 3628 000C                  		move.w	$C(a0),d3
000194D6 45FA 0000                  		lea	byte_19022(pc),a2
000194DA 47FA 0000                  		lea	byte_19026(pc),a3
000194DE 181A                       		move.b	(a2)+,d4
000194E0 4884                       		ext.w	d4
000194E2 D044                       		add.w	d4,d0
000194E4 181B                       		move.b	(a3)+,d4
000194E6 4884                       		ext.w	d4
000194E8 D444                       		add.w	d4,d2
000194EA B440                       		cmp.w	d0,d2
000194EC 6500                       		bcs.s	loc_18F38
000194EE 181A                       		move.b	(a2)+,d4
000194F0 4884                       		ext.w	d4
000194F2 D044                       		add.w	d4,d0
000194F4 181B                       		move.b	(a3)+,d4
000194F6 4884                       		ext.w	d4
000194F8 D444                       		add.w	d4,d2
000194FA B042                       		cmp.w	d2,d0
000194FC 6500                       		bcs.s	loc_18F38
000194FE 181A                       		move.b	(a2)+,d4
00019500 4884                       		ext.w	d4
00019502 D244                       		add.w	d4,d1
00019504 181B                       		move.b	(a3)+,d4
00019506 4884                       		ext.w	d4
00019508 D644                       		add.w	d4,d3
0001950A B641                       		cmp.w	d1,d3
0001950C 6500                       		bcs.s	loc_18F38
0001950E 181A                       		move.b	(a2)+,d4
00019510 4884                       		ext.w	d4
00019512 D244                       		add.w	d4,d1
00019514 181B                       		move.b	(a3)+,d4
00019516 4884                       		ext.w	d4
00019518 D644                       		add.w	d4,d3
0001951A B243                       		cmp.w	d3,d1
0001951C 6500                       		bcs.s	loc_18F38
0001951E 5428 0024                  		addq.b	#2,$24(a0)
00019522 4268 0028                  		clr.w	$28(a0)
00019526 4229 0020                  		clr.b	$20(a1)
0001952A 5329 0021                  		subq.b	#1,$21(a1)
0001952E 6600                       		bne.s	loc_18F38
00019530 08E9 0007 0022             		bset	#7,$22(a1)
00019536 4268 0010                  		clr.w	$10(a0)
0001953A 4268 0012                  		clr.w	$12(a0)
0001953E                            
0001953E                            loc_18F38:
0001953E 4A68 0012                  		tst.w	$12(a0)
00019542 6A00                       		bpl.s	loc_18F5C
00019544 4EB9 0000 DB20             		jsr	ObjectFall
0001954A 3028 0034                  		move.w	$34(a0),d0
0001954E 0440 002F                  		subi.w	#$2F,d0
00019552 B068 000C                  		cmp.w	$C(a0),d0
00019556 6E00                       		bgt.s	loc_18F58
00019558 4EB9 0000 DB20             		jsr	ObjectFall
0001955E                            
0001955E                            loc_18F58:
0001955E 6000 FF20                  		bra.w	loc_18E7A
00019562                            ; ===========================================================================
00019562                            
00019562                            loc_18F5C:
00019562 4EB9 0000 DB20             		jsr	ObjectFall
00019568 2268 003C                  		movea.l	$3C(a0),a1
0001956C 45F9 0000 0000             		lea	(word_19018).l,a2
00019572 7000                       		moveq	#0,d0
00019574 1029 001A                  		move.b	$1A(a1),d0
00019578 3228 0008                  		move.w	8(a0),d1
0001957C 9268 0030                  		sub.w	$30(a0),d1
00019580 6400                       		bcc.s	loc_18F7E
00019582 5440                       		addq.w	#2,d0
00019584                            
00019584                            loc_18F7E:
00019584 D040                       		add.w	d0,d0
00019586 3228 0034                  		move.w	$34(a0),d1
0001958A D272 0000                  		add.w	(a2,d0.w),d1
0001958E B268 000C                  		cmp.w	$C(a0),d1
00019592 6ECA                       		bgt.s	loc_18F58
00019594 2268 003C                  		movea.l	$3C(a0),a1
00019598 7202                       		moveq	#2,d1
0001959A 4A68 0010                  		tst.w	$10(a0)
0001959E 6B00                       		bmi.s	loc_18F9C
000195A0 7200                       		moveq	#0,d1
000195A2                            
000195A2                            loc_18F9C:
000195A2 317C 0000 0028             		move.w	#0,$28(a0)
000195A8                            
000195A8                            loc_18FA2:
000195A8 1341 003A                  		move.b	d1,$3A(a1)
000195AC 1141 003A                  		move.b	d1,$3A(a0)
000195B0 B229 001A                  		cmp.b	$1A(a1),d1
000195B4 6700                       		beq.s	loc_19008
000195B6 08A9 0003 0022             		bclr	#3,$22(a1)
000195BC 6700                       		beq.s	loc_19008
000195BE 4229 0025                  		clr.b	$25(a1)
000195C2 137C 0002 0024             		move.b	#2,$24(a1)
000195C8 45F8 D000                  		lea	($FFFFD000).w,a2
000195CC 3568 0012 0012             		move.w	$12(a0),$12(a2)
000195D2 446A 0012                  		neg.w	$12(a2)
000195D6 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000195DC 6600                       		bne.s	loc_18FDC
000195DE E0EA 0012                  		asr	$12(a2)
000195E2                            
000195E2                            loc_18FDC:
000195E2 08EA 0001 0022             		bset	#1,$22(a2)
000195E8 08AA 0003 0022             		bclr	#3,$22(a2)
000195EE 422A 003C                  		clr.b	$3C(a2)
000195F2 2F08                       		move.l	a0,-(sp)
000195F4 41D2                       		lea	(a2),a0
000195F6 4EBA A3A2                  		jsr	Obj01_ChkRoll
000195FA 205F                       		movea.l	(sp)+,a0
000195FC 157C 0002 0024             		move.b	#2,$24(a2)
00019602 303C 00CC                  		move.w	#$CC,d0
00019606 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001960C                            
0001960C                            loc_19008:
0001960C 4268 0010                  		clr.w	$10(a0)
00019610 4268 0012                  		clr.w	$12(a0)
00019614 5428 0024                  		addq.b	#2,$24(a0)
00019618 6000 FE66                  		bra.w	loc_18E7A
0001961C                            ; ===========================================================================
0001961C FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019626                            		even
00019626 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001962A                            		even
0001962A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001962E                            		even
0001962E                            ; ===========================================================================
0001962E                            
0001962E                            Obj7B_Explode:				; XREF: Obj7B_Index
0001962E 10BC 003F                  		move.b	#$3F,(a0)
00019632 4228 0024                  		clr.b	$24(a0)
00019636 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001963C 6700                       		beq.s	Obj7B_MakeFrag
0001963E 4E75                       		rts	
00019640                            ; ===========================================================================
00019640                            
00019640                            Obj7B_MakeFrag:
00019640 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019646 7203                       		moveq	#3,d1
00019648 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001964C                            
0001964C                            Obj7B_Loop:
0001964C 4EB9 0000 DFF8             		jsr	SingleObjLoad
00019652 6600                       		bne.s	loc_1909A
00019654 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019658 137C 000A 0024             		move.b	#$A,$24(a1)
0001965E 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019666 137C 0003 0018             		move.b	#3,$18(a1)
0001966C 337C 0518 0002             		move.w	#$518,2(a1)
00019672 3368 0008 0008             		move.w	8(a0),8(a1)
00019678 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001967E 335A 0010                  		move.w	(a2)+,$10(a1)
00019682 335A 0012                  		move.w	(a2)+,$12(a1)
00019686 137C 0098 0020             		move.b	#$98,$20(a1)
0001968C 0029 0004 0001             		ori.b	#4,1(a1)
00019692 08E9 0007 0001             		bset	#7,1(a1)
00019698 137C 000C 0019             		move.b	#$C,$19(a1)
0001969E                            
0001969E                            loc_1909A:
0001969E 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000196A2                            
000196A2 4E75                       		rts	
000196A4                            ; ===========================================================================
000196A4 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000196A8 FF60 FDC0                  		dc.w $FF60, $FDC0
000196AC 0100 FCC0                  		dc.w $100, $FCC0
000196B0 00A0 FDC0                  		dc.w $A0, $FDC0
000196B4                            ; ===========================================================================
000196B4                            
000196B4                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000196B4 4EB9 0000 DB4C             		jsr	SpeedToPos
000196BA 3168 0008 0030             		move.w	8(a0),$30(a0)
000196C0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000196C6 0668 0018 0012             		addi.w	#$18,$12(a0)
000196CC 7004                       		moveq	#4,d0
000196CE C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000196D2 E448                       		lsr.w	#2,d0
000196D4 1140 001A                  		move.b	d0,$1A(a0)
000196D8 4A28 0001                  		tst.b	1(a0)
000196DC 6A00 F7DC                  		bpl.w	Obj7A_Delete
000196E0 4E75                       		rts	
000196E2                            ; ===========================================================================
000196E2                            ; ---------------------------------------------------------------------------
000196E2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196E2                            ; ---------------------------------------------------------------------------
000196E2                            Map_obj7B:
000196E2                            	include "_maps\obj7B.asm"
000196E2                            ; ---------------------------------------------------------------------------
000196E2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196E2                            ; ---------------------------------------------------------------------------
000196E2 0000                       		dc.w byte_190E2-Map_obj7B
000196E4 0000                       		dc.w byte_190E8-Map_obj7B
000196E6 01                         byte_190E2:	dc.b 1
000196E7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000196EC 01                         byte_190E8:	dc.b 1
000196ED FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000196F2                            		even
000196F2                            		even
000196F2                            
000196F2                            ; ===========================================================================
000196F2                            ; ---------------------------------------------------------------------------
000196F2                            ; Object 75 - Eggman (SYZ)
000196F2                            ; ---------------------------------------------------------------------------
000196F2                            
000196F2                            Obj75:					; XREF: Obj_Index
000196F2 7000                       		moveq	#0,d0
000196F4 1028 0024                  		move.b	$24(a0),d0
000196F8 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000196FC 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019700                            ; ===========================================================================
00019700 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019702 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019704 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019706 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019708 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001970A                            
0001970A 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001970D 0401 05                    		dc.b 4,	1, 5
00019710 0607 05                    		dc.b 6,	7, 5
00019713 0800 05                    		dc.b 8,	0, 5
00019716                            ; ===========================================================================
00019716                            
00019716                            Obj75_Main:				; XREF: Obj75_Index
00019716 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001971C 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019722 3168 0008 0030             		move.w	8(a0),$30(a0)
00019728 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001972E 117C 000F 0020             		move.b	#$F,$20(a0)
00019734 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001973A 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001973E 2248                       		movea.l	a0,a1
00019740 7203                       		moveq	#3,d1
00019742 6000                       		bra.s	Obj75_LoadBoss
00019744                            ; ===========================================================================
00019744                            
00019744                            Obj75_Loop:
00019744 4EB9 0000 E00E             		jsr	SingleObjLoad2
0001974A 6600                       		bne.s	Obj75_ShipMain
0001974C 12BC 0075                  		move.b	#$75,(a1)
00019750 3368 0008 0008             		move.w	8(a0),8(a1)
00019756 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001975C                            
0001975C                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001975C 08A8 0000 0022             		bclr	#0,$22(a0)
00019762 4229 0025                  		clr.b	$25(a1)
00019766 135A 0024                  		move.b	(a2)+,$24(a1)
0001976A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001976E 135A 0018                  		move.b	(a2)+,$18(a1)
00019772 237C 0001 831A 0004        		move.l	#Map_Eggman,4(a1)
0001977A 337C 0400 0002             		move.w	#$400,2(a1)
00019780 137C 0004 0001             		move.b	#4,1(a1)
00019786 137C 0020 0019             		move.b	#$20,$19(a1)
0001978C 2348 0034                  		move.l	a0,$34(a1)
00019790 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019794                            
00019794                            Obj75_ShipMain:				; XREF: Obj75_Index
00019794 7000                       		moveq	#0,d0
00019796 1028 0025                  		move.b	$25(a0),d0
0001979A 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001979E 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000197A2 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
000197A8 4EB9 0000 AC42             		jsr	AnimateSprite
000197AE 7003                       		moveq	#3,d0
000197B0 C028 0022                  		and.b	$22(a0),d0
000197B4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000197BA 8128 0001                  		or.b	d0,1(a0)
000197BE 4EF9 0000 DB72             		jmp	DisplaySprite
000197C4                            ; ===========================================================================
000197C4 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000197C8 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000197CC 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000197D0                            ; ===========================================================================
000197D0                            
000197D0                            loc_191CC:				; XREF: Obj75_ShipIndex
000197D0 317C FF00 0010             		move.w	#-$100,$10(a0)
000197D6 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000197DC 6400                       		bcc.s	loc_191DE
000197DE 5428 0025                  		addq.b	#2,$25(a0)
000197E2                            
000197E2                            loc_191DE:
000197E2 1028 003F                  		move.b	$3F(a0),d0
000197E6 5428 003F                  		addq.b	#2,$3F(a0)
000197EA 4EB9 0000 2C22             		jsr	(CalcSine).l
000197F0 E440                       		asr.w	#2,d0
000197F2 3140 0012                  		move.w	d0,$12(a0)
000197F6                            
000197F6                            loc_191F2:
000197F6 6100 E6C2                  		bsr.w	BossMove
000197FA 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019800 3168 0030 0008             		move.w	$30(a0),8(a0)
00019806                            
00019806                            loc_19202:
00019806 3028 0008                  		move.w	8(a0),d0
0001980A 0440 2C00                  		subi.w	#$2C00,d0
0001980E EA48                       		lsr.w	#5,d0
00019810 1140 0034                  		move.b	d0,$34(a0)
00019814 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001981A 6400                       		bcc.s	locret_19256
0001981C 4A28 0022                  		tst.b	$22(a0)
00019820 6B00                       		bmi.s	loc_19258
00019822 4A28 0020                  		tst.b	$20(a0)
00019826 6600                       		bne.s	locret_19256
00019828 4A28 003E                  		tst.b	$3E(a0)
0001982C 6600                       		bne.s	loc_1923A
0001982E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019834 303C 00AC                  		move.w	#$AC,d0
00019838 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001983E                            
0001983E                            loc_1923A:
0001983E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019842 7000                       		moveq	#0,d0
00019844 4A51                       		tst.w	(a1)
00019846 6600                       		bne.s	loc_19248
00019848 303C 0EEE                  		move.w	#$EEE,d0
0001984C                            
0001984C                            loc_19248:
0001984C 3280                       		move.w	d0,(a1)
0001984E 5328 003E                  		subq.b	#1,$3E(a0)
00019852 6600                       		bne.s	locret_19256
00019854 117C 000F 0020             		move.b	#$F,$20(a0)
0001985A                            
0001985A                            locret_19256:
0001985A 4E75                       		rts	
0001985C                            ; ===========================================================================
0001985C                            
0001985C                            loc_19258:				; XREF: loc_19202
0001985C 7064                       		moveq	#100,d0
0001985E 6100 0000                  		bsr.w	AddPoints
00019862 117C 0006 0025             		move.b	#6,$25(a0)
00019868 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001986E 4268 0010                  		clr.w	$10(a0)
00019872 4E75                       		rts	
00019874                            ; ===========================================================================
00019874                            
00019874                            loc_19270:				; XREF: Obj75_ShipIndex
00019874 3028 0030                  		move.w	$30(a0),d0
00019878 317C 0140 0010             		move.w	#$140,$10(a0)
0001987E 0828 0000 0022             		btst	#0,$22(a0)
00019884 6600                       		bne.s	loc_1928E
00019886 4468 0010                  		neg.w	$10(a0)
0001988A 0C40 2C08                  		cmpi.w	#$2C08,d0
0001988E 6E00                       		bgt.s	loc_1929E
00019890 6000                       		bra.s	loc_19294
00019892                            ; ===========================================================================
00019892                            
00019892                            loc_1928E:
00019892 0C40 2D38                  		cmpi.w	#$2D38,d0
00019896 6D00                       		blt.s	loc_1929E
00019898                            
00019898                            loc_19294:
00019898 0868 0000 0022             		bchg	#0,$22(a0)
0001989E 4228 003D                  		clr.b	$3D(a0)
000198A2                            
000198A2                            loc_1929E:
000198A2 0440 2C10                  		subi.w	#$2C10,d0
000198A6 0240 001F                  		andi.w	#$1F,d0
000198AA 0440 001F                  		subi.w	#$1F,d0
000198AE 6A00                       		bpl.s	loc_192AE
000198B0 4440                       		neg.w	d0
000198B2                            
000198B2                            loc_192AE:
000198B2 5340                       		subq.w	#1,d0
000198B4 6E00                       		bgt.s	loc_192E8
000198B6 4A28 003D                  		tst.b	$3D(a0)
000198BA 6600                       		bne.s	loc_192E8
000198BC 3238 D008                  		move.w	($FFFFD008).w,d1
000198C0 0441 2C00                  		subi.w	#$2C00,d1
000198C4 EA41                       		asr.w	#5,d1
000198C6 B228 0034                  		cmp.b	$34(a0),d1
000198CA 6600                       		bne.s	loc_192E8
000198CC 7000                       		moveq	#0,d0
000198CE 1028 0034                  		move.b	$34(a0),d0
000198D2 EB40                       		asl.w	#5,d0
000198D4 0640 2C10                  		addi.w	#$2C10,d0
000198D8 3140 0030                  		move.w	d0,$30(a0)
000198DC 6100 0000                  		bsr.w	Obj75_FindBlocks
000198E0 5428 0025                  		addq.b	#2,$25(a0)
000198E4 4268 0028                  		clr.w	$28(a0)
000198E8 4268 0010                  		clr.w	$10(a0)
000198EC                            
000198EC                            loc_192E8:
000198EC 6000 FEF4                  		bra.w	loc_191DE
000198F0                            ; ===========================================================================
000198F0                            
000198F0                            loc_192EC:				; XREF: Obj75_ShipIndex
000198F0 7000                       		moveq	#0,d0
000198F2 1028 0028                  		move.b	$28(a0),d0
000198F6 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
000198FA 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
000198FE                            ; ===========================================================================
000198FE 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019900 0000                       		dc.w loc_19348-off_192FA
00019902 0000                       		dc.w loc_1938E-off_192FA
00019904 0000                       		dc.w loc_193D0-off_192FA
00019906                            ; ===========================================================================
00019906                            
00019906                            loc_19302:				; XREF: off_192FA
00019906 317C 0180 0012             		move.w	#$180,$12(a0)
0001990C 3028 0038                  		move.w	$38(a0),d0
00019910 0C40 0556                  		cmpi.w	#$556,d0
00019914 6500                       		bcs.s	loc_19344
00019916 317C 0556 0038             		move.w	#$556,$38(a0)
0001991C 4268 003C                  		clr.w	$3C(a0)
00019920 70FF                       		moveq	#-1,d0
00019922 3028 0036                  		move.w	$36(a0),d0
00019926 6700                       		beq.s	loc_1933C
00019928 2240                       		movea.l	d0,a1
0001992A 137C 00FF 0029             		move.b	#-1,$29(a1)
00019930 117C 00FF 0029             		move.b	#-1,$29(a0)
00019936 2348 0034                  		move.l	a0,$34(a1)
0001993A 317C 0032 003C             		move.w	#$32,$3C(a0)
00019940                            
00019940                            loc_1933C:
00019940 4268 0012                  		clr.w	$12(a0)
00019944 5428 0028                  		addq.b	#2,$28(a0)
00019948                            
00019948                            loc_19344:
00019948 6000 FEAC                  		bra.w	loc_191F2
0001994C                            ; ===========================================================================
0001994C                            
0001994C                            loc_19348:				; XREF: off_192FA
0001994C 5368 003C                  		subq.w	#1,$3C(a0)
00019950 6A00                       		bpl.s	loc_19366
00019952 5428 0028                  		addq.b	#2,$28(a0)
00019956 317C F800 0012             		move.w	#-$800,$12(a0)
0001995C 4A68 0036                  		tst.w	$36(a0)
00019960 6600                       		bne.s	loc_19362
00019962 E0E8 0012                  		asr	$12(a0)
00019966                            
00019966                            loc_19362:
00019966 7000                       		moveq	#0,d0
00019968 6000                       		bra.s	loc_1937C
0001996A                            ; ===========================================================================
0001996A                            
0001996A                            loc_19366:
0001996A 7000                       		moveq	#0,d0
0001996C 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019972 6E00                       		bgt.s	loc_1937C
00019974 7002                       		moveq	#2,d0
00019976 0828 0001 003D             		btst	#1,$3D(a0)
0001997C 6700                       		beq.s	loc_1937C
0001997E 4440                       		neg.w	d0
00019980                            
00019980                            loc_1937C:
00019980 D068 0038                  		add.w	$38(a0),d0
00019984 3140 000C                  		move.w	d0,$C(a0)
00019988 3168 0030 0008             		move.w	$30(a0),8(a0)
0001998E 6000 FE76                  		bra.w	loc_19202
00019992                            ; ===========================================================================
00019992                            
00019992                            loc_1938E:				; XREF: off_192FA
00019992 303C 04DA                  		move.w	#$4DA,d0
00019996 4A68 0036                  		tst.w	$36(a0)
0001999A 6700                       		beq.s	loc_1939C
0001999C 0440 0018                  		subi.w	#$18,d0
000199A0                            
000199A0                            loc_1939C:
000199A0 B068 0038                  		cmp.w	$38(a0),d0
000199A4 6D00                       		blt.s	loc_193BE
000199A6 317C 0008 003C             		move.w	#8,$3C(a0)
000199AC 4A68 0036                  		tst.w	$36(a0)
000199B0 6700                       		beq.s	loc_193B4
000199B2 317C 002D 003C             		move.w	#$2D,$3C(a0)
000199B8                            
000199B8                            loc_193B4:
000199B8 5428 0028                  		addq.b	#2,$28(a0)
000199BC 4268 0012                  		clr.w	$12(a0)
000199C0 6000                       		bra.s	loc_193CC
000199C2                            ; ===========================================================================
000199C2                            
000199C2                            loc_193BE:
000199C2 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
000199C8 6C00                       		bge.s	loc_193CC
000199CA 0668 000C 0012             		addi.w	#$C,$12(a0)
000199D0                            
000199D0                            loc_193CC:
000199D0 6000 FE24                  		bra.w	loc_191F2
000199D4                            ; ===========================================================================
000199D4                            
000199D4                            loc_193D0:				; XREF: off_192FA
000199D4 5368 003C                  		subq.w	#1,$3C(a0)
000199D8 6E00                       		bgt.s	loc_19406
000199DA 6B00                       		bmi.s	loc_193EE
000199DC 70FF                       		moveq	#-1,d0
000199DE 3028 0036                  		move.w	$36(a0),d0
000199E2 6700                       		beq.s	loc_193E8
000199E4 2240                       		movea.l	d0,a1
000199E6 137C 000A 0029             		move.b	#$A,$29(a1)
000199EC                            
000199EC                            loc_193E8:
000199EC 4268 0036                  		clr.w	$36(a0)
000199F0 6000                       		bra.s	loc_19406
000199F2                            ; ===========================================================================
000199F2                            
000199F2                            loc_193EE:
000199F2 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
000199F8 6600                       		bne.s	loc_19406
000199FA 4228 0029                  		clr.b	$29(a0)
000199FE 5528 0025                  		subq.b	#2,$25(a0)
00019A02 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019A08 6000                       		bra.s	loc_19446
00019A0A                            ; ===========================================================================
00019A0A                            
00019A0A                            loc_19406:
00019A0A 7001                       		moveq	#1,d0
00019A0C 4A68 0036                  		tst.w	$36(a0)
00019A10 6700                       		beq.s	loc_19410
00019A12 7002                       		moveq	#2,d0
00019A14                            
00019A14                            loc_19410:
00019A14 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019A1A 6700                       		beq.s	loc_19424
00019A1C 6D00                       		blt.s	loc_1941C
00019A1E 4440                       		neg.w	d0
00019A20                            
00019A20                            loc_1941C:
00019A20 4A68 0036                  		tst.w	$36(a0)
00019A24 D168 0038                  		add.w	d0,$38(a0)
00019A28                            
00019A28                            loc_19424:
00019A28 7000                       		moveq	#0,d0
00019A2A 4A68 0036                  		tst.w	$36(a0)
00019A2E 6700                       		beq.s	loc_19438
00019A30 7002                       		moveq	#2,d0
00019A32 0828 0000 003D             		btst	#0,$3D(a0)
00019A38 6700                       		beq.s	loc_19438
00019A3A 4440                       		neg.w	d0
00019A3C                            
00019A3C                            loc_19438:
00019A3C D068 0038                  		add.w	$38(a0),d0
00019A40 3140 000C                  		move.w	d0,$C(a0)
00019A44 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A4A                            
00019A4A                            loc_19446:
00019A4A 6000 FDBA                  		bra.w	loc_19202
00019A4E                            
00019A4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A4E                            
00019A4E                            
00019A4E                            Obj75_FindBlocks:			; XREF: loc_192AE
00019A4E 4268 0036                  		clr.w	$36(a0)
00019A52 43F8 D040                  		lea	($FFFFD040).w,a1
00019A56 703E                       		moveq	#$3E,d0
00019A58 7276                       		moveq	#$76,d1
00019A5A 1428 0034                  		move.b	$34(a0),d2
00019A5E                            
00019A5E                            Obj75_FindLoop:
00019A5E B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019A60 6600                       		bne.s	loc_1946A	; if not, branch
00019A62 B429 0028                  		cmp.b	$28(a1),d2
00019A66 6600                       		bne.s	loc_1946A
00019A68 3149 0036                  		move.w	a1,$36(a0)
00019A6C 6000                       		bra.s	locret_19472
00019A6E                            ; ===========================================================================
00019A6E                            
00019A6E                            loc_1946A:
00019A6E 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019A72 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019A76                            
00019A76                            locret_19472:
00019A76 4E75                       		rts	
00019A78                            ; End of function Obj75_FindBlocks
00019A78                            
00019A78                            ; ===========================================================================
00019A78                            
00019A78                            loc_19474:				; XREF: Obj75_ShipIndex
00019A78 5368 003C                  		subq.w	#1,$3C(a0)
00019A7C 6B00                       		bmi.s	loc_1947E
00019A7E 6000 E3F8                  		bra.w	BossDefeated
00019A82                            ; ===========================================================================
00019A82                            
00019A82                            loc_1947E:
00019A82 5428 0025                  		addq.b	#2,$25(a0)
00019A86 4268 0012                  		clr.w	$12(a0)
00019A8A 08E8 0000 0022             		bset	#0,$22(a0)
00019A90 08A8 0007 0022             		bclr	#7,$22(a0)
00019A96 4268 0010                  		clr.w	$10(a0)
00019A9A 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019AA0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019AA4 6600                       		bne.s	loc_194A8
00019AA6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019AAC                            
00019AAC                            loc_194A8:
00019AAC 6000 FD58                  		bra.w	loc_19202
00019AB0                            ; ===========================================================================
00019AB0                            
00019AB0                            loc_194AC:				; XREF: Obj75_ShipIndex
00019AB0 5268 003C                  		addq.w	#1,$3C(a0)
00019AB4 6700                       		beq.s	loc_194BC
00019AB6 6A00                       		bpl.s	loc_194C2
00019AB8 0668 0018 0012             		addi.w	#$18,$12(a0)
00019ABE 6000                       		bra.s	loc_194EE
00019AC0                            ; ===========================================================================
00019AC0                            
00019AC0                            loc_194BC:
00019AC0 4268 0012                  		clr.w	$12(a0)
00019AC4 6000                       		bra.s	loc_194EE
00019AC6                            ; ===========================================================================
00019AC6                            
00019AC6                            loc_194C2:
00019AC6 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019ACC 6500                       		bcs.s	loc_194DA
00019ACE 6700                       		beq.s	loc_194E0
00019AD0 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019AD6 6500                       		bcs.s	loc_194EE
00019AD8 5428 0025                  		addq.b	#2,$25(a0)
00019ADC 6000                       		bra.s	loc_194EE
00019ADE                            ; ===========================================================================
00019ADE                            
00019ADE                            loc_194DA:
00019ADE 5168 0012                  		subq.w	#8,$12(a0)
00019AE2 6000                       		bra.s	loc_194EE
00019AE4                            ; ===========================================================================
00019AE4                            
00019AE4                            loc_194E0:
00019AE4 4268 0012                  		clr.w	$12(a0)
00019AE8 303C 0085                  		move.w	#$85,d0
00019AEC 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SYZ music
00019AF2                            
00019AF2                            loc_194EE:
00019AF2 6000 FD02                  		bra.w	loc_191F2
00019AF6                            ; ===========================================================================
00019AF6                            
00019AF6                            loc_194F2:				; XREF: Obj75_ShipIndex
00019AF6 317C 0400 0010             		move.w	#$400,$10(a0)
00019AFC 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019B02 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019B08 6400                       		bcc.s	loc_1950C
00019B0A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019B0E 6000                       		bra.s	loc_19512
00019B10                            ; ===========================================================================
00019B10                            
00019B10                            loc_1950C:
00019B10 4A28 0001                  		tst.b	1(a0)
00019B14 6A00                       		bpl.s	Obj75_ShipDelete
00019B16                            
00019B16                            loc_19512:
00019B16 6100 E3A2                  		bsr.w	BossMove
00019B1A 6000 FCC6                  		bra.w	loc_191DE
00019B1E                            ; ===========================================================================
00019B1E                            
00019B1E                            Obj75_ShipDelete:
00019B1E 4EF9 0000 DBAE             		jmp	DeleteObject
00019B24                            ; ===========================================================================
00019B24                            
00019B24                            Obj75_FaceMain:				; XREF: Obj75_Index
00019B24 7201                       		moveq	#1,d1
00019B26 2268 0034                  		movea.l	$34(a0),a1
00019B2A 7000                       		moveq	#0,d0
00019B2C 1029 0025                  		move.b	$25(a1),d0
00019B30 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019B34 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019B38 1141 001C                  		move.b	d1,$1C(a0)
00019B3C 1010                       		move.b	(a0),d0
00019B3E B011                       		cmp.b	(a1),d0
00019B40 6600                       		bne.s	Obj75_FaceDelete
00019B42 6000                       		bra.s	loc_195BE
00019B44                            ; ===========================================================================
00019B44                            
00019B44                            Obj75_FaceDelete:
00019B44 4EF9 0000 DBAE             		jmp	DeleteObject
00019B4A                            ; ===========================================================================
00019B4A 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019B4E 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019B52 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019B56                            ; ===========================================================================
00019B56                            
00019B56                            loc_19552:				; XREF: off_19546
00019B56 720A                       		moveq	#$A,d1
00019B58 4E75                       		rts	
00019B5A                            ; ===========================================================================
00019B5A                            
00019B5A                            loc_19556:				; XREF: off_19546
00019B5A 7206                       		moveq	#6,d1
00019B5C 4E75                       		rts	
00019B5E                            ; ===========================================================================
00019B5E                            
00019B5E                            loc_1955A:				; XREF: off_19546
00019B5E 7000                       		moveq	#0,d0
00019B60 1029 0028                  		move.b	$28(a1),d0
00019B64 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019B68 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019B6C                            ; ===========================================================================
00019B6C 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019B70 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019B74                            ; ===========================================================================
00019B74                            
00019B74                            loc_19570:				; XREF: off_19568
00019B74 6000                       		bra.s	loc_19574
00019B76                            ; ===========================================================================
00019B76                            
00019B76                            loc_19572:				; XREF: off_19568
00019B76 7206                       		moveq	#6,d1
00019B78                            
00019B78                            loc_19574:				; XREF: off_19546
00019B78 4A29 0020                  		tst.b	$20(a1)
00019B7C 6600                       		bne.s	loc_1957E
00019B7E 7205                       		moveq	#5,d1
00019B80 4E75                       		rts	
00019B82                            ; ===========================================================================
00019B82                            
00019B82                            loc_1957E:
00019B82 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B88 6500                       		bcs.s	locret_19588
00019B8A 7204                       		moveq	#4,d1
00019B8C                            
00019B8C                            locret_19588:
00019B8C 4E75                       		rts	
00019B8E                            ; ===========================================================================
00019B8E                            
00019B8E                            Obj75_FlameMain:			; XREF: Obj75_Index
00019B8E 117C 0007 001C             		move.b	#7,$1C(a0)
00019B94 2268 0034                  		movea.l	$34(a0),a1
00019B98 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019B9E 6600                       		bne.s	loc_195AA
00019BA0 117C 000B 001C             		move.b	#$B,$1C(a0)
00019BA6 4A28 0001                  		tst.b	1(a0)
00019BAA 6A00                       		bpl.s	Obj75_FlameDelete
00019BAC 6000                       		bra.s	loc_195B6
00019BAE                            ; ===========================================================================
00019BAE                            
00019BAE                            loc_195AA:
00019BAE 4A69 0010                  		tst.w	$10(a1)
00019BB2 6700                       		beq.s	loc_195B6
00019BB4 117C 0008 001C             		move.b	#8,$1C(a0)
00019BBA                            
00019BBA                            loc_195B6:
00019BBA 6000                       		bra.s	loc_195BE
00019BBC                            ; ===========================================================================
00019BBC                            
00019BBC                            Obj75_FlameDelete:
00019BBC 4EF9 0000 DBAE             		jmp	DeleteObject
00019BC2                            ; ===========================================================================
00019BC2                            
00019BC2                            loc_195BE:
00019BC2 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
00019BC8 4EB9 0000 AC42             		jsr	AnimateSprite
00019BCE 2268 0034                  		movea.l	$34(a0),a1
00019BD2 3169 0008 0008             		move.w	8(a1),8(a0)
00019BD8 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BDE                            
00019BDE                            loc_195DA:
00019BDE 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BE4 7003                       		moveq	#3,d0
00019BE6 C028 0022                  		and.b	$22(a0),d0
00019BEA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019BF0 8128 0001                  		or.b	d0,1(a0)
00019BF4 4EF9 0000 DB72             		jmp	DisplaySprite
00019BFA                            ; ===========================================================================
00019BFA                            
00019BFA                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019BFA 217C 0001 83E2 0004        		move.l	#Map_BossItems,4(a0)
00019C02 317C 246C 0002             		move.w	#$246C,2(a0)
00019C08 117C 0005 001A             		move.b	#5,$1A(a0)
00019C0E 2268 0034                  		movea.l	$34(a0),a1
00019C12 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019C18 6600                       		bne.s	loc_1961C
00019C1A 4A28 0001                  		tst.b	1(a0)
00019C1E 6A00                       		bpl.s	Obj75_SpikeDelete
00019C20                            
00019C20                            loc_1961C:
00019C20 3169 0008 0008             		move.w	8(a1),8(a0)
00019C26 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019C2C 3028 003C                  		move.w	$3C(a0),d0
00019C30 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019C36 6600                       		bne.s	loc_19652
00019C38 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019C3E 6700                       		beq.s	loc_1964C
00019C40 4A29 0028                  		tst.b	$28(a1)
00019C44 6600                       		bne.s	loc_19658
00019C46 0C40 0094                  		cmpi.w	#$94,d0
00019C4A 6C00                       		bge.s	loc_19658
00019C4C 5E40                       		addq.w	#7,d0
00019C4E 6000                       		bra.s	loc_19658
00019C50                            ; ===========================================================================
00019C50                            
00019C50                            loc_1964C:
00019C50 4A69 003C                  		tst.w	$3C(a1)
00019C54 6A00                       		bpl.s	loc_19658
00019C56                            
00019C56                            loc_19652:
00019C56 4A40                       		tst.w	d0
00019C58 6F00                       		ble.s	loc_19658
00019C5A 5B40                       		subq.w	#5,d0
00019C5C                            
00019C5C                            loc_19658:
00019C5C 3140 003C                  		move.w	d0,$3C(a0)
00019C60 E440                       		asr.w	#2,d0
00019C62 D168 000C                  		add.w	d0,$C(a0)
00019C66 117C 0008 0019             		move.b	#8,$19(a0)
00019C6C 117C 000C 0016             		move.b	#$C,$16(a0)
00019C72 4228 0020                  		clr.b	$20(a0)
00019C76 2268 0034                  		movea.l	$34(a0),a1
00019C7A 4A29 0020                  		tst.b	$20(a1)
00019C7E 6700                       		beq.s	loc_19688
00019C80 4A29 0029                  		tst.b	$29(a1)
00019C84 6600                       		bne.s	loc_19688
00019C86 117C 0084 0020             		move.b	#$84,$20(a0)
00019C8C                            
00019C8C                            loc_19688:
00019C8C 6000 FF50                  		bra.w	loc_195DA
00019C90                            ; ===========================================================================
00019C90                            
00019C90                            Obj75_SpikeDelete:
00019C90 4EF9 0000 DBAE             		jmp	DeleteObject
00019C96                            ; ===========================================================================
00019C96                            ; ---------------------------------------------------------------------------
00019C96                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019C96                            ; ---------------------------------------------------------------------------
00019C96                            
00019C96                            Obj76:					; XREF: Obj_Index
00019C96 7000                       		moveq	#0,d0
00019C98 1028 0024                  		move.b	$24(a0),d0
00019C9C 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019CA0 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019CA4                            ; ===========================================================================
00019CA4 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019CA6 0000                       		dc.w Obj76_Action-Obj76_Index
00019CA8 0000                       		dc.w loc_19762-Obj76_Index
00019CAA                            ; ===========================================================================
00019CAA                            
00019CAA                            Obj76_Main:				; XREF: Obj76_Index
00019CAA 7800                       		moveq	#0,d4
00019CAC 3A3C 2C10                  		move.w	#$2C10,d5
00019CB0 7C09                       		moveq	#9,d6
00019CB2 43D0                       		lea	(a0),a1
00019CB4 6000                       		bra.s	Obj76_MakeBlock
00019CB6                            ; ===========================================================================
00019CB6                            
00019CB6                            Obj76_Loop:
00019CB6 4EB9 0000 DFF8             		jsr	SingleObjLoad
00019CBC 6600                       		bne.s	Obj76_ExitLoop
00019CBE                            
00019CBE                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019CBE 12BC 0076                  		move.b	#$76,(a1)
00019CC2 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019CCA 337C 4000 0002             		move.w	#$4000,2(a1)
00019CD0 137C 0004 0001             		move.b	#4,1(a1)
00019CD6 137C 0010 0019             		move.b	#$10,$19(a1)
00019CDC 137C 0010 0016             		move.b	#$10,$16(a1)
00019CE2 137C 0003 0018             		move.b	#3,$18(a1)
00019CE8 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019CEC 337C 0582 000C             		move.w	#$582,$C(a1)
00019CF2 3344 0028                  		move.w	d4,$28(a1)
00019CF6 0644 0101                  		addi.w	#$101,d4
00019CFA 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019CFE 5429 0024                  		addq.b	#2,$24(a1)
00019D02 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019D06                            
00019D06                            Obj76_ExitLoop:
00019D06 4E75                       		rts	
00019D08                            ; ===========================================================================
00019D08                            
00019D08                            Obj76_Action:				; XREF: Obj76_Index
00019D08 1028 0029                  		move.b	$29(a0),d0
00019D0C B028 0028                  		cmp.b	$28(a0),d0
00019D10 6700                       		beq.s	Obj76_Solid
00019D12 4A00                       		tst.b	d0
00019D14 6B00                       		bmi.s	loc_19718
00019D16                            
00019D16                            loc_19712:
00019D16 6100 0000                  		bsr.w	Obj76_Break
00019D1A 6000                       		bra.s	Obj76_Display
00019D1C                            ; ===========================================================================
00019D1C                            
00019D1C                            loc_19718:
00019D1C 2268 0034                  		movea.l	$34(a0),a1
00019D20 4A29 0021                  		tst.b	$21(a1)
00019D24 67F0                       		beq.s	loc_19712
00019D26 3169 0008 0008             		move.w	8(a1),8(a0)
00019D2C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019D32 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019D38 B2C8                       		cmpa.w	a0,a1
00019D3A 6500                       		bcs.s	Obj76_Display
00019D3C 3029 0012                  		move.w	$12(a1),d0
00019D40 48C0                       		ext.l	d0
00019D42 E080                       		asr.l	#8,d0
00019D44 D168 000C                  		add.w	d0,$C(a0)
00019D48 6000                       		bra.s	Obj76_Display
00019D4A                            ; ===========================================================================
00019D4A                            
00019D4A                            Obj76_Solid:				; XREF: Obj76_Action
00019D4A 323C 001B                  		move.w	#$1B,d1
00019D4E 343C 0010                  		move.w	#$10,d2
00019D52 363C 0011                  		move.w	#$11,d3
00019D56 3828 0008                  		move.w	8(a0),d4
00019D5A 4EB9 0000 FF42             		jsr	SolidObject
00019D60                            
00019D60                            Obj76_Display:				; XREF: Obj76_Action
00019D60 4EF9 0000 DB72             		jmp	DisplaySprite
00019D66                            ; ===========================================================================
00019D66                            
00019D66                            loc_19762:				; XREF: Obj76_Index
00019D66 4A28 0001                  		tst.b	1(a0)
00019D6A 6A00                       		bpl.s	Obj76_Delete
00019D6C 4EB9 0000 DB20             		jsr	ObjectFall
00019D72 4EF9 0000 DB72             		jmp	DisplaySprite
00019D78                            ; ===========================================================================
00019D78                            
00019D78                            Obj76_Delete:
00019D78 4EF9 0000 DBAE             		jmp	DeleteObject
00019D7E                            
00019D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D7E                            
00019D7E                            
00019D7E                            Obj76_Break:				; XREF: Obj76_Action
00019D7E 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019D82 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019D86 7801                       		moveq	#1,d4
00019D88 7203                       		moveq	#3,d1
00019D8A 7438                       		moveq	#$38,d2
00019D8C 5428 0024                  		addq.b	#2,$24(a0)
00019D90 117C 0008 0019             		move.b	#8,$19(a0)
00019D96 117C 0008 0016             		move.b	#8,$16(a0)
00019D9C 43D0                       		lea	(a0),a1
00019D9E 6000                       		bra.s	Obj76_MakeFrag
00019DA0                            ; ===========================================================================
00019DA0                            
00019DA0                            Obj76_LoopFrag:
00019DA0 4EB9 0000 E00E             		jsr	SingleObjLoad2
00019DA6 6600                       		bne.s	loc_197D4
00019DA8                            
00019DA8                            Obj76_MakeFrag:
00019DA8 45D0                       		lea	(a0),a2
00019DAA 47D1                       		lea	(a1),a3
00019DAC 7603                       		moveq	#3,d3
00019DAE                            
00019DAE                            loc_197AA:
00019DAE 26DA                       		move.l	(a2)+,(a3)+
00019DB0 26DA                       		move.l	(a2)+,(a3)+
00019DB2 26DA                       		move.l	(a2)+,(a3)+
00019DB4 26DA                       		move.l	(a2)+,(a3)+
00019DB6 51CB FFF6                  		dbf	d3,loc_197AA
00019DBA                            
00019DBA 335C 0010                  		move.w	(a4)+,$10(a1)
00019DBE 335C 0012                  		move.w	(a4)+,$12(a1)
00019DC2 361D                       		move.w	(a5)+,d3
00019DC4 D769 0008                  		add.w	d3,8(a1)
00019DC8 361D                       		move.w	(a5)+,d3
00019DCA D769 000C                  		add.w	d3,$C(a1)
00019DCE 1344 001A                  		move.b	d4,$1A(a1)
00019DD2 5244                       		addq.w	#1,d4
00019DD4 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019DD8                            
00019DD8                            loc_197D4:
00019DD8 303C 00CB                  		move.w	#$CB,d0
00019DDC 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
00019DE2                            ; End of function Obj76_Break
00019DE2                            
00019DE2                            ; ===========================================================================
00019DE2 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019DE6 0180 FE00                  		dc.w $180, $FE00
00019DEA FF00 FF00                  		dc.w $FF00, $FF00
00019DEE 0100 FF00                  		dc.w $100, $FF00
00019DF2 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019DF6 0010 0000                  		dc.w $10, 0
00019DFA 0000 0010                  		dc.w 0,	$10
00019DFE 0010 0010                  		dc.w $10, $10
00019E02                            ; ---------------------------------------------------------------------------
00019E02                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019E02                            ; ---------------------------------------------------------------------------
00019E02                            Map_obj76:
00019E02                            	include "_maps\obj76.asm"
00019E02                            ; ---------------------------------------------------------------------------
00019E02                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019E02                            ; ---------------------------------------------------------------------------
00019E02 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019E06 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019E0A 0000                       		dc.w byte_19826-Map_obj76
00019E0C 02                         byte_19808:	dc.b 2
00019E0D F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019E12 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019E17 00                         		dc.b 0
00019E18 01                         byte_19814:	dc.b 1
00019E19 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019E1E 01                         byte_1981A:	dc.b 1
00019E1F F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019E24 01                         byte_19820:	dc.b 1
00019E25 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019E2A 01                         byte_19826:	dc.b 1
00019E2B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019E30                            		even
00019E30                            		even
00019E30                            
00019E30                            ; ===========================================================================
00019E30                            
00019E30                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019E30 4EF9 0000 DBAE             		jmp	DeleteObject
00019E36                            ; ===========================================================================
00019E36                            ; ---------------------------------------------------------------------------
00019E36                            ; Object 82 - Eggman (SBZ2)
00019E36                            ; ---------------------------------------------------------------------------
00019E36                            
00019E36                            Obj82:					; XREF: Obj_Index
00019E36 7000                       		moveq	#0,d0
00019E38 1028 0024                  		move.b	$24(a0),d0
00019E3C 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019E40 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019E44                            ; ===========================================================================
00019E44 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019E46 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019E48 0000                       		dc.w Obj82_Switch-Obj82_Index
00019E4A                            
00019E4A 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019E4D 0400 03                    		dc.b 4,	0, 3
00019E50                            ; ===========================================================================
00019E50                            
00019E50                            Obj82_Main:				; XREF: Obj82_Index
00019E50 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019E54 317C 2160 0008             		move.w	#$2160,8(a0)
00019E5A 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019E60 117C 000F 0020             		move.b	#$F,$20(a0)
00019E66 117C 0010 0021             		move.b	#$10,$21(a0)
00019E6C 08A8 0000 0022             		bclr	#0,$22(a0)
00019E72 4228 0025                  		clr.b	$25(a0)
00019E76 115A 0024                  		move.b	(a2)+,$24(a0)
00019E7A 115A 001C                  		move.b	(a2)+,$1C(a0)
00019E7E 115A 0018                  		move.b	(a2)+,$18(a0)
00019E82 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019E8A 317C 0400 0002             		move.w	#$400,2(a0)
00019E90 117C 0004 0001             		move.b	#4,1(a0)
00019E96 08E8 0007 0001             		bset	#7,1(a0)
00019E9C 117C 0020 0019             		move.b	#$20,$19(a0)
00019EA2 4EB9 0000 E00E             		jsr	SingleObjLoad2
00019EA8 6600                       		bne.s	Obj82_Eggman
00019EAA 2348 0034                  		move.l	a0,$34(a1)
00019EAE 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019EB2 337C 2130 0008             		move.w	#$2130,8(a1)
00019EB8 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019EBE 4228 0025                  		clr.b	$25(a0)
00019EC2 135A 0024                  		move.b	(a2)+,$24(a1)
00019EC6 135A 001C                  		move.b	(a2)+,$1C(a1)
00019ECA 135A 0018                  		move.b	(a2)+,$18(a1)
00019ECE 237C 0000 C366 0004        		move.l	#Map_obj32,4(a1)
00019ED6 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019EDC 137C 0004 0001             		move.b	#4,1(a1)
00019EE2 08E9 0007 0001             		bset	#7,1(a1)
00019EE8 137C 0010 0019             		move.b	#$10,$19(a1)
00019EEE 137C 0000 001A             		move.b	#0,$1A(a1)
00019EF4                            
00019EF4                            Obj82_Eggman:				; XREF: Obj82_Index
00019EF4 7000                       		moveq	#0,d0
00019EF6 1028 0025                  		move.b	$25(a0),d0
00019EFA 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019EFE 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019F02 43FA 0000                  		lea	Ani_obj82(pc),a1
00019F06 4EB9 0000 AC42             		jsr	AnimateSprite
00019F0C 4EF9 0000 DB72             		jmp	DisplaySprite
00019F12                            ; ===========================================================================
00019F12 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019F14 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019F16 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019F18 0000                       		dc.w loc_19934-Obj82_EggIndex
00019F1A                            ; ===========================================================================
00019F1A                            
00019F1A                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019F1A 3028 0008                  		move.w	8(a0),d0
00019F1E 9078 D008                  		sub.w	($FFFFD008).w,d0
00019F22 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019F26 6400                       		bcc.s	loc_19934	; if not, branch
00019F28 5428 0025                  		addq.b	#2,$25(a0)
00019F2C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019F32 117C 0001 001C             		move.b	#1,$1C(a0)
00019F38                            
00019F38                            loc_19934:				; XREF: Obj82_EggIndex
00019F38 4EF9 0000 DB4C             		jmp	SpeedToPos
00019F3E                            ; ===========================================================================
00019F3E                            
00019F3E                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019F3E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019F42 6600                       		bne.s	loc_19954	; if time remains, branch
00019F44 5428 0025                  		addq.b	#2,$25(a0)
00019F48 117C 0002 001C             		move.b	#2,$1C(a0)
00019F4E 5868 000C                  		addq.w	#4,$C(a0)
00019F52 317C 000F 003C             		move.w	#15,$3C(a0)
00019F58                            
00019F58                            loc_19954:
00019F58 60DE                       		bra.s	loc_19934
00019F5A                            ; ===========================================================================
00019F5A                            
00019F5A                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019F5A 5368 003C                  		subq.w	#1,$3C(a0)
00019F5E 6E00                       		bgt.s	loc_199D0
00019F60 6600                       		bne.s	loc_1996A
00019F62 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019F68 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019F6E                            
00019F6E                            loc_1996A:
00019F6E 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019F74 6E00                       		bgt.s	loc_19976
00019F76 4268 0010                  		clr.w	$10(a0)
00019F7A                            
00019F7A                            loc_19976:
00019F7A 0668 0024 0012             		addi.w	#$24,$12(a0)
00019F80 4A68 0012                  		tst.w	$12(a0)
00019F84 6B00                       		bmi.s	Obj82_FindBlocks
00019F86 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019F8C 6500                       		bcs.s	Obj82_FindBlocks
00019F8E 317C 5357 0028             		move.w	#$5357,$28(a0)
00019F94 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019F9A 6500                       		bcs.s	Obj82_FindBlocks
00019F9C 317C 059B 000C             		move.w	#$59B,$C(a0)
00019FA2 4268 0012                  		clr.w	$12(a0)
00019FA6                            
00019FA6                            Obj82_FindBlocks:
00019FA6 3028 0010                  		move.w	$10(a0),d0
00019FAA 8068 0012                  		or.w	$12(a0),d0
00019FAE 6600                       		bne.s	loc_199D0
00019FB0 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019FB4 703E                       		moveq	#$3E,d0
00019FB6 7240                       		moveq	#$40,d1
00019FB8                            
00019FB8                            Obj82_FindLoop:	
00019FB8 D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019FBA 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019FBE 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019FC2                            
00019FC2 6600                       		bne.s	loc_199D0
00019FC4 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019FCA 5428 0025                  		addq.b	#2,$25(a0)
00019FCE 117C 0001 001C             		move.b	#1,$1C(a0)
00019FD4                            
00019FD4                            loc_199D0:
00019FD4 6000 FF62                  		bra.w	loc_19934
00019FD8                            ; ===========================================================================
00019FD8                            
00019FD8                            Obj82_Switch:				; XREF: Obj82_Index
00019FD8 7000                       		moveq	#0,d0
00019FDA 1028 0025                  		move.b	$25(a0),d0
00019FDE 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019FE2 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019FE6                            ; ===========================================================================
00019FE6 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019FE8 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019FEA                            ; ===========================================================================
00019FEA                            
00019FEA                            loc_199E6:				; XREF: Obj82_SwIndex
00019FEA 2268 0034                  		movea.l	$34(a0),a1
00019FEE 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019FF4 6600                       		bne.s	Obj82_SwDisplay
00019FF6 117C 0001 001A             		move.b	#1,$1A(a0)
00019FFC 5428 0025                  		addq.b	#2,$25(a0)
0001A000                            
0001A000                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A000 4EF9 0000 DB72             		jmp	DisplaySprite
0001A006                            ; ===========================================================================
0001A006                            Ani_obj82:
0001A006                            	include "_anim\obj82.asm"
0001A006                            ; ---------------------------------------------------------------------------
0001A006                            ; Animation script - Eggman (SBZ2)
0001A006                            ; ---------------------------------------------------------------------------
0001A006 0000                       		dc.w byte_19A10-Ani_obj82
0001A008 0000                       		dc.w byte_19A14-Ani_obj82
0001A00A 0000                       		dc.w byte_19A18-Ani_obj82
0001A00C 0000                       		dc.w byte_19A20-Ani_obj82
0001A00E 0000                       		dc.w byte_19A24-Ani_obj82
0001A010 0000                       		dc.w byte_19A2A-Ani_obj82
0001A012 0000                       		dc.w byte_19A30-Ani_obj82
0001A014 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A018 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A01C 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A024 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A028 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A02E 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A034 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A038                            		even
0001A038                            		even
0001A038                            
0001A038                            ; ---------------------------------------------------------------------------
0001A038                            ; Sprite mappings - Eggman (SBZ2)
0001A038                            ; ---------------------------------------------------------------------------
0001A038                            Map_obj82:
0001A038                            	include "_maps\obj82.asm"
0001A038                            ; ================================================================================
0001A038                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A038                            ; ================================================================================
0001A038                            
0001A038                            DATAA16Z12RYSAF:
0001A038 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A03C 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A040 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A044 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A048 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A04C 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A04E 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A04F FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A054 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A059 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A05E 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A05F E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A064 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A069 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A06E FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A073 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A074 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A079 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A07E 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A083 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A088 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A089 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A08E 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A093 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A098 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A099 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A09E 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A0A3 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A0A8 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A0AD 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A0AE E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0B3 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0B8 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A0BD 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A0C2 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A0C3 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0C8 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0CD 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A0D2 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A0D7 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A0DC F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A0E1 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A0E6 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A0E7 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A0EC E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A0F1 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A0F6 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A0FB 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A0FC 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A101 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A106 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A10B 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A110 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A115 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A116 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A11B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A120 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A125 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A12A E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A12F F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A134 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A139 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A13E 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A13F EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A144 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A149 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A14E                            	even
0001A14E                            	even
0001A14E                            
0001A14E                            ; ===========================================================================
0001A14E                            ; ---------------------------------------------------------------------------
0001A14E                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A14E                            ; ---------------------------------------------------------------------------
0001A14E                            
0001A14E                            Obj83:					; XREF: Obj_Index
0001A14E 7000                       		moveq	#0,d0
0001A150 1028 0024                  		move.b	$24(a0),d0
0001A154 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A158 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A15C                            ; ===========================================================================
0001A15C 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A15E 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A160 0000                       		dc.w loc_19C36-Obj83_Index
0001A162 0000                       		dc.w loc_19C62-Obj83_Index
0001A164 0000                       		dc.w loc_19C72-Obj83_Index
0001A166 0000                       		dc.w loc_19C80-Obj83_Index
0001A168                            ; ===========================================================================
0001A168                            
0001A168                            Obj83_Main:				; XREF: Obj83_Index
0001A168 317C 2080 0008             		move.w	#$2080,8(a0)
0001A16E 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A174 117C 0080 0019             		move.b	#$80,$19(a0)
0001A17A 117C 0010 0016             		move.b	#$10,$16(a0)
0001A180 117C 0004 0001             		move.b	#4,1(a0)
0001A186 08E8 0007 0001             		bset	#7,1(a0)
0001A18C 7800                       		moveq	#0,d4
0001A18E 3A3C 2010                  		move.w	#$2010,d5
0001A192 7C07                       		moveq	#7,d6
0001A194 45E8 0030                  		lea	$30(a0),a2
0001A198                            
0001A198                            Obj83_MakeBlock:
0001A198 4EB9 0000 DFF8             		jsr	SingleObjLoad
0001A19E 6600                       		bne.s	Obj83_ExitMake
0001A1A0 34C9                       		move.w	a1,(a2)+
0001A1A2 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A1A6 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A1AE 337C 4518 0002             		move.w	#$4518,2(a1)
0001A1B4 137C 0004 0001             		move.b	#4,1(a1)
0001A1BA 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1C0 137C 0010 0016             		move.b	#$10,$16(a1)
0001A1C6 137C 0003 0018             		move.b	#3,$18(a1)
0001A1CC 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A1D0 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A1D6 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A1DA 137C 0008 0024             		move.b	#8,$24(a1)
0001A1E0 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A1E4                            
0001A1E4                            Obj83_ExitMake:
0001A1E4 5428 0024                  		addq.b	#2,$24(a0)
0001A1E8 4E75                       		rts	
0001A1EA                            ; ===========================================================================
0001A1EA                            
0001A1EA                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A1EA 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A1F0 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A1F2 4228 001A                  		clr.b	$1A(a0)
0001A1F6 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A1FA                            
0001A1FA                            Obj83_Solid:
0001A1FA 7000                       		moveq	#0,d0
0001A1FC 1028 001A                  		move.b	$1A(a0),d0
0001A200 4400                       		neg.b	d0
0001A202 4880                       		ext.w	d0
0001A204 5040                       		addq.w	#8,d0
0001A206 E940                       		asl.w	#4,d0
0001A208 383C 2100                  		move.w	#$2100,d4
0001A20C 9840                       		sub.w	d0,d4
0001A20E 1140 0019                  		move.b	d0,$19(a0)
0001A212 3144 0008                  		move.w	d4,8(a0)
0001A216 720B                       		moveq	#$B,d1
0001A218 D240                       		add.w	d0,d1
0001A21A 7410                       		moveq	#$10,d2
0001A21C 7611                       		moveq	#$11,d3
0001A21E 4EF9 0000 FF42             		jmp	SolidObject
0001A224                            ; ===========================================================================
0001A224                            
0001A224                            loc_19C36:				; XREF: Obj83_Index
0001A224 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A22A 6400                       		bcc.s	Obj83_Solid2
0001A22C 70FF                       		moveq	#-1,d0
0001A22E 1028 001A                  		move.b	$1A(a0),d0
0001A232 4880                       		ext.w	d0
0001A234 D040                       		add.w	d0,d0
0001A236 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A23A 2240                       		movea.l	d0,a1
0001A23C 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A242 5228 001A                  		addq.b	#1,$1A(a0)
0001A246 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A24C 6700                       		beq.s	loc_19C62
0001A24E                            
0001A24E                            Obj83_Solid2:
0001A24E 60AA                       		bra.s	Obj83_Solid
0001A250                            ; ===========================================================================
0001A250                            
0001A250                            loc_19C62:				; XREF: Obj83_Index
0001A250 08A8 0003 0022             		bclr	#3,$22(a0)
0001A256 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A25C 6000 FBD2                  		bra.w	loc_1982C
0001A260                            ; ===========================================================================
0001A260                            
0001A260                            loc_19C72:				; XREF: Obj83_Index
0001A260 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A266 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A268 4EF9 0000 DB72             		jmp	DisplaySprite
0001A26E                            ; ===========================================================================
0001A26E                            
0001A26E                            loc_19C80:				; XREF: Obj83_Index
0001A26E 4A28 0001                  		tst.b	1(a0)
0001A272 6A00 FBBC                  		bpl.w	loc_1982C
0001A276 4EB9 0000 DB20             		jsr	ObjectFall
0001A27C 4EF9 0000 DB72             		jmp	DisplaySprite
0001A282                            ; ===========================================================================
0001A282                            
0001A282                            Obj83_Break:				; XREF: loc_19C72
0001A282 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A286 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A28A 7801                       		moveq	#1,d4
0001A28C 7203                       		moveq	#3,d1
0001A28E 7438                       		moveq	#$38,d2
0001A290 5428 0024                  		addq.b	#2,$24(a0)
0001A294 117C 0008 0019             		move.b	#8,$19(a0)
0001A29A 117C 0008 0016             		move.b	#8,$16(a0)
0001A2A0 43D0                       		lea	(a0),a1
0001A2A2 6000                       		bra.s	Obj83_MakeFrag
0001A2A4                            ; ===========================================================================
0001A2A4                            
0001A2A4                            Obj83_LoopFrag:
0001A2A4 4EB9 0000 E00E             		jsr	SingleObjLoad2
0001A2AA 6600                       		bne.s	Obj83_BreakSnd
0001A2AC                            
0001A2AC                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A2AC 45D0                       		lea	(a0),a2
0001A2AE 47D1                       		lea	(a1),a3
0001A2B0 7603                       		moveq	#3,d3
0001A2B2                            
0001A2B2                            loc_19CC4:
0001A2B2 26DA                       		move.l	(a2)+,(a3)+
0001A2B4 26DA                       		move.l	(a2)+,(a3)+
0001A2B6 26DA                       		move.l	(a2)+,(a3)+
0001A2B8 26DA                       		move.l	(a2)+,(a3)+
0001A2BA 51CB FFF6                  		dbf	d3,loc_19CC4
0001A2BE                            
0001A2BE 335C 0012                  		move.w	(a4)+,$12(a1)
0001A2C2 361D                       		move.w	(a5)+,d3
0001A2C4 D769 0008                  		add.w	d3,8(a1)
0001A2C8 361D                       		move.w	(a5)+,d3
0001A2CA D769 000C                  		add.w	d3,$C(a1)
0001A2CE 1344 001A                  		move.b	d4,$1A(a1)
0001A2D2 5244                       		addq.w	#1,d4
0001A2D4 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A2D8                            
0001A2D8                            Obj83_BreakSnd:
0001A2D8 303C 00CB                  		move.w	#$CB,d0
0001A2DC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A2E2 4EF9 0000 DB72             		jmp	DisplaySprite
0001A2E8                            ; ===========================================================================
0001A2E8 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A2EC 0120 00C0                  		dc.w $120, $C0
0001A2F0 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A2F4 0010 0000                  		dc.w $10, 0
0001A2F8 0000 0010                  		dc.w 0,	$10
0001A2FC 0010 0010                  		dc.w $10, $10
0001A300                            ; ---------------------------------------------------------------------------
0001A300                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A300                            ; ---------------------------------------------------------------------------
0001A300                            Map_obj83:
0001A300                            	include "_maps\obj83.asm"
0001A300                            ; ---------------------------------------------------------------------------
0001A300                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A300                            ; ---------------------------------------------------------------------------
0001A300 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A304 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A308 0000                       		dc.w byte_19D46-Map_obj83
0001A30A 01                         byte_19D1C:	dc.b 1
0001A30B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A310 02                         byte_19D22:	dc.b 2
0001A311 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A316 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A31B 00                         		dc.b 0
0001A31C 02                         byte_19D2E:	dc.b 2
0001A31D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A322 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A327 00                         		dc.b 0
0001A328 02                         byte_19D3A:	dc.b 2
0001A329 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A32E F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A333 00                         		dc.b 0
0001A334 02                         byte_19D46:	dc.b 2
0001A335 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A33A F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A340 00                         		even
0001A340 00                         		even
0001A340                            
0001A340                            ; ===========================================================================
0001A340                            ; ---------------------------------------------------------------------------
0001A340                            ; Object 85 - Eggman (FZ)
0001A340                            ; ---------------------------------------------------------------------------
0001A340                            
0001A340                            Obj85_Delete:
0001A340 4EF9 0000 DBAE             		jmp	DeleteObject
0001A346                            ; ===========================================================================
0001A346                            
0001A346                            Obj85:					; XREF: Obj_Index
0001A346 7000                       		moveq	#0,d0
0001A348 1028 0024                  		move.b	$24(a0),d0
0001A34C 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A350 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A354                            ; ===========================================================================
0001A354 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A356 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A358 0000                       		dc.w loc_1A38E-Obj85_Index
0001A35A 0000                       		dc.w loc_1A346-Obj85_Index
0001A35C 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A35E 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A360 0000                       		dc.w loc_1A264-Obj85_Index
0001A362                            
0001A362 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A368 0001 A038                  		dc.l Map_obj82		; mappings pointer
0001A36C 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A372 0000 0000                  		dc.l Map_obj84
0001A376 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A37C 0000 0000                  		dc.l Map_FZBoss
0001A380 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A386 0001 A038                  		dc.l Map_obj82
0001A38A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A390 0001 831A                  		dc.l Map_Eggman
0001A394 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A39A 0001 831A                  		dc.l Map_Eggman
0001A39E                            
0001A39E 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A3A3 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A3A8 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A3AD 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A3B2 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A3B7 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A3BC                            ; ===========================================================================
0001A3BC                            
0001A3BC                            Obj85_Main:				; XREF: Obj85_Index
0001A3BC 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A3C0 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A3C4 2248                       		movea.l	a0,a1
0001A3C6 7205                       		moveq	#5,d1
0001A3C8 6000                       		bra.s	Obj85_LoadBoss
0001A3CA                            ; ===========================================================================
0001A3CA                            
0001A3CA                            Obj85_Loop:
0001A3CA 4EB9 0000 E00E             		jsr	SingleObjLoad2
0001A3D0 6600                       		bne.s	loc_19E20
0001A3D2                            
0001A3D2                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A3D2 12BC 0085                  		move.b	#$85,(a1)
0001A3D6 335A 0008                  		move.w	(a2)+,8(a1)
0001A3DA 335A 000C                  		move.w	(a2)+,$C(a1)
0001A3DE 335A 0002                  		move.w	(a2)+,2(a1)
0001A3E2 235A 0004                  		move.l	(a2)+,4(a1)
0001A3E6 135B 0024                  		move.b	(a3)+,$24(a1)
0001A3EA 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A3EE 135B 0018                  		move.b	(a3)+,$18(a1)
0001A3F2 135B 0017                  		move.b	(a3)+,$17(a1)
0001A3F6 135B 0016                  		move.b	(a3)+,$16(a1)
0001A3FA 137C 0004 0001             		move.b	#4,1(a1)
0001A400 08E8 0007 0001             		bset	#7,1(a0)
0001A406 2348 0034                  		move.l	a0,$34(a1)
0001A40A 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A40E                            
0001A40E                            loc_19E20:
0001A40E 45E8 0036                  		lea	$36(a0),a2
0001A412 4EB9 0000 DFF8             		jsr	SingleObjLoad
0001A418 6600                       		bne.s	loc_19E5A
0001A41A 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A41E 3489                       		move.w	a1,(a2)
0001A420 2348 0034                  		move.l	a0,$34(a1)
0001A424 45E8 0038                  		lea	$38(a0),a2
0001A428 7400                       		moveq	#0,d2
0001A42A 7203                       		moveq	#3,d1
0001A42C                            
0001A42C                            loc_19E3E:
0001A42C 4EB9 0000 E00E             		jsr	SingleObjLoad2
0001A432 6600                       		bne.s	loc_19E5A
0001A434 34C9                       		move.w	a1,(a2)+
0001A436 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A43A 2348 0034                  		move.l	a0,$34(a1)
0001A43E 1342 0028                  		move.b	d2,$28(a1)
0001A442 5442                       		addq.w	#2,d2
0001A444 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A448                            
0001A448                            loc_19E5A:
0001A448 317C 0000 0034             		move.w	#0,$34(a0)
0001A44E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A454 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A45A                            
0001A45A                            Obj85_Eggman:				; XREF: Obj85_Index
0001A45A 7000                       		moveq	#0,d0
0001A45C 1028 0034                  		move.b	$34(a0),d0
0001A460 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A464 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A468 4EF9 0000 DB72             		jmp	DisplaySprite
0001A46E                            ; ===========================================================================
0001A46E 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A472 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A476 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A47A 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A47E                            ; ===========================================================================
0001A47E                            
0001A47E                            loc_19E90:				; XREF: off_19E80
0001A47E 4AB8 F680                  		tst.l	($FFFFF680).w
0001A482 6600                       		bne.s	loc_19EA2
0001A484 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A48A 6500                       		bcs.s	loc_19EA2
0001A48C 5428 0034                  		addq.b	#2,$34(a0)
0001A490                            
0001A490                            loc_19EA2:
0001A490 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A494 4E75                       		rts	
0001A496                            ; ===========================================================================
0001A496                            
0001A496                            loc_19EA8:				; XREF: off_19E80
0001A496 4A68 0030                  		tst.w	$30(a0)
0001A49A 6A00                       		bpl.s	loc_19F10
0001A49C 4268 0030                  		clr.w	$30(a0)
0001A4A0 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001A4A6 0240 000C                  		andi.w	#$C,d0
0001A4AA 3200                       		move.w	d0,d1
0001A4AC 5441                       		addq.w	#2,d1
0001A4AE 4A80                       		tst.l	d0
0001A4B0 6A00                       		bpl.s	loc_19EC6
0001A4B2 C141                       		exg	d1,d0
0001A4B4                            
0001A4B4                            loc_19EC6:
0001A4B4 43FA 0000                  		lea	word_19FD6(pc),a1
0001A4B8 3031 0000                  		move.w	(a1,d0.w),d0
0001A4BC 3231 1000                  		move.w	(a1,d1.w),d1
0001A4C0 3140 0030                  		move.w	d0,$30(a0)
0001A4C4 74FF                       		moveq	#-1,d2
0001A4C6 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A4CA 2242                       		movea.l	d2,a1
0001A4CC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A4D2 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A4D8 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A4DC 2242                       		movea.l	d2,a1
0001A4DE 137C 0001 0029             		move.b	#1,$29(a1)
0001A4E4 337C 0000 0030             		move.w	#0,$30(a1)
0001A4EA 317C 0001 0032             		move.w	#1,$32(a0)
0001A4F0 4228 0035                  		clr.b	$35(a0)
0001A4F4 303C 00B7                  		move.w	#$B7,d0
0001A4F8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A4FE                            
0001A4FE                            loc_19F10:
0001A4FE 4A68 0032                  		tst.w	$32(a0)
0001A502 6B00 0000                  		bmi.w	loc_19FA6
0001A506 08A8 0000 0022             		bclr	#0,$22(a0)
0001A50C 3038 D008                  		move.w	($FFFFD008).w,d0
0001A510 9068 0008                  		sub.w	8(a0),d0
0001A514 6500                       		bcs.s	loc_19F2E
0001A516 08E8 0000 0022             		bset	#0,$22(a0)
0001A51C                            
0001A51C                            loc_19F2E:
0001A51C 323C 002B                  		move.w	#$2B,d1
0001A520 343C 0014                  		move.w	#$14,d2
0001A524 363C 0014                  		move.w	#$14,d3
0001A528 3828 0008                  		move.w	8(a0),d4
0001A52C 4EB9 0000 FF42             		jsr	SolidObject
0001A532 4A44                       		tst.w	d4
0001A534 6E00                       		bgt.s	loc_19F50
0001A536                            
0001A536                            loc_19F48:
0001A536 4A28 0035                  		tst.b	$35(a0)
0001A53A 6600                       		bne.s	loc_19F88
0001A53C 6000                       		bra.s	loc_19F96
0001A53E                            ; ===========================================================================
0001A53E                            
0001A53E                            loc_19F50:
0001A53E 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A542 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A548 66EC                       		bne.s	loc_19F48
0001A54A 303C 0300                  		move.w	#$300,d0
0001A54E 0828 0000 0022             		btst	#0,$22(a0)
0001A554 6600                       		bne.s	loc_19F6A
0001A556 4440                       		neg.w	d0
0001A558                            
0001A558                            loc_19F6A:
0001A558 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A55C 4A28 0035                  		tst.b	$35(a0)
0001A560 6600                       		bne.s	loc_19F88
0001A562 5328 0021                  		subq.b	#1,$21(a0)
0001A566 117C 0064 0035             		move.b	#$64,$35(a0)
0001A56C 303C 00AC                  		move.w	#$AC,d0
0001A570 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A576                            
0001A576                            loc_19F88:
0001A576 5328 0035                  		subq.b	#1,$35(a0)
0001A57A 6700                       		beq.s	loc_19F96
0001A57C 117C 0003 001C             		move.b	#3,$1C(a0)
0001A582 6000                       		bra.s	loc_19F9C
0001A584                            ; ===========================================================================
0001A584                            
0001A584                            loc_19F96:
0001A584 117C 0001 001C             		move.b	#1,$1C(a0)
0001A58A                            
0001A58A                            loc_19F9C:
0001A58A 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A58E 4EF9 0000 AC42             		jmp	AnimateSprite
0001A594                            ; ===========================================================================
0001A594                            
0001A594                            loc_19FA6:
0001A594 4A28 0021                  		tst.b	$21(a0)
0001A598 6700                       		beq.s	loc_19FBC
0001A59A 5428 0034                  		addq.b	#2,$34(a0)
0001A59E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A5A4 4268 0032                  		clr.w	$32(a0)
0001A5A8 4E75                       		rts	
0001A5AA                            ; ===========================================================================
0001A5AA                            
0001A5AA                            loc_19FBC:
0001A5AA 117C 0006 0034             		move.b	#6,$34(a0)
0001A5B0 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A5B6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A5BC 117C 0014 0016             		move.b	#$14,$16(a0)
0001A5C2 4E75                       		rts	
0001A5C4                            ; ===========================================================================
0001A5C4 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A5D4                            ; ===========================================================================
0001A5D4                            
0001A5D4                            loc_19FE6:				; XREF: off_19E80
0001A5D4 70FF                       		moveq	#-1,d0
0001A5D6 3028 0036                  		move.w	$36(a0),d0
0001A5DA 2240                       		movea.l	d0,a1
0001A5DC 4A68 0030                  		tst.w	$30(a0)
0001A5E0 6A00                       		bpl.s	loc_1A000
0001A5E2 4268 0030                  		clr.w	$30(a0)
0001A5E6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A5EC 6100                       		bsr.s	loc_1A020
0001A5EE                            
0001A5EE                            loc_1A000:
0001A5EE 700F                       		moveq	#$F,d0
0001A5F0 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A5F4 6600                       		bne.s	loc_1A00A
0001A5F6 6100                       		bsr.s	loc_1A020
0001A5F8                            
0001A5F8                            loc_1A00A:
0001A5F8 4A68 0032                  		tst.w	$32(a0)
0001A5FC 6700                       		beq.s	locret_1A01E
0001A5FE 5528 0034                  		subq.b	#2,$34(a0)
0001A602 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A608 4268 0032                  		clr.w	$32(a0)
0001A60C                            
0001A60C                            locret_1A01E:
0001A60C 4E75                       		rts	
0001A60E                            ; ===========================================================================
0001A60E                            
0001A60E                            loc_1A020:
0001A60E 303C 00B1                  		move.w	#$B1,d0
0001A612 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A618                            ; ===========================================================================
0001A618                            
0001A618                            loc_1A02A:				; XREF: off_19E80
0001A618 117C 0030 0017             		move.b	#$30,$17(a0)
0001A61E 08E8 0000 0022             		bset	#0,$22(a0)
0001A624 4EB9 0000 DB4C             		jsr	SpeedToPos
0001A62A 117C 0006 001A             		move.b	#6,$1A(a0)
0001A630 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A636 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A63C 6500                       		bcs.s	loc_1A070
0001A63E 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A644 5428 0034                  		addq.b	#2,$34(a0)
0001A648 117C 0020 0017             		move.b	#$20,$17(a0)
0001A64E 317C 0100 0010             		move.w	#$100,$10(a0)
0001A654 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A65A 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A65E                            
0001A65E                            loc_1A070:
0001A65E 6000 0000                  		bra.w	loc_1A166
0001A662                            ; ===========================================================================
0001A662                            
0001A662                            loc_1A074:				; XREF: off_19E80
0001A662 08E8 0000 0022             		bset	#0,$22(a0)
0001A668 117C 0004 001C             		move.b	#4,$1C(a0)
0001A66E 4EB9 0000 DB4C             		jsr	SpeedToPos
0001A674 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A67A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A680 6500                       		bcs.s	loc_1A09A
0001A682 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A688                            
0001A688                            loc_1A09A:
0001A688 317C 0400 0010             		move.w	#$400,$10(a0)
0001A68E 3028 0008                  		move.w	8(a0),d0
0001A692 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A696 6A00                       		bpl.s	loc_1A0B4
0001A698 317C 0500 0010             		move.w	#$500,$10(a0)
0001A69E 6000 0000                  		bra.w	loc_1A0F2
0001A6A2                            ; ===========================================================================
0001A6A2                            
0001A6A2                            loc_1A0B4:
0001A6A2 0440 0070                  		subi.w	#$70,d0
0001A6A6 6500                       		bcs.s	loc_1A0F2
0001A6A8 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A6AE 5140                       		subq.w	#8,d0
0001A6B0 6500                       		bcs.s	loc_1A0F2
0001A6B2 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A6B8 5140                       		subq.w	#8,d0
0001A6BA 6500                       		bcs.s	loc_1A0F2
0001A6BC 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6C2 5140                       		subq.w	#8,d0
0001A6C4 6500                       		bcs.s	loc_1A0F2
0001A6C6 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6CC 5140                       		subq.w	#8,d0
0001A6CE 6500                       		bcs.s	loc_1A0F2
0001A6D0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6D6 0440 0038                  		subi.w	#$38,d0
0001A6DA 6500                       		bcs.s	loc_1A0F2
0001A6DC 4268 0010                  		clr.w	$10(a0)
0001A6E0                            
0001A6E0                            loc_1A0F2:
0001A6E0 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A6E6 6500                       		bcs.s	loc_1A110
0001A6E8 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A6EE 317C 0240 0010             		move.w	#$240,$10(a0)
0001A6F4 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A6FA 5428 0034                  		addq.b	#2,$34(a0)
0001A6FE                            
0001A6FE                            loc_1A110:
0001A6FE 6000                       		bra.s	loc_1A15C
0001A700                            ; ===========================================================================
0001A700                            
0001A700                            loc_1A112:				; XREF: off_19E80
0001A700 4EB9 0000 DB4C             		jsr	SpeedToPos
0001A706 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A70C 6500                       		bcs.s	loc_1A124
0001A70E 4268 0010                  		clr.w	$10(a0)
0001A712                            
0001A712                            loc_1A124:
0001A712 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A718 4A68 0012                  		tst.w	$12(a0)
0001A71C 6B00                       		bmi.s	loc_1A142
0001A71E 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A724 6500                       		bcs.s	loc_1A142
0001A726 317C 0592 000C             		move.w	#$592,$C(a0)
0001A72C 4268 0012                  		clr.w	$12(a0)
0001A730                            
0001A730                            loc_1A142:
0001A730 3028 0010                  		move.w	$10(a0),d0
0001A734 8068 0012                  		or.w	$12(a0),d0
0001A738 6600                       		bne.s	loc_1A15C
0001A73A 5428 0034                  		addq.b	#2,$34(a0)
0001A73E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A744 117C 0001 0021             		move.b	#1,$21(a0)
0001A74A                            
0001A74A                            loc_1A15C:
0001A74A 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A74E 4EB9 0000 AC42             		jsr	AnimateSprite
0001A754                            
0001A754                            loc_1A166:
0001A754 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A75A 6C00                       		bge.s	loc_1A172
0001A75C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A760                            
0001A760                            loc_1A172:
0001A760 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A766 6C00                       		bge.s	locret_1A190
0001A768 323C 001B                  		move.w	#$1B,d1
0001A76C 343C 0070                  		move.w	#$70,d2
0001A770 363C 0071                  		move.w	#$71,d3
0001A774 3828 0008                  		move.w	8(a0),d4
0001A778 4EF9 0000 FF42             		jmp	SolidObject
0001A77E                            ; ===========================================================================
0001A77E                            
0001A77E                            locret_1A190:
0001A77E 4E75                       		rts	
0001A780                            ; ===========================================================================
0001A780                            
0001A780                            loc_1A192:				; XREF: off_19E80
0001A780 217C 0001 831A 0004        		move.l	#Map_Eggman,4(a0)
0001A788 317C 0400 0002             		move.w	#$400,2(a0)
0001A78E 117C 0000 001C             		move.b	#0,$1C(a0)
0001A794 08E8 0000 0022             		bset	#0,$22(a0)
0001A79A 4EB9 0000 DB4C             		jsr	SpeedToPos
0001A7A0 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A7A6 6400                       		bcc.s	loc_1A1D0
0001A7A8 317C 0180 0010             		move.w	#$180,$10(a0)
0001A7AE 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A7B4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A7BA 5428 0034                  		addq.b	#2,$34(a0)
0001A7BE                            
0001A7BE                            loc_1A1D0:
0001A7BE 6000 FF8A                  		bra.w	loc_1A15C
0001A7C2                            ; ===========================================================================
0001A7C2                            
0001A7C2                            loc_1A1D4:				; XREF: off_19E80
0001A7C2 08E8 0000 0022             		bset	#0,$22(a0)
0001A7C8 4EB9 0000 DB4C             		jsr	SpeedToPos
0001A7CE 4A68 0030                  		tst.w	$30(a0)
0001A7D2 6600                       		bne.s	loc_1A1FC
0001A7D4 4A28 0020                  		tst.b	$20(a0)
0001A7D8 6600                       		bne.s	loc_1A216
0001A7DA 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A7E0 303C 00AC                  		move.w	#$AC,d0
0001A7E4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A7EA                            
0001A7EA                            loc_1A1FC:
0001A7EA 5368 0030                  		subq.w	#1,$30(a0)
0001A7EE 6600                       		bne.s	loc_1A216
0001A7F0 4A28 0022                  		tst.b	$22(a0)
0001A7F4 6A00                       		bpl.s	loc_1A210
0001A7F6 317C 0060 0012             		move.w	#$60,$12(a0)
0001A7FC 6000                       		bra.s	loc_1A216
0001A7FE                            ; ===========================================================================
0001A7FE                            
0001A7FE                            loc_1A210:
0001A7FE 117C 000F 0020             		move.b	#$F,$20(a0)
0001A804                            
0001A804                            loc_1A216:
0001A804 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A80A 6D00                       		blt.s	loc_1A23A
0001A80C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A812 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A818 4278 D014                  		clr.w	($FFFFD014).w
0001A81C 4A68 0012                  		tst.w	$12(a0)
0001A820 6A00                       		bpl.s	loc_1A248
0001A822 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A828                            
0001A828                            loc_1A23A:
0001A828 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A82E 6D00                       		blt.s	loc_1A248
0001A830 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A836                            
0001A836                            loc_1A248:
0001A836 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A83C 6500                       		bcs.s	loc_1A260
0001A83E 4A28 0001                  		tst.b	1(a0)
0001A842 6B00                       		bmi.s	loc_1A260
0001A844 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A84A 6000 FAF4                  		bra.w	Obj85_Delete
0001A84E                            ; ===========================================================================
0001A84E                            
0001A84E                            loc_1A260:
0001A84E 6000 FEFA                  		bra.w	loc_1A15C
0001A852                            ; ===========================================================================
0001A852                            
0001A852                            loc_1A264:				; XREF: Obj85_Index
0001A852 2268 0034                  		movea.l	$34(a0),a1
0001A856 1011                       		move.b	(a1),d0
0001A858 B010                       		cmp.b	(a0),d0
0001A85A 6600 FAE4                  		bne.w	Obj85_Delete
0001A85E 117C 0007 001C             		move.b	#7,$1C(a0)
0001A864 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A86A 6C00                       		bge.s	loc_1A280
0001A86C 6000                       		bra.s	loc_1A2A6
0001A86E                            ; ===========================================================================
0001A86E                            
0001A86E                            loc_1A280:
0001A86E 4A69 0010                  		tst.w	$10(a1)
0001A872 6700                       		beq.s	loc_1A28C
0001A874 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A87A                            
0001A87A                            loc_1A28C:
0001A87A 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001A87E 4EB9 0000 AC42             		jsr	AnimateSprite
0001A884                            
0001A884                            loc_1A296:
0001A884 2268 0034                  		movea.l	$34(a0),a1
0001A888 3169 0008 0008             		move.w	8(a1),8(a0)
0001A88E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A894                            
0001A894                            loc_1A2A6:
0001A894 2268 0034                  		movea.l	$34(a0),a1
0001A898 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A89E 7003                       		moveq	#3,d0
0001A8A0 C028 0022                  		and.b	$22(a0),d0
0001A8A4 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A8AA 8128 0001                  		or.b	d0,1(a0)
0001A8AE 4EF9 0000 DB72             		jmp	DisplaySprite
0001A8B4                            ; ===========================================================================
0001A8B4                            
0001A8B4                            loc_1A2C6:				; XREF: Obj85_Index
0001A8B4 2268 0034                  		movea.l	$34(a0),a1
0001A8B8 1011                       		move.b	(a1),d0
0001A8BA B010                       		cmp.b	(a0),d0
0001A8BC 6600 FA82                  		bne.w	Obj85_Delete
0001A8C0 0CA9 0001 831A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A8C8 6700                       		beq.s	loc_1A2E4
0001A8CA 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A8D0 60C2                       		bra.s	loc_1A2A6
0001A8D2                            ; ===========================================================================
0001A8D2                            
0001A8D2                            loc_1A2E4:
0001A8D2 117C 0001 001C             		move.b	#1,$1C(a0)
0001A8D8 4A29 0021                  		tst.b	$21(a1)
0001A8DC 6F00                       		ble.s	loc_1A312
0001A8DE 117C 0006 001C             		move.b	#6,$1C(a0)
0001A8E4 217C 0001 831A 0004        		move.l	#Map_Eggman,4(a0)
0001A8EC 317C 0400 0002             		move.w	#$400,2(a0)
0001A8F2 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001A8F6 4EB9 0000 AC42             		jsr	AnimateSprite
0001A8FC 6000 FF86                  		bra.w	loc_1A296
0001A900                            ; ===========================================================================
0001A900                            
0001A900                            loc_1A312:
0001A900 4A28 0001                  		tst.b	1(a0)
0001A904 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A908 6100 D56E                  		bsr.w	BossDefeated
0001A90C 117C 0002 0018             		move.b	#2,$18(a0)
0001A912 117C 0000 001C             		move.b	#0,$1C(a0)
0001A918 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A920 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A926 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A92A 4EB9 0000 AC42             		jsr	AnimateSprite
0001A930 6000 FF52                  		bra.w	loc_1A296
0001A934                            ; ===========================================================================
0001A934                            
0001A934                            loc_1A346:				; XREF: Obj85_Index
0001A934 08E8 0000 0022             		bset	#0,$22(a0)
0001A93A 2268 0034                  		movea.l	$34(a0),a1
0001A93E 0CA9 0001 831A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A946 6700                       		beq.s	loc_1A35E
0001A948 6000 FF4A                  		bra.w	loc_1A2A6
0001A94C                            ; ===========================================================================
0001A94C                            
0001A94C                            loc_1A35E:
0001A94C 3169 0008 0008             		move.w	8(a1),8(a0)
0001A952 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A958 4A28 001E                  		tst.b	$1E(a0)
0001A95C 6600                       		bne.s	loc_1A376
0001A95E 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A964                            
0001A964                            loc_1A376:
0001A964 5328 001E                  		subq.b	#1,$1E(a0)
0001A968 6E00                       		bgt.s	loc_1A38A
0001A96A 5228 001A                  		addq.b	#1,$1A(a0)
0001A96E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A974 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A978                            
0001A978                            loc_1A38A:
0001A978 6000 FF0A                  		bra.w	loc_1A296
0001A97C                            ; ===========================================================================
0001A97C                            
0001A97C                            loc_1A38E:				; XREF: Obj85_Index
0001A97C 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A982 3038 D008                  		move.w	($FFFFD008).w,d0
0001A986 9068 0008                  		sub.w	8(a0),d0
0001A98A 6500                       		bcs.s	loc_1A3A6
0001A98C 4A28 0001                  		tst.b	1(a0)
0001A990 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A994                            
0001A994                            loc_1A3A6:
0001A994 4EF9 0000 DB72             		jmp	DisplaySprite
0001A99A                            ; ===========================================================================
0001A99A                            
0001A99A                            loc_1A3AC:				; XREF: Obj85_Index
0001A99A 117C 0000 001A             		move.b	#0,$1A(a0)
0001A9A0 08E8 0000 0022             		bset	#0,$22(a0)
0001A9A6 2268 0034                  		movea.l	$34(a0),a1
0001A9AA 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A9B0 6600                       		bne.s	loc_1A3D0
0001A9B2 0CA9 0001 831A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A9BA 6700 F984                  		beq.w	Obj85_Delete
0001A9BE                            
0001A9BE                            loc_1A3D0:
0001A9BE 6000 FED4                  		bra.w	loc_1A2A6
0001A9C2                            ; ===========================================================================
0001A9C2                            Ani_obj85:
0001A9C2                            	include "_anim\obj85.asm"
0001A9C2                            ; ---------------------------------------------------------------------------
0001A9C2                            ; Animation script - Eggman (FZ)
0001A9C2                            ; ---------------------------------------------------------------------------
0001A9C2 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A9C4 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A9C8                            		even
0001A9C8                            		even
0001A9C8                            
0001A9C8                            Map_Eggman2:
0001A9C8                            	include "_maps\Eggman2.asm"
0001A9C8                            ; ---------------------------------------------------------------------------
0001A9C8                            ; Sprite mappings - Eggman (FZ)
0001A9C8                            ; ---------------------------------------------------------------------------
0001A9C8 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A9CA 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A9CC 06                         byte_1A3DE:	dc.b 6
0001A9CD E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A9D2 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A9D7 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A9DC FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A9E1 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A9E6 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A9EB 06                         byte_1A3FD:	dc.b 6
0001A9EC E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A9F1 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A9F6 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A9FB FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AA00 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AA05 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AA0A                            		even
0001AA0A                            		even
0001AA0A                            
0001AA0A                            Map_FZBoss:
0001AA0A                            	include "_maps\FZ boss.asm"
0001AA0A                            ; ---------------------------------------------------------------------------
0001AA0A                            ; Sprite mappings - boss (FZ)
0001AA0A                            ; ---------------------------------------------------------------------------
0001AA0A 0000                       		dc.w byte_1A422-Map_FZBoss
0001AA0C 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AA0E 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AA10 02                         byte_1A422:	dc.b 2
0001AA11 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AA16 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AA1B 03                         byte_1A42D:	dc.b 3
0001AA1C 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AA21 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AA26 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AA2B 02                         byte_1A43D:	dc.b 2
0001AA2C 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AA31 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AA36                            		even
0001AA36                            		even
0001AA36                            
0001AA36                            ; ===========================================================================
0001AA36                            
0001AA36                            Obj84_Delete:
0001AA36 4EF9 0000 DBAE             		jmp	DeleteObject
0001AA3C                            ; ===========================================================================
0001AA3C                            ; ---------------------------------------------------------------------------
0001AA3C                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AA3C                            ; ---------------------------------------------------------------------------
0001AA3C                            
0001AA3C                            Obj84:					; XREF: Obj_Index
0001AA3C 7000                       		moveq	#0,d0
0001AA3E 1028 0024                  		move.b	$24(a0),d0
0001AA42 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AA46 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AA4A                            ; ===========================================================================
0001AA4A 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AA4C 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AA4E 0000                       		dc.w loc_1A57E-Obj84_Index
0001AA50                            
0001AA50 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AA54 2550 0620                  		dc.w $2550, $620
0001AA58 2490 04C0                  		dc.w $2490, $4C0
0001AA5C 2510 04C0                  		dc.w $2510, $4C0
0001AA60                            ; ===========================================================================
0001AA60                            
0001AA60                            Obj84_Main:				; XREF: Obj84_Index
0001AA60 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AA64 7000                       		moveq	#0,d0
0001AA66 1028 0028                  		move.b	$28(a0),d0
0001AA6A D040                       		add.w	d0,d0
0001AA6C D2C0                       		adda.w	d0,a1
0001AA6E 117C 0004 0001             		move.b	#4,1(a0)
0001AA74 08E8 0007 0001             		bset	#7,1(a0)
0001AA7A 08E8 0004 0001             		bset	#4,1(a0)
0001AA80 317C 0300 0002             		move.w	#$300,2(a0)
0001AA86 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AA8E 3159 0008                  		move.w	(a1)+,8(a0)
0001AA92 3151 000C                  		move.w	(a1),$C(a0)
0001AA96 3159 0038                  		move.w	(a1)+,$38(a0)
0001AA9A 117C 0020 0016             		move.b	#$20,$16(a0)
0001AAA0 117C 0060 0017             		move.b	#$60,$17(a0)
0001AAA6 117C 0020 0019             		move.b	#$20,$19(a0)
0001AAAC 117C 0060 0016             		move.b	#$60,$16(a0)
0001AAB2 117C 0003 0018             		move.b	#3,$18(a0)
0001AAB8 5428 0024                  		addq.b	#2,$24(a0)
0001AABC                            
0001AABC                            loc_1A4CE:				; XREF: Obj84_Index
0001AABC 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AAC2 6F00                       		ble.s	loc_1A4DC
0001AAC4 08E8 0001 0001             		bset	#1,1(a0)
0001AACA                            
0001AACA                            loc_1A4DC:
0001AACA 42A8 003C                  		clr.l	$3C(a0)
0001AACE 4A28 0029                  		tst.b	$29(a0)
0001AAD2 6700                       		beq.s	loc_1A4EA
0001AAD4 5428 0024                  		addq.b	#2,$24(a0)
0001AAD8                            
0001AAD8                            loc_1A4EA:
0001AAD8 2028 003C                  		move.l	$3C(a0),d0
0001AADC 2228 0038                  		move.l	$38(a0),d1
0001AAE0 D280                       		add.l	d0,d1
0001AAE2 4841                       		swap	d1
0001AAE4 3141 000C                  		move.w	d1,$C(a0)
0001AAE8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AAEE 6600                       		bne.s	loc_1A524
0001AAF0 4A68 0030                  		tst.w	$30(a0)
0001AAF4 6A00                       		bpl.s	loc_1A524
0001AAF6 70F6                       		moveq	#-$A,d0
0001AAF8 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AAFE 6F00                       		ble.s	loc_1A514
0001AB00 700E                       		moveq	#$E,d0
0001AB02                            
0001AB02                            loc_1A514:
0001AB02 D240                       		add.w	d0,d1
0001AB04 2268 0034                  		movea.l	$34(a0),a1
0001AB08 3341 000C                  		move.w	d1,$C(a1)
0001AB0C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AB12                            
0001AB12                            loc_1A524:
0001AB12 323C 002B                  		move.w	#$2B,d1
0001AB16 343C 0060                  		move.w	#$60,d2
0001AB1A 363C 0061                  		move.w	#$61,d3
0001AB1E 3828 0008                  		move.w	8(a0),d4
0001AB22 4EB9 0000 FF42             		jsr	SolidObject
0001AB28 7000                       		moveq	#0,d0
0001AB2A 3228 003C                  		move.w	$3C(a0),d1
0001AB2E 6A00                       		bpl.s	loc_1A550
0001AB30 4441                       		neg.w	d1
0001AB32 5141                       		subq.w	#8,d1
0001AB34 6500                       		bcs.s	loc_1A55C
0001AB36 5200                       		addq.b	#1,d0
0001AB38 E841                       		asr.w	#4,d1
0001AB3A D041                       		add.w	d1,d0
0001AB3C 6000                       		bra.s	loc_1A55C
0001AB3E                            ; ===========================================================================
0001AB3E                            
0001AB3E                            loc_1A550:
0001AB3E 0441 0027                  		subi.w	#$27,d1
0001AB42 6500                       		bcs.s	loc_1A55C
0001AB44 5200                       		addq.b	#1,d0
0001AB46 E841                       		asr.w	#4,d1
0001AB48 D041                       		add.w	d1,d0
0001AB4A                            
0001AB4A                            loc_1A55C:
0001AB4A 1140 001A                  		move.b	d0,$1A(a0)
0001AB4E 3038 D008                  		move.w	($FFFFD008).w,d0
0001AB52 9068 0008                  		sub.w	8(a0),d0
0001AB56 6B00                       		bmi.s	loc_1A578
0001AB58 0440 0140                  		subi.w	#$140,d0
0001AB5C 6B00                       		bmi.s	loc_1A578
0001AB5E 4A28 0001                  		tst.b	1(a0)
0001AB62 6A00 FED2                  		bpl.w	Obj84_Delete
0001AB66                            
0001AB66                            loc_1A578:
0001AB66 4EF9 0000 DB72             		jmp	DisplaySprite
0001AB6C                            ; ===========================================================================
0001AB6C                            
0001AB6C                            loc_1A57E:				; XREF: Obj84_Index
0001AB6C 7000                       		moveq	#0,d0
0001AB6E 1028 0028                  		move.b	$28(a0),d0
0001AB72 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AB76 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AB7A 6000 FF5C                  		bra.w	loc_1A4EA
0001AB7E                            ; ===========================================================================
0001AB7E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AB80 0000                       		dc.w loc_1A598-off_1A590
0001AB82 0000                       		dc.w loc_1A604-off_1A590
0001AB84 0000                       		dc.w loc_1A604-off_1A590
0001AB86                            ; ===========================================================================
0001AB86                            
0001AB86                            loc_1A598:				; XREF: off_1A590
0001AB86 4A28 0029                  		tst.b	$29(a0)
0001AB8A 6600                       		bne.s	loc_1A5D4
0001AB8C 2268 0034                  		movea.l	$34(a0),a1
0001AB90 4A29 0021                  		tst.b	$21(a1)
0001AB94 6600                       		bne.s	loc_1A5B4
0001AB96 6100 D2E0                  		bsr.w	BossDefeated
0001AB9A 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001ABA2                            
0001ABA2                            loc_1A5B4:
0001ABA2 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001ABAA 6400                       		bcc.s	locret_1A602
0001ABAC 42A8 003C                  		clr.l	$3C(a0)
0001ABB0 2268 0034                  		movea.l	$34(a0),a1
0001ABB4 5369 0032                  		subq.w	#1,$32(a1)
0001ABB8 4269 0030                  		clr.w	$30(a1)
0001ABBC 5528 0024                  		subq.b	#2,$24(a0)
0001ABC0 4E75                       		rts	
0001ABC2                            ; ===========================================================================
0001ABC2                            
0001ABC2                            loc_1A5D4:
0001ABC2 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001ABC8 6C00                       		bge.s	loc_1A5E4
0001ABCA 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001ABD2                            
0001ABD2                            loc_1A5E4:
0001ABD2 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001ABDA 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001ABE0 6E00                       		bgt.s	locret_1A602
0001ABE2 4268 003E                  		clr.w	$3E(a0)
0001ABE6 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001ABEC 4228 0029                  		clr.b	$29(a0)
0001ABF0                            
0001ABF0                            locret_1A602:
0001ABF0 4E75                       		rts	
0001ABF2                            ; ===========================================================================
0001ABF2                            
0001ABF2                            loc_1A604:				; XREF: off_1A590
0001ABF2 08E8 0001 0001             		bset	#1,1(a0)
0001ABF8 4A28 0029                  		tst.b	$29(a0)
0001ABFC 6600                       		bne.s	loc_1A646
0001ABFE 2268 0034                  		movea.l	$34(a0),a1
0001AC02 4A29 0021                  		tst.b	$21(a1)
0001AC06 6600                       		bne.s	loc_1A626
0001AC08 6100 D26E                  		bsr.w	BossDefeated
0001AC0C 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AC14                            
0001AC14                            loc_1A626:
0001AC14 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AC1C 6400                       		bcc.s	locret_1A674
0001AC1E 42A8 003C                  		clr.l	$3C(a0)
0001AC22 2268 0034                  		movea.l	$34(a0),a1
0001AC26 5369 0032                  		subq.w	#1,$32(a1)
0001AC2A 4269 0030                  		clr.w	$30(a1)
0001AC2E 5528 0024                  		subq.b	#2,$24(a0)
0001AC32 4E75                       		rts	
0001AC34                            ; ===========================================================================
0001AC34                            
0001AC34                            loc_1A646:
0001AC34 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AC3A 6D00                       		blt.s	loc_1A656
0001AC3C 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AC44                            
0001AC44                            loc_1A656:
0001AC44 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AC4C 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AC52 6D00                       		blt.s	locret_1A674
0001AC54 4268 003E                  		clr.w	$3E(a0)
0001AC58 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AC5E 4228 0029                  		clr.b	$29(a0)
0001AC62                            
0001AC62                            locret_1A674:
0001AC62 4E75                       		rts	
0001AC64                            ; ===========================================================================
0001AC64                            ; ---------------------------------------------------------------------------
0001AC64                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC64                            ; ---------------------------------------------------------------------------
0001AC64                            Map_obj84:
0001AC64                            	include "_maps\obj84.asm"
0001AC64                            ; ---------------------------------------------------------------------------
0001AC64                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC64                            ; ---------------------------------------------------------------------------
0001AC64 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AC68 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AC6C 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AC70 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC74 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC78 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AC7C 06                         byte_1A68E:	dc.b 6
0001AC7D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC82 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC87 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC8C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC91 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AC96 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AC9B 08                         byte_1A6AD:	dc.b 8
0001AC9C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACA1 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACA6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACAB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACB0 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACB5 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACBA D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACBF D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACC4 0A                         byte_1A6D6:	dc.b $A
0001ACC5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACCA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACCF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACD4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACD9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACDE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACE3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACE8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACED F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ACF2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ACF7 0C                         byte_1A709:	dc.b $C
0001ACF8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACFD A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD02 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD07 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD0C B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD11 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD16 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD1B D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD20 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD25 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD2A 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD2F 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD34 0D                         byte_1A746:	dc.b $D
0001AD35 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD3A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD3F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD44 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD49 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD4E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD53 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD58 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD5D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD62 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD67 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD6C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD71 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AD76 0E                         byte_1A788:	dc.b $E
0001AD77 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD7C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD81 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD86 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD8B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD90 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD95 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD9A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD9F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ADA4 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ADA9 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001ADAE 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ADB3 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001ADB8 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001ADBD 02                         byte_1A7CF:	dc.b 2
0001ADBE F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001ADC3 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001ADC8                            		even
0001ADC8                            		even
0001ADC8                            
0001ADC8                            ; ===========================================================================
0001ADC8                            ; ---------------------------------------------------------------------------
0001ADC8                            ; Object 86 - energy balls (FZ)
0001ADC8                            ; ---------------------------------------------------------------------------
0001ADC8                            
0001ADC8                            Obj86:					; XREF: Obj_Index
0001ADC8 7000                       		moveq	#0,d0
0001ADCA 1028 0024                  		move.b	$24(a0),d0
0001ADCE 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001ADD2 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001ADD6                            ; ===========================================================================
0001ADD6 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001ADD8 0000                       		dc.w Obj86_Generator-Obj86_Index
0001ADDA 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001ADDC 0000                       		dc.w loc_1A962-Obj86_Index
0001ADDE 0000                       		dc.w loc_1A982-Obj86_Index
0001ADE0                            ; ===========================================================================
0001ADE0                            
0001ADE0                            Obj86_Main:				; XREF: Obj86_Index
0001ADE0 317C 2588 0008             		move.w	#$2588,8(a0)
0001ADE6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001ADEC 317C 0300 0002             		move.w	#$300,2(a0)
0001ADF2 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001ADFA 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE00 117C 0003 0018             		move.b	#3,$18(a0)
0001AE06 117C 0008 0017             		move.b	#8,$17(a0)
0001AE0C 117C 0008 0016             		move.b	#8,$16(a0)
0001AE12 117C 0004 0001             		move.b	#4,1(a0)
0001AE18 08E8 0007 0001             		bset	#7,1(a0)
0001AE1E 5428 0024                  		addq.b	#2,$24(a0)
0001AE22                            
0001AE22                            Obj86_Generator:			; XREF: Obj86_Index
0001AE22 2268 0034                  		movea.l	$34(a0),a1
0001AE26 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001AE2C 6600                       		bne.s	loc_1A850
0001AE2E 10BC 003F                  		move.b	#$3F,(a0)
0001AE32 117C 0000 0024             		move.b	#0,$24(a0)
0001AE38 4EF9 0000 DB72             		jmp	DisplaySprite
0001AE3E                            ; ===========================================================================
0001AE3E                            
0001AE3E                            loc_1A850:
0001AE3E 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE44 4A28 0029                  		tst.b	$29(a0)
0001AE48 6700                       		beq.s	loc_1A86C
0001AE4A 5428 0024                  		addq.b	#2,$24(a0)
0001AE4E 117C 0001 001C             		move.b	#1,$1C(a0)
0001AE54 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AE5A                            
0001AE5A                            loc_1A86C:
0001AE5A 323C 0013                  		move.w	#$13,d1
0001AE5E 343C 0008                  		move.w	#8,d2
0001AE62 363C 0011                  		move.w	#$11,d3
0001AE66 3828 0008                  		move.w	8(a0),d4
0001AE6A 4EB9 0000 FF42             		jsr	SolidObject
0001AE70 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE74 9068 0008                  		sub.w	8(a0),d0
0001AE78 6B00                       		bmi.s	loc_1A89A
0001AE7A 0440 0140                  		subi.w	#$140,d0
0001AE7E 6B00                       		bmi.s	loc_1A89A
0001AE80 4A28 0001                  		tst.b	1(a0)
0001AE84 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AE88                            
0001AE88                            loc_1A89A:
0001AE88 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AE8C 4EB9 0000 AC42             		jsr	AnimateSprite
0001AE92 4EF9 0000 DB72             		jmp	DisplaySprite
0001AE98                            ; ===========================================================================
0001AE98                            
0001AE98                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AE98 4A28 0029                  		tst.b	$29(a0)
0001AE9C 6700 0000                  		beq.w	loc_1A954
0001AEA0 4228 0029                  		clr.b	$29(a0)
0001AEA4 D068 0030                  		add.w	$30(a0),d0
0001AEA8 0240 001E                  		andi.w	#$1E,d0
0001AEAC D4C0                       		adda.w	d0,a2
0001AEAE 5868 0030                  		addq.w	#4,$30(a0)
0001AEB2 4268 0032                  		clr.w	$32(a0)
0001AEB6 7403                       		moveq	#3,d2
0001AEB8                            
0001AEB8                            Obj86_Loop:
0001AEB8 4EB9 0000 E00E             		jsr	SingleObjLoad2
0001AEBE 6600 0000                  		bne.w	loc_1A954
0001AEC2 12BC 0086                  		move.b	#$86,(a1)
0001AEC6 3368 0008 0008             		move.w	8(a0),8(a1)
0001AECC 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AED2 137C 0008 0024             		move.b	#8,$24(a1)
0001AED8 337C 2300 0002             		move.w	#$2300,2(a1)
0001AEDE 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AEE6 137C 000C 0016             		move.b	#$C,$16(a1)
0001AEEC 137C 000C 0017             		move.b	#$C,$17(a1)
0001AEF2 137C 0000 0020             		move.b	#0,$20(a1)
0001AEF8 137C 0003 0018             		move.b	#3,$18(a1)
0001AEFE 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AF04 137C 0004 0001             		move.b	#4,1(a1)
0001AF0A 08E9 0007 0001             		bset	#7,1(a1)
0001AF10 2348 0034                  		move.l	a0,$34(a1)
0001AF14 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001AF1A 3228 0032                  		move.w	$32(a0),d1
0001AF1E C3FC FFB1                  		muls.w	#-$4F,d1
0001AF22 0641 2578                  		addi.w	#$2578,d1
0001AF26 0240 001F                  		andi.w	#$1F,d0
0001AF2A 0440 0010                  		subi.w	#$10,d0
0001AF2E D041                       		add.w	d1,d0
0001AF30 3340 0030                  		move.w	d0,$30(a1)
0001AF34 5268 0032                  		addq.w	#1,$32(a0)
0001AF38 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AF3E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AF42                            
0001AF42                            loc_1A954:
0001AF42 4A68 0032                  		tst.w	$32(a0)
0001AF46 6600                       		bne.s	loc_1A95E
0001AF48 5428 0024                  		addq.b	#2,$24(a0)
0001AF4C                            
0001AF4C                            loc_1A95E:
0001AF4C 6000 FF0C                  		bra.w	loc_1A86C
0001AF50                            ; ===========================================================================
0001AF50                            
0001AF50                            loc_1A962:				; XREF: Obj86_Index
0001AF50 117C 0002 001C             		move.b	#2,$1C(a0)
0001AF56 4A68 0038                  		tst.w	$38(a0)
0001AF5A 6600                       		bne.s	loc_1A97E
0001AF5C 117C 0002 0024             		move.b	#2,$24(a0)
0001AF62 2268 0034                  		movea.l	$34(a0),a1
0001AF66 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AF6C                            
0001AF6C                            loc_1A97E:
0001AF6C 6000 FEEC                  		bra.w	loc_1A86C
0001AF70                            ; ===========================================================================
0001AF70                            
0001AF70                            loc_1A982:				; XREF: Obj86_Index
0001AF70 7000                       		moveq	#0,d0
0001AF72 1028 0025                  		move.b	$25(a0),d0
0001AF76 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AF7A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AF7E 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AF82 4EB9 0000 AC42             		jsr	AnimateSprite
0001AF88 4EF9 0000 DB72             		jmp	DisplaySprite
0001AF8E                            ; ===========================================================================
0001AF8E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AF90 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AF92 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AF94                            ; ===========================================================================
0001AF94                            
0001AF94                            loc_1A9A6:				; XREF: Obj86_Index2
0001AF94 3028 0030                  		move.w	$30(a0),d0
0001AF98 9068 0008                  		sub.w	8(a0),d0
0001AF9C E940                       		asl.w	#4,d0
0001AF9E 3140 0010                  		move.w	d0,$10(a0)
0001AFA2 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AFA8 5428 0025                  		addq.b	#2,$25(a0)
0001AFAC 4E75                       		rts	
0001AFAE                            ; ===========================================================================
0001AFAE                            
0001AFAE                            loc_1A9C0:				; XREF: Obj86_Index2
0001AFAE 4A68 0010                  		tst.w	$10(a0)
0001AFB2 6700                       		beq.s	loc_1A9E6
0001AFB4 4EB9 0000 DB4C             		jsr	SpeedToPos
0001AFBA 3028 0008                  		move.w	8(a0),d0
0001AFBE 9068 0030                  		sub.w	$30(a0),d0
0001AFC2 6400                       		bcc.s	loc_1A9E6
0001AFC4 4268 0010                  		clr.w	$10(a0)
0001AFC8 D168 0008                  		add.w	d0,8(a0)
0001AFCC 2268 0034                  		movea.l	$34(a0),a1
0001AFD0 5369 0032                  		subq.w	#1,$32(a1)
0001AFD4                            
0001AFD4                            loc_1A9E6:
0001AFD4 117C 0000 001C             		move.b	#0,$1C(a0)
0001AFDA 5368 0028                  		subq.w	#1,$28(a0)
0001AFDE 6600                       		bne.s	locret_1AA1C
0001AFE0 5428 0025                  		addq.b	#2,$25(a0)
0001AFE4 117C 0001 001C             		move.b	#1,$1C(a0)
0001AFEA 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AFF0 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AFF6 7000                       		moveq	#0,d0
0001AFF8 3038 D008                  		move.w	($FFFFD008).w,d0
0001AFFC 9068 0008                  		sub.w	8(a0),d0
0001B000 3140 0010                  		move.w	d0,$10(a0)
0001B004 317C 0140 0012             		move.w	#$140,$12(a0)
0001B00A                            
0001B00A                            locret_1AA1C:
0001B00A 4E75                       		rts	
0001B00C                            ; ===========================================================================
0001B00C                            
0001B00C                            loc_1AA1E:				; XREF: Obj86_Index2
0001B00C 4EB9 0000 DB4C             		jsr	SpeedToPos
0001B012 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B018 6400                       		bcc.s	loc_1AA34
0001B01A 5368 0028                  		subq.w	#1,$28(a0)
0001B01E 6700                       		beq.s	loc_1AA34
0001B020 4E75                       		rts	
0001B022                            ; ===========================================================================
0001B022                            
0001B022                            loc_1AA34:
0001B022 2268 0034                  		movea.l	$34(a0),a1
0001B026 5369 0038                  		subq.w	#1,$38(a1)
0001B02A 6000 FA0A                  		bra.w	Obj84_Delete
0001B02E                            ; ===========================================================================
0001B02E                            Ani_obj86:
0001B02E                            	include "_anim\obj86.asm"
0001B02E                            ; ---------------------------------------------------------------------------
0001B02E                            ; Animation script - energy ball launcher (FZ)
0001B02E                            ; ---------------------------------------------------------------------------
0001B02E 0000                       		dc.w byte_1AA46-Ani_obj86
0001B030 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B032 0000                       		dc.w byte_1AA50-Ani_obj86
0001B034 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B038 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B03E 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B044                            		even
0001B044                            		even
0001B044                            
0001B044                            ; ---------------------------------------------------------------------------
0001B044                            ; Sprite mappings - energy ball	launcher (FZ)
0001B044                            ; ---------------------------------------------------------------------------
0001B044                            Map_obj86:
0001B044                            	include "_maps\obj86.asm"
0001B044                            ; ---------------------------------------------------------------------------
0001B044                            ; Sprite mappings - energy ball	launcher (FZ)
0001B044                            ; ---------------------------------------------------------------------------
0001B044 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B048 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B04C 01                         byte_1AA5E:	dc.b 1
0001B04D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B052 01                         byte_1AA64:	dc.b 1
0001B053 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B058 01                         byte_1AA6A:	dc.b 1
0001B059 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B05E 01                         byte_1AA70:	dc.b 1
0001B05F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B064                            		even
0001B064                            		even
0001B064                            
0001B064                            Ani_obj86a:
0001B064                            	include "_anim\obj86a.asm"
0001B064                            ; ---------------------------------------------------------------------------
0001B064                            ; Animation script - energy balls (FZ)
0001B064                            ; ---------------------------------------------------------------------------
0001B064 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B066 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B068 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B077 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B086 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B08A 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B094                            		even
0001B094                            		even
0001B094                            
0001B094                            ; ---------------------------------------------------------------------------
0001B094                            ; Sprite mappings - energy balls (FZ)
0001B094                            ; ---------------------------------------------------------------------------
0001B094                            Map_obj86a:
0001B094                            	include "_maps\obj86a.asm"
0001B094                            ; ---------------------------------------------------------------------------
0001B094                            ; Sprite mappings - energy balls (FZ)
0001B094                            ; ---------------------------------------------------------------------------
0001B094 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B098 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B09C 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B0A0 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B0A4 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B0A8 0000                       		dc.w byte_1AB20-Map_obj86a
0001B0AA 02                         byte_1AABC:	dc.b 2
0001B0AB F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B0B0 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B0B5 02                         byte_1AAC7:	dc.b 2
0001B0B6 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B0BB F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B0C0 02                         byte_1AAD2:	dc.b 2
0001B0C1 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B0C6 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B0CB 02                         byte_1AADD:	dc.b 2
0001B0CC F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B0D1 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B0D6 02                         byte_1AAE8:	dc.b 2
0001B0D7 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B0DC 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B0E1 02                         byte_1AAF3:	dc.b 2
0001B0E2 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B0E7 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B0EC 01                         byte_1AAFE:	dc.b 1
0001B0ED F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B0F2 01                         byte_1AB04:	dc.b 1
0001B0F3 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B0F8 02                         byte_1AB0A:	dc.b 2
0001B0F9 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B0FE 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B103 02                         byte_1AB15:	dc.b 2
0001B104 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B109 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B10E 00                         byte_1AB20:	dc.b 0
0001B110 00                         		even
0001B110 00                         		even
0001B110                            
0001B110                            ; ===========================================================================
0001B110                            ; ---------------------------------------------------------------------------
0001B110                            ; Object 3E - prison capsule
0001B110                            ; ---------------------------------------------------------------------------
0001B110                            
0001B110                            Obj3E:					; XREF: Obj_Index
0001B110 7000                       		moveq	#0,d0
0001B112 1028 0024                  		move.b	$24(a0),d0
0001B116 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B11A 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B11E 3028 0008                  		move.w	8(a0),d0
0001B122 0240 FF80                  		andi.w	#$FF80,d0
0001B126 3238 F700                  		move.w	($FFFFF700).w,d1
0001B12A 0441 0080                  		subi.w	#$80,d1
0001B12E 0241 FF80                  		andi.w	#$FF80,d1
0001B132 9041                       		sub.w	d1,d0
0001B134 0C40 0280                  		cmpi.w	#$280,d0
0001B138 6200                       		bhi.s	Obj3E_Delete
0001B13A 4EF9 0000 DB72             		jmp	DisplaySprite
0001B140                            ; ===========================================================================
0001B140                            
0001B140                            Obj3E_Delete:
0001B140 4EF9 0000 DBAE             		jmp	DeleteObject
0001B146                            ; ===========================================================================
0001B146 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B148 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B14A 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B14C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B14E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B150 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B152 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B154 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B156                            
0001B156 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B15A 040C 0501                  		dc.b 4,	$C, 5, 1
0001B15E 0610 0403                  		dc.b 6,	$10, 4,	3
0001B162 0810 0305                  		dc.b 8,	$10, 3,	5
0001B166                            ; ===========================================================================
0001B166                            
0001B166                            Obj3E_Main:				; XREF: Obj3E_Index
0001B166 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B16E 317C 049D 0002             		move.w	#$49D,2(a0)
0001B174 117C 0004 0001             		move.b	#4,1(a0)
0001B17A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B180 7000                       		moveq	#0,d0
0001B182 1028 0028                  		move.b	$28(a0),d0
0001B186 E548                       		lsl.w	#2,d0
0001B188 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B18C 1159 0024                  		move.b	(a1)+,$24(a0)
0001B190 1159 0019                  		move.b	(a1)+,$19(a0)
0001B194 1159 0018                  		move.b	(a1)+,$18(a0)
0001B198 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B19C 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B1A0 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B1A2 117C 0006 0020             		move.b	#6,$20(a0)
0001B1A8 117C 0008 0021             		move.b	#8,$21(a0)
0001B1AE                            
0001B1AE                            Obj3E_Not02:
0001B1AE 4E75                       		rts	
0001B1B0                            ; ===========================================================================
0001B1B0                            
0001B1B0                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B1B0 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B1B6 6700                       		beq.s	Obj3E_ChkOpened
0001B1B8 323C 002B                  		move.w	#$2B,d1
0001B1BC 343C 0018                  		move.w	#$18,d2
0001B1C0 363C 0018                  		move.w	#$18,d3
0001B1C4 3828 0008                  		move.w	8(a0),d4
0001B1C8 4EF9 0000 FF42             		jmp	SolidObject
0001B1CE                            ; ===========================================================================
0001B1CE                            
0001B1CE                            Obj3E_ChkOpened:
0001B1CE 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B1D2 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B1D4 4228 0025                  		clr.b	$25(a0)
0001B1D8 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B1DE 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B1E4                            
0001B1E4                            Obj3E_DoOpen:
0001B1E4 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B1EA 4E75                       		rts	
0001B1EC                            ; ===========================================================================
0001B1EC                            
0001B1EC                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B1EC 323C 0017                  		move.w	#$17,d1
0001B1F0 343C 0008                  		move.w	#8,d2
0001B1F4 363C 0008                  		move.w	#8,d3
0001B1F8 3828 0008                  		move.w	8(a0),d4
0001B1FC 4EB9 0000 FF42             		jsr	SolidObject
0001B202 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B208 4EB9 0000 AC42             		jsr	AnimateSprite
0001B20E 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B214 4A28 0025                  		tst.b	$25(a0)
0001B218 6700                       		beq.s	locret_1AC60
0001B21A 5068 000C                  		addq.w	#8,$C(a0)
0001B21E 117C 000A 0024             		move.b	#$A,$24(a0)
0001B224 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B22A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B22E 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B232 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B238 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B23E 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B240 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B246 6000                       		bra.s	Obj3E_ContinueCode
0001B248                            
0001B248                            Obj3E_MoveLeft:
0001B248 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B24E                            
0001B24E                            Obj3E_ContinueCode:
0001B24E 4228 0025                  		clr.b	$25(a0)
0001B252 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B258 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B25E                            
0001B25E                            locret_1AC60:
0001B25E 4E75                       		rts	
0001B260                            ; ===========================================================================
0001B260                            
0001B260                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B260 7007                       		moveq	#7,d0
0001B262 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B266 6600                       		bne.s	loc_1ACA0
0001B268 4EB9 0000 DFF8             		jsr	SingleObjLoad
0001B26E 6600                       		bne.s	loc_1ACA0
0001B270 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B274 3368 0008 0008             		move.w	8(a0),8(a1)
0001B27A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B280 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B286 7200                       		moveq	#0,d1
0001B288 1200                       		move.b	d0,d1
0001B28A E409                       		lsr.b	#2,d1
0001B28C 0441 0020                  		subi.w	#$20,d1
0001B290 D369 0008                  		add.w	d1,8(a1)
0001B294 E048                       		lsr.w	#8,d0
0001B296 E608                       		lsr.b	#3,d0
0001B298 D169 000C                  		add.w	d0,$C(a1)
0001B29C                            
0001B29C                            loc_1ACA0:
0001B29C 5368 001E                  		subq.w	#1,$1E(a0)
0001B2A0 6700                       		beq.s	Obj3E_MakeAnimal
0001B2A2 4E75                       		rts	
0001B2A4                            ; ===========================================================================
0001B2A4                            
0001B2A4                            Obj3E_MakeAnimal:
0001B2A4 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B2AA 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B2B0 117C 0006 001A             		move.b	#6,$1A(a0)
0001B2B6 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B2BC 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B2C2 7C07                       		moveq	#7,d6
0001B2C4 3A3C 009A                  		move.w	#$9A,d5
0001B2C8 78E4                       		moveq	#-$1C,d4
0001B2CA                            
0001B2CA                            Obj3E_Loop:
0001B2CA 4EB9 0000 DFF8             		jsr	SingleObjLoad
0001B2D0 6600                       		bne.s	locret_1ACF8
0001B2D2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B2D6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B2E2 D969 0008                  		add.w	d4,8(a1)
0001B2E6 5E44                       		addq.w	#7,d4
0001B2E8 3345 0036                  		move.w	d5,$36(a1)
0001B2EC 5145                       		subq.w	#8,d5
0001B2EE 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B2F2                            
0001B2F2                            locret_1ACF8:
0001B2F2 4E75                       		rts	
0001B2F4                            ; ===========================================================================
0001B2F4                            
0001B2F4                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B2F4 7007                       		moveq	#7,d0
0001B2F6 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B2FA 6600                       		bne.s	loc_1AD38
0001B2FC 4EB9 0000 DFF8             		jsr	SingleObjLoad
0001B302 6600                       		bne.s	loc_1AD38
0001B304 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B308 3368 0008 0008             		move.w	8(a0),8(a1)
0001B30E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B314 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B31A 0240 001F                  		andi.w	#$1F,d0
0001B31E 5D40                       		subq.w	#6,d0
0001B320 4A41                       		tst.w	d1
0001B322 6A00                       		bpl.s	loc_1AD2E
0001B324 4440                       		neg.w	d0
0001B326                            
0001B326                            loc_1AD2E:
0001B326 D169 0008                  		add.w	d0,8(a1)
0001B32A 337C 000C 0036             		move.w	#$C,$36(a1)
0001B330                            
0001B330                            loc_1AD38:
0001B330 5368 001E                  		subq.w	#1,$1E(a0)
0001B334 6600                       		bne.s	locret_1AD48
0001B336 5428 0024                  		addq.b	#2,$24(a0)
0001B33A 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B340                            
0001B340                            locret_1AD48:
0001B340 4E75                       		rts	
0001B342                            ; ===========================================================================
0001B342                            
0001B342                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B342 703E                       		moveq	#$3E,d0
0001B344 7228                       		moveq	#$28,d1
0001B346 7440                       		moveq	#$40,d2
0001B348 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B34C                            
0001B34C                            Obj3E_FindObj28:
0001B34C B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B34E 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B350 D2C2                       		adda.w	d2,a1		; next object RAM
0001B352 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B356                            
0001B356 4EB9 0000 F1FE             		jsr	GotThroughAct
0001B35C 4EF9 0000 DBAE             		jmp	DeleteObject
0001B362                            ; ===========================================================================
0001B362                            
0001B362                            Obj3E_Obj28Found:
0001B362 4E75                       		rts	
0001B364                            ; ===========================================================================
0001B364                            Ani_obj3E:
0001B364                            	include "_anim\obj3E.asm"
0001B364                            ; ---------------------------------------------------------------------------
0001B364                            ; Animation script - prison capsule
0001B364                            ; ---------------------------------------------------------------------------
0001B364 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B366 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B368 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B36C                            		even
0001B36C                            		even
0001B36C                            
0001B36C                            ; ---------------------------------------------------------------------------
0001B36C                            ; Sprite mappings - prison capsule
0001B36C                            ; ---------------------------------------------------------------------------
0001B36C                            Map_obj3E:
0001B36C                            	include "_maps\obj3E.asm"
0001B36C                            ; ---------------------------------------------------------------------------
0001B36C                            ; Sprite mappings - prison capsule
0001B36C                            ; ---------------------------------------------------------------------------
0001B36C 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B370 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B374 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B378 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B37A 07                         byte_1AD82:	dc.b 7
0001B37B E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B380 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B385 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B38A F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B38F F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B394 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B399 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B39E 01                         byte_1ADA6:	dc.b 1
0001B39F F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B3A4 06                         byte_1ADAC:	dc.b 6
0001B3A5 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B3AA 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B3AF 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B3B4 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B3B9 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B3BE 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B3C3 01                         byte_1ADCB:	dc.b 1
0001B3C4 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B3C9 02                         byte_1ADD1:	dc.b 2
0001B3CA E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B3CF 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B3D4 01                         byte_1ADDC:	dc.b 1
0001B3D5 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B3DA 00                         byte_1ADE2:	dc.b 0
0001B3DC 00                         		even
0001B3DC 00                         		even
0001B3DC                            
0001B3DC                            ; ---------------------------------------------------------------------------
0001B3DC                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B3DC                            ; ---------------------------------------------------------------------------
0001B3DC                            
0001B3DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3DC                            
0001B3DC                            
0001B3DC                            TouchResponse:				; XREF: Obj01
0001B3DC 4E71                       		nop	
0001B3DE 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B3E2 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B3E6 5142                       		subq.w	#8,d2
0001B3E8 7A00                       		moveq	#0,d5
0001B3EA 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B3EE 5705                       		subq.b	#3,d5
0001B3F0 9645                       		sub.w	d5,d3
0001B3F2 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B3F8 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B3FA 0643 000C                  		addi.w	#$C,d3
0001B3FE 7A0A                       		moveq	#$A,d5
0001B400                            
0001B400                            Touch_NoDuck:
0001B400 383C 0010                  		move.w	#$10,d4
0001B404 DA45                       		add.w	d5,d5
0001B406 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B40A 3C3C 005F                  		move.w	#$5F,d6
0001B40E                            
0001B40E                            Touch_Loop:
0001B40E 4A29 0001                  		tst.b	1(a1)
0001B412 6A00                       		bpl.s	Touch_NextObj
0001B414 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B418 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B41A                            
0001B41A                            Touch_NextObj:
0001B41A 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B41E 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B422                            
0001B422 7000                       		moveq	#0,d0
0001B424 4E75                       		rts	
0001B426                            ; ===========================================================================
0001B426 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B428 0C14                       		dc.b   $C, $14
0001B42A 140C                       		dc.b  $14,  $C
0001B42C 0410                       		dc.b	4, $10
0001B42E 0C12                       		dc.b   $C, $12
0001B430 1010                       		dc.b  $10, $10
0001B432 0606                       		dc.b	6,   6
0001B434 180C                       		dc.b  $18,  $C
0001B436 0C10                       		dc.b   $C, $10
0001B438 100C                       		dc.b  $10,  $C
0001B43A 0808                       		dc.b	8,   8
0001B43C 1410                       		dc.b  $14, $10
0001B43E 1408                       		dc.b  $14,   8
0001B440 0E0E                       		dc.b   $E,  $E
0001B442 1818                       		dc.b  $18, $18
0001B444 2810                       		dc.b  $28, $10
0001B446 1018                       		dc.b  $10, $18
0001B448 0810                       		dc.b	8, $10
0001B44A 2070                       		dc.b  $20, $70
0001B44C 4020                       		dc.b  $40, $20
0001B44E 8020                       		dc.b  $80, $20
0001B450 2020                       		dc.b  $20, $20
0001B452 0808                       		dc.b	8,   8
0001B454 0404                       		dc.b	4,   4
0001B456 2008                       		dc.b  $20,   8
0001B458 0C0C                       		dc.b   $C,  $C
0001B45A 0804                       		dc.b	8,   4
0001B45C 1804                       		dc.b  $18,   4
0001B45E 2804                       		dc.b  $28,   4
0001B460 0408                       		dc.b	4,   8
0001B462 0418                       		dc.b	4, $18
0001B464 0428                       		dc.b	4, $28
0001B466 0420                       		dc.b	4, $20
0001B468 1818                       		dc.b  $18, $18
0001B46A 0C18                       		dc.b   $C, $18
0001B46C 4808                       		dc.b  $48,   8
0001B46E                            ; ===========================================================================
0001B46E                            
0001B46E                            Touch_Height:				; XREF: TouchResponse
0001B46E 0240 003F                  		andi.w	#$3F,d0
0001B472 D040                       		add.w	d0,d0
0001B474 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B478 7200                       		moveq	#0,d1
0001B47A 121A                       		move.b	(a2)+,d1
0001B47C 3029 0008                  		move.w	8(a1),d0
0001B480 9041                       		sub.w	d1,d0
0001B482 9042                       		sub.w	d2,d0
0001B484 6400                       		bcc.s	loc_1AE98
0001B486 D241                       		add.w	d1,d1
0001B488 D041                       		add.w	d1,d0
0001B48A 6500                       		bcs.s	Touch_Width
0001B48C 6000 FF8C                  		bra.w	Touch_NextObj
0001B490                            ; ===========================================================================
0001B490                            
0001B490                            loc_1AE98:
0001B490 B044                       		cmp.w	d4,d0
0001B492 6200 FF86                  		bhi.w	Touch_NextObj
0001B496                            
0001B496                            Touch_Width:
0001B496 7200                       		moveq	#0,d1
0001B498 121A                       		move.b	(a2)+,d1
0001B49A 3029 000C                  		move.w	$C(a1),d0
0001B49E 9041                       		sub.w	d1,d0
0001B4A0 9043                       		sub.w	d3,d0
0001B4A2 6400                       		bcc.s	loc_1AEB6
0001B4A4 D241                       		add.w	d1,d1
0001B4A6 D240                       		add.w	d0,d1
0001B4A8 6500                       		bcs.s	Touch_ChkValue
0001B4AA 6000 FF6E                  		bra.w	Touch_NextObj
0001B4AE                            ; ===========================================================================
0001B4AE                            
0001B4AE                            loc_1AEB6:
0001B4AE B045                       		cmp.w	d5,d0
0001B4B0 6200 FF68                  		bhi.w	Touch_NextObj
0001B4B4                            
0001B4B4                            Touch_ChkValue:
0001B4B4 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B4B8 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B4BC 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B4C0 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B4C4 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B4C8 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B4CA 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B4CE                            
0001B4CE                            ; touch	response is $40-$7F
0001B4CE                            
0001B4CE 1029 0020                  		move.b	$20(a1),d0
0001B4D2 0200 003F                  		andi.b	#$3F,d0
0001B4D6 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B4DA 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B4DC 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B4E2 6400 0000                  		bcc.w	locret_1AEF2
0001B4E6 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B4EA                            
0001B4EA                            locret_1AEF2:
0001B4EA 4E75                       		rts	
0001B4EC                            ; ===========================================================================
0001B4EC                            
0001B4EC                            Touch_Monitor:
0001B4EC 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B4F0 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B4F2 3028 000C                  		move.w	$C(a0),d0
0001B4F6 0440 0010                  		subi.w	#$10,d0
0001B4FA B069 000C                  		cmp.w	$C(a1),d0
0001B4FE 6500                       		bcs.s	locret_1AF2E
0001B500 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B504 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B50A 4A29 0025                  		tst.b	$25(a1)
0001B50E 6600                       		bne.s	locret_1AF2E
0001B510 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B514 4E75                       		rts	
0001B516                            ; ===========================================================================
0001B516                            
0001B516                            loc_1AF1E:
0001B516 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B51C 6600                       		bne.s	locret_1AF2E
0001B51E 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B522 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B526                            
0001B526                            locret_1AF2E:
0001B526 4E75                       		rts	
0001B528                            ; ===========================================================================
0001B528                            
0001B528                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B528 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B52C 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B52E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B534 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B538                            
0001B538                            loc_1AF40:
0001B538 4A29 0021                  		tst.b	$21(a1)
0001B53C 6700                       		beq.s	Touch_KillEnemy
0001B53E 4468 0010                  		neg.w	$10(a0)
0001B542 4468 0012                  		neg.w	$12(a0)
0001B546 E0E8 0010                  		asr	$10(a0)
0001B54A E0E8 0012                  		asr	$12(a0)
0001B54E 137C 0000 0020             		move.b	#0,$20(a1)
0001B554 5329 0021                  		subq.b	#1,$21(a1)
0001B558 6600                       		bne.s	locret_1AF68
0001B55A 08E9 0007 0022             		bset	#7,$22(a1)
0001B560                            
0001B560                            locret_1AF68:
0001B560 4E75                       		rts	
0001B562                            ; ===========================================================================
0001B562                            
0001B562                            Touch_KillEnemy:
0001B562 08E9 0007 0022             		bset	#7,$22(a1)
0001B568 7000                       		moveq	#0,d0
0001B56A 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B56E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B572 0C40 0006                  		cmpi.w	#6,d0
0001B576 6500                       		bcs.s	loc_1AF82
0001B578 7006                       		moveq	#6,d0
0001B57A                            
0001B57A                            loc_1AF82:
0001B57A 3340 003E                  		move.w	d0,$3E(a1)
0001B57E 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B582 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B588 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B58A 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B58E 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B594                            
0001B594                            loc_1AF9C:
0001B594 6100 0000                  		bsr.w	AddPoints
0001B598 7400                       		moveq	#0,d2	; GMZ
0001B59A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B59C 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B59E                            
0001B59E                            TouchKE_Explode:
0001B59E 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B5A2 137C 0000 0024             		move.b	#0,$24(a1)
0001B5A8 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B5AC                            
0001B5AC                            TouchKE_NextExplosion:
0001B5AC 5802                       		addq.b	#4,d2
0001B5AE 4EB9 0000 DFF8             		jsr	SingleObjLoad
0001B5B4 6600                       		bne.s	TouchKE_NoExplosion
0001B5B6 336A 0008 0008             		move.w	8(a2),8(a1)
0001B5BC 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B5C2 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B5C6                            
0001B5C6                            TouchKE_NoExplosion:
0001B5C6 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B5C8 4A68 0012                  		tst.w	$12(a0)
0001B5CC 6B00                       		bmi.s	loc_1AFC2
0001B5CE 3028 000C                  		move.w	$C(a0),d0
0001B5D2 B069 000C                  		cmp.w	$C(a1),d0
0001B5D6 6400                       		bcc.s	loc_1AFCA
0001B5D8 4468 0012                  		neg.w	$12(a0)
0001B5DC 4E75                       		rts	
0001B5DE                            ; ===========================================================================
0001B5DE                            
0001B5DE                            loc_1AFC2:
0001B5DE 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B5E4 4E75                       		rts	
0001B5E6                            ; ===========================================================================
0001B5E6                            
0001B5E6                            loc_1AFCA:
0001B5E6 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B5EC 4E75                       		rts	
0001B5EE                            ; ===========================================================================
0001B5EE 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B5F6                            ; ===========================================================================
0001B5F6                            
0001B5F6                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B5F6 08E9 0007 0022             		bset	#7,$22(a1)
0001B5FC                            
0001B5FC                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B5FC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B600 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B602                            
0001B602                            loc_1AFE6:				; XREF: Touch_Hurt
0001B602 70FF                       		moveq	#-1,d0
0001B604 4E75                       		rts	
0001B606                            ; ===========================================================================
0001B606                            
0001B606                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B606 4E71                       		nop	
0001B608 4A68 0030                  		tst.w	$30(a0)
0001B60C 66F4                       		bne.s	loc_1AFE6
0001B60E 2449                       		movea.l	a1,a2
0001B610                            
0001B610                            ; End of function TouchResponse
0001B610                            ; continue straight to HurtSonic
0001B610                            
0001B610                            ; ---------------------------------------------------------------------------
0001B610                            ; Hurting Sonic	subroutine
0001B610                            ; ---------------------------------------------------------------------------
0001B610                            
0001B610                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B610                            
0001B610                            
0001B610                            HurtSonic:
0001B610 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B614 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B616 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B61A 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B61E 4EB9 0000 DFF8             		jsr	SingleObjLoad
0001B624 6600                       		bne.s	Hurt_Shield
0001B626 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B62A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B630 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B636                            
0001B636                            Hurt_Shield:
0001B636 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B63C 117C 0004 0024             		move.b	#4,$24(a0)
0001B642 6100 8750                  		bsr.w	Sonic_ResetOnFloor
0001B646 08E8 0001 0022             		bset	#1,$22(a0)
0001B64C 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B652 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B658 0828 0006 0022             		btst	#6,$22(a0)
0001B65E 6700                       		beq.s	Hurt_Reverse
0001B660 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B666 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B66C                            
0001B66C                            Hurt_Reverse:
0001B66C 3028 0008                  		move.w	8(a0),d0
0001B670 B06A 0008                  		cmp.w	8(a2),d0
0001B674 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B676 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B67A                            
0001B67A                            Hurt_ChkSpikes:
0001B67A 317C 0000 0014             		move.w	#0,$14(a0)
0001B680 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B686 317C 0078 0030             		move.w	#$78,$30(a0)
0001B68C 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B690 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B694 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B696 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B69A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B69C 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B6A0                            
0001B6A0                            Hurt_Sound:
0001B6A0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B6A6 70FF                       		moveq	#-1,d0
0001B6A8 4E75                       		rts	
0001B6AA                            ; ===========================================================================
0001B6AA                            
0001B6AA                            Hurt_NoRings:
0001B6AA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B6AE 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B6B2                            ; End of function HurtSonic
0001B6B2                            
0001B6B2                            ; ---------------------------------------------------------------------------
0001B6B2                            ; Subroutine to	kill Sonic
0001B6B2                            ; ---------------------------------------------------------------------------
0001B6B2                            
0001B6B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6B2                            
0001B6B2                            
0001B6B2                            KillSonic:
0001B6B2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B6B6 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B6B8 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B6BE 117C 0006 0024             		move.b	#6,$24(a0)
0001B6C4 6100 86CE                  		bsr.w	Sonic_ResetOnFloor
0001B6C8 08E8 0001 0022             		bset	#1,$22(a0)
0001B6CE 317C F900 0012             		move.w	#-$700,$12(a0)
0001B6D4 317C 0000 0010             		move.w	#0,$10(a0)
0001B6DA 317C 0000 0014             		move.w	#0,$14(a0)
0001B6E0 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B6E6 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B6EC 08E8 0007 0002             		bset	#7,2(a0)
0001B6F2 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B6F6 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B6FA 6600                       		bne.s	Kill_Sound
0001B6FC 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B700                            
0001B700                            Kill_Sound:
0001B700 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B706                            
0001B706                            Kill_NoDeath:
0001B706 70FF                       		moveq	#-1,d0
0001B708 4E75                       		rts	
0001B70A                            ; End of function KillSonic
0001B70A                            
0001B70A                            
0001B70A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B70A                            
0001B70A                            
0001B70A                            Touch_Special:				; XREF: Touch_ChkValue
0001B70A 1229 0020                  		move.b	$20(a1),d1
0001B70E 0201 003F                  		andi.b	#$3F,d1
0001B712 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B716 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B718 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B71C 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B71E 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B722 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B724 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B728 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B72A 4E75                       		rts	
0001B72C                            ; ===========================================================================
0001B72C                            
0001B72C                            Touch_CatKiller:			; XREF: Touch_Special
0001B72C 6000 FEC8                  		bra.w	loc_1AFDA
0001B730                            ; ===========================================================================
0001B730                            
0001B730                            Touch_Yadrin:				; XREF: Touch_Special
0001B730 9A40                       		sub.w	d0,d5
0001B732 0C45 0008                  		cmpi.w	#8,d5
0001B736 6400                       		bcc.s	loc_1B144
0001B738 3029 0008                  		move.w	8(a1),d0
0001B73C 5940                       		subq.w	#4,d0
0001B73E 0829 0000 0022             		btst	#0,$22(a1)
0001B744 6700                       		beq.s	loc_1B130
0001B746 0440 0010                  		subi.w	#$10,d0
0001B74A                            
0001B74A                            loc_1B130:
0001B74A 9042                       		sub.w	d2,d0
0001B74C 6400                       		bcc.s	loc_1B13C
0001B74E 0640 0018                  		addi.w	#$18,d0
0001B752 6500                       		bcs.s	loc_1B140
0001B754 6000                       		bra.s	loc_1B144
0001B756                            ; ===========================================================================
0001B756                            
0001B756                            loc_1B13C:
0001B756 B044                       		cmp.w	d4,d0
0001B758 6200                       		bhi.s	loc_1B144
0001B75A                            
0001B75A                            loc_1B140:
0001B75A 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B75E                            ; ===========================================================================
0001B75E                            
0001B75E                            loc_1B144:
0001B75E 6000 FDC8                  		bra.w	Touch_Enemy
0001B762                            ; ===========================================================================
0001B762                            
0001B762                            Touch_D7orE1:				; XREF: Touch_Special
0001B762 5229 0021                  		addq.b	#1,$21(a1)
0001B766 4E75                       		rts	
0001B768                            ; End of function Touch_Special
0001B768                            
0001B768                            ; ---------------------------------------------------------------------------
0001B768                            ; Subroutine to	show the special stage layout
0001B768                            ; ---------------------------------------------------------------------------
0001B768                            
0001B768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B768                            
0001B768                            
0001B768                            SS_ShowLayout:				; XREF: SpecialStage
0001B768 6100 0000                  		bsr.w	SS_AniWallsRings
0001B76C 6100 0000                  		bsr.w	SS_AniItems
0001B770 3F05                       		move.w	d5,-(sp)
0001B772 43F8 8000                  		lea	($FFFF8000).w,a1
0001B776 1038 F780                  		move.b	($FFFFF780).w,d0
0001B77A 0200 00FC                  		andi.b	#$FC,d0
0001B77E 4EB9 0000 2C22             		jsr	(CalcSine).l
0001B784 3800                       		move.w	d0,d4
0001B786 3A01                       		move.w	d1,d5
0001B788 C9FC 0018                  		muls.w	#$18,d4
0001B78C CBFC 0018                  		muls.w	#$18,d5
0001B790 7400                       		moveq	#0,d2
0001B792 3438 F700                  		move.w	($FFFFF700).w,d2
0001B796 84FC 0018                  		divu.w	#$18,d2
0001B79A 4842                       		swap	d2
0001B79C 4442                       		neg.w	d2
0001B79E 0642 FF4C                  		addi.w	#-$B4,d2
0001B7A2 7600                       		moveq	#0,d3
0001B7A4 3638 F704                  		move.w	($FFFFF704).w,d3
0001B7A8 86FC 0018                  		divu.w	#$18,d3
0001B7AC 4843                       		swap	d3
0001B7AE 4443                       		neg.w	d3
0001B7B0 0643 FF4C                  		addi.w	#-$B4,d3
0001B7B4 3E3C 000F                  		move.w	#$F,d7
0001B7B8                            
0001B7B8                            loc_1B19E:
0001B7B8 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B7BC 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B7C0 4440                       		neg.w	d0
0001B7C2 C3C2                       		muls.w	d2,d1
0001B7C4 C1C3                       		muls.w	d3,d0
0001B7C6 2C00                       		move.l	d0,d6
0001B7C8 DC81                       		add.l	d1,d6
0001B7CA 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B7CE C1C2                       		muls.w	d2,d0
0001B7D0 C3C3                       		muls.w	d3,d1
0001B7D2 D280                       		add.l	d0,d1
0001B7D4 2406                       		move.l	d6,d2
0001B7D6 3C3C 000F                  		move.w	#$F,d6
0001B7DA                            
0001B7DA                            loc_1B1C0:
0001B7DA 2002                       		move.l	d2,d0
0001B7DC E080                       		asr.l	#8,d0
0001B7DE 32C0                       		move.w	d0,(a1)+
0001B7E0 2001                       		move.l	d1,d0
0001B7E2 E080                       		asr.l	#8,d0
0001B7E4 32C0                       		move.w	d0,(a1)+
0001B7E6 D485                       		add.l	d5,d2
0001B7E8 D284                       		add.l	d4,d1
0001B7EA 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B7EE                            
0001B7EE 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B7F2 0643 0018                  		addi.w	#$18,d3
0001B7F6 51CF FFC0                  		dbf	d7,loc_1B19E
0001B7FA                            
0001B7FA 3A1F                       		move.w	(sp)+,d5
0001B7FC 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B802 7000                       		moveq	#0,d0
0001B804 3038 F704                  		move.w	($FFFFF704).w,d0
0001B808 80FC 0018                  		divu.w	#$18,d0
0001B80C C0FC 0080                  		mulu.w	#$80,d0
0001B810 D1C0                       		adda.l	d0,a0
0001B812 7000                       		moveq	#0,d0
0001B814 3038 F700                  		move.w	($FFFFF700).w,d0
0001B818 80FC 0018                  		divu.w	#$18,d0
0001B81C D0C0                       		adda.w	d0,a0
0001B81E 49F8 8000                  		lea	($FFFF8000).w,a4
0001B822 3E3C 000F                  		move.w	#$F,d7
0001B826                            
0001B826                            loc_1B20C:
0001B826 3C3C 000F                  		move.w	#$F,d6
0001B82A                            
0001B82A                            loc_1B210:
0001B82A 7000                       		moveq	#0,d0
0001B82C 1018                       		move.b	(a0)+,d0
0001B82E 6700                       		beq.s	loc_1B268
0001B830 0C00 004E                  		cmpi.b	#$4E,d0
0001B834 6200                       		bhi.s	loc_1B268
0001B836 3614                       		move.w	(a4),d3
0001B838 0643 0120                  		addi.w	#$120,d3
0001B83C 0C43 0070                  		cmpi.w	#$70,d3
0001B840 6500                       		bcs.s	loc_1B268
0001B842 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B846 6400                       		bcc.s	loc_1B268
0001B848 342C 0002                  		move.w	2(a4),d2
0001B84C 0642 00F0                  		addi.w	#$F0,d2
0001B850 0C42 0070                  		cmpi.w	#$70,d2
0001B854 6500                       		bcs.s	loc_1B268
0001B856 0C42 0170                  		cmpi.w	#$170,d2
0001B85A 6400                       		bcc.s	loc_1B268
0001B85C 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B862 E748                       		lsl.w	#3,d0
0001B864 4BF5 0000                  		lea	(a5,d0.w),a5
0001B868 225D                       		movea.l	(a5)+,a1
0001B86A 321D                       		move.w	(a5)+,d1
0001B86C D241                       		add.w	d1,d1
0001B86E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B872 365D                       		movea.w	(a5)+,a3
0001B874 7200                       		moveq	#0,d1
0001B876 1219                       		move.b	(a1)+,d1
0001B878 5301                       		subq.b	#1,d1
0001B87A 6B00                       		bmi.s	loc_1B268
0001B87C 4EB9 0000 DCD0             		jsr	sub_D762
0001B882                            
0001B882                            loc_1B268:
0001B882 584C                       		addq.w	#4,a4
0001B884 51CE FFA4                  		dbf	d6,loc_1B210
0001B888                            
0001B888 41E8 0070                  		lea	$70(a0),a0
0001B88C 51CF FF98                  		dbf	d7,loc_1B20C
0001B890                            
0001B890 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B894 0C05 0050                  		cmpi.b	#$50,d5
0001B898 6700                       		beq.s	loc_1B288
0001B89A 24BC 0000 0000             		move.l	#0,(a2)
0001B8A0 4E75                       		rts	
0001B8A2                            ; ===========================================================================
0001B8A2                            
0001B8A2                            loc_1B288:
0001B8A2 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B8A8 4E75                       		rts	
0001B8AA                            ; End of function SS_ShowLayout
0001B8AA                            
0001B8AA                            ; ---------------------------------------------------------------------------
0001B8AA                            ; Subroutine to	animate	walls and rings	in the special stage
0001B8AA                            ; ---------------------------------------------------------------------------
0001B8AA                            
0001B8AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8AA                            
0001B8AA                            
0001B8AA                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B8AA 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B8B0 7000                       		moveq	#0,d0
0001B8B2 1038 F780                  		move.b	($FFFFF780).w,d0
0001B8B6 E408                       		lsr.b	#2,d0
0001B8B8 0240 000F                  		andi.w	#$F,d0
0001B8BC 7223                       		moveq	#$23,d1
0001B8BE                            
0001B8BE                            loc_1B2A4:
0001B8BE 3280                       		move.w	d0,(a1)
0001B8C0 5049                       		addq.w	#8,a1
0001B8C2 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B8C6                            
0001B8C6 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B8CC 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B8D0 6A00                       		bpl.s	loc_1B2C8
0001B8D2 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B8D8 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B8DC 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B8E2                            
0001B8E2                            loc_1B2C8:
0001B8E2 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B8E8 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B8EC 6A00                       		bpl.s	loc_1B2E4
0001B8EE 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B8F4 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B8F8 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B8FE                            
0001B8FE                            loc_1B2E4:
0001B8FE 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B902 1340 0138                  		move.b	d0,$138(a1)
0001B906 1340 0160                  		move.b	d0,$160(a1)
0001B90A 1340 0148                  		move.b	d0,$148(a1)
0001B90E 1340 0150                  		move.b	d0,$150(a1)
0001B912 1340 01D8                  		move.b	d0,$1D8(a1)
0001B916 1340 01E0                  		move.b	d0,$1E0(a1)
0001B91A 1340 01E8                  		move.b	d0,$1E8(a1)
0001B91E 1340 01F0                  		move.b	d0,$1F0(a1)
0001B922 1340 01F8                  		move.b	d0,$1F8(a1)
0001B926 1340 0200                  		move.b	d0,$200(a1)
0001B92A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B92E 6A00                       		bpl.s	loc_1B326
0001B930 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B936 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B93A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B940                            
0001B940                            loc_1B326:
0001B940 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B944 1340 0168                  		move.b	d0,$168(a1)
0001B948 1340 0170                  		move.b	d0,$170(a1)
0001B94C 1340 0178                  		move.b	d0,$178(a1)
0001B950 1340 0180                  		move.b	d0,$180(a1)
0001B954 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B958 6A00                       		bpl.s	loc_1B350
0001B95A 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B960 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B964 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B96A                            
0001B96A                            loc_1B350:
0001B96A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B970 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B976 7000                       		moveq	#0,d0
0001B978 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B97C D040                       		add.w	d0,d0
0001B97E 41F0 0000                  		lea	(a0,d0.w),a0
0001B982 3290                       		move.w	(a0),(a1)
0001B984 3368 0002 0008             		move.w	2(a0),8(a1)
0001B98A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B990 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B996 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B99C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9A2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9A8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9AE D0FC 0020                  		adda.w	#$20,a0
0001B9B2 D2FC 0048                  		adda.w	#$48,a1
0001B9B6 3290                       		move.w	(a0),(a1)
0001B9B8 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9BE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9C4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9CA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9D0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9D6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9DC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9E2 D0FC 0020                  		adda.w	#$20,a0
0001B9E6 D2FC 0048                  		adda.w	#$48,a1
0001B9EA 3290                       		move.w	(a0),(a1)
0001B9EC 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9F2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9F8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9FE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BA04 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA0A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA10 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA16 D0FC 0020                  		adda.w	#$20,a0
0001BA1A D2FC 0048                  		adda.w	#$48,a1
0001BA1E 3290                       		move.w	(a0),(a1)
0001BA20 3368 0002 0008             		move.w	2(a0),8(a1)
0001BA26 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BA2C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BA32 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BA38 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA3E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA44 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA4A D0FC 0020                  		adda.w	#$20,a0
0001BA4E D2FC 0048                  		adda.w	#$48,a1
0001BA52 4E75                       		rts	
0001BA54                            ; End of function SS_AniWallsRings
0001BA54                            
0001BA54                            ; ===========================================================================
0001BA54 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA64 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA74 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA84 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA94 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BAA4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BAB4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BAC4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BAD4                            ; ---------------------------------------------------------------------------
0001BAD4                            ; Subroutine to	remove items when you collect them in the special stage
0001BAD4                            ; ---------------------------------------------------------------------------
0001BAD4                            
0001BAD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAD4                            
0001BAD4                            
0001BAD4                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BAD4 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BADA 303C 001F                  		move.w	#$1F,d0
0001BADE                            
0001BADE                            loc_1B4C4:
0001BADE 4A12                       		tst.b	(a2)
0001BAE0 6700                       		beq.s	locret_1B4CE
0001BAE2 504A                       		addq.w	#8,a2
0001BAE4 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BAE8                            
0001BAE8                            locret_1B4CE:
0001BAE8 4E75                       		rts	
0001BAEA                            ; End of function SS_RemoveCollectedItem
0001BAEA                            
0001BAEA                            ; ---------------------------------------------------------------------------
0001BAEA                            ; Subroutine to	animate	special	stage items when you touch them
0001BAEA                            ; ---------------------------------------------------------------------------
0001BAEA                            
0001BAEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAEA                            
0001BAEA                            
0001BAEA                            SS_AniItems:				; XREF: SS_ShowLayout
0001BAEA 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BAF0 3E3C 001F                  		move.w	#$1F,d7
0001BAF4                            
0001BAF4                            loc_1B4DA:
0001BAF4 7000                       		moveq	#0,d0
0001BAF6 1010                       		move.b	(a0),d0
0001BAF8 6700                       		beq.s	loc_1B4E8
0001BAFA E548                       		lsl.w	#2,d0
0001BAFC 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BB00 4E91                       		jsr	(a1)
0001BB02                            
0001BB02                            loc_1B4E8:
0001BB02 5048                       		addq.w	#8,a0
0001BB04                            
0001BB04                            loc_1B4EA:
0001BB04 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BB08                            
0001BB08 4E75                       		rts	
0001BB0A                            ; End of function SS_AniItems
0001BB0A                            
0001BB0A                            ; ===========================================================================
0001BB0A 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BB0E 0000 0000                  		dc.l SS_AniBumper
0001BB12 0000 0000                  		dc.l SS_Ani1Up
0001BB16 0000 0000                  		dc.l SS_AniReverse
0001BB1A 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BB1E 0000 0000                  		dc.l SS_AniGlassBlock
0001BB22                            ; ===========================================================================
0001BB22                            
0001BB22                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BB22 5328 0002                  		subq.b	#1,2(a0)
0001BB26 6A00                       		bpl.s	locret_1B530
0001BB28 117C 0005 0002             		move.b	#5,2(a0)
0001BB2E 7000                       		moveq	#0,d0
0001BB30 1028 0003                  		move.b	3(a0),d0
0001BB34 5228 0003                  		addq.b	#1,3(a0)
0001BB38 2268 0004                  		movea.l	4(a0),a1
0001BB3C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BB40 1280                       		move.b	d0,(a1)
0001BB42 6600                       		bne.s	locret_1B530
0001BB44 4290                       		clr.l	(a0)
0001BB46 42A8 0004                  		clr.l	4(a0)
0001BB4A                            
0001BB4A                            locret_1B530:
0001BB4A 4E75                       		rts	
0001BB4C                            ; ===========================================================================
0001BB4C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BB52                            ; ===========================================================================
0001BB52                            
0001BB52                            SS_AniBumper:				; XREF: SS_AniIndex
0001BB52 5328 0002                  		subq.b	#1,2(a0)
0001BB56 6A00                       		bpl.s	locret_1B566
0001BB58 117C 0007 0002             		move.b	#7,2(a0)
0001BB5E 7000                       		moveq	#0,d0
0001BB60 1028 0003                  		move.b	3(a0),d0
0001BB64 5228 0003                  		addq.b	#1,3(a0)
0001BB68 2268 0004                  		movea.l	4(a0),a1
0001BB6C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BB70 6600                       		bne.s	loc_1B564
0001BB72 4290                       		clr.l	(a0)
0001BB74 42A8 0004                  		clr.l	4(a0)
0001BB78 12BC 0025                  		move.b	#$25,(a1)
0001BB7C 4E75                       		rts	
0001BB7E                            ; ===========================================================================
0001BB7E                            
0001BB7E                            loc_1B564:
0001BB7E 1280                       		move.b	d0,(a1)
0001BB80                            
0001BB80                            locret_1B566:
0001BB80 4E75                       		rts	
0001BB82                            ; ===========================================================================
0001BB82 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BB88                            ; ===========================================================================
0001BB88                            
0001BB88                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BB88 5328 0002                  		subq.b	#1,2(a0)
0001BB8C 6A00                       		bpl.s	locret_1B596
0001BB8E 117C 0005 0002             		move.b	#5,2(a0)
0001BB94 7000                       		moveq	#0,d0
0001BB96 1028 0003                  		move.b	3(a0),d0
0001BB9A 5228 0003                  		addq.b	#1,3(a0)
0001BB9E 2268 0004                  		movea.l	4(a0),a1
0001BBA2 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BBA6 1280                       		move.b	d0,(a1)
0001BBA8 6600                       		bne.s	locret_1B596
0001BBAA 4290                       		clr.l	(a0)
0001BBAC 42A8 0004                  		clr.l	4(a0)
0001BBB0                            
0001BBB0                            locret_1B596:
0001BBB0 4E75                       		rts	
0001BBB2                            ; ===========================================================================
0001BBB2 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BBB8                            ; ===========================================================================
0001BBB8                            
0001BBB8                            SS_AniReverse:				; XREF: SS_AniIndex
0001BBB8 5328 0002                  		subq.b	#1,2(a0)
0001BBBC 6A00                       		bpl.s	locret_1B5CC
0001BBBE 117C 0007 0002             		move.b	#7,2(a0)
0001BBC4 7000                       		moveq	#0,d0
0001BBC6 1028 0003                  		move.b	3(a0),d0
0001BBCA 5228 0003                  		addq.b	#1,3(a0)
0001BBCE 2268 0004                  		movea.l	4(a0),a1
0001BBD2 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BBD6 6600                       		bne.s	loc_1B5CA
0001BBD8 4290                       		clr.l	(a0)
0001BBDA 42A8 0004                  		clr.l	4(a0)
0001BBDE 12BC 002B                  		move.b	#$2B,(a1)
0001BBE2 4E75                       		rts	
0001BBE4                            ; ===========================================================================
0001BBE4                            
0001BBE4                            loc_1B5CA:
0001BBE4 1280                       		move.b	d0,(a1)
0001BBE6                            
0001BBE6                            locret_1B5CC:
0001BBE6 4E75                       		rts	
0001BBE8                            ; ===========================================================================
0001BBE8 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BBEE                            ; ===========================================================================
0001BBEE                            
0001BBEE                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BBEE 5328 0002                  		subq.b	#1,2(a0)
0001BBF2 6A00                       		bpl.s	locret_1B60C
0001BBF4 117C 0005 0002             		move.b	#5,2(a0)
0001BBFA 7000                       		moveq	#0,d0
0001BBFC 1028 0003                  		move.b	3(a0),d0
0001BC00 5228 0003                  		addq.b	#1,3(a0)
0001BC04 2268 0004                  		movea.l	4(a0),a1
0001BC08 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BC0C 1280                       		move.b	d0,(a1)
0001BC0E 6600                       		bne.s	locret_1B60C
0001BC10 4290                       		clr.l	(a0)
0001BC12 42A8 0004                  		clr.l	4(a0)
0001BC16 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BC1C 303C 00A8                  		move.w	#$A8,d0
0001BC20 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BC26                            
0001BC26                            locret_1B60C:
0001BC26 4E75                       		rts	
0001BC28                            ; ===========================================================================
0001BC28 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BC2E                            ; ===========================================================================
0001BC2E                            
0001BC2E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BC2E 5328 0002                  		subq.b	#1,2(a0)
0001BC32 6A00                       		bpl.s	locret_1B640
0001BC34 117C 0001 0002             		move.b	#1,2(a0)
0001BC3A 7000                       		moveq	#0,d0
0001BC3C 1028 0003                  		move.b	3(a0),d0
0001BC40 5228 0003                  		addq.b	#1,3(a0)
0001BC44 2268 0004                  		movea.l	4(a0),a1
0001BC48 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BC4C 1280                       		move.b	d0,(a1)
0001BC4E 6600                       		bne.s	locret_1B640
0001BC50 12A8 0004                  		move.b	4(a0),(a1)
0001BC54 4290                       		clr.l	(a0)
0001BC56 42A8 0004                  		clr.l	4(a0)
0001BC5A                            
0001BC5A                            locret_1B640:
0001BC5A 4E75                       		rts	
0001BC5C                            ; ===========================================================================
0001BC5C 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BC66                            ; ---------------------------------------------------------------------------
0001BC66                            ; Special stage	layout pointers
0001BC66                            ; ---------------------------------------------------------------------------
0001BC66                            SS_LayoutIndex:
0001BC66                            	include "_inc\Special stage layout pointers.asm"
0001BC66                            ; ---------------------------------------------------------------------------
0001BC66                            ; Special stage	layout pointers
0001BC66                            ; ---------------------------------------------------------------------------
0001BC66 0000 0000                  	dc.l SS_1
0001BC6A 0000 0000                  	dc.l SS_2
0001BC6E 0000 0000                  	dc.l SS_3
0001BC72 0000 0000                  	dc.l SS_4
0001BC76 0000 0000                  	dc.l SS_5
0001BC7A 0000 0000                  	dc.l SS_6
0001BC7E                            	even
0001BC7E                            	even
0001BC7E                            
0001BC7E                            ; ---------------------------------------------------------------------------
0001BC7E                            ; Special stage	start locations
0001BC7E                            ; ---------------------------------------------------------------------------
0001BC7E                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BC96                            		even
0001BC96                            
0001BC96                            ; ---------------------------------------------------------------------------
0001BC96                            ; Subroutine to	load special stage layout
0001BC96                            ; ---------------------------------------------------------------------------
0001BC96                            
0001BC96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC96                            
0001BC96                            
0001BC96                            SS_Load:				; XREF: SpecialStage
0001BC96 7000                       		moveq	#0,d0
0001BC98 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BC9C 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BCA0 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BCA6 6500                       		bcs.s	SS_ChkEmldNum
0001BCA8 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BCAE                            
0001BCAE                            SS_ChkEmldNum:
0001BCAE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BCB4 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BCB6 7200                       		moveq	#0,d1
0001BCB8 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BCBC 5301                       		subq.b	#1,d1
0001BCBE 6500                       		bcs.s	SS_LoadData
0001BCC0 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BCC4                            
0001BCC4                            SS_ChkEmldLoop:	
0001BCC4 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BCC8 6600                       		bne.s	SS_ChkEmldRepeat
0001BCCA 60CA                       		bra.s	SS_Load
0001BCCC                            ; ===========================================================================
0001BCCC                            
0001BCCC                            SS_ChkEmldRepeat:
0001BCCC 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BCD0                            
0001BCD0                            SS_LoadData:
0001BCD0 E548                       		lsl.w	#2,d0
0001BCD2 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BCD6 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BCDA 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BCDE 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BCE2 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BCE8 303C 0000                  		move.w	#0,d0
0001BCEC 4EB9 0000 193E             		jsr	(EniDec).l
0001BCF2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BCF8 303C 0FFF                  		move.w	#$FFF,d0
0001BCFC                            
0001BCFC                            SS_ClrRAM3:
0001BCFC 4299                       		clr.l	(a1)+
0001BCFE 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BD02                            
0001BD02 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BD08 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BD0E 723F                       		moveq	#$3F,d1
0001BD10                            
0001BD10                            loc_1B6F6:
0001BD10 743F                       		moveq	#$3F,d2
0001BD12                            
0001BD12                            loc_1B6F8:
0001BD12 12D8                       		move.b	(a0)+,(a1)+
0001BD14 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BD18                            
0001BD18 43E9 0040                  		lea	$40(a1),a1
0001BD1C 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BD20                            
0001BD20 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BD26 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BD2C 724D                       		moveq	#$4D,d1
0001BD2E                            
0001BD2E                            loc_1B714:
0001BD2E 22D8                       		move.l	(a0)+,(a1)+
0001BD30 32FC 0000                  		move.w	#0,(a1)+
0001BD34 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BD3A 32D8                       		move.w	(a0)+,(a1)+
0001BD3C 51C9 FFF0                  		dbf	d1,loc_1B714
0001BD40                            
0001BD40 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BD46 323C 003F                  		move.w	#$3F,d1
0001BD4A                            
0001BD4A                            loc_1B730:
0001BD4A                            
0001BD4A 4299                       		clr.l	(a1)+
0001BD4C 51C9 FFFC                  		dbf	d1,loc_1B730
0001BD50                            
0001BD50 4E75                       		rts	
0001BD52                            ; End of function SS_Load
0001BD52                            
0001BD52                            ; ===========================================================================
0001BD52                            ; ---------------------------------------------------------------------------
0001BD52                            ; Special stage	mappings and VRAM pointers
0001BD52                            ; ---------------------------------------------------------------------------
0001BD52                            SS_MapIndex:
0001BD52                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BD52                            ; ---------------------------------------------------------------------------
0001BD52                            ; Special stage	mappings and VRAM pointers
0001BD52                            ; ---------------------------------------------------------------------------
0001BD52 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BD56 0142                       	dc.w $142		; VRAM setting
0001BD58 0000 0000                  	dc.l Map_SSWalls
0001BD5C 0142                       	dc.w $142
0001BD5E 0000 0000                  	dc.l Map_SSWalls
0001BD62 0142                       	dc.w $142
0001BD64 0000 0000                  	dc.l Map_SSWalls
0001BD68 0142                       	dc.w $142
0001BD6A 0000 0000                  	dc.l Map_SSWalls
0001BD6E 0142                       	dc.w $142
0001BD70 0000 0000                  	dc.l Map_SSWalls
0001BD74 0142                       	dc.w $142
0001BD76 0000 0000                  	dc.l Map_SSWalls
0001BD7A 0142                       	dc.w $142
0001BD7C 0000 0000                  	dc.l Map_SSWalls
0001BD80 0142                       	dc.w $142
0001BD82 0000 0000                  	dc.l Map_SSWalls
0001BD86 0142                       	dc.w $142
0001BD88 0000 0000                  	dc.l Map_SSWalls
0001BD8C 2142                       	dc.w $2142
0001BD8E 0000 0000                  	dc.l Map_SSWalls
0001BD92 2142                       	dc.w $2142
0001BD94 0000 0000                  	dc.l Map_SSWalls
0001BD98 2142                       	dc.w $2142
0001BD9A 0000 0000                  	dc.l Map_SSWalls
0001BD9E 2142                       	dc.w $2142
0001BDA0 0000 0000                  	dc.l Map_SSWalls
0001BDA4 2142                       	dc.w $2142
0001BDA6 0000 0000                  	dc.l Map_SSWalls
0001BDAA 2142                       	dc.w $2142
0001BDAC 0000 0000                  	dc.l Map_SSWalls
0001BDB0 2142                       	dc.w $2142
0001BDB2 0000 0000                  	dc.l Map_SSWalls
0001BDB6 2142                       	dc.w $2142
0001BDB8 0000 0000                  	dc.l Map_SSWalls
0001BDBC 2142                       	dc.w $2142
0001BDBE 0000 0000                  	dc.l Map_SSWalls
0001BDC2 4142                       	dc.w $4142
0001BDC4 0000 0000                  	dc.l Map_SSWalls
0001BDC8 4142                       	dc.w $4142
0001BDCA 0000 0000                  	dc.l Map_SSWalls
0001BDCE 4142                       	dc.w $4142
0001BDD0 0000 0000                  	dc.l Map_SSWalls
0001BDD4 4142                       	dc.w $4142
0001BDD6 0000 0000                  	dc.l Map_SSWalls
0001BDDA 4142                       	dc.w $4142
0001BDDC 0000 0000                  	dc.l Map_SSWalls
0001BDE0 4142                       	dc.w $4142
0001BDE2 0000 0000                  	dc.l Map_SSWalls
0001BDE6 4142                       	dc.w $4142
0001BDE8 0000 0000                  	dc.l Map_SSWalls
0001BDEC 4142                       	dc.w $4142
0001BDEE 0000 0000                  	dc.l Map_SSWalls
0001BDF2 4142                       	dc.w $4142
0001BDF4 0000 0000                  	dc.l Map_SSWalls
0001BDF8 6142                       	dc.w $6142
0001BDFA 0000 0000                  	dc.l Map_SSWalls
0001BDFE 6142                       	dc.w $6142
0001BE00 0000 0000                  	dc.l Map_SSWalls
0001BE04 6142                       	dc.w $6142
0001BE06 0000 0000                  	dc.l Map_SSWalls
0001BE0A 6142                       	dc.w $6142
0001BE0C 0000 0000                  	dc.l Map_SSWalls
0001BE10 6142                       	dc.w $6142
0001BE12 0000 0000                  	dc.l Map_SSWalls
0001BE16 6142                       	dc.w $6142
0001BE18 0000 0000                  	dc.l Map_SSWalls
0001BE1C 6142                       	dc.w $6142
0001BE1E 0000 0000                  	dc.l Map_SSWalls
0001BE22 6142                       	dc.w $6142
0001BE24 0000 0000                  	dc.l Map_SSWalls
0001BE28 6142                       	dc.w $6142
0001BE2A 0000 F066                  	dc.l Map_obj47
0001BE2E 023B                       	dc.w $23B
0001BE30 0000 0000                  	dc.l Map_SS_R
0001BE34 0570                       	dc.w $570
0001BE36 0000 0000                  	dc.l Map_SS_R
0001BE3A 0251                       	dc.w $251
0001BE3C 0000 0000                  	dc.l Map_SS_R
0001BE40 0370                       	dc.w $370
0001BE42 0000 0000                  	dc.l Map_SS_Up
0001BE46 0263                       	dc.w $263
0001BE48 0000 0000                  	dc.l Map_SS_Down
0001BE4C 0263                       	dc.w $263
0001BE4E 0000 0000                  	dc.l Map_SS_R
0001BE52 22F0                       	dc.w $22F0
0001BE54 0000 0000                  	dc.l Map_SS_Glass
0001BE58 0470                       	dc.w $470
0001BE5A 0000 0000                  	dc.l Map_SS_Glass
0001BE5E 05F0                       	dc.w $5F0
0001BE60 0000 0000                  	dc.l Map_SS_Glass
0001BE64 65F0                       	dc.w $65F0
0001BE66 0000 0000                  	dc.l Map_SS_Glass
0001BE6A 25F0                       	dc.w $25F0
0001BE6C 0000 0000                  	dc.l Map_SS_Glass
0001BE70 45F0                       	dc.w $45F0
0001BE72 0000 0000                  	dc.l Map_SS_R
0001BE76 02F0                       	dc.w $2F0
0001BE78 0100 F066                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BE7C 023B                       	dc.w $23B
0001BE7E 0200 F066                  	dc.l Map_obj47+$2000000
0001BE82 023B                       	dc.w $23B
0001BE84 0000 0000                  	dc.l Map_SS_R
0001BE88 0797                       	dc.w $797
0001BE8A 0000 0000                  	dc.l Map_SS_R
0001BE8E 07A0                       	dc.w $7A0
0001BE90 0000 0000                  	dc.l Map_SS_R
0001BE94 07A9                       	dc.w $7A9
0001BE96 0000 0000                  	dc.l Map_SS_R
0001BE9A 0797                       	dc.w $797
0001BE9C 0000 0000                  	dc.l Map_SS_R
0001BEA0 07A0                       	dc.w $7A0
0001BEA2 0000 0000                  	dc.l Map_SS_R
0001BEA6 07A9                       	dc.w $7A9
0001BEA8 0000 A3E0                  	dc.l Map_obj25
0001BEAC 27B2                       	dc.w $27B2
0001BEAE 0000 0000                  	dc.l Map_SS_Chaos3
0001BEB2 0770                       	dc.w $770
0001BEB4 0000 0000                  	dc.l Map_SS_Chaos3
0001BEB8 2770                       	dc.w $2770
0001BEBA 0000 0000                  	dc.l Map_SS_Chaos3
0001BEBE 4770                       	dc.w $4770
0001BEC0 0000 0000                  	dc.l Map_SS_Chaos3
0001BEC4 6770                       	dc.w $6770
0001BEC6 0000 0000                  	dc.l Map_SS_Chaos1
0001BECA 0770                       	dc.w $770
0001BECC 0000 0000                  	dc.l Map_SS_Chaos2
0001BED0 0770                       	dc.w $770
0001BED2 0000 0000                  	dc.l Map_SS_R
0001BED6 04F0                       	dc.w $4F0
0001BED8 0400 A3E0                  	dc.l Map_obj25+$4000000
0001BEDC 27B2                       	dc.w $27B2
0001BEDE 0500 A3E0                  	dc.l Map_obj25+$5000000
0001BEE2 27B2                       	dc.w $27B2
0001BEE4 0600 A3E0                  	dc.l Map_obj25+$6000000
0001BEE8 27B2                       	dc.w $27B2
0001BEEA 0700 A3E0                  	dc.l Map_obj25+$7000000
0001BEEE 27B2                       	dc.w $27B2
0001BEF0 0000 0000                  	dc.l Map_SS_Glass
0001BEF4 23F0                       	dc.w $23F0
0001BEF6 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BEFA 23F0                       	dc.w $23F0
0001BEFC 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BF00 23F0                       	dc.w $23F0
0001BF02 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BF06 23F0                       	dc.w $23F0
0001BF08 0000 0000                  	dc.l Map_SS_R+$2000000
0001BF0C 04F0                       	dc.w $4F0
0001BF0E 0000 0000                  	dc.l Map_SS_Glass
0001BF12 05F0                       	dc.w $5F0
0001BF14 0000 0000                  	dc.l Map_SS_Glass
0001BF18 65F0                       	dc.w $65F0
0001BF1A 0000 0000                  	dc.l Map_SS_Glass
0001BF1E 25F0                       	dc.w $25F0
0001BF20 0000 0000                  	dc.l Map_SS_Glass
0001BF24 45F0                       	dc.w $45F0
0001BF24 45F0                       	dc.w $45F0
0001BF26                            
0001BF26                            ; ---------------------------------------------------------------------------
0001BF26                            ; Sprite mappings - special stage "R" block
0001BF26                            ; ---------------------------------------------------------------------------
0001BF26                            Map_SS_R:
0001BF26                            	include "_maps\SSRblock.asm"
0001BF26                            ; ---------------------------------------------------------------------------
0001BF26                            ; Sprite mappings - special stage "R" block
0001BF26                            ; ---------------------------------------------------------------------------
0001BF26 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BF2A 0000                       		dc.w byte_1B91E-Map_SS_R
0001BF2C 01                         byte_1B912:	dc.b 1
0001BF2D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF32 01                         byte_1B918:	dc.b 1
0001BF33 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF38 00                         byte_1B91E:	dc.b 0
0001BF3A 00                         		even
0001BF3A 00                         		even
0001BF3A                            
0001BF3A                            ; ---------------------------------------------------------------------------
0001BF3A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF3A                            ; ---------------------------------------------------------------------------
0001BF3A                            Map_SS_Glass:
0001BF3A                            	include "_maps\SSglassblock.asm"
0001BF3A                            ; ---------------------------------------------------------------------------
0001BF3A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF3A                            ; ---------------------------------------------------------------------------
0001BF3A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BF3E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BF42 01                         byte_1B928:	dc.b 1
0001BF43 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF48 01                         byte_1B92E:	dc.b 1
0001BF49 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BF4E 01                         byte_1B934:	dc.b 1
0001BF4F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BF54 01                         byte_1B93A:	dc.b 1
0001BF55 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BF5A                            		even
0001BF5A                            		even
0001BF5A                            
0001BF5A                            ; ---------------------------------------------------------------------------
0001BF5A                            ; Sprite mappings - special stage "UP" block
0001BF5A                            ; ---------------------------------------------------------------------------
0001BF5A                            Map_SS_Up:
0001BF5A                            	include "_maps\SSUPblock.asm"
0001BF5A                            ; ---------------------------------------------------------------------------
0001BF5A                            ; Sprite mappings - special stage "UP" block
0001BF5A                            ; ---------------------------------------------------------------------------
0001BF5A 0000                       		dc.w byte_1B944-Map_SS_Up
0001BF5C 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BF5E 01                         byte_1B944:	dc.b 1
0001BF5F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF64 01                         byte_1B94A:	dc.b 1
0001BF65 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF6A                            		even
0001BF6A                            		even
0001BF6A                            
0001BF6A                            ; ---------------------------------------------------------------------------
0001BF6A                            ; Sprite mappings - special stage "DOWN" block
0001BF6A                            ; ---------------------------------------------------------------------------
0001BF6A                            Map_SS_Down:
0001BF6A                            	include "_maps\SSDOWNblock.asm"
0001BF6A                            ; ---------------------------------------------------------------------------
0001BF6A                            ; Sprite mappings - special stage "DOWN" block
0001BF6A                            ; ---------------------------------------------------------------------------
0001BF6A 0000                       		dc.w byte_1B954-Map_SS_Down
0001BF6C 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BF6E 01                         byte_1B954:	dc.b 1
0001BF6F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF74 01                         byte_1B95A:	dc.b 1
0001BF75 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF7A                            		even
0001BF7A                            		even
0001BF7A                            
0001BF7A                            ; ---------------------------------------------------------------------------
0001BF7A                            ; Sprite mappings - special stage chaos	emeralds
0001BF7A                            ; ---------------------------------------------------------------------------
0001BF7A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BF7C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BF7E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BF80 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BF82 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BF84 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BF86 01                         byte_1B96C:	dc.b 1
0001BF87 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BF8C 01                         byte_1B972:	dc.b 1
0001BF8D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BF92 01                         byte_1B978:	dc.b 1
0001BF93 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BF98 01                         byte_1B97E:	dc.b 1
0001BF99 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BF9E                            		even
0001BF9E                            ; ===========================================================================
0001BF9E                            ; ---------------------------------------------------------------------------
0001BF9E                            ; Object 09 - Sonic (special stage)
0001BF9E                            ; ---------------------------------------------------------------------------
0001BF9E                            
0001BF9E                            Obj09:					; XREF: Obj_Index
0001BF9E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BFA2 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BFA4 6100 0000                  		bsr.w	SS_FixCamera
0001BFA8 6000 0000                  		bra.w	DebugMode
0001BFAC                            ; ===========================================================================
0001BFAC                            
0001BFAC                            Obj09_Normal:
0001BFAC 7000                       		moveq	#0,d0
0001BFAE 1028 0024                  		move.b	$24(a0),d0
0001BFB2 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BFB6 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BFBA                            ; ===========================================================================
0001BFBA 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BFBC 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BFBE 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BFC0 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BFC2                            ; ===========================================================================
0001BFC2                            
0001BFC2                            Obj09_Main:				; XREF: Obj09_Index
0001BFC2 5428 0024                  		addq.b	#2,$24(a0)
0001BFC6 117C 000E 0016             		move.b	#$E,$16(a0)
0001BFCC 117C 0007 0017             		move.b	#7,$17(a0)
0001BFD2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BFDA 317C 0780 0002             		move.w	#$780,2(a0)
0001BFE0 117C 0004 0001             		move.b	#4,1(a0)
0001BFE6 117C 0000 0018             		move.b	#0,$18(a0)
0001BFEC 117C 0002 001C             		move.b	#2,$1C(a0)
0001BFF2 08E8 0002 0022             		bset	#2,$22(a0)
0001BFF8 08E8 0001 0022             		bset	#1,$22(a0)
0001BFFE                            
0001BFFE                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BFFE 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C002 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C004 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C00A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C00C 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C012                            
0001C012                            Obj09_NoDebug:
0001C012 117C 0000 0030             		move.b	#0,$30(a0)
0001C018 7000                       		moveq	#0,d0
0001C01A 1028 0022                  		move.b	$22(a0),d0
0001C01E 0240 0002                  		andi.w	#2,d0
0001C022 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C026 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C02A 4EBA 8200                  		jsr	LoadSonicDynPLC
0001C02E 4EF9 0000 DB72             		jmp	DisplaySprite
0001C034                            ; ===========================================================================
0001C034 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C036 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C038                            ; ===========================================================================
0001C038                            
0001C038                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C038 6100 0000                  		bsr.w	Obj09_Jump
0001C03C 6100 0000                  		bsr.w	Obj09_Move
0001C040 6100 0000                  		bsr.w	Obj09_Fall
0001C044 6000                       		bra.s	Obj09_Display
0001C046                            ; ===========================================================================
0001C046                            
0001C046                            Obj09_InAir:				; XREF: Obj09_Modes
0001C046 6100 0000                  		bsr.w	nullsub_2
0001C04A 6100 0000                  		bsr.w	Obj09_Move
0001C04E 6100 0000                  		bsr.w	Obj09_Fall
0001C052                            
0001C052                            Obj09_Display:				; XREF: Obj09_OnWall
0001C052 6100 0000                  		bsr.w	Obj09_ChkItems
0001C056 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C05A 4EB9 0000 DB4C             		jsr	SpeedToPos
0001C060 6100 0000                  		bsr.w	SS_FixCamera
0001C064 3038 F780                  		move.w	($FFFFF780).w,d0
0001C068 D078 F782                  		add.w	($FFFFF782).w,d0
0001C06C 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C070 4EB9 0001 3FB0             		jsr	Sonic_Animate
0001C076 4E75                       		rts	
0001C078                            
0001C078                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C078                            
0001C078                            
0001C078                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C078 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C07E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C080 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C084                            
0001C084                            Obj09_ChkRight:
0001C084 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C08A 6700                       		beq.s	loc_1BA78	; if not, branch
0001C08C 6100 0000                  		bsr.w	Obj09_MoveRight
0001C090                            
0001C090                            loc_1BA78:
0001C090 1038 F602                  		move.b	($FFFFF602).w,d0
0001C094 0200 000C                  		andi.b	#$C,d0
0001C098 6600                       		bne.s	loc_1BAA8
0001C09A 3028 0014                  		move.w	$14(a0),d0
0001C09E 6700                       		beq.s	loc_1BAA8
0001C0A0 6B00                       		bmi.s	loc_1BA9A
0001C0A2 0440 000C                  		subi.w	#$C,d0
0001C0A6 6400                       		bcc.s	loc_1BA94
0001C0A8 303C 0000                  		move.w	#0,d0
0001C0AC                            
0001C0AC                            loc_1BA94:
0001C0AC 3140 0014                  		move.w	d0,$14(a0)
0001C0B0 6000                       		bra.s	loc_1BAA8
0001C0B2                            ; ===========================================================================
0001C0B2                            
0001C0B2                            loc_1BA9A:
0001C0B2 0640 000C                  		addi.w	#$C,d0
0001C0B6 6400                       		bcc.s	loc_1BAA4
0001C0B8 303C 0000                  		move.w	#0,d0
0001C0BC                            
0001C0BC                            loc_1BAA4:
0001C0BC 3140 0014                  		move.w	d0,$14(a0)
0001C0C0                            
0001C0C0                            loc_1BAA8:
0001C0C0 1038 F780                  		move.b	($FFFFF780).w,d0
0001C0C4 0600 0020                  		addi.b	#$20,d0
0001C0C8 0200 00C0                  		andi.b	#$C0,d0
0001C0CC 4400                       		neg.b	d0
0001C0CE 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C0D4 C3E8 0014                  		muls.w	$14(a0),d1
0001C0D8 D3A8 0008                  		add.l	d1,8(a0)
0001C0DC C1E8 0014                  		muls.w	$14(a0),d0
0001C0E0 D1A8 000C                  		add.l	d0,$C(a0)
0001C0E4 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C0E8 2428 000C                  		move.l	$C(a0),d2
0001C0EC 2628 0008                  		move.l	8(a0),d3
0001C0F0 6100 0000                  		bsr.w	sub_1BCE8
0001C0F4 6700                       		beq.s	loc_1BAF2
0001C0F6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C0FA 93A8 0008                  		sub.l	d1,8(a0)
0001C0FE 91A8 000C                  		sub.l	d0,$C(a0)
0001C102 317C 0000 0014             		move.w	#0,$14(a0)
0001C108 4E75                       		rts	
0001C10A                            ; ===========================================================================
0001C10A                            
0001C10A                            loc_1BAF2:
0001C10A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C10E 4E75                       		rts	
0001C110                            ; End of function Obj09_Move
0001C110                            
0001C110                            
0001C110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C110                            
0001C110                            
0001C110                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C110 08E8 0000 0022             		bset	#0,$22(a0)
0001C116 3028 0014                  		move.w	$14(a0),d0
0001C11A 6700                       		beq.s	loc_1BB06
0001C11C 6A00                       		bpl.s	loc_1BB1A
0001C11E                            
0001C11E                            loc_1BB06:
0001C11E 0440 000C                  		subi.w	#$C,d0
0001C122 0C40 F800                  		cmpi.w	#-$800,d0
0001C126 6E00                       		bgt.s	loc_1BB14
0001C128 303C F800                  		move.w	#-$800,d0
0001C12C                            
0001C12C                            loc_1BB14:
0001C12C 3140 0014                  		move.w	d0,$14(a0)
0001C130 4E75                       		rts	
0001C132                            ; ===========================================================================
0001C132                            
0001C132                            loc_1BB1A:
0001C132 0440 0040                  		subi.w	#$40,d0
0001C136 6400                       		bcc.s	loc_1BB22
0001C138 4E71                       		nop	
0001C13A                            
0001C13A                            loc_1BB22:
0001C13A 3140 0014                  		move.w	d0,$14(a0)
0001C13E 4E75                       		rts	
0001C140                            ; End of function Obj09_MoveLeft
0001C140                            
0001C140                            
0001C140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C140                            
0001C140                            
0001C140                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C140 08A8 0000 0022             		bclr	#0,$22(a0)
0001C146 3028 0014                  		move.w	$14(a0),d0
0001C14A 6B00                       		bmi.s	loc_1BB48
0001C14C 0640 000C                  		addi.w	#$C,d0
0001C150 0C40 0800                  		cmpi.w	#$800,d0
0001C154 6D00                       		blt.s	loc_1BB42
0001C156 303C 0800                  		move.w	#$800,d0
0001C15A                            
0001C15A                            loc_1BB42:
0001C15A 3140 0014                  		move.w	d0,$14(a0)
0001C15E 6000                       		bra.s	locret_1BB54
0001C160                            ; ===========================================================================
0001C160                            
0001C160                            loc_1BB48:
0001C160 0640 0040                  		addi.w	#$40,d0
0001C164 6400                       		bcc.s	loc_1BB50
0001C166 4E71                       		nop	
0001C168                            
0001C168                            loc_1BB50:
0001C168 3140 0014                  		move.w	d0,$14(a0)
0001C16C                            
0001C16C                            locret_1BB54:
0001C16C 4E75                       		rts	
0001C16E                            ; End of function Obj09_MoveRight
0001C16E                            
0001C16E                            
0001C16E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C16E                            
0001C16E                            
0001C16E                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C16E 1038 F603                  		move.b	($FFFFF603).w,d0
0001C172 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C176 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C178 1038 F780                  		move.b	($FFFFF780).w,d0
0001C17C 0200 00FC                  		andi.b	#$FC,d0
0001C180 4400                       		neg.b	d0
0001C182 0400 0040                  		subi.b	#$40,d0
0001C186 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C18C C3FC 0680                  		muls.w	#$680,d1
0001C190 E081                       		asr.l	#8,d1
0001C192 3141 0010                  		move.w	d1,$10(a0)
0001C196 C1FC 0680                  		muls.w	#$680,d0
0001C19A E080                       		asr.l	#8,d0
0001C19C 3140 0012                  		move.w	d0,$12(a0)
0001C1A0 08E8 0001 0022             		bset	#1,$22(a0)
0001C1A6 303C 00A0                  		move.w	#$A0,d0
0001C1AA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C1B0                            
0001C1B0                            Obj09_NoJump:
0001C1B0 4E75                       		rts	
0001C1B2                            ; End of function Obj09_Jump
0001C1B2                            
0001C1B2                            
0001C1B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1B2                            
0001C1B2                            
0001C1B2                            nullsub_2:				; XREF: Obj09_InAir
0001C1B2 4E75                       		rts	
0001C1B4                            ; End of function nullsub_2
0001C1B4                            
0001C1B4                            ; ===========================================================================
0001C1B4                            ; ---------------------------------------------------------------------------
0001C1B4                            ; unused subroutine to limit Sonic's upward vertical speed
0001C1B4                            ; ---------------------------------------------------------------------------
0001C1B4 323C FC00                  		move.w	#-$400,d1
0001C1B8 B268 0012                  		cmp.w	$12(a0),d1
0001C1BC 6F00                       		ble.s	locret_1BBB4
0001C1BE 1038 F602                  		move.b	($FFFFF602).w,d0
0001C1C2 0200 0070                  		andi.b	#$70,d0
0001C1C6 6600                       		bne.s	locret_1BBB4
0001C1C8 3141 0012                  		move.w	d1,$12(a0)
0001C1CC                            
0001C1CC                            locret_1BBB4:
0001C1CC 4E75                       		rts	
0001C1CE                            ; ---------------------------------------------------------------------------
0001C1CE                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C1CE                            ; ---------------------------------------------------------------------------
0001C1CE                            
0001C1CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1CE                            
0001C1CE                            
0001C1CE                            SS_FixCamera:				; XREF: Obj09
0001C1CE 3428 000C                  		move.w	$C(a0),d2
0001C1D2 3628 0008                  		move.w	8(a0),d3
0001C1D6 3038 F700                  		move.w	($FFFFF700).w,d0
0001C1DA 0443 00A0                  		subi.w	#$A0,d3
0001C1DE 6500                       		bcs.s	loc_1BBCE
0001C1E0 9043                       		sub.w	d3,d0
0001C1E2 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C1E6                            
0001C1E6                            loc_1BBCE:
0001C1E6 3038 F704                  		move.w	($FFFFF704).w,d0
0001C1EA 0442 0070                  		subi.w	#$70,d2
0001C1EE 6500                       		bcs.s	locret_1BBDE
0001C1F0 9042                       		sub.w	d2,d0
0001C1F2 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C1F6                            
0001C1F6                            locret_1BBDE:
0001C1F6 4E75                       		rts	
0001C1F8                            ; End of function SS_FixCamera
0001C1F8                            
0001C1F8                            ; ===========================================================================
0001C1F8                            
0001C1F8                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C1F8 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C1FE 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C204 6600                       		bne.s	loc_1BBF4
0001C206 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C20C                            
0001C20C                            loc_1BBF4:
0001C20C 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C212 6D00                       		blt.s	loc_1BC12
0001C214 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C21A 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C220 5428 0024                  		addq.b	#2,$24(a0)
0001C224 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C22A                            
0001C22A                            loc_1BC12:
0001C22A 3038 F780                  		move.w	($FFFFF780).w,d0
0001C22E D078 F782                  		add.w	($FFFFF782).w,d0
0001C232 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C236 4EB9 0001 3FB0             		jsr	Sonic_Animate
0001C23C 4EB9 0001 422C             		jsr	LoadSonicDynPLC
0001C242 6100 FF8A                  		bsr.w	SS_FixCamera
0001C246 4EF9 0000 DB72             		jmp	DisplaySprite
0001C24C                            ; ===========================================================================
0001C24C                            
0001C24C                            Obj09_Exit2:				; XREF: Obj09_Index
0001C24C 5368 0038                  		subq.w	#1,$38(a0)
0001C250 6600                       		bne.s	loc_1BC40
0001C252 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C258                            
0001C258                            loc_1BC40:
0001C258 4EB9 0001 3FB0             		jsr	Sonic_Animate
0001C25E 4EB9 0001 422C             		jsr	LoadSonicDynPLC
0001C264 6100 FF68                  		bsr.w	SS_FixCamera
0001C268 4EF9 0000 DB72             		jmp	DisplaySprite
0001C26E                            
0001C26E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C26E                            
0001C26E                            
0001C26E                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C26E 2428 000C                  		move.l	$C(a0),d2
0001C272 2628 0008                  		move.l	8(a0),d3
0001C276 1038 F780                  		move.b	($FFFFF780).w,d0
0001C27A 0200 00FC                  		andi.b	#$FC,d0
0001C27E 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C284 3828 0010                  		move.w	$10(a0),d4
0001C288 48C4                       		ext.l	d4
0001C28A E184                       		asl.l	#8,d4
0001C28C C1FC 002A                  		muls.w	#$2A,d0
0001C290 D084                       		add.l	d4,d0
0001C292 3828 0012                  		move.w	$12(a0),d4
0001C296 48C4                       		ext.l	d4
0001C298 E184                       		asl.l	#8,d4
0001C29A C3FC 002A                  		muls.w	#$2A,d1
0001C29E D284                       		add.l	d4,d1
0001C2A0 D680                       		add.l	d0,d3
0001C2A2 6100 0000                  		bsr.w	sub_1BCE8
0001C2A6 6700                       		beq.s	loc_1BCB0
0001C2A8 9680                       		sub.l	d0,d3
0001C2AA 7000                       		moveq	#0,d0
0001C2AC 3140 0010                  		move.w	d0,$10(a0)
0001C2B0 08A8 0001 0022             		bclr	#1,$22(a0)
0001C2B6 D481                       		add.l	d1,d2
0001C2B8 6100 0000                  		bsr.w	sub_1BCE8
0001C2BC 6700                       		beq.s	loc_1BCC6
0001C2BE 9481                       		sub.l	d1,d2
0001C2C0 7200                       		moveq	#0,d1
0001C2C2 3141 0012                  		move.w	d1,$12(a0)
0001C2C6 4E75                       		rts	
0001C2C8                            ; ===========================================================================
0001C2C8                            
0001C2C8                            loc_1BCB0:
0001C2C8 D481                       		add.l	d1,d2
0001C2CA 6100 0000                  		bsr.w	sub_1BCE8
0001C2CE 6700                       		beq.s	loc_1BCD4
0001C2D0 9481                       		sub.l	d1,d2
0001C2D2 7200                       		moveq	#0,d1
0001C2D4 3141 0012                  		move.w	d1,$12(a0)
0001C2D8 08A8 0001 0022             		bclr	#1,$22(a0)
0001C2DE                            
0001C2DE                            loc_1BCC6:
0001C2DE E080                       		asr.l	#8,d0
0001C2E0 E081                       		asr.l	#8,d1
0001C2E2 3140 0010                  		move.w	d0,$10(a0)
0001C2E6 3141 0012                  		move.w	d1,$12(a0)
0001C2EA 4E75                       		rts	
0001C2EC                            ; ===========================================================================
0001C2EC                            
0001C2EC                            loc_1BCD4:
0001C2EC E080                       		asr.l	#8,d0
0001C2EE E081                       		asr.l	#8,d1
0001C2F0 3140 0010                  		move.w	d0,$10(a0)
0001C2F4 3141 0012                  		move.w	d1,$12(a0)
0001C2F8 08E8 0001 0022             		bset	#1,$22(a0)
0001C2FE 4E75                       		rts	
0001C300                            ; End of function Obj09_Fall
0001C300                            
0001C300                            
0001C300                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C300                            
0001C300                            
0001C300                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C300 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C306 7800                       		moveq	#0,d4
0001C308 4842                       		swap	d2
0001C30A 3802                       		move.w	d2,d4
0001C30C 4842                       		swap	d2
0001C30E 0644 0044                  		addi.w	#$44,d4
0001C312 88FC 0018                  		divu.w	#$18,d4
0001C316 C8FC 0080                  		mulu.w	#$80,d4
0001C31A D3C4                       		adda.l	d4,a1
0001C31C 7800                       		moveq	#0,d4
0001C31E 4843                       		swap	d3
0001C320 3803                       		move.w	d3,d4
0001C322 4843                       		swap	d3
0001C324 0644 0014                  		addi.w	#$14,d4
0001C328 88FC 0018                  		divu.w	#$18,d4
0001C32C D2C4                       		adda.w	d4,a1
0001C32E 7A00                       		moveq	#0,d5
0001C330 1819                       		move.b	(a1)+,d4
0001C332 6100                       		bsr.s	sub_1BD30
0001C334 1819                       		move.b	(a1)+,d4
0001C336 6100                       		bsr.s	sub_1BD30
0001C338 D2FC 007E                  		adda.w	#$7E,a1
0001C33C 1819                       		move.b	(a1)+,d4
0001C33E 6100                       		bsr.s	sub_1BD30
0001C340 1819                       		move.b	(a1)+,d4
0001C342 6100                       		bsr.s	sub_1BD30
0001C344 4A05                       		tst.b	d5
0001C346 4E75                       		rts	
0001C348                            ; End of function sub_1BCE8
0001C348                            
0001C348                            
0001C348                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C348                            
0001C348                            
0001C348                            sub_1BD30:				; XREF: sub_1BCE8
0001C348 6700                       		beq.s	locret_1BD44
0001C34A 0C04 0028                  		cmpi.b	#$28,d4
0001C34E 6700                       		beq.s	locret_1BD44
0001C350 0C04 003A                  		cmpi.b	#$3A,d4
0001C354 6500                       		bcs.s	loc_1BD46
0001C356 0C04 004B                  		cmpi.b	#$4B,d4
0001C35A 6400                       		bcc.s	loc_1BD46
0001C35C                            
0001C35C                            locret_1BD44:
0001C35C 4E75                       		rts	
0001C35E                            ; ===========================================================================
0001C35E                            
0001C35E                            loc_1BD46:
0001C35E 1144 0030                  		move.b	d4,$30(a0)
0001C362 2149 0032                  		move.l	a1,$32(a0)
0001C366 7AFF                       		moveq	#-1,d5
0001C368 4E75                       		rts	
0001C36A                            ; End of function sub_1BD30
0001C36A                            
0001C36A                            
0001C36A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C36A                            
0001C36A                            
0001C36A                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C36A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C370 7800                       		moveq	#0,d4
0001C372 3828 000C                  		move.w	$C(a0),d4
0001C376 0644 0050                  		addi.w	#$50,d4
0001C37A 88FC 0018                  		divu.w	#$18,d4
0001C37E C8FC 0080                  		mulu.w	#$80,d4
0001C382 D3C4                       		adda.l	d4,a1
0001C384 7800                       		moveq	#0,d4
0001C386 3828 0008                  		move.w	8(a0),d4
0001C38A 0644 0020                  		addi.w	#$20,d4
0001C38E 88FC 0018                  		divu.w	#$18,d4
0001C392 D2C4                       		adda.w	d4,a1
0001C394 1811                       		move.b	(a1),d4
0001C396 6600                       		bne.s	Obj09_ChkCont
0001C398 4A28 003A                  		tst.b	$3A(a0)
0001C39C 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C3A0 7800                       		moveq	#0,d4
0001C3A2 4E75                       		rts	
0001C3A4                            ; ===========================================================================
0001C3A4                            
0001C3A4                            Obj09_ChkCont:
0001C3A4 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C3A8 6600                       		bne.s	Obj09_Chk1Up
0001C3AA 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C3AE 6600                       		bne.s	Obj09_GetCont
0001C3B0 14BC 0001                  		move.b	#1,(a2)
0001C3B4 2549 0004                  		move.l	a1,4(a2)
0001C3B8                            
0001C3B8                            Obj09_GetCont:
0001C3B8 4EB9 0000 A0C8             		jsr	CollectRing
0001C3BE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C3C4 6500                       		bcs.s	Obj09_NoCont
0001C3C6 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C3CC 6600                       		bne.s	Obj09_NoCont
0001C3CE 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C3D2 303C 00BF                  		move.w	#$BF,d0
0001C3D6 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra continue sound
0001C3DC                            
0001C3DC                            Obj09_NoCont:
0001C3DC 7800                       		moveq	#0,d4
0001C3DE 4E75                       		rts	
0001C3E0                            ; ===========================================================================
0001C3E0                            
0001C3E0                            Obj09_Chk1Up:
0001C3E0 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C3E4 6600                       		bne.s	Obj09_ChkEmer
0001C3E6 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C3EA 6600                       		bne.s	Obj09_Get1Up
0001C3EC 14BC 0003                  		move.b	#3,(a2)
0001C3F0 2549 0004                  		move.l	a1,4(a2)
0001C3F4                            
0001C3F4                            Obj09_Get1Up:
0001C3F4 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C3F8 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C3FC 303C 0088                  		move.w	#$88,d0
0001C400 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra life music
0001C406 7800                       		moveq	#0,d4
0001C408 4E75                       		rts	
0001C40A                            ; ===========================================================================
0001C40A                            
0001C40A                            Obj09_ChkEmer:
0001C40A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C40E 6500                       		bcs.s	Obj09_ChkGhost
0001C410 0C04 0040                  		cmpi.b	#$40,d4
0001C414 6200                       		bhi.s	Obj09_ChkGhost
0001C416 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C41A 6600                       		bne.s	Obj09_GetEmer
0001C41C 14BC 0005                  		move.b	#5,(a2)
0001C420 2549 0004                  		move.l	a1,4(a2)
0001C424                            
0001C424                            Obj09_GetEmer:
0001C424 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C42A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C42C 0404 003B                  		subi.b	#$3B,d4
0001C430 7000                       		moveq	#0,d0
0001C432 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C436 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C43A 1584 0000                  		move.b	d4,(a2,d0.w)
0001C43E 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C442                            
0001C442                            Obj09_NoEmer:
0001C442 303C 0093                  		move.w	#$93,d0
0001C446 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play emerald music
0001C44C 7800                       		moveq	#0,d4
0001C44E 4E75                       		rts	
0001C450                            ; ===========================================================================
0001C450                            
0001C450                            Obj09_ChkGhost:
0001C450 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C454 6600                       		bne.s	Obj09_ChkGhostTag
0001C456 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C45C                            
0001C45C                            Obj09_ChkGhostTag:
0001C45C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C460 6600                       		bne.s	Obj09_NoGhost
0001C462 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C468 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C46A 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C470                            
0001C470                            Obj09_NoGhost:
0001C470 78FF                       		moveq	#-1,d4
0001C472 4E75                       		rts	
0001C474                            ; ===========================================================================
0001C474                            
0001C474                            Obj09_MakeGhostSolid:
0001C474 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C47A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C47C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C482 723F                       		moveq	#$3F,d1
0001C484                            
0001C484                            Obj09_GhostLoop2:
0001C484 743F                       		moveq	#$3F,d2
0001C486                            
0001C486                            Obj09_GhostLoop:
0001C486 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C48A 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C48C 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C490                            
0001C490                            Obj09_NoReplace:
0001C490 5249                       		addq.w	#1,a1
0001C492 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C496 43E9 0040                  		lea	$40(a1),a1
0001C49A 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C49E                            
0001C49E                            Obj09_GhostNotSolid:
0001C49E 4228 003A                  		clr.b	$3A(a0)
0001C4A2 7800                       		moveq	#0,d4
0001C4A4 4E75                       		rts	
0001C4A6                            ; End of function Obj09_ChkItems
0001C4A6                            
0001C4A6                            
0001C4A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4A6                            
0001C4A6                            
0001C4A6                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C4A6 1028 0030                  		move.b	$30(a0),d0
0001C4AA 6600                       		bne.s	Obj09_ChkBumper
0001C4AC 5328 0036                  		subq.b	#1,$36(a0)
0001C4B0 6A00                       		bpl.s	loc_1BEA0
0001C4B2 117C 0000 0036             		move.b	#0,$36(a0)
0001C4B8                            
0001C4B8                            loc_1BEA0:
0001C4B8 5328 0037                  		subq.b	#1,$37(a0)
0001C4BC 6A00                       		bpl.s	locret_1BEAC
0001C4BE 117C 0000 0037             		move.b	#0,$37(a0)
0001C4C4                            
0001C4C4                            locret_1BEAC:
0001C4C4 4E75                       		rts	
0001C4C6                            ; ===========================================================================
0001C4C6                            
0001C4C6                            Obj09_ChkBumper:
0001C4C6 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C4CA 6600                       		bne.s	Obj09_GOAL
0001C4CC 2228 0032                  		move.l	$32(a0),d1
0001C4D0 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C4D6 3401                       		move.w	d1,d2
0001C4D8 0241 007F                  		andi.w	#$7F,d1
0001C4DC C2FC 0018                  		mulu.w	#$18,d1
0001C4E0 0441 0014                  		subi.w	#$14,d1
0001C4E4 EE4A                       		lsr.w	#7,d2
0001C4E6 0242 007F                  		andi.w	#$7F,d2
0001C4EA C4FC 0018                  		mulu.w	#$18,d2
0001C4EE 0442 0044                  		subi.w	#$44,d2
0001C4F2 9268 0008                  		sub.w	8(a0),d1
0001C4F6 9468 000C                  		sub.w	$C(a0),d2
0001C4FA 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0001C500 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C506 C3FC F900                  		muls.w	#-$700,d1
0001C50A E081                       		asr.l	#8,d1
0001C50C 3141 0010                  		move.w	d1,$10(a0)
0001C510 C1FC F900                  		muls.w	#-$700,d0
0001C514 E080                       		asr.l	#8,d0
0001C516 3140 0012                  		move.w	d0,$12(a0)
0001C51A 08E8 0001 0022             		bset	#1,$22(a0)
0001C520 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C524 6600                       		bne.s	Obj09_BumpSnd
0001C526 14BC 0002                  		move.b	#2,(a2)
0001C52A 2028 0032                  		move.l	$32(a0),d0
0001C52E 5380                       		subq.l	#1,d0
0001C530 2540 0004                  		move.l	d0,4(a2)
0001C534                            
0001C534                            Obj09_BumpSnd:
0001C534 303C 00B4                  		move.w	#$B4,d0
0001C538 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C53E                            ; ===========================================================================
0001C53E                            
0001C53E                            Obj09_GOAL:
0001C53E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C542 6600                       		bne.s	Obj09_UPblock
0001C544 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C548 303C 00A8                  		move.w	#$A8,d0		; change item
0001C54C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C552 4E75                       		rts	
0001C554                            ; ===========================================================================
0001C554                            
0001C554                            Obj09_UPblock:
0001C554 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C558 6600                       		bne.s	Obj09_DOWNblock
0001C55A 4A28 0036                  		tst.b	$36(a0)
0001C55E 6600 0000                  		bne.w	Obj09_NoGlass
0001C562 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C568 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C56E 6700                       		beq.s	Obj09_UPsnd
0001C570 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C574 2268 0032                  		movea.l	$32(a0),a1
0001C578 5389                       		subq.l	#1,a1
0001C57A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C57E                            
0001C57E                            Obj09_UPsnd:
0001C57E 303C 00A9                  		move.w	#$A9,d0
0001C582 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C588                            ; ===========================================================================
0001C588                            
0001C588                            Obj09_DOWNblock:
0001C588 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C58C 6600                       		bne.s	Obj09_Rblock
0001C58E 4A28 0036                  		tst.b	$36(a0)
0001C592 6600 0000                  		bne.w	Obj09_NoGlass
0001C596 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C59C 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C5A2 6600                       		bne.s	Obj09_DOWNsnd
0001C5A4 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C5A8 2268 0032                  		movea.l	$32(a0),a1
0001C5AC 5389                       		subq.l	#1,a1
0001C5AE 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C5B2                            
0001C5B2                            Obj09_DOWNsnd:
0001C5B2 303C 00A9                  		move.w	#$A9,d0
0001C5B6 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C5BC                            ; ===========================================================================
0001C5BC                            
0001C5BC                            Obj09_Rblock:
0001C5BC 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C5C0 6600                       		bne.s	Obj09_ChkGlass
0001C5C2 4A28 0037                  		tst.b	$37(a0)
0001C5C6 6600 0000                  		bne.w	Obj09_NoGlass
0001C5CA 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C5D0 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C5D4 6600                       		bne.s	Obj09_RevStage
0001C5D6 14BC 0004                  		move.b	#4,(a2)
0001C5DA 2028 0032                  		move.l	$32(a0),d0
0001C5DE 5380                       		subq.l	#1,d0
0001C5E0 2540 0004                  		move.l	d0,4(a2)
0001C5E4                            
0001C5E4                            Obj09_RevStage:
0001C5E4 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C5E8 303C 00A9                  		move.w	#$A9,d0
0001C5EC 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play sound
0001C5F2                            ; ===========================================================================
0001C5F2                            
0001C5F2                            Obj09_ChkGlass:
0001C5F2 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C5F6 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C5F8 0C00 002E                  		cmpi.b	#$2E,d0
0001C5FC 6700                       		beq.s	Obj09_Glass
0001C5FE 0C00 002F                  		cmpi.b	#$2F,d0
0001C602 6700                       		beq.s	Obj09_Glass
0001C604 0C00 0030                  		cmpi.b	#$30,d0
0001C608 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C60A                            
0001C60A                            Obj09_Glass:
0001C60A 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C60E 6600                       		bne.s	Obj09_GlassSnd
0001C610 14BC 0006                  		move.b	#6,(a2)
0001C614 2268 0032                  		movea.l	$32(a0),a1
0001C618 5389                       		subq.l	#1,a1
0001C61A 2549 0004                  		move.l	a1,4(a2)
0001C61E 1011                       		move.b	(a1),d0
0001C620 5200                       		addq.b	#1,d0		; change glass type when touched
0001C622 0C00 0030                  		cmpi.b	#$30,d0
0001C626 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C628 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C62A                            
0001C62A                            Obj09_GlassUpdate:
0001C62A 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C62E                            
0001C62E                            Obj09_GlassSnd:
0001C62E 303C 00BA                  		move.w	#$BA,d0
0001C632 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C638                            ; ===========================================================================
0001C638                            
0001C638                            Obj09_NoGlass:
0001C638 4E75                       		rts	
0001C63A                            ; End of function Obj09_ChkItems2
0001C63A                            
0001C63A                            ; ===========================================================================
0001C63A                            ; ---------------------------------------------------------------------------
0001C63A                            ; Object 10 - blank
0001C63A                            ; ---------------------------------------------------------------------------
0001C63A                            
0001C63A                            Obj10:					; XREF: Obj_Index
0001C63A 4E75                       		rts	
0001C63C                            ; ---------------------------------------------------------------------------
0001C63C                            ; Subroutine to	animate	level graphics
0001C63C                            ; ---------------------------------------------------------------------------
0001C63C                            
0001C63C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C63C                            
0001C63C                            
0001C63C                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C63C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C640 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C642 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C648 6100 0000                  		bsr.w	AniArt_GiantRing
0001C64C 7000                       		moveq	#0,d0
0001C64E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C652 D040                       		add.w	d0,d0
0001C654 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C658 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C65C                            ; ===========================================================================
0001C65C                            
0001C65C                            AniArt_Pause:
0001C65C 4E75                       		rts	
0001C65E                            ; End of function AniArt_Load
0001C65E                            
0001C65E                            ; ===========================================================================
0001C65E 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C662 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C666 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C66A 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C66C                            ; ===========================================================================
0001C66C                            ; ---------------------------------------------------------------------------
0001C66C                            ; Animated pattern routine - Green Hill
0001C66C                            ; ---------------------------------------------------------------------------
0001C66C                            
0001C66C                            AniArt_GHZ:				; XREF: AniArt_Index
0001C66C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C670 6A00                       		bpl.s	loc_1C08A
0001C672 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C678 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C67E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C682 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C686 0240 0001                  		andi.w	#1,d0
0001C68A 6700                       		beq.s	loc_1C078
0001C68C 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C690                            
0001C690                            loc_1C078:
0001C690 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C69A 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C69E 6000 0000                  		bra.w	LoadTiles
0001C6A2                            ; ===========================================================================
0001C6A2                            
0001C6A2                            loc_1C08A:
0001C6A2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C6A6 6A00                       		bpl.s	loc_1C0C0
0001C6A8 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C6AE 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C6B4 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C6B8 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C6BC 0240 0001                  		andi.w	#1,d0
0001C6C0 6700                       		beq.s	loc_1C0AE
0001C6C2 43E9 0200                  		lea	$200(a1),a1
0001C6C6                            
0001C6C6                            loc_1C0AE:
0001C6C6 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C6D0 323C 000F                  		move.w	#$F,d1
0001C6D4 6000 0000                  		bra.w	LoadTiles
0001C6D8                            ; ===========================================================================
0001C6D8                            
0001C6D8                            loc_1C0C0:
0001C6D8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C6DC 6A00                       		bpl.s	locret_1C10C
0001C6DE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C6E4 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C6E8 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C6EC 0240 0003                  		andi.w	#3,d0
0001C6F0 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C6F4 0800 0000                  		btst	#0,d0
0001C6F8 6600                       		bne.s	loc_1C0E8
0001C6FA 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C700                            
0001C700                            loc_1C0E8:
0001C700 EF48                       		lsl.w	#7,d0
0001C702 3200                       		move.w	d0,d1
0001C704 D040                       		add.w	d0,d0
0001C706 D041                       		add.w	d1,d0
0001C708 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C712 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C718 43F1 0000                  		lea	(a1,d0.w),a1
0001C71C 323C 000B                  		move.w	#$B,d1
0001C720 6100 0000                  		bsr.w	LoadTiles
0001C724                            
0001C724                            locret_1C10C:
0001C724 4E75                       		rts	
0001C726                            ; ===========================================================================
0001C726 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C72A                            ; ===========================================================================
0001C72A                            ; ---------------------------------------------------------------------------
0001C72A                            ; Animated pattern routine - Marble
0001C72A                            ; ---------------------------------------------------------------------------
0001C72A                            
0001C72A                            AniArt_MZ:				; XREF: AniArt_Index
0001C72A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C72E 6A00                       		bpl.s	loc_1C150
0001C730 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C736 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C73C 7000                       		moveq	#0,d0
0001C73E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C742 5200                       		addq.b	#1,d0
0001C744 0C00 0003                  		cmpi.b	#3,d0
0001C748 6600                       		bne.s	loc_1C134
0001C74A 7000                       		moveq	#0,d0
0001C74C                            
0001C74C                            loc_1C134:
0001C74C 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C750 C0FC 0100                  		mulu.w	#$100,d0
0001C754 D2C0                       		adda.w	d0,a1
0001C756 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C760 323C 0007                  		move.w	#7,d1
0001C764 6100 0000                  		bsr.w	LoadTiles
0001C768                            
0001C768                            loc_1C150:
0001C768 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C76C 6A00                       		bpl.s	loc_1C1AE
0001C76E 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C774 7000                       		moveq	#0,d0
0001C776 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C77A 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C780 EE58                       		ror.w	#7,d0
0001C782 D8C0                       		adda.w	d0,a4
0001C784 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C78E 7600                       		moveq	#0,d3
0001C790 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C794 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C798 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C79C 343C 0003                  		move.w	#3,d2
0001C7A0                            
0001C7A0                            loc_1C188:
0001C7A0 3003                       		move.w	d3,d0
0001C7A2 D040                       		add.w	d0,d0
0001C7A4 0240 001E                  		andi.w	#$1E,d0
0001C7A8 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C7AE 3033 0000                  		move.w	(a3,d0.w),d0
0001C7B2 47F3 0000                  		lea	(a3,d0.w),a3
0001C7B6 224C                       		movea.l	a4,a1
0001C7B8 323C 001F                  		move.w	#$1F,d1
0001C7BC 4E93                       		jsr	(a3)
0001C7BE 5843                       		addq.w	#4,d3
0001C7C0 51CA FFDE                  		dbf	d2,loc_1C188
0001C7C4 4E75                       		rts	
0001C7C6                            ; ===========================================================================
0001C7C6                            
0001C7C6                            loc_1C1AE:
0001C7C6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C7CA 6A00 0000                  		bpl.w	locret_1C1EA
0001C7CE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C7D4 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C7DA 7000                       		moveq	#0,d0
0001C7DC 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C7E0 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C7E4 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C7EA C0FC 00C0                  		mulu.w	#$C0,d0
0001C7EE D2C0                       		adda.w	d0,a1
0001C7F0 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C7FA 323C 0005                  		move.w	#5,d1
0001C7FE 6000 0000                  		bra.w	LoadTiles
0001C802                            ; ===========================================================================
0001C802                            
0001C802                            locret_1C1EA:
0001C802 4E75                       		rts	
0001C804                            ; ===========================================================================
0001C804                            ; ---------------------------------------------------------------------------
0001C804                            ; Animated pattern routine - Scrap Brain
0001C804                            ; ---------------------------------------------------------------------------
0001C804                            
0001C804                            AniArt_SBZ:				; XREF: AniArt_Index
0001C804 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C808 6700                       		beq.s	loc_1C1F8
0001C80A 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C80E 6000                       		bra.s	loc_1C250
0001C810                            ; ===========================================================================
0001C810                            
0001C810                            loc_1C1F8:
0001C810 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C814 6A00                       		bpl.s	loc_1C250
0001C816 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C81C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C822 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C82C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C830 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C834 0240 0007                  		andi.w	#7,d0
0001C838 6700                       		beq.s	loc_1C234
0001C83A 5340                       		subq.w	#1,d0
0001C83C C0FC 0180                  		mulu.w	#$180,d0
0001C840 43F1 0000                  		lea	(a1,d0.w),a1
0001C844 323C 000B                  		move.w	#$B,d1
0001C848 6000 0000                  		bra.w	LoadTiles
0001C84C                            ; ===========================================================================
0001C84C                            
0001C84C                            loc_1C234:
0001C84C 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C852                            
0001C852                            loc_1C23A:
0001C852 323C 0005                  		move.w	#5,d1
0001C856 6100 0000                  		bsr.w	LoadTiles
0001C85A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C860 323C 0005                  		move.w	#5,d1
0001C864 6000 0000                  		bra.w	LoadTiles
0001C868                            ; ===========================================================================
0001C868                            
0001C868                            loc_1C250:
0001C868 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C86C 6700                       		beq.s	loc_1C25C
0001C86E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C872 6000                       		bra.s	locret_1C2A0
0001C874                            ; ===========================================================================
0001C874                            
0001C874                            loc_1C25C:
0001C874 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C878 6A00                       		bpl.s	locret_1C2A0
0001C87A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C880 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C886 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C890 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C894 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C898 0240 0007                  		andi.w	#7,d0
0001C89C 6700                       		beq.s	loc_1C298
0001C89E 5340                       		subq.w	#1,d0
0001C8A0 C0FC 0180                  		mulu.w	#$180,d0
0001C8A4 43F1 0000                  		lea	(a1,d0.w),a1
0001C8A8 323C 000B                  		move.w	#$B,d1
0001C8AC 6000 0000                  		bra.w	LoadTiles
0001C8B0                            ; ===========================================================================
0001C8B0                            
0001C8B0                            loc_1C298:
0001C8B0 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C8B6 609A                       		bra.s	loc_1C23A
0001C8B8                            ; ===========================================================================
0001C8B8                            
0001C8B8                            locret_1C2A0:
0001C8B8 4E75                       		rts	
0001C8BA                            ; ===========================================================================
0001C8BA                            ; ---------------------------------------------------------------------------
0001C8BA                            ; Animated pattern routine - ending sequence
0001C8BA                            ; ---------------------------------------------------------------------------
0001C8BA                            
0001C8BA                            AniArt_Ending:				; XREF: AniArt_Index
0001C8BA 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C8BE 6A00                       		bpl.s	loc_1C2F4
0001C8C0 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C8C6 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C8CC 45F8 9400                  		lea	($FFFF9400).w,a2
0001C8D0 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C8D4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C8D8 0240 0001                  		andi.w	#1,d0
0001C8DC 6700                       		beq.s	loc_1C2CE
0001C8DE 43E9 0200                  		lea	$200(a1),a1
0001C8E2 45EA 0200                  		lea	$200(a2),a2
0001C8E6                            
0001C8E6                            loc_1C2CE:
0001C8E6 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C8F0 323C 000F                  		move.w	#$F,d1
0001C8F4 6100 0000                  		bsr.w	LoadTiles
0001C8F8 224A                       		movea.l	a2,a1
0001C8FA 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C904 323C 000F                  		move.w	#$F,d1
0001C908 6000 0000                  		bra.w	LoadTiles
0001C90C                            ; ===========================================================================
0001C90C                            
0001C90C                            loc_1C2F4:
0001C90C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C910 6A00                       		bpl.s	loc_1C33C
0001C912 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C918 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C91C 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C920 0240 0007                  		andi.w	#7,d0
0001C924 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C928 EF48                       		lsl.w	#7,d0
0001C92A 3200                       		move.w	d0,d1
0001C92C D040                       		add.w	d0,d0
0001C92E D041                       		add.w	d1,d0
0001C930 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C93A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C940 43F1 0000                  		lea	(a1,d0.w),a1
0001C944 323C 000B                  		move.w	#$B,d1
0001C948 6000 0000                  		bra.w	LoadTiles
0001C94C                            ; ===========================================================================
0001C94C 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C954                            ; ===========================================================================
0001C954                            
0001C954                            loc_1C33C:
0001C954 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C958 6A00                       		bpl.s	loc_1C37A
0001C95A 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C960 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C964 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C968 0240 0003                  		andi.w	#3,d0
0001C96C 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C970 E148                       		lsl.w	#8,d0
0001C972 D040                       		add.w	d0,d0
0001C974 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C97E 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C982 43F1 0000                  		lea	(a1,d0.w),a1
0001C986 323C 000F                  		move.w	#$F,d1
0001C98A 6000 0000                  		bra.w	LoadTiles
0001C98E                            ; ===========================================================================
0001C98E 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C992                            ; ===========================================================================
0001C992                            
0001C992                            loc_1C37A:
0001C992 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C996 6A00                       		bpl.s	locret_1C3B4
0001C998 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C99E 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C9A2 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C9A6 0240 0003                  		andi.w	#3,d0
0001C9AA 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C9AE E148                       		lsl.w	#8,d0
0001C9B0 D040                       		add.w	d0,d0
0001C9B2 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C9BC 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C9C0 43F1 0000                  		lea	(a1,d0.w),a1
0001C9C4 323C 000F                  		move.w	#$F,d1
0001C9C8 6000 0000                  		bra.w	LoadTiles
0001C9CC                            ; ===========================================================================
0001C9CC                            
0001C9CC                            locret_1C3B4:
0001C9CC 4E75                       		rts	
0001C9CE                            ; ===========================================================================
0001C9CE                            
0001C9CE                            AniArt_none:				; XREF: AniArt_Index
0001C9CE 4E75                       		rts	
0001C9D0                            
0001C9D0                            ; ---------------------------------------------------------------------------
0001C9D0                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C9D0                            ; ---------------------------------------------------------------------------
0001C9D0                            
0001C9D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9D0                            
0001C9D0                            
0001C9D0                            LoadTiles:
0001C9D0 2C99                       		move.l	(a1)+,(a6)
0001C9D2 2C99                       		move.l	(a1)+,(a6)
0001C9D4 2C99                       		move.l	(a1)+,(a6)
0001C9D6 2C99                       		move.l	(a1)+,(a6)
0001C9D8 2C99                       		move.l	(a1)+,(a6)
0001C9DA 2C99                       		move.l	(a1)+,(a6)
0001C9DC 2C99                       		move.l	(a1)+,(a6)
0001C9DE 2C99                       		move.l	(a1)+,(a6)
0001C9E0 51C9 FFEE                  		dbf	d1,LoadTiles
0001C9E4 4E75                       		rts	
0001C9E6                            ; End of function LoadTiles
0001C9E6                            
0001C9E6                            ; ===========================================================================
0001C9E6                            ; ---------------------------------------------------------------------------
0001C9E6                            ; Animated pattern routine - more Marble Zone
0001C9E6                            ; ---------------------------------------------------------------------------
0001C9E6 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C9EA 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C9EE 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C9F2 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C9F6 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C9FA 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C9FE 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CA02 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CA06                            ; ===========================================================================
0001CA06                            
0001CA06                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CA06 2C91                       		move.l	(a1),(a6)
0001CA08 43E9 0010                  		lea	$10(a1),a1
0001CA0C 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CA10 4E75                       		rts	
0001CA12                            ; ===========================================================================
0001CA12                            
0001CA12                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CA12 2029 0002                  		move.l	2(a1),d0
0001CA16 1029 0001                  		move.b	1(a1),d0
0001CA1A E098                       		ror.l	#8,d0
0001CA1C 2C80                       		move.l	d0,(a6)
0001CA1E 43E9 0010                  		lea	$10(a1),a1
0001CA22 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CA26 4E75                       		rts	
0001CA28                            ; ===========================================================================
0001CA28                            
0001CA28                            loc_1C410:				; XREF: AniArt_MZextra
0001CA28 2CA9 0002                  		move.l	2(a1),(a6)
0001CA2C 43E9 0010                  		lea	$10(a1),a1
0001CA30 51C9 FFF6                  		dbf	d1,loc_1C410
0001CA34 4E75                       		rts	
0001CA36                            ; ===========================================================================
0001CA36                            
0001CA36                            loc_1C41E:				; XREF: AniArt_MZextra
0001CA36 2029 0004                  		move.l	4(a1),d0
0001CA3A 1029 0003                  		move.b	3(a1),d0
0001CA3E E098                       		ror.l	#8,d0
0001CA40 2C80                       		move.l	d0,(a6)
0001CA42 43E9 0010                  		lea	$10(a1),a1
0001CA46 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CA4A 4E75                       		rts	
0001CA4C                            ; ===========================================================================
0001CA4C                            
0001CA4C                            loc_1C434:				; XREF: AniArt_MZextra
0001CA4C 2CA9 0004                  		move.l	4(a1),(a6)
0001CA50 43E9 0010                  		lea	$10(a1),a1
0001CA54 51C9 FFF6                  		dbf	d1,loc_1C434
0001CA58 4E75                       		rts	
0001CA5A                            ; ===========================================================================
0001CA5A                            
0001CA5A                            loc_1C442:				; XREF: AniArt_MZextra
0001CA5A 2029 0006                  		move.l	6(a1),d0
0001CA5E 1029 0005                  		move.b	5(a1),d0
0001CA62 E098                       		ror.l	#8,d0
0001CA64 2C80                       		move.l	d0,(a6)
0001CA66 43E9 0010                  		lea	$10(a1),a1
0001CA6A 51C9 FFEE                  		dbf	d1,loc_1C442
0001CA6E 4E75                       		rts	
0001CA70                            ; ===========================================================================
0001CA70                            
0001CA70                            loc_1C458:				; XREF: AniArt_MZextra
0001CA70 2CA9 0006                  		move.l	6(a1),(a6)
0001CA74 43E9 0010                  		lea	$10(a1),a1
0001CA78 51C9 FFF6                  		dbf	d1,loc_1C458
0001CA7C 4E75                       		rts	
0001CA7E                            ; ===========================================================================
0001CA7E                            
0001CA7E                            loc_1C466:				; XREF: AniArt_MZextra
0001CA7E 2029 0008                  		move.l	8(a1),d0
0001CA82 1029 0007                  		move.b	7(a1),d0
0001CA86 E098                       		ror.l	#8,d0
0001CA88 2C80                       		move.l	d0,(a6)
0001CA8A 43E9 0010                  		lea	$10(a1),a1
0001CA8E 51C9 FFEE                  		dbf	d1,loc_1C466
0001CA92 4E75                       		rts	
0001CA94                            ; ===========================================================================
0001CA94                            
0001CA94                            loc_1C47C:				; XREF: AniArt_MZextra
0001CA94 2CA9 0008                  		move.l	8(a1),(a6)
0001CA98 43E9 0010                  		lea	$10(a1),a1
0001CA9C 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CAA0 4E75                       		rts	
0001CAA2                            ; ===========================================================================
0001CAA2                            
0001CAA2                            loc_1C48A:				; XREF: AniArt_MZextra
0001CAA2 2029 000A                  		move.l	$A(a1),d0
0001CAA6 1029 0009                  		move.b	9(a1),d0
0001CAAA E098                       		ror.l	#8,d0
0001CAAC 2C80                       		move.l	d0,(a6)
0001CAAE 43E9 0010                  		lea	$10(a1),a1
0001CAB2 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CAB6 4E75                       		rts	
0001CAB8                            ; ===========================================================================
0001CAB8                            
0001CAB8                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CAB8 2CA9 000A                  		move.l	$A(a1),(a6)
0001CABC 43E9 0010                  		lea	$10(a1),a1
0001CAC0 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CAC4 4E75                       		rts	
0001CAC6                            ; ===========================================================================
0001CAC6                            
0001CAC6                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CAC6 2029 000C                  		move.l	$C(a1),d0
0001CACA 1029 000B                  		move.b	$B(a1),d0
0001CACE E098                       		ror.l	#8,d0
0001CAD0 2C80                       		move.l	d0,(a6)
0001CAD2 43E9 0010                  		lea	$10(a1),a1
0001CAD6 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CADA 4E75                       		rts	
0001CADC                            ; ===========================================================================
0001CADC                            
0001CADC                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CADC 2CA9 000C                  		move.l	$C(a1),(a6)
0001CAE0 43E9 0010                  		lea	$10(a1),a1
0001CAE4 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CAE8 4E75                       		rts	
0001CAEA                            ; ===========================================================================
0001CAEA                            
0001CAEA                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CAEA 2029 000C                  		move.l	$C(a1),d0
0001CAEE E198                       		rol.l	#8,d0
0001CAF0 1011                       		move.b	0(a1),d0
0001CAF2 2C80                       		move.l	d0,(a6)
0001CAF4 43E9 0010                  		lea	$10(a1),a1
0001CAF8 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CAFC 4E75                       		rts	
0001CAFE                            ; ===========================================================================
0001CAFE                            
0001CAFE                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CAFE 3CA9 000E                  		move.w	$E(a1),(a6)
0001CB02 3C91                       		move.w	0(a1),(a6)
0001CB04 43E9 0010                  		lea	$10(a1),a1
0001CB08 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CB0C 4E75                       		rts	
0001CB0E                            ; ===========================================================================
0001CB0E                            
0001CB0E                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CB0E 2011                       		move.l	0(a1),d0
0001CB10 1029 000F                  		move.b	$F(a1),d0
0001CB14 E098                       		ror.l	#8,d0
0001CB16 2C80                       		move.l	d0,(a6)
0001CB18 43E9 0010                  		lea	$10(a1),a1
0001CB1C 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CB20 4E75                       		rts	
0001CB22                            
0001CB22                            ; ---------------------------------------------------------------------------
0001CB22                            ; Animated pattern routine - giant ring
0001CB22                            ; ---------------------------------------------------------------------------
0001CB22                            
0001CB22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB22                            
0001CB22                            
0001CB22                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CB22 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CB26 6600                       		bne.s	loc_1C518
0001CB28 4E75                       		rts	
0001CB2A                            ; ===========================================================================
0001CB2A                            
0001CB2A                            loc_1C518:
0001CB2A 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CB30 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CB36 7000                       		moveq	#0,d0
0001CB38 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CB3C 43F1 0000                  		lea	(a1,d0.w),a1
0001CB40 0640 8000                  		addi.w	#$8000,d0
0001CB44 E588                       		lsl.l	#2,d0
0001CB46 E448                       		lsr.w	#2,d0
0001CB48 0040 4000                  		ori.w	#$4000,d0
0001CB4C 4840                       		swap	d0
0001CB4E 2D40 0004                  		move.l	d0,4(a6)
0001CB52 323C 000D                  		move.w	#$D,d1
0001CB56 6000 FE78                  		bra.w	LoadTiles
0001CB5A                            ; End of function AniArt_GiantRing
0001CB5A                            
0001CB5A                            ; ===========================================================================
0001CB5A                            ; ---------------------------------------------------------------------------
0001CB5A                            ; Object 21 - SCORE, TIME, RINGS
0001CB5A                            ; ---------------------------------------------------------------------------
0001CB5A                            
0001CB5A                            Obj21:					; XREF: Obj_Index
0001CB5A 7000                       		moveq	#0,d0
0001CB5C 1028 0024                  		move.b	$24(a0),d0
0001CB60 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CB64 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CB68                            ; ===========================================================================
0001CB68 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CB6A 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CB6C                            ; ===========================================================================
0001CB6C                            
0001CB6C                            Obj21_Main:				; XREF: Obj21_Main
0001CB6C 5428 0024                  		addq.b	#2,$24(a0)
0001CB70 317C 0090 0008             		move.w	#$90,8(a0)
0001CB76 317C 0108 000A             		move.w	#$108,$A(a0)
0001CB7C 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CB84 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CB8A 117C 0000 0001             		move.b	#0,1(a0)
0001CB90 117C 0000 0018             		move.b	#0,$18(a0)
0001CB96                            
0001CB96                            Obj21_Flash:				; XREF: Obj21_Main
0001CB96 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CB9A 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CB9C 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CBA0 4EF9 0000 DB72             		jmp	DisplaySprite
0001CBA6                            ; ===========================================================================
0001CBA6                            
0001CBA6                            Obj21_Flash2:
0001CBA6 7000                       		moveq	#0,d0
0001CBA8 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CBAE 6600                       		bne.s	Obj21_Display
0001CBB0 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CBB2 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CBB8 6600                       		bne.s	Obj21_Display	; if not, branch
0001CBBA 5440                       		addq.w	#2,d0		; make time counter flash red
0001CBBC                            
0001CBBC                            Obj21_Display:
0001CBBC 1140 001A                  		move.b	d0,$1A(a0)
0001CBC0 4EF9 0000 DB72             		jmp	DisplaySprite
0001CBC6                            ; ===========================================================================
0001CBC6                            ; ---------------------------------------------------------------------------
0001CBC6                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBC6                            ; ---------------------------------------------------------------------------
0001CBC6                            Map_obj21:
0001CBC6                            	include "_maps\obj21.asm"
0001CBC6                            ; ---------------------------------------------------------------------------
0001CBC6                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBC6                            ; ---------------------------------------------------------------------------
0001CBC6 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CBCA 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CBCE 0A                         byte_1C5BC:	dc.b $A
0001CBCF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CBD4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CBD9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CBDE 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CBE3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CBE8 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CBED A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CBF2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CBF7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CBFC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC01 00                         		dc.b 0
0001CC02 0A                         byte_1C5F0:	dc.b $A
0001CC03 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC08 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC0D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC12 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CC17 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC1C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC21 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC26 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC2B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC30 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC35 00                         		dc.b 0
0001CC36 0A                         byte_1C624:	dc.b $A
0001CC37 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC3C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC41 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC46 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC4B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC50 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CC55 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CC5A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC5F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC64 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC69 00                         		dc.b 0
0001CC6A 0A                         byte_1C658:	dc.b $A
0001CC6B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC70 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC75 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC7A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC7F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC84 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC89 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC8E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC93 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC98 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC9E 00                         		even
0001CC9E 00                         		even
0001CC9E                            
0001CC9E                            ; ---------------------------------------------------------------------------
0001CC9E                            ; Add points subroutine
0001CC9E                            ; ---------------------------------------------------------------------------
0001CC9E                            
0001CC9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC9E                            
0001CC9E                            
0001CC9E                            AddPoints:
0001CC9E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CCA4 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CCA8 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CCAC D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CCAE 223C 000F 423F             		move.l	#999999,d1
0001CCB4 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CCB6 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CCBA 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CCBC 2481                       		move.l	d1,(a2)
0001CCBE                            
0001CCBE                            loc_1C6AC:
0001CCBE 2013                       		move.l	(a3),d0
0001CCC0 B092                       		cmp.l	(a2),d0
0001CCC2 6500 0000                  		bcs.w	locret_1C6B6
0001CCC6 2480                       		move.l	d0,(a2)
0001CCC8                            
0001CCC8                            locret_1C6B6:
0001CCC8 4E75                       		rts	
0001CCCA                            ; End of function AddPoints
0001CCCA                            
0001CCCA                            ; ---------------------------------------------------------------------------
0001CCCA                            ; Subroutine to	update the HUD
0001CCCA                            ; ---------------------------------------------------------------------------
0001CCCA                            
0001CCCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCCA                            
0001CCCA                            
0001CCCA                            HudUpdate:
0001CCCA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CCCE 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CCD2 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CCD6 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CCD8 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CCDC 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CCE2 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CCE6 6100 0000                  		bsr.w	Hud_Score
0001CCEA                            
0001CCEA                            Hud_ChkRings:
0001CCEA 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CCEE 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CCF0 6A00                       		bpl.s	loc_1C6E4
0001CCF2 6100 0000                  		bsr.w	Hud_LoadZero
0001CCF6                            
0001CCF6                            loc_1C6E4:
0001CCF6 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CCFA 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CD00 7200                       		moveq	#0,d1
0001CD02 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CD06 6100 0000                  		bsr.w	Hud_Rings
0001CD0A                            
0001CD0A                            Hud_ChkTime:
0001CD0A 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CD0E 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CD10 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CD14 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CD16 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CD1A 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CD20 6700                       		beq.s	TimeOver	; if yes, branch
0001CD22 5221                       		addq.b	#1,-(a1)
0001CD24 0C11 003C                  		cmpi.b	#60,(a1)
0001CD28 6500                       		bcs.s	Hud_ChkLives
0001CD2A 12BC 0000                  		move.b	#0,(a1)
0001CD2E 5221                       		addq.b	#1,-(a1)
0001CD30 0C11 003C                  		cmpi.b	#60,(a1)
0001CD34 6500                       		bcs.s	loc_1C734
0001CD36 12BC 0000                  		move.b	#0,(a1)
0001CD3A 5221                       		addq.b	#1,-(a1)
0001CD3C 0C11 0009                  		cmpi.b	#9,(a1)
0001CD40 6500                       		bcs.s	loc_1C734
0001CD42 12BC 0009                  		move.b	#9,(a1)
0001CD46                            
0001CD46                            loc_1C734:
0001CD46 203C 5E40 0003             		move.l	#$5E400003,d0
0001CD4C 7200                       		moveq	#0,d1
0001CD4E 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CD52 6100 0000                  		bsr.w	Hud_Mins
0001CD56 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CD5C 7200                       		moveq	#0,d1
0001CD5E 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CD62 6100 0000                  		bsr.w	Hud_Secs
0001CD66                            
0001CD66                            Hud_ChkLives:
0001CD66 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CD6A 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CD6C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CD70 6100 0000                  		bsr.w	Hud_Lives
0001CD74                            
0001CD74                            Hud_ChkBonus:
0001CD74 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CD78 6700                       		beq.s	Hud_End		; if not, branch
0001CD7A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CD7E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CD88 7200                       		moveq	#0,d1
0001CD8A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CD8E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD92 7200                       		moveq	#0,d1
0001CD94 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CD98 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD9C                            
0001CD9C                            Hud_End:
0001CD9C 4E75                       		rts	
0001CD9E                            ; ===========================================================================
0001CD9E                            
0001CD9E                            TimeOver:				; XREF: Hud_ChkTime
0001CD9E 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CDA2 41F8 D000                  		lea	($FFFFD000).w,a0
0001CDA6 2448                       		movea.l	a0,a2
0001CDA8 6100 E908                  		bsr.w	KillSonic
0001CDAC 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CDB2 4E75                       		rts	
0001CDB4                            ; ===========================================================================
0001CDB4                            
0001CDB4                            HudDebug:				; XREF: HudUpdate
0001CDB4 6100 0000                  		bsr.w	HudDb_XY
0001CDB8 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CDBC 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CDBE 6A00                       		bpl.s	HudDb_Rings
0001CDC0 6100 0000                  		bsr.w	Hud_LoadZero
0001CDC4                            
0001CDC4                            HudDb_Rings:
0001CDC4 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CDC8 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CDCE 7200                       		moveq	#0,d1
0001CDD0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CDD4 6100 0000                  		bsr.w	Hud_Rings
0001CDD8                            
0001CDD8                            HudDb_ObjCount:
0001CDD8 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CDDE 7200                       		moveq	#0,d1
0001CDE0 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CDE4 6100 0000                  		bsr.w	Hud_Secs
0001CDE8 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CDEC 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CDEE 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CDF2 6100 0000                  		bsr.w	Hud_Lives
0001CDF6                            
0001CDF6                            HudDb_ChkBonus:
0001CDF6 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CDFA 6700                       		beq.s	HudDb_End	; if not, branch
0001CDFC 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CE00 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CE0A 7200                       		moveq	#0,d1
0001CE0C 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CE10 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE14 7200                       		moveq	#0,d1
0001CE16 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CE1A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE1E                            
0001CE1E                            HudDb_End:
0001CE1E 4E75                       		rts	
0001CE20                            ; End of function HudUpdate
0001CE20                            
0001CE20                            ; ---------------------------------------------------------------------------
0001CE20                            ; Subroutine to	load "0" on the	HUD
0001CE20                            ; ---------------------------------------------------------------------------
0001CE20                            
0001CE20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE20                            
0001CE20                            
0001CE20                            Hud_LoadZero:				; XREF: HudUpdate
0001CE20 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CE2A 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CE2E 343C 0002                  		move.w	#2,d2
0001CE32 6000                       		bra.s	loc_1C83E
0001CE34                            ; End of function Hud_LoadZero
0001CE34                            
0001CE34                            ; ---------------------------------------------------------------------------
0001CE34                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CE34                            ; ---------------------------------------------------------------------------
0001CE34                            
0001CE34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE34                            
0001CE34                            
0001CE34                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CE34 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CE3A 6100 0000                  		bsr.w	Hud_Lives
0001CE3E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CE48 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CE4C 343C 000E                  		move.w	#$E,d2
0001CE50                            
0001CE50                            loc_1C83E:				; XREF: Hud_LoadZero
0001CE50 43FA 0000                  		lea	Art_Hud(pc),a1
0001CE54                            
0001CE54                            loc_1C842:
0001CE54 323C 000F                  		move.w	#$F,d1
0001CE58 101A                       		move.b	(a2)+,d0
0001CE5A 6B00                       		bmi.s	loc_1C85E
0001CE5C 4880                       		ext.w	d0
0001CE5E EB48                       		lsl.w	#5,d0
0001CE60 47F1 0000                  		lea	(a1,d0.w),a3
0001CE64                            
0001CE64                            loc_1C852:
0001CE64 2C9B                       		move.l	(a3)+,(a6)
0001CE66 51C9 FFFC                  		dbf	d1,loc_1C852
0001CE6A                            
0001CE6A                            loc_1C858:
0001CE6A 51CA FFE8                  		dbf	d2,loc_1C842
0001CE6E                            
0001CE6E 4E75                       		rts	
0001CE70                            ; ===========================================================================
0001CE70                            
0001CE70                            loc_1C85E:
0001CE70 2CBC 0000 0000             		move.l	#0,(a6)
0001CE76 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CE7A                            
0001CE7A 60EE                       		bra.s	loc_1C858
0001CE7C                            ; End of function Hud_Base
0001CE7C                            
0001CE7C                            ; ===========================================================================
0001CE7C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CE88 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CE8C                            ; ---------------------------------------------------------------------------
0001CE8C                            ; Subroutine to	load debug mode	numbers	patterns
0001CE8C                            ; ---------------------------------------------------------------------------
0001CE8C                            
0001CE8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE8C                            
0001CE8C                            
0001CE8C                            HudDb_XY:				; XREF: HudDebug
0001CE8C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CE96 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CE9A 4841                       		swap	d1
0001CE9C 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CEA0 6100                       		bsr.s	HudDb_XY2
0001CEA2 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CEA6 4841                       		swap	d1
0001CEA8 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CEAC                            ; End of function HudDb_XY
0001CEAC                            
0001CEAC                            
0001CEAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEAC                            
0001CEAC                            
0001CEAC                            HudDb_XY2:
0001CEAC 7C07                       		moveq	#7,d6
0001CEAE 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001CEB4                            
0001CEB4                            HudDb_XYLoop:
0001CEB4 E959                       		rol.w	#4,d1
0001CEB6 3401                       		move.w	d1,d2
0001CEB8 0242 000F                  		andi.w	#$F,d2
0001CEBC 0C42 000A                  		cmpi.w	#$A,d2
0001CEC0 6500                       		bcs.s	loc_1C8B2
0001CEC2 5E42                       		addq.w	#7,d2
0001CEC4                            
0001CEC4                            loc_1C8B2:
0001CEC4 EB4A                       		lsl.w	#5,d2
0001CEC6 47F1 2000                  		lea	(a1,d2.w),a3
0001CECA 2C9B                       		move.l	(a3)+,(a6)
0001CECC 2C9B                       		move.l	(a3)+,(a6)
0001CECE 2C9B                       		move.l	(a3)+,(a6)
0001CED0 2C9B                       		move.l	(a3)+,(a6)
0001CED2 2C9B                       		move.l	(a3)+,(a6)
0001CED4 2C9B                       		move.l	(a3)+,(a6)
0001CED6 2C9B                       		move.l	(a3)+,(a6)
0001CED8 2C9B                       		move.l	(a3)+,(a6)
0001CEDA 4841                       		swap	d1
0001CEDC 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CEE0                            
0001CEE0 4E75                       		rts	
0001CEE2                            ; End of function HudDb_XY2
0001CEE2                            
0001CEE2                            ; ---------------------------------------------------------------------------
0001CEE2                            ; Subroutine to	load rings numbers patterns
0001CEE2                            ; ---------------------------------------------------------------------------
0001CEE2                            
0001CEE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEE2                            
0001CEE2                            
0001CEE2                            Hud_Rings:				; XREF: HudUpdate
0001CEE2 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CEE8 7C02                       		moveq	#2,d6
0001CEEA 6000                       		bra.s	Hud_LoadArt
0001CEEC                            ; End of function Hud_Rings
0001CEEC                            
0001CEEC                            ; ---------------------------------------------------------------------------
0001CEEC                            ; Subroutine to	load score numbers patterns
0001CEEC                            ; ---------------------------------------------------------------------------
0001CEEC                            
0001CEEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEEC                            
0001CEEC                            
0001CEEC                            Hud_Score:				; XREF: HudUpdate
0001CEEC 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CEF2 7C05                       		moveq	#5,d6
0001CEF4                            
0001CEF4                            Hud_LoadArt:
0001CEF4 7800                       		moveq	#0,d4
0001CEF6 43FA 0000                  		lea	Art_Hud(pc),a1
0001CEFA                            
0001CEFA                            Hud_ScoreLoop:
0001CEFA 7400                       		moveq	#0,d2
0001CEFC 261A                       		move.l	(a2)+,d3
0001CEFE                            
0001CEFE                            loc_1C8EC:
0001CEFE 9283                       		sub.l	d3,d1
0001CF00 6500                       		bcs.s	loc_1C8F4
0001CF02 5242                       		addq.w	#1,d2
0001CF04 60F8                       		bra.s	loc_1C8EC
0001CF06                            ; ===========================================================================
0001CF06                            
0001CF06                            loc_1C8F4:
0001CF06 D283                       		add.l	d3,d1
0001CF08 4A42                       		tst.w	d2
0001CF0A 6700                       		beq.s	loc_1C8FE
0001CF0C 383C 0001                  		move.w	#1,d4
0001CF10                            
0001CF10                            loc_1C8FE:
0001CF10 4A44                       		tst.w	d4
0001CF12 6700                       		beq.s	loc_1C92C
0001CF14 ED4A                       		lsl.w	#6,d2
0001CF16 2D40 0004                  		move.l	d0,4(a6)
0001CF1A 47F1 2000                  		lea	(a1,d2.w),a3
0001CF1E 2C9B                       		move.l	(a3)+,(a6)
0001CF20 2C9B                       		move.l	(a3)+,(a6)
0001CF22 2C9B                       		move.l	(a3)+,(a6)
0001CF24 2C9B                       		move.l	(a3)+,(a6)
0001CF26 2C9B                       		move.l	(a3)+,(a6)
0001CF28 2C9B                       		move.l	(a3)+,(a6)
0001CF2A 2C9B                       		move.l	(a3)+,(a6)
0001CF2C 2C9B                       		move.l	(a3)+,(a6)
0001CF2E 2C9B                       		move.l	(a3)+,(a6)
0001CF30 2C9B                       		move.l	(a3)+,(a6)
0001CF32 2C9B                       		move.l	(a3)+,(a6)
0001CF34 2C9B                       		move.l	(a3)+,(a6)
0001CF36 2C9B                       		move.l	(a3)+,(a6)
0001CF38 2C9B                       		move.l	(a3)+,(a6)
0001CF3A 2C9B                       		move.l	(a3)+,(a6)
0001CF3C 2C9B                       		move.l	(a3)+,(a6)
0001CF3E                            
0001CF3E                            loc_1C92C:
0001CF3E 0680 0040 0000             		addi.l	#$400000,d0
0001CF44 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CF48                            
0001CF48 4E75                       		rts	
0001CF4A                            ; End of function Hud_Score
0001CF4A                            
0001CF4A                            ; ---------------------------------------------------------------------------
0001CF4A                            ; Subroutine to	load countdown numbers on the continue screen
0001CF4A                            ; ---------------------------------------------------------------------------
0001CF4A                            
0001CF4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF4A                            
0001CF4A                            
0001CF4A                            ContScrCounter:				; XREF: ContinueScreen
0001CF4A 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CF54 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CF5A 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CF60 7C01                       		moveq	#1,d6
0001CF62 7800                       		moveq	#0,d4
0001CF64 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CF68                            
0001CF68                            ContScr_Loop:
0001CF68 7400                       		moveq	#0,d2
0001CF6A 261A                       		move.l	(a2)+,d3
0001CF6C                            
0001CF6C                            loc_1C95A:
0001CF6C 9283                       		sub.l	d3,d1
0001CF6E 6500                       		bcs.s	loc_1C962
0001CF70 5242                       		addq.w	#1,d2
0001CF72 60F8                       		bra.s	loc_1C95A
0001CF74                            ; ===========================================================================
0001CF74                            
0001CF74                            loc_1C962:
0001CF74 D283                       		add.l	d3,d1
0001CF76 ED4A                       		lsl.w	#6,d2
0001CF78 47F1 2000                  		lea	(a1,d2.w),a3
0001CF7C 2C9B                       		move.l	(a3)+,(a6)
0001CF7E 2C9B                       		move.l	(a3)+,(a6)
0001CF80 2C9B                       		move.l	(a3)+,(a6)
0001CF82 2C9B                       		move.l	(a3)+,(a6)
0001CF84 2C9B                       		move.l	(a3)+,(a6)
0001CF86 2C9B                       		move.l	(a3)+,(a6)
0001CF88 2C9B                       		move.l	(a3)+,(a6)
0001CF8A 2C9B                       		move.l	(a3)+,(a6)
0001CF8C 2C9B                       		move.l	(a3)+,(a6)
0001CF8E 2C9B                       		move.l	(a3)+,(a6)
0001CF90 2C9B                       		move.l	(a3)+,(a6)
0001CF92 2C9B                       		move.l	(a3)+,(a6)
0001CF94 2C9B                       		move.l	(a3)+,(a6)
0001CF96 2C9B                       		move.l	(a3)+,(a6)
0001CF98 2C9B                       		move.l	(a3)+,(a6)
0001CF9A 2C9B                       		move.l	(a3)+,(a6)
0001CF9C 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CFA0                            
0001CFA0 4E75                       		rts	
0001CFA2                            ; End of function ContScrCounter
0001CFA2                            
0001CFA2                            ; ===========================================================================
0001CFA2                            ; ---------------------------------------------------------------------------
0001CFA2                            ; HUD counter sizes
0001CFA2                            ; ---------------------------------------------------------------------------
0001CFA2 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CFA6 0000 2710                  Hud_10000:	dc.l 10000
0001CFAA 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CFAE 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CFB2 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CFB6 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CFBA                            
0001CFBA                            ; ---------------------------------------------------------------------------
0001CFBA                            ; Subroutine to	load time numbers patterns
0001CFBA                            ; ---------------------------------------------------------------------------
0001CFBA                            
0001CFBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFBA                            
0001CFBA                            
0001CFBA                            Hud_Mins:				; XREF: Hud_ChkTime
0001CFBA 45F9 0001 CFB6             		lea	(Hud_1).l,a2
0001CFC0 7C00                       		moveq	#0,d6
0001CFC2 6000                       		bra.s	loc_1C9BA
0001CFC4                            ; End of function Hud_Mins
0001CFC4                            
0001CFC4                            
0001CFC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFC4                            
0001CFC4                            
0001CFC4                            Hud_Secs:				; XREF: Hud_ChkTime
0001CFC4 45F9 0001 CFB2             		lea	(Hud_10).l,a2
0001CFCA 7C01                       		moveq	#1,d6
0001CFCC                            
0001CFCC                            loc_1C9BA:
0001CFCC 7800                       		moveq	#0,d4
0001CFCE 43FA 0000                  		lea	Art_Hud(pc),a1
0001CFD2                            
0001CFD2                            Hud_TimeLoop:
0001CFD2 7400                       		moveq	#0,d2
0001CFD4 261A                       		move.l	(a2)+,d3
0001CFD6                            
0001CFD6                            loc_1C9C4:
0001CFD6 9283                       		sub.l	d3,d1
0001CFD8 6500                       		bcs.s	loc_1C9CC
0001CFDA 5242                       		addq.w	#1,d2
0001CFDC 60F8                       		bra.s	loc_1C9C4
0001CFDE                            ; ===========================================================================
0001CFDE                            
0001CFDE                            loc_1C9CC:
0001CFDE D283                       		add.l	d3,d1
0001CFE0 4A42                       		tst.w	d2
0001CFE2 6700                       		beq.s	loc_1C9D6
0001CFE4 383C 0001                  		move.w	#1,d4
0001CFE8                            
0001CFE8                            loc_1C9D6:
0001CFE8 ED4A                       		lsl.w	#6,d2
0001CFEA 2D40 0004                  		move.l	d0,4(a6)
0001CFEE 47F1 2000                  		lea	(a1,d2.w),a3
0001CFF2 2C9B                       		move.l	(a3)+,(a6)
0001CFF4 2C9B                       		move.l	(a3)+,(a6)
0001CFF6 2C9B                       		move.l	(a3)+,(a6)
0001CFF8 2C9B                       		move.l	(a3)+,(a6)
0001CFFA 2C9B                       		move.l	(a3)+,(a6)
0001CFFC 2C9B                       		move.l	(a3)+,(a6)
0001CFFE 2C9B                       		move.l	(a3)+,(a6)
0001D000 2C9B                       		move.l	(a3)+,(a6)
0001D002 2C9B                       		move.l	(a3)+,(a6)
0001D004 2C9B                       		move.l	(a3)+,(a6)
0001D006 2C9B                       		move.l	(a3)+,(a6)
0001D008 2C9B                       		move.l	(a3)+,(a6)
0001D00A 2C9B                       		move.l	(a3)+,(a6)
0001D00C 2C9B                       		move.l	(a3)+,(a6)
0001D00E 2C9B                       		move.l	(a3)+,(a6)
0001D010 2C9B                       		move.l	(a3)+,(a6)
0001D012 0680 0040 0000             		addi.l	#$400000,d0
0001D018 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D01C                            
0001D01C 4E75                       		rts	
0001D01E                            ; End of function Hud_Secs
0001D01E                            
0001D01E                            ; ---------------------------------------------------------------------------
0001D01E                            ; Subroutine to	load time/ring bonus numbers patterns
0001D01E                            ; ---------------------------------------------------------------------------
0001D01E                            
0001D01E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D01E                            
0001D01E                            
0001D01E                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D01E 45F9 0001 CFAA             		lea	(Hud_1000).l,a2
0001D024 7C03                       		moveq	#3,d6
0001D026 7800                       		moveq	#0,d4
0001D028 43FA 0000                  		lea	Art_Hud(pc),a1
0001D02C                            
0001D02C                            Hud_BonusLoop:
0001D02C 7400                       		moveq	#0,d2
0001D02E 261A                       		move.l	(a2)+,d3
0001D030                            
0001D030                            loc_1CA1E:
0001D030 9283                       		sub.l	d3,d1
0001D032 6500                       		bcs.s	loc_1CA26
0001D034 5242                       		addq.w	#1,d2
0001D036 60F8                       		bra.s	loc_1CA1E
0001D038                            ; ===========================================================================
0001D038                            
0001D038                            loc_1CA26:
0001D038 D283                       		add.l	d3,d1
0001D03A 4A42                       		tst.w	d2
0001D03C 6700                       		beq.s	loc_1CA30
0001D03E 383C 0001                  		move.w	#1,d4
0001D042                            
0001D042                            loc_1CA30:
0001D042 4A44                       		tst.w	d4
0001D044 6700                       		beq.s	Hud_ClrBonus
0001D046 ED4A                       		lsl.w	#6,d2
0001D048 47F1 2000                  		lea	(a1,d2.w),a3
0001D04C 2C9B                       		move.l	(a3)+,(a6)
0001D04E 2C9B                       		move.l	(a3)+,(a6)
0001D050 2C9B                       		move.l	(a3)+,(a6)
0001D052 2C9B                       		move.l	(a3)+,(a6)
0001D054 2C9B                       		move.l	(a3)+,(a6)
0001D056 2C9B                       		move.l	(a3)+,(a6)
0001D058 2C9B                       		move.l	(a3)+,(a6)
0001D05A 2C9B                       		move.l	(a3)+,(a6)
0001D05C 2C9B                       		move.l	(a3)+,(a6)
0001D05E 2C9B                       		move.l	(a3)+,(a6)
0001D060 2C9B                       		move.l	(a3)+,(a6)
0001D062 2C9B                       		move.l	(a3)+,(a6)
0001D064 2C9B                       		move.l	(a3)+,(a6)
0001D066 2C9B                       		move.l	(a3)+,(a6)
0001D068 2C9B                       		move.l	(a3)+,(a6)
0001D06A 2C9B                       		move.l	(a3)+,(a6)
0001D06C                            
0001D06C                            loc_1CA5A:
0001D06C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D070                            
0001D070 4E75                       		rts	
0001D072                            ; ===========================================================================
0001D072                            
0001D072                            Hud_ClrBonus:
0001D072 7A0F                       		moveq	#$F,d5
0001D074                            
0001D074                            Hud_ClrBonusLoop:
0001D074 2CBC 0000 0000             		move.l	#0,(a6)
0001D07A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D07E                            
0001D07E 60EC                       		bra.s	loc_1CA5A
0001D080                            ; End of function Hud_TimeRingBonus
0001D080                            
0001D080                            ; ---------------------------------------------------------------------------
0001D080                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D080                            ; ---------------------------------------------------------------------------
0001D080                            
0001D080                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D080                            
0001D080                            
0001D080                            Hud_Lives:				; XREF: Hud_ChkLives
0001D080 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D086 7200                       		moveq	#0,d1
0001D088 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D08C 45F9 0001 CFB2             		lea	(Hud_10).l,a2
0001D092 7C01                       		moveq	#1,d6
0001D094 7800                       		moveq	#0,d4
0001D096 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D09A                            
0001D09A                            Hud_LivesLoop:
0001D09A 2D40 0004                  		move.l	d0,4(a6)
0001D09E 7400                       		moveq	#0,d2
0001D0A0 261A                       		move.l	(a2)+,d3
0001D0A2                            
0001D0A2                            loc_1CA90:
0001D0A2 9283                       		sub.l	d3,d1
0001D0A4 6500                       		bcs.s	loc_1CA98
0001D0A6 5242                       		addq.w	#1,d2
0001D0A8 60F8                       		bra.s	loc_1CA90
0001D0AA                            ; ===========================================================================
0001D0AA                            
0001D0AA                            loc_1CA98:
0001D0AA D283                       		add.l	d3,d1
0001D0AC 4A42                       		tst.w	d2
0001D0AE 6700                       		beq.s	loc_1CAA2
0001D0B0 383C 0001                  		move.w	#1,d4
0001D0B4                            
0001D0B4                            loc_1CAA2:
0001D0B4 4A44                       		tst.w	d4
0001D0B6 6700                       		beq.s	Hud_ClrLives
0001D0B8                            
0001D0B8                            loc_1CAA6:
0001D0B8 EB4A                       		lsl.w	#5,d2
0001D0BA 47F1 2000                  		lea	(a1,d2.w),a3
0001D0BE 2C9B                       		move.l	(a3)+,(a6)
0001D0C0 2C9B                       		move.l	(a3)+,(a6)
0001D0C2 2C9B                       		move.l	(a3)+,(a6)
0001D0C4 2C9B                       		move.l	(a3)+,(a6)
0001D0C6 2C9B                       		move.l	(a3)+,(a6)
0001D0C8 2C9B                       		move.l	(a3)+,(a6)
0001D0CA 2C9B                       		move.l	(a3)+,(a6)
0001D0CC 2C9B                       		move.l	(a3)+,(a6)
0001D0CE                            
0001D0CE                            loc_1CABC:
0001D0CE 0680 0040 0000             		addi.l	#$400000,d0
0001D0D4 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D0D8                            
0001D0D8 4E75                       		rts	
0001D0DA                            ; ===========================================================================
0001D0DA                            
0001D0DA                            Hud_ClrLives:
0001D0DA 4A46                       		tst.w	d6
0001D0DC 67DA                       		beq.s	loc_1CAA6
0001D0DE 7A07                       		moveq	#7,d5
0001D0E0                            
0001D0E0                            Hud_ClrLivesLoop:
0001D0E0 2CBC 0000 0000             		move.l	#0,(a6)
0001D0E6 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D0EA 60E2                       		bra.s	loc_1CABC
0001D0EC                            ; End of function Hud_Lives
0001D0EC                            
0001D0EC                            ; ===========================================================================
0001D0EC                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D3EC                            		even
0001D3EC                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D52C                            		even
0001D52C                            ; ===========================================================================
0001D52C                            ; ---------------------------------------------------------------------------
0001D52C                            ; When debug mode is currently in use
0001D52C                            ; ---------------------------------------------------------------------------
0001D52C                            
0001D52C                            DebugMode:				; XREF: Obj01; Obj09
0001D52C 7000                       		moveq	#0,d0
0001D52E 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D532 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D536 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D53A                            ; ===========================================================================
0001D53A 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D53C 0000                       		dc.w Debug_Skip-Debug_Index
0001D53E                            ; ===========================================================================
0001D53E                            
0001D53E                            Debug_Main:				; XREF: Debug_Index
0001D53E 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D542 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D548 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D54E 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D554 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D55A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D560 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D566 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D56C 117C 0000 001A             		move.b	#0,$1A(a0)
0001D572 117C 0000 001C             		move.b	#0,$1C(a0)
0001D578 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D57E 6600                       		bne.s	Debug_Zone	; if not, branch
0001D580 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D586 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D58C 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D58E 6000                       		bra.s	Debug_UseList
0001D590                            ; ===========================================================================
0001D590                            
0001D590                            Debug_Zone:
0001D590 7000                       		moveq	#0,d0
0001D592 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D596                            
0001D596                            Debug_UseList:
0001D596 45F9 0000 0000             		lea	(DebugList).l,a2
0001D59C D040                       		add.w	d0,d0
0001D59E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D5A2 3C1A                       		move.w	(a2)+,d6
0001D5A4 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D5A8 6200                       		bhi.s	loc_1CF9E
0001D5AA 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D5B0                            
0001D5B0                            loc_1CF9E:
0001D5B0 6100 0000                  		bsr.w	Debug_ShowItem
0001D5B4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D5BA 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D5C0                            
0001D5C0                            Debug_Skip:				; XREF: Debug_Index
0001D5C0 7006                       		moveq	#6,d0
0001D5C2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D5C8 6700                       		beq.s	loc_1CFBE
0001D5CA 7000                       		moveq	#0,d0
0001D5CC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D5D0                            
0001D5D0                            loc_1CFBE:
0001D5D0 45F9 0000 0000             		lea	(DebugList).l,a2
0001D5D6 D040                       		add.w	d0,d0
0001D5D8 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D5DC 3C1A                       		move.w	(a2)+,d6
0001D5DE 6100 0000                  		bsr.w	Debug_Control
0001D5E2 4EF9 0000 DB72             		jmp	DisplaySprite
0001D5E8                            
0001D5E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5E8                            
0001D5E8                            
0001D5E8                            Debug_Control:
0001D5E8 7800                       		moveq	#0,d4
0001D5EA 323C 0001                  		move.w	#1,d1
0001D5EE 1838 F605                  		move.b	($FFFFF605).w,d4
0001D5F2 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D5F6 6600                       		bne.s	loc_1D018	; if yes, branch
0001D5F8 1038 F604                  		move.b	($FFFFF604).w,d0
0001D5FC 0240 000F                  		andi.w	#$F,d0
0001D600 6600                       		bne.s	loc_1D000
0001D602 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D608 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D60E 6000 0000                  		bra.w	Debug_BackItem
0001D612                            ; ===========================================================================
0001D612                            
0001D612                            loc_1D000:
0001D612 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D616 6600                       		bne.s	loc_1D01C
0001D618 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D61E 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D622 6600                       		bne.s	loc_1D018
0001D624 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D62A                            
0001D62A                            loc_1D018:
0001D62A 1838 F604                  		move.b	($FFFFF604).w,d4
0001D62E                            
0001D62E                            loc_1D01C:
0001D62E 7200                       		moveq	#0,d1
0001D630 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D634 5241                       		addq.w	#1,d1
0001D636 4841                       		swap	d1
0001D638 E881                       		asr.l	#4,d1
0001D63A 2428 000C                  		move.l	$C(a0),d2
0001D63E 2628 0008                  		move.l	8(a0),d3
0001D642 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D646 6700                       		beq.s	loc_1D03C	; if not, branch
0001D648 9481                       		sub.l	d1,d2
0001D64A 6400                       		bcc.s	loc_1D03C
0001D64C 7400                       		moveq	#0,d2
0001D64E                            
0001D64E                            loc_1D03C:
0001D64E 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D652 6700                       		beq.s	loc_1D052	; if not, branch
0001D654 D481                       		add.l	d1,d2
0001D656 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D65C 6500                       		bcs.s	loc_1D052
0001D65E 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D664                            
0001D664                            loc_1D052:
0001D664 0804 0002                  		btst	#2,d4
0001D668 6700                       		beq.s	loc_1D05E
0001D66A 9681                       		sub.l	d1,d3
0001D66C 6400                       		bcc.s	loc_1D05E
0001D66E 7600                       		moveq	#0,d3
0001D670                            
0001D670                            loc_1D05E:
0001D670 0804 0003                  		btst	#3,d4
0001D674 6700                       		beq.s	loc_1D066
0001D676 D681                       		add.l	d1,d3
0001D678                            
0001D678                            loc_1D066:
0001D678 2142 000C                  		move.l	d2,$C(a0)
0001D67C 2143 0008                  		move.l	d3,8(a0)
0001D680                            
0001D680                            Debug_BackItem:
0001D680 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D686 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D688 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D68E 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D690 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D694 6400                       		bcc.s	Debug_NoLoop
0001D696 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D69A 6000                       		bra.s	Debug_NoLoop
0001D69C                            ; ===========================================================================
0001D69C                            
0001D69C                            Debug_NextItem:
0001D69C 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D6A2 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D6A4 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D6A8 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D6AC 6200                       		bhi.s	Debug_NoLoop
0001D6AE 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D6B4                            
0001D6B4                            Debug_NoLoop:
0001D6B4 6000 0000                  		bra.w	Debug_ShowItem
0001D6B8                            ; ===========================================================================
0001D6B8                            
0001D6B8                            Debug_MakeItem:
0001D6B8 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D6BE 6700                       		beq.s	Debug_Exit	; if not, branch
0001D6C0 4EB9 0000 DFF8             		jsr	SingleObjLoad
0001D6C6 6600                       		bne.s	Debug_Exit
0001D6C8 3368 0008 0008             		move.w	8(a0),8(a1)
0001D6CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D6D4 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D6D8 1368 0001 0001             		move.b	1(a0),1(a1)
0001D6DE 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D6E4 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D6EA 7000                       		moveq	#0,d0
0001D6EC 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D6F0 E748                       		lsl.w	#3,d0
0001D6F2 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D6F8 4E75                       		rts	
0001D6FA                            ; ===========================================================================
0001D6FA                            
0001D6FA                            Debug_Exit:
0001D6FA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D700 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D702 7000                       		moveq	#0,d0
0001D704 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D708 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D710 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D716 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D71A 3140 000A                  		move.w	d0,$A(a0)
0001D71E 3140 000E                  		move.w	d0,$E(a0)
0001D722 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D728 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D72E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D734 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D736 4278 F780                  		clr.w	($FFFFF780).w
0001D73A 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D740 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D748 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D74E 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D754 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D75A 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D760                            
0001D760                            Debug_DoNothing:
0001D760 4E75                       		rts	
0001D762                            ; End of function Debug_Control
0001D762                            
0001D762                            
0001D762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D762                            
0001D762                            
0001D762                            Debug_ShowItem:				; XREF: Debug_Main
0001D762 7000                       		moveq	#0,d0
0001D764 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D768 E748                       		lsl.w	#3,d0
0001D76A 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D770 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D776 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D77C 4E75                       		rts	
0001D77E                            ; End of function Debug_ShowItem
0001D77E                            
0001D77E                            ; ===========================================================================
0001D77E                            ; ---------------------------------------------------------------------------
0001D77E                            ; Debug	list pointers
0001D77E                            ; ---------------------------------------------------------------------------
0001D77E                            DebugList:
0001D77E                            	include "_inc\Debug list pointers.asm"
0001D77E                            ; ---------------------------------------------------------------------------
0001D77E                            ; Debug	list pointers
0001D77E                            ; ---------------------------------------------------------------------------
0001D77E 0000                       	dc.w Debug_GHZ-DebugList
0001D780 0000                       	dc.w Debug_LZ-DebugList
0001D782 0000                       	dc.w Debug_MZ-DebugList
0001D784 0000                       	dc.w Debug_SLZ-DebugList
0001D786 0000                       	dc.w Debug_SYZ-DebugList
0001D788 0000                       	dc.w Debug_SBZ-DebugList
0001D78A 0000                       	dc.w Debug_Ending-DebugList
0001D78A 0000                       	dc.w Debug_Ending-DebugList
0001D78C                            
0001D78C                            ; ---------------------------------------------------------------------------
0001D78C                            ; Debug	list - Green Hill
0001D78C                            ; ---------------------------------------------------------------------------
0001D78C                            Debug_GHZ:
0001D78C                            	include "_inc\Debug list - GHZ.asm"
0001D78C                            ; ---------------------------------------------------------------------------
0001D78C                            ; Debug	list - Green Hill
0001D78C                            ; ---------------------------------------------------------------------------
0001D78C 0010                       	dc.w $10			; number of items in list
0001D78E 2500 A3E0                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D792 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D796 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D79A 0000 0680                  	dc.b 0,	0, 6, $80
0001D79E 1F00 9BD8                  	dc.l Map_obj1F+$1F000000
0001D7A2 0000 0400                  	dc.b 0,	0, 4, 0
0001D7A6 2200 9E94                  	dc.l Map_obj22+$22000000
0001D7AA 0000 0444                  	dc.b 0,	0, 4, $44
0001D7AE 2B00 B05A                  	dc.l Map_obj2B+$2B000000
0001D7B2 0000 047B                  	dc.b 0,	0, 4, $7B
0001D7B6 3600 D55A                  	dc.l Map_obj36+$36000000
0001D7BA 0000 051B                  	dc.b 0,	0, 5, $1B
0001D7BE 1800 8586                  	dc.l Map_obj18+$18000000
0001D7C2 0000 4000                  	dc.b 0,	0, $40,	0
0001D7C6 3B00 D680                  	dc.l Map_obj3B+$3B000000
0001D7CA 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D7CE 4000 FD0C                  	dc.l Map_obj40+$40000000
0001D7D2 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D7D6 4100 E286                  	dc.l Map_obj41+$41000000
0001D7DA 0000 0523                  	dc.b 0,	0, 5, $23
0001D7DE 4200 E4AC                  	dc.l Map_obj42+$42000000
0001D7E2 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D7E6 4400 E7BA                  	dc.l Map_obj44+$44000000
0001D7EA 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D7EE 1900 85F4                  	dc.l Map_obj48+$19000000
0001D7F2 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D7F6 7901 76F4                  	dc.l Map_obj79+$79000000
0001D7FA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D7FE 4B00 A420                  	dc.l Map_obj4B+$4B000000
0001D802 0000 2400                  	dc.b 0,	0, $24,	0
0001D806 7D01 7844                  	dc.l Map_obj7D+$7D000000
0001D80A 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D80E                            	even
0001D80E                            	even
0001D80E                            
0001D80E                            ; ---------------------------------------------------------------------------
0001D80E                            ; Debug	list - Labyrinth
0001D80E                            ; ---------------------------------------------------------------------------
0001D80E                            Debug_LZ:
0001D80E                            	include "_inc\Debug list - LZ.asm"
0001D80E                            ; ---------------------------------------------------------------------------
0001D80E                            ; Debug	list - Labyrinth
0001D80E                            ; ---------------------------------------------------------------------------
0001D80E 0019                       	dc.w $19
0001D810 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D814 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D818 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D81C 0000 0680                  	dc.b 0,	0, 6, $80
0001D820 4100 E286                  	dc.l Map_obj41+$41000000
0001D824 0000 0523                  	dc.b 0,	0, 5, $23
0001D828 2C00 B100                  	dc.l Map_obj2C+$2C000000
0001D82C 0800 2486                  	dc.b 8,	0, $24,	$86
0001D830 2D00 B2F4                  	dc.l Map_obj2D+$2D000000
0001D834 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D838 1601 24E0                  	dc.l Map_obj16+$16000000
0001D83C 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D840 1601 24E0                  	dc.l Map_obj16+$16000000
0001D844 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D848 3300 C7A6                  	dc.l Map_obj33+$33000000
0001D84C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D850 3200 C366                  	dc.l Map_obj32+$32000000
0001D854 0000 0513                  	dc.b 0,	0, 5, $13
0001D858 3600 D55A                  	dc.l Map_obj36+$36000000
0001D85C 0000 051B                  	dc.b 0,	0, 5, $1B
0001D860 5201 0602                  	dc.l Map_obj52a+$52000000
0001D864 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D868 6101 2708                  	dc.l Map_obj61+$61000000
0001D86C 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D870 6101 2708                  	dc.l Map_obj61+$61000000
0001D874 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D878 6101 2708                  	dc.l Map_obj61+$61000000
0001D87C 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D880 6201 285C                  	dc.l Map_obj62+$62000000
0001D884 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D888 6101 2708                  	dc.l Map_obj61+$61000000
0001D88C 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D890 6101 2708                  	dc.l Map_obj61+$61000000
0001D894 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D898 6301 2BBE                  	dc.l Map_obj63+$63000000
0001D89C 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D8A0 6001 242A                  	dc.l Map_obj60+$60000000
0001D8A4 0000 0467                  	dc.b 0,	0, 4, $67
0001D8A8 6401 2F04                  	dc.l Map_obj64+$64000000
0001D8AC 8413 8348                  	dc.b $84, $13, $83, $48
0001D8B0 6501 308C                  	dc.l Map_obj65+$65000000
0001D8B4 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D8B8 6501 308C                  	dc.l Map_obj65+$65000000
0001D8BC 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D8C0 0B01 187A                  	dc.l Map_obj0B+$B000000
0001D8C4 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D8C8 0C01 194A                  	dc.l Map_obj0C+$C000000
0001D8CC 0200 4328                  	dc.b 2,	0, $43,	$28
0001D8D0 7901 76F4                  	dc.l Map_obj79+$79000000
0001D8D4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D8D8                            	even
0001D8D8                            	even
0001D8D8                            
0001D8D8                            ; ---------------------------------------------------------------------------
0001D8D8                            ; Debug	list - Marble
0001D8D8                            ; ---------------------------------------------------------------------------
0001D8D8                            Debug_MZ:
0001D8D8                            	include "_inc\Debug list - MZ.asm"
0001D8D8                            ; ---------------------------------------------------------------------------
0001D8D8                            ; Debug	list - Marble
0001D8D8                            ; ---------------------------------------------------------------------------
0001D8D8 0012                       	dc.w $12
0001D8DA 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D8DE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D8E2 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D8E6 0000 0680                  	dc.b 0,	0, 6, $80
0001D8EA 2200 9E94                  	dc.l Map_obj22+$22000000
0001D8EE 0000 0444                  	dc.b 0,	0, 4, $44
0001D8F2 3600 D55A                  	dc.l Map_obj36+$36000000
0001D8F6 0000 051B                  	dc.b 0,	0, 5, $1B
0001D8FA 4100 E286                  	dc.l Map_obj41+$41000000
0001D8FE 0000 0523                  	dc.b 0,	0, 5, $23
0001D902 1300 B836                  	dc.l Map_obj14+$13000000
0001D906 0000 0345                  	dc.b 0,	0, 3, $45
0001D90A 4600 EE6C                  	dc.l Map_obj46+$46000000
0001D90E 0000 4000                  	dc.b 0,	0, $40,	0
0001D912 4C00 F7B8                  	dc.l Map_obj4C+$4C000000
0001D916 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D91A 4E00 FA9C                  	dc.l Map_obj4E+$4E000000
0001D91E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D922 3300 C7A6                  	dc.l Map_obj33+$33000000
0001D926 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D92A 5000 FE9A                  	dc.l Map_obj50+$50000000
0001D92E 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D932 5101 0336                  	dc.l Map_obj51+$51000000
0001D936 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D93A 5201 05AC                  	dc.l Map_obj52+$52000000
0001D93E 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D942 5300 8B8C                  	dc.l Map_obj53+$53000000
0001D946 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D94A 5400 F77E                  	dc.l Map_obj54+$54000000
0001D94E 0000 8680                  	dc.b 0,	0, $86,	$80
0001D952 5501 07A0                  	dc.l Map_obj55+$55000000
0001D956 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D95A 7801 736E                  	dc.l Map_obj78+$78000000
0001D95E 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D962 7901 76F4                  	dc.l Map_obj79+$79000000
0001D966 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D96A                            	even
0001D96A                            	even
0001D96A                            
0001D96A                            ; ---------------------------------------------------------------------------
0001D96A                            ; Debug	list - Star Light
0001D96A                            ; ---------------------------------------------------------------------------
0001D96A                            Debug_SLZ:
0001D96A                            	include "_inc\Debug list - SLZ.asm"
0001D96A                            ; ---------------------------------------------------------------------------
0001D96A                            ; Debug	list - Star Light
0001D96A                            ; ---------------------------------------------------------------------------
0001D96A 000F                       	dc.w $F
0001D96C 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D970 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D974 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D978 0000 0680                  	dc.b 0,	0, 6, $80
0001D97C 5901 12A2                  	dc.l Map_obj59+$59000000
0001D980 0000 4000                  	dc.b 0,	0, $40,	0
0001D984 5300 8B8C                  	dc.l Map_obj53+$53000000
0001D988 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D98C 1800 85E4                  	dc.l Map_obj18b+$18000000
0001D990 0000 4000                  	dc.b 0,	0, $40,	0
0001D994 5A01 13DC                  	dc.l Map_obj5A+$5A000000
0001D998 0000 4000                  	dc.b 0,	0, $40,	0
0001D99C 5B01 1594                  	dc.l Map_obj5B+$5B000000
0001D9A0 0000 4000                  	dc.b 0,	0, $40,	0
0001D9A4 5D01 1B64                  	dc.l Map_obj5D+$5D000000
0001D9A8 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D9AC 5E01 1EF6                  	dc.l Map_obj5E+$5E000000
0001D9B0 0000 0374                  	dc.b 0,	0, 3, $74
0001D9B4 4100 E286                  	dc.l Map_obj41+$41000000
0001D9B8 0000 0523                  	dc.b 0,	0, 5, $23
0001D9BC 1300 B836                  	dc.l Map_obj14+$13000000
0001D9C0 0000 0480                  	dc.b 0,	0, 4, $80
0001D9C4 1C00 8C9C                  	dc.l Map_obj1C+$1C000000
0001D9C8 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D9CC 5F01 2174                  	dc.l Map_obj5F+$5F000000
0001D9D0 0000 0400                  	dc.b 0,	0, 4, 0
0001D9D4 6001 242A                  	dc.l Map_obj60+$60000000
0001D9D8 0000 2429                  	dc.b 0,	0, $24,	$29
0001D9DC 7901 76F4                  	dc.l Map_obj79+$79000000
0001D9E0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D9E4                            	even
0001D9E4                            	even
0001D9E4                            
0001D9E4                            ; ---------------------------------------------------------------------------
0001D9E4                            ; Debug	list - Spring Yard
0001D9E4                            ; ---------------------------------------------------------------------------
0001D9E4                            Debug_SYZ:
0001D9E4                            	include "_inc\Debug list - SYZ.asm"
0001D9E4                            ; ---------------------------------------------------------------------------
0001D9E4                            ; Debug	list - Spring Yard
0001D9E4                            ; ---------------------------------------------------------------------------
0001D9E4 000F                       	dc.w $F
0001D9E6 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D9EA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D9EE 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D9F2 0000 0680                  	dc.b 0,	0, 6, $80
0001D9F6 3600 D55A                  	dc.l Map_obj36+$36000000
0001D9FA 0000 051B                  	dc.b 0,	0, 5, $1B
0001D9FE 4100 E286                  	dc.l Map_obj41+$41000000
0001DA02 0000 0523                  	dc.b 0,	0, 5, $23
0001DA06 4300 E70C                  	dc.l Map_obj43+$43000000
0001DA0A 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DA0E 1200 EEEA                  	dc.l Map_obj12+$12000000
0001DA12 0000 0000                  	dc.b 0,	0, 0, 0
0001DA16 4700 F066                  	dc.l Map_obj47+$47000000
0001DA1A 0000 0380                  	dc.b 0,	0, 3, $80
0001DA1E 1F00 9BD8                  	dc.l Map_obj1F+$1F000000
0001DA22 0000 0400                  	dc.b 0,	0, 4, 0
0001DA26 2200 9E94                  	dc.l Map_obj22+$22000000
0001DA2A 0000 0444                  	dc.b 0,	0, 4, $44
0001DA2E 5000 FE9A                  	dc.l Map_obj50+$50000000
0001DA32 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DA36 1800 85D2                  	dc.l Map_obj18a+$18000000
0001DA3A 0000 4000                  	dc.b 0,	0, $40,	0
0001DA3E 5601 0C62                  	dc.l Map_obj56+$56000000
0001DA42 0000 4000                  	dc.b 0,	0, $40,	0
0001DA46 3200 C366                  	dc.l Map_obj32+$32000000
0001DA4A 0000 0513                  	dc.b 0,	0, 5, $13
0001DA4E 7801 736E                  	dc.l Map_obj78+$78000000
0001DA52 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DA56 7901 76F4                  	dc.l Map_obj79+$79000000
0001DA5A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA5E                            	even
0001DA5E                            	even
0001DA5E                            
0001DA5E                            ; ---------------------------------------------------------------------------
0001DA5E                            ; Debug	list - Scrap Brain
0001DA5E                            ; ---------------------------------------------------------------------------
0001DA5E                            Debug_SBZ:
0001DA5E                            	include "_inc\Debug list - SBZ.asm"
0001DA5E                            ; ---------------------------------------------------------------------------
0001DA5E                            ; Debug	list - Scrap Brain
0001DA5E                            ; ---------------------------------------------------------------------------
0001DA5E 001D                       	dc.w $1D
0001DA60 2500 A3E0                  	dc.l Map_obj25+$25000000
0001DA64 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA68 2600 A9E6                  	dc.l Map_obj26+$26000000
0001DA6C 0000 0680                  	dc.b 0,	0, 6, $80
0001DA70 5F01 2174                  	dc.l Map_obj5F+$5F000000
0001DA74 0000 0400                  	dc.b 0,	0, 4, 0
0001DA78 6001 242A                  	dc.l Map_obj60+$60000000
0001DA7C 0000 0429                  	dc.b 0,	0, 4, $29
0001DA80 7801 736E                  	dc.l Map_obj78+$78000000
0001DA84 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DA88 1501 0FFE                  	dc.l Map_obj15b+$15000000
0001DA8C 0702 4391                  	dc.b 7,	2, $43,	$91
0001DA90 6701 5C82                  	dc.l Map_obj67+$67000000
0001DA94 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DA98 5201 05AC                  	dc.l Map_obj52+$52000000
0001DA9C 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DAA0 3200 C366                  	dc.l Map_obj32+$32000000
0001DAA4 0000 0513                  	dc.b 0,	0, 5, $13
0001DAA8 6901 5EDC                  	dc.l Map_obj69+$69000000
0001DAAC 0300 4492                  	dc.b 3,	0, $44,	$92
0001DAB0 6901 5F36                  	dc.l Map_obj69a+$69000000
0001DAB4 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DAB8 6A01 6194                  	dc.l Map_obj6A+$6A000000
0001DABC 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DAC0 5300 8B8C                  	dc.l Map_obj53+$53000000
0001DAC4 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DAC8 5201 05AC                  	dc.l Map_obj52+$52000000
0001DACC 3903 4460                  	dc.b $39, 3, $44, $60
0001DAD0 6B01 6564                  	dc.l Map_obj6B+$6B000000
0001DAD4 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DAD8 2A00 8E32                  	dc.l Map_obj2A+$2A000000
0001DADC 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DAE0 6B01 6564                  	dc.l Map_obj6B+$6B000000
0001DAE4 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DAE8 6A01 6194                  	dc.l Map_obj6A+$6A000000
0001DAEC 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DAF0 6B01 6564                  	dc.l Map_obj6B+$6B000000
0001DAF4 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DAF8 6A01 6194                  	dc.l Map_obj6A+$6A000000
0001DAFC 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DB00 6B01 6564                  	dc.l Map_obj6B+$6B000000
0001DB04 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DB08 6C01 6726                  	dc.l Map_obj6C+$6C000000
0001DB0C 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DB10 6D00 EB5C                  	dc.l Map_obj6D+$6D000000
0001DB14 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DB18 6D00 EB5C                  	dc.l Map_obj6D+$6D000000
0001DB1C 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DB20 6E01 67DC                  	dc.l Map_obj6E+$6E000000
0001DB24 0400 047E                  	dc.b 4,	0, 4, $7E
0001DB28 7001 6C32                  	dc.l Map_obj70+$70000000
0001DB2C 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DB30 7101 1A0A                  	dc.l Map_obj71+$71000000
0001DB34 1100 8680                  	dc.b $11, 0, $86, $80
0001DB38 1E00 92F0                  	dc.l Map_obj1E+$1E000000
0001DB3C 0400 2302                  	dc.b 4,	0, $23,	2
0001DB40 7901 76F4                  	dc.l Map_obj79+$79000000
0001DB44 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB48                            	even
0001DB48                            	even
0001DB48                            
0001DB48                            ; ---------------------------------------------------------------------------
0001DB48                            ; Debug	list - ending sequence / special stage
0001DB48                            ; ---------------------------------------------------------------------------
0001DB48                            Debug_Ending:
0001DB48                            	include "_inc\Debug list - Ending and SS.asm"
0001DB48                            ; ---------------------------------------------------------------------------
0001DB48                            ; Debug	list - ending sequence / special stage
0001DB48                            ; ---------------------------------------------------------------------------
0001DB48 000D                       	dc.w $D
0001DB4A 2500 A3E0                  	dc.l Map_obj25+$25000000
0001DB4E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB52 4700 F066                  	dc.l Map_obj47+$47000000
0001DB56 0000 0380                  	dc.b 0,	0, 3, $80
0001DB5A 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB5E 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DB62 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB66 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DB6A 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB6E 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DB72 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB76 0D00 0553                  	dc.b $D, 0, 5, $53
0001DB7A 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB7E 0E00 0553                  	dc.b $E, 0, 5, $53
0001DB82 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB86 0F00 0573                  	dc.b $F, 0, 5, $73
0001DB8A 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB8E 1000 0573                  	dc.b $10, 0, 5,	$73
0001DB92 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB96 1100 0585                  	dc.b $11, 0, 5,	$85
0001DB9A 2800 9922                  	dc.l Map_obj28b+$28000000
0001DB9E 1200 0593                  	dc.b $12, 0, 5,	$93
0001DBA2 2800 990A                  	dc.l Map_obj28a+$28000000
0001DBA6 1300 0565                  	dc.b $13, 0, 5,	$65
0001DBAA 2800 9922                  	dc.l Map_obj28b+$28000000
0001DBAE 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DBB2                            	even
0001DBB2                            	even
0001DBB2                            
0001DBB2                            ; ---------------------------------------------------------------------------
0001DBB2                            ; Main level load blocks
0001DBB2                            ; ---------------------------------------------------------------------------
0001DBB2                            MainLoadBlocks:
0001DBB2                            	include "_inc\Main level load blocks.asm"
0001DBB2                            ; ---------------------------------------------------------------------------
0001DBB2                            ; Main level load blocks
0001DBB2                            ;
0001DBB2                            ; ===FORMAT===
0001DBB2                            ; level	patterns + (1st	PLC num	* 10^6)
0001DBB2                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DBB2                            ; 256x256 mappings
0001DBB2                            ; blank, music (unused), pal index (unused), pal index
0001DBB2                            ; ---------------------------------------------------------------------------
0001DBB2 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DBB6 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DBBA 0000 0000                  	dc.l Blk256_GHZ
0001DBBE 0081 0404                  	dc.b 0,	$81, 4,	4
0001DBC2 0000 0000                  	dc.l Nem_LZ+$6000000
0001DBC6 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DBCA 0000 0000                  	dc.l Blk256_LZ
0001DBCE 0082 0505                  	dc.b 0,	$82, 5,	5
0001DBD2 0000 0000                  	dc.l Nem_MZ+$8000000
0001DBD6 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DBDA 0000 0000                  	dc.l Blk256_MZ
0001DBDE 0083 0606                  	dc.b 0,	$83, 6,	6
0001DBE2 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DBE6 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DBEA 0000 0000                  	dc.l Blk256_SLZ
0001DBEE 0084 0707                  	dc.b 0,	$84, 7,	7
0001DBF2 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DBF6 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DBFA 0000 0000                  	dc.l Blk256_SYZ
0001DBFE 0085 0808                  	dc.b 0,	$85, 8,	8
0001DC02 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DC06 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DC0A 0000 0000                  	dc.l Blk256_SBZ
0001DC0E 0086 0909                  	dc.b 0,	$86, 9,	9
0001DC12 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DC16 0000 0000                  	dc.l Blk16_GHZ
0001DC1A 0000 0000                  	dc.l Blk256_GHZ
0001DC1E 0086 1313                  	dc.b 0,	$86, $13, $13
0001DC22                            	even
0001DC22                            	even
0001DC22                            
0001DC22                            ; ---------------------------------------------------------------------------
0001DC22                            ; Pattern load cues
0001DC22                            ; ---------------------------------------------------------------------------
0001DC22                            ArtLoadCues:
0001DC22                            	include "_inc\Pattern load cues.asm"
0001DC22                            ; ---------------------------------------------------------------------------
0001DC22                            ; Pattern load cues - index
0001DC22                            ; ---------------------------------------------------------------------------
0001DC22 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DC26 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DC2A 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DC2E 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DC32 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DC36 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DC3A 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DC3E 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DC42 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DC46 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DC4A 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DC4E 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DC52 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DC56 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DC5A 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DC5E 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DC62                            ; ---------------------------------------------------------------------------
0001DC62                            ; Pattern load cues - standard block 1
0001DC62                            ; ---------------------------------------------------------------------------
0001DC62 0004                       PLC_Main:	dc.w 4
0001DC64 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DC68 F400                       		dc.w $F400
0001DC6A 0000 0000                  		dc.l Nem_Hud		; HUD
0001DC6E D940                       		dc.w $D940
0001DC70 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DC74 FA80                       		dc.w $FA80
0001DC76 0000 0000                  		dc.l Nem_Ring		; rings
0001DC7A F640                       		dc.w $F640
0001DC7C 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DC80 F2E0                       		dc.w $F2E0
0001DC82                            ; ---------------------------------------------------------------------------
0001DC82                            ; Pattern load cues - standard block 2
0001DC82                            ; ---------------------------------------------------------------------------
0001DC82 0002                       PLC_Main2:	dc.w 2
0001DC84 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DC88 D000                       		dc.w $D000
0001DC8A 0000 0000                  		dc.l Nem_Shield		; shield
0001DC8E A820                       		dc.w $A820
0001DC90 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DC94 AB80                       		dc.w $AB80
0001DC96                            ; ---------------------------------------------------------------------------
0001DC96                            ; Pattern load cues - explosion
0001DC96                            ; ---------------------------------------------------------------------------
0001DC96 0000                       PLC_Explode:	dc.w 0
0001DC98 0000 0000                  		dc.l Nem_Explode	; explosion
0001DC9C B400                       		dc.w $B400
0001DC9E                            ; ---------------------------------------------------------------------------
0001DC9E                            ; Pattern load cues - game/time	over
0001DC9E                            ; ---------------------------------------------------------------------------
0001DC9E 0000                       PLC_GameOver:	dc.w 0
0001DCA0 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DCA4 ABC0                       		dc.w $ABC0
0001DCA6                            ; ---------------------------------------------------------------------------
0001DCA6                            ; Pattern load cues - Green Hill
0001DCA6                            ; ---------------------------------------------------------------------------
0001DCA6 000B                       PLC_GHZ:	dc.w $B
0001DCA8 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DCAC 0000                       		dc.w 0
0001DCAE 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DCB2 39A0                       		dc.w $39A0
0001DCB4 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DCB8 6B00                       		dc.w $6B00
0001DCBA 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DCBE 7A00                       		dc.w $7A00
0001DCC0 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DCC4 8000                       		dc.w $8000
0001DCC6 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DCCA 8880                       		dc.w $8880
0001DCCC 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DCD0 8F60                       		dc.w $8F60
0001DCD2 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DCD6 9360                       		dc.w $9360
0001DCD8 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DCDC 9E00                       		dc.w $9E00
0001DCDE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DCE2 A360                       		dc.w $A360
0001DCE4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DCE8 A460                       		dc.w $A460
0001DCEA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DCEE A660                       		dc.w $A660
0001DCF0 0005                       PLC_GHZ2:	dc.w 5
0001DCF2 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DCF6 7000                       		dc.w $7000
0001DCF8 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DCFC 71C0                       		dc.w $71C0
0001DCFE 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DD02 7300                       		dc.w $7300
0001DD04 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DD08 7540                       		dc.w $7540
0001DD0A 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DD0E A1E0                       		dc.w $A1E0
0001DD10 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DD14 6980                       		dc.w $6980
0001DD16                            ; ---------------------------------------------------------------------------
0001DD16                            ; Pattern load cues - Labyrinth
0001DD16                            ; ---------------------------------------------------------------------------
0001DD16 000B                       PLC_LZ:		dc.w $B
0001DD18 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DD1C 0000                       		dc.w 0
0001DD1E 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DD22 3C00                       		dc.w $3C00
0001DD24 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DD28 3E00                       		dc.w $3E00
0001DD2A 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DD2E 4B20                       		dc.w $4B20
0001DD30 0000 0000                  		dc.l Nem_Water		; water	surface
0001DD34 6000                       		dc.w $6000
0001DD36 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DD3A 6200                       		dc.w $6200
0001DD3C 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DD40 6500                       		dc.w $6500
0001DD42 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DD46 6900                       		dc.w $6900
0001DD48 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DD4C 7780                       		dc.w $7780
0001DD4E 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DD52 7880                       		dc.w $7880
0001DD54 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DD58 7980                       		dc.w $7980
0001DD5A 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DD5E 94C0                       		dc.w $94C0
0001DD60 000C                       PLC_LZ2:	dc.w $C
0001DD62 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DD66 7BC0                       		dc.w $7BC0
0001DD68 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DD6C 7CC0                       		dc.w $7CC0
0001DD6E 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DD72 7EC0                       		dc.w $7EC0
0001DD74 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DD78 5D20                       		dc.w $5D20
0001DD7A 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DD7E 8800                       		dc.w $8800
0001DD80 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DD84 89E0                       		dc.w $89E0
0001DD86 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DD8A 8CE0                       		dc.w $8CE0
0001DD8C 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DD90 90C0                       		dc.w $90C0
0001DD92 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DD96 A1E0                       		dc.w $A1E0
0001DD98 0000 0000                  		dc.l Nem_Cork		; cork block
0001DD9C A000                       		dc.w $A000
0001DD9E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDA2 A360                       		dc.w $A360
0001DDA4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DDA8 A460                       		dc.w $A460
0001DDAA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DDAE A660                       		dc.w $A660
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0                            ; Pattern load cues - Marble
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0 0009                       PLC_MZ:		dc.w 9
0001DDB2 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DDB6 0000                       		dc.w 0
0001DDB8 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DDBC 6000                       		dc.w $6000
0001DDBE 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DDC2 68A0                       		dc.w $68A0
0001DDC4 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DDC8 7000                       		dc.w $7000
0001DDCA 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DDCE 71C0                       		dc.w $71C0
0001DDD0 0000 0000                  		dc.l Nem_Lava		; lava
0001DDD4 7500                       		dc.w $7500
0001DDD6 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DDDA 8880                       		dc.w $8880
0001DDDC 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DDE0 8F60                       		dc.w $8F60
0001DDE2 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DDE6 9700                       		dc.w $9700
0001DDE8 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DDEC 9FE0                       		dc.w $9FE0
0001DDEE 0004                       PLC_MZ2:	dc.w 4
0001DDF0 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DDF4 A260                       		dc.w $A260
0001DDF6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDFA A360                       		dc.w $A360
0001DDFC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE00 A460                       		dc.w $A460
0001DE02 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE06 A660                       		dc.w $A660
0001DE08 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DE0C 5700                       		dc.w $5700
0001DE0E                            ; ---------------------------------------------------------------------------
0001DE0E                            ; Pattern load cues - Star Light
0001DE0E                            ; ---------------------------------------------------------------------------
0001DE0E 0008                       PLC_SLZ:	dc.w 8
0001DE10 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DE14 0000                       		dc.w 0
0001DE16 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DE1A 8000                       		dc.w $8000
0001DE1C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DE20 8520                       		dc.w $8520
0001DE22 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DE26 9000                       		dc.w $9000
0001DE28 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DE2C 9C00                       		dc.w $9C00
0001DE2E 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DE32 A260                       		dc.w $A260
0001DE34 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE38 A360                       		dc.w $A360
0001DE3A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE3E A460                       		dc.w $A460
0001DE40 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE44 A660                       		dc.w $A660
0001DE46 0005                       PLC_SLZ2:	dc.w 5
0001DE48 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DE4C 6E80                       		dc.w $6E80
0001DE4E 0000 0000                  		dc.l Nem_Fan		; fan
0001DE52 7400                       		dc.w $7400
0001DE54 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DE58 7980                       		dc.w $7980
0001DE5A 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DE5E 7B80                       		dc.w $7B80
0001DE60 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DE64 9B00                       		dc.w $9B00
0001DE66 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DE6A 9E00                       		dc.w $9E00
0001DE6C                            ; ---------------------------------------------------------------------------
0001DE6C                            ; Pattern load cues - Spring Yard
0001DE6C                            ; ---------------------------------------------------------------------------
0001DE6C 0004                       PLC_SYZ:	dc.w 4
0001DE6E 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DE72 0000                       		dc.w 0
0001DE74 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DE78 8000                       		dc.w $8000
0001DE7A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DE7E 8880                       		dc.w $8880
0001DE80 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DE84 8F60                       		dc.w $8F60
0001DE86 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DE8A 9700                       		dc.w $9700
0001DE8C 0007                       PLC_SYZ2:	dc.w 7
0001DE8E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DE92 7000                       		dc.w $7000
0001DE94 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DE98 72C0                       		dc.w $72C0
0001DE9A 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DE9E 7740                       		dc.w $7740
0001DEA0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DEA4 9FE0                       		dc.w $9FE0
0001DEA6 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DEAA A1E0                       		dc.w $A1E0
0001DEAC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DEB0 A360                       		dc.w $A360
0001DEB2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DEB6 A460                       		dc.w $A460
0001DEB8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DEBC A660                       		dc.w $A660
0001DEBE                            ; ---------------------------------------------------------------------------
0001DEBE                            ; Pattern load cues - Scrap Brain
0001DEBE                            ; ---------------------------------------------------------------------------
0001DEBE 000B                       PLC_SBZ:	dc.w $B
0001DEC0 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DEC4 0000                       		dc.w 0
0001DEC6 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DECA 5800                       		dc.w $5800
0001DECC 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DED0 5D00                       		dc.w $5D00
0001DED2 0000 0000                  		dc.l Nem_Girder		; girder
0001DED6 5E00                       		dc.w $5E00
0001DED8 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DEDC 6040                       		dc.w $6040
0001DEDE 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DEE2 6880                       		dc.w $6880
0001DEE4 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DEE8 6900                       		dc.w $6900
0001DEEA 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DEEE 7220                       		dc.w $7220
0001DEF0 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DEF4 76A0                       		dc.w $76A0
0001DEF6 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DEFA 7B20                       		dc.w $7B20
0001DEFC 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DF00 7EA0                       		dc.w $7EA0
0001DF02 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DF06 9860                       		dc.w $9860
0001DF08 000C                       PLC_SBZ2:	dc.w $C
0001DF0A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DF0E 5600                       		dc.w $5600
0001DF10 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DF14 8000                       		dc.w $8000
0001DF16 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DF1A 8520                       		dc.w $8520
0001DF1C 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DF20 8C00                       		dc.w $8C00
0001DF22 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DF26 8DE0                       		dc.w $8DE0
0001DF28 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DF2C 8FC0                       		dc.w $8FC0
0001DF2E 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DF32 9240                       		dc.w $9240
0001DF34 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DF38 7F20                       		dc.w $7F20
0001DF3A 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DF3E 9BE0                       		dc.w $9BE0
0001DF40 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DF44 A1E0                       		dc.w $A1E0
0001DF46 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF4A A360                       		dc.w $A360
0001DF4C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF50 A460                       		dc.w $A460
0001DF52 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF56 A660                       		dc.w $A660
0001DF58                            ; ---------------------------------------------------------------------------
0001DF58                            ; Pattern load cues - title card
0001DF58                            ; ---------------------------------------------------------------------------
0001DF58 0000                       PLC_TitleCard:	dc.w 0
0001DF5A 0000 0000                  		dc.l Nem_TitleCard
0001DF5E B000                       		dc.w $B000
0001DF60                            ; ---------------------------------------------------------------------------
0001DF60                            ; Pattern load cues - act 3 boss
0001DF60                            ; ---------------------------------------------------------------------------
0001DF60 0005                       PLC_Boss:	dc.w 5
0001DF62 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DF66 8000                       		dc.w $8000
0001DF68 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DF6C 8D80                       		dc.w $8D80
0001DF6E 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DF72 93A0                       		dc.w $93A0
0001DF74 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DF78 A300                       		dc.w $A300
0001DF7A 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DF7E A300                       		dc.w $A300
0001DF80 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DF84 A540                       		dc.w $A540
0001DF86                            ; ---------------------------------------------------------------------------
0001DF86                            ; Pattern load cues - act 1/2 signpost
0001DF86                            ; ---------------------------------------------------------------------------
0001DF86 0002                       PLC_Signpost:	dc.w 2
0001DF88 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DF8C D000                       		dc.w $D000
0001DF8E 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DF92 96C0                       		dc.w $96C0
0001DF94 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DF98 8C40                       		dc.w $8C40
0001DF9A                            ; ---------------------------------------------------------------------------
0001DF9A                            ; Pattern load cues - beta special stage warp effect
0001DF9A                            ; ---------------------------------------------------------------------------
0001DF9A 0000                       PLC_Warp:	dc.w 0
0001DF9C 0000 0000                  		dc.l Nem_Warp
0001DFA0 A820                       		dc.w $A820
0001DFA2                            ; ---------------------------------------------------------------------------
0001DFA2                            ; Pattern load cues - special stage
0001DFA2                            ; ---------------------------------------------------------------------------
0001DFA2 0010                       PLC_SpeStage:	dc.w $10
0001DFA4 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DFA8 0000                       		dc.w 0
0001DFAA 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DFAE 0A20                       		dc.w $A20
0001DFB0 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DFB4 2840                       		dc.w $2840
0001DFB6 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DFBA 4760                       		dc.w $4760
0001DFBC 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DFC0 4A20                       		dc.w $4A20
0001DFC2 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DFC6 4C60                       		dc.w $4C60
0001DFC8 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DFCC 5E00                       		dc.w $5E00
0001DFCE 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DFD2 6E00                       		dc.w $6E00
0001DFD4 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DFD8 7E00                       		dc.w $7E00
0001DFDA 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DFDE 8E00                       		dc.w $8E00
0001DFE0 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DFE4 9E00                       		dc.w $9E00
0001DFE6 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DFEA AE00                       		dc.w $AE00
0001DFEC 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DFF0 BE00                       		dc.w $BE00
0001DFF2 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DFF6 EE00                       		dc.w $EE00
0001DFF8 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DFFC F2E0                       		dc.w $F2E0
0001DFFE 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E002 F400                       		dc.w $F400
0001E004 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E008 F520                       		dc.w $F520
0001E00A 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E00E F2E0                       		dc.w $F2E0
0001E010 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E014 F400                       		dc.w $F400
0001E016 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E01A F520                       		dc.w $F520
0001E01C                            ; ---------------------------------------------------------------------------
0001E01C                            ; Pattern load cues - GHZ animals
0001E01C                            ; ---------------------------------------------------------------------------
0001E01C 0001                       PLC_GHZAnimals:	dc.w 1
0001E01E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E022 B000                       		dc.w $B000
0001E024 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E028 B240                       		dc.w $B240
0001E02A                            ; ---------------------------------------------------------------------------
0001E02A                            ; Pattern load cues - LZ animals
0001E02A                            ; ---------------------------------------------------------------------------
0001E02A 0001                       PLC_LZAnimals:	dc.w 1
0001E02C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E030 B000                       		dc.w $B000
0001E032 0000 0000                  		dc.l Nem_Seal		; seal
0001E036 B240                       		dc.w $B240
0001E038                            ; ---------------------------------------------------------------------------
0001E038                            ; Pattern load cues - MZ animals
0001E038                            ; ---------------------------------------------------------------------------
0001E038 0001                       PLC_MZAnimals:	dc.w 1
0001E03A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E03E B000                       		dc.w $B000
0001E040 0000 0000                  		dc.l Nem_Seal		; seal
0001E044 B240                       		dc.w $B240
0001E046                            ; ---------------------------------------------------------------------------
0001E046                            ; Pattern load cues - SLZ animals
0001E046                            ; ---------------------------------------------------------------------------
0001E046 0001                       PLC_SLZAnimals:	dc.w 1
0001E048 0000 0000                  		dc.l Nem_Pig		; pig
0001E04C B000                       		dc.w $B000
0001E04E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E052 B240                       		dc.w $B240
0001E054                            ; ---------------------------------------------------------------------------
0001E054                            ; Pattern load cues - SYZ animals
0001E054                            ; ---------------------------------------------------------------------------
0001E054 0001                       PLC_SYZAnimals:	dc.w 1
0001E056 0000 0000                  		dc.l Nem_Pig		; pig
0001E05A B000                       		dc.w $B000
0001E05C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E060 B240                       		dc.w $B240
0001E062                            ; ---------------------------------------------------------------------------
0001E062                            ; Pattern load cues - SBZ animals
0001E062                            ; ---------------------------------------------------------------------------
0001E062 0001                       PLC_SBZAnimals:	dc.w 1
0001E064 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E068 B000                       		dc.w $B000
0001E06A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E06E B240                       		dc.w $B240
0001E070                            ; ---------------------------------------------------------------------------
0001E070                            ; Pattern load cues - special stage results screen
0001E070                            ; ---------------------------------------------------------------------------
0001E070 0001                       PLC_SpeStResult:dc.w 1
0001E072 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E076 A820                       		dc.w $A820
0001E078 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E07C AA20                       		dc.w $AA20
0001E07E                            ; ---------------------------------------------------------------------------
0001E07E                            ; Pattern load cues - ending sequence
0001E07E                            ; ---------------------------------------------------------------------------
0001E07E 000E                       PLC_Ending:	dc.w $E
0001E080 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E084 0000                       		dc.w 0
0001E086 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E08A 39A0                       		dc.w $39A0
0001E08C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E090 6B00                       		dc.w $6B00
0001E092 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E096 7400                       		dc.w $7400
0001E098 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E09C 78A0                       		dc.w $78A0
0001E09E 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E0A2 7C20                       		dc.w $7C20
0001E0A4 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E0A8 A480                       		dc.w $A480
0001E0AA 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E0AE AA60                       		dc.w $AA60
0001E0B0 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E0B4 ACA0                       		dc.w $ACA0
0001E0B6 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E0BA AE60                       		dc.w $AE60
0001E0BC 0000 0000                  		dc.l Nem_Seal		; seal
0001E0C0 B0A0                       		dc.w $B0A0
0001E0C2 0000 0000                  		dc.l Nem_Pig		; pig
0001E0C6 B260                       		dc.w $B260
0001E0C8 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E0CC B4A0                       		dc.w $B4A0
0001E0CE 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E0D2 B660                       		dc.w $B660
0001E0D4 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E0D8 B8A0                       		dc.w $B8A0
0001E0DA                            ; ---------------------------------------------------------------------------
0001E0DA                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E0DA                            ; ---------------------------------------------------------------------------
0001E0DA 0002                       PLC_TryAgain:	dc.w 2
0001E0DC 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E0E0 78A0                       		dc.w $78A0
0001E0E2 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E0E6 7C20                       		dc.w $7C20
0001E0E8 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E0EC B400                       		dc.w $B400
0001E0EE                            ; ---------------------------------------------------------------------------
0001E0EE                            ; Pattern load cues - Eggman on SBZ 2
0001E0EE                            ; ---------------------------------------------------------------------------
0001E0EE 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E0F0 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E0F4 A300                       		dc.w $A300
0001E0F6 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E0FA 8000                       		dc.w $8000
0001E0FC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E100 9400                       		dc.w $9400
0001E102                            ; ---------------------------------------------------------------------------
0001E102                            ; Pattern load cues - final boss
0001E102                            ; ---------------------------------------------------------------------------
0001E102 0004                       PLC_FZBoss:	dc.w 4
0001E104 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E108 7400                       		dc.w $7400
0001E10A 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E10E 6000                       		dc.w $6000
0001E110 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E114 8000                       		dc.w $8000
0001E116 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E11A 8E00                       		dc.w $8E00
0001E11C 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E120 A540                       		dc.w $A540
0001E122                            		even
0001E122                            		even
0001E122                            
0001E122                            		incbin	misc\padding.bin
0001E210                            		even
0001E210                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E672                            		even
0001E672                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E76A                            		even
0001E76A                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E87E                            		even
0001E87E                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F88A                            		even
0001F88A                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023990                            		even
00023990                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000239C4                            		even
000239C4                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023A82                            		even
00023A82                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00023F2A                            		even
00023F2A                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00023F88                            		even
00023F88                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024B8E                            		even
00024B8E                            ; ---------------------------------------------------------------------------
00024B8E                            ; Sprite mappings - Sonic
00024B8E                            ; ---------------------------------------------------------------------------
00024B8E                            Map_Sonic:
00024B8E                            	include "_maps\Sonic.asm"
00024B8E                            Map_0c04:
00024B8E 0000                       Map_0c04_0: 	dc.w Map_0c04_B6-Map_0c04
00024B90 0000                       Map_0c04_2: 	dc.w Map_0c04_B7-Map_0c04
00024B92 0000                       Map_0c04_4: 	dc.w Map_0c04_C2-Map_0c04
00024B94 0000                       Map_0c04_6: 	dc.w Map_0c04_D2-Map_0c04
00024B96 0000                       Map_0c04_8: 	dc.w Map_0c04_E2-Map_0c04
00024B98 0000                       Map_0c04_A: 	dc.w Map_0c04_F2-Map_0c04
00024B9A 0000                       Map_0c04_C: 	dc.w Map_0c04_102-Map_0c04
00024B9C 0000                       Map_0c04_E: 	dc.w Map_0c04_117-Map_0c04
00024B9E 0000                       Map_0c04_10: 	dc.w Map_0c04_122-Map_0c04
00024BA0 0000                       Map_0c04_12: 	dc.w Map_0c04_12D-Map_0c04
00024BA2 0000                       Map_0c04_14: 	dc.w Map_0c04_142-Map_0c04
00024BA4 0000                       Map_0c04_16: 	dc.w Map_0c04_14D-Map_0c04
00024BA6 0000                       Map_0c04_18: 	dc.w Map_0c04_15D-Map_0c04
00024BA8 0000                       Map_0c04_1A: 	dc.w Map_0c04_177-Map_0c04
00024BAA 0000                       Map_0c04_1C: 	dc.w Map_0c04_196-Map_0c04
00024BAC 0000                       Map_0c04_1E: 	dc.w Map_0c04_1AB-Map_0c04
00024BAE 0000                       Map_0c04_20: 	dc.w Map_0c04_1C5-Map_0c04
00024BB0 0000                       Map_0c04_22: 	dc.w Map_0c04_1DA-Map_0c04
00024BB2 0000                       Map_0c04_24: 	dc.w Map_0c04_1F4-Map_0c04
00024BB4 0000                       Map_0c04_26: 	dc.w Map_0c04_209-Map_0c04
00024BB6 0000                       Map_0c04_28: 	dc.w Map_0c04_214-Map_0c04
00024BB8 0000                       Map_0c04_2A: 	dc.w Map_0c04_21F-Map_0c04
00024BBA 0000                       Map_0c04_2C: 	dc.w Map_0c04_234-Map_0c04
00024BBC 0000                       Map_0c04_2E: 	dc.w Map_0c04_23F-Map_0c04
00024BBE 0000                       Map_0c04_30: 	dc.w Map_0c04_24F-Map_0c04
00024BC0 0000                       Map_0c04_32: 	dc.w Map_0c04_26E-Map_0c04
00024BC2 0000                       Map_0c04_34: 	dc.w Map_0c04_28D-Map_0c04
00024BC4 0000                       Map_0c04_36: 	dc.w Map_0c04_2A2-Map_0c04
00024BC6 0000                       Map_0c04_38: 	dc.w Map_0c04_2BC-Map_0c04
00024BC8 0000                       Map_0c04_3A: 	dc.w Map_0c04_2D1-Map_0c04
00024BCA 0000                       Map_0c04_3C: 	dc.w Map_0c04_2EB-Map_0c04
00024BCC 0000                       Map_0c04_3E: 	dc.w Map_0c04_2F6-Map_0c04
00024BCE 0000                       Map_0c04_40: 	dc.w Map_0c04_301-Map_0c04
00024BD0 0000                       Map_0c04_42: 	dc.w Map_0c04_30C-Map_0c04
00024BD2 0000                       Map_0c04_44: 	dc.w Map_0c04_317-Map_0c04
00024BD4 0000                       Map_0c04_46: 	dc.w Map_0c04_32C-Map_0c04
00024BD6 0000                       Map_0c04_48: 	dc.w Map_0c04_33C-Map_0c04
00024BD8 0000                       Map_0c04_4A: 	dc.w Map_0c04_351-Map_0c04
00024BDA 0000                       Map_0c04_4C: 	dc.w Map_0c04_361-Map_0c04
00024BDC 0000                       Map_0c04_4E: 	dc.w Map_0c04_36C-Map_0c04
00024BDE 0000                       Map_0c04_50: 	dc.w Map_0c04_377-Map_0c04
00024BE0 0000                       Map_0c04_52: 	dc.w Map_0c04_382-Map_0c04
00024BE2 0000                       Map_0c04_54: 	dc.w Map_0c04_38D-Map_0c04
00024BE4 0000                       Map_0c04_56: 	dc.w Map_0c04_3A2-Map_0c04
00024BE6 0000                       Map_0c04_58: 	dc.w Map_0c04_3AD-Map_0c04
00024BE8 0000                       Map_0c04_5A: 	dc.w Map_0c04_3C2-Map_0c04
00024BEA 0000                       Map_0c04_5C: 	dc.w Map_0c04_3CD-Map_0c04
00024BEC 0000                       Map_0c04_5E: 	dc.w Map_0c04_3D3-Map_0c04
00024BEE 0000                       Map_0c04_60: 	dc.w Map_0c04_3D9-Map_0c04
00024BF0 0000                       Map_0c04_62: 	dc.w Map_0c04_3DF-Map_0c04
00024BF2 0000                       Map_0c04_64: 	dc.w Map_0c04_3E5-Map_0c04
00024BF4 0000                       Map_0c04_66: 	dc.w Map_0c04_3EB-Map_0c04
00024BF6 0000                       Map_0c04_68: 	dc.w Map_0c04_3F6-Map_0c04
00024BF8 0000                       Map_0c04_6A: 	dc.w Map_0c04_3FC-Map_0c04
00024BFA 0000                       Map_0c04_6C: 	dc.w Map_0c04_407-Map_0c04
00024BFC 0000                       Map_0c04_6E: 	dc.w Map_0c04_40D-Map_0c04
00024BFE 0000                       Map_0c04_70: 	dc.w Map_0c04_418-Map_0c04
00024C00 0000                       Map_0c04_72: 	dc.w Map_0c04_42D-Map_0c04
00024C02 0000                       Map_0c04_74: 	dc.w Map_0c04_44C-Map_0c04
00024C04 0000                       Map_0c04_76: 	dc.w Map_0c04_457-Map_0c04
00024C06 0000                       Map_0c04_78: 	dc.w Map_0c04_462-Map_0c04
00024C08 0000                       Map_0c04_7A: 	dc.w Map_0c04_477-Map_0c04
00024C0A 0000                       Map_0c04_7C: 	dc.w Map_0c04_482-Map_0c04
00024C0C 0000                       Map_0c04_7E: 	dc.w Map_0c04_492-Map_0c04
00024C0E 0000                       Map_0c04_80: 	dc.w Map_0c04_4A7-Map_0c04
00024C10 0000                       Map_0c04_82: 	dc.w Map_0c04_4B7-Map_0c04
00024C12 0000                       Map_0c04_84: 	dc.w Map_0c04_4CC-Map_0c04
00024C14 0000                       Map_0c04_86: 	dc.w Map_0c04_4E1-Map_0c04
00024C16 0000                       Map_0c04_88: 	dc.w Map_0c04_4FB-Map_0c04
00024C18 0000                       Map_0c04_8A: 	dc.w Map_0c04_515-Map_0c04
00024C1A 0000                       Map_0c04_8C: 	dc.w Map_0c04_520-Map_0c04
00024C1C 0000                       Map_0c04_8E: 	dc.w Map_0c04_530-Map_0c04
00024C1E 0000                       Map_0c04_90: 	dc.w Map_0c04_53B-Map_0c04
00024C20 0000                       Map_0c04_92: 	dc.w Map_0c04_54B-Map_0c04
00024C22 0000                       Map_0c04_94: 	dc.w Map_0c04_556-Map_0c04
00024C24 0000                       Map_0c04_96: 	dc.w Map_0c04_566-Map_0c04
00024C26 0000                       Map_0c04_98: 	dc.w Map_0c04_576-Map_0c04
00024C28 0000                       Map_0c04_9A: 	dc.w Map_0c04_590-Map_0c04
00024C2A 0000                       Map_0c04_9C: 	dc.w Map_0c04_5AA-Map_0c04
00024C2C 0000                       Map_0c04_9E: 	dc.w Map_0c04_5B5-Map_0c04
00024C2E 0000                       Map_0c04_A0: 	dc.w Map_0c04_5C5-Map_0c04
00024C30 0000                       Map_0c04_A2: 	dc.w Map_0c04_5CB-Map_0c04
00024C32 0000                       Map_0c04_A4: 	dc.w Map_0c04_5D1-Map_0c04
00024C34 0000                       Map_0c04_A6: 	dc.w Map_0c04_5D7-Map_0c04
00024C36 0000                       Map_0c04_A8: 	dc.w Map_0c04_5EC-Map_0c04
00024C38 0000                       Map_0c04_AA: 	dc.w Map_0c04_5FC-Map_0c04
00024C3A 0000                       Map_0c04_AC: 	dc.w Map_0c04_60C-Map_0c04
00024C3C 0000                       Map_0c04_AE: 	dc.w Map_0c04_61C-Map_0c04
00024C3E 0000                       Map_0c04_B0: 	dc.w Map_0c04_627-Map_0c04
00024C40 0000                       Map_0c04_B2: 	dc.w Map_0c04_632-Map_0c04
00024C42 0000                       Map_0c04_B4: 	dc.w Map_0c04_642-Map_0c04
00024C44 00                         Map_0c04_B6: 	dc.b $0
00024C45 02                         Map_0c04_B7: 	dc.b $2
00024C46 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024C4B 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024C50 03                         Map_0c04_C2: 	dc.b $3
00024C51 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024C56 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024C5B 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C60 03                         Map_0c04_D2: 	dc.b $3
00024C61 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024C66 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024C6B 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C70 03                         Map_0c04_E2: 	dc.b $3
00024C71 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024C76 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024C7B 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C80 03                         Map_0c04_F2: 	dc.b $3
00024C81 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024C86 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024C8B 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C90 04                         Map_0c04_102: 	dc.b $4
00024C91 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024C96 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024C9B FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024CA0 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024CA5 02                         Map_0c04_117: 	dc.b $2
00024CA6 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024CAB FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024CB0 02                         Map_0c04_122: 	dc.b $2
00024CB1 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024CB6 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024CBB 04                         Map_0c04_12D: 	dc.b $4
00024CBC EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024CC1 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024CC6 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024CCB 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024CD0 02                         Map_0c04_142: 	dc.b $2
00024CD1 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024CD6 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024CDB 03                         Map_0c04_14D: 	dc.b $3
00024CDC ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024CE1 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024CE6 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024CEB 05                         Map_0c04_15D: 	dc.b $5
00024CEC EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024CF1 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024CF6 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024CFB 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024D00 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024D05 06                         Map_0c04_177: 	dc.b $6
00024D06 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024D0B EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024D10 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024D15 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024D1A FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024D1F F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024D24 04                         Map_0c04_196: 	dc.b $4
00024D25 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024D2A ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024D2F FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024D34 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00024D39 05                         Map_0c04_1AB: 	dc.b $5
00024D3A EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024D3F EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00024D44 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00024D49 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00024D4E 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00024D53 04                         Map_0c04_1C5: 	dc.b $4
00024D54 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024D59 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024D5E FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00024D63 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00024D68 05                         Map_0c04_1DA: 	dc.b $5
00024D69 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024D6E ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024D73 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00024D78 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00024D7D 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00024D82 04                         Map_0c04_1F4: 	dc.b $4
00024D83 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00024D88 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00024D8D FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00024D92 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00024D97 02                         Map_0c04_209: 	dc.b $2
00024D98 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00024D9D EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00024DA2 02                         Map_0c04_214: 	dc.b $2
00024DA3 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00024DA8 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00024DAD 04                         Map_0c04_21F: 	dc.b $4
00024DAE F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00024DB3 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00024DB8 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00024DBD 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00024DC2 02                         Map_0c04_234: 	dc.b $2
00024DC3 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00024DC8 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00024DCD 03                         Map_0c04_23F: 	dc.b $3
00024DCE F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00024DD3 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00024DD8 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00024DDD 06                         Map_0c04_24F: 	dc.b $6
00024DDE FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024DE3 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00024DE8 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00024DED F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00024DF2 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00024DF7 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00024DFC 06                         Map_0c04_26E: 	dc.b $6
00024DFD FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024E02 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00024E07 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00024E0C F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00024E11 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00024E16 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00024E1B 04                         Map_0c04_28D: 	dc.b $4
00024E1C FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024E21 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00024E26 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00024E2B 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024E30 05                         Map_0c04_2A2: 	dc.b $5
00024E31 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024E36 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00024E3B F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00024E40 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00024E45 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00024E4A 04                         Map_0c04_2BC: 	dc.b $4
00024E4B FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024E50 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00024E55 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00024E5A 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00024E5F 05                         Map_0c04_2D1: 	dc.b $5
00024E60 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024E65 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00024E6A F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00024E6F 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024E74 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00024E79 02                         Map_0c04_2EB: 	dc.b $2
00024E7A EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E7F FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E84 02                         Map_0c04_2F6: 	dc.b $2
00024E85 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E8A FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E8F 02                         Map_0c04_301: 	dc.b $2
00024E90 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E95 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E9A 02                         Map_0c04_30C: 	dc.b $2
00024E9B EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024EA0 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024EA5 04                         Map_0c04_317: 	dc.b $4
00024EA6 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024EAB EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024EB0 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024EB5 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024EBA 03                         Map_0c04_32C: 	dc.b $3
00024EBB EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024EC0 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024EC5 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024ECA 04                         Map_0c04_33C: 	dc.b $4
00024ECB EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024ED0 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024ED5 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024EDA FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024EDF 03                         Map_0c04_351: 	dc.b $3
00024EE0 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024EE5 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024EEA FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024EEF 02                         Map_0c04_361: 	dc.b $2
00024EF0 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024EF5 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024EFA 02                         Map_0c04_36C: 	dc.b $2
00024EFB F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024F00 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F05 02                         Map_0c04_377: 	dc.b $2
00024F06 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024F0B F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F10 02                         Map_0c04_382: 	dc.b $2
00024F11 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024F16 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F1B 04                         Map_0c04_38D: 	dc.b $4
00024F1C FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024F21 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024F26 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F2B 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024F30 02                         Map_0c04_3A2: 	dc.b $2
00024F31 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024F36 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F3B 04                         Map_0c04_3AD: 	dc.b $4
00024F3C FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024F41 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024F46 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F4B 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024F50 02                         Map_0c04_3C2: 	dc.b $2
00024F51 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024F56 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F5B 01                         Map_0c04_3CD: 	dc.b $1
00024F5C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F61 01                         Map_0c04_3D3: 	dc.b $1
00024F62 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F67 01                         Map_0c04_3D9: 	dc.b $1
00024F68 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F6D 01                         Map_0c04_3DF: 	dc.b $1
00024F6E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F73 01                         Map_0c04_3E5: 	dc.b $1
00024F74 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F79 02                         Map_0c04_3EB: 	dc.b $2
00024F7A F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00024F7F F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00024F84 01                         Map_0c04_3F6: 	dc.b $1
00024F85 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F8A 02                         Map_0c04_3FC: 	dc.b $2
00024F8B EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00024F90 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00024F95 01                         Map_0c04_407: 	dc.b $1
00024F96 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F9B 02                         Map_0c04_40D: 	dc.b $2
00024F9C ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00024FA1 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00024FA6 04                         Map_0c04_418: 	dc.b $4
00024FA7 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00024FAC FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00024FB1 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00024FB6 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00024FBB 06                         Map_0c04_42D: 	dc.b $6
00024FBC F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00024FC1 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00024FC6 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00024FCB 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00024FD0 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00024FD5 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00024FDA 02                         Map_0c04_44C: 	dc.b $2
00024FDB 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00024FE0 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00024FE5 02                         Map_0c04_457: 	dc.b $2
00024FE6 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00024FEB EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00024FF0 04                         Map_0c04_462: 	dc.b $4
00024FF1 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00024FF6 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00024FFB 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025000 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025005 02                         Map_0c04_477: 	dc.b $2
00025006 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002500B F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025010 03                         Map_0c04_482: 	dc.b $3
00025011 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00025016 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
0002501B 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025020 04                         Map_0c04_492: 	dc.b $4
00025021 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025026 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002502B 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025030 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025035 03                         Map_0c04_4A7: 	dc.b $3
00025036 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
0002503B 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00025040 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00025045 04                         Map_0c04_4B7: 	dc.b $4
00025046 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002504B 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025050 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025055 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002505A 04                         Map_0c04_4CC: 	dc.b $4
0002505B F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025060 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025065 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002506A F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002506F 05                         Map_0c04_4E1: 	dc.b $5
00025070 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025075 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
0002507A 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002507F 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025084 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025089 05                         Map_0c04_4FB: 	dc.b $5
0002508A E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002508F E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00025094 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025099 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002509E 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000250A3 02                         Map_0c04_515: 	dc.b $2
000250A4 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000250A9 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000250AE 03                         Map_0c04_520: 	dc.b $3
000250AF EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000250B4 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000250B9 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000250BE 02                         Map_0c04_530: 	dc.b $2
000250BF ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000250C4 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000250C9 03                         Map_0c04_53B: 	dc.b $3
000250CA EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000250CF 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000250D4 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000250D9 02                         Map_0c04_54B: 	dc.b $2
000250DA EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000250DF FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000250E4 03                         Map_0c04_556: 	dc.b $3
000250E5 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000250EA 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000250EF E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000250F4 03                         Map_0c04_566: 	dc.b $3
000250F5 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000250FA E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000250FF F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025104 05                         Map_0c04_576: 	dc.b $5
00025105 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002510A E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002510F F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025114 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025119 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002511E 05                         Map_0c04_590: 	dc.b $5
0002511F E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025124 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025129 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002512E 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025133 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025138 02                         Map_0c04_5AA: 	dc.b $2
00025139 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002513E F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025143 03                         Map_0c04_5B5: 	dc.b $3
00025144 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025149 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
0002514E 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025153 01                         Map_0c04_5C5: 	dc.b $1
00025154 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00025159 01                         Map_0c04_5CB: 	dc.b $1
0002515A F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0002515F 01                         Map_0c04_5D1: 	dc.b $1
00025160 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00025165 04                         Map_0c04_5D7: 	dc.b $4
00025166 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002516B F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025170 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00025175 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
0002517A 03                         Map_0c04_5EC: 	dc.b $3
0002517B F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025180 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00025185 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
0002518A 03                         Map_0c04_5FC: 	dc.b $3
0002518B F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025190 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00025195 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
0002519A 03                         Map_0c04_60C: 	dc.b $3
0002519B EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000251A0 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000251A5 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000251AA 02                         Map_0c04_61C: 	dc.b $2
000251AB F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000251B0 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000251B5 02                         Map_0c04_627: 	dc.b $2
000251B6 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000251BB EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000251C0 03                         Map_0c04_632: 	dc.b $3
000251C1 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000251C6 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000251CB 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000251D0 02                         Map_0c04_642: 	dc.b $2
000251D1 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000251D6 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000251DC 00                         	even
000251DC 00                         	even
000251DC                            
000251DC                            ; ---------------------------------------------------------------------------
000251DC                            ; Uncompressed graphics	loading	array for Sonic
000251DC                            ; ---------------------------------------------------------------------------
000251DC                            SonicDynPLC:
000251DC                            	include "_inc\Sonic dynamic pattern load cues.asm"
000251DC                            DPLC_04ad:
000251DC 0000                       DPLC_04ad_0: 	dc.w DPLC_04ad_B6-DPLC_04ad
000251DE 0000                       DPLC_04ad_2: 	dc.w DPLC_04ad_B7-DPLC_04ad
000251E0 0000                       DPLC_04ad_4: 	dc.w DPLC_04ad_BC-DPLC_04ad
000251E2 0000                       DPLC_04ad_6: 	dc.w DPLC_04ad_C3-DPLC_04ad
000251E4 0000                       DPLC_04ad_8: 	dc.w DPLC_04ad_CA-DPLC_04ad
000251E6 0000                       DPLC_04ad_A: 	dc.w DPLC_04ad_D1-DPLC_04ad
000251E8 0000                       DPLC_04ad_C: 	dc.w DPLC_04ad_D8-DPLC_04ad
000251EA 0000                       DPLC_04ad_E: 	dc.w DPLC_04ad_E1-DPLC_04ad
000251EC 0000                       DPLC_04ad_10: 	dc.w DPLC_04ad_E6-DPLC_04ad
000251EE 0000                       DPLC_04ad_12: 	dc.w DPLC_04ad_EB-DPLC_04ad
000251F0 0000                       DPLC_04ad_14: 	dc.w DPLC_04ad_F4-DPLC_04ad
000251F2 0000                       DPLC_04ad_16: 	dc.w DPLC_04ad_F9-DPLC_04ad
000251F4 0000                       DPLC_04ad_18: 	dc.w DPLC_04ad_100-DPLC_04ad
000251F6 0000                       DPLC_04ad_1A: 	dc.w DPLC_04ad_10B-DPLC_04ad
000251F8 0000                       DPLC_04ad_1C: 	dc.w DPLC_04ad_118-DPLC_04ad
000251FA 0000                       DPLC_04ad_1E: 	dc.w DPLC_04ad_121-DPLC_04ad
000251FC 0000                       DPLC_04ad_20: 	dc.w DPLC_04ad_12C-DPLC_04ad
000251FE 0000                       DPLC_04ad_22: 	dc.w DPLC_04ad_135-DPLC_04ad
00025200 0000                       DPLC_04ad_24: 	dc.w DPLC_04ad_140-DPLC_04ad
00025202 0000                       DPLC_04ad_26: 	dc.w DPLC_04ad_149-DPLC_04ad
00025204 0000                       DPLC_04ad_28: 	dc.w DPLC_04ad_14E-DPLC_04ad
00025206 0000                       DPLC_04ad_2A: 	dc.w DPLC_04ad_153-DPLC_04ad
00025208 0000                       DPLC_04ad_2C: 	dc.w DPLC_04ad_15C-DPLC_04ad
0002520A 0000                       DPLC_04ad_2E: 	dc.w DPLC_04ad_161-DPLC_04ad
0002520C 0000                       DPLC_04ad_30: 	dc.w DPLC_04ad_168-DPLC_04ad
0002520E 0000                       DPLC_04ad_32: 	dc.w DPLC_04ad_175-DPLC_04ad
00025210 0000                       DPLC_04ad_34: 	dc.w DPLC_04ad_182-DPLC_04ad
00025212 0000                       DPLC_04ad_36: 	dc.w DPLC_04ad_18B-DPLC_04ad
00025214 0000                       DPLC_04ad_38: 	dc.w DPLC_04ad_196-DPLC_04ad
00025216 0000                       DPLC_04ad_3A: 	dc.w DPLC_04ad_19F-DPLC_04ad
00025218 0000                       DPLC_04ad_3C: 	dc.w DPLC_04ad_1AA-DPLC_04ad
0002521A 0000                       DPLC_04ad_3E: 	dc.w DPLC_04ad_1AF-DPLC_04ad
0002521C 0000                       DPLC_04ad_40: 	dc.w DPLC_04ad_1B4-DPLC_04ad
0002521E 0000                       DPLC_04ad_42: 	dc.w DPLC_04ad_1B9-DPLC_04ad
00025220 0000                       DPLC_04ad_44: 	dc.w DPLC_04ad_1BE-DPLC_04ad
00025222 0000                       DPLC_04ad_46: 	dc.w DPLC_04ad_1C7-DPLC_04ad
00025224 0000                       DPLC_04ad_48: 	dc.w DPLC_04ad_1CE-DPLC_04ad
00025226 0000                       DPLC_04ad_4A: 	dc.w DPLC_04ad_1D7-DPLC_04ad
00025228 0000                       DPLC_04ad_4C: 	dc.w DPLC_04ad_1DE-DPLC_04ad
0002522A 0000                       DPLC_04ad_4E: 	dc.w DPLC_04ad_1E3-DPLC_04ad
0002522C 0000                       DPLC_04ad_50: 	dc.w DPLC_04ad_1E8-DPLC_04ad
0002522E 0000                       DPLC_04ad_52: 	dc.w DPLC_04ad_1ED-DPLC_04ad
00025230 0000                       DPLC_04ad_54: 	dc.w DPLC_04ad_1F2-DPLC_04ad
00025232 0000                       DPLC_04ad_56: 	dc.w DPLC_04ad_1FB-DPLC_04ad
00025234 0000                       DPLC_04ad_58: 	dc.w DPLC_04ad_200-DPLC_04ad
00025236 0000                       DPLC_04ad_5A: 	dc.w DPLC_04ad_209-DPLC_04ad
00025238 0000                       DPLC_04ad_5C: 	dc.w DPLC_04ad_20E-DPLC_04ad
0002523A 0000                       DPLC_04ad_5E: 	dc.w DPLC_04ad_211-DPLC_04ad
0002523C 0000                       DPLC_04ad_60: 	dc.w DPLC_04ad_214-DPLC_04ad
0002523E 0000                       DPLC_04ad_62: 	dc.w DPLC_04ad_217-DPLC_04ad
00025240 0000                       DPLC_04ad_64: 	dc.w DPLC_04ad_21A-DPLC_04ad
00025242 0000                       DPLC_04ad_66: 	dc.w DPLC_04ad_21D-DPLC_04ad
00025244 0000                       DPLC_04ad_68: 	dc.w DPLC_04ad_222-DPLC_04ad
00025246 0000                       DPLC_04ad_6A: 	dc.w DPLC_04ad_225-DPLC_04ad
00025248 0000                       DPLC_04ad_6C: 	dc.w DPLC_04ad_22A-DPLC_04ad
0002524A 0000                       DPLC_04ad_6E: 	dc.w DPLC_04ad_22D-DPLC_04ad
0002524C 0000                       DPLC_04ad_70: 	dc.w DPLC_04ad_232-DPLC_04ad
0002524E 0000                       DPLC_04ad_72: 	dc.w DPLC_04ad_23B-DPLC_04ad
00025250 0000                       DPLC_04ad_74: 	dc.w DPLC_04ad_240-DPLC_04ad
00025252 0000                       DPLC_04ad_76: 	dc.w DPLC_04ad_245-DPLC_04ad
00025254 0000                       DPLC_04ad_78: 	dc.w DPLC_04ad_24A-DPLC_04ad
00025256 0000                       DPLC_04ad_7A: 	dc.w DPLC_04ad_24F-DPLC_04ad
00025258 0000                       DPLC_04ad_7C: 	dc.w DPLC_04ad_252-DPLC_04ad
0002525A 0000                       DPLC_04ad_7E: 	dc.w DPLC_04ad_259-DPLC_04ad
0002525C 0000                       DPLC_04ad_80: 	dc.w DPLC_04ad_25E-DPLC_04ad
0002525E 0000                       DPLC_04ad_82: 	dc.w DPLC_04ad_265-DPLC_04ad
00025260 0000                       DPLC_04ad_84: 	dc.w DPLC_04ad_26E-DPLC_04ad
00025262 0000                       DPLC_04ad_86: 	dc.w DPLC_04ad_277-DPLC_04ad
00025264 0000                       DPLC_04ad_88: 	dc.w DPLC_04ad_282-DPLC_04ad
00025266 0000                       DPLC_04ad_8A: 	dc.w DPLC_04ad_28D-DPLC_04ad
00025268 0000                       DPLC_04ad_8C: 	dc.w DPLC_04ad_292-DPLC_04ad
0002526A 0000                       DPLC_04ad_8E: 	dc.w DPLC_04ad_299-DPLC_04ad
0002526C 0000                       DPLC_04ad_90: 	dc.w DPLC_04ad_29E-DPLC_04ad
0002526E 0000                       DPLC_04ad_92: 	dc.w DPLC_04ad_2A5-DPLC_04ad
00025270 0000                       DPLC_04ad_94: 	dc.w DPLC_04ad_2AA-DPLC_04ad
00025272 0000                       DPLC_04ad_96: 	dc.w DPLC_04ad_2B1-DPLC_04ad
00025274 0000                       DPLC_04ad_98: 	dc.w DPLC_04ad_2B8-DPLC_04ad
00025276 0000                       DPLC_04ad_9A: 	dc.w DPLC_04ad_2C3-DPLC_04ad
00025278 0000                       DPLC_04ad_9C: 	dc.w DPLC_04ad_2CE-DPLC_04ad
0002527A 0000                       DPLC_04ad_9E: 	dc.w DPLC_04ad_2D3-DPLC_04ad
0002527C 0000                       DPLC_04ad_A0: 	dc.w DPLC_04ad_2DA-DPLC_04ad
0002527E 0000                       DPLC_04ad_A2: 	dc.w DPLC_04ad_2DD-DPLC_04ad
00025280 0000                       DPLC_04ad_A4: 	dc.w DPLC_04ad_2E0-DPLC_04ad
00025282 0000                       DPLC_04ad_A6: 	dc.w DPLC_04ad_2E3-DPLC_04ad
00025284 0000                       DPLC_04ad_A8: 	dc.w DPLC_04ad_2E8-DPLC_04ad
00025286 0000                       DPLC_04ad_AA: 	dc.w DPLC_04ad_2EF-DPLC_04ad
00025288 0000                       DPLC_04ad_AC: 	dc.w DPLC_04ad_2F6-DPLC_04ad
0002528A 0000                       DPLC_04ad_AE: 	dc.w DPLC_04ad_2FD-DPLC_04ad
0002528C 0000                       DPLC_04ad_B0: 	dc.w DPLC_04ad_302-DPLC_04ad
0002528E 0000                       DPLC_04ad_B2: 	dc.w DPLC_04ad_307-DPLC_04ad
00025290 0000                       DPLC_04ad_B4: 	dc.w DPLC_04ad_30C-DPLC_04ad
00025292 00                         DPLC_04ad_B6: 	dc.b $0
00025293 02                         DPLC_04ad_B7: 	dc.b $2
00025294 F000                       	dc.b $F0, $0
00025296 1010                       	dc.b $10, $10
00025298 03                         DPLC_04ad_BC: 	dc.b $3
00025299 5012                       	dc.b $50, $12
0002529B 5018                       	dc.b $50, $18
0002529D 201E                       	dc.b $20, $1E
0002529F 03                         DPLC_04ad_C3: 	dc.b $3
000252A0 5021                       	dc.b $50, $21
000252A2 5018                       	dc.b $50, $18
000252A4 201E                       	dc.b $20, $1E
000252A6 03                         DPLC_04ad_CA: 	dc.b $3
000252A7 5021                       	dc.b $50, $21
000252A9 5018                       	dc.b $50, $18
000252AB 2027                       	dc.b $20, $27
000252AD 03                         DPLC_04ad_D1: 	dc.b $3
000252AE 802A                       	dc.b $80, $2A
000252B0 2033                       	dc.b $20, $33
000252B2 2036                       	dc.b $20, $36
000252B4 04                         DPLC_04ad_D8: 	dc.b $4
000252B5 7039                       	dc.b $70, $39
000252B7 5041                       	dc.b $50, $41
000252B9 5047                       	dc.b $50, $47
000252BB 104D                       	dc.b $10, $4D
000252BD 02                         DPLC_04ad_E1: 	dc.b $2
000252BE 7039                       	dc.b $70, $39
000252C0 B04F                       	dc.b $B0, $4F
000252C2 02                         DPLC_04ad_E6: 	dc.b $2
000252C3 505B                       	dc.b $50, $5B
000252C5 8061                       	dc.b $80, $61
000252C7 04                         DPLC_04ad_EB: 	dc.b $4
000252C8 505B                       	dc.b $50, $5B
000252CA 506A                       	dc.b $50, $6A
000252CC 5070                       	dc.b $50, $70
000252CE 1076                       	dc.b $10, $76
000252D0 02                         DPLC_04ad_F4: 	dc.b $2
000252D1 F4F0                       	dc.b $F4, $F0
000252D3 1500                       	dc.b $15, $0
000252D5 03                         DPLC_04ad_F9: 	dc.b $3
000252D6 7039                       	dc.b $70, $39
000252D8 3078                       	dc.b $30, $78
000252DA 507C                       	dc.b $50, $7C
000252DC 05                         DPLC_04ad_100: 	dc.b $5
000252DD 5082                       	dc.b $50, $82
000252DF 5088                       	dc.b $50, $88
000252E1 208E                       	dc.b $20, $8E
000252E3 5091                       	dc.b $50, $91
000252E5 0097                       	dc.b $0, $97
000252E7 06                         DPLC_04ad_10B: 	dc.b $6
000252E8 5082                       	dc.b $50, $82
000252EA 1098                       	dc.b $10, $98
000252EC 309A                       	dc.b $30, $9A
000252EE 509E                       	dc.b $50, $9E
000252F0 30A4                       	dc.b $30, $A4
000252F2 00A8                       	dc.b $0, $A8
000252F4 04                         DPLC_04ad_118: 	dc.b $4
000252F5 50A9                       	dc.b $50, $A9
000252F7 10AF                       	dc.b $10, $AF
000252F9 70B1                       	dc.b $70, $B1
000252FB 20B9                       	dc.b $20, $B9
000252FD 05                         DPLC_04ad_121: 	dc.b $5
000252FE 50BC                       	dc.b $50, $BC
00025300 30C2                       	dc.b $30, $C2
00025302 70C6                       	dc.b $70, $C6
00025304 20CE                       	dc.b $20, $CE
00025306 10D1                       	dc.b $10, $D1
00025308 04                         DPLC_04ad_12C: 	dc.b $4
00025309 50BC                       	dc.b $50, $BC
0002530B 10D3                       	dc.b $10, $D3
0002530D 70D5                       	dc.b $70, $D5
0002530F 20DD                       	dc.b $20, $DD
00025311 05                         DPLC_04ad_135: 	dc.b $5
00025312 5082                       	dc.b $50, $82
00025314 1098                       	dc.b $10, $98
00025316 008E                       	dc.b $0, $8E
00025318 70E0                       	dc.b $70, $E0
0002531A 20E8                       	dc.b $20, $E8
0002531C 04                         DPLC_04ad_140: 	dc.b $4
0002531D 70EB                       	dc.b $70, $EB
0002531F 50F3                       	dc.b $50, $F3
00025321 10F9                       	dc.b $10, $F9
00025323 50FB                       	dc.b $50, $FB
00025325 02                         DPLC_04ad_149: 	dc.b $2
00025326 70EB                       	dc.b $70, $EB
00025328 B101                       	dc.b $B1, $1
0002532A 02                         DPLC_04ad_14E: 	dc.b $2
0002532B 510D                       	dc.b $51, $D
0002532D 8113                       	dc.b $81, $13
0002532F 04                         DPLC_04ad_153: 	dc.b $4
00025330 510D                       	dc.b $51, $D
00025332 511C                       	dc.b $51, $1C
00025334 1122                       	dc.b $11, $22
00025336 5124                       	dc.b $51, $24
00025338 02                         DPLC_04ad_15C: 	dc.b $2
00025339 510D                       	dc.b $51, $D
0002533B B12A                       	dc.b $B1, $2A
0002533D 03                         DPLC_04ad_161: 	dc.b $3
0002533E 70EB                       	dc.b $70, $EB
00025340 0101                       	dc.b $1, $1
00025342 8136                       	dc.b $81, $36
00025344 06                         DPLC_04ad_168: 	dc.b $6
00025345 513F                       	dc.b $51, $3F
00025347 1145                       	dc.b $11, $45
00025349 1147                       	dc.b $11, $47
0002534B 8149                       	dc.b $81, $49
0002534D 0152                       	dc.b $1, $52
0002534F 0153                       	dc.b $1, $53
00025351 06                         DPLC_04ad_175: 	dc.b $6
00025352 513F                       	dc.b $51, $3F
00025354 2154                       	dc.b $21, $54
00025356 1157                       	dc.b $11, $57
00025358 1159                       	dc.b $11, $59
0002535A 815B                       	dc.b $81, $5B
0002535C 0152                       	dc.b $1, $52
0002535E 04                         DPLC_04ad_182: 	dc.b $4
0002535F 5164                       	dc.b $51, $64
00025361 116A                       	dc.b $11, $6A
00025363 816C                       	dc.b $81, $6C
00025365 1175                       	dc.b $11, $75
00025367 05                         DPLC_04ad_18B: 	dc.b $5
00025368 5177                       	dc.b $51, $77
0002536A 217D                       	dc.b $21, $7D
0002536C 1180                       	dc.b $11, $80
0002536E 7182                       	dc.b $71, $82
00025370 218A                       	dc.b $21, $8A
00025372 04                         DPLC_04ad_196: 	dc.b $4
00025373 5177                       	dc.b $51, $77
00025375 118D                       	dc.b $11, $8D
00025377 818F                       	dc.b $81, $8F
00025379 1198                       	dc.b $11, $98
0002537B 05                         DPLC_04ad_19F: 	dc.b $5
0002537C 513F                       	dc.b $51, $3F
0002537E 819A                       	dc.b $81, $9A
00025380 1159                       	dc.b $11, $59
00025382 11A3                       	dc.b $11, $A3
00025384 0152                       	dc.b $1, $52
00025386 02                         DPLC_04ad_1AA: 	dc.b $2
00025387 51A5                       	dc.b $51, $A5
00025389 B1AB                       	dc.b $B1, $AB
0002538B 02                         DPLC_04ad_1AF: 	dc.b $2
0002538C 505B                       	dc.b $50, $5B
0002538E B1B7                       	dc.b $B1, $B7
00025390 02                         DPLC_04ad_1B4: 	dc.b $2
00025391 51A5                       	dc.b $51, $A5
00025393 B1C3                       	dc.b $B1, $C3
00025395 02                         DPLC_04ad_1B9: 	dc.b $2
00025396 505B                       	dc.b $50, $5B
00025398 B1CF                       	dc.b $B1, $CF
0002539A 04                         DPLC_04ad_1BE: 	dc.b $4
0002539B 51DB                       	dc.b $51, $DB
0002539D 11E1                       	dc.b $11, $E1
0002539F B1E3                       	dc.b $B1, $E3
000253A1 01EF                       	dc.b $1, $EF
000253A3 03                         DPLC_04ad_1C7: 	dc.b $3
000253A4 51F0                       	dc.b $51, $F0
000253A6 11F6                       	dc.b $11, $F6
000253A8 B1F8                       	dc.b $B1, $F8
000253AA 04                         DPLC_04ad_1CE: 	dc.b $4
000253AB 51DB                       	dc.b $51, $DB
000253AD 1204                       	dc.b $12, $4
000253AF B206                       	dc.b $B2, $6
000253B1 01EF                       	dc.b $1, $EF
000253B3 03                         DPLC_04ad_1D7: 	dc.b $3
000253B4 51F0                       	dc.b $51, $F0
000253B6 11F6                       	dc.b $11, $F6
000253B8 B212                       	dc.b $B2, $12
000253BA 02                         DPLC_04ad_1DE: 	dc.b $2
000253BB 521E                       	dc.b $52, $1E
000253BD B224                       	dc.b $B2, $24
000253BF 02                         DPLC_04ad_1E3: 	dc.b $2
000253C0 510D                       	dc.b $51, $D
000253C2 B230                       	dc.b $B2, $30
000253C4 02                         DPLC_04ad_1E8: 	dc.b $2
000253C5 521E                       	dc.b $52, $1E
000253C7 B23C                       	dc.b $B2, $3C
000253C9 02                         DPLC_04ad_1ED: 	dc.b $2
000253CA 510D                       	dc.b $51, $D
000253CC B248                       	dc.b $B2, $48
000253CE 04                         DPLC_04ad_1F2: 	dc.b $4
000253CF 5254                       	dc.b $52, $54
000253D1 125A                       	dc.b $12, $5A
000253D3 B25C                       	dc.b $B2, $5C
000253D5 0268                       	dc.b $2, $68
000253D7 02                         DPLC_04ad_1FB: 	dc.b $2
000253D8 7269                       	dc.b $72, $69
000253DA B271                       	dc.b $B2, $71
000253DC 04                         DPLC_04ad_200: 	dc.b $4
000253DD 5254                       	dc.b $52, $54
000253DF 127D                       	dc.b $12, $7D
000253E1 B27F                       	dc.b $B2, $7F
000253E3 0268                       	dc.b $2, $68
000253E5 02                         DPLC_04ad_209: 	dc.b $2
000253E6 7269                       	dc.b $72, $69
000253E8 B28B                       	dc.b $B2, $8B
000253EA 01                         DPLC_04ad_20E: 	dc.b $1
000253EB F297                       	dc.b $F2, $97
000253ED 01                         DPLC_04ad_211: 	dc.b $1
000253EE F2A7                       	dc.b $F2, $A7
000253F0 01                         DPLC_04ad_214: 	dc.b $1
000253F1 F2B7                       	dc.b $F2, $B7
000253F3 01                         DPLC_04ad_217: 	dc.b $1
000253F4 F2C7                       	dc.b $F2, $C7
000253F6 01                         DPLC_04ad_21A: 	dc.b $1
000253F7 F2D7                       	dc.b $F2, $D7
000253F9 02                         DPLC_04ad_21D: 	dc.b $2
000253FA B2E7                       	dc.b $B2, $E7
000253FC 22F3                       	dc.b $22, $F3
000253FE 01                         DPLC_04ad_222: 	dc.b $1
000253FF F2F6                       	dc.b $F2, $F6
00025401 02                         DPLC_04ad_225: 	dc.b $2
00025402 B306                       	dc.b $B3, $6
00025404 2312                       	dc.b $23, $12
00025406 01                         DPLC_04ad_22A: 	dc.b $1
00025407 F315                       	dc.b $F3, $15
00025409 02                         DPLC_04ad_22D: 	dc.b $2
0002540A 5325                       	dc.b $53, $25
0002540C B32B                       	dc.b $B3, $2B
0002540E 04                         DPLC_04ad_232: 	dc.b $4
0002540F 5337                       	dc.b $53, $37
00025411 733D                       	dc.b $73, $3D
00025413 1345                       	dc.b $13, $45
00025415 0347                       	dc.b $3, $47
00025417 02                         DPLC_04ad_23B: 	dc.b $2
00025418 D348                       	dc.b $D3, $48
0002541A 34EC                       	dc.b $34, $EC
0002541C 02                         DPLC_04ad_240: 	dc.b $2
0002541D F528                       	dc.b $F5, $28
0002541F 0538                       	dc.b $5, $38
00025421 02                         DPLC_04ad_245: 	dc.b $2
00025422 F539                       	dc.b $F5, $39
00025424 0549                       	dc.b $5, $49
00025426 02                         DPLC_04ad_24A: 	dc.b $2
00025427 E356                       	dc.b $E3, $56
00025429 054A                       	dc.b $5, $4A
0002542B 01                         DPLC_04ad_24F: 	dc.b $1
0002542C 8365                       	dc.b $83, $65
0002542E 03                         DPLC_04ad_252: 	dc.b $3
0002542F 736E                       	dc.b $73, $6E
00025431 0376                       	dc.b $3, $76
00025433 3377                       	dc.b $33, $77
00025435 02                         DPLC_04ad_259: 	dc.b $2
00025436 E37B                       	dc.b $E3, $7B
00025438 054A                       	dc.b $5, $4A
0002543A 03                         DPLC_04ad_25E: 	dc.b $3
0002543B B38A                       	dc.b $B3, $8A
0002543D 1396                       	dc.b $13, $96
0002543F 0398                       	dc.b $3, $98
00025441 04                         DPLC_04ad_265: 	dc.b $4
00025442 B399                       	dc.b $B3, $99
00025444 33A5                       	dc.b $33, $A5
00025446 03A9                       	dc.b $3, $A9
00025448 03AA                       	dc.b $3, $AA
0002544A 04                         DPLC_04ad_26E: 	dc.b $4
0002544B B3AB                       	dc.b $B3, $AB
0002544D 33B7                       	dc.b $33, $B7
0002544F 03BB                       	dc.b $3, $BB
00025451 03BC                       	dc.b $3, $BC
00025453 05                         DPLC_04ad_277: 	dc.b $5
00025454 83BD                       	dc.b $83, $BD
00025456 13C6                       	dc.b $13, $C6
00025458 53C8                       	dc.b $53, $C8
0002545A 13CE                       	dc.b $13, $CE
0002545C 03D0                       	dc.b $3, $D0
0002545E 05                         DPLC_04ad_282: 	dc.b $5
0002545F 83D1                       	dc.b $83, $D1
00025461 13DA                       	dc.b $13, $DA
00025463 53C8                       	dc.b $53, $C8
00025465 13CE                       	dc.b $13, $CE
00025467 03D0                       	dc.b $3, $D0
00025469 02                         DPLC_04ad_28D: 	dc.b $2
0002546A 83DC                       	dc.b $83, $DC
0002546C 73E5                       	dc.b $73, $E5
0002546E 03                         DPLC_04ad_292: 	dc.b $3
0002546F 83ED                       	dc.b $83, $ED
00025471 23F6                       	dc.b $23, $F6
00025473 13F9                       	dc.b $13, $F9
00025475 02                         DPLC_04ad_299: 	dc.b $2
00025476 83FB                       	dc.b $83, $FB
00025478 7404                       	dc.b $74, $4
0002547A 03                         DPLC_04ad_29E: 	dc.b $3
0002547B 83ED                       	dc.b $83, $ED
0002547D 240C                       	dc.b $24, $C
0002547F 140F                       	dc.b $14, $F
00025481 02                         DPLC_04ad_2A5: 	dc.b $2
00025482 5411                       	dc.b $54, $11
00025484 B417                       	dc.b $B4, $17
00025486 03                         DPLC_04ad_2AA: 	dc.b $3
00025487 8423                       	dc.b $84, $23
00025489 342C                       	dc.b $34, $2C
0002548B 0430                       	dc.b $4, $30
0002548D 03                         DPLC_04ad_2B1: 	dc.b $3
0002548E 7431                       	dc.b $74, $31
00025490 1439                       	dc.b $14, $39
00025492 B43B                       	dc.b $B4, $3B
00025494 05                         DPLC_04ad_2B8: 	dc.b $5
00025495 7447                       	dc.b $74, $47
00025497 144F                       	dc.b $14, $4F
00025499 5451                       	dc.b $54, $51
0002549B 3457                       	dc.b $34, $57
0002549D 045B                       	dc.b $4, $5B
0002549F 05                         DPLC_04ad_2C3: 	dc.b $5
000254A0 745C                       	dc.b $74, $5C
000254A2 144F                       	dc.b $14, $4F
000254A4 5464                       	dc.b $54, $64
000254A6 3457                       	dc.b $34, $57
000254A8 045B                       	dc.b $4, $5B
000254AA 02                         DPLC_04ad_2CE: 	dc.b $2
000254AB 246A                       	dc.b $24, $6A
000254AD F46D                       	dc.b $F4, $6D
000254AF 03                         DPLC_04ad_2D3: 	dc.b $3
000254B0 247D                       	dc.b $24, $7D
000254B2 B480                       	dc.b $B4, $80
000254B4 248C                       	dc.b $24, $8C
000254B6 01                         DPLC_04ad_2DA: 	dc.b $1
000254B7 B48F                       	dc.b $B4, $8F
000254B9 01                         DPLC_04ad_2DD: 	dc.b $1
000254BA 549B                       	dc.b $54, $9B
000254BC 01                         DPLC_04ad_2E0: 	dc.b $1
000254BD 14A1                       	dc.b $14, $A1
000254BF 02                         DPLC_04ad_2E3: 	dc.b $2
000254C0 E356                       	dc.b $E3, $56
000254C2 054A                       	dc.b $5, $4A
000254C4 03                         DPLC_04ad_2E8: 	dc.b $3
000254C5 736E                       	dc.b $73, $6E
000254C7 0376                       	dc.b $3, $76
000254C9 3377                       	dc.b $33, $77
000254CB 03                         DPLC_04ad_2EF: 	dc.b $3
000254CC B4A3                       	dc.b $B4, $A3
000254CE 14AF                       	dc.b $14, $AF
000254D0 34B1                       	dc.b $34, $B1
000254D2 03                         DPLC_04ad_2F6: 	dc.b $3
000254D3 54B5                       	dc.b $54, $B5
000254D5 B4BB                       	dc.b $B4, $BB
000254D7 1074                       	dc.b $10, $74
000254D9 02                         DPLC_04ad_2FD: 	dc.b $2
000254DA F4C7                       	dc.b $F4, $C7
000254DC 24D7                       	dc.b $24, $D7
000254DE 02                         DPLC_04ad_302: 	dc.b $2
000254DF F4DA                       	dc.b $F4, $DA
000254E1 14EA                       	dc.b $14, $EA
000254E3 02                         DPLC_04ad_307: 	dc.b $2
000254E4 F502                       	dc.b $F5, $2
000254E6 2512                       	dc.b $25, $12
000254E8 02                         DPLC_04ad_30C: 	dc.b $2
000254E9 F515                       	dc.b $F5, $15
000254EB 2525                       	dc.b $25, $25
000254EE 00                         	even
000254EE 00                         	even
000254EE                            
000254EE                            ; ---------------------------------------------------------------------------
000254EE                            ; Uncompressed graphics	- Sonic
000254EE                            ; ---------------------------------------------------------------------------
000254EE                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002FE4E                            		even
0002FE4E                            ; ---------------------------------------------------------------------------
0002FE4E                            ; Compressed graphics - various
0002FE4E                            ; ---------------------------------------------------------------------------
0002FE4E                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002FF52                            		even
0002FF52                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002FF8C                            		even
0002FF8C                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030122                            		even
00030122                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003026A                            		even
0003026A                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030374                            		even
00030374                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
000303C6                            		even
000303C6                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0003060E                            		even
0003060E                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030794                            		even
00030794                            ; ---------------------------------------------------------------------------
00030794                            ; Sprite mappings - walls of the special stage
00030794                            ; ---------------------------------------------------------------------------
00030794                            Map_SSWalls:
00030794                            	include "_maps\SSwalls.asm"
00030794                            ; ---------------------------------------------------------------------------
00030794                            ; Sprite mappings - walls of the special stage
00030794                            ; ---------------------------------------------------------------------------
00030794 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030798 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003079C 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
000307A0 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
000307A4 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
000307A8 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
000307AC 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
000307B0 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
000307B4 01                         byte_2C584:	dc.b 1
000307B5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000307BA 01                         byte_2C58A:	dc.b 1
000307BB F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000307C0 01                         byte_2C590:	dc.b 1
000307C1 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
000307C6 01                         byte_2C596:	dc.b 1
000307C7 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
000307CC 01                         byte_2C59C:	dc.b 1
000307CD F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
000307D2 01                         byte_2C5A2:	dc.b 1
000307D3 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
000307D8 01                         byte_2C5A8:	dc.b 1
000307D9 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
000307DE 01                         byte_2C5AE:	dc.b 1
000307DF F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
000307E4 01                         byte_2C5B4:	dc.b 1
000307E5 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
000307EA 01                         byte_2C5BA:	dc.b 1
000307EB F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
000307F0 01                         byte_2C5C0:	dc.b 1
000307F1 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
000307F6 01                         byte_2C5C6:	dc.b 1
000307F7 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
000307FC 01                         byte_2C5CC:	dc.b 1
000307FD F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030802 01                         byte_2C5D2:	dc.b 1
00030803 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030808 01                         byte_2C5D8:	dc.b 1
00030809 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003080E 01                         byte_2C5DE:	dc.b 1
0003080F F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030814                            		even
00030814                            		even
00030814                            ; ---------------------------------------------------------------------------
00030814                            ; Compressed graphics - special stage
00030814                            ; ---------------------------------------------------------------------------
00030814                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0003114C                            		even
0003114C                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031280                            		even
00031280                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00031F10                            		even
00031F10                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032210                            		even
00032210                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00032704                            		even
00032704                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000327F2                            		even
000327F2                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000328C2                            		even
000328C2                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000329B8                            		even
000329B8                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00032A16                            		even
00032A16                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00032AA8                            		even
00032AA8                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00032B6A                            		even
00032B6A                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00032C38                            		even
00032C38                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00032D04                            		even
00032D04                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00032DCC                            		even
00032DCC                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00032E96                            		even
00032E96                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00032F66                            		even
00032F66                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0003315A                            		even
0003315A                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
000332C2                            		even
000332C2                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00033372                            		even
00033372                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003344C                            		even
0003344C                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000334D0                            		even
000334D0                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003364E                            		even
0003364E                            ; ---------------------------------------------------------------------------
0003364E                            ; Compressed graphics - GHZ stuff
0003364E                            ; ---------------------------------------------------------------------------
0003364E                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00033698                            		even
00033698                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000337B2                            		even
000337B2                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003389E                            		even
0003389E                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000338E6                            		even
000338E6                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00033A84                            		even
00033A84                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00033B00                            		even
00033B00                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00033D14                            		even
00033D14                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00033E40                            		even
00033E40                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00033F6E                            		even
00033F6E                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003400C                            		even
0003400C                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0003406C                            		even
0003406C                            ; ---------------------------------------------------------------------------
0003406C                            ; Compressed graphics - LZ stuff
0003406C                            ; ---------------------------------------------------------------------------
0003406C                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034190                            		even
00034190                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00034984                            		even
00034984                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00034B04                            		even
00034B04                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00034C6E                            		even
00034C6E                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000352C4                            		even
000352C4                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003537A                            		even
0003537A                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003541C                            		even
0003541C                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00035578                            		even
00035578                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000355DC                            		even
000355DC                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003572E                            		even
0003572E                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00035C10                            		even
00035C10                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00035D80                            		even
00035D80                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036038                            		even
00036038                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036170                            		even
00036170                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003629A                            		even
0003629A                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000363AA                            		even
000363AA                            ; ---------------------------------------------------------------------------
000363AA                            ; Compressed graphics - MZ stuff
000363AA                            ; ---------------------------------------------------------------------------
000363AA                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00036638                            		even
00036638                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000366F6                            		even
000366F6                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000367AE                            		even
000367AE                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00036802                            		even
00036802                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00036AE0                            		even
00036AE0                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000373F6                            		even
000373F6                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003755A                            		even
0003755A                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000375E2                            		even
000375E2                            ; ---------------------------------------------------------------------------
000375E2                            ; Compressed graphics - SLZ stuff
000375E2                            ; ---------------------------------------------------------------------------
000375E2                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003781E                            		even
0003781E                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00037964                            		even
00037964                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00037BA8                            		even
00037BA8                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00037C0A                            		even
00037C0A                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00037CEC                            		even
00037CEC                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00037ECE                            		even
00037ECE                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00037FDA                            		even
00037FDA                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003807E                            		even
0003807E                            ; ---------------------------------------------------------------------------
0003807E                            ; Compressed graphics - SYZ stuff
0003807E                            ; ---------------------------------------------------------------------------
0003807E                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000381E8                            		even
000381E8                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003824A                            		even
0003824A                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003832C                            		even
0003832C                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000385BA                            		even
000385BA                            ; ---------------------------------------------------------------------------
000385BA                            ; Compressed graphics - SBZ stuff
000385BA                            ; ---------------------------------------------------------------------------
000385BA                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003860E                            		even
0003860E                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000388AA                            		even
000388AA                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00038AAE                            		even
00038AAE                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00038C4C                            		even
00038C4C                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00038F7C                            		even
00038F7C                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003915A                            		even
0003915A                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
000391B2                            		even
000391B2                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003937C 00                         		even
0003937C                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003947A                            		even
0003947A                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00039606                            		even
00039606                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00039656                            		even
00039656                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
000396AE                            		even
000396AE                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
000397AA                            		even
000397AA                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
000398C0                            		even
000398C0                            ; ---------------------------------------------------------------------------
000398C0                            ; Compressed graphics - enemies
000398C0                            ; ---------------------------------------------------------------------------
000398C0                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00039C80                            		even
00039C80                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00039E2A 00                         		even
00039E2A                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003A1EC 00                         		even
0003A1EC                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003A3D4                            		even
0003A3D4                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003A58C 00                         		even
0003A58C                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003A7F4                            		even
0003A7F4                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003AA7E                            		even
0003AA7E                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003B0A2                            		even
0003B0A2                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003B298                            		even
0003B298                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003B8B6                            		even
0003B8B6                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003BC9E                            		even
0003BC9E                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003BF9A                            		even
0003BF9A                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003C1E2                            		even
0003C1E2                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003C47A                            		even
0003C47A                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003C658                            		even
0003C658                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003C7E6                            		even
0003C7E6                            ; ---------------------------------------------------------------------------
0003C7E6                            ; Compressed graphics - various
0003C7E6                            ; ---------------------------------------------------------------------------
0003C7E6                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003CDF4                            		even
0003CDF4                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003CEEA                            		even
0003CEEA                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003CFF0                            		even
0003CFF0                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003D0E4                            		even
0003D0E4                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003D628                            		even
0003D628                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003DC8E                            		even
0003DC8E                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003DD3E                            		even
0003DD3E                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003DED0                            		even
0003DED0                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003DFD2                            		even
0003DFD2                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003E0AE                            		even
0003E0AE                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003E52A                            		even
0003E52A                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003E5EA                            		even
0003E5EA                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003E75E                            		even
0003E75E                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003EA60                            		even
0003EA60                            ; ---------------------------------------------------------------------------
0003EA60                            ; Compressed graphics - continue screen
0003EA60                            ; ---------------------------------------------------------------------------
0003EA60                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003ED10                            		even
0003ED10                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003EF4A                            		even
0003EF4A                            ; ---------------------------------------------------------------------------
0003EF4A                            ; Compressed graphics - animals
0003EF4A                            ; ---------------------------------------------------------------------------
0003EF4A                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003F0A2                            		even
0003F0A2                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003F1FE                            		even
0003F1FE                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003F37A                            		even
0003F37A                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003F496                            		even
0003F496                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003F5CC                            		even
0003F5CC                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003F706                            		even
0003F706                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003F862                            		even
0003F862                            ; ---------------------------------------------------------------------------
0003F862                            ; Compressed graphics - primary patterns and block mappings
0003F862                            ; ---------------------------------------------------------------------------
0003F862                            Blk16_GHZ:	incbin	map16\ghz.bin
00040176                            		even
00040176                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00041A84                            		even
00041A84                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00042E04                            		even
00042E04                            Blk256_GHZ:	incbin	map256\ghz.bin
00045102                            		even
00045102                            Blk16_LZ:	incbin	map16\lz.bin
0004583C                            		even
0004583C                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00047C3E                            		even
00047C3E                            Blk256_LZ:	incbin	map256\lz.bin
0004A5BE                            		even
0004A5BE                            Blk16_MZ:	incbin	map16\mz.bin
0004AD1A                            		even
0004AD1A                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004D5A2                            		even
0004D5A2                            Blk256_MZ:	incbin	map256\mz.bin
0004ED26                            		even
0004ED26                            Blk16_SLZ:	incbin	map16\slz.bin
0004F00C                            		even
0004F00C                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005012E                            		even
0005012E                            Blk256_SLZ:	incbin	map256\slz.bin
000502E8                            		even
000502E8                            Blk16_SYZ:	incbin	map16\syz.bin
00050F0E                            		even
00050F0E                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000554A0                            		even
000554A0                            Blk256_SYZ:	incbin	map256\syz.bin
000574FC                            		even
000574FC                            Blk16_SBZ:	incbin	map16\sbz.bin
00058444                            		even
00058444                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005AE08                            		even
0005AE08                            Blk256_SBZ:	incbin	map256\sbz.bin
0005D8FE                            		even
0005D8FE                            ; ---------------------------------------------------------------------------
0005D8FE                            ; Compressed graphics - bosses and ending sequence
0005D8FE                            ; ---------------------------------------------------------------------------
0005D8FE                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005E118 00                         		even
0005E118                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005E402                            		even
0005E402                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0005EC86                            		even
0005EC86                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0005F9DC 00                         		even
0005F9DC                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00060144                            		even
00060144                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000606C4                            		even
000606C4                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000607E4                            		even
000607E4                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000609E2                            		even
000609E2                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00061BC0                            		even
00061BC0                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00062504                            		even
00062504                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000628DA                            		even
000628DA                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00062E6A                            		even
00062E6A                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000630F2                            		even
000630F2                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000636F0                            		even
000636F0                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00063978                            		even
00063978                            		incbin	misc\padding2.bin
00063A7C                            		even
00063A7C                            ; ---------------------------------------------------------------------------
00063A7C                            ; Collision data
00063A7C                            ; ---------------------------------------------------------------------------
00063A7C                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00063B7C                            		even
00063B7C                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00064B7C                            		even
00064B7C                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00065B7C                            		even
00065B7C                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00065D34 00                         		even
00065D34                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00065E9C                            		even
00065E9C                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006602C                            		even
0006602C                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00066220                            		even
00066220                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00066426                            		even
00066426                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000666C4                            		even
000666C4                            ; ---------------------------------------------------------------------------
000666C4                            ; Special layouts
000666C4                            ; ---------------------------------------------------------------------------
000666C4                            SS_1:		incbin	sslayout\1.bin
0006693E                            		even
0006693E                            SS_2:		incbin	sslayout\2.bin
00066D50                            		even
00066D50                            SS_3:		incbin	sslayout\3.bin
000670AC                            		even
000670AC                            SS_4:		incbin	sslayout\4.bin
00067586                            		even
00067586                            SS_5:		incbin	sslayout\5.bin
00067A58                            		even
00067A58                            SS_6:		incbin	sslayout\6.bin
00067D68                            		even
00067D68                            ; ---------------------------------------------------------------------------
00067D68                            ; Animated uncompressed graphics
00067D68                            ; ---------------------------------------------------------------------------
00067D68                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00067F68                            		even
00067F68                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00068368                            		even
00068368                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
000687E8                            		even
000687E8                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00068AE8                            		even
00068AE8                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
000690E8                            		even
000690E8                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
000693E8                            		even
000693E8                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00069E68                            		even
00069E68                            
00069E68                            ; ---------------------------------------------------------------------------
00069E68                            ; Level	layout index
00069E68                            ; ---------------------------------------------------------------------------
00069E68 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00069E6E 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00069E74 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00069E7A 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00069E80 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00069E86 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00069E8C 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00069E92 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00069E98 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00069E9E 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00069EA4 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00069EAA 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00069EB0 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00069EB6 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00069EBC 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00069EC2 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00069EC8 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00069ECE 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00069ED4 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00069EDA 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00069EE0 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00069EE6 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00069EEC 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00069EF2 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00069EF8 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00069EFE 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00069F04 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00069F0A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00069F10                            
00069F10                            Level_GHZ1:	incbin	levels\ghz1.bin
0006A002                            		even
0006A002 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006A006                            Level_GHZ2:	incbin	levels\ghz2.bin
0006A0CE                            		even
0006A0CE 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006A0D2                            Level_GHZ3:	incbin	levels\ghz3.bin
0006A1F4                            		even
0006A1F4                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006A216                            		even
0006A216 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006A21A 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006A21E                            
0006A21E                            Level_LZ1:	incbin	levels\lz1.bin
0006A320                            		even
0006A320                            Level_LZbg:	incbin	levels\lzbg.bin
0006A422                            		even
0006A422 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006A426                            Level_LZ2:	incbin	levels\lz2.bin
0006A4C0                            		even
0006A4C0 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006A4C4                            Level_LZ3:	incbin	levels\lz3.bin
0006A5DE                            		even
0006A5DE 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006A5E2                            Level_SBZ3:	incbin	levels\sbz3.bin
0006A69C                            		even
0006A69C 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006A6A0                            
0006A6A0                            Level_MZ1:	incbin	levels\mz1.bin
0006A73E                            		even
0006A73E                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006A7B8                            		even
0006A7B8                            Level_MZ2:	incbin	levels\mz2.bin
0006A85C                            		even
0006A85C                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006A8EE                            		even
0006A8EE 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006A8F2                            Level_MZ3:	incbin	levels\mz3.bin
0006A9D4                            		even
0006A9D4                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006AA78 00                         		even
0006AA78 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006AA7C 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006AA80                            
0006AA80                            Level_SLZ1:	incbin	levels\slz1.bin
0006AB92                            		even
0006AB92                            Level_SLZbg:	incbin	levels\slzbg.bin
0006ABAC                            		even
0006ABAC                            Level_SLZ2:	incbin	levels\slz2.bin
0006AC9C                            		even
0006AC9C                            Level_SLZ3:	incbin	levels\slz3.bin
0006ADB6                            		even
0006ADB6 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006ADBA                            
0006ADBA                            Level_SYZ1:	incbin	levels\syz1.bin
0006AE76 00                         		even
0006AE76                            Level_SYZbg:	incbin	levels\syzbg.bin
0006AEB0                            		even
0006AEB0 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006AEB4                            Level_SYZ2:	incbin	levels\syz2.bin
0006AFB8                            		even
0006AFB8 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006AFBC                            Level_SYZ3:	incbin	levels\syz3.bin
0006B116 00                         		even
0006B116 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006B11A 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006B11E                            
0006B11E                            Level_SBZ1:	incbin	levels\sbz1.bin
0006B240                            		even
0006B240                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006B27E                            		even
0006B27E                            Level_SBZ2:	incbin	levels\sbz2.bin
0006B3C0                            		even
0006B3C0                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006B52A                            		even
0006B52A 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006B52E 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006B532                            Level_End:	incbin	levels\ending.bin
0006B562 00                         		even
0006B562 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006B566                            
0006B566                            ; ---------------------------------------------------------------------------
0006B566                            ; Animated uncompressed giant ring graphics
0006B566                            ; ---------------------------------------------------------------------------
0006B566                            Art_BigRing:	incbin	artunc\bigring.bin
0006C1A6                            		even
0006C1A6                            
0006C1A6                            		incbin	misc\padding3.bin
0006C242                            		even
0006C242                            
0006C242                            ; ---------------------------------------------------------------------------
0006C242                            ; Sprite locations index
0006C242                            ; ---------------------------------------------------------------------------
0006C242 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C246 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C24A 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C24E 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C252 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C256 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C25A 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C25E 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C262 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C266 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C26A 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C26E 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C272 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C276 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C27A 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C27E 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C282 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C286 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C28A 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C28E 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C292 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C296 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C29A 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C29E 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C2A2 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C2A6 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C2AA 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C2AE 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006C2B2 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006C2B6 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006C2BA 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006C2BE 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006C2C2 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006C2C6 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006C2CA 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006C2CE 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006C2D2 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006C2D8                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006CB1E                            		even
0006CB1E                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006CBD2                            		even
0006CBD2                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006D616                            		even
0006D616                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006D9BE                            		even
0006D9BE                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006DCF4                            		even
0006DCF4                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006E240                            		even
0006E240                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0006E6D8                            		even
0006E6D8                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0006E70A                            		even
0006E70A                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006E73C                            		even
0006E73C                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0006E76E                            		even
0006E76E                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0006E7A0                            		even
0006E7A0                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0006E7EA                            		even
0006E7EA                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0006E828                            		even
0006E828                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0006EB94                            		even
0006EB94                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006F03E                            		even
0006F03E                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0006F5B4                            		even
0006F5B4                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0006FAFA                            		even
0006FAFA                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0006FF62                            		even
0006FF62                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00070544                            		even
00070544                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00070BB6                            		even
00070BB6                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00071120                            		even
00071120                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00071726                            		even
00071726                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00071E64                            		even
00071E64                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00072542                            		even
00072542                            ObjPos_FZ:	incbin	objpos\fz.bin
00072554                            		even
00072554                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00072586                            		even
00072586                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000725B8                            		even
000725B8                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000725EA                            		even
000725EA                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007261C                            		even
0007261C                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007264E                            		even
0007264E                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00072686                            		even
00072686                            ObjPos_End:	incbin	objpos\ending.bin
000727E2                            		even
000727E2 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000727E8                            ; ---------------------------------------------------------------------------
000727E8                            		incbin	misc\padding4.bin
00072E12                            		even
00072E12                            
00072E12 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00072E16 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00072E1A 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00072E1E 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00072E22 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00072E26 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00072E2A                            ; ---------------------------------------------------------------------------
00072E2A                            ; PSG instruments used in music
00072E2A                            ; ---------------------------------------------------------------------------
00072E2A 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00072E36 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00072E42 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00072E4E                            PSG1:		incbin	sound\psg1.bin
00072E65                            PSG2:		incbin	sound\psg2.bin
00072E6C                            PSG3:		incbin	sound\psg3.bin
00072E7D                            PSG4:		incbin	sound\psg4.bin
00072E88                            PSG6:		incbin	sound\psg6.bin
00072E97                            PSG5:		incbin	sound\psg5.bin
00072EC1                            PSG7:		incbin	sound\psg7.bin
00072EDD                            PSG8:		incbin	sound\psg8.bin
00072F05                            PSG9:		incbin	sound\psg9.bin
00072F16                            
00072F16 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00072F1E                            ; ---------------------------------------------------------------------------
00072F1E                            ; Music	Pointers
00072F1E                            ; ---------------------------------------------------------------------------
00072F1E 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00072F26 0000 0000 0000 0000        		dc.l Music83, Music84
00072F2E 0000 0000 0000 0000        		dc.l Music85, Music86
00072F36 0000 0000 0000 0000        		dc.l Music87, Music88
00072F3E 0000 0000 0000 0000        		dc.l Music89, Music8A
00072F46 0000 0000 0000 0000        		dc.l Music8B, Music8C
00072F4E 0000 0000 0000 0000        		dc.l Music8D, Music8E
00072F56 0000 0000 0000 0000        		dc.l Music8F, Music90
00072F5E 0000 0000 0000 0000        		dc.l Music91, Music92
00072F66 0000 0000 0000 0000        		dc.l Music93, Music94
00072F6E 0000 0000 0000 0000        		dc.l Music95, Music96
00072F76 0000 0000 0000 0000        		dc.l Music97, Music98
00072F7E 0000 0000 0000 0000        		dc.l Music99, Music9A
00072F86 0000 0000 0000 0000        		dc.l Music9B, Music9C
00072F8E 0000 0000 0000 0000        		dc.l Music9D, Music9E
00072F96 0000 0000                  		dc.l Music9F
00072F9A                            ; ---------------------------------------------------------------------------
00072F9A                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00072F9A                            ; ---------------------------------------------------------------------------
00072F9A 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00072FAA 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00072FBA 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00072FCA 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00072FDA 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00072FEA 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00072FFA 9090 9090                  		dc.b $90, $90, $90, $90
00072FFE                            
00072FFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072FFE                            
00072FFE                            
00072FFE                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00072FFE 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00073006 4E71                       		nop	
00073008 4E71                       		nop	
0007300A 4E71                       		nop	
0007300C                            
0007300C                            loc_71B5A:
0007300C 0839 0000 00A1 1100        		btst	#0,($A11100).l
00073014 66F6                       		bne.s	loc_71B5A
00073016                            
00073016 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007301E 6700                       		beq.s	loc_71B82
00073020 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00073028 4E71                       		nop	
0007302A 4E71                       		nop	
0007302C 4E71                       		nop	
0007302E 4E71                       		nop	
00073030 4E71                       		nop	
00073032 60CA                       		bra.s	sub_71B4C
00073034                            ; ===========================================================================
00073034                            
00073034                            loc_71B82:
00073034 4DF9 00FF F000             		lea	($FFF000).l,a6
0007303A 422E 000E                  		clr.b	$E(a6)
0007303E 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00073042 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00073046 532E 0001                  		subq.b	#1,1(a6)
0007304A 6600                       		bne.s	loc_71B9E
0007304C 4EBA 0000                  		jsr	sub_7260C(pc)
00073050                            
00073050                            loc_71B9E:
00073050 102E 0004                  		move.b	4(a6),d0
00073054 6700                       		beq.s	loc_71BA8
00073056 4EBA 0000                  		jsr	sub_72504(pc)
0007305A                            
0007305A                            loc_71BA8:
0007305A 4A2E 0024                  		tst.b	$24(a6)
0007305E 6700                       		beq.s	loc_71BB2
00073060 4EBA 0000                  		jsr	sub_7267C(pc)
00073064                            
00073064                            loc_71BB2:
00073064 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00073068 6700                       		beq.s	loc_71BBC	; if not, branch
0007306A 4EBA 0000                  		jsr	Sound_Play(pc)
0007306E                            
0007306E                            loc_71BBC:
0007306E 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00073074 6700                       		beq.s	loc_71BC8
00073076 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007307A                            
0007307A                            loc_71BC8:
0007307A 4BEE 0040                  		lea	$40(a6),a5
0007307E 4A15                       		tst.b	(a5)
00073080 6A00                       		bpl.s	loc_71BD4
00073082 4EBA 0000                  		jsr	sub_71C4E(pc)
00073086                            
00073086                            loc_71BD4:
00073086 422E 0008                  		clr.b	8(a6)
0007308A 7E05                       		moveq	#5,d7
0007308C                            
0007308C                            loc_71BDA:
0007308C DAFC 0030                  		adda.w	#$30,a5
00073090 4A15                       		tst.b	(a5)
00073092 6A00                       		bpl.s	loc_71BE6
00073094 4EBA 0000                  		jsr	sub_71CCA(pc)
00073098                            
00073098                            loc_71BE6:
00073098 51CF FFF2                  		dbf	d7,loc_71BDA
0007309C                            
0007309C 7E02                       		moveq	#2,d7
0007309E                            
0007309E                            loc_71BEC:
0007309E DAFC 0030                  		adda.w	#$30,a5
000730A2 4A15                       		tst.b	(a5)
000730A4 6A00                       		bpl.s	loc_71BF8
000730A6 4EBA 0000                  		jsr	sub_72850(pc)
000730AA                            
000730AA                            loc_71BF8:
000730AA 51CF FFF2                  		dbf	d7,loc_71BEC
000730AE                            
000730AE 1D7C 0080 000E             		move.b	#$80,$E(a6)
000730B4 7E02                       		moveq	#2,d7
000730B6                            
000730B6                            loc_71C04:
000730B6 DAFC 0030                  		adda.w	#$30,a5
000730BA 4A15                       		tst.b	(a5)
000730BC 6A00                       		bpl.s	loc_71C10
000730BE 4EBA 0000                  		jsr	sub_71CCA(pc)
000730C2                            
000730C2                            loc_71C10:
000730C2 51CF FFF2                  		dbf	d7,loc_71C04
000730C6                            
000730C6 7E02                       		moveq	#2,d7
000730C8                            
000730C8                            loc_71C16:
000730C8 DAFC 0030                  		adda.w	#$30,a5
000730CC 4A15                       		tst.b	(a5)
000730CE 6A00                       		bpl.s	loc_71C22
000730D0 4EBA 0000                  		jsr	sub_72850(pc)
000730D4                            
000730D4                            loc_71C22:
000730D4 51CF FFF2                  		dbf	d7,loc_71C16
000730D8 1D7C 0040 000E             		move.b	#$40,$E(a6)
000730DE DAFC 0030                  		adda.w	#$30,a5
000730E2 4A15                       		tst.b	(a5)
000730E4 6A00                       		bpl.s	loc_71C38
000730E6 4EBA 0000                  		jsr	sub_71CCA(pc)
000730EA                            
000730EA                            loc_71C38:
000730EA DAFC 0030                  		adda.w	#$30,a5
000730EE 4A15                       		tst.b	(a5)
000730F0 6A00                       		bpl.s	loc_71C44
000730F2 4EBA 0000                  		jsr	sub_72850(pc)
000730F6                            
000730F6                            loc_71C44:
000730F6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000730FE 4E75                       		rts	
00073100                            ; End of function sub_71B4C
00073100                            
00073100                            
00073100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073100                            
00073100                            
00073100                            sub_71C4E:				; XREF: sub_71B4C
00073100 532D 000E                  		subq.b	#1,$E(a5)
00073104 6600                       		bne.s	locret_71CAA
00073106 1D7C 0080 0008             		move.b	#$80,8(a6)
0007310C 286D 0004                  		movea.l	4(a5),a4
00073110                            
00073110                            loc_71C5E:
00073110 7A00                       		moveq	#0,d5
00073112 1A1C                       		move.b	(a4)+,d5
00073114 0C05 00E0                  		cmpi.b	#-$20,d5
00073118 6500                       		bcs.s	loc_71C6E
0007311A 4EBA 0000                  		jsr	sub_72A5A(pc)
0007311E 60F0                       		bra.s	loc_71C5E
00073120                            ; ===========================================================================
00073120                            
00073120                            loc_71C6E:
00073120 4A05                       		tst.b	d5
00073122 6A00                       		bpl.s	loc_71C84
00073124 1B45 0010                  		move.b	d5,$10(a5)
00073128 1A1C                       		move.b	(a4)+,d5
0007312A 6A00                       		bpl.s	loc_71C84
0007312C 534C                       		subq.w	#1,a4
0007312E 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00073134 6000                       		bra.s	loc_71C88
00073136                            ; ===========================================================================
00073136                            
00073136                            loc_71C84:
00073136 4EBA 0000                  		jsr	sub_71D40(pc)
0007313A                            
0007313A                            loc_71C88:
0007313A 2B4C 0004                  		move.l	a4,4(a5)
0007313E 0815 0002                  		btst	#2,(a5)
00073142 6600                       		bne.s	locret_71CAA
00073144 7000                       		moveq	#0,d0
00073146 102D 0010                  		move.b	$10(a5),d0
0007314A 0C00 0080                  		cmpi.b	#$80,d0
0007314E 6700                       		beq.s	locret_71CAA
00073150 0800 0003                  		btst	#3,d0
00073154 6600                       		bne.s	loc_71CAC
00073156 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007315C                            
0007315C                            locret_71CAA:
0007315C 4E75                       		rts	
0007315E                            ; ===========================================================================
0007315E                            
0007315E                            loc_71CAC:
0007315E 0400 0088                  		subi.b	#$88,d0
00073162 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00073166 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007316C 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00073174 4E75                       		rts	
00073176                            ; End of function sub_71C4E
00073176                            
00073176                            ; ===========================================================================
00073176 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007317C                            
0007317C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007317C                            
0007317C                            
0007317C                            sub_71CCA:				; XREF: sub_71B4C
0007317C 532D 000E                  		subq.b	#1,$E(a5)
00073180 6600                       		bne.s	loc_71CE0
00073182 0895 0004                  		bclr	#4,(a5)
00073186 4EBA 0000                  		jsr	sub_71CEC(pc)
0007318A 4EBA 0000                  		jsr	sub_71E18(pc)
0007318E 6000 0000                  		bra.w	loc_726E2
00073192                            ; ===========================================================================
00073192                            
00073192                            loc_71CE0:
00073192 4EBA 0000                  		jsr	sub_71D9E(pc)
00073196 4EBA 0000                  		jsr	sub_71DC6(pc)
0007319A 6000 0000                  		bra.w	loc_71E24
0007319E                            ; End of function sub_71CCA
0007319E                            
0007319E                            
0007319E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007319E                            
0007319E                            
0007319E                            sub_71CEC:				; XREF: sub_71CCA
0007319E 286D 0004                  		movea.l	4(a5),a4
000731A2 0895 0001                  		bclr	#1,(a5)
000731A6                            
000731A6                            loc_71CF4:
000731A6 7A00                       		moveq	#0,d5
000731A8 1A1C                       		move.b	(a4)+,d5
000731AA 0C05 00E0                  		cmpi.b	#-$20,d5
000731AE 6500                       		bcs.s	loc_71D04
000731B0 4EBA 0000                  		jsr	sub_72A5A(pc)
000731B4 60F0                       		bra.s	loc_71CF4
000731B6                            ; ===========================================================================
000731B6                            
000731B6                            loc_71D04:
000731B6 4EBA 0000                  		jsr	sub_726FE(pc)
000731BA 4A05                       		tst.b	d5
000731BC 6A00                       		bpl.s	loc_71D1A
000731BE 4EBA 0000                  		jsr	sub_71D22(pc)
000731C2 1A1C                       		move.b	(a4)+,d5
000731C4 6A00                       		bpl.s	loc_71D1A
000731C6 534C                       		subq.w	#1,a4
000731C8 6000 0000                  		bra.w	sub_71D60
000731CC                            ; ===========================================================================
000731CC                            
000731CC                            loc_71D1A:
000731CC 4EBA 0000                  		jsr	sub_71D40(pc)
000731D0 6000 0000                  		bra.w	sub_71D60
000731D4                            ; End of function sub_71CEC
000731D4                            
000731D4                            
000731D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000731D4                            
000731D4                            
000731D4                            sub_71D22:				; XREF: sub_71CEC
000731D4 0405 0080                  		subi.b	#$80,d5
000731D8 6700                       		beq.s	loc_71D58
000731DA DA2D 0008                  		add.b	8(a5),d5
000731DE 0245 007F                  		andi.w	#$7F,d5
000731E2 E34D                       		lsl.w	#1,d5
000731E4 41FA 0000                  		lea	word_72790(pc),a0
000731E8 3C30 5000                  		move.w	(a0,d5.w),d6
000731EC 3B46 0010                  		move.w	d6,$10(a5)
000731F0 4E75                       		rts	
000731F2                            ; End of function sub_71D22
000731F2                            
000731F2                            
000731F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000731F2                            
000731F2                            
000731F2                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000731F2 1005                       		move.b	d5,d0
000731F4 122D 0002                  		move.b	2(a5),d1
000731F8                            
000731F8                            loc_71D46:
000731F8 5301                       		subq.b	#1,d1
000731FA 6700                       		beq.s	loc_71D4E
000731FC D005                       		add.b	d5,d0
000731FE 60F8                       		bra.s	loc_71D46
00073200                            ; ===========================================================================
00073200                            
00073200                            loc_71D4E:
00073200 1B40 000F                  		move.b	d0,$F(a5)
00073204 1B40 000E                  		move.b	d0,$E(a5)
00073208 4E75                       		rts	
0007320A                            ; End of function sub_71D40
0007320A                            
0007320A                            ; ===========================================================================
0007320A                            
0007320A                            loc_71D58:				; XREF: sub_71D22
0007320A 08D5 0001                  		bset	#1,(a5)
0007320E 426D 0010                  		clr.w	$10(a5)
00073212                            
00073212                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073212                            
00073212                            
00073212                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00073212 2B4C 0004                  		move.l	a4,4(a5)
00073216 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007321C 0815 0004                  		btst	#4,(a5)
00073220 6600                       		bne.s	locret_71D9C
00073222 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00073228 422D 000C                  		clr.b	$C(a5)
0007322C 0815 0003                  		btst	#3,(a5)
00073230 6700                       		beq.s	locret_71D9C
00073232 206D 0014                  		movea.l	$14(a5),a0
00073236 1B58 0018                  		move.b	(a0)+,$18(a5)
0007323A 1B58 0019                  		move.b	(a0)+,$19(a5)
0007323E 1B58 001A                  		move.b	(a0)+,$1A(a5)
00073242 1018                       		move.b	(a0)+,d0
00073244 E208                       		lsr.b	#1,d0
00073246 1B40 001B                  		move.b	d0,$1B(a5)
0007324A 426D 001C                  		clr.w	$1C(a5)
0007324E                            
0007324E                            locret_71D9C:
0007324E 4E75                       		rts	
00073250                            ; End of function sub_71D60
00073250                            
00073250                            
00073250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073250                            
00073250                            
00073250                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00073250 4A2D 0012                  		tst.b	$12(a5)
00073254 6700                       		beq.s	locret_71DC4
00073256 532D 0012                  		subq.b	#1,$12(a5)
0007325A 6600                       		bne.s	locret_71DC4
0007325C 08D5 0001                  		bset	#1,(a5)
00073260 4A2D 0001                  		tst.b	1(a5)
00073264 6B00 0000                  		bmi.w	loc_71DBE
00073268 4EBA 0000                  		jsr	sub_726FE(pc)
0007326C 584F                       		addq.w	#4,sp
0007326E 4E75                       		rts	
00073270                            ; ===========================================================================
00073270                            
00073270                            loc_71DBE:
00073270 4EBA 0000                  		jsr	sub_729A0(pc)
00073274 584F                       		addq.w	#4,sp
00073276                            
00073276                            locret_71DC4:
00073276 4E75                       		rts	
00073278                            ; End of function sub_71D9E
00073278                            
00073278                            
00073278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073278                            
00073278                            
00073278                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00073278 584F                       		addq.w	#4,sp
0007327A 0815 0003                  		btst	#3,(a5)
0007327E 6700                       		beq.s	locret_71E16
00073280 4A2D 0018                  		tst.b	$18(a5)
00073284 6700                       		beq.s	loc_71DDA
00073286 532D 0018                  		subq.b	#1,$18(a5)
0007328A 4E75                       		rts	
0007328C                            ; ===========================================================================
0007328C                            
0007328C                            loc_71DDA:
0007328C 532D 0019                  		subq.b	#1,$19(a5)
00073290 6700                       		beq.s	loc_71DE2
00073292 4E75                       		rts	
00073294                            ; ===========================================================================
00073294                            
00073294                            loc_71DE2:
00073294 206D 0014                  		movea.l	$14(a5),a0
00073298 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007329E 4A2D 001B                  		tst.b	$1B(a5)
000732A2 6600                       		bne.s	loc_71DFE
000732A4 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000732AA 442D 001A                  		neg.b	$1A(a5)
000732AE 4E75                       		rts	
000732B0                            ; ===========================================================================
000732B0                            
000732B0                            loc_71DFE:
000732B0 532D 001B                  		subq.b	#1,$1B(a5)
000732B4 1C2D 001A                  		move.b	$1A(a5),d6
000732B8 4886                       		ext.w	d6
000732BA DC6D 001C                  		add.w	$1C(a5),d6
000732BE 3B46 001C                  		move.w	d6,$1C(a5)
000732C2 DC6D 0010                  		add.w	$10(a5),d6
000732C6 594F                       		subq.w	#4,sp
000732C8                            
000732C8                            locret_71E16:
000732C8 4E75                       		rts	
000732CA                            ; End of function sub_71DC6
000732CA                            
000732CA                            
000732CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000732CA                            
000732CA                            
000732CA                            sub_71E18:				; XREF: sub_71CCA
000732CA 0815 0001                  		btst	#1,(a5)
000732CE 6600                       		bne.s	locret_71E48
000732D0 3C2D 0010                  		move.w	$10(a5),d6
000732D4 6700                       		beq.s	loc_71E4A
000732D6                            
000732D6                            loc_71E24:				; XREF: sub_71CCA
000732D6 102D 001E                  		move.b	$1E(a5),d0
000732DA 4880                       		ext.w	d0
000732DC DC40                       		add.w	d0,d6
000732DE 0815 0002                  		btst	#2,(a5)
000732E2 6600                       		bne.s	locret_71E48
000732E4 3206                       		move.w	d6,d1
000732E6 E049                       		lsr.w	#8,d1
000732E8 103C 00A4                  		move.b	#-$5C,d0
000732EC 4EBA 0000                  		jsr	sub_72722(pc)
000732F0 1206                       		move.b	d6,d1
000732F2 103C 00A0                  		move.b	#-$60,d0
000732F6 4EBA 0000                  		jsr	sub_72722(pc)
000732FA                            
000732FA                            locret_71E48:
000732FA 4E75                       		rts	
000732FC                            ; ===========================================================================
000732FC                            
000732FC                            loc_71E4A:
000732FC 08D5 0001                  		bset	#1,(a5)
00073300 4E75                       		rts	
00073302                            ; End of function sub_71E18
00073302                            
00073302                            ; ===========================================================================
00073302                            
00073302                            loc_71E50:				; XREF: sub_71B4C
00073302 6B00                       		bmi.s	loc_71E94
00073304 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007330A 6700 0000                  		beq.w	loc_71EFE
0007330E 1D7C 0002 0003             		move.b	#2,3(a6)
00073314 7602                       		moveq	#2,d3
00073316 103C 00B4                  		move.b	#-$4C,d0
0007331A 7200                       		moveq	#0,d1
0007331C                            
0007331C                            loc_71E6A:
0007331C 4EBA 0000                  		jsr	sub_7272E(pc)
00073320 4EBA 0000                  		jsr	sub_72764(pc)
00073324 5200                       		addq.b	#1,d0
00073326 51CB FFF4                  		dbf	d3,loc_71E6A
0007332A                            
0007332A 7602                       		moveq	#2,d3
0007332C 7028                       		moveq	#$28,d0
0007332E                            
0007332E                            loc_71E7C:
0007332E 1203                       		move.b	d3,d1
00073330 4EBA 0000                  		jsr	sub_7272E(pc)
00073334 5801                       		addq.b	#4,d1
00073336 4EBA 0000                  		jsr	sub_7272E(pc)
0007333A 51CB FFF2                  		dbf	d3,loc_71E7C
0007333E                            
0007333E 4EBA 0000                  		jsr	sub_729B6(pc)
00073342 6000 FDB2                  		bra.w	loc_71C44
00073346                            ; ===========================================================================
00073346                            
00073346                            loc_71E94:				; XREF: loc_71E50
00073346 422E 0003                  		clr.b	3(a6)
0007334A 7630                       		moveq	#$30,d3
0007334C 4BEE 0040                  		lea	$40(a6),a5
00073350 7806                       		moveq	#6,d4
00073352                            
00073352                            loc_71EA0:
00073352 0815 0007                  		btst	#7,(a5)
00073356 6700                       		beq.s	loc_71EB8
00073358 0815 0002                  		btst	#2,(a5)
0007335C 6600                       		bne.s	loc_71EB8
0007335E 103C 00B4                  		move.b	#-$4C,d0
00073362 122D 000A                  		move.b	$A(a5),d1
00073366 4EBA 0000                  		jsr	sub_72722(pc)
0007336A                            
0007336A                            loc_71EB8:
0007336A DAC3                       		adda.w	d3,a5
0007336C 51CC FFE4                  		dbf	d4,loc_71EA0
00073370                            
00073370 4BEE 0220                  		lea	$220(a6),a5
00073374 7802                       		moveq	#2,d4
00073376                            
00073376                            loc_71EC4:
00073376 0815 0007                  		btst	#7,(a5)
0007337A 6700                       		beq.s	loc_71EDC
0007337C 0815 0002                  		btst	#2,(a5)
00073380 6600                       		bne.s	loc_71EDC
00073382 103C 00B4                  		move.b	#-$4C,d0
00073386 122D 000A                  		move.b	$A(a5),d1
0007338A 4EBA 0000                  		jsr	sub_72722(pc)
0007338E                            
0007338E                            loc_71EDC:
0007338E DAC3                       		adda.w	d3,a5
00073390 51CC FFE4                  		dbf	d4,loc_71EC4
00073394                            
00073394 4BEE 0340                  		lea	$340(a6),a5
00073398 0815 0007                  		btst	#7,(a5)
0007339C 6700                       		beq.s	loc_71EFE
0007339E 0815 0002                  		btst	#2,(a5)
000733A2 6600                       		bne.s	loc_71EFE
000733A4 103C 00B4                  		move.b	#-$4C,d0
000733A8 122D 000A                  		move.b	$A(a5),d1
000733AC 4EBA 0000                  		jsr	sub_72722(pc)
000733B0                            
000733B0                            loc_71EFE:
000733B0 6000 FD44                  		bra.w	loc_71C44
000733B4                            
000733B4                            ; ---------------------------------------------------------------------------
000733B4                            ; Subroutine to	play a sound or	music track
000733B4                            ; ---------------------------------------------------------------------------
000733B4                            
000733B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000733B4                            
000733B4                            
000733B4                            Sound_Play:				; XREF: sub_71B4C
000733B4 2079 0007 2E12             		movea.l	(Go_SoundTypes).l,a0
000733BA 43EE 000A                  		lea	$A(a6),a1	; load music track number
000733BE 1616                       		move.b	0(a6),d3
000733C0 7802                       		moveq	#2,d4
000733C2                            
000733C2                            loc_71F12:
000733C2 1011                       		move.b	(a1),d0		; move track number to d0
000733C4 1200                       		move.b	d0,d1
000733C6 4219                       		clr.b	(a1)+
000733C8 0400 0081                  		subi.b	#$81,d0
000733CC 6500                       		bcs.s	loc_71F3E
000733CE 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000733D4 6700                       		beq.s	loc_71F2C
000733D6 1D41 000A                  		move.b	d1,$A(a6)
000733DA 6000                       		bra.s	loc_71F3E
000733DC                            ; ===========================================================================
000733DC                            
000733DC                            loc_71F2C:
000733DC 0240 007F                  		andi.w	#$7F,d0
000733E0 1430 0000                  		move.b	(a0,d0.w),d2
000733E4 B403                       		cmp.b	d3,d2
000733E6 6500                       		bcs.s	loc_71F3E
000733E8 1602                       		move.b	d2,d3
000733EA 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000733EE                            
000733EE                            loc_71F3E:
000733EE 51CC FFD2                  		dbf	d4,loc_71F12
000733F2                            
000733F2 4A03                       		tst.b	d3
000733F4 6B00                       		bmi.s	locret_71F4A
000733F6 1C83                       		move.b	d3,0(a6)
000733F8                            
000733F8                            locret_71F4A:
000733F8 4E75                       		rts	
000733FA                            ; End of function Sound_Play
000733FA                            
000733FA                            
000733FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000733FA                            
000733FA                            
000733FA                            Sound_ChkValue:				; XREF: sub_71B4C
000733FA 7E00                       		moveq	#0,d7
000733FC 1E2E 0009                  		move.b	9(a6),d7
00073400 6700 0000                  		beq.w	Sound_E4
00073404 6A00                       		bpl.s	locret_71F8C
00073406 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007340C 0C07 009F                  		cmpi.b	#$9F,d7
00073410 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00073414 0C07 00A0                  		cmpi.b	#$A0,d7
00073418 6500 0000                  		bcs.w	locret_71F8C
0007341C 0C07 00CF                  		cmpi.b	#$CF,d7
00073420 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00073424 0C07 00D0                  		cmpi.b	#$D0,d7
00073428 6500 0000                  		bcs.w	locret_71F8C
0007342C 0C07 00E0                  		cmpi.b	#$E0,d7
00073430 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00073434 0C07 00E5                  		cmpi.b	#$E5,d7
00073438 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007343A                            
0007343A                            locret_71F8C:
0007343A 4E75                       		rts	
0007343C                            ; ===========================================================================
0007343C                            
0007343C                            Sound_E0toE5				; XREF: Sound_ChkValue
0007343C 0407 00E0                  		subi.b	#$E0,d7
00073440 E54F                       		lsl.w	#2,d7
00073442 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00073446                            ; ===========================================================================
00073446                            
00073446                            Sound_ExIndex:
00073446 6000 0000                  		bra.w	Sound_E0
0007344A                            ; ===========================================================================
0007344A 6000 0000                  		bra.w	Sound_E1
0007344E                            ; ===========================================================================
0007344E 6000 0000                  		bra.w	Sound_E2
00073452                            ; ===========================================================================
00073452 6000 0000                  		bra.w	Sound_E3
00073456                            ; ===========================================================================
00073456 6000 0000                  		bra.w	Sound_E4
0007345A                            ; ===========================================================================
0007345A 6000 0000                  		bra.w	Sound_E5
0007345E                            ; ===========================================================================
0007345E                            ; ---------------------------------------------------------------------------
0007345E                            ; Play "Say-gaa" PCM sound
0007345E                            ; ---------------------------------------------------------------------------
0007345E                            
0007345E                            Sound_E1:				  
0007345E 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00073464 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007346A 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00073472                            PlayPCM_Loop:	  
00073472 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00073478 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007347C 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00073480 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00073482 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00073484 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00073488 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007348E 4EB8 1414                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00073492 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00073498 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007349A 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007349C                            return_PlayPCM: 
0007349C 584F                       		addq.w	#4,sp 
0007349E 4E75                       		rts
000734A0                            		
000734A0                            ; ---------------------------------------------------------------------------
000734A0                            ; Play you are an idiot pcm sound
000734A0                            ; ---------------------------------------------------------------------------
000734A0                            
000734A0                            Sound_E5:  
000734A0 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000734A6 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
000734AC 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000734B4                            PlayPCM_LoopE5:	  
000734B4                            
000734B4 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000734BA                            		
000734BA 5278 FE24                  		addq.w	#1,($FFFFFE24).w
000734BE                            		
000734BE 1038 FE24                  		move.b	($FFFFFE24).w,d0
000734C2 0200 000F                  		andi.b	#$F,d0
000734C6 6700                       		beq.s	SfxE5SwapPalette
000734C8                            		
000734C8 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
000734CC 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
000734D0 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000734D2 67CC                       		beq.s	Sound_E5			; If d3 = 0, we finished playing the PCM sample, DONT STOP
000734D4 60DE                       		bra.s	PlayPCM_LoopE5
000734D6                            		
000734D6                            SfxE5SwapPalette:
000734D6                            		
000734D6                            		
000734D6                            		
000734D6 4BF9 00C0 0004             		lea	($C00004).l,a5
000734DC 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
000734E2                            		
000734E2                            		
000734E2 0838 0004 FE24             		btst	#4,($FFFFFE24).w
000734E8 6700                       		beq.s	@not_black
000734EA 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
000734F0 6000                       		bra.s	@merge
000734F2                            	@not_black:
000734F2 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
000734F8                            	@merge:
000734F8 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
000734FC 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00073500 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00073506 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0007350A                            		
0007350A 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007350E 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00073512 60A0                       		bra.s	PlayPCM_LoopE5
00073514                            		
00073514                            ; ===========================================================================
00073514                            ; ---------------------------------------------------------------------------
00073514                            ; Play music track $81-$9F
00073514                            ; ---------------------------------------------------------------------------
00073514                            
00073514                            Sound_81to9F:				; XREF: Sound_ChkValue
00073514 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00073518 6600                       		bne.s	loc_72024	; if not, branch
0007351A 4A2E 0027                  		tst.b	$27(a6)
0007351E 6600 0000                  		bne.w	loc_721B6
00073522 4BEE 0040                  		lea	$40(a6),a5
00073526 7009                       		moveq	#9,d0
00073528                            
00073528                            loc_71FE6:
00073528 0895 0002                  		bclr	#2,(a5)
0007352C DAFC 0030                  		adda.w	#$30,a5
00073530 51C8 FFF6                  		dbf	d0,loc_71FE6
00073534                            
00073534 4BEE 0220                  		lea	$220(a6),a5
00073538 7005                       		moveq	#5,d0
0007353A                            
0007353A                            loc_71FF8:
0007353A 0895 0007                  		bclr	#7,(a5)
0007353E DAFC 0030                  		adda.w	#$30,a5
00073542 51C8 FFF6                  		dbf	d0,loc_71FF8
00073546 4216                       		clr.b	0(a6)
00073548 204E                       		movea.l	a6,a0
0007354A 43EE 03A0                  		lea	$3A0(a6),a1
0007354E 303C 0087                  		move.w	#$87,d0
00073552                            
00073552                            loc_72012:
00073552 22D8                       		move.l	(a0)+,(a1)+
00073554 51C8 FFFC                  		dbf	d0,loc_72012
00073558                            
00073558 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007355E 4216                       		clr.b	0(a6)
00073560 6000                       		bra.s	loc_7202C
00073562                            ; ===========================================================================
00073562                            
00073562                            loc_72024:
00073562 422E 0027                  		clr.b	$27(a6)
00073566 422E 0026                  		clr.b	$26(a6)
0007356A                            
0007356A                            loc_7202C:
0007356A 4EBA 0000                  		jsr	sub_725CA(pc)
0007356E 2879 0007 2E22             		movea.l	(off_719A0).l,a4
00073574 0407 0081                  		subi.b	#$81,d7
00073578 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007357E 2879 0007 2E1A             		movea.l	(Go_MusicIndex).l,a4
00073584 E54F                       		lsl.w	#2,d7
00073586 2874 7000                  		movea.l	(a4,d7.w),a4
0007358A 7000                       		moveq	#0,d0
0007358C 3014                       		move.w	(a4),d0
0007358E D08C                       		add.l	a4,d0
00073590 2D40 0018                  		move.l	d0,$18(a6)
00073594 102C 0005                  		move.b	5(a4),d0
00073598 1D40 0028                  		move.b	d0,$28(a6)
0007359C 4A2E 002A                  		tst.b	$2A(a6)
000735A0 6700                       		beq.s	loc_72068
000735A2 102E 0029                  		move.b	$29(a6),d0
000735A6                            
000735A6                            loc_72068:
000735A6 1D40 0002                  		move.b	d0,2(a6)
000735AA 1D40 0001                  		move.b	d0,1(a6)
000735AE 7200                       		moveq	#0,d1
000735B0 264C                       		movea.l	a4,a3
000735B2 5C4C                       		addq.w	#6,a4
000735B4 7E00                       		moveq	#0,d7
000735B6 1E2B 0002                  		move.b	2(a3),d7
000735BA 6700 0000                  		beq.w	loc_72114
000735BE 5307                       		subq.b	#1,d7
000735C0 123C 00C0                  		move.b	#-$40,d1
000735C4 182B 0004                  		move.b	4(a3),d4
000735C8 7C30                       		moveq	#$30,d6
000735CA 1A3C 0001                  		move.b	#1,d5
000735CE 43EE 0040                  		lea	$40(a6),a1
000735D2 45FA 0000                  		lea	byte_721BA(pc),a2
000735D6                            
000735D6                            loc_72098:
000735D6 08D1 0007                  		bset	#7,(a1)
000735DA 135A 0001                  		move.b	(a2)+,1(a1)
000735DE 1344 0002                  		move.b	d4,2(a1)
000735E2 1346 000D                  		move.b	d6,$D(a1)
000735E6 1341 000A                  		move.b	d1,$A(a1)
000735EA 1345 000E                  		move.b	d5,$E(a1)
000735EE 7000                       		moveq	#0,d0
000735F0 301C                       		move.w	(a4)+,d0
000735F2 D08B                       		add.l	a3,d0
000735F4 2340 0004                  		move.l	d0,4(a1)
000735F8 335C 0008                  		move.w	(a4)+,8(a1)
000735FC D2C6                       		adda.w	d6,a1
000735FE 51CF FFD6                  		dbf	d7,loc_72098
00073602 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00073608 6600                       		bne.s	loc_720D8
0007360A 702B                       		moveq	#$2B,d0
0007360C 7200                       		moveq	#0,d1
0007360E 4EBA 0000                  		jsr	sub_7272E(pc)
00073612 6000 0000                  		bra.w	loc_72114
00073616                            ; ===========================================================================
00073616                            
00073616                            loc_720D8:
00073616 7028                       		moveq	#$28,d0
00073618 7206                       		moveq	#6,d1
0007361A 4EBA 0000                  		jsr	sub_7272E(pc)
0007361E 103C 0042                  		move.b	#$42,d0
00073622 727F                       		moveq	#$7F,d1
00073624 4EBA 0000                  		jsr	sub_72764(pc)
00073628 103C 004A                  		move.b	#$4A,d0
0007362C 727F                       		moveq	#$7F,d1
0007362E 4EBA 0000                  		jsr	sub_72764(pc)
00073632 103C 0046                  		move.b	#$46,d0
00073636 727F                       		moveq	#$7F,d1
00073638 4EBA 0000                  		jsr	sub_72764(pc)
0007363C 103C 004E                  		move.b	#$4E,d0
00073640 727F                       		moveq	#$7F,d1
00073642 4EBA 0000                  		jsr	sub_72764(pc)
00073646 103C 00B6                  		move.b	#-$4A,d0
0007364A 123C 00C0                  		move.b	#-$40,d1
0007364E 4EBA 0000                  		jsr	sub_72764(pc)
00073652                            
00073652                            loc_72114:
00073652 7E00                       		moveq	#0,d7
00073654 1E2B 0003                  		move.b	3(a3),d7
00073658 6700                       		beq.s	loc_72154
0007365A 5307                       		subq.b	#1,d7
0007365C 43EE 0190                  		lea	$190(a6),a1
00073660 45FA 0000                  		lea	byte_721C2(pc),a2
00073664                            
00073664                            loc_72126:
00073664 08D1 0007                  		bset	#7,(a1)
00073668 135A 0001                  		move.b	(a2)+,1(a1)
0007366C 1344 0002                  		move.b	d4,2(a1)
00073670 1346 000D                  		move.b	d6,$D(a1)
00073674 1345 000E                  		move.b	d5,$E(a1)
00073678 7000                       		moveq	#0,d0
0007367A 301C                       		move.w	(a4)+,d0
0007367C D08B                       		add.l	a3,d0
0007367E 2340 0004                  		move.l	d0,4(a1)
00073682 335C 0008                  		move.w	(a4)+,8(a1)
00073686 101C                       		move.b	(a4)+,d0
00073688 135C 000B                  		move.b	(a4)+,$B(a1)
0007368C D2C6                       		adda.w	d6,a1
0007368E 51CF FFD4                  		dbf	d7,loc_72126
00073692                            
00073692                            loc_72154:
00073692 43EE 0220                  		lea	$220(a6),a1
00073696 7E05                       		moveq	#5,d7
00073698                            
00073698                            loc_7215A:
00073698 4A11                       		tst.b	(a1)
0007369A 6A00 0000                  		bpl.w	loc_7217C
0007369E 7000                       		moveq	#0,d0
000736A0 1029 0001                  		move.b	1(a1),d0
000736A4 6B00                       		bmi.s	loc_7216E
000736A6 5500                       		subq.b	#2,d0
000736A8 E508                       		lsl.b	#2,d0
000736AA 6000                       		bra.s	loc_72170
000736AC                            ; ===========================================================================
000736AC                            
000736AC                            loc_7216E:
000736AC E608                       		lsr.b	#3,d0
000736AE                            
000736AE                            loc_72170:
000736AE 41FA 0000                  		lea	dword_722CC(pc),a0
000736B2 2070 0000                  		movea.l	(a0,d0.w),a0
000736B6 08D0 0002                  		bset	#2,(a0)
000736BA                            
000736BA                            loc_7217C:
000736BA D2C6                       		adda.w	d6,a1
000736BC 51CF FFDA                  		dbf	d7,loc_7215A
000736C0                            
000736C0 4A6E 0340                  		tst.w	$340(a6)
000736C4 6A00                       		bpl.s	loc_7218E
000736C6 08EE 0002 0100             		bset	#2,$100(a6)
000736CC                            
000736CC                            loc_7218E:
000736CC 4A6E 0370                  		tst.w	$370(a6)
000736D0 6A00                       		bpl.s	loc_7219A
000736D2 08EE 0002 01F0             		bset	#2,$1F0(a6)
000736D8                            
000736D8                            loc_7219A:
000736D8 4BEE 0070                  		lea	$70(a6),a5
000736DC 7805                       		moveq	#5,d4
000736DE                            
000736DE                            loc_721A0:
000736DE 4EBA 0000                  		jsr	sub_726FE(pc)
000736E2 DAC6                       		adda.w	d6,a5
000736E4 51CC FFF8                  		dbf	d4,loc_721A0
000736E8 7802                       		moveq	#2,d4
000736EA                            
000736EA                            loc_721AC:
000736EA 4EBA 0000                  		jsr	sub_729A0(pc)
000736EE DAC6                       		adda.w	d6,a5
000736F0 51CC FFF8                  		dbf	d4,loc_721AC
000736F4                            
000736F4                            loc_721B6:
000736F4 584F                       		addq.w	#4,sp
000736F6 4E75                       		rts	
000736F8                            ; ===========================================================================
000736F8 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00073700                            		even
00073700 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00073704                            		even
00073704                            ; ===========================================================================
00073704                            ; ---------------------------------------------------------------------------
00073704                            ; Play normal sound effect
00073704                            ; ---------------------------------------------------------------------------
00073704                            
00073704                            Sound_A0toCF:				; XREF: Sound_ChkValue
00073704 4A2E 0027                  		tst.b	$27(a6)
00073708 6600 0000                  		bne.w	loc_722C6
0007370C 4A2E 0004                  		tst.b	4(a6)
00073710 6600 0000                  		bne.w	loc_722C6
00073714 4A2E 0024                  		tst.b	$24(a6)
00073718 6600 0000                  		bne.w	loc_722C6
0007371C 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00073720 6600                       		bne.s	Sound_notB5	; if not, branch
00073722 4A2E 002B                  		tst.b	$2B(a6)
00073726 6600                       		bne.s	loc_721EE
00073728 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007372C                            
0007372C                            loc_721EE:
0007372C 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00073732                            
00073732                            Sound_notB5:
00073732 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00073736 6600                       		bne.s	Sound_notA7	; if not, branch
00073738 4A2E 002C                  		tst.b	$2C(a6)
0007373C 6600 0000                  		bne.w	locret_722C4
00073740 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00073746                            
00073746                            Sound_notA7:
00073746 2079 0007 2E1E             		movea.l	(Go_SoundIndex).l,a0
0007374C 0407 00A0                  		subi.b	#$A0,d7
00073750 E54F                       		lsl.w	#2,d7
00073752 2670 7000                  		movea.l	(a0,d7.w),a3
00073756 224B                       		movea.l	a3,a1
00073758 7200                       		moveq	#0,d1
0007375A 3219                       		move.w	(a1)+,d1
0007375C D28B                       		add.l	a3,d1
0007375E 1A19                       		move.b	(a1)+,d5
00073760 1E19                       		move.b	(a1)+,d7
00073762 5307                       		subq.b	#1,d7
00073764 7C30                       		moveq	#$30,d6
00073766                            
00073766                            loc_72228:
00073766 7600                       		moveq	#0,d3
00073768 1629 0001                  		move.b	1(a1),d3
0007376C 1803                       		move.b	d3,d4
0007376E 6B00                       		bmi.s	loc_72244
00073770 5543                       		subq.w	#2,d3
00073772 E54B                       		lsl.w	#2,d3
00073774 4BFA 0000                  		lea	dword_722CC(pc),a5
00073778 2A75 3000                  		movea.l	(a5,d3.w),a5
0007377C 08D5 0002                  		bset	#2,(a5)
00073780 6000                       		bra.s	loc_7226E
00073782                            ; ===========================================================================
00073782                            
00073782                            loc_72244:
00073782 E64B                       		lsr.w	#3,d3
00073784 4BFA 0000                  		lea	dword_722CC(pc),a5
00073788 2A75 3000                  		movea.l	(a5,d3.w),a5
0007378C 08D5 0002                  		bset	#2,(a5)
00073790 0C04 00C0                  		cmpi.b	#$C0,d4
00073794 6600                       		bne.s	loc_7226E
00073796 1004                       		move.b	d4,d0
00073798 0000 001F                  		ori.b	#$1F,d0
0007379C 13C0 00C0 0011             		move.b	d0,($C00011).l
000737A2 0840 0005                  		bchg	#5,d0
000737A6 13C0 00C0 0011             		move.b	d0,($C00011).l
000737AC                            
000737AC                            loc_7226E:
000737AC 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000737B0 244D                       		movea.l	a5,a2
000737B2 700B                       		moveq	#$B,d0
000737B4                            
000737B4                            loc_72276:
000737B4 429A                       		clr.l	(a2)+
000737B6 51C8 FFFC                  		dbf	d0,loc_72276
000737BA                            
000737BA 3A99                       		move.w	(a1)+,(a5)
000737BC 1B45 0002                  		move.b	d5,2(a5)
000737C0 7000                       		moveq	#0,d0
000737C2 3019                       		move.w	(a1)+,d0
000737C4 D08B                       		add.l	a3,d0
000737C6 2B40 0004                  		move.l	d0,4(a5)
000737CA 3B59 0008                  		move.w	(a1)+,8(a5)
000737CE 1B7C 0001 000E             		move.b	#1,$E(a5)
000737D4 1B46 000D                  		move.b	d6,$D(a5)
000737D8 4A04                       		tst.b	d4
000737DA 6B00                       		bmi.s	loc_722A8
000737DC 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000737E2 2B41 0020                  		move.l	d1,$20(a5)
000737E6                            
000737E6                            loc_722A8:
000737E6 51CF FF7E                  		dbf	d7,loc_72228
000737EA                            
000737EA 4A2E 0250                  		tst.b	$250(a6)
000737EE 6A00                       		bpl.s	loc_722B8
000737F0 08EE 0002 0340             		bset	#2,$340(a6)
000737F6                            
000737F6                            loc_722B8:
000737F6 4A2E 0310                  		tst.b	$310(a6)
000737FA 6A00                       		bpl.s	locret_722C4
000737FC 08EE 0002 0370             		bset	#2,$370(a6)
00073802                            
00073802                            locret_722C4:
00073802 4E75                       		rts	
00073804                            ; ===========================================================================
00073804                            
00073804                            loc_722C6:
00073804 4216                       		clr.b	0(a6)
00073806 4E75                       		rts	
00073808                            ; ===========================================================================
00073808 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007380C 0000 0000                  		dc.l 0
00073810 00FF F100                  		dc.l $FFF100
00073814 00FF F130                  		dc.l $FFF130
00073818 00FF F190                  		dc.l $FFF190
0007381C 00FF F1C0                  		dc.l $FFF1C0
00073820 00FF F1F0                  		dc.l $FFF1F0
00073824 00FF F1F0                  		dc.l $FFF1F0
00073828 00FF F220                  dword_722EC:	dc.l $FFF220
0007382C 0000 0000                  		dc.l 0
00073830 00FF F250                  		dc.l $FFF250
00073834 00FF F280                  		dc.l $FFF280
00073838 00FF F2B0                  		dc.l $FFF2B0
0007383C 00FF F2E0                  		dc.l $FFF2E0
00073840 00FF F310                  		dc.l $FFF310
00073844 00FF F310                  		dc.l $FFF310
00073848                            ; ===========================================================================
00073848                            ; ---------------------------------------------------------------------------
00073848                            ; Play GHZ waterfall sound
00073848                            ; ---------------------------------------------------------------------------
00073848                            
00073848                            Sound_D0toDF:				; XREF: Sound_ChkValue
00073848 4A2E 0027                  		tst.b	$27(a6)
0007384C 6600 0000                  		bne.w	locret_723C6
00073850 4A2E 0004                  		tst.b	4(a6)
00073854 6600 0000                  		bne.w	locret_723C6
00073858 4A2E 0024                  		tst.b	$24(a6)
0007385C 6600 0000                  		bne.w	locret_723C6
00073860 2079 0007 2E16             		movea.l	(Go_SoundD0).l,a0
00073866 0407 00D0                  		subi.b	#$D0,d7
0007386A E54F                       		lsl.w	#2,d7
0007386C 2670 7000                  		movea.l	(a0,d7.w),a3
00073870 224B                       		movea.l	a3,a1
00073872 7000                       		moveq	#0,d0
00073874 3019                       		move.w	(a1)+,d0
00073876 D08B                       		add.l	a3,d0
00073878 2D40 0020                  		move.l	d0,$20(a6)
0007387C 1A19                       		move.b	(a1)+,d5
0007387E 1E19                       		move.b	(a1)+,d7
00073880 5307                       		subq.b	#1,d7
00073882 7C30                       		moveq	#$30,d6
00073884                            
00073884                            loc_72348:
00073884 1829 0001                  		move.b	1(a1),d4
00073888 6B00                       		bmi.s	loc_7235A
0007388A 08EE 0002 0100             		bset	#2,$100(a6)
00073890 4BEE 0340                  		lea	$340(a6),a5
00073894 6000                       		bra.s	loc_72364
00073896                            ; ===========================================================================
00073896                            
00073896                            loc_7235A:
00073896 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007389C 4BEE 0370                  		lea	$370(a6),a5
000738A0                            
000738A0                            loc_72364:
000738A0 244D                       		movea.l	a5,a2
000738A2 700B                       		moveq	#$B,d0
000738A4                            
000738A4                            loc_72368:
000738A4 429A                       		clr.l	(a2)+
000738A6 51C8 FFFC                  		dbf	d0,loc_72368
000738AA                            
000738AA 3A99                       		move.w	(a1)+,(a5)
000738AC 1B45 0002                  		move.b	d5,2(a5)
000738B0 7000                       		moveq	#0,d0
000738B2 3019                       		move.w	(a1)+,d0
000738B4 D08B                       		add.l	a3,d0
000738B6 2B40 0004                  		move.l	d0,4(a5)
000738BA 3B59 0008                  		move.w	(a1)+,8(a5)
000738BE 1B7C 0001 000E             		move.b	#1,$E(a5)
000738C4 1B46 000D                  		move.b	d6,$D(a5)
000738C8 4A04                       		tst.b	d4
000738CA 6B00                       		bmi.s	loc_72396
000738CC 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000738D2                            
000738D2                            loc_72396:
000738D2 51CF FFB0                  		dbf	d7,loc_72348
000738D6                            
000738D6 4A2E 0250                  		tst.b	$250(a6)
000738DA 6A00                       		bpl.s	loc_723A6
000738DC 08EE 0002 0340             		bset	#2,$340(a6)
000738E2                            
000738E2                            loc_723A6:
000738E2 4A2E 0310                  		tst.b	$310(a6)
000738E6 6A00                       		bpl.s	locret_723C6
000738E8 08EE 0002 0370             		bset	#2,$370(a6)
000738EE 0004 001F                  		ori.b	#$1F,d4
000738F2 13C4 00C0 0011             		move.b	d4,($C00011).l
000738F8 0844 0005                  		bchg	#5,d4
000738FC 13C4 00C0 0011             		move.b	d4,($C00011).l
00073902                            
00073902                            locret_723C6:
00073902 4E75                       		rts	
00073904                            ; End of function Sound_ChkValue
00073904                            
00073904                            ; ===========================================================================
00073904 00FF F100                  		dc.l $FFF100
00073908 00FF F1F0                  		dc.l $FFF1F0
0007390C 00FF F250                  		dc.l $FFF250
00073910 00FF F310                  		dc.l $FFF310
00073914 00FF F340                  		dc.l $FFF340
00073918 00FF F370                  		dc.l $FFF370
0007391C                            
0007391C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007391C                            
0007391C                            
0007391C                            Snd_FadeOut1:				; XREF: Sound_E0
0007391C 4216                       		clr.b	0(a6)
0007391E 4BEE 0220                  		lea	$220(a6),a5
00073922 7E05                       		moveq	#5,d7
00073924                            
00073924                            loc_723EA:
00073924 4A15                       		tst.b	(a5)
00073926 6A00 0000                  		bpl.w	loc_72472
0007392A 0895 0007                  		bclr	#7,(a5)
0007392E 7600                       		moveq	#0,d3
00073930 162D 0001                  		move.b	1(a5),d3
00073934 6B00                       		bmi.s	loc_7243C
00073936 4EBA 0000                  		jsr	sub_726FE(pc)
0007393A 0C03 0004                  		cmpi.b	#4,d3
0007393E 6600                       		bne.s	loc_72416
00073940 4A2E 0340                  		tst.b	$340(a6)
00073944 6A00                       		bpl.s	loc_72416
00073946 4BEE 0340                  		lea	$340(a6),a5
0007394A 226E 0020                  		movea.l	$20(a6),a1
0007394E 6000                       		bra.s	loc_72428
00073950                            ; ===========================================================================
00073950                            
00073950                            loc_72416:
00073950 5503                       		subq.b	#2,d3
00073952 E50B                       		lsl.b	#2,d3
00073954 41FA FEB2                  		lea	dword_722CC(pc),a0
00073958 264D                       		movea.l	a5,a3
0007395A 2A70 3000                  		movea.l	(a0,d3.w),a5
0007395E 226E 0018                  		movea.l	$18(a6),a1
00073962                            
00073962                            loc_72428:
00073962 0895 0002                  		bclr	#2,(a5)
00073966 08D5 0001                  		bset	#1,(a5)
0007396A 102D 000B                  		move.b	$B(a5),d0
0007396E 4EBA 0000                  		jsr	sub_72C4E(pc)
00073972 2A4B                       		movea.l	a3,a5
00073974 6000                       		bra.s	loc_72472
00073976                            ; ===========================================================================
00073976                            
00073976                            loc_7243C:
00073976 4EBA 0000                  		jsr	sub_729A0(pc)
0007397A 41EE 0370                  		lea	$370(a6),a0
0007397E 0C03 00E0                  		cmpi.b	#$E0,d3
00073982 6700                       		beq.s	loc_7245A
00073984 0C03 00C0                  		cmpi.b	#$C0,d3
00073988 6700                       		beq.s	loc_7245A
0007398A E60B                       		lsr.b	#3,d3
0007398C 41FA FE7A                  		lea	dword_722CC(pc),a0
00073990 2070 3000                  		movea.l	(a0,d3.w),a0
00073994                            
00073994                            loc_7245A:
00073994 0890 0002                  		bclr	#2,(a0)
00073998 08D0 0001                  		bset	#1,(a0)
0007399C 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000739A2 6600                       		bne.s	loc_72472
000739A4 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000739AC                            
000739AC                            loc_72472:
000739AC DAFC 0030                  		adda.w	#$30,a5
000739B0 51CF FF72                  		dbf	d7,loc_723EA
000739B4                            
000739B4 4E75                       		rts	
000739B6                            ; End of function Snd_FadeOut1
000739B6                            
000739B6                            
000739B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000739B6                            
000739B6                            
000739B6                            Snd_FadeOut2:				; XREF: Sound_E0
000739B6 4BEE 0340                  		lea	$340(a6),a5
000739BA 4A15                       		tst.b	(a5)
000739BC 6A00                       		bpl.s	loc_724AE
000739BE 0895 0007                  		bclr	#7,(a5)
000739C2 0815 0002                  		btst	#2,(a5)
000739C6 6600                       		bne.s	loc_724AE
000739C8 4EBA 0000                  		jsr	loc_7270A(pc)
000739CC 4BEE 0100                  		lea	$100(a6),a5
000739D0 0895 0002                  		bclr	#2,(a5)
000739D4 08D5 0001                  		bset	#1,(a5)
000739D8 4A15                       		tst.b	(a5)
000739DA 6A00                       		bpl.s	loc_724AE
000739DC 226E 0018                  		movea.l	$18(a6),a1
000739E0 102D 000B                  		move.b	$B(a5),d0
000739E4 4EBA 0000                  		jsr	sub_72C4E(pc)
000739E8                            
000739E8                            loc_724AE:
000739E8 4BEE 0370                  		lea	$370(a6),a5
000739EC 4A15                       		tst.b	(a5)
000739EE 6A00                       		bpl.s	locret_724E4
000739F0 0895 0007                  		bclr	#7,(a5)
000739F4 0815 0002                  		btst	#2,(a5)
000739F8 6600                       		bne.s	locret_724E4
000739FA 4EBA 0000                  		jsr	loc_729A6(pc)
000739FE 4BEE 01F0                  		lea	$1F0(a6),a5
00073A02 0895 0002                  		bclr	#2,(a5)
00073A06 08D5 0001                  		bset	#1,(a5)
00073A0A 4A15                       		tst.b	(a5)
00073A0C 6A00                       		bpl.s	locret_724E4
00073A0E 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00073A14 6600                       		bne.s	locret_724E4
00073A16 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00073A1E                            
00073A1E                            locret_724E4:
00073A1E 4E75                       		rts	
00073A20                            ; End of function Snd_FadeOut2
00073A20                            
00073A20                            ; ===========================================================================
00073A20                            ; ---------------------------------------------------------------------------
00073A20                            ; Fade out music
00073A20                            ; ---------------------------------------------------------------------------
00073A20                            
00073A20                            Sound_E0:				; XREF: Sound_ExIndex
00073A20 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00073A24 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00073A28 1D7C 0003 0006             		move.b	#3,6(a6)
00073A2E 1D7C 0028 0004             		move.b	#$28,4(a6)
00073A34 422E 0040                  		clr.b	$40(a6)
00073A38 422E 002A                  		clr.b	$2A(a6)
00073A3C 4E75                       		rts	
00073A3E                            
00073A3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073A3E                            
00073A3E                            
00073A3E                            sub_72504:				; XREF: sub_71B4C
00073A3E 102E 0006                  		move.b	6(a6),d0
00073A42 6700                       		beq.s	loc_72510
00073A44 532E 0006                  		subq.b	#1,6(a6)
00073A48 4E75                       		rts	
00073A4A                            ; ===========================================================================
00073A4A                            
00073A4A                            loc_72510:
00073A4A 532E 0004                  		subq.b	#1,4(a6)
00073A4E 6700 0000                  		beq.w	Sound_E4
00073A52 1D7C 0003 0006             		move.b	#3,6(a6)
00073A58 4BEE 0070                  		lea	$70(a6),a5
00073A5C 7E05                       		moveq	#5,d7
00073A5E                            
00073A5E                            loc_72524:
00073A5E 4A15                       		tst.b	(a5)
00073A60 6A00                       		bpl.s	loc_72538
00073A62 522D 0009                  		addq.b	#1,9(a5)
00073A66 6A00                       		bpl.s	loc_72534
00073A68 0895 0007                  		bclr	#7,(a5)
00073A6C 6000                       		bra.s	loc_72538
00073A6E                            ; ===========================================================================
00073A6E                            
00073A6E                            loc_72534:
00073A6E 4EBA 0000                  		jsr	sub_72CB4(pc)
00073A72                            
00073A72                            loc_72538:
00073A72 DAFC 0030                  		adda.w	#$30,a5
00073A76 51CF FFE6                  		dbf	d7,loc_72524
00073A7A                            
00073A7A 7E02                       		moveq	#2,d7
00073A7C                            
00073A7C                            loc_72542:
00073A7C 4A15                       		tst.b	(a5)
00073A7E 6A00                       		bpl.s	loc_72560
00073A80 522D 0009                  		addq.b	#1,9(a5)
00073A84 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00073A8A 6500                       		bcs.s	loc_72558
00073A8C 0895 0007                  		bclr	#7,(a5)
00073A90 6000                       		bra.s	loc_72560
00073A92                            ; ===========================================================================
00073A92                            
00073A92                            loc_72558:
00073A92 1C2D 0009                  		move.b	9(a5),d6
00073A96 4EBA 0000                  		jsr	sub_7296A(pc)
00073A9A                            
00073A9A                            loc_72560:
00073A9A DAFC 0030                  		adda.w	#$30,a5
00073A9E 51CF FFDC                  		dbf	d7,loc_72542
00073AA2                            
00073AA2 4E75                       		rts	
00073AA4                            ; End of function sub_72504
00073AA4                            
00073AA4                            
00073AA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073AA4                            
00073AA4                            
00073AA4                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00073AA4 7602                       		moveq	#2,d3
00073AA6 7028                       		moveq	#$28,d0
00073AA8                            
00073AA8                            loc_7256E:
00073AA8 1203                       		move.b	d3,d1
00073AAA 4EBA 0000                  		jsr	sub_7272E(pc)
00073AAE 5801                       		addq.b	#4,d1
00073AB0 4EBA 0000                  		jsr	sub_7272E(pc)
00073AB4 51CB FFF2                  		dbf	d3,loc_7256E
00073AB8                            
00073AB8 7040                       		moveq	#$40,d0
00073ABA 727F                       		moveq	#$7F,d1
00073ABC 7802                       		moveq	#2,d4
00073ABE                            
00073ABE                            loc_72584:
00073ABE 7603                       		moveq	#3,d3
00073AC0                            
00073AC0                            loc_72586:
00073AC0 4EBA 0000                  		jsr	sub_7272E(pc)
00073AC4 4EBA 0000                  		jsr	sub_72764(pc)
00073AC8 5840                       		addq.w	#4,d0
00073ACA 51CB FFF4                  		dbf	d3,loc_72586
00073ACE                            
00073ACE 0400 000F                  		subi.b	#$F,d0
00073AD2 51CC FFEA                  		dbf	d4,loc_72584
00073AD6                            
00073AD6 4E75                       		rts	
00073AD8                            ; End of function sub_7256A
00073AD8                            
00073AD8                            ; ===========================================================================
00073AD8                            ; ---------------------------------------------------------------------------
00073AD8                            ; Stop music
00073AD8                            ; ---------------------------------------------------------------------------
00073AD8                            
00073AD8                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00073AD8 702B                       		moveq	#$2B,d0
00073ADA 123C 0080                  		move.b	#$80,d1
00073ADE 4EBA 0000                  		jsr	sub_7272E(pc)
00073AE2 7027                       		moveq	#$27,d0
00073AE4 7200                       		moveq	#0,d1
00073AE6 4EBA 0000                  		jsr	sub_7272E(pc)
00073AEA 204E                       		movea.l	a6,a0
00073AEC 303C 00E3                  		move.w	#$E3,d0
00073AF0                            
00073AF0                            loc_725B6:
00073AF0 4298                       		clr.l	(a0)+
00073AF2 51C8 FFFC                  		dbf	d0,loc_725B6
00073AF6                            
00073AF6 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00073AFC 4EBA FFA6                  		jsr	sub_7256A(pc)
00073B00 6000 0000                  		bra.w	sub_729B6
00073B04                            
00073B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073B04                            
00073B04                            
00073B04                            sub_725CA:				; XREF: Sound_ChkValue
00073B04 204E                       		movea.l	a6,a0
00073B06 1216                       		move.b	0(a6),d1
00073B08 142E 0027                  		move.b	$27(a6),d2
00073B0C 162E 002A                  		move.b	$2A(a6),d3
00073B10 182E 0026                  		move.b	$26(a6),d4
00073B14 3A2E 000A                  		move.w	$A(a6),d5
00073B18 303C 0087                  		move.w	#$87,d0
00073B1C                            
00073B1C                            loc_725E4:
00073B1C 4298                       		clr.l	(a0)+
00073B1E 51C8 FFFC                  		dbf	d0,loc_725E4
00073B22                            
00073B22 1C81                       		move.b	d1,0(a6)
00073B24 1D42 0027                  		move.b	d2,$27(a6)
00073B28 1D43 002A                  		move.b	d3,$2A(a6)
00073B2C 1D44 0026                  		move.b	d4,$26(a6)
00073B30 3D45 000A                  		move.w	d5,$A(a6)
00073B34 1D7C 0080 0009             		move.b	#$80,9(a6)
00073B3A 4EBA FF68                  		jsr	sub_7256A(pc)
00073B3E 6000 0000                  		bra.w	sub_729B6
00073B42                            ; End of function sub_725CA
00073B42                            
00073B42                            
00073B42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073B42                            
00073B42                            
00073B42                            sub_7260C:				; XREF: sub_71B4C
00073B42 1D6E 0002 0001             		move.b	2(a6),1(a6)
00073B48 41EE 004E                  		lea	$4E(a6),a0
00073B4C 7030                       		moveq	#$30,d0
00073B4E 7209                       		moveq	#9,d1
00073B50                            
00073B50                            loc_7261A:
00073B50 5210                       		addq.b	#1,(a0)
00073B52 D0C0                       		adda.w	d0,a0
00073B54 51C9 FFFA                  		dbf	d1,loc_7261A
00073B58                            
00073B58 4E75                       		rts	
00073B5A                            ; End of function sub_7260C
00073B5A                            
00073B5A                            ; ===========================================================================
00073B5A                            ; ---------------------------------------------------------------------------
00073B5A                            ; Speed	up music
00073B5A                            ; ---------------------------------------------------------------------------
00073B5A                            
00073B5A                            Sound_E2:				; XREF: Sound_ExIndex
00073B5A 4A2E 0027                  		tst.b	$27(a6)
00073B5E 6600                       		bne.s	loc_7263E
00073B60 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00073B66 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00073B6C 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00073B72 4E75                       		rts	
00073B74                            ; ===========================================================================
00073B74                            
00073B74                            loc_7263E:
00073B74 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00073B7A 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00073B80 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00073B86 4E75                       		rts	
00073B88                            ; ===========================================================================
00073B88                            ; ---------------------------------------------------------------------------
00073B88                            ; Change music back to normal speed
00073B88                            ; ---------------------------------------------------------------------------
00073B88                            
00073B88                            Sound_E3:				; XREF: Sound_ExIndex
00073B88 4A2E 0027                  		tst.b	$27(a6)
00073B8C 6600                       		bne.s	loc_7266A
00073B8E 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00073B94 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00073B9A 422E 002A                  		clr.b	$2A(a6)
00073B9E 4E75                       		rts	
00073BA0                            ; ===========================================================================
00073BA0                            
00073BA0                            loc_7266A:
00073BA0 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00073BA6 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00073BAC 422E 03CA                  		clr.b	$3CA(a6)
00073BB0 4E75                       		rts	
00073BB2                            
00073BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073BB2                            
00073BB2                            
00073BB2                            sub_7267C:				; XREF: sub_71B4C
00073BB2 4A2E 0025                  		tst.b	$25(a6)
00073BB6 6700                       		beq.s	loc_72688
00073BB8 532E 0025                  		subq.b	#1,$25(a6)
00073BBC 4E75                       		rts	
00073BBE                            ; ===========================================================================
00073BBE                            
00073BBE                            loc_72688:
00073BBE 4A2E 0026                  		tst.b	$26(a6)
00073BC2 6700                       		beq.s	loc_726D6
00073BC4 532E 0026                  		subq.b	#1,$26(a6)
00073BC8 1D7C 0002 0025             		move.b	#2,$25(a6)
00073BCE 4BEE 0070                  		lea	$70(a6),a5
00073BD2 7E05                       		moveq	#5,d7
00073BD4                            
00073BD4                            loc_7269E:
00073BD4 4A15                       		tst.b	(a5)
00073BD6 6A00                       		bpl.s	loc_726AA
00073BD8 532D 0009                  		subq.b	#1,9(a5)
00073BDC 4EBA 0000                  		jsr	sub_72CB4(pc)
00073BE0                            
00073BE0                            loc_726AA:
00073BE0 DAFC 0030                  		adda.w	#$30,a5
00073BE4 51CF FFEE                  		dbf	d7,loc_7269E
00073BE8 7E02                       		moveq	#2,d7
00073BEA                            
00073BEA                            loc_726B4:
00073BEA 4A15                       		tst.b	(a5)
00073BEC 6A00                       		bpl.s	loc_726CC
00073BEE 532D 0009                  		subq.b	#1,9(a5)
00073BF2 1C2D 0009                  		move.b	9(a5),d6
00073BF6 0C06 0010                  		cmpi.b	#$10,d6
00073BFA 6500                       		bcs.s	loc_726C8
00073BFC 7C0F                       		moveq	#$F,d6
00073BFE                            
00073BFE                            loc_726C8:
00073BFE 4EBA 0000                  		jsr	sub_7296A(pc)
00073C02                            
00073C02                            loc_726CC:
00073C02 DAFC 0030                  		adda.w	#$30,a5
00073C06 51CF FFE2                  		dbf	d7,loc_726B4
00073C0A 4E75                       		rts	
00073C0C                            ; ===========================================================================
00073C0C                            
00073C0C                            loc_726D6:
00073C0C 08AE 0002 0040             		bclr	#2,$40(a6)
00073C12 422E 0024                  		clr.b	$24(a6)
00073C16 4E75                       		rts	
00073C18                            ; End of function sub_7267C
00073C18                            
00073C18                            ; ===========================================================================
00073C18                            
00073C18                            loc_726E2:				; XREF: sub_71CCA
00073C18 0815 0001                  		btst	#1,(a5)
00073C1C 6600                       		bne.s	locret_726FC
00073C1E 0815 0002                  		btst	#2,(a5)
00073C22 6600                       		bne.s	locret_726FC
00073C24 7028                       		moveq	#$28,d0
00073C26 122D 0001                  		move.b	1(a5),d1
00073C2A 0001 00F0                  		ori.b	#-$10,d1
00073C2E 6000 0000                  		bra.w	sub_7272E
00073C32                            ; ===========================================================================
00073C32                            
00073C32                            locret_726FC:
00073C32 4E75                       		rts	
00073C34                            
00073C34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073C34                            
00073C34                            
00073C34                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00073C34 0815 0004                  		btst	#4,(a5)
00073C38 6600                       		bne.s	locret_72714
00073C3A 0815 0002                  		btst	#2,(a5)
00073C3E 6600                       		bne.s	locret_72714
00073C40                            
00073C40                            loc_7270A:				; XREF: Snd_FadeOut2
00073C40 7028                       		moveq	#$28,d0
00073C42 122D 0001                  		move.b	1(a5),d1
00073C46 6000 0000                  		bra.w	sub_7272E
00073C4A                            ; ===========================================================================
00073C4A                            
00073C4A                            locret_72714:
00073C4A 4E75                       		rts	
00073C4C                            ; End of function sub_726FE
00073C4C                            
00073C4C                            ; ===========================================================================
00073C4C                            
00073C4C                            loc_72716:				; XREF: sub_72A5A
00073C4C 0815 0002                  		btst	#2,(a5)
00073C50 6600                       		bne.s	locret_72720
00073C52 6000 0000                  		bra.w	sub_72722
00073C56                            ; ===========================================================================
00073C56                            
00073C56                            locret_72720:
00073C56 4E75                       		rts	
00073C58                            
00073C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073C58                            
00073C58                            
00073C58                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00073C58 082D 0002 0001             		btst	#2,1(a5)
00073C5E 6600                       		bne.s	loc_7275A
00073C60 D02D 0001                  		add.b	1(a5),d0
00073C64                            ; End of function sub_72722
00073C64                            
00073C64                            
00073C64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073C64                            
00073C64                            
00073C64                            sub_7272E:				; XREF: loc_71E6A
00073C64 1439 00A0 4000             		move.b	($A04000).l,d2
00073C6A 0802 0007                  		btst	#7,d2
00073C6E 66F4                       		bne.s	sub_7272E
00073C70 13C0 00A0 4000             		move.b	d0,($A04000).l
00073C76 4E71                       		nop	
00073C78 4E71                       		nop	
00073C7A 4E71                       		nop	
00073C7C                            
00073C7C                            loc_72746:
00073C7C 1439 00A0 4000             		move.b	($A04000).l,d2
00073C82 0802 0007                  		btst	#7,d2
00073C86 66F4                       		bne.s	loc_72746
00073C88                            
00073C88 13C1 00A0 4001             		move.b	d1,($A04001).l
00073C8E 4E75                       		rts	
00073C90                            ; End of function sub_7272E
00073C90                            
00073C90                            ; ===========================================================================
00073C90                            
00073C90                            loc_7275A:				; XREF: sub_72722
00073C90 142D 0001                  		move.b	1(a5),d2
00073C94 0882 0002                  		bclr	#2,d2
00073C98 D002                       		add.b	d2,d0
00073C9A                            
00073C9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073C9A                            
00073C9A                            
00073C9A                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00073C9A 1439 00A0 4000             		move.b	($A04000).l,d2
00073CA0 0802 0007                  		btst	#7,d2
00073CA4 66F4                       		bne.s	sub_72764
00073CA6 13C0 00A0 4002             		move.b	d0,($A04002).l
00073CAC 4E71                       		nop	
00073CAE 4E71                       		nop	
00073CB0 4E71                       		nop	
00073CB2                            
00073CB2                            loc_7277C:
00073CB2 1439 00A0 4000             		move.b	($A04000).l,d2
00073CB8 0802 0007                  		btst	#7,d2
00073CBC 66F4                       		bne.s	loc_7277C
00073CBE                            
00073CBE 13C1 00A0 4003             		move.b	d1,($A04003).l
00073CC4 4E75                       		rts	
00073CC6                            ; End of function sub_72764
00073CC6                            
00073CC6                            ; ===========================================================================
00073CC6 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00073CD8 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00073CEA 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00073CFA 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00073D0A 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00073D1A 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00073D2A 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00073D3A 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00073D4A 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00073D5A 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00073D6A 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00073D7A 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00073D86                            
00073D86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073D86                            
00073D86                            
00073D86                            sub_72850:				; XREF: sub_71B4C
00073D86 532D 000E                  		subq.b	#1,$E(a5)
00073D8A 6600                       		bne.s	loc_72866
00073D8C 0895 0004                  		bclr	#4,(a5)
00073D90 4EBA 0000                  		jsr	sub_72878(pc)
00073D94 4EBA 0000                  		jsr	sub_728DC(pc)
00073D98 6000 0000                  		bra.w	loc_7292E
00073D9C                            ; ===========================================================================
00073D9C                            
00073D9C                            loc_72866:
00073D9C 4EBA F4B2                  		jsr	sub_71D9E(pc)
00073DA0 4EBA 0000                  		jsr	sub_72926(pc)
00073DA4 4EBA F4D2                  		jsr	sub_71DC6(pc)
00073DA8 4EBA 0000                  		jsr	sub_728E2(pc)
00073DAC 4E75                       		rts	
00073DAE                            ; End of function sub_72850
00073DAE                            
00073DAE                            
00073DAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073DAE                            
00073DAE                            
00073DAE                            sub_72878:				; XREF: sub_72850
00073DAE 0895 0001                  		bclr	#1,(a5)
00073DB2 286D 0004                  		movea.l	4(a5),a4
00073DB6                            
00073DB6                            loc_72880:
00073DB6 7A00                       		moveq	#0,d5
00073DB8 1A1C                       		move.b	(a4)+,d5
00073DBA 0C05 00E0                  		cmpi.b	#$E0,d5
00073DBE 6500                       		bcs.s	loc_72890
00073DC0 4EBA 0000                  		jsr	sub_72A5A(pc)
00073DC4 60F0                       		bra.s	loc_72880
00073DC6                            ; ===========================================================================
00073DC6                            
00073DC6                            loc_72890:
00073DC6 4A05                       		tst.b	d5
00073DC8 6A00                       		bpl.s	loc_728A4
00073DCA 4EBA 0000                  		jsr	sub_728AC(pc)
00073DCE 1A1C                       		move.b	(a4)+,d5
00073DD0 4A05                       		tst.b	d5
00073DD2 6A00                       		bpl.s	loc_728A4
00073DD4 534C                       		subq.w	#1,a4
00073DD6 6000 F43A                  		bra.w	sub_71D60
00073DDA                            ; ===========================================================================
00073DDA                            
00073DDA                            loc_728A4:
00073DDA 4EBA F416                  		jsr	sub_71D40(pc)
00073DDE 6000 F432                  		bra.w	sub_71D60
00073DE2                            ; End of function sub_72878
00073DE2                            
00073DE2                            
00073DE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073DE2                            
00073DE2                            
00073DE2                            sub_728AC:				; XREF: sub_72878
00073DE2 0405 0081                  		subi.b	#$81,d5
00073DE6 6500                       		bcs.s	loc_728CA
00073DE8 DA2D 0008                  		add.b	8(a5),d5
00073DEC 0245 007F                  		andi.w	#$7F,d5
00073DF0 E34D                       		lsl.w	#1,d5
00073DF2 41FA 0000                  		lea	word_729CE(pc),a0
00073DF6 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00073DFC 6000 F414                  		bra.w	sub_71D60
00073E00                            ; ===========================================================================
00073E00                            
00073E00                            loc_728CA:
00073E00 08D5 0001                  		bset	#1,(a5)
00073E04 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00073E0A 4EBA F406                  		jsr	sub_71D60(pc)
00073E0E 6000 0000                  		bra.w	sub_729A0
00073E12                            ; End of function sub_728AC
00073E12                            
00073E12                            
00073E12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073E12                            
00073E12                            
00073E12                            sub_728DC:				; XREF: sub_72850
00073E12 3C2D 0010                  		move.w	$10(a5),d6
00073E16 6B00                       		bmi.s	loc_72920
00073E18                            ; End of function sub_728DC
00073E18                            
00073E18                            
00073E18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073E18                            
00073E18                            
00073E18                            sub_728E2:				; XREF: sub_72850
00073E18 102D 001E                  		move.b	$1E(a5),d0
00073E1C 4880                       		ext.w	d0
00073E1E DC40                       		add.w	d0,d6
00073E20 0815 0002                  		btst	#2,(a5)
00073E24 6600                       		bne.s	locret_7291E
00073E26 0815 0001                  		btst	#1,(a5)
00073E2A 6600                       		bne.s	locret_7291E
00073E2C 102D 0001                  		move.b	1(a5),d0
00073E30 0C00 00E0                  		cmpi.b	#$E0,d0
00073E34 6600                       		bne.s	loc_72904
00073E36 103C 00C0                  		move.b	#$C0,d0
00073E3A                            
00073E3A                            loc_72904:
00073E3A 3206                       		move.w	d6,d1
00073E3C 0201 000F                  		andi.b	#$F,d1
00073E40 8001                       		or.b	d1,d0
00073E42 E84E                       		lsr.w	#4,d6
00073E44 0206 003F                  		andi.b	#$3F,d6
00073E48 13C0 00C0 0011             		move.b	d0,($C00011).l
00073E4E 13C6 00C0 0011             		move.b	d6,($C00011).l
00073E54                            
00073E54                            locret_7291E:
00073E54 4E75                       		rts	
00073E56                            ; End of function sub_728E2
00073E56                            
00073E56                            ; ===========================================================================
00073E56                            
00073E56                            loc_72920:				; XREF: sub_728DC
00073E56 08D5 0001                  		bset	#1,(a5)
00073E5A 4E75                       		rts	
00073E5C                            
00073E5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073E5C                            
00073E5C                            
00073E5C                            sub_72926:				; XREF: sub_72850
00073E5C 4A2D 000B                  		tst.b	$B(a5)
00073E60 6700 0000                  		beq.w	locret_7298A
00073E64                            
00073E64                            loc_7292E:				; XREF: sub_72850
00073E64 1C2D 0009                  		move.b	9(a5),d6
00073E68 7000                       		moveq	#0,d0
00073E6A 102D 000B                  		move.b	$B(a5),d0
00073E6E 6700                       		beq.s	sub_7296A
00073E70 2079 0007 2E26             		movea.l	(Go_PSGIndex).l,a0
00073E76 5340                       		subq.w	#1,d0
00073E78 E548                       		lsl.w	#2,d0
00073E7A 2070 0000                  		movea.l	(a0,d0.w),a0
00073E7E 102D 000C                  		move.b	$C(a5),d0
00073E82 1030 0000                  		move.b	(a0,d0.w),d0
00073E86 522D 000C                  		addq.b	#1,$C(a5)
00073E8A 0800 0007                  		btst	#7,d0
00073E8E 6700                       		beq.s	loc_72960
00073E90 0C00 0080                  		cmpi.b	#$80,d0
00073E94 6700                       		beq.s	loc_7299A
00073E96                            
00073E96                            loc_72960:
00073E96 DC40                       		add.w	d0,d6
00073E98 0C06 0010                  		cmpi.b	#$10,d6
00073E9C 6500                       		bcs.s	sub_7296A
00073E9E 7C0F                       		moveq	#$F,d6
00073EA0                            ; End of function sub_72926
00073EA0                            
00073EA0                            
00073EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073EA0                            
00073EA0                            
00073EA0                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00073EA0 0815 0001                  		btst	#1,(a5)
00073EA4 6600                       		bne.s	locret_7298A
00073EA6 0815 0002                  		btst	#2,(a5)
00073EAA 6600                       		bne.s	locret_7298A
00073EAC 0815 0004                  		btst	#4,(a5)
00073EB0 6600                       		bne.s	loc_7298C
00073EB2                            
00073EB2                            loc_7297C:
00073EB2 8C2D 0001                  		or.b	1(a5),d6
00073EB6 0606 0010                  		addi.b	#$10,d6
00073EBA 13C6 00C0 0011             		move.b	d6,($C00011).l
00073EC0                            
00073EC0                            locret_7298A:
00073EC0 4E75                       		rts	
00073EC2                            ; ===========================================================================
00073EC2                            
00073EC2                            loc_7298C:
00073EC2 4A2D 0013                  		tst.b	$13(a5)
00073EC6 67EA                       		beq.s	loc_7297C
00073EC8 4A2D 0012                  		tst.b	$12(a5)
00073ECC 66E4                       		bne.s	loc_7297C
00073ECE 4E75                       		rts	
00073ED0                            ; End of function sub_7296A
00073ED0                            
00073ED0                            ; ===========================================================================
00073ED0                            
00073ED0                            loc_7299A:				; XREF: sub_72926
00073ED0 532D 000C                  		subq.b	#1,$C(a5)
00073ED4 4E75                       		rts	
00073ED6                            
00073ED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073ED6                            
00073ED6                            
00073ED6                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00073ED6 0815 0002                  		btst	#2,(a5)
00073EDA 6600                       		bne.s	locret_729B4
00073EDC                            
00073EDC                            loc_729A6:				; XREF: Snd_FadeOut2
00073EDC 102D 0001                  		move.b	1(a5),d0
00073EE0 0000 001F                  		ori.b	#$1F,d0
00073EE4 13C0 00C0 0011             		move.b	d0,($C00011).l
00073EEA                            
00073EEA                            locret_729B4:
00073EEA 4E75                       		rts	
00073EEC                            ; End of function sub_729A0
00073EEC                            
00073EEC                            
00073EEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073EEC                            
00073EEC                            
00073EEC                            sub_729B6:				; XREF: loc_71E7C
00073EEC 41F9 00C0 0011             		lea	($C00011).l,a0
00073EF2 10BC 009F                  		move.b	#$9F,(a0)
00073EF6 10BC 00BF                  		move.b	#$BF,(a0)
00073EFA 10BC 00DF                  		move.b	#$DF,(a0)
00073EFE 10BC 00FF                  		move.b	#$FF,(a0)
00073F02 4E75                       		rts	
00073F04                            ; End of function sub_729B6
00073F04                            
00073F04                            ; ===========================================================================
00073F04 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00073F16 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00073F28 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00073F3C 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00073F50 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00073F64 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00073F78 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00073F8C 0011 0000                  		dc.w $11, 0
00073F90                            
00073F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073F90                            
00073F90                            
00073F90                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00073F90 0445 00E0                  		subi.w	#$E0,d5
00073F94 E54D                       		lsl.w	#2,d5
00073F96 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00073F9A                            ; End of function sub_72A5A
00073F9A                            
00073F9A                            ; ===========================================================================
00073F9A                            
00073F9A                            loc_72A64:
00073F9A 6000 0000                  		bra.w	loc_72ACC
00073F9E                            ; ===========================================================================
00073F9E 6000 0000                  		bra.w	loc_72AEC
00073FA2                            ; ===========================================================================
00073FA2 6000 0000                  		bra.w	loc_72AF2
00073FA6                            ; ===========================================================================
00073FA6 6000 0000                  		bra.w	loc_72AF8
00073FAA                            ; ===========================================================================
00073FAA 6000 0000                  		bra.w	loc_72B14
00073FAE                            ; ===========================================================================
00073FAE 6000 0000                  		bra.w	loc_72B9E
00073FB2                            ; ===========================================================================
00073FB2 6000 0000                  		bra.w	loc_72BA4
00073FB6                            ; ===========================================================================
00073FB6 6000 0000                  		bra.w	loc_72BAE
00073FBA                            ; ===========================================================================
00073FBA 6000 0000                  		bra.w	loc_72BB4
00073FBE                            ; ===========================================================================
00073FBE 6000 0000                  		bra.w	loc_72BBE
00073FC2                            ; ===========================================================================
00073FC2 6000 0000                  		bra.w	loc_72BC6
00073FC6                            ; ===========================================================================
00073FC6 6000 0000                  		bra.w	loc_72BD0
00073FCA                            ; ===========================================================================
00073FCA 6000 0000                  		bra.w	loc_72BE6
00073FCE                            ; ===========================================================================
00073FCE 6000 0000                  		bra.w	loc_72BEE
00073FD2                            ; ===========================================================================
00073FD2 6000 0000                  		bra.w	loc_72BF4
00073FD6                            ; ===========================================================================
00073FD6 6000 0000                  		bra.w	loc_72C26
00073FDA                            ; ===========================================================================
00073FDA 6000 0000                  		bra.w	loc_72D30
00073FDE                            ; ===========================================================================
00073FDE 6000 0000                  		bra.w	loc_72D52
00073FE2                            ; ===========================================================================
00073FE2 6000 0000                  		bra.w	loc_72D58
00073FE6                            ; ===========================================================================
00073FE6 6000 0000                  		bra.w	loc_72E06
00073FEA                            ; ===========================================================================
00073FEA 6000 0000                  		bra.w	loc_72E20
00073FEE                            ; ===========================================================================
00073FEE 6000 0000                  		bra.w	loc_72E26
00073FF2                            ; ===========================================================================
00073FF2 6000 0000                  		bra.w	loc_72E2C
00073FF6                            ; ===========================================================================
00073FF6 6000 0000                  		bra.w	loc_72E38
00073FFA                            ; ===========================================================================
00073FFA 6000 0000                  		bra.w	loc_72E52
00073FFE                            ; ===========================================================================
00073FFE 6000 0000                  		bra.w	loc_72E64
00074002                            ; ===========================================================================
00074002                            
00074002                            loc_72ACC:				; XREF: loc_72A64
00074002 121C                       		move.b	(a4)+,d1
00074004 4A2D 0001                  		tst.b	1(a5)
00074008 6B00                       		bmi.s	locret_72AEA
0007400A 102D 000A                  		move.b	$A(a5),d0
0007400E 0200 0037                  		andi.b	#$37,d0
00074012 8200                       		or.b	d0,d1
00074014 1B41 000A                  		move.b	d1,$A(a5)
00074018 103C 00B4                  		move.b	#$B4,d0
0007401C 6000 FC2E                  		bra.w	loc_72716
00074020                            ; ===========================================================================
00074020                            
00074020                            locret_72AEA:
00074020 4E75                       		rts	
00074022                            ; ===========================================================================
00074022                            
00074022                            loc_72AEC:				; XREF: loc_72A64
00074022 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00074026 4E75                       		rts	
00074028                            ; ===========================================================================
00074028                            
00074028                            loc_72AF2:				; XREF: loc_72A64
00074028 1D5C 0007                  		move.b	(a4)+,7(a6)
0007402C 4E75                       		rts	
0007402E                            ; ===========================================================================
0007402E                            
0007402E                            loc_72AF8:				; XREF: loc_72A64
0007402E 7000                       		moveq	#0,d0
00074030 102D 000D                  		move.b	$D(a5),d0
00074034 2875 0000                  		movea.l	(a5,d0.w),a4
00074038 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00074040 544C                       		addq.w	#2,a4
00074042 5800                       		addq.b	#4,d0
00074044 1B40 000D                  		move.b	d0,$D(a5)
00074048 4E75                       		rts	
0007404A                            ; ===========================================================================
0007404A                            
0007404A                            loc_72B14:				; XREF: loc_72A64
0007404A 204E                       		movea.l	a6,a0
0007404C 43EE 03A0                  		lea	$3A0(a6),a1
00074050 303C 0087                  		move.w	#$87,d0
00074054                            
00074054                            loc_72B1E:
00074054 20D9                       		move.l	(a1)+,(a0)+
00074056 51C8 FFFC                  		dbf	d0,loc_72B1E
0007405A                            
0007405A 08EE 0002 0040             		bset	#2,$40(a6)
00074060 264D                       		movea.l	a5,a3
00074062 1C3C 0028                  		move.b	#$28,d6
00074066 9C2E 0026                  		sub.b	$26(a6),d6
0007406A 7E05                       		moveq	#5,d7
0007406C 4BEE 0070                  		lea	$70(a6),a5
00074070                            
00074070                            loc_72B3A:
00074070 0815 0007                  		btst	#7,(a5)
00074074 6700                       		beq.s	loc_72B5C
00074076 08D5 0001                  		bset	#1,(a5)
0007407A DD2D 0009                  		add.b	d6,9(a5)
0007407E 0815 0002                  		btst	#2,(a5)
00074082 6600                       		bne.s	loc_72B5C
00074084 7000                       		moveq	#0,d0
00074086 102D 000B                  		move.b	$B(a5),d0
0007408A 226E 0018                  		movea.l	$18(a6),a1
0007408E 4EBA 0000                  		jsr	sub_72C4E(pc)
00074092                            
00074092                            loc_72B5C:
00074092 DAFC 0030                  		adda.w	#$30,a5
00074096 51CF FFD8                  		dbf	d7,loc_72B3A
0007409A                            
0007409A 7E02                       		moveq	#2,d7
0007409C                            
0007409C                            loc_72B66:
0007409C 0815 0007                  		btst	#7,(a5)
000740A0 6700                       		beq.s	loc_72B78
000740A2 08D5 0001                  		bset	#1,(a5)
000740A6 4EBA FE2E                  		jsr	sub_729A0(pc)
000740AA DD2D 0009                  		add.b	d6,9(a5)
000740AE                            
000740AE                            loc_72B78:
000740AE DAFC 0030                  		adda.w	#$30,a5
000740B2 51CF FFE8                  		dbf	d7,loc_72B66
000740B6 2A4B                       		movea.l	a3,a5
000740B8 1D7C 0080 0024             		move.b	#$80,$24(a6)
000740BE 1D7C 0028 0026             		move.b	#$28,$26(a6)
000740C4 422E 0027                  		clr.b	$27(a6)
000740C8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000740D0 504F                       		addq.w	#8,sp
000740D2 4E75                       		rts	
000740D4                            ; ===========================================================================
000740D4                            
000740D4                            loc_72B9E:				; XREF: loc_72A64
000740D4 1B5C 0002                  		move.b	(a4)+,2(a5)
000740D8 4E75                       		rts	
000740DA                            ; ===========================================================================
000740DA                            
000740DA                            loc_72BA4:				; XREF: loc_72A64
000740DA 101C                       		move.b	(a4)+,d0
000740DC D12D 0009                  		add.b	d0,9(a5)
000740E0 6000 0000                  		bra.w	sub_72CB4
000740E4                            ; ===========================================================================
000740E4                            
000740E4                            loc_72BAE:				; XREF: loc_72A64
000740E4 08D5 0004                  		bset	#4,(a5)
000740E8 4E75                       		rts	
000740EA                            ; ===========================================================================
000740EA                            
000740EA                            loc_72BB4:				; XREF: loc_72A64
000740EA 1B54 0012                  		move.b	(a4),$12(a5)
000740EE 1B5C 0013                  		move.b	(a4)+,$13(a5)
000740F2 4E75                       		rts	
000740F4                            ; ===========================================================================
000740F4                            
000740F4                            loc_72BBE:				; XREF: loc_72A64
000740F4 101C                       		move.b	(a4)+,d0
000740F6 D12D 0008                  		add.b	d0,8(a5)
000740FA 4E75                       		rts	
000740FC                            ; ===========================================================================
000740FC                            
000740FC                            loc_72BC6:				; XREF: loc_72A64
000740FC 1D54 0002                  		move.b	(a4),2(a6)
00074100 1D5C 0001                  		move.b	(a4)+,1(a6)
00074104 4E75                       		rts	
00074106                            ; ===========================================================================
00074106                            
00074106                            loc_72BD0:				; XREF: loc_72A64
00074106 41EE 0040                  		lea	$40(a6),a0
0007410A 101C                       		move.b	(a4)+,d0
0007410C 7230                       		moveq	#$30,d1
0007410E 7409                       		moveq	#9,d2
00074110                            
00074110                            loc_72BDA:
00074110 1140 0002                  		move.b	d0,2(a0)
00074114 D0C1                       		adda.w	d1,a0
00074116 51CA FFF8                  		dbf	d2,loc_72BDA
0007411A                            
0007411A 4E75                       		rts	
0007411C                            ; ===========================================================================
0007411C                            
0007411C                            loc_72BE6:				; XREF: loc_72A64
0007411C 101C                       		move.b	(a4)+,d0
0007411E D12D 0009                  		add.b	d0,9(a5)
00074122 4E75                       		rts	
00074124                            ; ===========================================================================
00074124                            
00074124                            loc_72BEE:				; XREF: loc_72A64
00074124 422E 002C                  		clr.b	$2C(a6)
00074128 4E75                       		rts	
0007412A                            ; ===========================================================================
0007412A                            
0007412A                            loc_72BF4:				; XREF: loc_72A64
0007412A 0895 0007                  		bclr	#7,(a5)
0007412E 0895 0004                  		bclr	#4,(a5)
00074132 4EBA FB00                  		jsr	sub_726FE(pc)
00074136 4A2E 0250                  		tst.b	$250(a6)
0007413A 6B00                       		bmi.s	loc_72C22
0007413C 264D                       		movea.l	a5,a3
0007413E 4BEE 0100                  		lea	$100(a6),a5
00074142 226E 0018                  		movea.l	$18(a6),a1
00074146 0895 0002                  		bclr	#2,(a5)
0007414A 08D5 0001                  		bset	#1,(a5)
0007414E 102D 000B                  		move.b	$B(a5),d0
00074152 4EBA 0000                  		jsr	sub_72C4E(pc)
00074156 2A4B                       		movea.l	a3,a5
00074158                            
00074158                            loc_72C22:
00074158 504F                       		addq.w	#8,sp
0007415A 4E75                       		rts	
0007415C                            ; ===========================================================================
0007415C                            
0007415C                            loc_72C26:				; XREF: loc_72A64
0007415C 7000                       		moveq	#0,d0
0007415E 101C                       		move.b	(a4)+,d0
00074160 1B40 000B                  		move.b	d0,$B(a5)
00074164 0815 0002                  		btst	#2,(a5)
00074168 6600 0000                  		bne.w	locret_72CAA
0007416C 226E 0018                  		movea.l	$18(a6),a1
00074170 4A2E 000E                  		tst.b	$E(a6)
00074174 6700                       		beq.s	sub_72C4E
00074176 226D 0020                  		movea.l	$20(a5),a1
0007417A 4A2E 000E                  		tst.b	$E(a6)
0007417E 6B00                       		bmi.s	sub_72C4E
00074180 226E 0020                  		movea.l	$20(a6),a1
00074184                            
00074184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074184                            
00074184                            
00074184                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00074184 5340                       		subq.w	#1,d0
00074186 6B00                       		bmi.s	loc_72C5C
00074188 323C 0019                  		move.w	#$19,d1
0007418C                            
0007418C                            loc_72C56:
0007418C D2C1                       		adda.w	d1,a1
0007418E 51C8 FFFC                  		dbf	d0,loc_72C56
00074192                            
00074192                            loc_72C5C:
00074192 1219                       		move.b	(a1)+,d1
00074194 1B41 001F                  		move.b	d1,$1F(a5)
00074198 1801                       		move.b	d1,d4
0007419A 103C 00B0                  		move.b	#$B0,d0
0007419E 4EBA FAB8                  		jsr	sub_72722(pc)
000741A2 45FA 0000                  		lea	byte_72D18(pc),a2
000741A6 7613                       		moveq	#$13,d3
000741A8                            
000741A8                            loc_72C72:
000741A8 101A                       		move.b	(a2)+,d0
000741AA 1219                       		move.b	(a1)+,d1
000741AC 4EBA FAAA                  		jsr	sub_72722(pc)
000741B0 51CB FFF6                  		dbf	d3,loc_72C72
000741B4 7A03                       		moveq	#3,d5
000741B6 0244 0007                  		andi.w	#7,d4
000741BA 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000741BE 162D 0009                  		move.b	9(a5),d3
000741C2                            
000741C2                            loc_72C8C:
000741C2 101A                       		move.b	(a2)+,d0
000741C4 1219                       		move.b	(a1)+,d1
000741C6 E20C                       		lsr.b	#1,d4
000741C8 6400                       		bcc.s	loc_72C96
000741CA D203                       		add.b	d3,d1
000741CC                            
000741CC                            loc_72C96:
000741CC 4EBA FA8A                  		jsr	sub_72722(pc)
000741D0 51CD FFF0                  		dbf	d5,loc_72C8C
000741D4 103C 00B4                  		move.b	#$B4,d0
000741D8 122D 000A                  		move.b	$A(a5),d1
000741DC 4EBA FA7A                  		jsr	sub_72722(pc)
000741E0                            
000741E0                            locret_72CAA:
000741E0 4E75                       		rts	
000741E2                            ; End of function sub_72C4E
000741E2                            
000741E2                            ; ===========================================================================
000741E2 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000741EA                            
000741EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000741EA                            
000741EA                            
000741EA                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000741EA 0815 0002                  		btst	#2,(a5)
000741EE 6600                       		bne.s	locret_72D16
000741F0 7000                       		moveq	#0,d0
000741F2 102D 000B                  		move.b	$B(a5),d0
000741F6 226E 0018                  		movea.l	$18(a6),a1
000741FA 4A2E 000E                  		tst.b	$E(a6)
000741FE 6700                       		beq.s	loc_72CD8
00074200 226E 0020                  		movea.l	$20(a6),a1
00074204 4A2E 000E                  		tst.b	$E(a6)
00074208 6B00                       		bmi.s	loc_72CD8
0007420A 226E 0020                  		movea.l	$20(a6),a1
0007420E                            
0007420E                            loc_72CD8:
0007420E 5340                       		subq.w	#1,d0
00074210 6B00                       		bmi.s	loc_72CE6
00074212 323C 0019                  		move.w	#$19,d1
00074216                            
00074216                            loc_72CE0:
00074216 D2C1                       		adda.w	d1,a1
00074218 51C8 FFFC                  		dbf	d0,loc_72CE0
0007421C                            
0007421C                            loc_72CE6:
0007421C D2FC 0015                  		adda.w	#$15,a1
00074220 45FA 0000                  		lea	byte_72D2C(pc),a2
00074224 102D 001F                  		move.b	$1F(a5),d0
00074228 0240 0007                  		andi.w	#7,d0
0007422C 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00074230 162D 0009                  		move.b	9(a5),d3
00074234 6B00                       		bmi.s	locret_72D16
00074236 7A03                       		moveq	#3,d5
00074238                            
00074238                            loc_72D02:
00074238 101A                       		move.b	(a2)+,d0
0007423A 1219                       		move.b	(a1)+,d1
0007423C E20C                       		lsr.b	#1,d4
0007423E 6400                       		bcc.s	loc_72D12
00074240 D203                       		add.b	d3,d1
00074242 6500                       		bcs.s	loc_72D12
00074244 4EBA FA12                  		jsr	sub_72722(pc)
00074248                            
00074248                            loc_72D12:
00074248 51CD FFEE                  		dbf	d5,loc_72D02
0007424C                            
0007424C                            locret_72D16:
0007424C 4E75                       		rts	
0007424E                            ; End of function sub_72CB4
0007424E                            
0007424E                            ; ===========================================================================
0007424E 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00074258 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00074262 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00074266                            ; ===========================================================================
00074266                            
00074266                            loc_72D30:				; XREF: loc_72A64
00074266 08D5 0003                  		bset	#3,(a5)
0007426A 2B4C 0014                  		move.l	a4,$14(a5)
0007426E 1B5C 0018                  		move.b	(a4)+,$18(a5)
00074272 1B5C 0019                  		move.b	(a4)+,$19(a5)
00074276 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007427A 101C                       		move.b	(a4)+,d0
0007427C E208                       		lsr.b	#1,d0
0007427E 1B40 001B                  		move.b	d0,$1B(a5)
00074282 426D 001C                  		clr.w	$1C(a5)
00074286 4E75                       		rts	
00074288                            ; ===========================================================================
00074288                            
00074288                            loc_72D52:				; XREF: loc_72A64
00074288 08D5 0003                  		bset	#3,(a5)
0007428C 4E75                       		rts	
0007428E                            ; ===========================================================================
0007428E                            
0007428E                            loc_72D58:				; XREF: loc_72A64
0007428E 0895 0007                  		bclr	#7,(a5)
00074292 0895 0004                  		bclr	#4,(a5)
00074296 4A2D 0001                  		tst.b	1(a5)
0007429A 6B00                       		bmi.s	loc_72D74
0007429C 4A2E 0008                  		tst.b	8(a6)
000742A0 6B00 0000                  		bmi.w	loc_72E02
000742A4 4EBA F98E                  		jsr	sub_726FE(pc)
000742A8 6000                       		bra.s	loc_72D78
000742AA                            ; ===========================================================================
000742AA                            
000742AA                            loc_72D74:
000742AA 4EBA FC2A                  		jsr	sub_729A0(pc)
000742AE                            
000742AE                            loc_72D78:
000742AE 4A2E 000E                  		tst.b	$E(a6)
000742B2 6A00 0000                  		bpl.w	loc_72E02
000742B6 4216                       		clr.b	0(a6)
000742B8 7000                       		moveq	#0,d0
000742BA 102D 0001                  		move.b	1(a5),d0
000742BE 6B00                       		bmi.s	loc_72DCC
000742C0 41FA F546                  		lea	dword_722CC(pc),a0
000742C4 264D                       		movea.l	a5,a3
000742C6 0C00 0004                  		cmpi.b	#4,d0
000742CA 6600                       		bne.s	loc_72DA8
000742CC 4A2E 0340                  		tst.b	$340(a6)
000742D0 6A00                       		bpl.s	loc_72DA8
000742D2 4BEE 0340                  		lea	$340(a6),a5
000742D6 226E 0020                  		movea.l	$20(a6),a1
000742DA 6000                       		bra.s	loc_72DB8
000742DC                            ; ===========================================================================
000742DC                            
000742DC                            loc_72DA8:
000742DC 5500                       		subq.b	#2,d0
000742DE E508                       		lsl.b	#2,d0
000742E0 2A70 0000                  		movea.l	(a0,d0.w),a5
000742E4 4A15                       		tst.b	(a5)
000742E6 6A00                       		bpl.s	loc_72DC8
000742E8 226E 0018                  		movea.l	$18(a6),a1
000742EC                            
000742EC                            loc_72DB8:
000742EC 0895 0002                  		bclr	#2,(a5)
000742F0 08D5 0001                  		bset	#1,(a5)
000742F4 102D 000B                  		move.b	$B(a5),d0
000742F8 4EBA FE8A                  		jsr	sub_72C4E(pc)
000742FC                            
000742FC                            loc_72DC8:
000742FC 2A4B                       		movea.l	a3,a5
000742FE 6000                       		bra.s	loc_72E02
00074300                            ; ===========================================================================
00074300                            
00074300                            loc_72DCC:
00074300 41EE 0370                  		lea	$370(a6),a0
00074304 4A10                       		tst.b	(a0)
00074306 6A00                       		bpl.s	loc_72DE0
00074308 0C00 00E0                  		cmpi.b	#$E0,d0
0007430C 6700                       		beq.s	loc_72DEA
0007430E 0C00 00C0                  		cmpi.b	#$C0,d0
00074312 6700                       		beq.s	loc_72DEA
00074314                            
00074314                            loc_72DE0:
00074314 41FA F4F2                  		lea	dword_722CC(pc),a0
00074318 E608                       		lsr.b	#3,d0
0007431A 2070 0000                  		movea.l	(a0,d0.w),a0
0007431E                            
0007431E                            loc_72DEA:
0007431E 0890 0002                  		bclr	#2,(a0)
00074322 08D0 0001                  		bset	#1,(a0)
00074326 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007432C 6600                       		bne.s	loc_72E02
0007432E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00074336                            
00074336                            loc_72E02:
00074336 504F                       		addq.w	#8,sp
00074338 4E75                       		rts	
0007433A                            ; ===========================================================================
0007433A                            
0007433A                            loc_72E06:				; XREF: loc_72A64
0007433A 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00074340 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00074344 0815 0002                  		btst	#2,(a5)
00074348 6600                       		bne.s	locret_72E1E
0007434A 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00074352                            
00074352                            locret_72E1E:
00074352 4E75                       		rts	
00074354                            ; ===========================================================================
00074354                            
00074354                            loc_72E20:				; XREF: loc_72A64
00074354 0895 0003                  		bclr	#3,(a5)
00074358 4E75                       		rts	
0007435A                            ; ===========================================================================
0007435A                            
0007435A                            loc_72E26:				; XREF: loc_72A64
0007435A 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007435E 4E75                       		rts	
00074360                            ; ===========================================================================
00074360                            
00074360                            loc_72E2C:				; XREF: loc_72A64
00074360 101C                       		move.b	(a4)+,d0
00074362 E148                       		lsl.w	#8,d0
00074364 101C                       		move.b	(a4)+,d0
00074366 D8C0                       		adda.w	d0,a4
00074368 534C                       		subq.w	#1,a4
0007436A 4E75                       		rts	
0007436C                            ; ===========================================================================
0007436C                            
0007436C                            loc_72E38:				; XREF: loc_72A64
0007436C 7000                       		moveq	#0,d0
0007436E 101C                       		move.b	(a4)+,d0
00074370 121C                       		move.b	(a4)+,d1
00074372 4A35 0024                  		tst.b	$24(a5,d0.w)
00074376 6600                       		bne.s	loc_72E48
00074378 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007437C                            
0007437C                            loc_72E48:
0007437C 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00074380 66DE                       		bne.s	loc_72E2C
00074382 544C                       		addq.w	#2,a4
00074384 4E75                       		rts	
00074386                            ; ===========================================================================
00074386                            
00074386                            loc_72E52:				; XREF: loc_72A64
00074386 7000                       		moveq	#0,d0
00074388 102D 000D                  		move.b	$D(a5),d0
0007438C 5900                       		subq.b	#4,d0
0007438E 2B8C 0000                  		move.l	a4,(a5,d0.w)
00074392 1B40 000D                  		move.b	d0,$D(a5)
00074396 60C8                       		bra.s	loc_72E2C
00074398                            ; ===========================================================================
00074398                            
00074398                            loc_72E64:				; XREF: loc_72A64
00074398 103C 0088                  		move.b	#$88,d0
0007439C 123C 000F                  		move.b	#$F,d1
000743A0 4EBA F8C2                  		jsr	sub_7272E(pc)
000743A4 103C 008C                  		move.b	#$8C,d0
000743A8 123C 000F                  		move.b	#$F,d1
000743AC 6000 F8B6                  		bra.w	sub_7272E
000743B0                            ; ===========================================================================
000743B0                            Kos_Z80:	incbin	sound\z80_1.bin
00074460 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00074462 21                         		dc.b $21
00074463 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00074465                            		incbin	sound\z80_2.bin
00075B10                            		even
00075B10                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007C310                            		even
0007C310                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00085BAE                            		even
00085BAE                            Music83:	incbin	sound\music83.bin ; Marble Act 1
0008613C                            		even
0008613C                            Music84:	include	sound\music84.asm ; Star Light Act 1
0008613C                            music84_Header:
0008613C =00000001                  smpsHeaderStartSong = 1
0008613C 0000                       	smpsHeaderVoice     music84_Voices
0008613E 0603                       	smpsHeaderChan      $06, $03
00086140 0205                       	smpsHeaderTempo     $02, $05
00086142                            
00086146 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0008614A 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
0008614E 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00086152 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00086156 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0008615A 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00086160 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00086166 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0008616C                            
0008616C                            ; FM1 Data
0008616C                            music84_FM1:
0008616C E0C0                       	smpsPan             panCenter, $00
00086170 E107                       	smpsAlterNote       $07
00086172 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00086176 E106                       	smpsAlterNote       $06
00086178 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0008617C E10B                       	smpsAlterNote       $0B
0008617E 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00086184 E10C                       	smpsAlterNote       $0C
00086186 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00086189 E10B                       	smpsAlterNote       $0B
0008618B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008618E E109                       	smpsAlterNote       $09
00086190 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00086195 E108                       	smpsAlterNote       $08
00086197 8001                       	dc.b	nRst, $01
00086199 E10B                       	smpsAlterNote       $0B
0008619B 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
000861A1 E107                       	smpsAlterNote       $07
000861A3 9B03                       	dc.b	nD2, $03
000861A5                            
000861A5                            music84_Jump04:
000861A5 E107                       	smpsAlterNote       $07
000861A7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000861AB E10B                       	smpsAlterNote       $0B
000861AD A202 8001                  	dc.b	nA2, $02, nRst, $01
000861B1 E107                       	smpsAlterNote       $07
000861B3 9B03                       	dc.b	nD2, $03
000861B5 E11A                       	smpsAlterNote       $1A
000861B7 A301                       	dc.b	nBb2, $01
000861B9 E1F2                       	smpsAlterNote       $F2
000861BB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000861BE E1FF                       	smpsAlterNote       $FF
000861C0 E701                       	dc.b	smpsNoAttack, $01
000861C2 E111                       	smpsAlterNote       $11
000861C4 E701                       	dc.b	smpsNoAttack, $01
000861C6 E106                       	smpsAlterNote       $06
000861C8 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000861CB E107                       	smpsAlterNote       $07
000861CD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000861D1 E108                       	smpsAlterNote       $08
000861D3 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
000861DB E109                       	smpsAlterNote       $09
000861DD A003                       	dc.b	nG2, $03
000861DF E10C                       	smpsAlterNote       $0C
000861E1 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000861E5 E1FD                       	smpsAlterNote       $FD
000861E7 A401                       	dc.b	nB2, $01
000861E9 E109                       	smpsAlterNote       $09
000861EB E701                       	dc.b	smpsNoAttack, $01
000861ED E106                       	smpsAlterNote       $06
000861EF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000861F2 E109                       	smpsAlterNote       $09
000861F4 A007                       	dc.b	nG2, $07
000861F6 E108                       	smpsAlterNote       $08
000861F8 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000861FC E107                       	smpsAlterNote       $07
000861FE 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00086204 E10B                       	smpsAlterNote       $0B
00086206 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008620A E107                       	smpsAlterNote       $07
0008620C 9B03                       	dc.b	nD2, $03
0008620E E11A                       	smpsAlterNote       $1A
00086210 A301                       	dc.b	nBb2, $01
00086212 E1F9                       	smpsAlterNote       $F9
00086214 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00086217 E107                       	smpsAlterNote       $07
00086219 E701                       	dc.b	smpsNoAttack, $01
0008621B E111                       	smpsAlterNote       $11
0008621D E701                       	dc.b	smpsNoAttack, $01
0008621F E106                       	smpsAlterNote       $06
00086221 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00086226 E107                       	smpsAlterNote       $07
00086228 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00086230 E1EC                       	smpsAlterNote       $EC
00086232 A101                       	dc.b	nAb2, $01
00086234 E108                       	smpsAlterNote       $08
00086236 E701                       	dc.b	smpsNoAttack, $01
00086238 E116                       	smpsAlterNote       $16
0008623A E701                       	dc.b	smpsNoAttack, $01
0008623C E1F5                       	smpsAlterNote       $F5
0008623E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00086241 E10B                       	smpsAlterNote       $0B
00086243 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00086247 E107                       	smpsAlterNote       $07
00086249 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008624F E109                       	smpsAlterNote       $09
00086251 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00086255 E10B                       	smpsAlterNote       $0B
00086257 9603                       	dc.b	nA1, $03
00086259 E107                       	smpsAlterNote       $07
0008625B 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00086261 E10B                       	smpsAlterNote       $0B
00086263 A203 8001                  	dc.b	nA2, $03, nRst, $01
00086267 E107                       	smpsAlterNote       $07
00086269 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008626D E11A                       	smpsAlterNote       $1A
0008626F A301                       	dc.b	nBb2, $01
00086271 E1F9                       	smpsAlterNote       $F9
00086273 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00086276 E107                       	smpsAlterNote       $07
00086278 E701                       	dc.b	smpsNoAttack, $01
0008627A E1FB                       	smpsAlterNote       $FB
0008627C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008627F E106                       	smpsAlterNote       $06
00086281 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00086285 E107                       	smpsAlterNote       $07
00086287 9B03                       	dc.b	nD2, $03
00086289 E108                       	smpsAlterNote       $08
0008628B 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00086291 E109                       	smpsAlterNote       $09
00086293 A002 8001                  	dc.b	nG2, $02, nRst, $01
00086297 E10C                       	smpsAlterNote       $0C
00086299 A303                       	dc.b	nBb2, $03
0008629B E1F0                       	smpsAlterNote       $F0
0008629D A401                       	dc.b	nB2, $01
0008629F E1FD                       	smpsAlterNote       $FD
000862A1 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
000862A6 E106                       	smpsAlterNote       $06
000862A8 8001                       	dc.b	nRst, $01
000862AA E109                       	smpsAlterNote       $09
000862AC A006 8001                  	dc.b	nG2, $06, nRst, $01
000862B0 E108                       	smpsAlterNote       $08
000862B2 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
000862B6 E107                       	smpsAlterNote       $07
000862B8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000862BE E10B                       	smpsAlterNote       $0B
000862C0 A203                       	dc.b	nA2, $03
000862C2 E107                       	smpsAlterNote       $07
000862C4 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000862C8 E1F2                       	smpsAlterNote       $F2
000862CA A401                       	dc.b	nB2, $01
000862CC E1FF                       	smpsAlterNote       $FF
000862CE E701                       	dc.b	smpsNoAttack, $01
000862D0 E107                       	smpsAlterNote       $07
000862D2 E701                       	dc.b	smpsNoAttack, $01
000862D4 E1FB                       	smpsAlterNote       $FB
000862D6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000862D9 E106                       	smpsAlterNote       $06
000862DB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000862DF E107                       	smpsAlterNote       $07
000862E1 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
000862EB E117                       	smpsAlterNote       $17
000862ED A001                       	dc.b	nG2, $01
000862EF E1FA                       	smpsAlterNote       $FA
000862F1 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000862F4 E108                       	smpsAlterNote       $08
000862F6 E701                       	dc.b	smpsNoAttack, $01
000862F8 E1E7                       	smpsAlterNote       $E7
000862FA E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000862FD E103                       	smpsAlterNote       $03
000862FF E701                       	dc.b	smpsNoAttack, $01
00086301 E10B                       	smpsAlterNote       $0B
00086303 E702                       	dc.b	smpsNoAttack, $02
00086305 E107                       	smpsAlterNote       $07
00086307 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
0008630F E106                       	smpsAlterNote       $06
00086311 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00086317 E10C                       	smpsAlterNote       $0C
00086319 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
0008631F E109                       	smpsAlterNote       $09
00086321 9E03                       	dc.b	nF2, $03
00086323 E10C                       	smpsAlterNote       $0C
00086325 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00086329 E1EA                       	smpsAlterNote       $EA
0008632B A201                       	dc.b	nA2, $01
0008632D E106                       	smpsAlterNote       $06
0008632F E701                       	dc.b	smpsNoAttack, $01
00086331 E1E2                       	smpsAlterNote       $E2
00086333 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00086336 E1F0                       	smpsAlterNote       $F0
00086338 E701                       	dc.b	smpsNoAttack, $01
0008633A E10C                       	smpsAlterNote       $0C
0008633C E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00086348 E116                       	smpsAlterNote       $16
0008634A 9C01                       	dc.b	nEb2, $01
0008634C E105                       	smpsAlterNote       $05
0008634E E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00086351 E1F1                       	smpsAlterNote       $F1
00086353 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00086356 E1FF                       	smpsAlterNote       $FF
00086358 E701                       	dc.b	smpsNoAttack, $01
0008635A E109                       	smpsAlterNote       $09
0008635C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00086360 E10C                       	smpsAlterNote       $0C
00086362 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008636E 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00086374 E109                       	smpsAlterNote       $09
00086376 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008637A E10C                       	smpsAlterNote       $0C
0008637C 9703                       	dc.b	nBb1, $03
0008637E E11A                       	smpsAlterNote       $1A
00086380 A101                       	dc.b	nAb2, $01
00086382 E1FB                       	smpsAlterNote       $FB
00086384 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00086387 E10A                       	smpsAlterNote       $0A
00086389 E701                       	dc.b	smpsNoAttack, $01
0008638B E1E8                       	smpsAlterNote       $E8
0008638D E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00086390 E106                       	smpsAlterNote       $06
00086392 E701                       	dc.b	smpsNoAttack, $01
00086394 E10C                       	smpsAlterNote       $0C
00086396 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
000863A2 E1F9                       	smpsAlterNote       $F9
000863A4 9D01                       	dc.b	nE2, $01
000863A6 E108                       	smpsAlterNote       $08
000863A8 E701                       	dc.b	smpsNoAttack, $01
000863AA E1F6                       	smpsAlterNote       $F6
000863AC E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000863AF E109                       	smpsAlterNote       $09
000863B1 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
000863B5 E10C                       	smpsAlterNote       $0C
000863B7 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
000863C3 E108                       	smpsAlterNote       $08
000863C5 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000863CB E106                       	smpsAlterNote       $06
000863CD A403 8001                  	dc.b	nB2, $03, nRst, $01
000863D1 E108                       	smpsAlterNote       $08
000863D3 9D03                       	dc.b	nE2, $03
000863D5 E1EB                       	smpsAlterNote       $EB
000863D7 A801                       	dc.b	nEb3, $01
000863D9 E109                       	smpsAlterNote       $09
000863DB E701                       	dc.b	smpsNoAttack, $01
000863DD E1FA                       	smpsAlterNote       $FA
000863DF E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000863E2 E108                       	smpsAlterNote       $08
000863E4 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000863F0 E1E9                       	smpsAlterNote       $E9
000863F2 A301                       	dc.b	nBb2, $01
000863F4 E107                       	smpsAlterNote       $07
000863F6 E701                       	dc.b	smpsNoAttack, $01
000863F8 E1F0                       	smpsAlterNote       $F0
000863FA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000863FD E1F7                       	smpsAlterNote       $F7
000863FF E701                       	dc.b	smpsNoAttack, $01
00086401 E107                       	smpsAlterNote       $07
00086403 E701                       	dc.b	smpsNoAttack, $01
00086405 E106                       	smpsAlterNote       $06
00086407 E701                       	dc.b	smpsNoAttack, $01
00086409 E108                       	smpsAlterNote       $08
0008640B 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00086411 E106                       	smpsAlterNote       $06
00086413 A403 8001                  	dc.b	nB2, $03, nRst, $01
00086417 E108                       	smpsAlterNote       $08
00086419 9D03                       	dc.b	nE2, $03
0008641B E10B                       	smpsAlterNote       $0B
0008641D 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00086425 E108                       	smpsAlterNote       $08
00086427 9D03                       	dc.b	nE2, $03
00086429 E10B                       	smpsAlterNote       $0B
0008642B 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008642F E113                       	smpsAlterNote       $13
00086431 A001                       	dc.b	nG2, $01
00086433 E118                       	smpsAlterNote       $18
00086435 E701                       	dc.b	smpsNoAttack, $01
00086437 E1E9                       	smpsAlterNote       $E9
00086439 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008643C E1F3                       	smpsAlterNote       $F3
0008643E E701                       	dc.b	smpsNoAttack, $01
00086440 E1FD                       	smpsAlterNote       $FD
00086442 E701                       	dc.b	smpsNoAttack, $01
00086444 E102                       	smpsAlterNote       $02
00086446 E701                       	dc.b	smpsNoAttack, $01
00086448 E107                       	smpsAlterNote       $07
0008644A 8001                       	dc.b	nRst, $01
0008644C E10B                       	smpsAlterNote       $0B
0008644E 9603                       	dc.b	nA1, $03
00086450 E10C                       	smpsAlterNote       $0C
00086452 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00086458 E10B                       	smpsAlterNote       $0B
0008645A 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00086466 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0008646C E107                       	smpsAlterNote       $07
0008646E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00086474 E10B                       	smpsAlterNote       $0B
00086476 A203                       	dc.b	nA2, $03
00086478 E107                       	smpsAlterNote       $07
0008647A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008647E E1F2                       	smpsAlterNote       $F2
00086480 A401                       	dc.b	nB2, $01
00086482 E1FF                       	smpsAlterNote       $FF
00086484 E701                       	dc.b	smpsNoAttack, $01
00086486 E107                       	smpsAlterNote       $07
00086488 E701                       	dc.b	smpsNoAttack, $01
0008648A E1FB                       	smpsAlterNote       $FB
0008648C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008648F E106                       	smpsAlterNote       $06
00086491 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00086495 E107                       	smpsAlterNote       $07
00086497 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008649B E108                       	smpsAlterNote       $08
0008649D 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000864A3 E109                       	smpsAlterNote       $09
000864A5 A003 8001                  	dc.b	nG2, $03, nRst, $01
000864A9 E10C                       	smpsAlterNote       $0C
000864AB A302 8001                  	dc.b	nBb2, $02, nRst, $01
000864AF E1F0                       	smpsAlterNote       $F0
000864B1 A401                       	dc.b	nB2, $01
000864B3 E109                       	smpsAlterNote       $09
000864B5 E701                       	dc.b	smpsNoAttack, $01
000864B7 E106                       	smpsAlterNote       $06
000864B9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000864BC E109                       	smpsAlterNote       $09
000864BE A007                       	dc.b	nG2, $07
000864C0 E108                       	smpsAlterNote       $08
000864C2 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000864C6 E107                       	smpsAlterNote       $07
000864C8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000864CE E10B                       	smpsAlterNote       $0B
000864D0 A202 8001                  	dc.b	nA2, $02, nRst, $01
000864D4 E107                       	smpsAlterNote       $07
000864D6 9B03                       	dc.b	nD2, $03
000864D8 E11A                       	smpsAlterNote       $1A
000864DA A301                       	dc.b	nBb2, $01
000864DC E1F2                       	smpsAlterNote       $F2
000864DE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000864E1 E1FF                       	smpsAlterNote       $FF
000864E3 E701                       	dc.b	smpsNoAttack, $01
000864E5 E111                       	smpsAlterNote       $11
000864E7 E701                       	dc.b	smpsNoAttack, $01
000864E9 E106                       	smpsAlterNote       $06
000864EB E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000864EE E107                       	smpsAlterNote       $07
000864F0 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000864FC E117                       	smpsAlterNote       $17
000864FE A001                       	dc.b	nG2, $01
00086500 E1FA                       	smpsAlterNote       $FA
00086502 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00086505 E116                       	smpsAlterNote       $16
00086507 E701                       	dc.b	smpsNoAttack, $01
00086509 E1F5                       	smpsAlterNote       $F5
0008650B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008650E E103                       	smpsAlterNote       $03
00086510 E701                       	dc.b	smpsNoAttack, $01
00086512 E10B                       	smpsAlterNote       $0B
00086514 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086518 E107                       	smpsAlterNote       $07
0008651A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00086520 E109                       	smpsAlterNote       $09
00086522 9E03                       	dc.b	nF2, $03
00086524 E10B                       	smpsAlterNote       $0B
00086526 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008652A E107                       	smpsAlterNote       $07
0008652C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00086532 E10B                       	smpsAlterNote       $0B
00086534 A203 8001                  	dc.b	nA2, $03, nRst, $01
00086538 E107                       	smpsAlterNote       $07
0008653A 9B03                       	dc.b	nD2, $03
0008653C E11A                       	smpsAlterNote       $1A
0008653E A301                       	dc.b	nBb2, $01
00086540 E1F9                       	smpsAlterNote       $F9
00086542 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00086545 E107                       	smpsAlterNote       $07
00086547 E701                       	dc.b	smpsNoAttack, $01
00086549 E111                       	smpsAlterNote       $11
0008654B E701                       	dc.b	smpsNoAttack, $01
0008654D E106                       	smpsAlterNote       $06
0008654F E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00086554 E107                       	smpsAlterNote       $07
00086556 9B03                       	dc.b	nD2, $03
00086558 E108                       	smpsAlterNote       $08
0008655A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00086560 E109                       	smpsAlterNote       $09
00086562 A003                       	dc.b	nG2, $03
00086564 E10C                       	smpsAlterNote       $0C
00086566 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008656A E1FD                       	smpsAlterNote       $FD
0008656C A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00086571 E106                       	smpsAlterNote       $06
00086573 8001                       	dc.b	nRst, $01
00086575 E109                       	smpsAlterNote       $09
00086577 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008657B E108                       	smpsAlterNote       $08
0008657D 9C03                       	dc.b	nEb2, $03
0008657F E107                       	smpsAlterNote       $07
00086581 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00086587 E10B                       	smpsAlterNote       $0B
00086589 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008658D E107                       	smpsAlterNote       $07
0008658F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00086593 E11A                       	smpsAlterNote       $1A
00086595 A301                       	dc.b	nBb2, $01
00086597 E1F9                       	smpsAlterNote       $F9
00086599 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008659C E107                       	smpsAlterNote       $07
0008659E E701                       	dc.b	smpsNoAttack, $01
000865A0 E1FB                       	smpsAlterNote       $FB
000865A2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000865A5 E106                       	smpsAlterNote       $06
000865A7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000865AB E107                       	smpsAlterNote       $07
000865AD 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000865B5 E1EC                       	smpsAlterNote       $EC
000865B7 A101                       	dc.b	nAb2, $01
000865B9 E108                       	smpsAlterNote       $08
000865BB E701                       	dc.b	smpsNoAttack, $01
000865BD E1E7                       	smpsAlterNote       $E7
000865BF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000865C2 E1F5                       	smpsAlterNote       $F5
000865C4 E701                       	dc.b	smpsNoAttack, $01
000865C6 E10B                       	smpsAlterNote       $0B
000865C8 E702                       	dc.b	smpsNoAttack, $02
000865CA E107                       	smpsAlterNote       $07
000865CC 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000865D2 E106                       	smpsAlterNote       $06
000865D4 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000865DA E10C                       	smpsAlterNote       $0C
000865DC 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000865E4 E109                       	smpsAlterNote       $09
000865E6 9E03                       	dc.b	nF2, $03
000865E8 E10C                       	smpsAlterNote       $0C
000865EA 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000865EE E1EA                       	smpsAlterNote       $EA
000865F0 A201                       	dc.b	nA2, $01
000865F2 E106                       	smpsAlterNote       $06
000865F4 E701                       	dc.b	smpsNoAttack, $01
000865F6 E114                       	smpsAlterNote       $14
000865F8 E701                       	dc.b	smpsNoAttack, $01
000865FA E1F0                       	smpsAlterNote       $F0
000865FC E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000865FF E10C                       	smpsAlterNote       $0C
00086601 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008660D 9703                       	dc.b	nBb1, $03
0008660F E116                       	smpsAlterNote       $16
00086611 9C01                       	dc.b	nEb2, $01
00086613 E105                       	smpsAlterNote       $05
00086615 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00086618 E113                       	smpsAlterNote       $13
0008661A E701                       	dc.b	smpsNoAttack, $01
0008661C E1FF                       	smpsAlterNote       $FF
0008661E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00086621 E109                       	smpsAlterNote       $09
00086623 E703                       	dc.b	smpsNoAttack, $03
00086625 E10C                       	smpsAlterNote       $0C
00086627 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00086633 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008663B E109                       	smpsAlterNote       $09
0008663D 9E03                       	dc.b	nF2, $03
0008663F E10C                       	smpsAlterNote       $0C
00086641 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00086645 E1EC                       	smpsAlterNote       $EC
00086647 A201                       	dc.b	nA2, $01
00086649 E10A                       	smpsAlterNote       $0A
0008664B E701                       	dc.b	smpsNoAttack, $01
0008664D E1E8                       	smpsAlterNote       $E8
0008664F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00086652 E1F7                       	smpsAlterNote       $F7
00086654 E701                       	dc.b	smpsNoAttack, $01
00086656 E10C                       	smpsAlterNote       $0C
00086658 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00086664 E1EA                       	smpsAlterNote       $EA
00086666 9D01                       	dc.b	nE2, $01
00086668 E108                       	smpsAlterNote       $08
0008666A E701                       	dc.b	smpsNoAttack, $01
0008666C E1F6                       	smpsAlterNote       $F6
0008666E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00086671 E105                       	smpsAlterNote       $05
00086673 E701                       	dc.b	smpsNoAttack, $01
00086675 E109                       	smpsAlterNote       $09
00086677 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008667B E10C                       	smpsAlterNote       $0C
0008667D 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00086689 E108                       	smpsAlterNote       $08
0008668B 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00086691 E106                       	smpsAlterNote       $06
00086693 A403 8001                  	dc.b	nB2, $03, nRst, $01
00086697 E108                       	smpsAlterNote       $08
00086699 9D03                       	dc.b	nE2, $03
0008669B E1EB                       	smpsAlterNote       $EB
0008669D A801                       	dc.b	nEb3, $01
0008669F E109                       	smpsAlterNote       $09
000866A1 E701                       	dc.b	smpsNoAttack, $01
000866A3 E1EB                       	smpsAlterNote       $EB
000866A5 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000866A8 E108                       	smpsAlterNote       $08
000866AA E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
000866B6 E1E9                       	smpsAlterNote       $E9
000866B8 A301                       	dc.b	nBb2, $01
000866BA E1F8                       	smpsAlterNote       $F8
000866BC E701                       	dc.b	smpsNoAttack, $01
000866BE E116                       	smpsAlterNote       $16
000866C0 E701                       	dc.b	smpsNoAttack, $01
000866C2 E1F7                       	smpsAlterNote       $F7
000866C4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000866C7 E107                       	smpsAlterNote       $07
000866C9 E701                       	dc.b	smpsNoAttack, $01
000866CB E1EE                       	smpsAlterNote       $EE
000866CD E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000866D0 E106                       	smpsAlterNote       $06
000866D2 8001                       	dc.b	nRst, $01
000866D4 E108                       	smpsAlterNote       $08
000866D6 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
000866DC E106                       	smpsAlterNote       $06
000866DE A402 8001                  	dc.b	nB2, $02, nRst, $01
000866E2 E108                       	smpsAlterNote       $08
000866E4 9D03                       	dc.b	nE2, $03
000866E6 E10B                       	smpsAlterNote       $0B
000866E8 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
000866EE E108                       	smpsAlterNote       $08
000866F0 9D03 8001                  	dc.b	nE2, $03, nRst, $01
000866F4 E10B                       	smpsAlterNote       $0B
000866F6 9603                       	dc.b	nA1, $03
000866F8 E10E                       	smpsAlterNote       $0E
000866FA A001                       	dc.b	nG2, $01
000866FC E118                       	smpsAlterNote       $18
000866FE E701                       	dc.b	smpsNoAttack, $01
00086700 E1E9                       	smpsAlterNote       $E9
00086702 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00086705 E1EE                       	smpsAlterNote       $EE
00086707 E701                       	dc.b	smpsNoAttack, $01
00086709 E1F8                       	smpsAlterNote       $F8
0008670B E701                       	dc.b	smpsNoAttack, $01
0008670D E102                       	smpsAlterNote       $02
0008670F E701                       	dc.b	smpsNoAttack, $01
00086711 E107                       	smpsAlterNote       $07
00086713 8001                       	dc.b	nRst, $01
00086715 E10B                       	smpsAlterNote       $0B
00086717 9603                       	dc.b	nA1, $03
00086719 E10C                       	smpsAlterNote       $0C
0008671B 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00086721 E10B                       	smpsAlterNote       $0B
00086723 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008672F 8001 9603                  	dc.b	nRst, $01, nA1, $03
00086733 E10C                       	smpsAlterNote       $0C
00086735 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00086741 8001                       	dc.b	nRst, $01
00086743 E10B                       	smpsAlterNote       $0B
00086745 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008674D E107                       	smpsAlterNote       $07
0008674F 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00086753 E10B                       	smpsAlterNote       $0B
00086755 9603                       	dc.b	nA1, $03
00086757 E109                       	smpsAlterNote       $09
00086759 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008675D E108                       	smpsAlterNote       $08
0008675F 9D06                       	dc.b	nE2, $06
00086761 E107                       	smpsAlterNote       $07
00086763 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00086767 E106                       	smpsAlterNote       $06
00086769 9903                       	dc.b	nC2, $03
0008676B E10C                       	smpsAlterNote       $0C
0008676D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00086771 E10B                       	smpsAlterNote       $0B
00086773 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008677F 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00086789 E10C                       	smpsAlterNote       $0C
0008678B 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00086797 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000867A3 8001                       	dc.b	nRst, $01
000867A5 E10B                       	smpsAlterNote       $0B
000867A7 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000867B3 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
000867BF 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
000867CB 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000867D5 E10C                       	smpsAlterNote       $0C
000867D7 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
000867E3 E10B                       	smpsAlterNote       $0B
000867E5 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000867ED E107                       	smpsAlterNote       $07
000867EF 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000867F3 E10B                       	smpsAlterNote       $0B
000867F5 9603                       	dc.b	nA1, $03
000867F7 E109                       	smpsAlterNote       $09
000867F9 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000867FD E108                       	smpsAlterNote       $08
000867FF 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00086803 E107                       	smpsAlterNote       $07
00086805 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00086809 E106                       	smpsAlterNote       $06
0008680B 9903                       	dc.b	nC2, $03
0008680D E10C                       	smpsAlterNote       $0C
0008680F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00086813 E10B                       	smpsAlterNote       $0B
00086815 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00086821 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008682B E10C                       	smpsAlterNote       $0C
0008682D 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00086839 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00086845 8001                       	dc.b	nRst, $01
00086847 E10B                       	smpsAlterNote       $0B
00086849 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00086855 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008685F E10C                       	smpsAlterNote       $0C
00086861 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008686D 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00086879 E10B                       	smpsAlterNote       $0B
0008687B 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00086887 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00086891 E10C                       	smpsAlterNote       $0C
00086893 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008689F 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
000868AB E10B                       	smpsAlterNote       $0B
000868AD 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
000868B9 8001                       	dc.b	nRst, $01
000868BB E1EC                       	smpsAlterNote       $EC
000868BD A101                       	dc.b	nAb2, $01
000868BF E1FA                       	smpsAlterNote       $FA
000868C1 E701                       	dc.b	smpsNoAttack, $01
000868C3 E116                       	smpsAlterNote       $16
000868C5 E701                       	dc.b	smpsNoAttack, $01
000868C7 E1F5                       	smpsAlterNote       $F5
000868C9 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000868CC E10B                       	smpsAlterNote       $0B
000868CE E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
000868DA 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
000868E6 E107                       	smpsAlterNote       $07
000868E8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000868EE E10B                       	smpsAlterNote       $0B
000868F0 A203                       	dc.b	nA2, $03
000868F2 E107                       	smpsAlterNote       $07
000868F4 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000868F8 E1F3                       	smpsAlterNote       $F3
000868FA A401                       	dc.b	nB2, $01
000868FC E102                       	smpsAlterNote       $02
000868FE E701                       	dc.b	smpsNoAttack, $01
00086900 E109                       	smpsAlterNote       $09
00086902 E701                       	dc.b	smpsNoAttack, $01
00086904 E102                       	smpsAlterNote       $02
00086906 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00086909 E106                       	smpsAlterNote       $06
0008690B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008690F E107                       	smpsAlterNote       $07
00086911 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00086915 E108                       	smpsAlterNote       $08
00086917 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008691D E109                       	smpsAlterNote       $09
0008691F A003 8001                  	dc.b	nG2, $03, nRst, $01
00086923 E1F2                       	smpsAlterNote       $F2
00086925 A401                       	dc.b	nB2, $01
00086927 E1FF                       	smpsAlterNote       $FF
00086929 E701                       	dc.b	smpsNoAttack, $01
0008692B E111                       	smpsAlterNote       $11
0008692D E701                       	dc.b	smpsNoAttack, $01
0008692F E1FB                       	smpsAlterNote       $FB
00086931 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00086934 E106                       	smpsAlterNote       $06
00086936 E702                       	dc.b	smpsNoAttack, $02
00086938 E109                       	smpsAlterNote       $09
0008693A A007                       	dc.b	nG2, $07
0008693C E108                       	smpsAlterNote       $08
0008693E 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00086942 E107                       	smpsAlterNote       $07
00086944 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008694A E10B                       	smpsAlterNote       $0B
0008694C A202 8001                  	dc.b	nA2, $02, nRst, $01
00086950 E107                       	smpsAlterNote       $07
00086952 9B03                       	dc.b	nD2, $03
00086954 E11A                       	smpsAlterNote       $1A
00086956 A301                       	dc.b	nBb2, $01
00086958 E1F2                       	smpsAlterNote       $F2
0008695A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008695D E1FF                       	smpsAlterNote       $FF
0008695F E701                       	dc.b	smpsNoAttack, $01
00086961 E111                       	smpsAlterNote       $11
00086963 E701                       	dc.b	smpsNoAttack, $01
00086965 E106                       	smpsAlterNote       $06
00086967 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008696A E107                       	smpsAlterNote       $07
0008696C 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00086978 E117                       	smpsAlterNote       $17
0008697A A001                       	dc.b	nG2, $01
0008697C E1FA                       	smpsAlterNote       $FA
0008697E E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00086981 E116                       	smpsAlterNote       $16
00086983 E701                       	dc.b	smpsNoAttack, $01
00086985 E1F5                       	smpsAlterNote       $F5
00086987 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008698A E103                       	smpsAlterNote       $03
0008698C E701                       	dc.b	smpsNoAttack, $01
0008698E E10B                       	smpsAlterNote       $0B
00086990 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086994 E107                       	smpsAlterNote       $07
00086996 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008699C E109                       	smpsAlterNote       $09
0008699E 9E03                       	dc.b	nF2, $03
000869A0 E10B                       	smpsAlterNote       $0B
000869A2 9603 8001                  	dc.b	nA1, $03, nRst, $01
000869A6 E107                       	smpsAlterNote       $07
000869A8 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000869AE E10B                       	smpsAlterNote       $0B
000869B0 A203 8001                  	dc.b	nA2, $03, nRst, $01
000869B4 E107                       	smpsAlterNote       $07
000869B6 9B03                       	dc.b	nD2, $03
000869B8 E11A                       	smpsAlterNote       $1A
000869BA A301                       	dc.b	nBb2, $01
000869BC E1F9                       	smpsAlterNote       $F9
000869BE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000869C1 E1FF                       	smpsAlterNote       $FF
000869C3 E701                       	dc.b	smpsNoAttack, $01
000869C5 E111                       	smpsAlterNote       $11
000869C7 E701                       	dc.b	smpsNoAttack, $01
000869C9 E106                       	smpsAlterNote       $06
000869CB E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000869CE E107                       	smpsAlterNote       $07
000869D0 9B03                       	dc.b	nD2, $03
000869D2 E108                       	smpsAlterNote       $08
000869D4 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000869DA E109                       	smpsAlterNote       $09
000869DC A003                       	dc.b	nG2, $03
000869DE E1F0                       	smpsAlterNote       $F0
000869E0 A501                       	dc.b	nC3, $01
000869E2 E106                       	smpsAlterNote       $06
000869E4 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
000869E8 E109                       	smpsAlterNote       $09
000869EA A006 8001                  	dc.b	nG2, $06, nRst, $01
000869EE E108                       	smpsAlterNote       $08
000869F0 9C03                       	dc.b	nEb2, $03
000869F2 E107                       	smpsAlterNote       $07
000869F4 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000869FA E10B                       	smpsAlterNote       $0B
000869FC A203 8001                  	dc.b	nA2, $03, nRst, $01
00086A00 E107                       	smpsAlterNote       $07
00086A02 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00086A06 E11A                       	smpsAlterNote       $1A
00086A08 A301                       	dc.b	nBb2, $01
00086A0A E1F9                       	smpsAlterNote       $F9
00086A0C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00086A0F E107                       	smpsAlterNote       $07
00086A11 E701                       	dc.b	smpsNoAttack, $01
00086A13 E1FB                       	smpsAlterNote       $FB
00086A15 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00086A18 E106                       	smpsAlterNote       $06
00086A1A E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00086A1E E107                       	smpsAlterNote       $07
00086A20 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00086A28 E1EC                       	smpsAlterNote       $EC
00086A2A A101                       	dc.b	nAb2, $01
00086A2C E108                       	smpsAlterNote       $08
00086A2E E701                       	dc.b	smpsNoAttack, $01
00086A30 E1E7                       	smpsAlterNote       $E7
00086A32 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00086A35 E1F5                       	smpsAlterNote       $F5
00086A37 E701                       	dc.b	smpsNoAttack, $01
00086A39 E10B                       	smpsAlterNote       $0B
00086A3B E702                       	dc.b	smpsNoAttack, $02
00086A3D E107                       	smpsAlterNote       $07
00086A3F 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00086A45 E106                       	smpsAlterNote       $06
00086A47 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00086A4D E10C                       	smpsAlterNote       $0C
00086A4F 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00086A57 E109                       	smpsAlterNote       $09
00086A59 9E03                       	dc.b	nF2, $03
00086A5B E10C                       	smpsAlterNote       $0C
00086A5D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00086A61 E1EA                       	smpsAlterNote       $EA
00086A63 A201                       	dc.b	nA2, $01
00086A65 E106                       	smpsAlterNote       $06
00086A67 E701                       	dc.b	smpsNoAttack, $01
00086A69 E114                       	smpsAlterNote       $14
00086A6B E701                       	dc.b	smpsNoAttack, $01
00086A6D E1F0                       	smpsAlterNote       $F0
00086A6F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00086A72 E10C                       	smpsAlterNote       $0C
00086A74 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00086A80 9703                       	dc.b	nBb1, $03
00086A82 E116                       	smpsAlterNote       $16
00086A84 9C01                       	dc.b	nEb2, $01
00086A86 E105                       	smpsAlterNote       $05
00086A88 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00086A8B E113                       	smpsAlterNote       $13
00086A8D E701                       	dc.b	smpsNoAttack, $01
00086A8F E1FF                       	smpsAlterNote       $FF
00086A91 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00086A94 E109                       	smpsAlterNote       $09
00086A96 E703                       	dc.b	smpsNoAttack, $03
00086A98 E10C                       	smpsAlterNote       $0C
00086A9A 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00086AA6 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00086AAE E109                       	smpsAlterNote       $09
00086AB0 9E03                       	dc.b	nF2, $03
00086AB2 E10C                       	smpsAlterNote       $0C
00086AB4 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00086AB8 E1EA                       	smpsAlterNote       $EA
00086ABA A201                       	dc.b	nA2, $01
00086ABC E106                       	smpsAlterNote       $06
00086ABE E701                       	dc.b	smpsNoAttack, $01
00086AC0 E1E2                       	smpsAlterNote       $E2
00086AC2 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00086AC5 E1F0                       	smpsAlterNote       $F0
00086AC7 E701                       	dc.b	smpsNoAttack, $01
00086AC9 E10C                       	smpsAlterNote       $0C
00086ACB E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00086AD7 E116                       	smpsAlterNote       $16
00086AD9 9C01                       	dc.b	nEb2, $01
00086ADB E105                       	smpsAlterNote       $05
00086ADD E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00086AE0 E1F1                       	smpsAlterNote       $F1
00086AE2 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00086AE5 E1FF                       	smpsAlterNote       $FF
00086AE7 E701                       	dc.b	smpsNoAttack, $01
00086AE9 E109                       	smpsAlterNote       $09
00086AEB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00086AEF E10C                       	smpsAlterNote       $0C
00086AF1 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00086AFD E106                       	smpsAlterNote       $06
00086AFF 9903                       	dc.b	nC2, $03
00086B01 E107                       	smpsAlterNote       $07
00086B03 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00086B07 E109                       	smpsAlterNote       $09
00086B09 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00086B0F E107                       	smpsAlterNote       $07
00086B11 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00086B15 E108                       	smpsAlterNote       $08
00086B17 9D03                       	dc.b	nE2, $03
00086B19 E10B                       	smpsAlterNote       $0B
00086B1B 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00086B21 E109                       	smpsAlterNote       $09
00086B23 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00086B29 E10C                       	smpsAlterNote       $0C
00086B2B 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00086B31 E106                       	smpsAlterNote       $06
00086B33 9903                       	dc.b	nC2, $03
00086B35 E11A                       	smpsAlterNote       $1A
00086B37 A301                       	dc.b	nBb2, $01
00086B39 E1F9                       	smpsAlterNote       $F9
00086B3B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00086B3E E1FF                       	smpsAlterNote       $FF
00086B40 E701                       	dc.b	smpsNoAttack, $01
00086B42 E111                       	smpsAlterNote       $11
00086B44 E701                       	dc.b	smpsNoAttack, $01
00086B46 E106                       	smpsAlterNote       $06
00086B48 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00086B4F E109                       	smpsAlterNote       $09
00086B51 A003                       	dc.b	nG2, $03
00086B53 E106                       	smpsAlterNote       $06
00086B55 9907                       	dc.b	nC2, $07
00086B57 E107                       	smpsAlterNote       $07
00086B59 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00086B61 E10B                       	smpsAlterNote       $0B
00086B63 A203                       	dc.b	nA2, $03
00086B65 E107                       	smpsAlterNote       $07
00086B67 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00086B6B E1F2                       	smpsAlterNote       $F2
00086B6D A401                       	dc.b	nB2, $01
00086B6F E1F9                       	smpsAlterNote       $F9
00086B71 E701                       	dc.b	smpsNoAttack, $01
00086B73 E107                       	smpsAlterNote       $07
00086B75 E701                       	dc.b	smpsNoAttack, $01
00086B77 E1FB                       	smpsAlterNote       $FB
00086B79 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00086B7C E106                       	smpsAlterNote       $06
00086B7E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00086B82 E107                       	smpsAlterNote       $07
00086B84 9B03                       	dc.b	nD2, $03
00086B86 E108                       	smpsAlterNote       $08
00086B88 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00086B8E E109                       	smpsAlterNote       $09
00086B90 A003 8001                  	dc.b	nG2, $03, nRst, $01
00086B94 E1F2                       	smpsAlterNote       $F2
00086B96 A401                       	dc.b	nB2, $01
00086B98 E1F9                       	smpsAlterNote       $F9
00086B9A E701                       	dc.b	smpsNoAttack, $01
00086B9C E107                       	smpsAlterNote       $07
00086B9E E701                       	dc.b	smpsNoAttack, $01
00086BA0 E1FB                       	smpsAlterNote       $FB
00086BA2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00086BA5 E106                       	smpsAlterNote       $06
00086BA7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00086BAB E108                       	smpsAlterNote       $08
00086BAD 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00086BB1 E10C                       	smpsAlterNote       $0C
00086BB3 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00086BB7 E107                       	smpsAlterNote       $07
00086BB9 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00086BBF E10B                       	smpsAlterNote       $0B
00086BC1 A203                       	dc.b	nA2, $03
00086BC3 E107                       	smpsAlterNote       $07
00086BC5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00086BC9 E1F2                       	smpsAlterNote       $F2
00086BCB A401                       	dc.b	nB2, $01
00086BCD E1FF                       	smpsAlterNote       $FF
00086BCF E701                       	dc.b	smpsNoAttack, $01
00086BD1 E107                       	smpsAlterNote       $07
00086BD3 E701                       	dc.b	smpsNoAttack, $01
00086BD5 E1FB                       	smpsAlterNote       $FB
00086BD7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00086BDA E106                       	smpsAlterNote       $06
00086BDC E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00086BE0 E107                       	smpsAlterNote       $07
00086BE2 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00086BE6 E108                       	smpsAlterNote       $08
00086BE8 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00086BEE E109                       	smpsAlterNote       $09
00086BF0 A003 8001                  	dc.b	nG2, $03, nRst, $01
00086BF4 E1F2                       	smpsAlterNote       $F2
00086BF6 A401                       	dc.b	nB2, $01
00086BF8 E1FF                       	smpsAlterNote       $FF
00086BFA E701                       	dc.b	smpsNoAttack, $01
00086BFC E111                       	smpsAlterNote       $11
00086BFE E701                       	dc.b	smpsNoAttack, $01
00086C00 E1FB                       	smpsAlterNote       $FB
00086C02 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00086C05 E106                       	smpsAlterNote       $06
00086C07 E702                       	dc.b	smpsNoAttack, $02
00086C09 E108                       	smpsAlterNote       $08
00086C0B 9C07                       	dc.b	nEb2, $07
00086C0D E10C                       	smpsAlterNote       $0C
00086C0F A303 8001                  	dc.b	nBb2, $03, nRst, $01
00086C13 E107                       	smpsAlterNote       $07
00086C15 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00086C1B E10B                       	smpsAlterNote       $0B
00086C1D A202 8001                  	dc.b	nA2, $02, nRst, $01
00086C21 E107                       	smpsAlterNote       $07
00086C23 9B03                       	dc.b	nD2, $03
00086C25 E11A                       	smpsAlterNote       $1A
00086C27 A301                       	dc.b	nBb2, $01
00086C29 E1F2                       	smpsAlterNote       $F2
00086C2B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00086C2E E1FF                       	smpsAlterNote       $FF
00086C30 E701                       	dc.b	smpsNoAttack, $01
00086C32 E111                       	smpsAlterNote       $11
00086C34 E701                       	dc.b	smpsNoAttack, $01
00086C36 E106                       	smpsAlterNote       $06
00086C38 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00086C3B E107                       	smpsAlterNote       $07
00086C3D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00086C41 E108                       	smpsAlterNote       $08
00086C43 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00086C4B E109                       	smpsAlterNote       $09
00086C4D A003                       	dc.b	nG2, $03
00086C4F E11A                       	smpsAlterNote       $1A
00086C51 A301                       	dc.b	nBb2, $01
00086C53 E1F2                       	smpsAlterNote       $F2
00086C55 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00086C58 E1FF                       	smpsAlterNote       $FF
00086C5A E701                       	dc.b	smpsNoAttack, $01
00086C5C E111                       	smpsAlterNote       $11
00086C5E E701                       	dc.b	smpsNoAttack, $01
00086C60 E106                       	smpsAlterNote       $06
00086C62 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00086C65 E108                       	smpsAlterNote       $08
00086C67 9C07                       	dc.b	nEb2, $07
00086C69 E10C                       	smpsAlterNote       $0C
00086C6B A303 8001                  	dc.b	nBb2, $03, nRst, $01
00086C6F E107                       	smpsAlterNote       $07
00086C71 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00086C7D 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00086C87 E108                       	smpsAlterNote       $08
00086C89 9C06                       	dc.b	nEb2, $06
00086C8B E10C                       	smpsAlterNote       $0C
00086C8D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00086C91 E108                       	smpsAlterNote       $08
00086C93 9C03                       	dc.b	nEb2, $03
00086C95 E109                       	smpsAlterNote       $09
00086C97 A003 8001                  	dc.b	nG2, $03, nRst, $01
00086C9B E10C                       	smpsAlterNote       $0C
00086C9D A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00086CA5 E107                       	smpsAlterNote       $07
00086CA7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00086CAB F6F4 F8                    	smpsJump            music84_Jump04
00086CAE                            
00086CAE                            ; FM2 Data
00086CAE                            music84_FM2:
00086CAE E0C0                       	smpsPan             panCenter, $00
00086CB2 E10B                       	smpsAlterNote       $0B
00086CB4 C603 8007                  	dc.b	nA5, $03, nRst, $07
00086CB8 E109                       	smpsAlterNote       $09
00086CBA C403 800B                  	dc.b	nG5, $03, nRst, $0B
00086CBE E108                       	smpsAlterNote       $08
00086CC0 C103 8004                  	dc.b	nE5, $03, nRst, $04
00086CC6 E080                       	smpsPan             panLeft, $00
00086CC8 E10C                       	smpsAlterNote       $0C
00086CCA E6F9                       	smpsAlterVol        $F9
00086CCC C703                       	dc.b	nBb5, $03
00086CCE E10B                       	smpsAlterNote       $0B
00086CD0 C603 8001                  	dc.b	nA5, $03, nRst, $01
00086CD4 E109                       	smpsAlterNote       $09
00086CD6 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00086CDC E108                       	smpsAlterNote       $08
00086CDE C103 8001                  	dc.b	nE5, $03, nRst, $01
00086CE2 E106                       	smpsAlterNote       $06
00086CE4 BD03                       	dc.b	nC5, $03
00086CE6 E10B                       	smpsAlterNote       $0B
00086CE8 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00086CEE E0C0                       	smpsPan             panCenter, $00
00086CF0 E107                       	smpsAlterNote       $07
00086CF2 E606                       	smpsAlterVol        $06
00086CF4 BF03                       	dc.b	nD5, $03
00086CF6                            
00086CF6                            music84_Jump03:
00086CF6 E108                       	smpsAlterNote       $08
00086CF8 C103 8001                  	dc.b	nE5, $03, nRst, $01
00086CFC E109                       	smpsAlterNote       $09
00086CFE C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00086D04 E10B                       	smpsAlterNote       $0B
00086D06 C607                       	dc.b	nA5, $07
00086D08 E107                       	smpsAlterNote       $07
00086D0A BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086D0E E106                       	smpsAlterNote       $06
00086D10 C90D                       	dc.b	nC6, $0D
00086D12 E100                       	smpsAlterNote       $00
00086D14 E701                       	dc.b	smpsNoAttack, $01
00086D16 E1FF                       	smpsAlterNote       $FF
00086D18 E701                       	dc.b	smpsNoAttack, $01
00086D1A E103                       	smpsAlterNote       $03
00086D1C E701                       	dc.b	smpsNoAttack, $01
00086D1E E109                       	smpsAlterNote       $09
00086D20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D24 E106                       	smpsAlterNote       $06
00086D26 E701                       	dc.b	smpsNoAttack, $01
00086D28 E100                       	smpsAlterNote       $00
00086D2A E701                       	dc.b	smpsNoAttack, $01
00086D2C E10C                       	smpsAlterNote       $0C
00086D2E C703 8001                  	dc.b	nBb5, $03, nRst, $01
00086D32 E10B                       	smpsAlterNote       $0B
00086D34 C603                       	dc.b	nA5, $03
00086D36 E109                       	smpsAlterNote       $09
00086D38 C403 8001                  	dc.b	nG5, $03, nRst, $01
00086D3C E10B                       	smpsAlterNote       $0B
00086D3E C60D                       	dc.b	nA5, $0D
00086D40 E105                       	smpsAlterNote       $05
00086D42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D46 E10B                       	smpsAlterNote       $0B
00086D48 E701                       	dc.b	smpsNoAttack, $01
00086D4A E10E                       	smpsAlterNote       $0E
00086D4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D50 E108                       	smpsAlterNote       $08
00086D52 E701                       	dc.b	smpsNoAttack, $01
00086D54 E104                       	smpsAlterNote       $04
00086D56 E701                       	dc.b	smpsNoAttack, $01
00086D58 E105                       	smpsAlterNote       $05
00086D5A E701                       	dc.b	smpsNoAttack, $01
00086D5C E10B                       	smpsAlterNote       $0B
00086D5E E701                       	dc.b	smpsNoAttack, $01
00086D60 E10F                       	smpsAlterNote       $0F
00086D62 E701                       	dc.b	smpsNoAttack, $01
00086D64 E10B                       	smpsAlterNote       $0B
00086D66 E701                       	dc.b	smpsNoAttack, $01
00086D68 E108                       	smpsAlterNote       $08
00086D6A E701                       	dc.b	smpsNoAttack, $01
00086D6C E104                       	smpsAlterNote       $04
00086D6E E701                       	dc.b	smpsNoAttack, $01
00086D70 E108                       	smpsAlterNote       $08
00086D72 E701                       	dc.b	smpsNoAttack, $01
00086D74 E10E                       	smpsAlterNote       $0E
00086D76 E701                       	dc.b	smpsNoAttack, $01
00086D78 E10F                       	smpsAlterNote       $0F
00086D7A E701                       	dc.b	smpsNoAttack, $01
00086D7C E10B                       	smpsAlterNote       $0B
00086D7E E701                       	dc.b	smpsNoAttack, $01
00086D80 E105                       	smpsAlterNote       $05
00086D82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D86 E108                       	smpsAlterNote       $08
00086D88 E701                       	dc.b	smpsNoAttack, $01
00086D8A E10E                       	smpsAlterNote       $0E
00086D8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D90 E108                       	smpsAlterNote       $08
00086D92 E701                       	dc.b	smpsNoAttack, $01
00086D94 E105                       	smpsAlterNote       $05
00086D96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D9A E10B                       	smpsAlterNote       $0B
00086D9C E701                       	dc.b	smpsNoAttack, $01
00086D9E E10F                       	smpsAlterNote       $0F
00086DA0 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00086DA4 E107                       	smpsAlterNote       $07
00086DA6 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086DAA E108                       	smpsAlterNote       $08
00086DAC C103                       	dc.b	nE5, $03
00086DAE E109                       	smpsAlterNote       $09
00086DB0 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00086DB8 E10B                       	smpsAlterNote       $0B
00086DBA C606 8001                  	dc.b	nA5, $06, nRst, $01
00086DBE E107                       	smpsAlterNote       $07
00086DC0 BF03                       	dc.b	nD5, $03
00086DC2 E106                       	smpsAlterNote       $06
00086DC4 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00086DC8 E107                       	smpsAlterNote       $07
00086DCA CB03                       	dc.b	nD6, $03
00086DCC E10C                       	smpsAlterNote       $0C
00086DCE C704 8001                  	dc.b	nBb5, $04, nRst, $01
00086DD2 E10B                       	smpsAlterNote       $0B
00086DD4 C604 8001                  	dc.b	nA5, $04, nRst, $01
00086DD8 E109                       	smpsAlterNote       $09
00086DDA C404                       	dc.b	nG5, $04
00086DDC E10B                       	smpsAlterNote       $0B
00086DDE C60D                       	dc.b	nA5, $0D
00086DE0 E108                       	smpsAlterNote       $08
00086DE2 E701                       	dc.b	smpsNoAttack, $01
00086DE4 E104                       	smpsAlterNote       $04
00086DE6 E701                       	dc.b	smpsNoAttack, $01
00086DE8 E108                       	smpsAlterNote       $08
00086DEA E701                       	dc.b	smpsNoAttack, $01
00086DEC E10B                       	smpsAlterNote       $0B
00086DEE E701                       	dc.b	smpsNoAttack, $01
00086DF0 E10F                       	smpsAlterNote       $0F
00086DF2 E701                       	dc.b	smpsNoAttack, $01
00086DF4 E10B                       	smpsAlterNote       $0B
00086DF6 E701                       	dc.b	smpsNoAttack, $01
00086DF8 E105                       	smpsAlterNote       $05
00086DFA E701                       	dc.b	smpsNoAttack, $01
00086DFC E104                       	smpsAlterNote       $04
00086DFE E701                       	dc.b	smpsNoAttack, $01
00086E00 E108                       	smpsAlterNote       $08
00086E02 E701                       	dc.b	smpsNoAttack, $01
00086E04 E10E                       	smpsAlterNote       $0E
00086E06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E0A E10B                       	smpsAlterNote       $0B
00086E0C E701                       	dc.b	smpsNoAttack, $01
00086E0E E105                       	smpsAlterNote       $05
00086E10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E14 E10B                       	smpsAlterNote       $0B
00086E16 E701                       	dc.b	smpsNoAttack, $01
00086E18 E10E                       	smpsAlterNote       $0E
00086E1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E1E E108                       	smpsAlterNote       $08
00086E20 E701                       	dc.b	smpsNoAttack, $01
00086E22 E104                       	smpsAlterNote       $04
00086E24 E701                       	dc.b	smpsNoAttack, $01
00086E26 E105                       	smpsAlterNote       $05
00086E28 E701                       	dc.b	smpsNoAttack, $01
00086E2A E10B                       	smpsAlterNote       $0B
00086E2C E701                       	dc.b	smpsNoAttack, $01
00086E2E E10F                       	smpsAlterNote       $0F
00086E30 E701                       	dc.b	smpsNoAttack, $01
00086E32 E10B                       	smpsAlterNote       $0B
00086E34 E701                       	dc.b	smpsNoAttack, $01
00086E36 E108                       	smpsAlterNote       $08
00086E38 E701                       	dc.b	smpsNoAttack, $01
00086E3A E105                       	smpsAlterNote       $05
00086E3C 8001                       	dc.b	nRst, $01
00086E3E E109                       	smpsAlterNote       $09
00086E40 C401                       	dc.b	nG5, $01
00086E42 E10B                       	smpsAlterNote       $0B
00086E44 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00086E4D E109                       	smpsAlterNote       $09
00086E4F C404 8001                  	dc.b	nG5, $04, nRst, $01
00086E53 E10B                       	smpsAlterNote       $0B
00086E55 C604 8001                  	dc.b	nA5, $04, nRst, $01
00086E59 E107                       	smpsAlterNote       $07
00086E5B BF0D                       	dc.b	nD5, $0D
00086E5D E101                       	smpsAlterNote       $01
00086E5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E63 E104                       	smpsAlterNote       $04
00086E65 E701                       	dc.b	smpsNoAttack, $01
00086E67 E10A                       	smpsAlterNote       $0A
00086E69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E6D E104                       	smpsAlterNote       $04
00086E6F E701                       	dc.b	smpsNoAttack, $01
00086E71 E101                       	smpsAlterNote       $01
00086E73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E77 E107                       	smpsAlterNote       $07
00086E79 E701                       	dc.b	smpsNoAttack, $01
00086E7B E10B                       	smpsAlterNote       $0B
00086E7D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086E81 E108                       	smpsAlterNote       $08
00086E83 C101                       	dc.b	nE5, $01
00086E85 E109                       	smpsAlterNote       $09
00086E87 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00086E8C E10B                       	smpsAlterNote       $0B
00086E8E C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00086E96 E108                       	smpsAlterNote       $08
00086E98 CD06                       	dc.b	nE6, $06
00086E9A E109                       	smpsAlterNote       $09
00086E9C CE07                       	dc.b	nF6, $07
00086E9E E108                       	smpsAlterNote       $08
00086EA0 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00086EA4 E106                       	smpsAlterNote       $06
00086EA6 C903                       	dc.b	nC6, $03
00086EA8 E109                       	smpsAlterNote       $09
00086EAA C403 8001                  	dc.b	nG5, $03, nRst, $01
00086EAE E10C                       	smpsAlterNote       $0C
00086EB0 C70D                       	dc.b	nBb5, $0D
00086EB2 E106                       	smpsAlterNote       $06
00086EB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EB8 E109                       	smpsAlterNote       $09
00086EBA E701                       	dc.b	smpsNoAttack, $01
00086EBC E10F                       	smpsAlterNote       $0F
00086EBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EC2 E109                       	smpsAlterNote       $09
00086EC4 E701                       	dc.b	smpsNoAttack, $01
00086EC6 E106                       	smpsAlterNote       $06
00086EC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086ECC E10C                       	smpsAlterNote       $0C
00086ECE E701                       	dc.b	smpsNoAttack, $01
00086ED0 E110                       	smpsAlterNote       $10
00086ED2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086ED6 E10B                       	smpsAlterNote       $0B
00086ED8 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00086EDC E105                       	smpsAlterNote       $05
00086EDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EE2 E10B                       	smpsAlterNote       $0B
00086EE4 E701                       	dc.b	smpsNoAttack, $01
00086EE6 E10E                       	smpsAlterNote       $0E
00086EE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EEC E108                       	smpsAlterNote       $08
00086EEE E701                       	dc.b	smpsNoAttack, $01
00086EF0 E104                       	smpsAlterNote       $04
00086EF2 E701                       	dc.b	smpsNoAttack, $01
00086EF4 E105                       	smpsAlterNote       $05
00086EF6 E701                       	dc.b	smpsNoAttack, $01
00086EF8 E10B                       	smpsAlterNote       $0B
00086EFA E701                       	dc.b	smpsNoAttack, $01
00086EFC E10F                       	smpsAlterNote       $0F
00086EFE E701                       	dc.b	smpsNoAttack, $01
00086F00 E10B                       	smpsAlterNote       $0B
00086F02 E701                       	dc.b	smpsNoAttack, $01
00086F04 E108                       	smpsAlterNote       $08
00086F06 E701                       	dc.b	smpsNoAttack, $01
00086F08 E104                       	smpsAlterNote       $04
00086F0A E701                       	dc.b	smpsNoAttack, $01
00086F0C E108                       	smpsAlterNote       $08
00086F0E E701                       	dc.b	smpsNoAttack, $01
00086F10 E10E                       	smpsAlterNote       $0E
00086F12 E701                       	dc.b	smpsNoAttack, $01
00086F14 E10F                       	smpsAlterNote       $0F
00086F16 E701                       	dc.b	smpsNoAttack, $01
00086F18 E10B                       	smpsAlterNote       $0B
00086F1A E701                       	dc.b	smpsNoAttack, $01
00086F1C E105                       	smpsAlterNote       $05
00086F1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F22 E108                       	smpsAlterNote       $08
00086F24 E701                       	dc.b	smpsNoAttack, $01
00086F26 E10E                       	smpsAlterNote       $0E
00086F28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F2C E108                       	smpsAlterNote       $08
00086F2E E701                       	dc.b	smpsNoAttack, $01
00086F30 E105                       	smpsAlterNote       $05
00086F32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F36 E10B                       	smpsAlterNote       $0B
00086F38 E701                       	dc.b	smpsNoAttack, $01
00086F3A E10F                       	smpsAlterNote       $0F
00086F3C E701                       	dc.b	smpsNoAttack, $01
00086F3E E10E                       	smpsAlterNote       $0E
00086F40 E701                       	dc.b	smpsNoAttack, $01
00086F42 E108                       	smpsAlterNote       $08
00086F44 E701                       	dc.b	smpsNoAttack, $01
00086F46 E104                       	smpsAlterNote       $04
00086F48 E701                       	dc.b	smpsNoAttack, $01
00086F4A E108                       	smpsAlterNote       $08
00086F4C E701                       	dc.b	smpsNoAttack, $01
00086F4E E10E                       	smpsAlterNote       $0E
00086F50 E701                       	dc.b	smpsNoAttack, $01
00086F52 E10F                       	smpsAlterNote       $0F
00086F54 E701                       	dc.b	smpsNoAttack, $01
00086F56 E10B                       	smpsAlterNote       $0B
00086F58 E701                       	dc.b	smpsNoAttack, $01
00086F5A E105                       	smpsAlterNote       $05
00086F5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F60 E108                       	smpsAlterNote       $08
00086F62 E701                       	dc.b	smpsNoAttack, $01
00086F64 E10E                       	smpsAlterNote       $0E
00086F66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F6A E108                       	smpsAlterNote       $08
00086F6C E701                       	dc.b	smpsNoAttack, $01
00086F6E E105                       	smpsAlterNote       $05
00086F70 E701                       	dc.b	smpsNoAttack, $01
00086F72 E10B                       	smpsAlterNote       $0B
00086F74 C60D                       	dc.b	nA5, $0D
00086F76 E108                       	smpsAlterNote       $08
00086F78 E701                       	dc.b	smpsNoAttack, $01
00086F7A E104                       	smpsAlterNote       $04
00086F7C E701                       	dc.b	smpsNoAttack, $01
00086F7E E105                       	smpsAlterNote       $05
00086F80 E701                       	dc.b	smpsNoAttack, $01
00086F82 E10B                       	smpsAlterNote       $0B
00086F84 E701                       	dc.b	smpsNoAttack, $01
00086F86 E10F                       	smpsAlterNote       $0F
00086F88 E701                       	dc.b	smpsNoAttack, $01
00086F8A E10B                       	smpsAlterNote       $0B
00086F8C E701                       	dc.b	smpsNoAttack, $01
00086F8E E108                       	smpsAlterNote       $08
00086F90 E701                       	dc.b	smpsNoAttack, $01
00086F92 E104                       	smpsAlterNote       $04
00086F94 E701                       	dc.b	smpsNoAttack, $01
00086F96 E108                       	smpsAlterNote       $08
00086F98 E701                       	dc.b	smpsNoAttack, $01
00086F9A E10E                       	smpsAlterNote       $0E
00086F9C E701                       	dc.b	smpsNoAttack, $01
00086F9E E10F                       	smpsAlterNote       $0F
00086FA0 E701                       	dc.b	smpsNoAttack, $01
00086FA4 E109                       	smpsAlterNote       $09
00086FA6 E6FF                       	smpsAlterVol        $FF
00086FA8 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00086FB2 E108                       	smpsAlterNote       $08
00086FB4 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00086FBA E107                       	smpsAlterNote       $07
00086FBC E601                       	smpsAlterVol        $01
00086FBE BF03                       	dc.b	nD5, $03
00086FC0 E108                       	smpsAlterNote       $08
00086FC2 C103 8001                  	dc.b	nE5, $03, nRst, $01
00086FC6 E109                       	smpsAlterNote       $09
00086FC8 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00086FCE E10B                       	smpsAlterNote       $0B
00086FD0 C606 8001                  	dc.b	nA5, $06, nRst, $01
00086FD4 E107                       	smpsAlterNote       $07
00086FD6 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00086FDA E106                       	smpsAlterNote       $06
00086FDC C90D                       	dc.b	nC6, $0D
00086FDE E103                       	smpsAlterNote       $03
00086FE0 E701                       	dc.b	smpsNoAttack, $01
00086FE2 E1FF                       	smpsAlterNote       $FF
00086FE4 E701                       	dc.b	smpsNoAttack, $01
00086FE6 E103                       	smpsAlterNote       $03
00086FE8 E701                       	dc.b	smpsNoAttack, $01
00086FEA E109                       	smpsAlterNote       $09
00086FEC E701                       	dc.b	smpsNoAttack, $01
00086FEE E10A                       	smpsAlterNote       $0A
00086FF0 E701                       	dc.b	smpsNoAttack, $01
00086FF2 E106                       	smpsAlterNote       $06
00086FF4 E701                       	dc.b	smpsNoAttack, $01
00086FF6 E100                       	smpsAlterNote       $00
00086FF8 E701                       	dc.b	smpsNoAttack, $01
00086FFA E10C                       	smpsAlterNote       $0C
00086FFC C703 8001                  	dc.b	nBb5, $03, nRst, $01
00087000 E10B                       	smpsAlterNote       $0B
00087002 C603                       	dc.b	nA5, $03
00087004 E109                       	smpsAlterNote       $09
00087006 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008700A E10B                       	smpsAlterNote       $0B
0008700C C60D                       	dc.b	nA5, $0D
0008700E E105                       	smpsAlterNote       $05
00087010 E701                       	dc.b	smpsNoAttack, $01
00087012 E104                       	smpsAlterNote       $04
00087014 E701                       	dc.b	smpsNoAttack, $01
00087016 E108                       	smpsAlterNote       $08
00087018 E701                       	dc.b	smpsNoAttack, $01
0008701A E10E                       	smpsAlterNote       $0E
0008701C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087020 E10B                       	smpsAlterNote       $0B
00087022 E701                       	dc.b	smpsNoAttack, $01
00087024 E105                       	smpsAlterNote       $05
00087026 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008702A E10B                       	smpsAlterNote       $0B
0008702C E701                       	dc.b	smpsNoAttack, $01
0008702E E10E                       	smpsAlterNote       $0E
00087030 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087034 E108                       	smpsAlterNote       $08
00087036 E701                       	dc.b	smpsNoAttack, $01
00087038 E104                       	smpsAlterNote       $04
0008703A E701                       	dc.b	smpsNoAttack, $01
0008703C E105                       	smpsAlterNote       $05
0008703E E701                       	dc.b	smpsNoAttack, $01
00087040 E10B                       	smpsAlterNote       $0B
00087042 E701                       	dc.b	smpsNoAttack, $01
00087044 E10F                       	smpsAlterNote       $0F
00087046 E701                       	dc.b	smpsNoAttack, $01
00087048 E10B                       	smpsAlterNote       $0B
0008704A E701                       	dc.b	smpsNoAttack, $01
0008704C E108                       	smpsAlterNote       $08
0008704E E701                       	dc.b	smpsNoAttack, $01
00087050 E104                       	smpsAlterNote       $04
00087052 E701                       	dc.b	smpsNoAttack, $01
00087054 E108                       	smpsAlterNote       $08
00087056 E701                       	dc.b	smpsNoAttack, $01
00087058 E10E                       	smpsAlterNote       $0E
0008705A E701                       	dc.b	smpsNoAttack, $01
0008705C E10F                       	smpsAlterNote       $0F
0008705E E701                       	dc.b	smpsNoAttack, $01
00087060 E10B                       	smpsAlterNote       $0B
00087062 E701                       	dc.b	smpsNoAttack, $01
00087064 E105                       	smpsAlterNote       $05
00087066 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008706A E108                       	smpsAlterNote       $08
0008706C E701                       	dc.b	smpsNoAttack, $01
0008706E E10E                       	smpsAlterNote       $0E
00087070 E701                       	dc.b	smpsNoAttack, $01
00087072 E10F                       	smpsAlterNote       $0F
00087074 800F                       	dc.b	nRst, $0F
00087076 E107                       	smpsAlterNote       $07
00087078 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008707C E108                       	smpsAlterNote       $08
0008707E C103                       	dc.b	nE5, $03
00087080 E109                       	smpsAlterNote       $09
00087082 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00087088 E10B                       	smpsAlterNote       $0B
0008708A C606 8001                  	dc.b	nA5, $06, nRst, $01
0008708E E107                       	smpsAlterNote       $07
00087090 BF03                       	dc.b	nD5, $03
00087092 E106                       	smpsAlterNote       $06
00087094 C90E                       	dc.b	nC6, $0E
00087096 E107                       	smpsAlterNote       $07
00087098 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008709C E10C                       	smpsAlterNote       $0C
0008709E C704                       	dc.b	nBb5, $04
000870A0 E10B                       	smpsAlterNote       $0B
000870A2 C604 8001                  	dc.b	nA5, $04, nRst, $01
000870A6 E109                       	smpsAlterNote       $09
000870A8 C404                       	dc.b	nG5, $04
000870AA E10B                       	smpsAlterNote       $0B
000870AC C60D                       	dc.b	nA5, $0D
000870AE E108                       	smpsAlterNote       $08
000870B0 E701                       	dc.b	smpsNoAttack, $01
000870B2 E105                       	smpsAlterNote       $05
000870B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870B8 E10B                       	smpsAlterNote       $0B
000870BA E701                       	dc.b	smpsNoAttack, $01
000870BC E10F                       	smpsAlterNote       $0F
000870BE E701                       	dc.b	smpsNoAttack, $01
000870C0 E10E                       	smpsAlterNote       $0E
000870C2 E701                       	dc.b	smpsNoAttack, $01
000870C4 E108                       	smpsAlterNote       $08
000870C6 E701                       	dc.b	smpsNoAttack, $01
000870C8 E104                       	smpsAlterNote       $04
000870CA E701                       	dc.b	smpsNoAttack, $01
000870CC E108                       	smpsAlterNote       $08
000870CE E701                       	dc.b	smpsNoAttack, $01
000870D0 E10B                       	smpsAlterNote       $0B
000870D2 E701                       	dc.b	smpsNoAttack, $01
000870D4 E10F                       	smpsAlterNote       $0F
000870D6 E701                       	dc.b	smpsNoAttack, $01
000870D8 E10B                       	smpsAlterNote       $0B
000870DA E701                       	dc.b	smpsNoAttack, $01
000870DC E105                       	smpsAlterNote       $05
000870DE E701                       	dc.b	smpsNoAttack, $01
000870E0 E104                       	smpsAlterNote       $04
000870E2 E701                       	dc.b	smpsNoAttack, $01
000870E4 E108                       	smpsAlterNote       $08
000870E6 E701                       	dc.b	smpsNoAttack, $01
000870E8 E10E                       	smpsAlterNote       $0E
000870EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870EE E10B                       	smpsAlterNote       $0B
000870F0 E701                       	dc.b	smpsNoAttack, $01
000870F2 E105                       	smpsAlterNote       $05
000870F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870F8 E10B                       	smpsAlterNote       $0B
000870FA E701                       	dc.b	smpsNoAttack, $01
000870FC E10E                       	smpsAlterNote       $0E
000870FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087102 E108                       	smpsAlterNote       $08
00087104 E701                       	dc.b	smpsNoAttack, $01
00087106 E105                       	smpsAlterNote       $05
00087108 8001                       	dc.b	nRst, $01
0008710A E109                       	smpsAlterNote       $09
0008710C C402                       	dc.b	nG5, $02
0008710E E10B                       	smpsAlterNote       $0B
00087110 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00087119 E109                       	smpsAlterNote       $09
0008711B C404                       	dc.b	nG5, $04
0008711D E10B                       	smpsAlterNote       $0B
0008711F C604 8001                  	dc.b	nA5, $04, nRst, $01
00087123 E107                       	smpsAlterNote       $07
00087125 BF0D                       	dc.b	nD5, $0D
00087127 E101                       	smpsAlterNote       $01
00087129 E701                       	dc.b	smpsNoAttack, $01
0008712B E100                       	smpsAlterNote       $00
0008712D E701                       	dc.b	smpsNoAttack, $01
0008712F E104                       	smpsAlterNote       $04
00087131 E701                       	dc.b	smpsNoAttack, $01
00087133 E10A                       	smpsAlterNote       $0A
00087135 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087139 E107                       	smpsAlterNote       $07
0008713B E701                       	dc.b	smpsNoAttack, $01
0008713D E101                       	smpsAlterNote       $01
0008713F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087143 E107                       	smpsAlterNote       $07
00087145 E701                       	dc.b	smpsNoAttack, $01
00087147 E10A                       	smpsAlterNote       $0A
00087149 E701                       	dc.b	smpsNoAttack, $01
0008714B E10B                       	smpsAlterNote       $0B
0008714D 8001                       	dc.b	nRst, $01
0008714F E108                       	smpsAlterNote       $08
00087151 C101                       	dc.b	nE5, $01
00087153 E109                       	smpsAlterNote       $09
00087155 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008715A E10B                       	smpsAlterNote       $0B
0008715C C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00087164 E108                       	smpsAlterNote       $08
00087166 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008716A E109                       	smpsAlterNote       $09
0008716C CE06 8001                  	dc.b	nF6, $06, nRst, $01
00087170 E108                       	smpsAlterNote       $08
00087172 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00087176 E106                       	smpsAlterNote       $06
00087178 C903                       	dc.b	nC6, $03
0008717A E109                       	smpsAlterNote       $09
0008717C C403 8001                  	dc.b	nG5, $03, nRst, $01
00087180 E10C                       	smpsAlterNote       $0C
00087182 C70D                       	dc.b	nBb5, $0D
00087184 E109                       	smpsAlterNote       $09
00087186 E701                       	dc.b	smpsNoAttack, $01
00087188 E105                       	smpsAlterNote       $05
0008718A E701                       	dc.b	smpsNoAttack, $01
0008718C E109                       	smpsAlterNote       $09
0008718E E701                       	dc.b	smpsNoAttack, $01
00087190 E10F                       	smpsAlterNote       $0F
00087192 E701                       	dc.b	smpsNoAttack, $01
00087194 E110                       	smpsAlterNote       $10
00087196 E701                       	dc.b	smpsNoAttack, $01
00087198 E10C                       	smpsAlterNote       $0C
0008719A E701                       	dc.b	smpsNoAttack, $01
0008719C E106                       	smpsAlterNote       $06
0008719E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871A2 E109                       	smpsAlterNote       $09
000871A4 E701                       	dc.b	smpsNoAttack, $01
000871A6 E10F                       	smpsAlterNote       $0F
000871A8 E701                       	dc.b	smpsNoAttack, $01
000871AA E110                       	smpsAlterNote       $10
000871AC 8001                       	dc.b	nRst, $01
000871AE E10B                       	smpsAlterNote       $0B
000871B0 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000871B6 E105                       	smpsAlterNote       $05
000871B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871BC E108                       	smpsAlterNote       $08
000871BE E701                       	dc.b	smpsNoAttack, $01
000871C0 E10E                       	smpsAlterNote       $0E
000871C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871C6 E108                       	smpsAlterNote       $08
000871C8 E701                       	dc.b	smpsNoAttack, $01
000871CA E105                       	smpsAlterNote       $05
000871CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871D0 E10B                       	smpsAlterNote       $0B
000871D2 E701                       	dc.b	smpsNoAttack, $01
000871D4 E10F                       	smpsAlterNote       $0F
000871D6 E701                       	dc.b	smpsNoAttack, $01
000871D8 E10E                       	smpsAlterNote       $0E
000871DA E701                       	dc.b	smpsNoAttack, $01
000871DC E108                       	smpsAlterNote       $08
000871DE E701                       	dc.b	smpsNoAttack, $01
000871E0 E104                       	smpsAlterNote       $04
000871E2 E701                       	dc.b	smpsNoAttack, $01
000871E4 E108                       	smpsAlterNote       $08
000871E6 E701                       	dc.b	smpsNoAttack, $01
000871E8 E10B                       	smpsAlterNote       $0B
000871EA E701                       	dc.b	smpsNoAttack, $01
000871EC E10F                       	smpsAlterNote       $0F
000871EE E701                       	dc.b	smpsNoAttack, $01
000871F0 E10B                       	smpsAlterNote       $0B
000871F2 E701                       	dc.b	smpsNoAttack, $01
000871F4 E105                       	smpsAlterNote       $05
000871F6 E701                       	dc.b	smpsNoAttack, $01
000871F8 E104                       	smpsAlterNote       $04
000871FA E701                       	dc.b	smpsNoAttack, $01
000871FC E108                       	smpsAlterNote       $08
000871FE E701                       	dc.b	smpsNoAttack, $01
00087200 E10E                       	smpsAlterNote       $0E
00087202 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087206 E10B                       	smpsAlterNote       $0B
00087208 E701                       	dc.b	smpsNoAttack, $01
0008720A E105                       	smpsAlterNote       $05
0008720C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087210 E10B                       	smpsAlterNote       $0B
00087212 E701                       	dc.b	smpsNoAttack, $01
00087214 E10E                       	smpsAlterNote       $0E
00087216 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008721A E108                       	smpsAlterNote       $08
0008721C E701                       	dc.b	smpsNoAttack, $01
0008721E E104                       	smpsAlterNote       $04
00087220 E701                       	dc.b	smpsNoAttack, $01
00087222 E105                       	smpsAlterNote       $05
00087224 E701                       	dc.b	smpsNoAttack, $01
00087226 E10B                       	smpsAlterNote       $0B
00087228 E701                       	dc.b	smpsNoAttack, $01
0008722A E10F                       	smpsAlterNote       $0F
0008722C E701                       	dc.b	smpsNoAttack, $01
0008722E E10B                       	smpsAlterNote       $0B
00087230 E701                       	dc.b	smpsNoAttack, $01
00087232 E108                       	smpsAlterNote       $08
00087234 E701                       	dc.b	smpsNoAttack, $01
00087236 E104                       	smpsAlterNote       $04
00087238 E701                       	dc.b	smpsNoAttack, $01
0008723A E108                       	smpsAlterNote       $08
0008723C E701                       	dc.b	smpsNoAttack, $01
0008723E E10E                       	smpsAlterNote       $0E
00087240 E701                       	dc.b	smpsNoAttack, $01
00087242 E10F                       	smpsAlterNote       $0F
00087244 E701                       	dc.b	smpsNoAttack, $01
00087246 E10B                       	smpsAlterNote       $0B
00087248 E701                       	dc.b	smpsNoAttack, $01
0008724A E105                       	smpsAlterNote       $05
0008724C E701                       	dc.b	smpsNoAttack, $01
0008724E E10B                       	smpsAlterNote       $0B
00087250 C60E                       	dc.b	nA5, $0E
00087252 E105                       	smpsAlterNote       $05
00087254 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087258 E10B                       	smpsAlterNote       $0B
0008725A E701                       	dc.b	smpsNoAttack, $01
0008725C E10E                       	smpsAlterNote       $0E
0008725E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087262 E108                       	smpsAlterNote       $08
00087264 E701                       	dc.b	smpsNoAttack, $01
00087266 E104                       	smpsAlterNote       $04
00087268 E701                       	dc.b	smpsNoAttack, $01
0008726A E105                       	smpsAlterNote       $05
0008726C E701                       	dc.b	smpsNoAttack, $01
0008726E E10B                       	smpsAlterNote       $0B
00087270 E701                       	dc.b	smpsNoAttack, $01
00087272 E10F                       	smpsAlterNote       $0F
00087274 E701                       	dc.b	smpsNoAttack, $01
00087276 E10B                       	smpsAlterNote       $0B
00087278 E701                       	dc.b	smpsNoAttack, $01
0008727A E108                       	smpsAlterNote       $08
0008727C E701                       	dc.b	smpsNoAttack, $01
0008727E E104                       	smpsAlterNote       $04
00087280 E701                       	dc.b	smpsNoAttack, $01
00087282 E108                       	smpsAlterNote       $08
00087284 E701                       	dc.b	smpsNoAttack, $01
00087286 E10E                       	smpsAlterNote       $0E
00087288 E701                       	dc.b	smpsNoAttack, $01
0008728A E10F                       	smpsAlterNote       $0F
0008728C E701                       	dc.b	smpsNoAttack, $01
0008728E E10B                       	smpsAlterNote       $0B
00087290 E701                       	dc.b	smpsNoAttack, $01
00087292 E105                       	smpsAlterNote       $05
00087294 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087298 E108                       	smpsAlterNote       $08
0008729A E701                       	dc.b	smpsNoAttack, $01
0008729C E10E                       	smpsAlterNote       $0E
0008729E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872A2 E108                       	smpsAlterNote       $08
000872A4 E701                       	dc.b	smpsNoAttack, $01
000872A6 E105                       	smpsAlterNote       $05
000872A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872AC E10B                       	smpsAlterNote       $0B
000872AE E701                       	dc.b	smpsNoAttack, $01
000872B0 E10F                       	smpsAlterNote       $0F
000872B2 E701                       	dc.b	smpsNoAttack, $01
000872B4 E10E                       	smpsAlterNote       $0E
000872B6 E701                       	dc.b	smpsNoAttack, $01
000872B8 E108                       	smpsAlterNote       $08
000872BA E701                       	dc.b	smpsNoAttack, $01
000872BC E104                       	smpsAlterNote       $04
000872BE E701                       	dc.b	smpsNoAttack, $01
000872C0 E108                       	smpsAlterNote       $08
000872C2 E701                       	dc.b	smpsNoAttack, $01
000872C4 E10E                       	smpsAlterNote       $0E
000872C6 E701                       	dc.b	smpsNoAttack, $01
000872C8 E10F                       	smpsAlterNote       $0F
000872CA E701                       	dc.b	smpsNoAttack, $01
000872CC E10B                       	smpsAlterNote       $0B
000872CE E701                       	dc.b	smpsNoAttack, $01
000872D0 E105                       	smpsAlterNote       $05
000872D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872D6 E108                       	smpsAlterNote       $08
000872D8 E701                       	dc.b	smpsNoAttack, $01
000872DA E10E                       	smpsAlterNote       $0E
000872DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872E0 E108                       	smpsAlterNote       $08
000872E2 E701                       	dc.b	smpsNoAttack, $01
000872E4 E105                       	smpsAlterNote       $05
000872E6 E701                       	dc.b	smpsNoAttack, $01
000872EA E10B                       	smpsAlterNote       $0B
000872EC E6FD                       	smpsAlterVol        $FD
000872EE C604 8001                  	dc.b	nA5, $04, nRst, $01
000872F2 E109                       	smpsAlterNote       $09
000872F4 C404                       	dc.b	nG5, $04
000872F6 E10B                       	smpsAlterNote       $0B
000872F8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000872FC E107                       	smpsAlterNote       $07
000872FE BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00087304 E10B                       	smpsAlterNote       $0B
00087306 C604                       	dc.b	nA5, $04
00087308 E109                       	smpsAlterNote       $09
0008730A C404 8001                  	dc.b	nG5, $04, nRst, $01
0008730E E10B                       	smpsAlterNote       $0B
00087310 C604                       	dc.b	nA5, $04
00087312 E108                       	smpsAlterNote       $08
00087314 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0008731C E106                       	smpsAlterNote       $06
0008731E C904 8001                  	dc.b	nC6, $04, nRst, $01
00087322 E10C                       	smpsAlterNote       $0C
00087324 C704                       	dc.b	nBb5, $04
00087326 E10B                       	smpsAlterNote       $0B
00087328 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008732C E109                       	smpsAlterNote       $09
0008732E C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00087338 E10B                       	smpsAlterNote       $0B
0008733A C60D                       	dc.b	nA5, $0D
0008733C E108                       	smpsAlterNote       $08
0008733E E701                       	dc.b	smpsNoAttack, $01
00087340 E104                       	smpsAlterNote       $04
00087342 E701                       	dc.b	smpsNoAttack, $01
00087344 E108                       	smpsAlterNote       $08
00087346 E701                       	dc.b	smpsNoAttack, $01
00087348 E10E                       	smpsAlterNote       $0E
0008734A E701                       	dc.b	smpsNoAttack, $01
0008734C E10F                       	smpsAlterNote       $0F
0008734E E701                       	dc.b	smpsNoAttack, $01
00087350 E10B                       	smpsAlterNote       $0B
00087352 E701                       	dc.b	smpsNoAttack, $01
00087354 E105                       	smpsAlterNote       $05
00087356 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008735A E108                       	smpsAlterNote       $08
0008735C E701                       	dc.b	smpsNoAttack, $01
0008735E E10E                       	smpsAlterNote       $0E
00087360 E701                       	dc.b	smpsNoAttack, $01
00087362 E10F                       	smpsAlterNote       $0F
00087364 8001                       	dc.b	nRst, $01
00087366 E109                       	smpsAlterNote       $09
00087368 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008736E E108                       	smpsAlterNote       $08
00087370 C10D                       	dc.b	nE5, $0D
00087372 E102                       	smpsAlterNote       $02
00087374 E701                       	dc.b	smpsNoAttack, $01
00087376 E101                       	smpsAlterNote       $01
00087378 E701                       	dc.b	smpsNoAttack, $01
0008737A E105                       	smpsAlterNote       $05
0008737C E701                       	dc.b	smpsNoAttack, $01
0008737E E10B                       	smpsAlterNote       $0B
00087380 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087384 E108                       	smpsAlterNote       $08
00087386 E701                       	dc.b	smpsNoAttack, $01
00087388 E102                       	smpsAlterNote       $02
0008738A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008738E E108                       	smpsAlterNote       $08
00087390 E701                       	dc.b	smpsNoAttack, $01
00087392 E10B                       	smpsAlterNote       $0B
00087394 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087398 E105                       	smpsAlterNote       $05
0008739A E701                       	dc.b	smpsNoAttack, $01
0008739C E101                       	smpsAlterNote       $01
0008739E E701                       	dc.b	smpsNoAttack, $01
000873A0 E102                       	smpsAlterNote       $02
000873A2 E701                       	dc.b	smpsNoAttack, $01
000873A4 E108                       	smpsAlterNote       $08
000873A6 E701                       	dc.b	smpsNoAttack, $01
000873A8 E10C                       	smpsAlterNote       $0C
000873AA E701                       	dc.b	smpsNoAttack, $01
000873AC E108                       	smpsAlterNote       $08
000873AE E701                       	dc.b	smpsNoAttack, $01
000873B0 E105                       	smpsAlterNote       $05
000873B2 E701                       	dc.b	smpsNoAttack, $01
000873B4 E101                       	smpsAlterNote       $01
000873B6 E701                       	dc.b	smpsNoAttack, $01
000873B8 E105                       	smpsAlterNote       $05
000873BA E701                       	dc.b	smpsNoAttack, $01
000873BC E10B                       	smpsAlterNote       $0B
000873BE E701                       	dc.b	smpsNoAttack, $01
000873C0 E10C                       	smpsAlterNote       $0C
000873C2 E701                       	dc.b	smpsNoAttack, $01
000873C4 E108                       	smpsAlterNote       $08
000873C6 E701                       	dc.b	smpsNoAttack, $01
000873C8 E102                       	smpsAlterNote       $02
000873CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873CE E105                       	smpsAlterNote       $05
000873D0 E701                       	dc.b	smpsNoAttack, $01
000873D2 E10B                       	smpsAlterNote       $0B
000873D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873D8 E105                       	smpsAlterNote       $05
000873DA E701                       	dc.b	smpsNoAttack, $01
000873DC E102                       	smpsAlterNote       $02
000873DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873E2 E108                       	smpsAlterNote       $08
000873E4 E701                       	dc.b	smpsNoAttack, $01
000873E6 E10C                       	smpsAlterNote       $0C
000873E8 E701                       	dc.b	smpsNoAttack, $01
000873EA E10B                       	smpsAlterNote       $0B
000873EC E701                       	dc.b	smpsNoAttack, $01
000873EE E105                       	smpsAlterNote       $05
000873F0 E701                       	dc.b	smpsNoAttack, $01
000873F2 E101                       	smpsAlterNote       $01
000873F4 E701                       	dc.b	smpsNoAttack, $01
000873F6 E105                       	smpsAlterNote       $05
000873F8 E701                       	dc.b	smpsNoAttack, $01
000873FA E108                       	smpsAlterNote       $08
000873FC E701                       	dc.b	smpsNoAttack, $01
000873FE E10C                       	smpsAlterNote       $0C
00087400 E701                       	dc.b	smpsNoAttack, $01
00087402 E108                       	smpsAlterNote       $08
00087404 E701                       	dc.b	smpsNoAttack, $01
00087406 E102                       	smpsAlterNote       $02
00087408 E701                       	dc.b	smpsNoAttack, $01
0008740A E101                       	smpsAlterNote       $01
0008740C E701                       	dc.b	smpsNoAttack, $01
0008740E E105                       	smpsAlterNote       $05
00087410 E701                       	dc.b	smpsNoAttack, $01
00087412 E10B                       	smpsAlterNote       $0B
00087414 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087418 E108                       	smpsAlterNote       $08
0008741A E701                       	dc.b	smpsNoAttack, $01
0008741C E102                       	smpsAlterNote       $02
0008741E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087422 E108                       	smpsAlterNote       $08
00087424 E701                       	dc.b	smpsNoAttack, $01
00087426 E10B                       	smpsAlterNote       $0B
00087428 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008742C E105                       	smpsAlterNote       $05
0008742E E701                       	dc.b	smpsNoAttack, $01
00087430 E101                       	smpsAlterNote       $01
00087432 E701                       	dc.b	smpsNoAttack, $01
00087434 E102                       	smpsAlterNote       $02
00087436 E701                       	dc.b	smpsNoAttack, $01
00087438 E108                       	smpsAlterNote       $08
0008743A E701                       	dc.b	smpsNoAttack, $01
0008743C E10C                       	smpsAlterNote       $0C
0008743E E701                       	dc.b	smpsNoAttack, $01
00087440 E108                       	smpsAlterNote       $08
00087442 E701                       	dc.b	smpsNoAttack, $01
00087444 E105                       	smpsAlterNote       $05
00087446 E701                       	dc.b	smpsNoAttack, $01
00087448 E101                       	smpsAlterNote       $01
0008744A E701                       	dc.b	smpsNoAttack, $01
0008744C E105                       	smpsAlterNote       $05
0008744E E701                       	dc.b	smpsNoAttack, $01
00087450 E10B                       	smpsAlterNote       $0B
00087452 E701                       	dc.b	smpsNoAttack, $01
00087454 E10C                       	smpsAlterNote       $0C
00087456 E701                       	dc.b	smpsNoAttack, $01
00087458 E108                       	smpsAlterNote       $08
0008745A E701                       	dc.b	smpsNoAttack, $01
0008745C E102                       	smpsAlterNote       $02
0008745E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087462 E105                       	smpsAlterNote       $05
00087464 E701                       	dc.b	smpsNoAttack, $01
00087466 E10B                       	smpsAlterNote       $0B
00087468 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008746C E105                       	smpsAlterNote       $05
0008746E E701                       	dc.b	smpsNoAttack, $01
00087470 E101                       	smpsAlterNote       $01
00087472 E701                       	dc.b	smpsNoAttack, $01
00087474 E102                       	smpsAlterNote       $02
00087476 E701                       	dc.b	smpsNoAttack, $01
00087478 E108                       	smpsAlterNote       $08
0008747A E701                       	dc.b	smpsNoAttack, $01
0008747C E10C                       	smpsAlterNote       $0C
0008747E E701                       	dc.b	smpsNoAttack, $01
00087480 E108                       	smpsAlterNote       $08
00087482 E701                       	dc.b	smpsNoAttack, $01
00087484 E105                       	smpsAlterNote       $05
00087486 E701                       	dc.b	smpsNoAttack, $01
00087488 E101                       	smpsAlterNote       $01
0008748A E701                       	dc.b	smpsNoAttack, $01
0008748C E105                       	smpsAlterNote       $05
0008748E E701                       	dc.b	smpsNoAttack, $01
00087490 E10B                       	smpsAlterNote       $0B
00087492 E701                       	dc.b	smpsNoAttack, $01
00087494 E10C                       	smpsAlterNote       $0C
00087496 E701                       	dc.b	smpsNoAttack, $01
00087498 E108                       	smpsAlterNote       $08
0008749A E701                       	dc.b	smpsNoAttack, $01
0008749C E102                       	smpsAlterNote       $02
0008749E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874A2 E105                       	smpsAlterNote       $05
000874A4 E701                       	dc.b	smpsNoAttack, $01
000874A6 E10B                       	smpsAlterNote       $0B
000874A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874AC E105                       	smpsAlterNote       $05
000874AE E701                       	dc.b	smpsNoAttack, $01
000874B0 E102                       	smpsAlterNote       $02
000874B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874B6 E108                       	smpsAlterNote       $08
000874B8 E701                       	dc.b	smpsNoAttack, $01
000874BA E10C                       	smpsAlterNote       $0C
000874BC E701                       	dc.b	smpsNoAttack, $01
000874BE E10B                       	smpsAlterNote       $0B
000874C0 E701                       	dc.b	smpsNoAttack, $01
000874C2 E105                       	smpsAlterNote       $05
000874C4 E701                       	dc.b	smpsNoAttack, $01
000874C6 E101                       	smpsAlterNote       $01
000874C8 E701                       	dc.b	smpsNoAttack, $01
000874CA E105                       	smpsAlterNote       $05
000874CC E701                       	dc.b	smpsNoAttack, $01
000874CE E108                       	smpsAlterNote       $08
000874D0 E701                       	dc.b	smpsNoAttack, $01
000874D2 E10C                       	smpsAlterNote       $0C
000874D4 E701                       	dc.b	smpsNoAttack, $01
000874D8 E10B                       	smpsAlterNote       $0B
000874DA C604 8001                  	dc.b	nA5, $04, nRst, $01
000874DE E109                       	smpsAlterNote       $09
000874E0 C404                       	dc.b	nG5, $04
000874E2 E10B                       	smpsAlterNote       $0B
000874E4 C604 8001                  	dc.b	nA5, $04, nRst, $01
000874E8 E107                       	smpsAlterNote       $07
000874EA BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000874F0 E10B                       	smpsAlterNote       $0B
000874F2 C604                       	dc.b	nA5, $04
000874F4 E109                       	smpsAlterNote       $09
000874F6 C404 8001                  	dc.b	nG5, $04, nRst, $01
000874FA E10B                       	smpsAlterNote       $0B
000874FC C604                       	dc.b	nA5, $04
000874FE E108                       	smpsAlterNote       $08
00087500 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00087506 E106                       	smpsAlterNote       $06
00087508 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008750C E10C                       	smpsAlterNote       $0C
0008750E C704                       	dc.b	nBb5, $04
00087510 E10B                       	smpsAlterNote       $0B
00087512 C604 8001                  	dc.b	nA5, $04, nRst, $01
00087516 E109                       	smpsAlterNote       $09
00087518 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00087522 E10B                       	smpsAlterNote       $0B
00087524 C60D                       	dc.b	nA5, $0D
00087526 E108                       	smpsAlterNote       $08
00087528 E701                       	dc.b	smpsNoAttack, $01
0008752A E104                       	smpsAlterNote       $04
0008752C E701                       	dc.b	smpsNoAttack, $01
0008752E E108                       	smpsAlterNote       $08
00087530 E701                       	dc.b	smpsNoAttack, $01
00087532 E10B                       	smpsAlterNote       $0B
00087534 E701                       	dc.b	smpsNoAttack, $01
00087536 E10F                       	smpsAlterNote       $0F
00087538 E701                       	dc.b	smpsNoAttack, $01
0008753A E10B                       	smpsAlterNote       $0B
0008753C E701                       	dc.b	smpsNoAttack, $01
0008753E E105                       	smpsAlterNote       $05
00087540 E701                       	dc.b	smpsNoAttack, $01
00087542 E104                       	smpsAlterNote       $04
00087544 E701                       	dc.b	smpsNoAttack, $01
00087546 E108                       	smpsAlterNote       $08
00087548 E701                       	dc.b	smpsNoAttack, $01
0008754A E10E                       	smpsAlterNote       $0E
0008754C E701                       	dc.b	smpsNoAttack, $01
0008754E E10F                       	smpsAlterNote       $0F
00087550 8001                       	dc.b	nRst, $01
00087552 E109                       	smpsAlterNote       $09
00087554 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008755A E108                       	smpsAlterNote       $08
0008755C C10D                       	dc.b	nE5, $0D
0008755E E105                       	smpsAlterNote       $05
00087560 E701                       	dc.b	smpsNoAttack, $01
00087562 E101                       	smpsAlterNote       $01
00087564 E701                       	dc.b	smpsNoAttack, $01
00087566 E105                       	smpsAlterNote       $05
00087568 E701                       	dc.b	smpsNoAttack, $01
0008756A E10B                       	smpsAlterNote       $0B
0008756C E701                       	dc.b	smpsNoAttack, $01
0008756E E10C                       	smpsAlterNote       $0C
00087570 E701                       	dc.b	smpsNoAttack, $01
00087572 E108                       	smpsAlterNote       $08
00087574 E701                       	dc.b	smpsNoAttack, $01
00087576 E102                       	smpsAlterNote       $02
00087578 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008757C E105                       	smpsAlterNote       $05
0008757E E701                       	dc.b	smpsNoAttack, $01
00087580 E10B                       	smpsAlterNote       $0B
00087582 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087586 E105                       	smpsAlterNote       $05
00087588 E701                       	dc.b	smpsNoAttack, $01
0008758A E102                       	smpsAlterNote       $02
0008758C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087590 E108                       	smpsAlterNote       $08
00087592 E701                       	dc.b	smpsNoAttack, $01
00087594 E10C                       	smpsAlterNote       $0C
00087596 E701                       	dc.b	smpsNoAttack, $01
00087598 E10B                       	smpsAlterNote       $0B
0008759A E701                       	dc.b	smpsNoAttack, $01
0008759C E105                       	smpsAlterNote       $05
0008759E E701                       	dc.b	smpsNoAttack, $01
000875A0 E101                       	smpsAlterNote       $01
000875A2 E701                       	dc.b	smpsNoAttack, $01
000875A4 E105                       	smpsAlterNote       $05
000875A6 E701                       	dc.b	smpsNoAttack, $01
000875A8 E108                       	smpsAlterNote       $08
000875AA E701                       	dc.b	smpsNoAttack, $01
000875AC E10C                       	smpsAlterNote       $0C
000875AE E701                       	dc.b	smpsNoAttack, $01
000875B0 E108                       	smpsAlterNote       $08
000875B2 E701                       	dc.b	smpsNoAttack, $01
000875B4 E102                       	smpsAlterNote       $02
000875B6 E701                       	dc.b	smpsNoAttack, $01
000875B8 E101                       	smpsAlterNote       $01
000875BA E701                       	dc.b	smpsNoAttack, $01
000875BC E105                       	smpsAlterNote       $05
000875BE E701                       	dc.b	smpsNoAttack, $01
000875C0 E10B                       	smpsAlterNote       $0B
000875C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875C6 E108                       	smpsAlterNote       $08
000875C8 E701                       	dc.b	smpsNoAttack, $01
000875CA E102                       	smpsAlterNote       $02
000875CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875D0 E108                       	smpsAlterNote       $08
000875D2 E701                       	dc.b	smpsNoAttack, $01
000875D4 E10B                       	smpsAlterNote       $0B
000875D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875DA E105                       	smpsAlterNote       $05
000875DC E701                       	dc.b	smpsNoAttack, $01
000875DE E101                       	smpsAlterNote       $01
000875E0 E701                       	dc.b	smpsNoAttack, $01
000875E2 E102                       	smpsAlterNote       $02
000875E4 E701                       	dc.b	smpsNoAttack, $01
000875E6 E108                       	smpsAlterNote       $08
000875E8 E701                       	dc.b	smpsNoAttack, $01
000875EA E10C                       	smpsAlterNote       $0C
000875EC E701                       	dc.b	smpsNoAttack, $01
000875EE E108                       	smpsAlterNote       $08
000875F0 E701                       	dc.b	smpsNoAttack, $01
000875F2 E105                       	smpsAlterNote       $05
000875F4 E701                       	dc.b	smpsNoAttack, $01
000875F6 E101                       	smpsAlterNote       $01
000875F8 E701                       	dc.b	smpsNoAttack, $01
000875FA E105                       	smpsAlterNote       $05
000875FC E701                       	dc.b	smpsNoAttack, $01
000875FE E10B                       	smpsAlterNote       $0B
00087600 E701                       	dc.b	smpsNoAttack, $01
00087602 E10C                       	smpsAlterNote       $0C
00087604 E701                       	dc.b	smpsNoAttack, $01
00087606 E108                       	smpsAlterNote       $08
00087608 E701                       	dc.b	smpsNoAttack, $01
0008760A E102                       	smpsAlterNote       $02
0008760C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087610 E108                       	smpsAlterNote       $08
00087612 E701                       	dc.b	smpsNoAttack, $01
00087614 E10B                       	smpsAlterNote       $0B
00087616 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008761A E105                       	smpsAlterNote       $05
0008761C E701                       	dc.b	smpsNoAttack, $01
0008761E E101                       	smpsAlterNote       $01
00087620 E701                       	dc.b	smpsNoAttack, $01
00087622 E102                       	smpsAlterNote       $02
00087624 E701                       	dc.b	smpsNoAttack, $01
00087626 E108                       	smpsAlterNote       $08
00087628 E701                       	dc.b	smpsNoAttack, $01
0008762A E10C                       	smpsAlterNote       $0C
0008762C E701                       	dc.b	smpsNoAttack, $01
0008762E E108                       	smpsAlterNote       $08
00087630 E701                       	dc.b	smpsNoAttack, $01
00087632 E105                       	smpsAlterNote       $05
00087634 E701                       	dc.b	smpsNoAttack, $01
00087636 E101                       	smpsAlterNote       $01
00087638 E701                       	dc.b	smpsNoAttack, $01
0008763A E105                       	smpsAlterNote       $05
0008763C E701                       	dc.b	smpsNoAttack, $01
0008763E E10B                       	smpsAlterNote       $0B
00087640 E701                       	dc.b	smpsNoAttack, $01
00087642 E10C                       	smpsAlterNote       $0C
00087644 E701                       	dc.b	smpsNoAttack, $01
00087646 E108                       	smpsAlterNote       $08
00087648 E701                       	dc.b	smpsNoAttack, $01
0008764A E102                       	smpsAlterNote       $02
0008764C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087650 E105                       	smpsAlterNote       $05
00087652 E701                       	dc.b	smpsNoAttack, $01
00087654 E10B                       	smpsAlterNote       $0B
00087656 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008765A E105                       	smpsAlterNote       $05
0008765C E701                       	dc.b	smpsNoAttack, $01
0008765E E102                       	smpsAlterNote       $02
00087660 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087664 E108                       	smpsAlterNote       $08
00087666 E701                       	dc.b	smpsNoAttack, $01
00087668 E10C                       	smpsAlterNote       $0C
0008766A E701                       	dc.b	smpsNoAttack, $01
0008766C E10B                       	smpsAlterNote       $0B
0008766E E701                       	dc.b	smpsNoAttack, $01
00087670 E105                       	smpsAlterNote       $05
00087672 E701                       	dc.b	smpsNoAttack, $01
00087674 E101                       	smpsAlterNote       $01
00087676 E701                       	dc.b	smpsNoAttack, $01
00087678 E105                       	smpsAlterNote       $05
0008767A E701                       	dc.b	smpsNoAttack, $01
0008767C E108                       	smpsAlterNote       $08
0008767E E701                       	dc.b	smpsNoAttack, $01
00087680 E10C                       	smpsAlterNote       $0C
00087682 E701                       	dc.b	smpsNoAttack, $01
00087684 E108                       	smpsAlterNote       $08
00087686 E701                       	dc.b	smpsNoAttack, $01
00087688 E102                       	smpsAlterNote       $02
0008768A E701                       	dc.b	smpsNoAttack, $01
0008768C E101                       	smpsAlterNote       $01
0008768E E701                       	dc.b	smpsNoAttack, $01
00087690 E105                       	smpsAlterNote       $05
00087692 E701                       	dc.b	smpsNoAttack, $01
00087694 E10B                       	smpsAlterNote       $0B
00087696 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008769A E108                       	smpsAlterNote       $08
0008769C E701                       	dc.b	smpsNoAttack, $01
0008769E E102                       	smpsAlterNote       $02
000876A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876A4 E108                       	smpsAlterNote       $08
000876A6 E701                       	dc.b	smpsNoAttack, $01
000876A8 E10B                       	smpsAlterNote       $0B
000876AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876AE E105                       	smpsAlterNote       $05
000876B0 E701                       	dc.b	smpsNoAttack, $01
000876B2 E102                       	smpsAlterNote       $02
000876B4 8001                       	dc.b	nRst, $01
000876B6 E107                       	smpsAlterNote       $07
000876B8 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000876BC E108                       	smpsAlterNote       $08
000876BE C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
000876C2 E102                       	smpsAlterNote       $02
000876C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876C8 E108                       	smpsAlterNote       $08
000876CA E701                       	dc.b	smpsNoAttack, $01
000876CC E10B                       	smpsAlterNote       $0B
000876CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876D2 E105                       	smpsAlterNote       $05
000876D4 E701                       	dc.b	smpsNoAttack, $01
000876D6 E101                       	smpsAlterNote       $01
000876D8 E701                       	dc.b	smpsNoAttack, $01
000876DA E102                       	smpsAlterNote       $02
000876DC E701                       	dc.b	smpsNoAttack, $01
000876DE E108                       	smpsAlterNote       $08
000876E0 E701                       	dc.b	smpsNoAttack, $01
000876E2 E10C                       	smpsAlterNote       $0C
000876E4 E701                       	dc.b	smpsNoAttack, $01
000876E6 E108                       	smpsAlterNote       $08
000876E8 E701                       	dc.b	smpsNoAttack, $01
000876EA E105                       	smpsAlterNote       $05
000876EC E701                       	dc.b	smpsNoAttack, $01
000876EE E101                       	smpsAlterNote       $01
000876F0 E701                       	dc.b	smpsNoAttack, $01
000876F2 E105                       	smpsAlterNote       $05
000876F4 E701                       	dc.b	smpsNoAttack, $01
000876F6 E10B                       	smpsAlterNote       $0B
000876F8 E701                       	dc.b	smpsNoAttack, $01
000876FA E10C                       	smpsAlterNote       $0C
000876FC E701                       	dc.b	smpsNoAttack, $01
000876FE E108                       	smpsAlterNote       $08
00087700 E701                       	dc.b	smpsNoAttack, $01
00087702 E102                       	smpsAlterNote       $02
00087704 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087708 E105                       	smpsAlterNote       $05
0008770A E701                       	dc.b	smpsNoAttack, $01
0008770C E10B                       	smpsAlterNote       $0B
0008770E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087712 E105                       	smpsAlterNote       $05
00087714 E701                       	dc.b	smpsNoAttack, $01
00087716 E102                       	smpsAlterNote       $02
00087718 E701                       	dc.b	smpsNoAttack, $01
0008771A E109                       	smpsAlterNote       $09
0008771C C40A C207                  	dc.b	nG5, $0A, nF5, $07
00087720 E108                       	smpsAlterNote       $08
00087722 C10D                       	dc.b	nE5, $0D
00087724 E105                       	smpsAlterNote       $05
00087726 E701                       	dc.b	smpsNoAttack, $01
00087728 E101                       	smpsAlterNote       $01
0008772A E701                       	dc.b	smpsNoAttack, $01
0008772C E102                       	smpsAlterNote       $02
0008772E E701                       	dc.b	smpsNoAttack, $01
00087730 E108                       	smpsAlterNote       $08
00087732 E701                       	dc.b	smpsNoAttack, $01
00087734 E10C                       	smpsAlterNote       $0C
00087736 E701                       	dc.b	smpsNoAttack, $01
00087738 E108                       	smpsAlterNote       $08
0008773A E701                       	dc.b	smpsNoAttack, $01
0008773C E105                       	smpsAlterNote       $05
0008773E E701                       	dc.b	smpsNoAttack, $01
00087740 E101                       	smpsAlterNote       $01
00087742 E701                       	dc.b	smpsNoAttack, $01
00087744 E105                       	smpsAlterNote       $05
00087746 E701                       	dc.b	smpsNoAttack, $01
00087748 E10B                       	smpsAlterNote       $0B
0008774A E701                       	dc.b	smpsNoAttack, $01
0008774C E10C                       	smpsAlterNote       $0C
0008774E E701                       	dc.b	smpsNoAttack, $01
00087750 E108                       	smpsAlterNote       $08
00087752 E701                       	dc.b	smpsNoAttack, $01
00087754 E102                       	smpsAlterNote       $02
00087756 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0008775E E10B                       	smpsAlterNote       $0B
00087760 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00087764 E10C                       	smpsAlterNote       $0C
00087766 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008776A E10B                       	smpsAlterNote       $0B
0008776C BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00087772 E107                       	smpsAlterNote       $07
00087774 BF03                       	dc.b	nD5, $03
00087776 E108                       	smpsAlterNote       $08
00087778 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008777C E109                       	smpsAlterNote       $09
0008777E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00087784 E10B                       	smpsAlterNote       $0B
00087786 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008778A E107                       	smpsAlterNote       $07
0008778C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00087790 E106                       	smpsAlterNote       $06
00087792 C90D                       	dc.b	nC6, $0D
00087794 E103                       	smpsAlterNote       $03
00087796 E701                       	dc.b	smpsNoAttack, $01
00087798 E1FF                       	smpsAlterNote       $FF
0008779A E701                       	dc.b	smpsNoAttack, $01
0008779C E103                       	smpsAlterNote       $03
0008779E E701                       	dc.b	smpsNoAttack, $01
000877A0 E109                       	smpsAlterNote       $09
000877A2 E701                       	dc.b	smpsNoAttack, $01
000877A4 E10A                       	smpsAlterNote       $0A
000877A6 E701                       	dc.b	smpsNoAttack, $01
000877A8 E106                       	smpsAlterNote       $06
000877AA E701                       	dc.b	smpsNoAttack, $01
000877AC E100                       	smpsAlterNote       $00
000877AE E701                       	dc.b	smpsNoAttack, $01
000877B0 E10C                       	smpsAlterNote       $0C
000877B2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000877B6 E10B                       	smpsAlterNote       $0B
000877B8 C603                       	dc.b	nA5, $03
000877BA E109                       	smpsAlterNote       $09
000877BC C403 8001                  	dc.b	nG5, $03, nRst, $01
000877C0 E10B                       	smpsAlterNote       $0B
000877C2 C60D                       	dc.b	nA5, $0D
000877C4 E105                       	smpsAlterNote       $05
000877C6 E701                       	dc.b	smpsNoAttack, $01
000877C8 E104                       	smpsAlterNote       $04
000877CA E701                       	dc.b	smpsNoAttack, $01
000877CC E108                       	smpsAlterNote       $08
000877CE E701                       	dc.b	smpsNoAttack, $01
000877D0 E10E                       	smpsAlterNote       $0E
000877D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000877D6 E10B                       	smpsAlterNote       $0B
000877D8 E701                       	dc.b	smpsNoAttack, $01
000877DA E105                       	smpsAlterNote       $05
000877DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000877E0 E10B                       	smpsAlterNote       $0B
000877E2 E701                       	dc.b	smpsNoAttack, $01
000877E4 E10E                       	smpsAlterNote       $0E
000877E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000877EA E108                       	smpsAlterNote       $08
000877EC E701                       	dc.b	smpsNoAttack, $01
000877EE E104                       	smpsAlterNote       $04
000877F0 E701                       	dc.b	smpsNoAttack, $01
000877F2 E105                       	smpsAlterNote       $05
000877F4 E701                       	dc.b	smpsNoAttack, $01
000877F6 E10B                       	smpsAlterNote       $0B
000877F8 E701                       	dc.b	smpsNoAttack, $01
000877FA E10F                       	smpsAlterNote       $0F
000877FC E701                       	dc.b	smpsNoAttack, $01
000877FE E10B                       	smpsAlterNote       $0B
00087800 E701                       	dc.b	smpsNoAttack, $01
00087802 E108                       	smpsAlterNote       $08
00087804 E701                       	dc.b	smpsNoAttack, $01
00087806 E104                       	smpsAlterNote       $04
00087808 E701                       	dc.b	smpsNoAttack, $01
0008780A E108                       	smpsAlterNote       $08
0008780C E701                       	dc.b	smpsNoAttack, $01
0008780E E10E                       	smpsAlterNote       $0E
00087810 E701                       	dc.b	smpsNoAttack, $01
00087812 E10F                       	smpsAlterNote       $0F
00087814 E701                       	dc.b	smpsNoAttack, $01
00087816 E10B                       	smpsAlterNote       $0B
00087818 E701                       	dc.b	smpsNoAttack, $01
0008781A E105                       	smpsAlterNote       $05
0008781C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087820 E108                       	smpsAlterNote       $08
00087822 E701                       	dc.b	smpsNoAttack, $01
00087824 E10E                       	smpsAlterNote       $0E
00087826 E701                       	dc.b	smpsNoAttack, $01
00087828 E10F                       	smpsAlterNote       $0F
0008782A 800F                       	dc.b	nRst, $0F
0008782C E107                       	smpsAlterNote       $07
0008782E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00087832 E108                       	smpsAlterNote       $08
00087834 C103                       	dc.b	nE5, $03
00087836 E109                       	smpsAlterNote       $09
00087838 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008783E E10B                       	smpsAlterNote       $0B
00087840 C607                       	dc.b	nA5, $07
00087842 E107                       	smpsAlterNote       $07
00087844 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00087848 E106                       	smpsAlterNote       $06
0008784A C90D                       	dc.b	nC6, $0D
0008784C E107                       	smpsAlterNote       $07
0008784E CB03 8001                  	dc.b	nD6, $03, nRst, $01
00087852 E10C                       	smpsAlterNote       $0C
00087854 C704                       	dc.b	nBb5, $04
00087856 E10B                       	smpsAlterNote       $0B
00087858 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008785C E109                       	smpsAlterNote       $09
0008785E C404                       	dc.b	nG5, $04
00087860 E10B                       	smpsAlterNote       $0B
00087862 C60D                       	dc.b	nA5, $0D
00087864 E108                       	smpsAlterNote       $08
00087866 E701                       	dc.b	smpsNoAttack, $01
00087868 E105                       	smpsAlterNote       $05
0008786A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008786E E10B                       	smpsAlterNote       $0B
00087870 E701                       	dc.b	smpsNoAttack, $01
00087872 E10F                       	smpsAlterNote       $0F
00087874 E701                       	dc.b	smpsNoAttack, $01
00087876 E10E                       	smpsAlterNote       $0E
00087878 E701                       	dc.b	smpsNoAttack, $01
0008787A E108                       	smpsAlterNote       $08
0008787C E701                       	dc.b	smpsNoAttack, $01
0008787E E104                       	smpsAlterNote       $04
00087880 E701                       	dc.b	smpsNoAttack, $01
00087882 E108                       	smpsAlterNote       $08
00087884 E701                       	dc.b	smpsNoAttack, $01
00087886 E10B                       	smpsAlterNote       $0B
00087888 E701                       	dc.b	smpsNoAttack, $01
0008788A E10F                       	smpsAlterNote       $0F
0008788C E701                       	dc.b	smpsNoAttack, $01
0008788E E10B                       	smpsAlterNote       $0B
00087890 E701                       	dc.b	smpsNoAttack, $01
00087892 E105                       	smpsAlterNote       $05
00087894 E701                       	dc.b	smpsNoAttack, $01
00087896 E104                       	smpsAlterNote       $04
00087898 E701                       	dc.b	smpsNoAttack, $01
0008789A E108                       	smpsAlterNote       $08
0008789C E701                       	dc.b	smpsNoAttack, $01
0008789E E10E                       	smpsAlterNote       $0E
000878A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878A4 E10B                       	smpsAlterNote       $0B
000878A6 E701                       	dc.b	smpsNoAttack, $01
000878A8 E105                       	smpsAlterNote       $05
000878AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878AE E10B                       	smpsAlterNote       $0B
000878B0 E701                       	dc.b	smpsNoAttack, $01
000878B2 E10E                       	smpsAlterNote       $0E
000878B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878B8 E108                       	smpsAlterNote       $08
000878BA E701                       	dc.b	smpsNoAttack, $01
000878BC E105                       	smpsAlterNote       $05
000878BE 8001                       	dc.b	nRst, $01
000878C0 E109                       	smpsAlterNote       $09
000878C2 C401 8001                  	dc.b	nG5, $01, nRst, $01
000878C6 E10B                       	smpsAlterNote       $0B
000878C8 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000878D0 E109                       	smpsAlterNote       $09
000878D2 C404                       	dc.b	nG5, $04
000878D4 E10B                       	smpsAlterNote       $0B
000878D6 C604 8001                  	dc.b	nA5, $04, nRst, $01
000878DA E107                       	smpsAlterNote       $07
000878DC BF0D                       	dc.b	nD5, $0D
000878DE E101                       	smpsAlterNote       $01
000878E0 E701                       	dc.b	smpsNoAttack, $01
000878E2 E100                       	smpsAlterNote       $00
000878E4 E701                       	dc.b	smpsNoAttack, $01
000878E6 E104                       	smpsAlterNote       $04
000878E8 E701                       	dc.b	smpsNoAttack, $01
000878EA E10A                       	smpsAlterNote       $0A
000878EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878F0 E107                       	smpsAlterNote       $07
000878F2 E701                       	dc.b	smpsNoAttack, $01
000878F4 E101                       	smpsAlterNote       $01
000878F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878FA E107                       	smpsAlterNote       $07
000878FC E701                       	dc.b	smpsNoAttack, $01
000878FE E10A                       	smpsAlterNote       $0A
00087900 E701                       	dc.b	smpsNoAttack, $01
00087902 E10B                       	smpsAlterNote       $0B
00087904 8001                       	dc.b	nRst, $01
00087906 E108                       	smpsAlterNote       $08
00087908 8001                       	dc.b	nRst, $01
0008790A E109                       	smpsAlterNote       $09
0008790C 8001 C401                  	dc.b	nRst, $01, nG5, $01
00087910 E10B                       	smpsAlterNote       $0B
00087912 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008791A E108                       	smpsAlterNote       $08
0008791C CD06 8001                  	dc.b	nE6, $06, nRst, $01
00087920 E109                       	smpsAlterNote       $09
00087922 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00087926 E108                       	smpsAlterNote       $08
00087928 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008792C E106                       	smpsAlterNote       $06
0008792E C903                       	dc.b	nC6, $03
00087930 E109                       	smpsAlterNote       $09
00087932 C403 8001                  	dc.b	nG5, $03, nRst, $01
00087936 E10C                       	smpsAlterNote       $0C
00087938 C70D                       	dc.b	nBb5, $0D
0008793A E109                       	smpsAlterNote       $09
0008793C E701                       	dc.b	smpsNoAttack, $01
0008793E E105                       	smpsAlterNote       $05
00087940 E701                       	dc.b	smpsNoAttack, $01
00087942 E109                       	smpsAlterNote       $09
00087944 E701                       	dc.b	smpsNoAttack, $01
00087946 E10F                       	smpsAlterNote       $0F
00087948 E701                       	dc.b	smpsNoAttack, $01
0008794A E110                       	smpsAlterNote       $10
0008794C E701                       	dc.b	smpsNoAttack, $01
0008794E E10C                       	smpsAlterNote       $0C
00087950 E701                       	dc.b	smpsNoAttack, $01
00087952 E106                       	smpsAlterNote       $06
00087954 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087958 E109                       	smpsAlterNote       $09
0008795A E701                       	dc.b	smpsNoAttack, $01
0008795C E10F                       	smpsAlterNote       $0F
0008795E E701                       	dc.b	smpsNoAttack, $01
00087960 E110                       	smpsAlterNote       $10
00087962 8001                       	dc.b	nRst, $01
00087964 E10B                       	smpsAlterNote       $0B
00087966 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008796A E109                       	smpsAlterNote       $09
0008796C C40D                       	dc.b	nG5, $0D
0008796E E103                       	smpsAlterNote       $03
00087970 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087974 E106                       	smpsAlterNote       $06
00087976 E701                       	dc.b	smpsNoAttack, $01
00087978 E10C                       	smpsAlterNote       $0C
0008797A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008797E E106                       	smpsAlterNote       $06
00087980 E701                       	dc.b	smpsNoAttack, $01
00087982 E103                       	smpsAlterNote       $03
00087984 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087988 E109                       	smpsAlterNote       $09
0008798A E701                       	dc.b	smpsNoAttack, $01
0008798C E10D                       	smpsAlterNote       $0D
0008798E E701                       	dc.b	smpsNoAttack, $01
00087990 E10C                       	smpsAlterNote       $0C
00087992 E701                       	dc.b	smpsNoAttack, $01
00087994 E106                       	smpsAlterNote       $06
00087996 E701                       	dc.b	smpsNoAttack, $01
00087998 E102                       	smpsAlterNote       $02
0008799A E701                       	dc.b	smpsNoAttack, $01
0008799C E103                       	smpsAlterNote       $03
0008799E 8001                       	dc.b	nRst, $01
000879A0 E10B                       	smpsAlterNote       $0B
000879A2 C60D                       	dc.b	nA5, $0D
000879A4 E108                       	smpsAlterNote       $08
000879A6 E701                       	dc.b	smpsNoAttack, $01
000879A8 E104                       	smpsAlterNote       $04
000879AA E701                       	dc.b	smpsNoAttack, $01
000879AC E108                       	smpsAlterNote       $08
000879AE E701                       	dc.b	smpsNoAttack, $01
000879B0 E10B                       	smpsAlterNote       $0B
000879B2 E701                       	dc.b	smpsNoAttack, $01
000879B4 E10F                       	smpsAlterNote       $0F
000879B6 E701                       	dc.b	smpsNoAttack, $01
000879B8 E10B                       	smpsAlterNote       $0B
000879BA E701                       	dc.b	smpsNoAttack, $01
000879BC E105                       	smpsAlterNote       $05
000879BE E701                       	dc.b	smpsNoAttack, $01
000879C0 E104                       	smpsAlterNote       $04
000879C2 E701                       	dc.b	smpsNoAttack, $01
000879C4 E108                       	smpsAlterNote       $08
000879C6 E701                       	dc.b	smpsNoAttack, $01
000879C8 E10E                       	smpsAlterNote       $0E
000879CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879CE E10B                       	smpsAlterNote       $0B
000879D0 E701                       	dc.b	smpsNoAttack, $01
000879D2 E105                       	smpsAlterNote       $05
000879D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879D8 E10C                       	smpsAlterNote       $0C
000879DA C70E                       	dc.b	nBb5, $0E
000879DC E106                       	smpsAlterNote       $06
000879DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879E2 E10C                       	smpsAlterNote       $0C
000879E4 E701                       	dc.b	smpsNoAttack, $01
000879E6 E10F                       	smpsAlterNote       $0F
000879E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879EC E109                       	smpsAlterNote       $09
000879EE E701                       	dc.b	smpsNoAttack, $01
000879F0 E105                       	smpsAlterNote       $05
000879F2 E701                       	dc.b	smpsNoAttack, $01
000879F4 E106                       	smpsAlterNote       $06
000879F6 E701                       	dc.b	smpsNoAttack, $01
000879F8 E10C                       	smpsAlterNote       $0C
000879FA E701                       	dc.b	smpsNoAttack, $01
000879FC E110                       	smpsAlterNote       $10
000879FE E701                       	dc.b	smpsNoAttack, $01
00087A00 E10C                       	smpsAlterNote       $0C
00087A02 E701                       	dc.b	smpsNoAttack, $01
00087A04 E109                       	smpsAlterNote       $09
00087A06 E701                       	dc.b	smpsNoAttack, $01
00087A08 E105                       	smpsAlterNote       $05
00087A0A E701                       	dc.b	smpsNoAttack, $01
00087A0C E106                       	smpsAlterNote       $06
00087A0E 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00087A12 E107                       	smpsAlterNote       $07
00087A14 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00087A19 E108                       	smpsAlterNote       $08
00087A1B CD0D                       	dc.b	nE6, $0D
00087A1D E107                       	smpsAlterNote       $07
00087A1F CB0D                       	dc.b	nD6, $0D
00087A21 E104                       	smpsAlterNote       $04
00087A23 E701                       	dc.b	smpsNoAttack, $01
00087A25 E100                       	smpsAlterNote       $00
00087A27 E701                       	dc.b	smpsNoAttack, $01
00087A29 E101                       	smpsAlterNote       $01
00087A2B E701                       	dc.b	smpsNoAttack, $01
00087A2D E107                       	smpsAlterNote       $07
00087A2F E701                       	dc.b	smpsNoAttack, $01
00087A31 E10B                       	smpsAlterNote       $0B
00087A33 E701                       	dc.b	smpsNoAttack, $01
00087A35 E107                       	smpsAlterNote       $07
00087A37 E701                       	dc.b	smpsNoAttack, $01
00087A39 E104                       	smpsAlterNote       $04
00087A3B E701                       	dc.b	smpsNoAttack, $01
00087A3D E100                       	smpsAlterNote       $00
00087A3F E701                       	dc.b	smpsNoAttack, $01
00087A41 E104                       	smpsAlterNote       $04
00087A43 E701                       	dc.b	smpsNoAttack, $01
00087A45 E10A                       	smpsAlterNote       $0A
00087A47 E701                       	dc.b	smpsNoAttack, $01
00087A49 E10B                       	smpsAlterNote       $0B
00087A4B E701                       	dc.b	smpsNoAttack, $01
00087A4D E108                       	smpsAlterNote       $08
00087A4F CC0D                       	dc.b	nEb6, $0D
00087A51 E105                       	smpsAlterNote       $05
00087A53 E701                       	dc.b	smpsNoAttack, $01
00087A55 E101                       	smpsAlterNote       $01
00087A57 E701                       	dc.b	smpsNoAttack, $01
00087A59 E102                       	smpsAlterNote       $02
00087A5B E701                       	dc.b	smpsNoAttack, $01
00087A5D E108                       	smpsAlterNote       $08
00087A5F E701                       	dc.b	smpsNoAttack, $01
00087A61 E106                       	smpsAlterNote       $06
00087A63 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00087A6F 8001                       	dc.b	nRst, $01
00087A71 E107                       	smpsAlterNote       $07
00087A73 CB0D                       	dc.b	nD6, $0D
00087A75 E104                       	smpsAlterNote       $04
00087A77 E701                       	dc.b	smpsNoAttack, $01
00087A79 E100                       	smpsAlterNote       $00
00087A7B E701                       	dc.b	smpsNoAttack, $01
00087A7D E104                       	smpsAlterNote       $04
00087A7F E701                       	dc.b	smpsNoAttack, $01
00087A81 E107                       	smpsAlterNote       $07
00087A83 E701                       	dc.b	smpsNoAttack, $01
00087A85 E10B                       	smpsAlterNote       $0B
00087A87 E701                       	dc.b	smpsNoAttack, $01
00087A89 E107                       	smpsAlterNote       $07
00087A8B E701                       	dc.b	smpsNoAttack, $01
00087A8D E101                       	smpsAlterNote       $01
00087A8F E701                       	dc.b	smpsNoAttack, $01
00087A91 E100                       	smpsAlterNote       $00
00087A93 E701                       	dc.b	smpsNoAttack, $01
00087A95 E104                       	smpsAlterNote       $04
00087A97 E701                       	dc.b	smpsNoAttack, $01
00087A99 E10A                       	smpsAlterNote       $0A
00087A9B E701                       	dc.b	smpsNoAttack, $01
00087A9D E10B                       	smpsAlterNote       $0B
00087A9F 8001                       	dc.b	nRst, $01
00087AA1 E109                       	smpsAlterNote       $09
00087AA3 CE0A                       	dc.b	nF6, $0A
00087AA5 E108                       	smpsAlterNote       $08
00087AA7 CC07                       	dc.b	nEb6, $07
00087AA9 E106                       	smpsAlterNote       $06
00087AAB C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00087AB7 E107                       	smpsAlterNote       $07
00087AB9 CB0D                       	dc.b	nD6, $0D
00087ABB E101                       	smpsAlterNote       $01
00087ABD E701                       	dc.b	smpsNoAttack, $01
00087ABF E100                       	smpsAlterNote       $00
00087AC1 E701                       	dc.b	smpsNoAttack, $01
00087AC3 E104                       	smpsAlterNote       $04
00087AC5 E701                       	dc.b	smpsNoAttack, $01
00087AC7 E10A                       	smpsAlterNote       $0A
00087AC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087ACD E107                       	smpsAlterNote       $07
00087ACF E701                       	dc.b	smpsNoAttack, $01
00087AD1 E101                       	smpsAlterNote       $01
00087AD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AD7 E107                       	smpsAlterNote       $07
00087AD9 E701                       	dc.b	smpsNoAttack, $01
00087ADB E10A                       	smpsAlterNote       $0A
00087ADD E701                       	dc.b	smpsNoAttack, $01
00087ADF E10B                       	smpsAlterNote       $0B
00087AE1 8001                       	dc.b	nRst, $01
00087AE3 E108                       	smpsAlterNote       $08
00087AE5 CC0D                       	dc.b	nEb6, $0D
00087AE7 E102                       	smpsAlterNote       $02
00087AE9 E701                       	dc.b	smpsNoAttack, $01
00087AEB E101                       	smpsAlterNote       $01
00087AED E701                       	dc.b	smpsNoAttack, $01
00087AEF E105                       	smpsAlterNote       $05
00087AF1 E701                       	dc.b	smpsNoAttack, $01
00087AF3 E108                       	smpsAlterNote       $08
00087AF5 8001                       	dc.b	nRst, $01
00087AF7 E106                       	smpsAlterNote       $06
00087AF9 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00087B05 8001                       	dc.b	nRst, $01
00087B07 E107                       	smpsAlterNote       $07
00087B09 CB0D                       	dc.b	nD6, $0D
00087B0B E101                       	smpsAlterNote       $01
00087B0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B11 E104                       	smpsAlterNote       $04
00087B13 E701                       	dc.b	smpsNoAttack, $01
00087B15 E10A                       	smpsAlterNote       $0A
00087B17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B1B E104                       	smpsAlterNote       $04
00087B1D E701                       	dc.b	smpsNoAttack, $01
00087B1F E101                       	smpsAlterNote       $01
00087B21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B25 E107                       	smpsAlterNote       $07
00087B27 E701                       	dc.b	smpsNoAttack, $01
00087B29 E10B                       	smpsAlterNote       $0B
00087B2B E701                       	dc.b	smpsNoAttack, $01
00087B2D E10A                       	smpsAlterNote       $0A
00087B2F E701                       	dc.b	smpsNoAttack, $01
00087B31 E104                       	smpsAlterNote       $04
00087B33 E701                       	dc.b	smpsNoAttack, $01
00087B35 E100                       	smpsAlterNote       $00
00087B37 E701                       	dc.b	smpsNoAttack, $01
00087B39 E101                       	smpsAlterNote       $01
00087B3B 801C                       	dc.b	nRst, $1C
00087B3F E107                       	smpsAlterNote       $07
00087B41 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00087B45 E603                       	smpsAlterVol        $03
00087B47 F6F1 AD                    	smpsJump            music84_Jump03
00087B4A                            
00087B4A                            ; FM3 Data
00087B4A                            music84_FM3:
00087B4A E0C0                       	smpsPan             panCenter, $00
00087B4E E109                       	smpsAlterNote       $09
00087B50 C203 8007                  	dc.b	nF5, $03, nRst, $07
00087B54 E108                       	smpsAlterNote       $08
00087B56 C103 800B                  	dc.b	nE5, $03, nRst, $0B
00087B5A E10B                       	smpsAlterNote       $0B
00087B5C BA03 8006                  	dc.b	nA4, $03, nRst, $06
00087B62 E040                       	smpsPan             panRight, $00
00087B64 E110                       	smpsAlterNote       $10
00087B66 E6F9                       	smpsAlterVol        $F9
00087B68 C702 8001                  	dc.b	nBb5, $02, nRst, $01
00087B6C E10F                       	smpsAlterNote       $0F
00087B6E C603                       	dc.b	nA5, $03
00087B70 E10D                       	smpsAlterNote       $0D
00087B72 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00087B78 E10C                       	smpsAlterNote       $0C
00087B7A C103 8001                  	dc.b	nE5, $03, nRst, $01
00087B7E E10A                       	smpsAlterNote       $0A
00087B80 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00087B84 E10F                       	smpsAlterNote       $0F
00087B86 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00087B8A E0C0                       	smpsPan             panCenter, $00
00087B8E E109                       	smpsAlterNote       $09
00087B90 E609                       	smpsAlterVol        $09
00087B92 B603                       	dc.b	nF4, $03
00087B94                            
00087B94                            music84_Jump02:
00087B94 E70A                       	dc.b	smpsNoAttack, $0A
00087B96 E103                       	smpsAlterNote       $03
00087B98 E701                       	dc.b	smpsNoAttack, $01
00087B9A E102                       	smpsAlterNote       $02
00087B9C E701                       	dc.b	smpsNoAttack, $01
00087B9E E106                       	smpsAlterNote       $06
00087BA0 E701                       	dc.b	smpsNoAttack, $01
00087BA2 E10C                       	smpsAlterNote       $0C
00087BA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BA8 E109                       	smpsAlterNote       $09
00087BAA E701                       	dc.b	smpsNoAttack, $01
00087BAC E103                       	smpsAlterNote       $03
00087BAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BB2 E109                       	smpsAlterNote       $09
00087BB4 E701                       	dc.b	smpsNoAttack, $01
00087BB6 E10C                       	smpsAlterNote       $0C
00087BB8 E701                       	dc.b	smpsNoAttack, $01
00087BBA E10D                       	smpsAlterNote       $0D
00087BBC 8001                       	dc.b	nRst, $01
00087BBE E109                       	smpsAlterNote       $09
00087BC0 B80D                       	dc.b	nG4, $0D
00087BC2 E103                       	smpsAlterNote       $03
00087BC4 E701                       	dc.b	smpsNoAttack, $01
00087BC6 E102                       	smpsAlterNote       $02
00087BC8 E701                       	dc.b	smpsNoAttack, $01
00087BCA E106                       	smpsAlterNote       $06
00087BCC E701                       	dc.b	smpsNoAttack, $01
00087BCE E10C                       	smpsAlterNote       $0C
00087BD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BD4 E109                       	smpsAlterNote       $09
00087BD6 E701                       	dc.b	smpsNoAttack, $01
00087BD8 E103                       	smpsAlterNote       $03
00087BDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BDE E109                       	smpsAlterNote       $09
00087BE0 E701                       	dc.b	smpsNoAttack, $01
00087BE2 E10C                       	smpsAlterNote       $0C
00087BE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BE8 E106                       	smpsAlterNote       $06
00087BEA E701                       	dc.b	smpsNoAttack, $01
00087BEC E102                       	smpsAlterNote       $02
00087BEE E701                       	dc.b	smpsNoAttack, $01
00087BF0 E103                       	smpsAlterNote       $03
00087BF2 E701                       	dc.b	smpsNoAttack, $01
00087BF4 E109                       	smpsAlterNote       $09
00087BF6 E701                       	dc.b	smpsNoAttack, $01
00087BF8 E10D                       	smpsAlterNote       $0D
00087BFA E701                       	dc.b	smpsNoAttack, $01
00087BFC E109                       	smpsAlterNote       $09
00087BFE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087C02 E10B                       	smpsAlterNote       $0B
00087C04 BA0D                       	dc.b	nA4, $0D
00087C06 E105                       	smpsAlterNote       $05
00087C08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C0C E108                       	smpsAlterNote       $08
00087C0E E701                       	dc.b	smpsNoAttack, $01
00087C10 E10E                       	smpsAlterNote       $0E
00087C12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C16 E108                       	smpsAlterNote       $08
00087C18 E701                       	dc.b	smpsNoAttack, $01
00087C1A E104                       	smpsAlterNote       $04
00087C1C E701                       	dc.b	smpsNoAttack, $01
00087C1E E105                       	smpsAlterNote       $05
00087C20 E701                       	dc.b	smpsNoAttack, $01
00087C22 E10B                       	smpsAlterNote       $0B
00087C24 E701                       	dc.b	smpsNoAttack, $01
00087C26 E10F                       	smpsAlterNote       $0F
00087C28 E701                       	dc.b	smpsNoAttack, $01
00087C2A E10B                       	smpsAlterNote       $0B
00087C2C E701                       	dc.b	smpsNoAttack, $01
00087C2E E108                       	smpsAlterNote       $08
00087C30 E701                       	dc.b	smpsNoAttack, $01
00087C32 E104                       	smpsAlterNote       $04
00087C34 E701                       	dc.b	smpsNoAttack, $01
00087C36 E108                       	smpsAlterNote       $08
00087C38 E701                       	dc.b	smpsNoAttack, $01
00087C3A E10E                       	smpsAlterNote       $0E
00087C3C E701                       	dc.b	smpsNoAttack, $01
00087C3E E10F                       	smpsAlterNote       $0F
00087C40 E701                       	dc.b	smpsNoAttack, $01
00087C42 E10B                       	smpsAlterNote       $0B
00087C44 E701                       	dc.b	smpsNoAttack, $01
00087C46 E105                       	smpsAlterNote       $05
00087C48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C4C E108                       	smpsAlterNote       $08
00087C4E E701                       	dc.b	smpsNoAttack, $01
00087C50 E10E                       	smpsAlterNote       $0E
00087C52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C56 E108                       	smpsAlterNote       $08
00087C58 E701                       	dc.b	smpsNoAttack, $01
00087C5A E105                       	smpsAlterNote       $05
00087C5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C60 E10B                       	smpsAlterNote       $0B
00087C62 E701                       	dc.b	smpsNoAttack, $01
00087C64 E10F                       	smpsAlterNote       $0F
00087C66 E701                       	dc.b	smpsNoAttack, $01
00087C68 E10E                       	smpsAlterNote       $0E
00087C6A E701                       	dc.b	smpsNoAttack, $01
00087C6C E108                       	smpsAlterNote       $08
00087C6E E701                       	dc.b	smpsNoAttack, $01
00087C70 E104                       	smpsAlterNote       $04
00087C72 E701                       	dc.b	smpsNoAttack, $01
00087C74 E105                       	smpsAlterNote       $05
00087C76 8001                       	dc.b	nRst, $01
00087C78 E108                       	smpsAlterNote       $08
00087C7A B50A                       	dc.b	nE4, $0A
00087C7C E109                       	smpsAlterNote       $09
00087C7E B60D                       	dc.b	nF4, $0D
00087C80 E106                       	smpsAlterNote       $06
00087C82 E701                       	dc.b	smpsNoAttack, $01
00087C84 E103                       	smpsAlterNote       $03
00087C86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C8A E109                       	smpsAlterNote       $09
00087C8C E701                       	dc.b	smpsNoAttack, $01
00087C8E E10D                       	smpsAlterNote       $0D
00087C90 E701                       	dc.b	smpsNoAttack, $01
00087C92 E10C                       	smpsAlterNote       $0C
00087C94 E701                       	dc.b	smpsNoAttack, $01
00087C96 E106                       	smpsAlterNote       $06
00087C98 E701                       	dc.b	smpsNoAttack, $01
00087C9A E102                       	smpsAlterNote       $02
00087C9C E701                       	dc.b	smpsNoAttack, $01
00087C9E E106                       	smpsAlterNote       $06
00087CA0 E701                       	dc.b	smpsNoAttack, $01
00087CA2 E109                       	smpsAlterNote       $09
00087CA4 E701                       	dc.b	smpsNoAttack, $01
00087CA6 E10D                       	smpsAlterNote       $0D
00087CA8 E701                       	dc.b	smpsNoAttack, $01
00087CAA E109                       	smpsAlterNote       $09
00087CAC B80D                       	dc.b	nG4, $0D
00087CAE E106                       	smpsAlterNote       $06
00087CB0 E701                       	dc.b	smpsNoAttack, $01
00087CB2 E103                       	smpsAlterNote       $03
00087CB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CB8 E109                       	smpsAlterNote       $09
00087CBA E701                       	dc.b	smpsNoAttack, $01
00087CBC E10D                       	smpsAlterNote       $0D
00087CBE E701                       	dc.b	smpsNoAttack, $01
00087CC0 E10C                       	smpsAlterNote       $0C
00087CC2 E701                       	dc.b	smpsNoAttack, $01
00087CC4 E106                       	smpsAlterNote       $06
00087CC6 E701                       	dc.b	smpsNoAttack, $01
00087CC8 E102                       	smpsAlterNote       $02
00087CCA E701                       	dc.b	smpsNoAttack, $01
00087CCC E106                       	smpsAlterNote       $06
00087CCE E701                       	dc.b	smpsNoAttack, $01
00087CD0 E109                       	smpsAlterNote       $09
00087CD2 E701                       	dc.b	smpsNoAttack, $01
00087CD4 E10D                       	smpsAlterNote       $0D
00087CD6 E701                       	dc.b	smpsNoAttack, $01
00087CD8 E109                       	smpsAlterNote       $09
00087CDA E701                       	dc.b	smpsNoAttack, $01
00087CDC E103                       	smpsAlterNote       $03
00087CDE E701                       	dc.b	smpsNoAttack, $01
00087CE0 E102                       	smpsAlterNote       $02
00087CE2 E701                       	dc.b	smpsNoAttack, $01
00087CE4 E106                       	smpsAlterNote       $06
00087CE6 E701                       	dc.b	smpsNoAttack, $01
00087CE8 E10C                       	smpsAlterNote       $0C
00087CEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CEE E109                       	smpsAlterNote       $09
00087CF0 E701                       	dc.b	smpsNoAttack, $01
00087CF2 E10B                       	smpsAlterNote       $0B
00087CF4 BA0D                       	dc.b	nA4, $0D
00087CF6 E108                       	smpsAlterNote       $08
00087CF8 E701                       	dc.b	smpsNoAttack, $01
00087CFA E104                       	smpsAlterNote       $04
00087CFC E701                       	dc.b	smpsNoAttack, $01
00087CFE E108                       	smpsAlterNote       $08
00087D00 E701                       	dc.b	smpsNoAttack, $01
00087D02 E10B                       	smpsAlterNote       $0B
00087D04 E701                       	dc.b	smpsNoAttack, $01
00087D06 E10F                       	smpsAlterNote       $0F
00087D08 E701                       	dc.b	smpsNoAttack, $01
00087D0A E10B                       	smpsAlterNote       $0B
00087D0C E701                       	dc.b	smpsNoAttack, $01
00087D0E E105                       	smpsAlterNote       $05
00087D10 E701                       	dc.b	smpsNoAttack, $01
00087D12 E104                       	smpsAlterNote       $04
00087D14 E701                       	dc.b	smpsNoAttack, $01
00087D16 E108                       	smpsAlterNote       $08
00087D18 E701                       	dc.b	smpsNoAttack, $01
00087D1A E10E                       	smpsAlterNote       $0E
00087D1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D20 E10B                       	smpsAlterNote       $0B
00087D22 E701                       	dc.b	smpsNoAttack, $01
00087D24 E105                       	smpsAlterNote       $05
00087D26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D2A E10B                       	smpsAlterNote       $0B
00087D2C E701                       	dc.b	smpsNoAttack, $01
00087D2E E10E                       	smpsAlterNote       $0E
00087D30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D34 E108                       	smpsAlterNote       $08
00087D36 E701                       	dc.b	smpsNoAttack, $01
00087D38 E104                       	smpsAlterNote       $04
00087D3A E701                       	dc.b	smpsNoAttack, $01
00087D3C E105                       	smpsAlterNote       $05
00087D3E E701                       	dc.b	smpsNoAttack, $01
00087D40 E10B                       	smpsAlterNote       $0B
00087D42 E701                       	dc.b	smpsNoAttack, $01
00087D44 E10F                       	smpsAlterNote       $0F
00087D46 E701                       	dc.b	smpsNoAttack, $01
00087D48 E10B                       	smpsAlterNote       $0B
00087D4A E701                       	dc.b	smpsNoAttack, $01
00087D4C E108                       	smpsAlterNote       $08
00087D4E E701                       	dc.b	smpsNoAttack, $01
00087D50 E105                       	smpsAlterNote       $05
00087D52 8001                       	dc.b	nRst, $01
00087D54 E109                       	smpsAlterNote       $09
00087D56 B609 8001                  	dc.b	nF4, $09, nRst, $01
00087D5A E108                       	smpsAlterNote       $08
00087D5C B506 8001                  	dc.b	nE4, $06, nRst, $01
00087D60 E107                       	smpsAlterNote       $07
00087D62 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00087D66 E108                       	smpsAlterNote       $08
00087D68 B502 8001                  	dc.b	nE4, $02, nRst, $01
00087D6C E109                       	smpsAlterNote       $09
00087D6E B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00087D74 E10B                       	smpsAlterNote       $0B
00087D76 BA0D                       	dc.b	nA4, $0D
00087D78 E108                       	smpsAlterNote       $08
00087D7A E701                       	dc.b	smpsNoAttack, $01
00087D7C E104                       	smpsAlterNote       $04
00087D7E E701                       	dc.b	smpsNoAttack, $01
00087D80 E108                       	smpsAlterNote       $08
00087D82 E701                       	dc.b	smpsNoAttack, $01
00087D84 E10E                       	smpsAlterNote       $0E
00087D86 E701                       	dc.b	smpsNoAttack, $01
00087D88 E10F                       	smpsAlterNote       $0F
00087D8A E701                       	dc.b	smpsNoAttack, $01
00087D8C E10B                       	smpsAlterNote       $0B
00087D8E E701                       	dc.b	smpsNoAttack, $01
00087D90 E105                       	smpsAlterNote       $05
00087D92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D96 E108                       	smpsAlterNote       $08
00087D98 E701                       	dc.b	smpsNoAttack, $01
00087D9A E10E                       	smpsAlterNote       $0E
00087D9C E701                       	dc.b	smpsNoAttack, $01
00087D9E E10F                       	smpsAlterNote       $0F
00087DA0 8001                       	dc.b	nRst, $01
00087DA2 E109                       	smpsAlterNote       $09
00087DA4 C20D                       	dc.b	nF5, $0D
00087DA6 E103                       	smpsAlterNote       $03
00087DA8 E701                       	dc.b	smpsNoAttack, $01
00087DAA E102                       	smpsAlterNote       $02
00087DAC E701                       	dc.b	smpsNoAttack, $01
00087DAE E106                       	smpsAlterNote       $06
00087DB0 E701                       	dc.b	smpsNoAttack, $01
00087DB2 E10C                       	smpsAlterNote       $0C
00087DB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087DB8 E109                       	smpsAlterNote       $09
00087DBA E701                       	dc.b	smpsNoAttack, $01
00087DBC E103                       	smpsAlterNote       $03
00087DBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087DC2 E109                       	smpsAlterNote       $09
00087DC4 E701                       	dc.b	smpsNoAttack, $01
00087DC6 E10C                       	smpsAlterNote       $0C
00087DC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087DCC E106                       	smpsAlterNote       $06
00087DCE E701                       	dc.b	smpsNoAttack, $01
00087DD0 E102                       	smpsAlterNote       $02
00087DD2 E701                       	dc.b	smpsNoAttack, $01
00087DD4 E103                       	smpsAlterNote       $03
00087DD6 E701                       	dc.b	smpsNoAttack, $01
00087DD8 E109                       	smpsAlterNote       $09
00087DDA E701                       	dc.b	smpsNoAttack, $01
00087DDC E10D                       	smpsAlterNote       $0D
00087DDE E701                       	dc.b	smpsNoAttack, $01
00087DE0 E109                       	smpsAlterNote       $09
00087DE2 E701                       	dc.b	smpsNoAttack, $01
00087DE4 E106                       	smpsAlterNote       $06
00087DE6 E701                       	dc.b	smpsNoAttack, $01
00087DE8 E102                       	smpsAlterNote       $02
00087DEA E701                       	dc.b	smpsNoAttack, $01
00087DEC E106                       	smpsAlterNote       $06
00087DEE E701                       	dc.b	smpsNoAttack, $01
00087DF0 E10C                       	smpsAlterNote       $0C
00087DF2 E701                       	dc.b	smpsNoAttack, $01
00087DF4 E10D                       	smpsAlterNote       $0D
00087DF6 E701                       	dc.b	smpsNoAttack, $01
00087DF8 E109                       	smpsAlterNote       $09
00087DFA E701                       	dc.b	smpsNoAttack, $01
00087DFC E103                       	smpsAlterNote       $03
00087DFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E02 E106                       	smpsAlterNote       $06
00087E04 E701                       	dc.b	smpsNoAttack, $01
00087E06 E10C                       	smpsAlterNote       $0C
00087E08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E0C E106                       	smpsAlterNote       $06
00087E0E E701                       	dc.b	smpsNoAttack, $01
00087E10 E103                       	smpsAlterNote       $03
00087E12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E16 E109                       	smpsAlterNote       $09
00087E18 E701                       	dc.b	smpsNoAttack, $01
00087E1A E10D                       	smpsAlterNote       $0D
00087E1C E701                       	dc.b	smpsNoAttack, $01
00087E1E E10C                       	smpsAlterNote       $0C
00087E20 E701                       	dc.b	smpsNoAttack, $01
00087E22 E106                       	smpsAlterNote       $06
00087E24 E701                       	dc.b	smpsNoAttack, $01
00087E26 E102                       	smpsAlterNote       $02
00087E28 E701                       	dc.b	smpsNoAttack, $01
00087E2A E106                       	smpsAlterNote       $06
00087E2C E701                       	dc.b	smpsNoAttack, $01
00087E2E E109                       	smpsAlterNote       $09
00087E30 E701                       	dc.b	smpsNoAttack, $01
00087E32 E10D                       	smpsAlterNote       $0D
00087E34 E701                       	dc.b	smpsNoAttack, $01
00087E36 E109                       	smpsAlterNote       $09
00087E38 E701                       	dc.b	smpsNoAttack, $01
00087E3A E103                       	smpsAlterNote       $03
00087E3C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087E40 E109                       	smpsAlterNote       $09
00087E42 C206                       	dc.b	nF5, $06
00087E44 E108                       	smpsAlterNote       $08
00087E46 C10E                       	dc.b	nE5, $0E
00087E48 E102                       	smpsAlterNote       $02
00087E4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E4E E108                       	smpsAlterNote       $08
00087E50 E701                       	dc.b	smpsNoAttack, $01
00087E52 E10B                       	smpsAlterNote       $0B
00087E54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E58 E105                       	smpsAlterNote       $05
00087E5A E701                       	dc.b	smpsNoAttack, $01
00087E5C E101                       	smpsAlterNote       $01
00087E5E E701                       	dc.b	smpsNoAttack, $01
00087E60 E102                       	smpsAlterNote       $02
00087E62 E701                       	dc.b	smpsNoAttack, $01
00087E64 E108                       	smpsAlterNote       $08
00087E66 E701                       	dc.b	smpsNoAttack, $01
00087E68 E10C                       	smpsAlterNote       $0C
00087E6A E701                       	dc.b	smpsNoAttack, $01
00087E6C E107                       	smpsAlterNote       $07
00087E6E BF0E                       	dc.b	nD5, $0E
00087E70 E101                       	smpsAlterNote       $01
00087E72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E76 E107                       	smpsAlterNote       $07
00087E78 E701                       	dc.b	smpsNoAttack, $01
00087E7A E10A                       	smpsAlterNote       $0A
00087E7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E80 E104                       	smpsAlterNote       $04
00087E82 E701                       	dc.b	smpsNoAttack, $01
00087E84 E100                       	smpsAlterNote       $00
00087E86 E701                       	dc.b	smpsNoAttack, $01
00087E88 E104                       	smpsAlterNote       $04
00087E8A E701                       	dc.b	smpsNoAttack, $01
00087E8C E107                       	smpsAlterNote       $07
00087E8E E701                       	dc.b	smpsNoAttack, $01
00087E90 E10B                       	smpsAlterNote       $0B
00087E92 E701                       	dc.b	smpsNoAttack, $01
00087E94 E107                       	smpsAlterNote       $07
00087E96 E701                       	dc.b	smpsNoAttack, $01
00087E98 E101                       	smpsAlterNote       $01
00087E9A E701                       	dc.b	smpsNoAttack, $01
00087E9C E100                       	smpsAlterNote       $00
00087E9E E701                       	dc.b	smpsNoAttack, $01
00087EA0 E104                       	smpsAlterNote       $04
00087EA2 E701                       	dc.b	smpsNoAttack, $01
00087EA4 E10A                       	smpsAlterNote       $0A
00087EA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087EAA E107                       	smpsAlterNote       $07
00087EAC E701                       	dc.b	smpsNoAttack, $01
00087EAE E101                       	smpsAlterNote       $01
00087EB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087EB4 E107                       	smpsAlterNote       $07
00087EB6 E701                       	dc.b	smpsNoAttack, $01
00087EB8 E10A                       	smpsAlterNote       $0A
00087EBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087EBE E104                       	smpsAlterNote       $04
00087EC0 E701                       	dc.b	smpsNoAttack, $01
00087EC2 E100                       	smpsAlterNote       $00
00087EC4 E701                       	dc.b	smpsNoAttack, $01
00087EC6 E101                       	smpsAlterNote       $01
00087EC8 E701                       	dc.b	smpsNoAttack, $01
00087ECA E107                       	smpsAlterNote       $07
00087ECC E701                       	dc.b	smpsNoAttack, $01
00087ECE E10B                       	smpsAlterNote       $0B
00087ED0 E701                       	dc.b	smpsNoAttack, $01
00087ED2 E107                       	smpsAlterNote       $07
00087ED4 E701                       	dc.b	smpsNoAttack, $01
00087ED6 E104                       	smpsAlterNote       $04
00087ED8 E701                       	dc.b	smpsNoAttack, $01
00087EDA E100                       	smpsAlterNote       $00
00087EDC E701                       	dc.b	smpsNoAttack, $01
00087EDE E104                       	smpsAlterNote       $04
00087EE0 E701                       	dc.b	smpsNoAttack, $01
00087EE2 E10A                       	smpsAlterNote       $0A
00087EE4 E701                       	dc.b	smpsNoAttack, $01
00087EE6 E10B                       	smpsAlterNote       $0B
00087EE8 E701                       	dc.b	smpsNoAttack, $01
00087EEA E107                       	smpsAlterNote       $07
00087EEC E701                       	dc.b	smpsNoAttack, $01
00087EEE E101                       	smpsAlterNote       $01
00087EF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087EF4 E104                       	smpsAlterNote       $04
00087EF6 E701                       	dc.b	smpsNoAttack, $01
00087EF8 E10A                       	smpsAlterNote       $0A
00087EFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087EFE E104                       	smpsAlterNote       $04
00087F00 E701                       	dc.b	smpsNoAttack, $01
00087F02 E101                       	smpsAlterNote       $01
00087F04 E701                       	dc.b	smpsNoAttack, $01
00087F08 E107                       	smpsAlterNote       $07
00087F0A E6FF                       	smpsAlterVol        $FF
00087F0C BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00087F18 8004                       	dc.b	nRst, $04
00087F1C E109                       	smpsAlterNote       $09
00087F1E E602                       	smpsAlterVol        $02
00087F20 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00087F26 E108                       	smpsAlterNote       $08
00087F28 B502 8001                  	dc.b	nE4, $02, nRst, $01
00087F2C E109                       	smpsAlterNote       $09
00087F2E B60D                       	dc.b	nF4, $0D
00087F30 E106                       	smpsAlterNote       $06
00087F32 E701                       	dc.b	smpsNoAttack, $01
00087F34 E102                       	smpsAlterNote       $02
00087F36 E701                       	dc.b	smpsNoAttack, $01
00087F38 E106                       	smpsAlterNote       $06
00087F3A E701                       	dc.b	smpsNoAttack, $01
00087F3C E109                       	smpsAlterNote       $09
00087F3E E701                       	dc.b	smpsNoAttack, $01
00087F40 E10D                       	smpsAlterNote       $0D
00087F42 E701                       	dc.b	smpsNoAttack, $01
00087F44 E109                       	smpsAlterNote       $09
00087F46 E701                       	dc.b	smpsNoAttack, $01
00087F48 E103                       	smpsAlterNote       $03
00087F4A E701                       	dc.b	smpsNoAttack, $01
00087F4C E102                       	smpsAlterNote       $02
00087F4E E701                       	dc.b	smpsNoAttack, $01
00087F50 E106                       	smpsAlterNote       $06
00087F52 E701                       	dc.b	smpsNoAttack, $01
00087F54 E10C                       	smpsAlterNote       $0C
00087F56 E701                       	dc.b	smpsNoAttack, $01
00087F58 E10D                       	smpsAlterNote       $0D
00087F5A 8001                       	dc.b	nRst, $01
00087F5C E109                       	smpsAlterNote       $09
00087F5E B80D                       	dc.b	nG4, $0D
00087F60 E106                       	smpsAlterNote       $06
00087F62 E701                       	dc.b	smpsNoAttack, $01
00087F64 E102                       	smpsAlterNote       $02
00087F66 E701                       	dc.b	smpsNoAttack, $01
00087F68 E106                       	smpsAlterNote       $06
00087F6A E701                       	dc.b	smpsNoAttack, $01
00087F6C E10C                       	smpsAlterNote       $0C
00087F6E E701                       	dc.b	smpsNoAttack, $01
00087F70 E10D                       	smpsAlterNote       $0D
00087F72 E701                       	dc.b	smpsNoAttack, $01
00087F74 E109                       	smpsAlterNote       $09
00087F76 E701                       	dc.b	smpsNoAttack, $01
00087F78 E103                       	smpsAlterNote       $03
00087F7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F7E E106                       	smpsAlterNote       $06
00087F80 E701                       	dc.b	smpsNoAttack, $01
00087F82 E10C                       	smpsAlterNote       $0C
00087F84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F88 E106                       	smpsAlterNote       $06
00087F8A E701                       	dc.b	smpsNoAttack, $01
00087F8C E103                       	smpsAlterNote       $03
00087F8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F92 E109                       	smpsAlterNote       $09
00087F94 E701                       	dc.b	smpsNoAttack, $01
00087F96 E10D                       	smpsAlterNote       $0D
00087F98 E701                       	dc.b	smpsNoAttack, $01
00087F9A E10C                       	smpsAlterNote       $0C
00087F9C E701                       	dc.b	smpsNoAttack, $01
00087F9E E109                       	smpsAlterNote       $09
00087FA0 8001                       	dc.b	nRst, $01
00087FA2 E10B                       	smpsAlterNote       $0B
00087FA4 BA03                       	dc.b	nA4, $03
00087FA6 E10C                       	smpsAlterNote       $0C
00087FA8 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00087FAC E10B                       	smpsAlterNote       $0B
00087FAE BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00087FB4 E10C                       	smpsAlterNote       $0C
00087FB6 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00087FBA E10B                       	smpsAlterNote       $0B
00087FBC C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00087FC2 E10C                       	smpsAlterNote       $0C
00087FC4 D303                       	dc.b	nBb6, $03
00087FC6 E10B                       	smpsAlterNote       $0B
00087FC8 D20D                       	dc.b	nA6, $0D
00087FCA E108                       	smpsAlterNote       $08
00087FCC E701                       	dc.b	smpsNoAttack, $01
00087FCE E104                       	smpsAlterNote       $04
00087FD0 E701                       	dc.b	smpsNoAttack, $01
00087FD2 E105                       	smpsAlterNote       $05
00087FD4 E701                       	dc.b	smpsNoAttack, $01
00087FD6 E10B                       	smpsAlterNote       $0B
00087FD8 E701                       	dc.b	smpsNoAttack, $01
00087FDA E10F                       	smpsAlterNote       $0F
00087FDC E701                       	dc.b	smpsNoAttack, $01
00087FDE E10B                       	smpsAlterNote       $0B
00087FE0 E701                       	dc.b	smpsNoAttack, $01
00087FE2 E108                       	smpsAlterNote       $08
00087FE4 E701                       	dc.b	smpsNoAttack, $01
00087FE6 E104                       	smpsAlterNote       $04
00087FE8 E701                       	dc.b	smpsNoAttack, $01
00087FEA E108                       	smpsAlterNote       $08
00087FEC E701                       	dc.b	smpsNoAttack, $01
00087FEE E10E                       	smpsAlterNote       $0E
00087FF0 E701                       	dc.b	smpsNoAttack, $01
00087FF2 E10F                       	smpsAlterNote       $0F
00087FF4 E701                       	dc.b	smpsNoAttack, $01
00087FF6 E10B                       	smpsAlterNote       $0B
00087FF8 E701                       	dc.b	smpsNoAttack, $01
00087FFA E105                       	smpsAlterNote       $05
00087FFC E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00088002 E109                       	smpsAlterNote       $09
00088004 CE07                       	dc.b	nF6, $07
00088006 E108                       	smpsAlterNote       $08
00088008 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008800C E109                       	smpsAlterNote       $09
0008800E CE03 8001                  	dc.b	nF6, $03, nRst, $01
00088012 E108                       	smpsAlterNote       $08
00088014 CC0D                       	dc.b	nEb6, $0D
00088016 E102                       	smpsAlterNote       $02
00088018 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008801C E108                       	smpsAlterNote       $08
0008801E E701                       	dc.b	smpsNoAttack, $01
00088020 E10B                       	smpsAlterNote       $0B
00088022 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088026 E105                       	smpsAlterNote       $05
00088028 E701                       	dc.b	smpsNoAttack, $01
0008802A E101                       	smpsAlterNote       $01
0008802C E701                       	dc.b	smpsNoAttack, $01
0008802E E102                       	smpsAlterNote       $02
00088030 E701                       	dc.b	smpsNoAttack, $01
00088032 E108                       	smpsAlterNote       $08
00088034 E701                       	dc.b	smpsNoAttack, $01
00088036 E10C                       	smpsAlterNote       $0C
00088038 E701                       	dc.b	smpsNoAttack, $01
0008803A E108                       	smpsAlterNote       $08
0008803C E701                       	dc.b	smpsNoAttack, $01
0008803E E105                       	smpsAlterNote       $05
00088040 E701                       	dc.b	smpsNoAttack, $01
00088042 E101                       	smpsAlterNote       $01
00088044 E701                       	dc.b	smpsNoAttack, $01
00088046 E105                       	smpsAlterNote       $05
00088048 E701                       	dc.b	smpsNoAttack, $01
0008804A E10B                       	smpsAlterNote       $0B
0008804C E701                       	dc.b	smpsNoAttack, $01
0008804E E10C                       	smpsAlterNote       $0C
00088050 E701                       	dc.b	smpsNoAttack, $01
00088052 E108                       	smpsAlterNote       $08
00088054 E701                       	dc.b	smpsNoAttack, $01
00088056 E107                       	smpsAlterNote       $07
00088058 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00088062 E10B                       	smpsAlterNote       $0B
00088064 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008806E E109                       	smpsAlterNote       $09
00088070 C203                       	dc.b	nF5, $03
00088072 E108                       	smpsAlterNote       $08
00088074 C103 8001                  	dc.b	nE5, $03, nRst, $01
00088078 E109                       	smpsAlterNote       $09
0008807A C20D                       	dc.b	nF5, $0D
0008807C E108                       	smpsAlterNote       $08
0008807E C10E                       	dc.b	nE5, $0E
00088080 E107                       	smpsAlterNote       $07
00088082 BF0D                       	dc.b	nD5, $0D
00088084 E104                       	smpsAlterNote       $04
00088086 E701                       	dc.b	smpsNoAttack, $01
00088088 E100                       	smpsAlterNote       $00
0008808A E701                       	dc.b	smpsNoAttack, $01
0008808C E104                       	smpsAlterNote       $04
0008808E E701                       	dc.b	smpsNoAttack, $01
00088090 E107                       	smpsAlterNote       $07
00088092 E701                       	dc.b	smpsNoAttack, $01
00088094 E10B                       	smpsAlterNote       $0B
00088096 E701                       	dc.b	smpsNoAttack, $01
00088098 E107                       	smpsAlterNote       $07
0008809A E701                       	dc.b	smpsNoAttack, $01
0008809C E101                       	smpsAlterNote       $01
0008809E E701                       	dc.b	smpsNoAttack, $01
000880A0 E100                       	smpsAlterNote       $00
000880A2 E701                       	dc.b	smpsNoAttack, $01
000880A4 E104                       	smpsAlterNote       $04
000880A6 E701                       	dc.b	smpsNoAttack, $01
000880A8 E10A                       	smpsAlterNote       $0A
000880AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880AE E107                       	smpsAlterNote       $07
000880B0 E701                       	dc.b	smpsNoAttack, $01
000880B2 E101                       	smpsAlterNote       $01
000880B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880B8 E107                       	smpsAlterNote       $07
000880BA E701                       	dc.b	smpsNoAttack, $01
000880BC E10A                       	smpsAlterNote       $0A
000880BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880C2 E104                       	smpsAlterNote       $04
000880C4 E701                       	dc.b	smpsNoAttack, $01
000880C6 E100                       	smpsAlterNote       $00
000880C8 E701                       	dc.b	smpsNoAttack, $01
000880CA E101                       	smpsAlterNote       $01
000880CC E701                       	dc.b	smpsNoAttack, $01
000880CE E107                       	smpsAlterNote       $07
000880D0 E701                       	dc.b	smpsNoAttack, $01
000880D2 E10B                       	smpsAlterNote       $0B
000880D4 E701                       	dc.b	smpsNoAttack, $01
000880D6 E107                       	smpsAlterNote       $07
000880D8 E701                       	dc.b	smpsNoAttack, $01
000880DA E104                       	smpsAlterNote       $04
000880DC E701                       	dc.b	smpsNoAttack, $01
000880DE E100                       	smpsAlterNote       $00
000880E0 E701                       	dc.b	smpsNoAttack, $01
000880E2 E104                       	smpsAlterNote       $04
000880E4 E701                       	dc.b	smpsNoAttack, $01
000880E6 E10A                       	smpsAlterNote       $0A
000880E8 E701                       	dc.b	smpsNoAttack, $01
000880EA E10B                       	smpsAlterNote       $0B
000880EC E701                       	dc.b	smpsNoAttack, $01
000880EE E107                       	smpsAlterNote       $07
000880F0 E701                       	dc.b	smpsNoAttack, $01
000880F2 E101                       	smpsAlterNote       $01
000880F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880F8 E104                       	smpsAlterNote       $04
000880FA E701                       	dc.b	smpsNoAttack, $01
000880FC E10A                       	smpsAlterNote       $0A
000880FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088102 E104                       	smpsAlterNote       $04
00088104 E701                       	dc.b	smpsNoAttack, $01
00088106 E101                       	smpsAlterNote       $01
00088108 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008810C E107                       	smpsAlterNote       $07
0008810E E701                       	dc.b	smpsNoAttack, $01
00088110 E10B                       	smpsAlterNote       $0B
00088112 E701                       	dc.b	smpsNoAttack, $01
00088114 E10A                       	smpsAlterNote       $0A
00088116 E701                       	dc.b	smpsNoAttack, $01
00088118 E104                       	smpsAlterNote       $04
0008811A E701                       	dc.b	smpsNoAttack, $01
0008811C E100                       	smpsAlterNote       $00
0008811E E701                       	dc.b	smpsNoAttack, $01
00088120 E104                       	smpsAlterNote       $04
00088122 E701                       	dc.b	smpsNoAttack, $01
00088124 E107                       	smpsAlterNote       $07
00088126 E701                       	dc.b	smpsNoAttack, $01
00088128 E10B                       	smpsAlterNote       $0B
0008812A E701                       	dc.b	smpsNoAttack, $01
0008812C E107                       	smpsAlterNote       $07
0008812E E701                       	dc.b	smpsNoAttack, $01
00088130 E101                       	smpsAlterNote       $01
00088132 E701                       	dc.b	smpsNoAttack, $01
00088134 E100                       	smpsAlterNote       $00
00088136 E701                       	dc.b	smpsNoAttack, $01
00088138 E104                       	smpsAlterNote       $04
0008813A E701                       	dc.b	smpsNoAttack, $01
0008813C E10A                       	smpsAlterNote       $0A
0008813E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088142 E107                       	smpsAlterNote       $07
00088144 E701                       	dc.b	smpsNoAttack, $01
00088146 E101                       	smpsAlterNote       $01
00088148 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008814C E107                       	smpsAlterNote       $07
0008814E E701                       	dc.b	smpsNoAttack, $01
00088150 E10A                       	smpsAlterNote       $0A
00088152 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088156 E104                       	smpsAlterNote       $04
00088158 E701                       	dc.b	smpsNoAttack, $01
0008815A E100                       	smpsAlterNote       $00
0008815C E701                       	dc.b	smpsNoAttack, $01
0008815E E101                       	smpsAlterNote       $01
00088160 E701                       	dc.b	smpsNoAttack, $01
00088162 E107                       	smpsAlterNote       $07
00088164 E701                       	dc.b	smpsNoAttack, $01
00088166 E10B                       	smpsAlterNote       $0B
00088168 E701                       	dc.b	smpsNoAttack, $01
0008816A E107                       	smpsAlterNote       $07
0008816C E701                       	dc.b	smpsNoAttack, $01
0008816E E104                       	smpsAlterNote       $04
00088170 E701                       	dc.b	smpsNoAttack, $01
00088172 E100                       	smpsAlterNote       $00
00088174 E701                       	dc.b	smpsNoAttack, $01
00088176 E101                       	smpsAlterNote       $01
00088178 8001                       	dc.b	nRst, $01
0008817A E109                       	smpsAlterNote       $09
0008817C C20D                       	dc.b	nF5, $0D
0008817E E106                       	smpsAlterNote       $06
00088180 E701                       	dc.b	smpsNoAttack, $01
00088182 E102                       	smpsAlterNote       $02
00088184 E701                       	dc.b	smpsNoAttack, $01
00088186 E106                       	smpsAlterNote       $06
00088188 E701                       	dc.b	smpsNoAttack, $01
0008818A E10C                       	smpsAlterNote       $0C
0008818C E701                       	dc.b	smpsNoAttack, $01
0008818E E10D                       	smpsAlterNote       $0D
00088190 E701                       	dc.b	smpsNoAttack, $01
00088192 E109                       	smpsAlterNote       $09
00088194 E701                       	dc.b	smpsNoAttack, $01
00088196 E103                       	smpsAlterNote       $03
00088198 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008819C E106                       	smpsAlterNote       $06
0008819E E701                       	dc.b	smpsNoAttack, $01
000881A0 E10C                       	smpsAlterNote       $0C
000881A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881A6 E106                       	smpsAlterNote       $06
000881A8 E701                       	dc.b	smpsNoAttack, $01
000881AA E103                       	smpsAlterNote       $03
000881AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881B0 E109                       	smpsAlterNote       $09
000881B2 E701                       	dc.b	smpsNoAttack, $01
000881B4 E10D                       	smpsAlterNote       $0D
000881B6 E701                       	dc.b	smpsNoAttack, $01
000881B8 E10C                       	smpsAlterNote       $0C
000881BA E701                       	dc.b	smpsNoAttack, $01
000881BC E109                       	smpsAlterNote       $09
000881BE 8001                       	dc.b	nRst, $01
000881C0 E108                       	smpsAlterNote       $08
000881C2 C10D                       	dc.b	nE5, $0D
000881C4 E109                       	smpsAlterNote       $09
000881C6 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
000881CA E108                       	smpsAlterNote       $08
000881CC C10D                       	dc.b	nE5, $0D
000881CE E102                       	smpsAlterNote       $02
000881D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881D4 E105                       	smpsAlterNote       $05
000881D6 E701                       	dc.b	smpsNoAttack, $01
000881D8 E108                       	smpsAlterNote       $08
000881DA 8001                       	dc.b	nRst, $01
000881DC E107                       	smpsAlterNote       $07
000881DE BF0D                       	dc.b	nD5, $0D
000881E0 E108                       	smpsAlterNote       $08
000881E2 C107                       	dc.b	nE5, $07
000881E4 E109                       	smpsAlterNote       $09
000881E6 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
000881EC E10B                       	smpsAlterNote       $0B
000881EE C603                       	dc.b	nA5, $03
000881F0 E10C                       	smpsAlterNote       $0C
000881F2 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000881F8 E10B                       	smpsAlterNote       $0B
000881FA C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00088200 E109                       	smpsAlterNote       $09
00088202 D003                       	dc.b	nG6, $03
00088204 E108                       	smpsAlterNote       $08
00088206 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008820A E10B                       	smpsAlterNote       $0B
0008820C C601 8001                  	dc.b	nA5, $01, nRst, $01
00088210 E108                       	smpsAlterNote       $08
00088212 C102                       	dc.b	nE5, $02
00088216 E10C                       	smpsAlterNote       $0C
00088218 E6FB                       	smpsAlterVol        $FB
0008821A A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00088226 8001                       	dc.b	nRst, $01
00088228 E10B                       	smpsAlterNote       $0B
0008822A A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00088232 E107                       	smpsAlterNote       $07
00088234 A706 8001                  	dc.b	nD3, $06, nRst, $01
00088238 E10B                       	smpsAlterNote       $0B
0008823A A203                       	dc.b	nA2, $03
0008823C E109                       	smpsAlterNote       $09
0008823E AA03 8001                  	dc.b	nF3, $03, nRst, $01
00088242 E108                       	smpsAlterNote       $08
00088244 A906                       	dc.b	nE3, $06
00088246 E107                       	smpsAlterNote       $07
00088248 A703 8001                  	dc.b	nD3, $03, nRst, $01
0008824C E106                       	smpsAlterNote       $06
0008824E A503                       	dc.b	nC3, $03
00088250 E10C                       	smpsAlterNote       $0C
00088252 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00088256 E10B                       	smpsAlterNote       $0B
00088258 A203 8004                  	dc.b	nA2, $03, nRst, $04
0008825C E11B                       	smpsAlterNote       $1B
0008825E C401                       	dc.b	nG5, $01
00088260 E1F4                       	smpsAlterNote       $F4
00088262 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00088265 E106                       	smpsAlterNote       $06
00088267 E701                       	dc.b	smpsNoAttack, $01
00088269 E10F                       	smpsAlterNote       $0F
0008826B E701                       	dc.b	smpsNoAttack, $01
0008826D E1E4                       	smpsAlterNote       $E4
0008826F E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00088272 E1F6                       	smpsAlterNote       $F6
00088274 E701                       	dc.b	smpsNoAttack, $01
00088276 E108                       	smpsAlterNote       $08
00088278 E701                       	dc.b	smpsNoAttack, $01
0008827A E10B                       	smpsAlterNote       $0B
0008827C E706                       	dc.b	smpsNoAttack, $06
0008827E E105                       	smpsAlterNote       $05
00088280 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088284 E108                       	smpsAlterNote       $08
00088286 E701                       	dc.b	smpsNoAttack, $01
00088288 E10E                       	smpsAlterNote       $0E
0008828A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008828E E108                       	smpsAlterNote       $08
00088290 E701                       	dc.b	smpsNoAttack, $01
00088292 E105                       	smpsAlterNote       $05
00088294 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088298 E10B                       	smpsAlterNote       $0B
0008829A E701                       	dc.b	smpsNoAttack, $01
0008829C E10F                       	smpsAlterNote       $0F
0008829E E701                       	dc.b	smpsNoAttack, $01
000882A0 E10E                       	smpsAlterNote       $0E
000882A2 E701                       	dc.b	smpsNoAttack, $01
000882A4 E108                       	smpsAlterNote       $08
000882A6 E701                       	dc.b	smpsNoAttack, $01
000882A8 E104                       	smpsAlterNote       $04
000882AA E701                       	dc.b	smpsNoAttack, $01
000882AC E108                       	smpsAlterNote       $08
000882AE E701                       	dc.b	smpsNoAttack, $01
000882B0 E10B                       	smpsAlterNote       $0B
000882B2 E701                       	dc.b	smpsNoAttack, $01
000882B4 E10F                       	smpsAlterNote       $0F
000882B6 E701                       	dc.b	smpsNoAttack, $01
000882B8 E10B                       	smpsAlterNote       $0B
000882BA E701                       	dc.b	smpsNoAttack, $01
000882BC E105                       	smpsAlterNote       $05
000882BE E701                       	dc.b	smpsNoAttack, $01
000882C0 E104                       	smpsAlterNote       $04
000882C2 E701                       	dc.b	smpsNoAttack, $01
000882C4 E108                       	smpsAlterNote       $08
000882C6 E701                       	dc.b	smpsNoAttack, $01
000882C8 E10E                       	smpsAlterNote       $0E
000882CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882CE E10B                       	smpsAlterNote       $0B
000882D0 E701                       	dc.b	smpsNoAttack, $01
000882D2 E105                       	smpsAlterNote       $05
000882D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882D8 E10B                       	smpsAlterNote       $0B
000882DA E701                       	dc.b	smpsNoAttack, $01
000882DC E10E                       	smpsAlterNote       $0E
000882DE E701                       	dc.b	smpsNoAttack, $01
000882E0 E10F                       	smpsAlterNote       $0F
000882E2 8001                       	dc.b	nRst, $01
000882E4 E109                       	smpsAlterNote       $09
000882E6 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000882EC E108                       	smpsAlterNote       $08
000882EE C101 8001                  	dc.b	nE5, $01, nRst, $01
000882F2 E109                       	smpsAlterNote       $09
000882F4 C202                       	dc.b	nF5, $02
000882F6 E108                       	smpsAlterNote       $08
000882F8 C102                       	dc.b	nE5, $02
000882FA E107                       	smpsAlterNote       $07
000882FC BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088300 E108                       	smpsAlterNote       $08
00088302 C101 8001                  	dc.b	nE5, $01, nRst, $01
00088306 E107                       	smpsAlterNote       $07
00088308 BF02                       	dc.b	nD5, $02
0008830A E106                       	smpsAlterNote       $06
0008830C BD02 8001                  	dc.b	nC5, $02, nRst, $01
00088310 E107                       	smpsAlterNote       $07
00088312 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00088316 E106                       	smpsAlterNote       $06
00088318 BD02                       	dc.b	nC5, $02
0008831A E10C                       	smpsAlterNote       $0C
0008831C BB02                       	dc.b	nBb4, $02
0008831E E106                       	smpsAlterNote       $06
00088320 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00088324 E10C                       	smpsAlterNote       $0C
00088326 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008832A E10B                       	smpsAlterNote       $0B
0008832C BA02                       	dc.b	nA4, $02
0008832E E10C                       	smpsAlterNote       $0C
00088330 BB02                       	dc.b	nBb4, $02
00088332 E10B                       	smpsAlterNote       $0B
00088334 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008833E E108                       	smpsAlterNote       $08
00088340 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
00088348 E107                       	smpsAlterNote       $07
0008834A BE02                       	dc.b	nCs5, $02
0008834C E10B                       	smpsAlterNote       $0B
0008834E BA02                       	dc.b	nA4, $02
00088350 E109                       	smpsAlterNote       $09
00088352 B802 8001                  	dc.b	nG4, $02, nRst, $01
00088356 E108                       	smpsAlterNote       $08
00088358 B501 8001                  	dc.b	nE4, $01, nRst, $01
0008835C E10B                       	smpsAlterNote       $0B
0008835E AE02                       	dc.b	nA3, $02
00088360 E10C                       	smpsAlterNote       $0C
00088362 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008836E E10B                       	smpsAlterNote       $0B
00088370 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00088378 E107                       	smpsAlterNote       $07
0008837A A706 8001                  	dc.b	nD3, $06, nRst, $01
0008837E E10B                       	smpsAlterNote       $0B
00088380 A203                       	dc.b	nA2, $03
00088382 E109                       	smpsAlterNote       $09
00088384 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00088388 E108                       	smpsAlterNote       $08
0008838A A906 8001                  	dc.b	nE3, $06, nRst, $01
0008838E E107                       	smpsAlterNote       $07
00088390 A702 8001                  	dc.b	nD3, $02, nRst, $01
00088394 E106                       	smpsAlterNote       $06
00088396 A503                       	dc.b	nC3, $03
00088398 E10C                       	smpsAlterNote       $0C
0008839A A303 8001                  	dc.b	nBb2, $03, nRst, $01
000883A0 E107                       	smpsAlterNote       $07
000883A2 B20D                       	dc.b	nCs4, $0D
000883A4 E104                       	smpsAlterNote       $04
000883A6 E701                       	dc.b	smpsNoAttack, $01
000883A8 E100                       	smpsAlterNote       $00
000883AA E701                       	dc.b	smpsNoAttack, $01
000883AC E104                       	smpsAlterNote       $04
000883AE E701                       	dc.b	smpsNoAttack, $01
000883B0 E10A                       	smpsAlterNote       $0A
000883B2 E701                       	dc.b	smpsNoAttack, $01
000883B4 E10B                       	smpsAlterNote       $0B
000883B6 E701                       	dc.b	smpsNoAttack, $01
000883B8 E107                       	smpsAlterNote       $07
000883BA E701                       	dc.b	smpsNoAttack, $01
000883BC E101                       	smpsAlterNote       $01
000883BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883C2 E104                       	smpsAlterNote       $04
000883C4 E701                       	dc.b	smpsNoAttack, $01
000883C6 E10A                       	smpsAlterNote       $0A
000883C8 E701                       	dc.b	smpsNoAttack, $01
000883CA E10B                       	smpsAlterNote       $0B
000883CC 8001                       	dc.b	nRst, $01
000883CE E107                       	smpsAlterNote       $07
000883D0 B30D                       	dc.b	nD4, $0D
000883D2 E104                       	smpsAlterNote       $04
000883D4 E701                       	dc.b	smpsNoAttack, $01
000883D6 E100                       	smpsAlterNote       $00
000883D8 E701                       	dc.b	smpsNoAttack, $01
000883DA E104                       	smpsAlterNote       $04
000883DC E701                       	dc.b	smpsNoAttack, $01
000883DE E10A                       	smpsAlterNote       $0A
000883E0 E701                       	dc.b	smpsNoAttack, $01
000883E2 E10B                       	smpsAlterNote       $0B
000883E4 E701                       	dc.b	smpsNoAttack, $01
000883E6 E107                       	smpsAlterNote       $07
000883E8 E701                       	dc.b	smpsNoAttack, $01
000883EA E101                       	smpsAlterNote       $01
000883EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883F0 E104                       	smpsAlterNote       $04
000883F2 E701                       	dc.b	smpsNoAttack, $01
000883F4 E10A                       	smpsAlterNote       $0A
000883F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883FA E104                       	smpsAlterNote       $04
000883FC E701                       	dc.b	smpsNoAttack, $01
000883FE E101                       	smpsAlterNote       $01
00088400 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088404 E107                       	smpsAlterNote       $07
00088406 E701                       	dc.b	smpsNoAttack, $01
00088408 E10B                       	smpsAlterNote       $0B
0008840A E701                       	dc.b	smpsNoAttack, $01
0008840C E10A                       	smpsAlterNote       $0A
0008840E E701                       	dc.b	smpsNoAttack, $01
00088410 E107                       	smpsAlterNote       $07
00088412 8001                       	dc.b	nRst, $01
00088414 E108                       	smpsAlterNote       $08
00088416 B50D                       	dc.b	nE4, $0D
00088418 E102                       	smpsAlterNote       $02
0008841A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008841E E105                       	smpsAlterNote       $05
00088420 E701                       	dc.b	smpsNoAttack, $01
00088422 E10B                       	smpsAlterNote       $0B
00088424 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088428 E105                       	smpsAlterNote       $05
0008842A E701                       	dc.b	smpsNoAttack, $01
0008842C E102                       	smpsAlterNote       $02
0008842E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088432 E108                       	smpsAlterNote       $08
00088434 E701                       	dc.b	smpsNoAttack, $01
00088436 E10C                       	smpsAlterNote       $0C
00088438 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008843C E107                       	smpsAlterNote       $07
0008843E B30D                       	dc.b	nD4, $0D
00088440 E101                       	smpsAlterNote       $01
00088442 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088446 E104                       	smpsAlterNote       $04
00088448 E701                       	dc.b	smpsNoAttack, $01
0008844A E10A                       	smpsAlterNote       $0A
0008844C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088450 E104                       	smpsAlterNote       $04
00088452 E701                       	dc.b	smpsNoAttack, $01
00088454 E101                       	smpsAlterNote       $01
00088456 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008845A E107                       	smpsAlterNote       $07
0008845C E701                       	dc.b	smpsNoAttack, $01
0008845E E10B                       	smpsAlterNote       $0B
00088460 E701                       	dc.b	smpsNoAttack, $01
00088462 E10A                       	smpsAlterNote       $0A
00088464 E701                       	dc.b	smpsNoAttack, $01
00088466 E104                       	smpsAlterNote       $04
00088468 E701                       	dc.b	smpsNoAttack, $01
0008846A E100                       	smpsAlterNote       $00
0008846C E701                       	dc.b	smpsNoAttack, $01
0008846E E104                       	smpsAlterNote       $04
00088470 E701                       	dc.b	smpsNoAttack, $01
00088472 E107                       	smpsAlterNote       $07
00088474 E701                       	dc.b	smpsNoAttack, $01
00088476 E10B                       	smpsAlterNote       $0B
00088478 E701                       	dc.b	smpsNoAttack, $01
0008847A E107                       	smpsAlterNote       $07
0008847C E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00088480 E101                       	smpsAlterNote       $01
00088482 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088486 E107                       	smpsAlterNote       $07
00088488 E701                       	dc.b	smpsNoAttack, $01
0008848A E10A                       	smpsAlterNote       $0A
0008848C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088490 E104                       	smpsAlterNote       $04
00088492 E701                       	dc.b	smpsNoAttack, $01
00088494 E100                       	smpsAlterNote       $00
00088496 E701                       	dc.b	smpsNoAttack, $01
00088498 E101                       	smpsAlterNote       $01
0008849A E701                       	dc.b	smpsNoAttack, $01
0008849C E107                       	smpsAlterNote       $07
0008849E E701                       	dc.b	smpsNoAttack, $01
000884A0 E10B                       	smpsAlterNote       $0B
000884A2 E701                       	dc.b	smpsNoAttack, $01
000884A4 E107                       	smpsAlterNote       $07
000884A6 B30E                       	dc.b	nD4, $0E
000884A8 E101                       	smpsAlterNote       $01
000884AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884AE E107                       	smpsAlterNote       $07
000884B0 E701                       	dc.b	smpsNoAttack, $01
000884B2 E10A                       	smpsAlterNote       $0A
000884B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884B8 E104                       	smpsAlterNote       $04
000884BA E701                       	dc.b	smpsNoAttack, $01
000884BC E100                       	smpsAlterNote       $00
000884BE E701                       	dc.b	smpsNoAttack, $01
000884C0 E101                       	smpsAlterNote       $01
000884C2 E701                       	dc.b	smpsNoAttack, $01
000884C4 E107                       	smpsAlterNote       $07
000884C6 E701                       	dc.b	smpsNoAttack, $01
000884C8 E10B                       	smpsAlterNote       $0B
000884CA E701                       	dc.b	smpsNoAttack, $01
000884CC E107                       	smpsAlterNote       $07
000884CE E701                       	dc.b	smpsNoAttack, $01
000884D0 E104                       	smpsAlterNote       $04
000884D2 E701                       	dc.b	smpsNoAttack, $01
000884D4 E100                       	smpsAlterNote       $00
000884D6 E701                       	dc.b	smpsNoAttack, $01
000884D8 E104                       	smpsAlterNote       $04
000884DA E701                       	dc.b	smpsNoAttack, $01
000884DC E10A                       	smpsAlterNote       $0A
000884DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884E2 E107                       	smpsAlterNote       $07
000884E4 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000884E8 E104                       	smpsAlterNote       $04
000884EA E701                       	dc.b	smpsNoAttack, $01
000884EC E100                       	smpsAlterNote       $00
000884EE E701                       	dc.b	smpsNoAttack, $01
000884F0 E101                       	smpsAlterNote       $01
000884F2 E701                       	dc.b	smpsNoAttack, $01
000884F4 E107                       	smpsAlterNote       $07
000884F6 E701                       	dc.b	smpsNoAttack, $01
000884F8 E10B                       	smpsAlterNote       $0B
000884FA E701                       	dc.b	smpsNoAttack, $01
000884FC E107                       	smpsAlterNote       $07
000884FE E701                       	dc.b	smpsNoAttack, $01
00088500 E104                       	smpsAlterNote       $04
00088502 E701                       	dc.b	smpsNoAttack, $01
00088504 E100                       	smpsAlterNote       $00
00088506 E701                       	dc.b	smpsNoAttack, $01
00088508 E104                       	smpsAlterNote       $04
0008850A E701                       	dc.b	smpsNoAttack, $01
0008850C E10A                       	smpsAlterNote       $0A
0008850E E701                       	dc.b	smpsNoAttack, $01
00088510 E10B                       	smpsAlterNote       $0B
00088512 E701                       	dc.b	smpsNoAttack, $01
00088516 E6FF                       	smpsAlterVol        $FF
00088518 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00088524 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008852C E109                       	smpsAlterNote       $09
0008852E E601                       	smpsAlterVol        $01
00088530 B60D                       	dc.b	nF4, $0D
00088532 E106                       	smpsAlterNote       $06
00088534 E701                       	dc.b	smpsNoAttack, $01
00088536 E102                       	smpsAlterNote       $02
00088538 E701                       	dc.b	smpsNoAttack, $01
0008853A E106                       	smpsAlterNote       $06
0008853C E701                       	dc.b	smpsNoAttack, $01
0008853E E109                       	smpsAlterNote       $09
00088540 E701                       	dc.b	smpsNoAttack, $01
00088542 E10D                       	smpsAlterNote       $0D
00088544 E701                       	dc.b	smpsNoAttack, $01
00088546 E109                       	smpsAlterNote       $09
00088548 E701                       	dc.b	smpsNoAttack, $01
0008854A E103                       	smpsAlterNote       $03
0008854C E701                       	dc.b	smpsNoAttack, $01
0008854E E102                       	smpsAlterNote       $02
00088550 E701                       	dc.b	smpsNoAttack, $01
00088552 E106                       	smpsAlterNote       $06
00088554 E701                       	dc.b	smpsNoAttack, $01
00088556 E10C                       	smpsAlterNote       $0C
00088558 E701                       	dc.b	smpsNoAttack, $01
0008855A E10D                       	smpsAlterNote       $0D
0008855C 8001                       	dc.b	nRst, $01
0008855E E109                       	smpsAlterNote       $09
00088560 B80D                       	dc.b	nG4, $0D
00088562 E106                       	smpsAlterNote       $06
00088564 E701                       	dc.b	smpsNoAttack, $01
00088566 E102                       	smpsAlterNote       $02
00088568 E701                       	dc.b	smpsNoAttack, $01
0008856A E106                       	smpsAlterNote       $06
0008856C E701                       	dc.b	smpsNoAttack, $01
0008856E E109                       	smpsAlterNote       $09
00088570 E701                       	dc.b	smpsNoAttack, $01
00088572 E10D                       	smpsAlterNote       $0D
00088574 E701                       	dc.b	smpsNoAttack, $01
00088576 E109                       	smpsAlterNote       $09
00088578 E701                       	dc.b	smpsNoAttack, $01
0008857A E103                       	smpsAlterNote       $03
0008857C E701                       	dc.b	smpsNoAttack, $01
0008857E E102                       	smpsAlterNote       $02
00088580 E701                       	dc.b	smpsNoAttack, $01
00088582 E106                       	smpsAlterNote       $06
00088584 E701                       	dc.b	smpsNoAttack, $01
00088586 E10C                       	smpsAlterNote       $0C
00088588 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008858C E106                       	smpsAlterNote       $06
0008858E E701                       	dc.b	smpsNoAttack, $01
00088590 E103                       	smpsAlterNote       $03
00088592 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088596 E109                       	smpsAlterNote       $09
00088598 E701                       	dc.b	smpsNoAttack, $01
0008859A E10D                       	smpsAlterNote       $0D
0008859C E701                       	dc.b	smpsNoAttack, $01
0008859E E10C                       	smpsAlterNote       $0C
000885A0 E701                       	dc.b	smpsNoAttack, $01
000885A2 E109                       	smpsAlterNote       $09
000885A4 8001                       	dc.b	nRst, $01
000885A6 E10B                       	smpsAlterNote       $0B
000885A8 BA0D                       	dc.b	nA4, $0D
000885AA E105                       	smpsAlterNote       $05
000885AC E701                       	dc.b	smpsNoAttack, $01
000885AE E104                       	smpsAlterNote       $04
000885B0 E701                       	dc.b	smpsNoAttack, $01
000885B2 E108                       	smpsAlterNote       $08
000885B4 E701                       	dc.b	smpsNoAttack, $01
000885B6 E10E                       	smpsAlterNote       $0E
000885B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885BC E10B                       	smpsAlterNote       $0B
000885BE E701                       	dc.b	smpsNoAttack, $01
000885C0 E105                       	smpsAlterNote       $05
000885C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885C6 E10B                       	smpsAlterNote       $0B
000885C8 E701                       	dc.b	smpsNoAttack, $01
000885CA E10E                       	smpsAlterNote       $0E
000885CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885D0 E108                       	smpsAlterNote       $08
000885D2 E701                       	dc.b	smpsNoAttack, $01
000885D4 E104                       	smpsAlterNote       $04
000885D6 E701                       	dc.b	smpsNoAttack, $01
000885D8 E105                       	smpsAlterNote       $05
000885DA E701                       	dc.b	smpsNoAttack, $01
000885DC E10B                       	smpsAlterNote       $0B
000885DE E701                       	dc.b	smpsNoAttack, $01
000885E0 E10F                       	smpsAlterNote       $0F
000885E2 E701                       	dc.b	smpsNoAttack, $01
000885E4 E10B                       	smpsAlterNote       $0B
000885E6 E701                       	dc.b	smpsNoAttack, $01
000885E8 E108                       	smpsAlterNote       $08
000885EA E701                       	dc.b	smpsNoAttack, $01
000885EC E104                       	smpsAlterNote       $04
000885EE E701                       	dc.b	smpsNoAttack, $01
000885F0 E108                       	smpsAlterNote       $08
000885F2 E701                       	dc.b	smpsNoAttack, $01
000885F4 E10E                       	smpsAlterNote       $0E
000885F6 E701                       	dc.b	smpsNoAttack, $01
000885F8 E10F                       	smpsAlterNote       $0F
000885FA E701                       	dc.b	smpsNoAttack, $01
000885FC E10B                       	smpsAlterNote       $0B
000885FE E701                       	dc.b	smpsNoAttack, $01
00088600 E105                       	smpsAlterNote       $05
00088602 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088606 E108                       	smpsAlterNote       $08
00088608 E701                       	dc.b	smpsNoAttack, $01
0008860A E10E                       	smpsAlterNote       $0E
0008860C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088610 E108                       	smpsAlterNote       $08
00088612 E701                       	dc.b	smpsNoAttack, $01
00088614 E105                       	smpsAlterNote       $05
00088616 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008861A E108                       	smpsAlterNote       $08
0008861C B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00088620 E109                       	smpsAlterNote       $09
00088622 B60D                       	dc.b	nF4, $0D
00088624 E103                       	smpsAlterNote       $03
00088626 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008862A E106                       	smpsAlterNote       $06
0008862C E701                       	dc.b	smpsNoAttack, $01
0008862E E10C                       	smpsAlterNote       $0C
00088630 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088634 E106                       	smpsAlterNote       $06
00088636 E701                       	dc.b	smpsNoAttack, $01
00088638 E103                       	smpsAlterNote       $03
0008863A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008863E E109                       	smpsAlterNote       $09
00088640 E701                       	dc.b	smpsNoAttack, $01
00088642 E10D                       	smpsAlterNote       $0D
00088644 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088648 E109                       	smpsAlterNote       $09
0008864A B80D                       	dc.b	nG4, $0D
0008864C E103                       	smpsAlterNote       $03
0008864E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088652 E109                       	smpsAlterNote       $09
00088654 E701                       	dc.b	smpsNoAttack, $01
00088656 E10C                       	smpsAlterNote       $0C
00088658 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008865C E106                       	smpsAlterNote       $06
0008865E E701                       	dc.b	smpsNoAttack, $01
00088660 E102                       	smpsAlterNote       $02
00088662 E701                       	dc.b	smpsNoAttack, $01
00088664 E103                       	smpsAlterNote       $03
00088666 E701                       	dc.b	smpsNoAttack, $01
00088668 E109                       	smpsAlterNote       $09
0008866A E701                       	dc.b	smpsNoAttack, $01
0008866C E10D                       	smpsAlterNote       $0D
0008866E E701                       	dc.b	smpsNoAttack, $01
00088670 E109                       	smpsAlterNote       $09
00088672 E701                       	dc.b	smpsNoAttack, $01
00088674 E106                       	smpsAlterNote       $06
00088676 E701                       	dc.b	smpsNoAttack, $01
00088678 E102                       	smpsAlterNote       $02
0008867A E701                       	dc.b	smpsNoAttack, $01
0008867C E106                       	smpsAlterNote       $06
0008867E E701                       	dc.b	smpsNoAttack, $01
00088680 E10C                       	smpsAlterNote       $0C
00088682 E701                       	dc.b	smpsNoAttack, $01
00088684 E10D                       	smpsAlterNote       $0D
00088686 E701                       	dc.b	smpsNoAttack, $01
00088688 E109                       	smpsAlterNote       $09
0008868A E701                       	dc.b	smpsNoAttack, $01
0008868C E10B                       	smpsAlterNote       $0B
0008868E BA0D                       	dc.b	nA4, $0D
00088690 E108                       	smpsAlterNote       $08
00088692 E701                       	dc.b	smpsNoAttack, $01
00088694 E105                       	smpsAlterNote       $05
00088696 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008869A E10B                       	smpsAlterNote       $0B
0008869C E701                       	dc.b	smpsNoAttack, $01
0008869E E10F                       	smpsAlterNote       $0F
000886A0 E701                       	dc.b	smpsNoAttack, $01
000886A2 E10E                       	smpsAlterNote       $0E
000886A4 E701                       	dc.b	smpsNoAttack, $01
000886A6 E108                       	smpsAlterNote       $08
000886A8 E701                       	dc.b	smpsNoAttack, $01
000886AA E104                       	smpsAlterNote       $04
000886AC E701                       	dc.b	smpsNoAttack, $01
000886AE E108                       	smpsAlterNote       $08
000886B0 E701                       	dc.b	smpsNoAttack, $01
000886B2 E10B                       	smpsAlterNote       $0B
000886B4 E701                       	dc.b	smpsNoAttack, $01
000886B6 E10F                       	smpsAlterNote       $0F
000886B8 E701                       	dc.b	smpsNoAttack, $01
000886BA E10B                       	smpsAlterNote       $0B
000886BC E701                       	dc.b	smpsNoAttack, $01
000886BE E105                       	smpsAlterNote       $05
000886C0 E701                       	dc.b	smpsNoAttack, $01
000886C2 E104                       	smpsAlterNote       $04
000886C4 E701                       	dc.b	smpsNoAttack, $01
000886C6 E108                       	smpsAlterNote       $08
000886C8 E701                       	dc.b	smpsNoAttack, $01
000886CA E10E                       	smpsAlterNote       $0E
000886CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886D0 E10B                       	smpsAlterNote       $0B
000886D2 E701                       	dc.b	smpsNoAttack, $01
000886D4 E105                       	smpsAlterNote       $05
000886D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886DA E10B                       	smpsAlterNote       $0B
000886DC E701                       	dc.b	smpsNoAttack, $01
000886DE E10E                       	smpsAlterNote       $0E
000886E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886E4 E108                       	smpsAlterNote       $08
000886E6 E701                       	dc.b	smpsNoAttack, $01
000886E8 E105                       	smpsAlterNote       $05
000886EA 8001                       	dc.b	nRst, $01
000886EC E109                       	smpsAlterNote       $09
000886EE B60A                       	dc.b	nF4, $0A
000886F0 E108                       	smpsAlterNote       $08
000886F2 B507                       	dc.b	nE4, $07
000886F4 E107                       	smpsAlterNote       $07
000886F6 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000886FA E108                       	smpsAlterNote       $08
000886FC B503                       	dc.b	nE4, $03
000886FE E109                       	smpsAlterNote       $09
00088700 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00088708 E10B                       	smpsAlterNote       $0B
0008870A BA0D                       	dc.b	nA4, $0D
0008870C E108                       	smpsAlterNote       $08
0008870E E701                       	dc.b	smpsNoAttack, $01
00088710 E104                       	smpsAlterNote       $04
00088712 E701                       	dc.b	smpsNoAttack, $01
00088714 E108                       	smpsAlterNote       $08
00088716 E701                       	dc.b	smpsNoAttack, $01
00088718 E10B                       	smpsAlterNote       $0B
0008871A E701                       	dc.b	smpsNoAttack, $01
0008871C E10F                       	smpsAlterNote       $0F
0008871E E701                       	dc.b	smpsNoAttack, $01
00088720 E10B                       	smpsAlterNote       $0B
00088722 E701                       	dc.b	smpsNoAttack, $01
00088724 E105                       	smpsAlterNote       $05
00088726 E701                       	dc.b	smpsNoAttack, $01
00088728 E104                       	smpsAlterNote       $04
0008872A E701                       	dc.b	smpsNoAttack, $01
0008872C E108                       	smpsAlterNote       $08
0008872E E701                       	dc.b	smpsNoAttack, $01
00088730 E10E                       	smpsAlterNote       $0E
00088732 E701                       	dc.b	smpsNoAttack, $01
00088734 E10F                       	smpsAlterNote       $0F
00088736 8001                       	dc.b	nRst, $01
00088738 E109                       	smpsAlterNote       $09
0008873A C20D                       	dc.b	nF5, $0D
0008873C E106                       	smpsAlterNote       $06
0008873E E701                       	dc.b	smpsNoAttack, $01
00088740 E102                       	smpsAlterNote       $02
00088742 E701                       	dc.b	smpsNoAttack, $01
00088744 E106                       	smpsAlterNote       $06
00088746 E701                       	dc.b	smpsNoAttack, $01
00088748 E109                       	smpsAlterNote       $09
0008874A E701                       	dc.b	smpsNoAttack, $01
0008874C E10D                       	smpsAlterNote       $0D
0008874E E701                       	dc.b	smpsNoAttack, $01
00088750 E109                       	smpsAlterNote       $09
00088752 E701                       	dc.b	smpsNoAttack, $01
00088754 E103                       	smpsAlterNote       $03
00088756 E701                       	dc.b	smpsNoAttack, $01
00088758 E102                       	smpsAlterNote       $02
0008875A E701                       	dc.b	smpsNoAttack, $01
0008875C E106                       	smpsAlterNote       $06
0008875E E701                       	dc.b	smpsNoAttack, $01
00088760 E10C                       	smpsAlterNote       $0C
00088762 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088766 E109                       	smpsAlterNote       $09
00088768 E701                       	dc.b	smpsNoAttack, $01
0008876A E103                       	smpsAlterNote       $03
0008876C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088770 E109                       	smpsAlterNote       $09
00088772 E701                       	dc.b	smpsNoAttack, $01
00088774 E10C                       	smpsAlterNote       $0C
00088776 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008877A E106                       	smpsAlterNote       $06
0008877C E701                       	dc.b	smpsNoAttack, $01
0008877E E102                       	smpsAlterNote       $02
00088780 E701                       	dc.b	smpsNoAttack, $01
00088782 E103                       	smpsAlterNote       $03
00088784 E701                       	dc.b	smpsNoAttack, $01
00088786 E109                       	smpsAlterNote       $09
00088788 E701                       	dc.b	smpsNoAttack, $01
0008878A E10D                       	smpsAlterNote       $0D
0008878C E701                       	dc.b	smpsNoAttack, $01
0008878E E109                       	smpsAlterNote       $09
00088790 E701                       	dc.b	smpsNoAttack, $01
00088792 E106                       	smpsAlterNote       $06
00088794 E701                       	dc.b	smpsNoAttack, $01
00088796 E102                       	smpsAlterNote       $02
00088798 E701                       	dc.b	smpsNoAttack, $01
0008879A E106                       	smpsAlterNote       $06
0008879C E701                       	dc.b	smpsNoAttack, $01
0008879E E10C                       	smpsAlterNote       $0C
000887A0 E701                       	dc.b	smpsNoAttack, $01
000887A2 E10D                       	smpsAlterNote       $0D
000887A4 E701                       	dc.b	smpsNoAttack, $01
000887A6 E109                       	smpsAlterNote       $09
000887A8 E701                       	dc.b	smpsNoAttack, $01
000887AA E103                       	smpsAlterNote       $03
000887AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000887B0 E106                       	smpsAlterNote       $06
000887B2 E701                       	dc.b	smpsNoAttack, $01
000887B4 E10C                       	smpsAlterNote       $0C
000887B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000887BA E106                       	smpsAlterNote       $06
000887BC E701                       	dc.b	smpsNoAttack, $01
000887BE E103                       	smpsAlterNote       $03
000887C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000887C4 E109                       	smpsAlterNote       $09
000887C6 E701                       	dc.b	smpsNoAttack, $01
000887C8 E10D                       	smpsAlterNote       $0D
000887CA E701                       	dc.b	smpsNoAttack, $01
000887CC E10C                       	smpsAlterNote       $0C
000887CE E701                       	dc.b	smpsNoAttack, $01
000887D0 E106                       	smpsAlterNote       $06
000887D2 E701                       	dc.b	smpsNoAttack, $01
000887D4 E103                       	smpsAlterNote       $03
000887D6 8001                       	dc.b	nRst, $01
000887D8 E109                       	smpsAlterNote       $09
000887DA C206 8001                  	dc.b	nF5, $06, nRst, $01
000887E0 E10C                       	smpsAlterNote       $0C
000887E2 E601                       	smpsAlterVol        $01
000887E4 BB0D                       	dc.b	nBb4, $0D
000887E6 E106                       	smpsAlterNote       $06
000887E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000887EC E109                       	smpsAlterNote       $09
000887EE E701                       	dc.b	smpsNoAttack, $01
000887F0 E10F                       	smpsAlterNote       $0F
000887F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000887F6 E109                       	smpsAlterNote       $09
000887F8 E701                       	dc.b	smpsNoAttack, $01
000887FA E106                       	smpsAlterNote       $06
000887FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088800 E10C                       	smpsAlterNote       $0C
00088802 E701                       	dc.b	smpsNoAttack, $01
00088804 E110                       	smpsAlterNote       $10
00088806 E701                       	dc.b	smpsNoAttack, $01
00088808 E10F                       	smpsAlterNote       $0F
0008880A E701                       	dc.b	smpsNoAttack, $01
0008880C E109                       	smpsAlterNote       $09
0008880E E701                       	dc.b	smpsNoAttack, $01
00088810 E105                       	smpsAlterNote       $05
00088812 E701                       	dc.b	smpsNoAttack, $01
00088814 E106                       	smpsAlterNote       $06
00088816 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008881A E103                       	smpsAlterNote       $03
0008881C E701                       	dc.b	smpsNoAttack, $01
0008881E E1FF                       	smpsAlterNote       $FF
00088820 E701                       	dc.b	smpsNoAttack, $01
00088822 E103                       	smpsAlterNote       $03
00088824 E701                       	dc.b	smpsNoAttack, $01
00088826 E106                       	smpsAlterNote       $06
00088828 E701                       	dc.b	smpsNoAttack, $01
0008882A E10A                       	smpsAlterNote       $0A
0008882C E701                       	dc.b	smpsNoAttack, $01
0008882E E106                       	smpsAlterNote       $06
00088830 E701                       	dc.b	smpsNoAttack, $01
00088832 E100                       	smpsAlterNote       $00
00088834 E701                       	dc.b	smpsNoAttack, $01
00088836 E1FF                       	smpsAlterNote       $FF
00088838 E701                       	dc.b	smpsNoAttack, $01
0008883A E103                       	smpsAlterNote       $03
0008883C E701                       	dc.b	smpsNoAttack, $01
0008883E E109                       	smpsAlterNote       $09
00088840 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088844 E106                       	smpsAlterNote       $06
00088846 E701                       	dc.b	smpsNoAttack, $01
00088848 E100                       	smpsAlterNote       $00
0008884A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008884E E107                       	smpsAlterNote       $07
00088850 BF0E                       	dc.b	nD5, $0E
00088852 E101                       	smpsAlterNote       $01
00088854 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088858 E107                       	smpsAlterNote       $07
0008885A E701                       	dc.b	smpsNoAttack, $01
0008885C E10A                       	smpsAlterNote       $0A
0008885E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088862 E104                       	smpsAlterNote       $04
00088864 E701                       	dc.b	smpsNoAttack, $01
00088866 E100                       	smpsAlterNote       $00
00088868 E701                       	dc.b	smpsNoAttack, $01
0008886A E101                       	smpsAlterNote       $01
0008886C E701                       	dc.b	smpsNoAttack, $01
0008886E E107                       	smpsAlterNote       $07
00088870 E701                       	dc.b	smpsNoAttack, $01
00088872 E10B                       	smpsAlterNote       $0B
00088874 E701                       	dc.b	smpsNoAttack, $01
00088876 E107                       	smpsAlterNote       $07
00088878 E701                       	dc.b	smpsNoAttack, $01
0008887A E104                       	smpsAlterNote       $04
0008887C E701                       	dc.b	smpsNoAttack, $01
0008887E E100                       	smpsAlterNote       $00
00088880 E701                       	dc.b	smpsNoAttack, $01
00088882 E101                       	smpsAlterNote       $01
00088884 8001                       	dc.b	nRst, $01
00088886 E108                       	smpsAlterNote       $08
00088888 C10C                       	dc.b	nE5, $0C
0008888A E109                       	smpsAlterNote       $09
0008888C C201 8001                  	dc.b	nF5, $01, nRst, $01
00088890 E10A                       	smpsAlterNote       $0A
00088892 8001                       	dc.b	nRst, $01
00088894 E109                       	smpsAlterNote       $09
00088896 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008889A E106                       	smpsAlterNote       $06
0008889C E701                       	dc.b	smpsNoAttack, $01
0008889E E102                       	smpsAlterNote       $02
000888A0 E701                       	dc.b	smpsNoAttack, $01
000888A2 E103                       	smpsAlterNote       $03
000888A4 E701                       	dc.b	smpsNoAttack, $01
000888A6 E109                       	smpsAlterNote       $09
000888A8 E701                       	dc.b	smpsNoAttack, $01
000888AA E10D                       	smpsAlterNote       $0D
000888AC E701                       	dc.b	smpsNoAttack, $01
000888AE E109                       	smpsAlterNote       $09
000888B0 E701                       	dc.b	smpsNoAttack, $01
000888B2 E106                       	smpsAlterNote       $06
000888B4 E701                       	dc.b	smpsNoAttack, $01
000888B6 E102                       	smpsAlterNote       $02
000888B8 E701                       	dc.b	smpsNoAttack, $01
000888BA E106                       	smpsAlterNote       $06
000888BC E701                       	dc.b	smpsNoAttack, $01
000888BE E10C                       	smpsAlterNote       $0C
000888C0 E701                       	dc.b	smpsNoAttack, $01
000888C2 E10D                       	smpsAlterNote       $0D
000888C4 E701                       	dc.b	smpsNoAttack, $01
000888C6 E109                       	smpsAlterNote       $09
000888C8 C40D                       	dc.b	nG5, $0D
000888CA E106                       	smpsAlterNote       $06
000888CC E701                       	dc.b	smpsNoAttack, $01
000888CE E102                       	smpsAlterNote       $02
000888D0 E701                       	dc.b	smpsNoAttack, $01
000888D2 E103                       	smpsAlterNote       $03
000888D4 E701                       	dc.b	smpsNoAttack, $01
000888D6 E109                       	smpsAlterNote       $09
000888D8 E701                       	dc.b	smpsNoAttack, $01
000888DA E108                       	smpsAlterNote       $08
000888DC C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
000888E8 E109                       	smpsAlterNote       $09
000888EA C20D                       	dc.b	nF5, $0D
000888EC E106                       	smpsAlterNote       $06
000888EE E701                       	dc.b	smpsNoAttack, $01
000888F0 E102                       	smpsAlterNote       $02
000888F2 E701                       	dc.b	smpsNoAttack, $01
000888F4 E106                       	smpsAlterNote       $06
000888F6 E701                       	dc.b	smpsNoAttack, $01
000888F8 E109                       	smpsAlterNote       $09
000888FA E701                       	dc.b	smpsNoAttack, $01
000888FC E10D                       	smpsAlterNote       $0D
000888FE E701                       	dc.b	smpsNoAttack, $01
00088900 E109                       	smpsAlterNote       $09
00088902 E701                       	dc.b	smpsNoAttack, $01
00088904 E103                       	smpsAlterNote       $03
00088906 E701                       	dc.b	smpsNoAttack, $01
00088908 E102                       	smpsAlterNote       $02
0008890A E701                       	dc.b	smpsNoAttack, $01
0008890C E106                       	smpsAlterNote       $06
0008890E E701                       	dc.b	smpsNoAttack, $01
00088910 E10C                       	smpsAlterNote       $0C
00088912 E701                       	dc.b	smpsNoAttack, $01
00088914 E10D                       	smpsAlterNote       $0D
00088916 8001                       	dc.b	nRst, $01
00088918 E112                       	smpsAlterNote       $12
0008891A C401                       	dc.b	nG5, $01
0008891C E1EB                       	smpsAlterNote       $EB
0008891E E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00088921 E1FD                       	smpsAlterNote       $FD
00088923 E701                       	dc.b	smpsNoAttack, $01
00088925 E10F                       	smpsAlterNote       $0F
00088927 E701                       	dc.b	smpsNoAttack, $01
00088929 E118                       	smpsAlterNote       $18
0008892B E701                       	dc.b	smpsNoAttack, $01
0008892D E1ED                       	smpsAlterNote       $ED
0008892F E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00088932 E1FF                       	smpsAlterNote       $FF
00088934 E701                       	dc.b	smpsNoAttack, $01
00088936 E10B                       	smpsAlterNote       $0B
00088938 E703                       	dc.b	smpsNoAttack, $03
0008893A E109                       	smpsAlterNote       $09
0008893C C407                       	dc.b	nG5, $07
0008893E E108                       	smpsAlterNote       $08
00088940 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008894C E109                       	smpsAlterNote       $09
0008894E C20D                       	dc.b	nF5, $0D
00088950 E103                       	smpsAlterNote       $03
00088952 E701                       	dc.b	smpsNoAttack, $01
00088954 E102                       	smpsAlterNote       $02
00088956 E701                       	dc.b	smpsNoAttack, $01
00088958 E106                       	smpsAlterNote       $06
0008895A E701                       	dc.b	smpsNoAttack, $01
0008895C E10C                       	smpsAlterNote       $0C
0008895E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088962 E109                       	smpsAlterNote       $09
00088964 E701                       	dc.b	smpsNoAttack, $01
00088966 E103                       	smpsAlterNote       $03
00088968 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008896C E109                       	smpsAlterNote       $09
0008896E E701                       	dc.b	smpsNoAttack, $01
00088970 E10C                       	smpsAlterNote       $0C
00088972 E701                       	dc.b	smpsNoAttack, $01
00088974 E10D                       	smpsAlterNote       $0D
00088976 8001                       	dc.b	nRst, $01
00088978 E10B                       	smpsAlterNote       $0B
0008897A C609 8001                  	dc.b	nA5, $09, nRst, $01
0008897E E109                       	smpsAlterNote       $09
00088980 B806 8001                  	dc.b	nG4, $06, nRst, $01
00088984 E108                       	smpsAlterNote       $08
00088986 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00088992 8001                       	dc.b	nRst, $01
00088994 E109                       	smpsAlterNote       $09
00088996 C20D                       	dc.b	nF5, $0D
00088998 E103                       	smpsAlterNote       $03
0008899A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008899E E106                       	smpsAlterNote       $06
000889A0 E701                       	dc.b	smpsNoAttack, $01
000889A2 E10C                       	smpsAlterNote       $0C
000889A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000889A8 E106                       	smpsAlterNote       $06
000889AA E701                       	dc.b	smpsNoAttack, $01
000889AC E103                       	smpsAlterNote       $03
000889AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000889B2 E109                       	smpsAlterNote       $09
000889B4 E701                       	dc.b	smpsNoAttack, $01
000889B6 E10D                       	smpsAlterNote       $0D
000889B8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000889BE E108                       	smpsAlterNote       $08
000889C0 E6FF                       	smpsAlterVol        $FF
000889C2 A806                       	dc.b	nEb3, $06
000889C4 E10C                       	smpsAlterNote       $0C
000889C6 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000889CA E108                       	smpsAlterNote       $08
000889CC A803                       	dc.b	nEb3, $03
000889CE E109                       	smpsAlterNote       $09
000889D0 AC03 8001                  	dc.b	nG3, $03, nRst, $01
000889D4 E10C                       	smpsAlterNote       $0C
000889D6 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
000889E0 E109                       	smpsAlterNote       $09
000889E2 E602                       	smpsAlterVol        $02
000889E4 B604                       	dc.b	nF4, $04
000889E6 E602                       	smpsAlterVol        $02
000889E8 F6F1 AA                    	smpsJump            music84_Jump02
000889EB                            
000889EB                            ; FM4 Data
000889EB                            music84_FM4:
000889ED E040                       	smpsPan             panRight, $00
000889EF 8003                       	dc.b	nRst, $03
000889F1 E10F                       	smpsAlterNote       $0F
000889F3 C603 8008                  	dc.b	nA5, $03, nRst, $08
000889F7 E10D                       	smpsAlterNote       $0D
000889F9 C403 800A                  	dc.b	nG5, $03, nRst, $0A
000889FD E10C                       	smpsAlterNote       $0C
000889FF C103 8004                  	dc.b	nE5, $03, nRst, $04
00088A05 E6FE                       	smpsAlterVol        $FE
00088A07 E110                       	smpsAlterNote       $10
00088A09 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088A0D E10F                       	smpsAlterNote       $0F
00088A0F C602 8001                  	dc.b	nA5, $02, nRst, $01
00088A13 E10D                       	smpsAlterNote       $0D
00088A15 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00088A1E E10C                       	smpsAlterNote       $0C
00088A20 C103                       	dc.b	nE5, $03
00088A22 E10A                       	smpsAlterNote       $0A
00088A24 BD03 8001                  	dc.b	nC5, $03, nRst, $01
00088A2A 03                         	dc.b	$03
00088A2B                            
00088A2B                            music84_Jump01:
00088A2B E10B                       	smpsAlterNote       $0B
00088A2D BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088A31 E10C                       	smpsAlterNote       $0C
00088A33 C102 8001                  	dc.b	nE5, $02, nRst, $01
00088A37 E10D                       	smpsAlterNote       $0D
00088A39 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00088A43 E10B                       	smpsAlterNote       $0B
00088A45 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00088A49 E107                       	smpsAlterNote       $07
00088A4B E701                       	dc.b	smpsNoAttack, $01
00088A4D E103                       	smpsAlterNote       $03
00088A4F E701                       	dc.b	smpsNoAttack, $01
00088A51 E104                       	smpsAlterNote       $04
00088A53 E701                       	dc.b	smpsNoAttack, $01
00088A55 E10A                       	smpsAlterNote       $0A
00088A57 E701                       	dc.b	smpsNoAttack, $01
00088A59 E10E                       	smpsAlterNote       $0E
00088A5B E701                       	dc.b	smpsNoAttack, $01
00088A5D E10A                       	smpsAlterNote       $0A
00088A5F E701                       	dc.b	smpsNoAttack, $01
00088A61 E107                       	smpsAlterNote       $07
00088A63 E701                       	dc.b	smpsNoAttack, $01
00088A65 E104                       	smpsAlterNote       $04
00088A67 8001                       	dc.b	nRst, $01
00088A69 E110                       	smpsAlterNote       $10
00088A6B C703                       	dc.b	nBb5, $03
00088A6D E10F                       	smpsAlterNote       $0F
00088A6F C603 8001                  	dc.b	nA5, $03, nRst, $01
00088A73 E10D                       	smpsAlterNote       $0D
00088A75 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00088A7B E10C                       	smpsAlterNote       $0C
00088A7D E701                       	dc.b	smpsNoAttack, $01
00088A7F E108                       	smpsAlterNote       $08
00088A81 E701                       	dc.b	smpsNoAttack, $01
00088A83 E10C                       	smpsAlterNote       $0C
00088A85 E701                       	dc.b	smpsNoAttack, $01
00088A87 E10F                       	smpsAlterNote       $0F
00088A89 E701                       	dc.b	smpsNoAttack, $01
00088A8B E113                       	smpsAlterNote       $13
00088A8D E701                       	dc.b	smpsNoAttack, $01
00088A8F E10F                       	smpsAlterNote       $0F
00088A91 E701                       	dc.b	smpsNoAttack, $01
00088A93 E109                       	smpsAlterNote       $09
00088A95 E701                       	dc.b	smpsNoAttack, $01
00088A97 E108                       	smpsAlterNote       $08
00088A99 E701                       	dc.b	smpsNoAttack, $01
00088A9B E10C                       	smpsAlterNote       $0C
00088A9D E701                       	dc.b	smpsNoAttack, $01
00088A9F E112                       	smpsAlterNote       $12
00088AA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AA5 E10C                       	smpsAlterNote       $0C
00088AA7 E701                       	dc.b	smpsNoAttack, $01
00088AA9 E109                       	smpsAlterNote       $09
00088AAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AAF E10F                       	smpsAlterNote       $0F
00088AB1 E701                       	dc.b	smpsNoAttack, $01
00088AB3 E113                       	smpsAlterNote       $13
00088AB5 E701                       	dc.b	smpsNoAttack, $01
00088AB7 E112                       	smpsAlterNote       $12
00088AB9 E701                       	dc.b	smpsNoAttack, $01
00088ABB E10C                       	smpsAlterNote       $0C
00088ABD E701                       	dc.b	smpsNoAttack, $01
00088ABF E108                       	smpsAlterNote       $08
00088AC1 E701                       	dc.b	smpsNoAttack, $01
00088AC3 E10C                       	smpsAlterNote       $0C
00088AC5 E701                       	dc.b	smpsNoAttack, $01
00088AC7 E10F                       	smpsAlterNote       $0F
00088AC9 E701                       	dc.b	smpsNoAttack, $01
00088ACB E113                       	smpsAlterNote       $13
00088ACD E701                       	dc.b	smpsNoAttack, $01
00088ACF E10F                       	smpsAlterNote       $0F
00088AD1 E701                       	dc.b	smpsNoAttack, $01
00088AD3 E109                       	smpsAlterNote       $09
00088AD5 E701                       	dc.b	smpsNoAttack, $01
00088AD7 E108                       	smpsAlterNote       $08
00088AD9 E701                       	dc.b	smpsNoAttack, $01
00088ADB E10C                       	smpsAlterNote       $0C
00088ADD E701                       	dc.b	smpsNoAttack, $01
00088ADF E112                       	smpsAlterNote       $12
00088AE1 E701                       	dc.b	smpsNoAttack, $01
00088AE3 E113                       	smpsAlterNote       $13
00088AE5 800F                       	dc.b	nRst, $0F
00088AE7 E10B                       	smpsAlterNote       $0B
00088AE9 BF03                       	dc.b	nD5, $03
00088AEB E10C                       	smpsAlterNote       $0C
00088AED C103 8001                  	dc.b	nE5, $03, nRst, $01
00088AF1 E10D                       	smpsAlterNote       $0D
00088AF3 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00088AFB E10B                       	smpsAlterNote       $0B
00088AFD BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00088B07 E110                       	smpsAlterNote       $10
00088B09 C704                       	dc.b	nBb5, $04
00088B0B E10F                       	smpsAlterNote       $0F
00088B0D C604 8001                  	dc.b	nA5, $04, nRst, $01
00088B11 E10D                       	smpsAlterNote       $0D
00088B13 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00088B19 E109                       	smpsAlterNote       $09
00088B1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B1F E10F                       	smpsAlterNote       $0F
00088B21 E701                       	dc.b	smpsNoAttack, $01
00088B23 E112                       	smpsAlterNote       $12
00088B25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B29 E10C                       	smpsAlterNote       $0C
00088B2B E701                       	dc.b	smpsNoAttack, $01
00088B2D E108                       	smpsAlterNote       $08
00088B2F E701                       	dc.b	smpsNoAttack, $01
00088B31 E109                       	smpsAlterNote       $09
00088B33 E701                       	dc.b	smpsNoAttack, $01
00088B35 E10F                       	smpsAlterNote       $0F
00088B37 E701                       	dc.b	smpsNoAttack, $01
00088B39 E113                       	smpsAlterNote       $13
00088B3B E701                       	dc.b	smpsNoAttack, $01
00088B3D E10F                       	smpsAlterNote       $0F
00088B3F E701                       	dc.b	smpsNoAttack, $01
00088B41 E10C                       	smpsAlterNote       $0C
00088B43 E701                       	dc.b	smpsNoAttack, $01
00088B45 E108                       	smpsAlterNote       $08
00088B47 E701                       	dc.b	smpsNoAttack, $01
00088B49 E10C                       	smpsAlterNote       $0C
00088B4B E701                       	dc.b	smpsNoAttack, $01
00088B4D E112                       	smpsAlterNote       $12
00088B4F E701                       	dc.b	smpsNoAttack, $01
00088B51 E113                       	smpsAlterNote       $13
00088B53 E701                       	dc.b	smpsNoAttack, $01
00088B55 E10F                       	smpsAlterNote       $0F
00088B57 E701                       	dc.b	smpsNoAttack, $01
00088B59 E109                       	smpsAlterNote       $09
00088B5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B5F E10C                       	smpsAlterNote       $0C
00088B61 E701                       	dc.b	smpsNoAttack, $01
00088B63 E112                       	smpsAlterNote       $12
00088B65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B69 E10C                       	smpsAlterNote       $0C
00088B6B E701                       	dc.b	smpsNoAttack, $01
00088B6D E109                       	smpsAlterNote       $09
00088B6F E701                       	dc.b	smpsNoAttack, $01
00088B71 E10D                       	smpsAlterNote       $0D
00088B73 C401 8001                  	dc.b	nG5, $01, nRst, $01
00088B77 E10F                       	smpsAlterNote       $0F
00088B79 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00088B83 E10D                       	smpsAlterNote       $0D
00088B85 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00088B8B E10B                       	smpsAlterNote       $0B
00088B8D BF0D                       	dc.b	nD5, $0D
00088B8F E108                       	smpsAlterNote       $08
00088B91 E701                       	dc.b	smpsNoAttack, $01
00088B93 E104                       	smpsAlterNote       $04
00088B95 E701                       	dc.b	smpsNoAttack, $01
00088B97 E108                       	smpsAlterNote       $08
00088B99 E701                       	dc.b	smpsNoAttack, $01
00088B9B E10B                       	smpsAlterNote       $0B
00088B9D E701                       	dc.b	smpsNoAttack, $01
00088B9F E10F                       	smpsAlterNote       $0F
00088BA1 E701                       	dc.b	smpsNoAttack, $01
00088BA3 E10B                       	smpsAlterNote       $0B
00088BA5 E701                       	dc.b	smpsNoAttack, $01
00088BA7 E105                       	smpsAlterNote       $05
00088BA9 E701                       	dc.b	smpsNoAttack, $01
00088BAB E104                       	smpsAlterNote       $04
00088BAD E701                       	dc.b	smpsNoAttack, $01
00088BAF E108                       	smpsAlterNote       $08
00088BB1 E701                       	dc.b	smpsNoAttack, $01
00088BB3 E10E                       	smpsAlterNote       $0E
00088BB5 E701                       	dc.b	smpsNoAttack, $01
00088BB7 E10F                       	smpsAlterNote       $0F
00088BB9 8001                       	dc.b	nRst, $01
00088BBB E10C                       	smpsAlterNote       $0C
00088BBD C101                       	dc.b	nE5, $01
00088BBF E10D                       	smpsAlterNote       $0D
00088BC1 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00088BC7 E10F                       	smpsAlterNote       $0F
00088BC9 C606 8001                  	dc.b	nA5, $06, nRst, $01
00088BCD E10C                       	smpsAlterNote       $0C
00088BCF CD06 8001                  	dc.b	nE6, $06, nRst, $01
00088BD3 E10D                       	smpsAlterNote       $0D
00088BD5 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00088BD9 E10C                       	smpsAlterNote       $0C
00088BDB CD03                       	dc.b	nE6, $03
00088BDD E10A                       	smpsAlterNote       $0A
00088BDF C903 8001                  	dc.b	nC6, $03, nRst, $01
00088BE3 E10D                       	smpsAlterNote       $0D
00088BE5 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00088BED E109                       	smpsAlterNote       $09
00088BEF E701                       	dc.b	smpsNoAttack, $01
00088BF1 E10D                       	smpsAlterNote       $0D
00088BF3 E701                       	dc.b	smpsNoAttack, $01
00088BF5 E110                       	smpsAlterNote       $10
00088BF7 E701                       	dc.b	smpsNoAttack, $01
00088BF9 E114                       	smpsAlterNote       $14
00088BFB E701                       	dc.b	smpsNoAttack, $01
00088BFD E110                       	smpsAlterNote       $10
00088BFF E701                       	dc.b	smpsNoAttack, $01
00088C01 E10A                       	smpsAlterNote       $0A
00088C03 E701                       	dc.b	smpsNoAttack, $01
00088C05 E109                       	smpsAlterNote       $09
00088C07 E701                       	dc.b	smpsNoAttack, $01
00088C09 E10D                       	smpsAlterNote       $0D
00088C0B E701                       	dc.b	smpsNoAttack, $01
00088C0D E113                       	smpsAlterNote       $13
00088C0F E701                       	dc.b	smpsNoAttack, $01
00088C11 E114                       	smpsAlterNote       $14
00088C13 8001                       	dc.b	nRst, $01
00088C15 E10F                       	smpsAlterNote       $0F
00088C17 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00088C1D E10C                       	smpsAlterNote       $0C
00088C1F E701                       	dc.b	smpsNoAttack, $01
00088C21 E108                       	smpsAlterNote       $08
00088C23 E701                       	dc.b	smpsNoAttack, $01
00088C25 E10C                       	smpsAlterNote       $0C
00088C27 E701                       	dc.b	smpsNoAttack, $01
00088C29 E112                       	smpsAlterNote       $12
00088C2B E701                       	dc.b	smpsNoAttack, $01
00088C2D E113                       	smpsAlterNote       $13
00088C2F E701                       	dc.b	smpsNoAttack, $01
00088C31 E10F                       	smpsAlterNote       $0F
00088C33 E701                       	dc.b	smpsNoAttack, $01
00088C35 E109                       	smpsAlterNote       $09
00088C37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C3B E10C                       	smpsAlterNote       $0C
00088C3D E701                       	dc.b	smpsNoAttack, $01
00088C3F E112                       	smpsAlterNote       $12
00088C41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C45 E10C                       	smpsAlterNote       $0C
00088C47 E701                       	dc.b	smpsNoAttack, $01
00088C49 E109                       	smpsAlterNote       $09
00088C4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C4F E10F                       	smpsAlterNote       $0F
00088C51 E701                       	dc.b	smpsNoAttack, $01
00088C53 E113                       	smpsAlterNote       $13
00088C55 E701                       	dc.b	smpsNoAttack, $01
00088C57 E112                       	smpsAlterNote       $12
00088C59 E701                       	dc.b	smpsNoAttack, $01
00088C5B E10C                       	smpsAlterNote       $0C
00088C5D E701                       	dc.b	smpsNoAttack, $01
00088C5F E108                       	smpsAlterNote       $08
00088C61 E701                       	dc.b	smpsNoAttack, $01
00088C63 E10C                       	smpsAlterNote       $0C
00088C65 E701                       	dc.b	smpsNoAttack, $01
00088C67 E10F                       	smpsAlterNote       $0F
00088C69 E701                       	dc.b	smpsNoAttack, $01
00088C6B E113                       	smpsAlterNote       $13
00088C6D E701                       	dc.b	smpsNoAttack, $01
00088C6F E10F                       	smpsAlterNote       $0F
00088C71 E701                       	dc.b	smpsNoAttack, $01
00088C73 E109                       	smpsAlterNote       $09
00088C75 E701                       	dc.b	smpsNoAttack, $01
00088C77 E108                       	smpsAlterNote       $08
00088C79 E701                       	dc.b	smpsNoAttack, $01
00088C7B E10C                       	smpsAlterNote       $0C
00088C7D E701                       	dc.b	smpsNoAttack, $01
00088C7F E112                       	smpsAlterNote       $12
00088C81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C85 E10F                       	smpsAlterNote       $0F
00088C87 E701                       	dc.b	smpsNoAttack, $01
00088C89 E109                       	smpsAlterNote       $09
00088C8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C8F E10F                       	smpsAlterNote       $0F
00088C91 E701                       	dc.b	smpsNoAttack, $01
00088C93 E113                       	smpsAlterNote       $13
00088C95 E701                       	dc.b	smpsNoAttack, $01
00088C97 E112                       	smpsAlterNote       $12
00088C99 E701                       	dc.b	smpsNoAttack, $01
00088C9B E10C                       	smpsAlterNote       $0C
00088C9D E701                       	dc.b	smpsNoAttack, $01
00088C9F E108                       	smpsAlterNote       $08
00088CA1 E701                       	dc.b	smpsNoAttack, $01
00088CA3 E10C                       	smpsAlterNote       $0C
00088CA5 E701                       	dc.b	smpsNoAttack, $01
00088CA7 E10F                       	smpsAlterNote       $0F
00088CA9 E701                       	dc.b	smpsNoAttack, $01
00088CAB E113                       	smpsAlterNote       $13
00088CAD E701                       	dc.b	smpsNoAttack, $01
00088CAF E10F                       	smpsAlterNote       $0F
00088CB1 E701                       	dc.b	smpsNoAttack, $01
00088CB3 E109                       	smpsAlterNote       $09
00088CB5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088CB9 E10F                       	smpsAlterNote       $0F
00088CBB C60D                       	dc.b	nA5, $0D
00088CBD E109                       	smpsAlterNote       $09
00088CBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CC3 E10C                       	smpsAlterNote       $0C
00088CC5 E701                       	dc.b	smpsNoAttack, $01
00088CC7 E112                       	smpsAlterNote       $12
00088CC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CCD E10C                       	smpsAlterNote       $0C
00088CCF E701                       	dc.b	smpsNoAttack, $01
00088CD1 E109                       	smpsAlterNote       $09
00088CD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CD7 E10F                       	smpsAlterNote       $0F
00088CD9 E701                       	dc.b	smpsNoAttack, $01
00088CDB E113                       	smpsAlterNote       $13
00088CDD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088CE3 E10D                       	smpsAlterNote       $0D
00088CE5 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00088CED E10C                       	smpsAlterNote       $0C
00088CEF C103 800E                  	dc.b	nE5, $03, nRst, $0E
00088CF5 E6FF                       	smpsAlterVol        $FF
00088CF7 E10B                       	smpsAlterNote       $0B
00088CF9 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088CFD E10C                       	smpsAlterNote       $0C
00088CFF C103                       	dc.b	nE5, $03
00088D01 E10D                       	smpsAlterNote       $0D
00088D03 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00088D0D E10B                       	smpsAlterNote       $0B
00088D0F BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00088D13 E107                       	smpsAlterNote       $07
00088D15 E701                       	dc.b	smpsNoAttack, $01
00088D17 E104                       	smpsAlterNote       $04
00088D19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D1D E10A                       	smpsAlterNote       $0A
00088D1F E701                       	dc.b	smpsNoAttack, $01
00088D21 E10D                       	smpsAlterNote       $0D
00088D23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D27 E107                       	smpsAlterNote       $07
00088D29 E701                       	dc.b	smpsNoAttack, $01
00088D2B E104                       	smpsAlterNote       $04
00088D2D 8001                       	dc.b	nRst, $01
00088D2F E110                       	smpsAlterNote       $10
00088D31 C703                       	dc.b	nBb5, $03
00088D33 E10F                       	smpsAlterNote       $0F
00088D35 C603 8001                  	dc.b	nA5, $03, nRst, $01
00088D39 E10D                       	smpsAlterNote       $0D
00088D3B C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00088D3F E10C                       	smpsAlterNote       $0C
00088D41 E701                       	dc.b	smpsNoAttack, $01
00088D43 E108                       	smpsAlterNote       $08
00088D45 E701                       	dc.b	smpsNoAttack, $01
00088D47 E109                       	smpsAlterNote       $09
00088D49 E701                       	dc.b	smpsNoAttack, $01
00088D4B E10F                       	smpsAlterNote       $0F
00088D4D E701                       	dc.b	smpsNoAttack, $01
00088D4F E113                       	smpsAlterNote       $13
00088D51 E701                       	dc.b	smpsNoAttack, $01
00088D53 E10F                       	smpsAlterNote       $0F
00088D55 E701                       	dc.b	smpsNoAttack, $01
00088D57 E10C                       	smpsAlterNote       $0C
00088D59 E701                       	dc.b	smpsNoAttack, $01
00088D5B E108                       	smpsAlterNote       $08
00088D5D E701                       	dc.b	smpsNoAttack, $01
00088D5F E10C                       	smpsAlterNote       $0C
00088D61 E701                       	dc.b	smpsNoAttack, $01
00088D63 E112                       	smpsAlterNote       $12
00088D65 E701                       	dc.b	smpsNoAttack, $01
00088D67 E113                       	smpsAlterNote       $13
00088D69 E701                       	dc.b	smpsNoAttack, $01
00088D6B E10F                       	smpsAlterNote       $0F
00088D6D E701                       	dc.b	smpsNoAttack, $01
00088D6F E109                       	smpsAlterNote       $09
00088D71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D75 E10C                       	smpsAlterNote       $0C
00088D77 E701                       	dc.b	smpsNoAttack, $01
00088D79 E112                       	smpsAlterNote       $12
00088D7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D7F E10C                       	smpsAlterNote       $0C
00088D81 E701                       	dc.b	smpsNoAttack, $01
00088D83 E109                       	smpsAlterNote       $09
00088D85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D89 E10F                       	smpsAlterNote       $0F
00088D8B E701                       	dc.b	smpsNoAttack, $01
00088D8D E113                       	smpsAlterNote       $13
00088D8F E701                       	dc.b	smpsNoAttack, $01
00088D91 E112                       	smpsAlterNote       $12
00088D93 E701                       	dc.b	smpsNoAttack, $01
00088D95 E10C                       	smpsAlterNote       $0C
00088D97 E701                       	dc.b	smpsNoAttack, $01
00088D99 E108                       	smpsAlterNote       $08
00088D9B E701                       	dc.b	smpsNoAttack, $01
00088D9D E10C                       	smpsAlterNote       $0C
00088D9F E701                       	dc.b	smpsNoAttack, $01
00088DA1 E10F                       	smpsAlterNote       $0F
00088DA3 E701                       	dc.b	smpsNoAttack, $01
00088DA5 E113                       	smpsAlterNote       $13
00088DA7 E701                       	dc.b	smpsNoAttack, $01
00088DA9 E10F                       	smpsAlterNote       $0F
00088DAB BA03 8001                  	dc.b	nA4, $03, nRst, $01
00088DAF E110                       	smpsAlterNote       $10
00088DB1 BB03                       	dc.b	nBb4, $03
00088DB3 E10F                       	smpsAlterNote       $0F
00088DB5 BA06 8001                  	dc.b	nA4, $06, nRst, $01
00088DB9 E10B                       	smpsAlterNote       $0B
00088DBB BF03                       	dc.b	nD5, $03
00088DBD E10C                       	smpsAlterNote       $0C
00088DBF C103 8001                  	dc.b	nE5, $03, nRst, $01
00088DC3 E10D                       	smpsAlterNote       $0D
00088DC5 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00088DCF E10B                       	smpsAlterNote       $0B
00088DD1 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00088DDD E110                       	smpsAlterNote       $10
00088DDF C704 8001                  	dc.b	nBb5, $04, nRst, $01
00088DE3 E10F                       	smpsAlterNote       $0F
00088DE5 C604                       	dc.b	nA5, $04
00088DE7 E10D                       	smpsAlterNote       $0D
00088DE9 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00088DEF E109                       	smpsAlterNote       $09
00088DF1 E701                       	dc.b	smpsNoAttack, $01
00088DF3 E108                       	smpsAlterNote       $08
00088DF5 E701                       	dc.b	smpsNoAttack, $01
00088DF7 E10C                       	smpsAlterNote       $0C
00088DF9 E701                       	dc.b	smpsNoAttack, $01
00088DFB E112                       	smpsAlterNote       $12
00088DFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E01 E10F                       	smpsAlterNote       $0F
00088E03 E701                       	dc.b	smpsNoAttack, $01
00088E05 E109                       	smpsAlterNote       $09
00088E07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E0B E10F                       	smpsAlterNote       $0F
00088E0D E701                       	dc.b	smpsNoAttack, $01
00088E0F E112                       	smpsAlterNote       $12
00088E11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E15 E10C                       	smpsAlterNote       $0C
00088E17 E701                       	dc.b	smpsNoAttack, $01
00088E19 E108                       	smpsAlterNote       $08
00088E1B E701                       	dc.b	smpsNoAttack, $01
00088E1D E109                       	smpsAlterNote       $09
00088E1F E701                       	dc.b	smpsNoAttack, $01
00088E21 E10F                       	smpsAlterNote       $0F
00088E23 E701                       	dc.b	smpsNoAttack, $01
00088E25 E113                       	smpsAlterNote       $13
00088E27 E701                       	dc.b	smpsNoAttack, $01
00088E29 E10F                       	smpsAlterNote       $0F
00088E2B E701                       	dc.b	smpsNoAttack, $01
00088E2D E10C                       	smpsAlterNote       $0C
00088E2F E701                       	dc.b	smpsNoAttack, $01
00088E31 E108                       	smpsAlterNote       $08
00088E33 E701                       	dc.b	smpsNoAttack, $01
00088E35 E10C                       	smpsAlterNote       $0C
00088E37 E701                       	dc.b	smpsNoAttack, $01
00088E39 E112                       	smpsAlterNote       $12
00088E3B E701                       	dc.b	smpsNoAttack, $01
00088E3D E113                       	smpsAlterNote       $13
00088E3F E701                       	dc.b	smpsNoAttack, $01
00088E41 E10F                       	smpsAlterNote       $0F
00088E43 E701                       	dc.b	smpsNoAttack, $01
00088E45 E109                       	smpsAlterNote       $09
00088E47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E4B E10C                       	smpsAlterNote       $0C
00088E4D E701                       	dc.b	smpsNoAttack, $01
00088E4F E112                       	smpsAlterNote       $12
00088E51 E701                       	dc.b	smpsNoAttack, $01
00088E53 E113                       	smpsAlterNote       $13
00088E55 8001                       	dc.b	nRst, $01
00088E57 E10F                       	smpsAlterNote       $0F
00088E59 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00088E65 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00088E6D E10D                       	smpsAlterNote       $0D
00088E6F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00088E75 E10B                       	smpsAlterNote       $0B
00088E77 BF0D                       	dc.b	nD5, $0D
00088E79 E108                       	smpsAlterNote       $08
00088E7B E701                       	dc.b	smpsNoAttack, $01
00088E7D E104                       	smpsAlterNote       $04
00088E7F E701                       	dc.b	smpsNoAttack, $01
00088E81 E105                       	smpsAlterNote       $05
00088E83 E701                       	dc.b	smpsNoAttack, $01
00088E85 E10B                       	smpsAlterNote       $0B
00088E87 E701                       	dc.b	smpsNoAttack, $01
00088E89 E10F                       	smpsAlterNote       $0F
00088E8B E701                       	dc.b	smpsNoAttack, $01
00088E8D E10B                       	smpsAlterNote       $0B
00088E8F E701                       	dc.b	smpsNoAttack, $01
00088E91 E108                       	smpsAlterNote       $08
00088E93 E701                       	dc.b	smpsNoAttack, $01
00088E95 E104                       	smpsAlterNote       $04
00088E97 E701                       	dc.b	smpsNoAttack, $01
00088E99 E108                       	smpsAlterNote       $08
00088E9B E701                       	dc.b	smpsNoAttack, $01
00088E9D E10E                       	smpsAlterNote       $0E
00088E9F E701                       	dc.b	smpsNoAttack, $01
00088EA1 E10F                       	smpsAlterNote       $0F
00088EA3 E701                       	dc.b	smpsNoAttack, $01
00088EA5 E10C                       	smpsAlterNote       $0C
00088EA7 C101                       	dc.b	nE5, $01
00088EA9 E10D                       	smpsAlterNote       $0D
00088EAB C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00088EB3 E10F                       	smpsAlterNote       $0F
00088EB5 C607                       	dc.b	nA5, $07
00088EB7 E10C                       	smpsAlterNote       $0C
00088EB9 CD07                       	dc.b	nE6, $07
00088EBB E10D                       	smpsAlterNote       $0D
00088EBD CE06 8001                  	dc.b	nF6, $06, nRst, $01
00088EC1 E10C                       	smpsAlterNote       $0C
00088EC3 CD03                       	dc.b	nE6, $03
00088EC5 E10A                       	smpsAlterNote       $0A
00088EC7 C903 8001                  	dc.b	nC6, $03, nRst, $01
00088ECB E10D                       	smpsAlterNote       $0D
00088ECD C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00088ED3 E10A                       	smpsAlterNote       $0A
00088ED5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088ED9 E110                       	smpsAlterNote       $10
00088EDB E701                       	dc.b	smpsNoAttack, $01
00088EDD E114                       	smpsAlterNote       $14
00088EDF E701                       	dc.b	smpsNoAttack, $01
00088EE1 E113                       	smpsAlterNote       $13
00088EE3 E701                       	dc.b	smpsNoAttack, $01
00088EE5 E10D                       	smpsAlterNote       $0D
00088EE7 E701                       	dc.b	smpsNoAttack, $01
00088EE9 E109                       	smpsAlterNote       $09
00088EEB E701                       	dc.b	smpsNoAttack, $01
00088EED E10D                       	smpsAlterNote       $0D
00088EEF E701                       	dc.b	smpsNoAttack, $01
00088EF1 E110                       	smpsAlterNote       $10
00088EF3 E701                       	dc.b	smpsNoAttack, $01
00088EF5 E114                       	smpsAlterNote       $14
00088EF7 E701                       	dc.b	smpsNoAttack, $01
00088EF9 E10F                       	smpsAlterNote       $0F
00088EFB C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00088EFF E10C                       	smpsAlterNote       $0C
00088F01 E701                       	dc.b	smpsNoAttack, $01
00088F03 E108                       	smpsAlterNote       $08
00088F05 E701                       	dc.b	smpsNoAttack, $01
00088F07 E10C                       	smpsAlterNote       $0C
00088F09 E701                       	dc.b	smpsNoAttack, $01
00088F0B E10F                       	smpsAlterNote       $0F
00088F0D E701                       	dc.b	smpsNoAttack, $01
00088F0F E113                       	smpsAlterNote       $13
00088F11 E701                       	dc.b	smpsNoAttack, $01
00088F13 E10F                       	smpsAlterNote       $0F
00088F15 E701                       	dc.b	smpsNoAttack, $01
00088F17 E109                       	smpsAlterNote       $09
00088F19 E701                       	dc.b	smpsNoAttack, $01
00088F1B E108                       	smpsAlterNote       $08
00088F1D E701                       	dc.b	smpsNoAttack, $01
00088F1F E10C                       	smpsAlterNote       $0C
00088F21 E701                       	dc.b	smpsNoAttack, $01
00088F23 E112                       	smpsAlterNote       $12
00088F25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F29 E10F                       	smpsAlterNote       $0F
00088F2B E701                       	dc.b	smpsNoAttack, $01
00088F2D E109                       	smpsAlterNote       $09
00088F2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F33 E10F                       	smpsAlterNote       $0F
00088F35 E701                       	dc.b	smpsNoAttack, $01
00088F37 E112                       	smpsAlterNote       $12
00088F39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F3D E10C                       	smpsAlterNote       $0C
00088F3F E701                       	dc.b	smpsNoAttack, $01
00088F41 E108                       	smpsAlterNote       $08
00088F43 E701                       	dc.b	smpsNoAttack, $01
00088F45 E109                       	smpsAlterNote       $09
00088F47 E701                       	dc.b	smpsNoAttack, $01
00088F49 E10F                       	smpsAlterNote       $0F
00088F4B E701                       	dc.b	smpsNoAttack, $01
00088F4D E113                       	smpsAlterNote       $13
00088F4F E701                       	dc.b	smpsNoAttack, $01
00088F51 E10F                       	smpsAlterNote       $0F
00088F53 E701                       	dc.b	smpsNoAttack, $01
00088F55 E10C                       	smpsAlterNote       $0C
00088F57 E701                       	dc.b	smpsNoAttack, $01
00088F59 E108                       	smpsAlterNote       $08
00088F5B E701                       	dc.b	smpsNoAttack, $01
00088F5D E10C                       	smpsAlterNote       $0C
00088F5F E701                       	dc.b	smpsNoAttack, $01
00088F61 E112                       	smpsAlterNote       $12
00088F63 E701                       	dc.b	smpsNoAttack, $01
00088F65 E113                       	smpsAlterNote       $13
00088F67 E701                       	dc.b	smpsNoAttack, $01
00088F69 E10F                       	smpsAlterNote       $0F
00088F6B E701                       	dc.b	smpsNoAttack, $01
00088F6D E109                       	smpsAlterNote       $09
00088F6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F73 E10C                       	smpsAlterNote       $0C
00088F75 E701                       	dc.b	smpsNoAttack, $01
00088F77 E112                       	smpsAlterNote       $12
00088F79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F7D E10C                       	smpsAlterNote       $0C
00088F7F E701                       	dc.b	smpsNoAttack, $01
00088F81 E109                       	smpsAlterNote       $09
00088F83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F87 E10F                       	smpsAlterNote       $0F
00088F89 E701                       	dc.b	smpsNoAttack, $01
00088F8B E113                       	smpsAlterNote       $13
00088F8D E701                       	dc.b	smpsNoAttack, $01
00088F8F E112                       	smpsAlterNote       $12
00088F91 E701                       	dc.b	smpsNoAttack, $01
00088F93 E10C                       	smpsAlterNote       $0C
00088F95 E701                       	dc.b	smpsNoAttack, $01
00088F97 E109                       	smpsAlterNote       $09
00088F99 8001                       	dc.b	nRst, $01
00088F9B E10F                       	smpsAlterNote       $0F
00088F9D C60D                       	dc.b	nA5, $0D
00088F9F E10C                       	smpsAlterNote       $0C
00088FA1 E701                       	dc.b	smpsNoAttack, $01
00088FA3 E108                       	smpsAlterNote       $08
00088FA5 E701                       	dc.b	smpsNoAttack, $01
00088FA7 E10C                       	smpsAlterNote       $0C
00088FA9 E701                       	dc.b	smpsNoAttack, $01
00088FAB E112                       	smpsAlterNote       $12
00088FAD E701                       	dc.b	smpsNoAttack, $01
00088FAF E113                       	smpsAlterNote       $13
00088FB1 E701                       	dc.b	smpsNoAttack, $01
00088FB3 E10F                       	smpsAlterNote       $0F
00088FB5 E701                       	dc.b	smpsNoAttack, $01
00088FB7 E109                       	smpsAlterNote       $09
00088FB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FBD E10C                       	smpsAlterNote       $0C
00088FBF E701                       	dc.b	smpsNoAttack, $01
00088FC1 E112                       	smpsAlterNote       $12
00088FC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FC7 E10C                       	smpsAlterNote       $0C
00088FC9 E701                       	dc.b	smpsNoAttack, $01
00088FCB E109                       	smpsAlterNote       $09
00088FCD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FD1 E10F                       	smpsAlterNote       $0F
00088FD3 E701                       	dc.b	smpsNoAttack, $01
00088FD5 E113                       	smpsAlterNote       $13
00088FD7 E701                       	dc.b	smpsNoAttack, $01
00088FD9 E112                       	smpsAlterNote       $12
00088FDB E701                       	dc.b	smpsNoAttack, $01
00088FDD E10C                       	smpsAlterNote       $0C
00088FDF E701                       	dc.b	smpsNoAttack, $01
00088FE1 E108                       	smpsAlterNote       $08
00088FE3 E701                       	dc.b	smpsNoAttack, $01
00088FE5 E10C                       	smpsAlterNote       $0C
00088FE7 E701                       	dc.b	smpsNoAttack, $01
00088FE9 E10F                       	smpsAlterNote       $0F
00088FEB E701                       	dc.b	smpsNoAttack, $01
00088FED E113                       	smpsAlterNote       $13
00088FEF E701                       	dc.b	smpsNoAttack, $01
00088FF1 E10F                       	smpsAlterNote       $0F
00088FF3 E701                       	dc.b	smpsNoAttack, $01
00088FF5 E109                       	smpsAlterNote       $09
00088FF7 E701                       	dc.b	smpsNoAttack, $01
00088FF9 E108                       	smpsAlterNote       $08
00088FFB E701                       	dc.b	smpsNoAttack, $01
00088FFD E10C                       	smpsAlterNote       $0C
00088FFF E701                       	dc.b	smpsNoAttack, $01
00089001 E112                       	smpsAlterNote       $12
00089003 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089007 E10F                       	smpsAlterNote       $0F
00089009 E701                       	dc.b	smpsNoAttack, $01
0008900B E109                       	smpsAlterNote       $09
0008900D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089011 E10F                       	smpsAlterNote       $0F
00089013 E701                       	dc.b	smpsNoAttack, $01
00089015 E112                       	smpsAlterNote       $12
00089017 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008901B E10C                       	smpsAlterNote       $0C
0008901D E701                       	dc.b	smpsNoAttack, $01
0008901F E108                       	smpsAlterNote       $08
00089021 E701                       	dc.b	smpsNoAttack, $01
00089023 E10C                       	smpsAlterNote       $0C
00089025 E701                       	dc.b	smpsNoAttack, $01
00089027 E10F                       	smpsAlterNote       $0F
00089029 E701                       	dc.b	smpsNoAttack, $01
0008902B E113                       	smpsAlterNote       $13
0008902D E701                       	dc.b	smpsNoAttack, $01
0008902F E10F                       	smpsAlterNote       $0F
00089031 E701                       	dc.b	smpsNoAttack, $01
00089033 E109                       	smpsAlterNote       $09
00089035 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008903B E601                       	smpsAlterVol        $01
0008903D E10F                       	smpsAlterNote       $0F
0008903F C604                       	dc.b	nA5, $04
00089041 E10D                       	smpsAlterNote       $0D
00089043 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00089049 E10B                       	smpsAlterNote       $0B
0008904B BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
00089053 E10F                       	smpsAlterNote       $0F
00089055 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089059 E10D                       	smpsAlterNote       $0D
0008905B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00089061 E10C                       	smpsAlterNote       $0C
00089063 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
00089069 E10A                       	smpsAlterNote       $0A
0008906B C904 8001                  	dc.b	nC6, $04, nRst, $01
0008906F E110                       	smpsAlterNote       $10
00089071 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00089075 E10F                       	smpsAlterNote       $0F
00089077 C604                       	dc.b	nA5, $04
00089079 E10D                       	smpsAlterNote       $0D
0008907B C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00089087 E109                       	smpsAlterNote       $09
00089089 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008908D E10F                       	smpsAlterNote       $0F
0008908F E701                       	dc.b	smpsNoAttack, $01
00089091 E112                       	smpsAlterNote       $12
00089093 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089097 E10C                       	smpsAlterNote       $0C
00089099 E701                       	dc.b	smpsNoAttack, $01
0008909B E108                       	smpsAlterNote       $08
0008909D E701                       	dc.b	smpsNoAttack, $01
0008909F E10C                       	smpsAlterNote       $0C
000890A1 E701                       	dc.b	smpsNoAttack, $01
000890A3 E10F                       	smpsAlterNote       $0F
000890A5 E701                       	dc.b	smpsNoAttack, $01
000890A7 E113                       	smpsAlterNote       $13
000890A9 E701                       	dc.b	smpsNoAttack, $01
000890AB E10D                       	smpsAlterNote       $0D
000890AD C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000890B3 E10C                       	smpsAlterNote       $0C
000890B5 C10D                       	dc.b	nE5, $0D
000890B7 E109                       	smpsAlterNote       $09
000890B9 E701                       	dc.b	smpsNoAttack, $01
000890BB E105                       	smpsAlterNote       $05
000890BD E701                       	dc.b	smpsNoAttack, $01
000890BF E106                       	smpsAlterNote       $06
000890C1 E701                       	dc.b	smpsNoAttack, $01
000890C3 E10C                       	smpsAlterNote       $0C
000890C5 E701                       	dc.b	smpsNoAttack, $01
000890C7 E110                       	smpsAlterNote       $10
000890C9 E701                       	dc.b	smpsNoAttack, $01
000890CB E10C                       	smpsAlterNote       $0C
000890CD E701                       	dc.b	smpsNoAttack, $01
000890CF E109                       	smpsAlterNote       $09
000890D1 E701                       	dc.b	smpsNoAttack, $01
000890D3 E105                       	smpsAlterNote       $05
000890D5 E701                       	dc.b	smpsNoAttack, $01
000890D7 E109                       	smpsAlterNote       $09
000890D9 E701                       	dc.b	smpsNoAttack, $01
000890DB E10F                       	smpsAlterNote       $0F
000890DD E701                       	dc.b	smpsNoAttack, $01
000890DF E110                       	smpsAlterNote       $10
000890E1 E701                       	dc.b	smpsNoAttack, $01
000890E3 E10C                       	smpsAlterNote       $0C
000890E5 E701                       	dc.b	smpsNoAttack, $01
000890E7 E106                       	smpsAlterNote       $06
000890E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890ED E109                       	smpsAlterNote       $09
000890EF E701                       	dc.b	smpsNoAttack, $01
000890F1 E10F                       	smpsAlterNote       $0F
000890F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890F7 E109                       	smpsAlterNote       $09
000890F9 E701                       	dc.b	smpsNoAttack, $01
000890FB E106                       	smpsAlterNote       $06
000890FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089101 E10C                       	smpsAlterNote       $0C
00089103 E701                       	dc.b	smpsNoAttack, $01
00089105 E110                       	smpsAlterNote       $10
00089107 E701                       	dc.b	smpsNoAttack, $01
00089109 E10F                       	smpsAlterNote       $0F
0008910B E701                       	dc.b	smpsNoAttack, $01
0008910D E109                       	smpsAlterNote       $09
0008910F E701                       	dc.b	smpsNoAttack, $01
00089111 E105                       	smpsAlterNote       $05
00089113 E701                       	dc.b	smpsNoAttack, $01
00089115 E109                       	smpsAlterNote       $09
00089117 E701                       	dc.b	smpsNoAttack, $01
00089119 E10C                       	smpsAlterNote       $0C
0008911B E701                       	dc.b	smpsNoAttack, $01
0008911D E110                       	smpsAlterNote       $10
0008911F E701                       	dc.b	smpsNoAttack, $01
00089121 E10C                       	smpsAlterNote       $0C
00089123 E701                       	dc.b	smpsNoAttack, $01
00089125 E106                       	smpsAlterNote       $06
00089127 E701                       	dc.b	smpsNoAttack, $01
00089129 E105                       	smpsAlterNote       $05
0008912B E701                       	dc.b	smpsNoAttack, $01
0008912D E109                       	smpsAlterNote       $09
0008912F E701                       	dc.b	smpsNoAttack, $01
00089131 E10F                       	smpsAlterNote       $0F
00089133 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089137 E10C                       	smpsAlterNote       $0C
00089139 E701                       	dc.b	smpsNoAttack, $01
0008913B E106                       	smpsAlterNote       $06
0008913D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089141 E10C                       	smpsAlterNote       $0C
00089143 E701                       	dc.b	smpsNoAttack, $01
00089145 E10F                       	smpsAlterNote       $0F
00089147 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008914B E109                       	smpsAlterNote       $09
0008914D E701                       	dc.b	smpsNoAttack, $01
0008914F E105                       	smpsAlterNote       $05
00089151 E701                       	dc.b	smpsNoAttack, $01
00089153 E106                       	smpsAlterNote       $06
00089155 E701                       	dc.b	smpsNoAttack, $01
00089157 E10C                       	smpsAlterNote       $0C
00089159 E701                       	dc.b	smpsNoAttack, $01
0008915B E110                       	smpsAlterNote       $10
0008915D E701                       	dc.b	smpsNoAttack, $01
0008915F E10C                       	smpsAlterNote       $0C
00089161 E701                       	dc.b	smpsNoAttack, $01
00089163 E109                       	smpsAlterNote       $09
00089165 E701                       	dc.b	smpsNoAttack, $01
00089167 E105                       	smpsAlterNote       $05
00089169 E701                       	dc.b	smpsNoAttack, $01
0008916B E109                       	smpsAlterNote       $09
0008916D E701                       	dc.b	smpsNoAttack, $01
0008916F E10F                       	smpsAlterNote       $0F
00089171 E701                       	dc.b	smpsNoAttack, $01
00089173 E110                       	smpsAlterNote       $10
00089175 E701                       	dc.b	smpsNoAttack, $01
00089177 E10C                       	smpsAlterNote       $0C
00089179 E701                       	dc.b	smpsNoAttack, $01
0008917B E106                       	smpsAlterNote       $06
0008917D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089181 E109                       	smpsAlterNote       $09
00089183 E701                       	dc.b	smpsNoAttack, $01
00089185 E10F                       	smpsAlterNote       $0F
00089187 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008918B E109                       	smpsAlterNote       $09
0008918D E701                       	dc.b	smpsNoAttack, $01
0008918F E106                       	smpsAlterNote       $06
00089191 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089195 E10C                       	smpsAlterNote       $0C
00089197 E701                       	dc.b	smpsNoAttack, $01
00089199 E110                       	smpsAlterNote       $10
0008919B E701                       	dc.b	smpsNoAttack, $01
0008919D E10F                       	smpsAlterNote       $0F
0008919F E701                       	dc.b	smpsNoAttack, $01
000891A1 E109                       	smpsAlterNote       $09
000891A3 E701                       	dc.b	smpsNoAttack, $01
000891A5 E105                       	smpsAlterNote       $05
000891A7 E701                       	dc.b	smpsNoAttack, $01
000891A9 E109                       	smpsAlterNote       $09
000891AB E701                       	dc.b	smpsNoAttack, $01
000891AD E10C                       	smpsAlterNote       $0C
000891AF E701                       	dc.b	smpsNoAttack, $01
000891B1 E110                       	smpsAlterNote       $10
000891B3 E701                       	dc.b	smpsNoAttack, $01
000891B5 E10C                       	smpsAlterNote       $0C
000891B7 E701                       	dc.b	smpsNoAttack, $01
000891B9 E106                       	smpsAlterNote       $06
000891BB E701                       	dc.b	smpsNoAttack, $01
000891BD E105                       	smpsAlterNote       $05
000891BF E701                       	dc.b	smpsNoAttack, $01
000891C1 E109                       	smpsAlterNote       $09
000891C3 E701                       	dc.b	smpsNoAttack, $01
000891C5 E10F                       	smpsAlterNote       $0F
000891C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891CB E109                       	smpsAlterNote       $09
000891CD E701                       	dc.b	smpsNoAttack, $01
000891CF E106                       	smpsAlterNote       $06
000891D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891D5 E10C                       	smpsAlterNote       $0C
000891D7 E701                       	dc.b	smpsNoAttack, $01
000891D9 E110                       	smpsAlterNote       $10
000891DB E701                       	dc.b	smpsNoAttack, $01
000891DD E10F                       	smpsAlterNote       $0F
000891DF E701                       	dc.b	smpsNoAttack, $01
000891E1 E109                       	smpsAlterNote       $09
000891E3 E701                       	dc.b	smpsNoAttack, $01
000891E5 E105                       	smpsAlterNote       $05
000891E7 E701                       	dc.b	smpsNoAttack, $01
000891E9 E109                       	smpsAlterNote       $09
000891EB E701                       	dc.b	smpsNoAttack, $01
000891ED E10C                       	smpsAlterNote       $0C
000891EF E701                       	dc.b	smpsNoAttack, $01
000891F1 E110                       	smpsAlterNote       $10
000891F3 E701                       	dc.b	smpsNoAttack, $01
000891F5 E10C                       	smpsAlterNote       $0C
000891F7 E701                       	dc.b	smpsNoAttack, $01
000891F9 E106                       	smpsAlterNote       $06
000891FB E701                       	dc.b	smpsNoAttack, $01
000891FD E105                       	smpsAlterNote       $05
000891FF E701                       	dc.b	smpsNoAttack, $01
00089201 E109                       	smpsAlterNote       $09
00089203 E701                       	dc.b	smpsNoAttack, $01
00089205 E10F                       	smpsAlterNote       $0F
00089207 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008920B E10C                       	smpsAlterNote       $0C
0008920D E701                       	dc.b	smpsNoAttack, $01
0008920F E106                       	smpsAlterNote       $06
00089211 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089215 E10C                       	smpsAlterNote       $0C
00089217 E701                       	dc.b	smpsNoAttack, $01
00089219 E10F                       	smpsAlterNote       $0F
0008921B E701                       	dc.b	smpsNoAttack, $01
0008921D E110                       	smpsAlterNote       $10
0008921F 8001                       	dc.b	nRst, $01
00089221 E10F                       	smpsAlterNote       $0F
00089223 C604                       	dc.b	nA5, $04
00089225 E10D                       	smpsAlterNote       $0D
00089227 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008922D E10B                       	smpsAlterNote       $0B
0008922F BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
00089235 E10F                       	smpsAlterNote       $0F
00089237 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008923B E10D                       	smpsAlterNote       $0D
0008923D C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00089243 E10C                       	smpsAlterNote       $0C
00089245 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008924B E10A                       	smpsAlterNote       $0A
0008924D C904                       	dc.b	nC6, $04
0008924F E110                       	smpsAlterNote       $10
00089251 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00089255 E10F                       	smpsAlterNote       $0F
00089257 C604                       	dc.b	nA5, $04
00089259 E10D                       	smpsAlterNote       $0D
0008925B C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00089267 E109                       	smpsAlterNote       $09
00089269 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008926D E10F                       	smpsAlterNote       $0F
0008926F E701                       	dc.b	smpsNoAttack, $01
00089271 E112                       	smpsAlterNote       $12
00089273 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089277 E10C                       	smpsAlterNote       $0C
00089279 E701                       	dc.b	smpsNoAttack, $01
0008927B E108                       	smpsAlterNote       $08
0008927D E701                       	dc.b	smpsNoAttack, $01
0008927F E109                       	smpsAlterNote       $09
00089281 E701                       	dc.b	smpsNoAttack, $01
00089283 E10F                       	smpsAlterNote       $0F
00089285 E701                       	dc.b	smpsNoAttack, $01
00089287 E113                       	smpsAlterNote       $13
00089289 E701                       	dc.b	smpsNoAttack, $01
0008928B E10D                       	smpsAlterNote       $0D
0008928D C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00089293 E10C                       	smpsAlterNote       $0C
00089295 C10D                       	dc.b	nE5, $0D
00089297 E109                       	smpsAlterNote       $09
00089299 E701                       	dc.b	smpsNoAttack, $01
0008929B E106                       	smpsAlterNote       $06
0008929D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892A1 E10C                       	smpsAlterNote       $0C
000892A3 E701                       	dc.b	smpsNoAttack, $01
000892A5 E110                       	smpsAlterNote       $10
000892A7 E701                       	dc.b	smpsNoAttack, $01
000892A9 E10F                       	smpsAlterNote       $0F
000892AB E701                       	dc.b	smpsNoAttack, $01
000892AD E109                       	smpsAlterNote       $09
000892AF E701                       	dc.b	smpsNoAttack, $01
000892B1 E105                       	smpsAlterNote       $05
000892B3 E701                       	dc.b	smpsNoAttack, $01
000892B5 E109                       	smpsAlterNote       $09
000892B7 E701                       	dc.b	smpsNoAttack, $01
000892B9 E10C                       	smpsAlterNote       $0C
000892BB E701                       	dc.b	smpsNoAttack, $01
000892BD E110                       	smpsAlterNote       $10
000892BF E701                       	dc.b	smpsNoAttack, $01
000892C1 E10C                       	smpsAlterNote       $0C
000892C3 E701                       	dc.b	smpsNoAttack, $01
000892C5 E106                       	smpsAlterNote       $06
000892C7 E701                       	dc.b	smpsNoAttack, $01
000892C9 E105                       	smpsAlterNote       $05
000892CB E701                       	dc.b	smpsNoAttack, $01
000892CD E109                       	smpsAlterNote       $09
000892CF E701                       	dc.b	smpsNoAttack, $01
000892D1 E10F                       	smpsAlterNote       $0F
000892D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892D7 E10C                       	smpsAlterNote       $0C
000892D9 E701                       	dc.b	smpsNoAttack, $01
000892DB E106                       	smpsAlterNote       $06
000892DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892E1 E10C                       	smpsAlterNote       $0C
000892E3 E701                       	dc.b	smpsNoAttack, $01
000892E5 E10F                       	smpsAlterNote       $0F
000892E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892EB E109                       	smpsAlterNote       $09
000892ED E701                       	dc.b	smpsNoAttack, $01
000892EF E105                       	smpsAlterNote       $05
000892F1 E701                       	dc.b	smpsNoAttack, $01
000892F3 E106                       	smpsAlterNote       $06
000892F5 E701                       	dc.b	smpsNoAttack, $01
000892F7 E10C                       	smpsAlterNote       $0C
000892F9 E701                       	dc.b	smpsNoAttack, $01
000892FB E110                       	smpsAlterNote       $10
000892FD E701                       	dc.b	smpsNoAttack, $01
000892FF E10C                       	smpsAlterNote       $0C
00089301 E701                       	dc.b	smpsNoAttack, $01
00089303 E109                       	smpsAlterNote       $09
00089305 E701                       	dc.b	smpsNoAttack, $01
00089307 E105                       	smpsAlterNote       $05
00089309 E701                       	dc.b	smpsNoAttack, $01
0008930B E109                       	smpsAlterNote       $09
0008930D E701                       	dc.b	smpsNoAttack, $01
0008930F E10F                       	smpsAlterNote       $0F
00089311 E701                       	dc.b	smpsNoAttack, $01
00089313 E110                       	smpsAlterNote       $10
00089315 E701                       	dc.b	smpsNoAttack, $01
00089317 E10C                       	smpsAlterNote       $0C
00089319 E701                       	dc.b	smpsNoAttack, $01
0008931B E106                       	smpsAlterNote       $06
0008931D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089321 E109                       	smpsAlterNote       $09
00089323 E701                       	dc.b	smpsNoAttack, $01
00089325 E10F                       	smpsAlterNote       $0F
00089327 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008932B E109                       	smpsAlterNote       $09
0008932D E701                       	dc.b	smpsNoAttack, $01
0008932F E106                       	smpsAlterNote       $06
00089331 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089335 E10C                       	smpsAlterNote       $0C
00089337 E701                       	dc.b	smpsNoAttack, $01
00089339 E110                       	smpsAlterNote       $10
0008933B E701                       	dc.b	smpsNoAttack, $01
0008933D E10F                       	smpsAlterNote       $0F
0008933F E701                       	dc.b	smpsNoAttack, $01
00089341 E109                       	smpsAlterNote       $09
00089343 E701                       	dc.b	smpsNoAttack, $01
00089345 E105                       	smpsAlterNote       $05
00089347 E701                       	dc.b	smpsNoAttack, $01
00089349 E109                       	smpsAlterNote       $09
0008934B E701                       	dc.b	smpsNoAttack, $01
0008934D E10F                       	smpsAlterNote       $0F
0008934F E701                       	dc.b	smpsNoAttack, $01
00089351 E110                       	smpsAlterNote       $10
00089353 E701                       	dc.b	smpsNoAttack, $01
00089355 E10C                       	smpsAlterNote       $0C
00089357 E701                       	dc.b	smpsNoAttack, $01
00089359 E106                       	smpsAlterNote       $06
0008935B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008935F E109                       	smpsAlterNote       $09
00089361 E701                       	dc.b	smpsNoAttack, $01
00089363 E10F                       	smpsAlterNote       $0F
00089365 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089369 E109                       	smpsAlterNote       $09
0008936B E701                       	dc.b	smpsNoAttack, $01
0008936D E106                       	smpsAlterNote       $06
0008936F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089373 E10C                       	smpsAlterNote       $0C
00089375 E701                       	dc.b	smpsNoAttack, $01
00089377 E110                       	smpsAlterNote       $10
00089379 E701                       	dc.b	smpsNoAttack, $01
0008937B E10F                       	smpsAlterNote       $0F
0008937D E701                       	dc.b	smpsNoAttack, $01
0008937F E109                       	smpsAlterNote       $09
00089381 E701                       	dc.b	smpsNoAttack, $01
00089383 E105                       	smpsAlterNote       $05
00089385 E701                       	dc.b	smpsNoAttack, $01
00089387 E109                       	smpsAlterNote       $09
00089389 E701                       	dc.b	smpsNoAttack, $01
0008938B E10C                       	smpsAlterNote       $0C
0008938D E701                       	dc.b	smpsNoAttack, $01
0008938F E110                       	smpsAlterNote       $10
00089391 E701                       	dc.b	smpsNoAttack, $01
00089393 E10C                       	smpsAlterNote       $0C
00089395 E701                       	dc.b	smpsNoAttack, $01
00089397 E106                       	smpsAlterNote       $06
00089399 E701                       	dc.b	smpsNoAttack, $01
0008939B E105                       	smpsAlterNote       $05
0008939D E701                       	dc.b	smpsNoAttack, $01
0008939F E109                       	smpsAlterNote       $09
000893A1 E701                       	dc.b	smpsNoAttack, $01
000893A3 E10F                       	smpsAlterNote       $0F
000893A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893A9 E10C                       	smpsAlterNote       $0C
000893AB E701                       	dc.b	smpsNoAttack, $01
000893AD E106                       	smpsAlterNote       $06
000893AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893B3 E10C                       	smpsAlterNote       $0C
000893B5 E701                       	dc.b	smpsNoAttack, $01
000893B7 E10F                       	smpsAlterNote       $0F
000893B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893BD E109                       	smpsAlterNote       $09
000893BF E701                       	dc.b	smpsNoAttack, $01
000893C1 E105                       	smpsAlterNote       $05
000893C3 E701                       	dc.b	smpsNoAttack, $01
000893C5 E106                       	smpsAlterNote       $06
000893C7 E701                       	dc.b	smpsNoAttack, $01
000893C9 E10C                       	smpsAlterNote       $0C
000893CB E701                       	dc.b	smpsNoAttack, $01
000893CD E110                       	smpsAlterNote       $10
000893CF E701                       	dc.b	smpsNoAttack, $01
000893D1 E10C                       	smpsAlterNote       $0C
000893D3 E701                       	dc.b	smpsNoAttack, $01
000893D5 E109                       	smpsAlterNote       $09
000893D7 E701                       	dc.b	smpsNoAttack, $01
000893D9 E105                       	smpsAlterNote       $05
000893DB E701                       	dc.b	smpsNoAttack, $01
000893DD E109                       	smpsAlterNote       $09
000893DF E701                       	dc.b	smpsNoAttack, $01
000893E1 E10F                       	smpsAlterNote       $0F
000893E3 E701                       	dc.b	smpsNoAttack, $01
000893E5 E110                       	smpsAlterNote       $10
000893E7 E701                       	dc.b	smpsNoAttack, $01
000893E9 E10C                       	smpsAlterNote       $0C
000893EB E701                       	dc.b	smpsNoAttack, $01
000893ED E106                       	smpsAlterNote       $06
000893EF E701                       	dc.b	smpsNoAttack, $01
000893F1 E10B                       	smpsAlterNote       $0B
000893F3 BF02                       	dc.b	nD5, $02
000893F5 E10C                       	smpsAlterNote       $0C
000893F7 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
000893FD E109                       	smpsAlterNote       $09
000893FF E701                       	dc.b	smpsNoAttack, $01
00089401 E105                       	smpsAlterNote       $05
00089403 E701                       	dc.b	smpsNoAttack, $01
00089405 E109                       	smpsAlterNote       $09
00089407 E701                       	dc.b	smpsNoAttack, $01
00089409 E10F                       	smpsAlterNote       $0F
0008940B E701                       	dc.b	smpsNoAttack, $01
0008940D E110                       	smpsAlterNote       $10
0008940F E701                       	dc.b	smpsNoAttack, $01
00089411 E10C                       	smpsAlterNote       $0C
00089413 E701                       	dc.b	smpsNoAttack, $01
00089415 E106                       	smpsAlterNote       $06
00089417 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008941B E109                       	smpsAlterNote       $09
0008941D E701                       	dc.b	smpsNoAttack, $01
0008941F E10F                       	smpsAlterNote       $0F
00089421 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089425 E109                       	smpsAlterNote       $09
00089427 E701                       	dc.b	smpsNoAttack, $01
00089429 E106                       	smpsAlterNote       $06
0008942B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008942F E10C                       	smpsAlterNote       $0C
00089431 E701                       	dc.b	smpsNoAttack, $01
00089433 E110                       	smpsAlterNote       $10
00089435 E701                       	dc.b	smpsNoAttack, $01
00089437 E10F                       	smpsAlterNote       $0F
00089439 E701                       	dc.b	smpsNoAttack, $01
0008943B E109                       	smpsAlterNote       $09
0008943D E701                       	dc.b	smpsNoAttack, $01
0008943F E105                       	smpsAlterNote       $05
00089441 E701                       	dc.b	smpsNoAttack, $01
00089443 E109                       	smpsAlterNote       $09
00089445 E701                       	dc.b	smpsNoAttack, $01
00089447 E10C                       	smpsAlterNote       $0C
00089449 E701                       	dc.b	smpsNoAttack, $01
0008944B E110                       	smpsAlterNote       $10
0008944D E701                       	dc.b	smpsNoAttack, $01
0008944F E10C                       	smpsAlterNote       $0C
00089451 E701                       	dc.b	smpsNoAttack, $01
00089453 E106                       	smpsAlterNote       $06
00089455 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089459 E10D                       	smpsAlterNote       $0D
0008945B C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
00089463 E10C                       	smpsAlterNote       $0C
00089465 C10D                       	dc.b	nE5, $0D
00089467 E106                       	smpsAlterNote       $06
00089469 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008946D E109                       	smpsAlterNote       $09
0008946F E701                       	dc.b	smpsNoAttack, $01
00089471 E10F                       	smpsAlterNote       $0F
00089473 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089477 E109                       	smpsAlterNote       $09
00089479 E701                       	dc.b	smpsNoAttack, $01
0008947B E106                       	smpsAlterNote       $06
0008947D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089481 E10C                       	smpsAlterNote       $0C
00089483 E701                       	dc.b	smpsNoAttack, $01
00089485 E110                       	smpsAlterNote       $10
00089487 E701                       	dc.b	smpsNoAttack, $01
00089489 E10F                       	smpsAlterNote       $0F
0008948B E701                       	dc.b	smpsNoAttack, $01
0008948D E109                       	smpsAlterNote       $09
0008948F E701                       	dc.b	smpsNoAttack, $01
00089491 E105                       	smpsAlterNote       $05
00089493 E701                       	dc.b	smpsNoAttack, $01
00089495 E106                       	smpsAlterNote       $06
00089497 800F                       	dc.b	nRst, $0F
0008949B E6FF                       	smpsAlterVol        $FF
0008949D E10F                       	smpsAlterNote       $0F
0008949F BA01                       	dc.b	nA4, $01
000894A1 E110                       	smpsAlterNote       $10
000894A3 BB02                       	dc.b	nBb4, $02
000894A5 E10F                       	smpsAlterNote       $0F
000894A7 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
000894AD E10B                       	smpsAlterNote       $0B
000894AF BF03 8001                  	dc.b	nD5, $03, nRst, $01
000894B3 E10C                       	smpsAlterNote       $0C
000894B5 C103                       	dc.b	nE5, $03
000894B7 E10D                       	smpsAlterNote       $0D
000894B9 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000894C3 E10B                       	smpsAlterNote       $0B
000894C5 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
000894C9 E104                       	smpsAlterNote       $04
000894CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894CF E10A                       	smpsAlterNote       $0A
000894D1 E701                       	dc.b	smpsNoAttack, $01
000894D3 E10D                       	smpsAlterNote       $0D
000894D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894D9 E107                       	smpsAlterNote       $07
000894DB E701                       	dc.b	smpsNoAttack, $01
000894DD E104                       	smpsAlterNote       $04
000894DF 8001                       	dc.b	nRst, $01
000894E1 E110                       	smpsAlterNote       $10
000894E3 C703                       	dc.b	nBb5, $03
000894E5 E10F                       	smpsAlterNote       $0F
000894E7 C603 8001                  	dc.b	nA5, $03, nRst, $01
000894EB E10D                       	smpsAlterNote       $0D
000894ED C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000894F1 E10C                       	smpsAlterNote       $0C
000894F3 E701                       	dc.b	smpsNoAttack, $01
000894F5 E108                       	smpsAlterNote       $08
000894F7 E701                       	dc.b	smpsNoAttack, $01
000894F9 E109                       	smpsAlterNote       $09
000894FB E701                       	dc.b	smpsNoAttack, $01
000894FD E10F                       	smpsAlterNote       $0F
000894FF E701                       	dc.b	smpsNoAttack, $01
00089501 E113                       	smpsAlterNote       $13
00089503 E701                       	dc.b	smpsNoAttack, $01
00089505 E10F                       	smpsAlterNote       $0F
00089507 E701                       	dc.b	smpsNoAttack, $01
00089509 E10C                       	smpsAlterNote       $0C
0008950B E701                       	dc.b	smpsNoAttack, $01
0008950D E108                       	smpsAlterNote       $08
0008950F E701                       	dc.b	smpsNoAttack, $01
00089511 E10C                       	smpsAlterNote       $0C
00089513 E701                       	dc.b	smpsNoAttack, $01
00089515 E112                       	smpsAlterNote       $12
00089517 E701                       	dc.b	smpsNoAttack, $01
00089519 E113                       	smpsAlterNote       $13
0008951B E701                       	dc.b	smpsNoAttack, $01
0008951D E10F                       	smpsAlterNote       $0F
0008951F E701                       	dc.b	smpsNoAttack, $01
00089521 E109                       	smpsAlterNote       $09
00089523 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089527 E10C                       	smpsAlterNote       $0C
00089529 E701                       	dc.b	smpsNoAttack, $01
0008952B E112                       	smpsAlterNote       $12
0008952D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089531 E10C                       	smpsAlterNote       $0C
00089533 E701                       	dc.b	smpsNoAttack, $01
00089535 E109                       	smpsAlterNote       $09
00089537 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008953B E10F                       	smpsAlterNote       $0F
0008953D E701                       	dc.b	smpsNoAttack, $01
0008953F E113                       	smpsAlterNote       $13
00089541 E701                       	dc.b	smpsNoAttack, $01
00089543 E112                       	smpsAlterNote       $12
00089545 E701                       	dc.b	smpsNoAttack, $01
00089547 E10C                       	smpsAlterNote       $0C
00089549 E701                       	dc.b	smpsNoAttack, $01
0008954B E108                       	smpsAlterNote       $08
0008954D E701                       	dc.b	smpsNoAttack, $01
0008954F E10C                       	smpsAlterNote       $0C
00089551 E701                       	dc.b	smpsNoAttack, $01
00089553 E10F                       	smpsAlterNote       $0F
00089555 E701                       	dc.b	smpsNoAttack, $01
00089557 E113                       	smpsAlterNote       $13
00089559 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008955D E10B                       	smpsAlterNote       $0B
0008955F BF03                       	dc.b	nD5, $03
00089561 E10C                       	smpsAlterNote       $0C
00089563 C103 8001                  	dc.b	nE5, $03, nRst, $01
00089567 E10D                       	smpsAlterNote       $0D
00089569 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00089573 E10B                       	smpsAlterNote       $0B
00089575 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00089581 E110                       	smpsAlterNote       $10
00089583 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00089587 E10F                       	smpsAlterNote       $0F
00089589 C604                       	dc.b	nA5, $04
0008958B E10D                       	smpsAlterNote       $0D
0008958D C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00089593 E109                       	smpsAlterNote       $09
00089595 E701                       	dc.b	smpsNoAttack, $01
00089597 E108                       	smpsAlterNote       $08
00089599 E701                       	dc.b	smpsNoAttack, $01
0008959B E10C                       	smpsAlterNote       $0C
0008959D E701                       	dc.b	smpsNoAttack, $01
0008959F E112                       	smpsAlterNote       $12
000895A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895A5 E10F                       	smpsAlterNote       $0F
000895A7 E701                       	dc.b	smpsNoAttack, $01
000895A9 E109                       	smpsAlterNote       $09
000895AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895AF E10F                       	smpsAlterNote       $0F
000895B1 E701                       	dc.b	smpsNoAttack, $01
000895B3 E112                       	smpsAlterNote       $12
000895B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895B9 E10C                       	smpsAlterNote       $0C
000895BB E701                       	dc.b	smpsNoAttack, $01
000895BD E108                       	smpsAlterNote       $08
000895BF E701                       	dc.b	smpsNoAttack, $01
000895C1 E109                       	smpsAlterNote       $09
000895C3 E701                       	dc.b	smpsNoAttack, $01
000895C5 E10F                       	smpsAlterNote       $0F
000895C7 E701                       	dc.b	smpsNoAttack, $01
000895C9 E113                       	smpsAlterNote       $13
000895CB E701                       	dc.b	smpsNoAttack, $01
000895CD E10F                       	smpsAlterNote       $0F
000895CF E701                       	dc.b	smpsNoAttack, $01
000895D1 E10C                       	smpsAlterNote       $0C
000895D3 E701                       	dc.b	smpsNoAttack, $01
000895D5 E108                       	smpsAlterNote       $08
000895D7 E701                       	dc.b	smpsNoAttack, $01
000895D9 E10C                       	smpsAlterNote       $0C
000895DB E701                       	dc.b	smpsNoAttack, $01
000895DD E112                       	smpsAlterNote       $12
000895DF E701                       	dc.b	smpsNoAttack, $01
000895E1 E113                       	smpsAlterNote       $13
000895E3 E701                       	dc.b	smpsNoAttack, $01
000895E5 E10F                       	smpsAlterNote       $0F
000895E7 E701                       	dc.b	smpsNoAttack, $01
000895E9 E109                       	smpsAlterNote       $09
000895EB E701                       	dc.b	smpsNoAttack, $01
000895ED E10D                       	smpsAlterNote       $0D
000895EF C402                       	dc.b	nG5, $02
000895F1 E10F                       	smpsAlterNote       $0F
000895F3 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
000895FD E10D                       	smpsAlterNote       $0D
000895FF C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00089605 E10B                       	smpsAlterNote       $0B
00089607 BF0D                       	dc.b	nD5, $0D
00089609 E108                       	smpsAlterNote       $08
0008960B E701                       	dc.b	smpsNoAttack, $01
0008960D E104                       	smpsAlterNote       $04
0008960F E701                       	dc.b	smpsNoAttack, $01
00089611 E105                       	smpsAlterNote       $05
00089613 E701                       	dc.b	smpsNoAttack, $01
00089615 E10B                       	smpsAlterNote       $0B
00089617 E701                       	dc.b	smpsNoAttack, $01
00089619 E10F                       	smpsAlterNote       $0F
0008961B E701                       	dc.b	smpsNoAttack, $01
0008961D E10B                       	smpsAlterNote       $0B
0008961F E701                       	dc.b	smpsNoAttack, $01
00089621 E108                       	smpsAlterNote       $08
00089623 E701                       	dc.b	smpsNoAttack, $01
00089625 E104                       	smpsAlterNote       $04
00089627 E701                       	dc.b	smpsNoAttack, $01
00089629 E108                       	smpsAlterNote       $08
0008962B E701                       	dc.b	smpsNoAttack, $01
0008962D E10E                       	smpsAlterNote       $0E
0008962F E701                       	dc.b	smpsNoAttack, $01
00089631 E10F                       	smpsAlterNote       $0F
00089633 E701                       	dc.b	smpsNoAttack, $01
00089635 E10C                       	smpsAlterNote       $0C
00089637 C101                       	dc.b	nE5, $01
00089639 E10D                       	smpsAlterNote       $0D
0008963B C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00089643 E10F                       	smpsAlterNote       $0F
00089645 C607                       	dc.b	nA5, $07
00089647 E10C                       	smpsAlterNote       $0C
00089649 CD07                       	dc.b	nE6, $07
0008964B E10D                       	smpsAlterNote       $0D
0008964D CE06 8001                  	dc.b	nF6, $06, nRst, $01
00089651 E10C                       	smpsAlterNote       $0C
00089653 CD03                       	dc.b	nE6, $03
00089655 E10A                       	smpsAlterNote       $0A
00089657 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008965B E10D                       	smpsAlterNote       $0D
0008965D C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00089663 E10A                       	smpsAlterNote       $0A
00089665 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089669 E110                       	smpsAlterNote       $10
0008966B E701                       	dc.b	smpsNoAttack, $01
0008966D E114                       	smpsAlterNote       $14
0008966F E701                       	dc.b	smpsNoAttack, $01
00089671 E113                       	smpsAlterNote       $13
00089673 E701                       	dc.b	smpsNoAttack, $01
00089675 E10D                       	smpsAlterNote       $0D
00089677 E701                       	dc.b	smpsNoAttack, $01
00089679 E109                       	smpsAlterNote       $09
0008967B E701                       	dc.b	smpsNoAttack, $01
0008967D E10D                       	smpsAlterNote       $0D
0008967F E701                       	dc.b	smpsNoAttack, $01
00089681 E110                       	smpsAlterNote       $10
00089683 E701                       	dc.b	smpsNoAttack, $01
00089685 E114                       	smpsAlterNote       $14
00089687 E701                       	dc.b	smpsNoAttack, $01
00089689 E10F                       	smpsAlterNote       $0F
0008968B C607                       	dc.b	nA5, $07
0008968D E10D                       	smpsAlterNote       $0D
0008968F C40D                       	dc.b	nG5, $0D
00089691 E10A                       	smpsAlterNote       $0A
00089693 E701                       	dc.b	smpsNoAttack, $01
00089695 E106                       	smpsAlterNote       $06
00089697 E701                       	dc.b	smpsNoAttack, $01
00089699 E10A                       	smpsAlterNote       $0A
0008969B E701                       	dc.b	smpsNoAttack, $01
0008969D E10D                       	smpsAlterNote       $0D
0008969F E701                       	dc.b	smpsNoAttack, $01
000896A1 E111                       	smpsAlterNote       $11
000896A3 E701                       	dc.b	smpsNoAttack, $01
000896A5 E10D                       	smpsAlterNote       $0D
000896A7 E701                       	dc.b	smpsNoAttack, $01
000896A9 E107                       	smpsAlterNote       $07
000896AB E701                       	dc.b	smpsNoAttack, $01
000896AD E106                       	smpsAlterNote       $06
000896AF E701                       	dc.b	smpsNoAttack, $01
000896B1 E10A                       	smpsAlterNote       $0A
000896B3 E701                       	dc.b	smpsNoAttack, $01
000896B5 E110                       	smpsAlterNote       $10
000896B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896BB E10D                       	smpsAlterNote       $0D
000896BD E701                       	dc.b	smpsNoAttack, $01
000896BF E107                       	smpsAlterNote       $07
000896C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896C5 E10F                       	smpsAlterNote       $0F
000896C7 C60E                       	dc.b	nA5, $0E
000896C9 E109                       	smpsAlterNote       $09
000896CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896CF E10F                       	smpsAlterNote       $0F
000896D1 E701                       	dc.b	smpsNoAttack, $01
000896D3 E112                       	smpsAlterNote       $12
000896D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896D9 E10C                       	smpsAlterNote       $0C
000896DB E701                       	dc.b	smpsNoAttack, $01
000896DD E108                       	smpsAlterNote       $08
000896DF E701                       	dc.b	smpsNoAttack, $01
000896E1 E109                       	smpsAlterNote       $09
000896E3 E701                       	dc.b	smpsNoAttack, $01
000896E5 E10F                       	smpsAlterNote       $0F
000896E7 E701                       	dc.b	smpsNoAttack, $01
000896E9 E113                       	smpsAlterNote       $13
000896EB E701                       	dc.b	smpsNoAttack, $01
000896ED E10F                       	smpsAlterNote       $0F
000896EF E701                       	dc.b	smpsNoAttack, $01
000896F1 E10C                       	smpsAlterNote       $0C
000896F3 E701                       	dc.b	smpsNoAttack, $01
000896F5 E108                       	smpsAlterNote       $08
000896F7 E701                       	dc.b	smpsNoAttack, $01
000896F9 E109                       	smpsAlterNote       $09
000896FB 8001                       	dc.b	nRst, $01
000896FD E110                       	smpsAlterNote       $10
000896FF C70D                       	dc.b	nBb5, $0D
00089701 E10D                       	smpsAlterNote       $0D
00089703 E701                       	dc.b	smpsNoAttack, $01
00089705 E109                       	smpsAlterNote       $09
00089707 E701                       	dc.b	smpsNoAttack, $01
00089709 E10D                       	smpsAlterNote       $0D
0008970B E701                       	dc.b	smpsNoAttack, $01
0008970D E113                       	smpsAlterNote       $13
0008970F E701                       	dc.b	smpsNoAttack, $01
00089711 E114                       	smpsAlterNote       $14
00089713 E701                       	dc.b	smpsNoAttack, $01
00089715 E110                       	smpsAlterNote       $10
00089717 E701                       	dc.b	smpsNoAttack, $01
00089719 E10A                       	smpsAlterNote       $0A
0008971B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008971F E10D                       	smpsAlterNote       $0D
00089721 E701                       	dc.b	smpsNoAttack, $01
00089723 E113                       	smpsAlterNote       $13
00089725 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089729 E10D                       	smpsAlterNote       $0D
0008972B E701                       	dc.b	smpsNoAttack, $01
0008972D E10A                       	smpsAlterNote       $0A
0008972F E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00089739 E10B                       	smpsAlterNote       $0B
0008973B 8001                       	dc.b	nRst, $01
0008973D E10C                       	smpsAlterNote       $0C
0008973F CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00089743 E10B                       	smpsAlterNote       $0B
00089745 CB0D                       	dc.b	nD6, $0D
00089747 E105                       	smpsAlterNote       $05
00089749 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008974D E108                       	smpsAlterNote       $08
0008974F E701                       	dc.b	smpsNoAttack, $01
00089751 E10E                       	smpsAlterNote       $0E
00089753 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089757 E108                       	smpsAlterNote       $08
00089759 E701                       	dc.b	smpsNoAttack, $01
0008975B E105                       	smpsAlterNote       $05
0008975D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089761 E10B                       	smpsAlterNote       $0B
00089763 E701                       	dc.b	smpsNoAttack, $01
00089765 E10F                       	smpsAlterNote       $0F
00089767 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008976B E10C                       	smpsAlterNote       $0C
0008976D CC0D                       	dc.b	nEb6, $0D
0008976F E106                       	smpsAlterNote       $06
00089771 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089775 E109                       	smpsAlterNote       $09
00089777 E701                       	dc.b	smpsNoAttack, $01
00089779 E10C                       	smpsAlterNote       $0C
0008977B 8001                       	dc.b	nRst, $01
0008977D E10A                       	smpsAlterNote       $0A
0008977F C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008978B CB0E                       	dc.b	nD6, $0E
0008978D E105                       	smpsAlterNote       $05
0008978F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089793 E10B                       	smpsAlterNote       $0B
00089795 E701                       	dc.b	smpsNoAttack, $01
00089797 E10E                       	smpsAlterNote       $0E
00089799 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008979D E108                       	smpsAlterNote       $08
0008979F E701                       	dc.b	smpsNoAttack, $01
000897A1 E104                       	smpsAlterNote       $04
000897A3 E701                       	dc.b	smpsNoAttack, $01
000897A5 E105                       	smpsAlterNote       $05
000897A7 E701                       	dc.b	smpsNoAttack, $01
000897A9 E10B                       	smpsAlterNote       $0B
000897AB E701                       	dc.b	smpsNoAttack, $01
000897AD E10F                       	smpsAlterNote       $0F
000897AF E701                       	dc.b	smpsNoAttack, $01
000897B1 E10D                       	smpsAlterNote       $0D
000897B3 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
000897B7 E10C                       	smpsAlterNote       $0C
000897B9 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
000897BD E10A                       	smpsAlterNote       $0A
000897BF C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
000897CB CB0D                       	dc.b	nD6, $0D
000897CD E108                       	smpsAlterNote       $08
000897CF E701                       	dc.b	smpsNoAttack, $01
000897D1 E104                       	smpsAlterNote       $04
000897D3 E701                       	dc.b	smpsNoAttack, $01
000897D5 E105                       	smpsAlterNote       $05
000897D7 E701                       	dc.b	smpsNoAttack, $01
000897D9 E10B                       	smpsAlterNote       $0B
000897DB E701                       	dc.b	smpsNoAttack, $01
000897DD E10F                       	smpsAlterNote       $0F
000897DF E701                       	dc.b	smpsNoAttack, $01
000897E1 E10B                       	smpsAlterNote       $0B
000897E3 E701                       	dc.b	smpsNoAttack, $01
000897E5 E108                       	smpsAlterNote       $08
000897E7 E701                       	dc.b	smpsNoAttack, $01
000897E9 E104                       	smpsAlterNote       $04
000897EB E701                       	dc.b	smpsNoAttack, $01
000897ED E108                       	smpsAlterNote       $08
000897EF E701                       	dc.b	smpsNoAttack, $01
000897F1 E10E                       	smpsAlterNote       $0E
000897F3 E701                       	dc.b	smpsNoAttack, $01
000897F5 E10F                       	smpsAlterNote       $0F
000897F7 E701                       	dc.b	smpsNoAttack, $01
000897F9 E10C                       	smpsAlterNote       $0C
000897FB CC0D                       	dc.b	nEb6, $0D
000897FD E109                       	smpsAlterNote       $09
000897FF E701                       	dc.b	smpsNoAttack, $01
00089801 E105                       	smpsAlterNote       $05
00089803 E701                       	dc.b	smpsNoAttack, $01
00089805 E106                       	smpsAlterNote       $06
00089807 E701                       	dc.b	smpsNoAttack, $01
00089809 E10C                       	smpsAlterNote       $0C
0008980B E701                       	dc.b	smpsNoAttack, $01
0008980D E10A                       	smpsAlterNote       $0A
0008980F C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008981B CB0D                       	dc.b	nD6, $0D
0008981D E108                       	smpsAlterNote       $08
0008981F E701                       	dc.b	smpsNoAttack, $01
00089821 E104                       	smpsAlterNote       $04
00089823 E701                       	dc.b	smpsNoAttack, $01
00089825 E108                       	smpsAlterNote       $08
00089827 E701                       	dc.b	smpsNoAttack, $01
00089829 E10B                       	smpsAlterNote       $0B
0008982B E701                       	dc.b	smpsNoAttack, $01
0008982D E10F                       	smpsAlterNote       $0F
0008982F E701                       	dc.b	smpsNoAttack, $01
00089831 E10B                       	smpsAlterNote       $0B
00089833 E701                       	dc.b	smpsNoAttack, $01
00089835 E105                       	smpsAlterNote       $05
00089837 E701                       	dc.b	smpsNoAttack, $01
00089839 E104                       	smpsAlterNote       $04
0008983B E701                       	dc.b	smpsNoAttack, $01
0008983D E108                       	smpsAlterNote       $08
0008983F E701                       	dc.b	smpsNoAttack, $01
00089841 E10E                       	smpsAlterNote       $0E
00089843 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089847 E10B                       	smpsAlterNote       $0B
00089849 E701                       	dc.b	smpsNoAttack, $01
0008984B E105                       	smpsAlterNote       $05
0008984D E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00089855 03                         	dc.b	$03
00089856 E601                       	smpsAlterVol        $01
00089858 F6F1 D1                    	smpsJump            music84_Jump01
0008985B                            
0008985B                            ; FM5 Data
0008985B                            music84_FM5:
0008985D E080                       	smpsPan             panLeft, $00
0008985F 8003                       	dc.b	nRst, $03
00089861 E10D                       	smpsAlterNote       $0D
00089863 C203 8008                  	dc.b	nF5, $03, nRst, $08
00089867 E10C                       	smpsAlterNote       $0C
00089869 C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008986D E10F                       	smpsAlterNote       $0F
0008986F BA03 8006                  	dc.b	nA4, $03, nRst, $06
00089875 E6FE                       	smpsAlterVol        $FE
00089877 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008987D E10D                       	smpsAlterNote       $0D
0008987F C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00089885 E10C                       	smpsAlterNote       $0C
00089887 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008988B E10A                       	smpsAlterNote       $0A
0008988D BD01 8001                  	dc.b	nC5, $01, nRst, $01
00089893 03                         	dc.b	$03
00089894                            
00089894                            music84_Jump00:
00089894 8004                       	dc.b	nRst, $04
00089896 E602                       	smpsAlterVol        $02
00089898 E10D                       	smpsAlterNote       $0D
0008989A B60D                       	dc.b	nF4, $0D
0008989C E107                       	smpsAlterNote       $07
0008989E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898A2 E10A                       	smpsAlterNote       $0A
000898A4 E701                       	dc.b	smpsNoAttack, $01
000898A6 E110                       	smpsAlterNote       $10
000898A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898AC E10A                       	smpsAlterNote       $0A
000898AE E701                       	dc.b	smpsNoAttack, $01
000898B0 E107                       	smpsAlterNote       $07
000898B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898B6 E10D                       	smpsAlterNote       $0D
000898B8 E701                       	dc.b	smpsNoAttack, $01
000898BA E111                       	smpsAlterNote       $11
000898BC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000898C0 E10D                       	smpsAlterNote       $0D
000898C2 B80D                       	dc.b	nG4, $0D
000898C4 E107                       	smpsAlterNote       $07
000898C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898CA E10A                       	smpsAlterNote       $0A
000898CC E701                       	dc.b	smpsNoAttack, $01
000898CE E110                       	smpsAlterNote       $10
000898D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898D4 E10A                       	smpsAlterNote       $0A
000898D6 E701                       	dc.b	smpsNoAttack, $01
000898D8 E107                       	smpsAlterNote       $07
000898DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898DE E10D                       	smpsAlterNote       $0D
000898E0 E701                       	dc.b	smpsNoAttack, $01
000898E2 E111                       	smpsAlterNote       $11
000898E4 E701                       	dc.b	smpsNoAttack, $01
000898E6 E110                       	smpsAlterNote       $10
000898E8 E701                       	dc.b	smpsNoAttack, $01
000898EA E10A                       	smpsAlterNote       $0A
000898EC E701                       	dc.b	smpsNoAttack, $01
000898EE E106                       	smpsAlterNote       $06
000898F0 E701                       	dc.b	smpsNoAttack, $01
000898F2 E10A                       	smpsAlterNote       $0A
000898F4 E701                       	dc.b	smpsNoAttack, $01
000898F6 E10D                       	smpsAlterNote       $0D
000898F8 E701                       	dc.b	smpsNoAttack, $01
000898FA E111                       	smpsAlterNote       $11
000898FC E701                       	dc.b	smpsNoAttack, $01
000898FE E10D                       	smpsAlterNote       $0D
00089900 E701                       	dc.b	smpsNoAttack, $01
00089902 E10F                       	smpsAlterNote       $0F
00089904 BA0E                       	dc.b	nA4, $0E
00089906 E109                       	smpsAlterNote       $09
00089908 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008990C E10F                       	smpsAlterNote       $0F
0008990E E701                       	dc.b	smpsNoAttack, $01
00089910 E112                       	smpsAlterNote       $12
00089912 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089916 E10C                       	smpsAlterNote       $0C
00089918 E701                       	dc.b	smpsNoAttack, $01
0008991A E108                       	smpsAlterNote       $08
0008991C E701                       	dc.b	smpsNoAttack, $01
0008991E E109                       	smpsAlterNote       $09
00089920 E701                       	dc.b	smpsNoAttack, $01
00089922 E10F                       	smpsAlterNote       $0F
00089924 E701                       	dc.b	smpsNoAttack, $01
00089926 E113                       	smpsAlterNote       $13
00089928 E701                       	dc.b	smpsNoAttack, $01
0008992A E10F                       	smpsAlterNote       $0F
0008992C E701                       	dc.b	smpsNoAttack, $01
0008992E E109                       	smpsAlterNote       $09
00089930 E701                       	dc.b	smpsNoAttack, $01
00089932 E108                       	smpsAlterNote       $08
00089934 E701                       	dc.b	smpsNoAttack, $01
00089936 E10C                       	smpsAlterNote       $0C
00089938 E701                       	dc.b	smpsNoAttack, $01
0008993A E112                       	smpsAlterNote       $12
0008993C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089940 E10F                       	smpsAlterNote       $0F
00089942 E701                       	dc.b	smpsNoAttack, $01
00089944 E109                       	smpsAlterNote       $09
00089946 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008994A E10F                       	smpsAlterNote       $0F
0008994C E701                       	dc.b	smpsNoAttack, $01
0008994E E112                       	smpsAlterNote       $12
00089950 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089954 E10C                       	smpsAlterNote       $0C
00089956 E701                       	dc.b	smpsNoAttack, $01
00089958 E108                       	smpsAlterNote       $08
0008995A E701                       	dc.b	smpsNoAttack, $01
0008995C E109                       	smpsAlterNote       $09
0008995E E701                       	dc.b	smpsNoAttack, $01
00089960 E10F                       	smpsAlterNote       $0F
00089962 E701                       	dc.b	smpsNoAttack, $01
00089964 E113                       	smpsAlterNote       $13
00089966 E701                       	dc.b	smpsNoAttack, $01
00089968 E10F                       	smpsAlterNote       $0F
0008996A E701                       	dc.b	smpsNoAttack, $01
0008996C E10C                       	smpsAlterNote       $0C
0008996E E701                       	dc.b	smpsNoAttack, $01
00089970 E108                       	smpsAlterNote       $08
00089972 E701                       	dc.b	smpsNoAttack, $01
00089974 E109                       	smpsAlterNote       $09
00089976 8001                       	dc.b	nRst, $01
00089978 E10C                       	smpsAlterNote       $0C
0008997A B50A                       	dc.b	nE4, $0A
0008997C E10D                       	smpsAlterNote       $0D
0008997E B60D                       	dc.b	nF4, $0D
00089980 E10A                       	smpsAlterNote       $0A
00089982 E701                       	dc.b	smpsNoAttack, $01
00089984 E106                       	smpsAlterNote       $06
00089986 E701                       	dc.b	smpsNoAttack, $01
00089988 E107                       	smpsAlterNote       $07
0008998A E701                       	dc.b	smpsNoAttack, $01
0008998C E10D                       	smpsAlterNote       $0D
0008998E E701                       	dc.b	smpsNoAttack, $01
00089990 E111                       	smpsAlterNote       $11
00089992 E701                       	dc.b	smpsNoAttack, $01
00089994 E10D                       	smpsAlterNote       $0D
00089996 E701                       	dc.b	smpsNoAttack, $01
00089998 E10A                       	smpsAlterNote       $0A
0008999A E701                       	dc.b	smpsNoAttack, $01
0008999C E106                       	smpsAlterNote       $06
0008999E E701                       	dc.b	smpsNoAttack, $01
000899A0 E10A                       	smpsAlterNote       $0A
000899A2 E701                       	dc.b	smpsNoAttack, $01
000899A4 E110                       	smpsAlterNote       $10
000899A6 E701                       	dc.b	smpsNoAttack, $01
000899A8 E111                       	smpsAlterNote       $11
000899AA E701                       	dc.b	smpsNoAttack, $01
000899AC E10D                       	smpsAlterNote       $0D
000899AE B80D                       	dc.b	nG4, $0D
000899B0 E10A                       	smpsAlterNote       $0A
000899B2 E701                       	dc.b	smpsNoAttack, $01
000899B4 E106                       	smpsAlterNote       $06
000899B6 E701                       	dc.b	smpsNoAttack, $01
000899B8 E107                       	smpsAlterNote       $07
000899BA E701                       	dc.b	smpsNoAttack, $01
000899BC E10D                       	smpsAlterNote       $0D
000899BE E701                       	dc.b	smpsNoAttack, $01
000899C0 E111                       	smpsAlterNote       $11
000899C2 E701                       	dc.b	smpsNoAttack, $01
000899C4 E10D                       	smpsAlterNote       $0D
000899C6 E701                       	dc.b	smpsNoAttack, $01
000899C8 E10A                       	smpsAlterNote       $0A
000899CA E701                       	dc.b	smpsNoAttack, $01
000899CC E106                       	smpsAlterNote       $06
000899CE E701                       	dc.b	smpsNoAttack, $01
000899D0 E10A                       	smpsAlterNote       $0A
000899D2 E701                       	dc.b	smpsNoAttack, $01
000899D4 E110                       	smpsAlterNote       $10
000899D6 E701                       	dc.b	smpsNoAttack, $01
000899D8 E111                       	smpsAlterNote       $11
000899DA E701                       	dc.b	smpsNoAttack, $01
000899DC E10D                       	smpsAlterNote       $0D
000899DE E701                       	dc.b	smpsNoAttack, $01
000899E0 E107                       	smpsAlterNote       $07
000899E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899E6 E10A                       	smpsAlterNote       $0A
000899E8 E701                       	dc.b	smpsNoAttack, $01
000899EA E110                       	smpsAlterNote       $10
000899EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899F0 E10D                       	smpsAlterNote       $0D
000899F2 8001                       	dc.b	nRst, $01
000899F4 E10F                       	smpsAlterNote       $0F
000899F6 BA0D                       	dc.b	nA4, $0D
000899F8 E10C                       	smpsAlterNote       $0C
000899FA E701                       	dc.b	smpsNoAttack, $01
000899FC E108                       	smpsAlterNote       $08
000899FE E701                       	dc.b	smpsNoAttack, $01
00089A00 E10C                       	smpsAlterNote       $0C
00089A02 E701                       	dc.b	smpsNoAttack, $01
00089A04 E112                       	smpsAlterNote       $12
00089A06 E701                       	dc.b	smpsNoAttack, $01
00089A08 E113                       	smpsAlterNote       $13
00089A0A E701                       	dc.b	smpsNoAttack, $01
00089A0C E10F                       	smpsAlterNote       $0F
00089A0E E701                       	dc.b	smpsNoAttack, $01
00089A10 E109                       	smpsAlterNote       $09
00089A12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A16 E10C                       	smpsAlterNote       $0C
00089A18 E701                       	dc.b	smpsNoAttack, $01
00089A1A E112                       	smpsAlterNote       $12
00089A1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A20 E10C                       	smpsAlterNote       $0C
00089A22 E701                       	dc.b	smpsNoAttack, $01
00089A24 E109                       	smpsAlterNote       $09
00089A26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A2A E10F                       	smpsAlterNote       $0F
00089A2C E701                       	dc.b	smpsNoAttack, $01
00089A2E E113                       	smpsAlterNote       $13
00089A30 E701                       	dc.b	smpsNoAttack, $01
00089A32 E112                       	smpsAlterNote       $12
00089A34 E701                       	dc.b	smpsNoAttack, $01
00089A36 E10C                       	smpsAlterNote       $0C
00089A38 E701                       	dc.b	smpsNoAttack, $01
00089A3A E108                       	smpsAlterNote       $08
00089A3C E701                       	dc.b	smpsNoAttack, $01
00089A3E E10C                       	smpsAlterNote       $0C
00089A40 E701                       	dc.b	smpsNoAttack, $01
00089A42 E10F                       	smpsAlterNote       $0F
00089A44 E701                       	dc.b	smpsNoAttack, $01
00089A46 E113                       	smpsAlterNote       $13
00089A48 E701                       	dc.b	smpsNoAttack, $01
00089A4A E10F                       	smpsAlterNote       $0F
00089A4C E701                       	dc.b	smpsNoAttack, $01
00089A4E E109                       	smpsAlterNote       $09
00089A50 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089A54 E10D                       	smpsAlterNote       $0D
00089A56 B609 8001                  	dc.b	nF4, $09, nRst, $01
00089A5A E10C                       	smpsAlterNote       $0C
00089A5C B506 8001                  	dc.b	nE4, $06, nRst, $01
00089A60 E10B                       	smpsAlterNote       $0B
00089A62 B30D                       	dc.b	nD4, $0D
00089A64 E10C                       	smpsAlterNote       $0C
00089A66 B503 8001                  	dc.b	nE4, $03, nRst, $01
00089A6A E10D                       	smpsAlterNote       $0D
00089A6C B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00089A74 E109                       	smpsAlterNote       $09
00089A76 E701                       	dc.b	smpsNoAttack, $01
00089A78 E108                       	smpsAlterNote       $08
00089A7A E701                       	dc.b	smpsNoAttack, $01
00089A7C E10C                       	smpsAlterNote       $0C
00089A7E E701                       	dc.b	smpsNoAttack, $01
00089A80 E112                       	smpsAlterNote       $12
00089A82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A86 E10F                       	smpsAlterNote       $0F
00089A88 E701                       	dc.b	smpsNoAttack, $01
00089A8A E109                       	smpsAlterNote       $09
00089A8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A90 E10F                       	smpsAlterNote       $0F
00089A92 E701                       	dc.b	smpsNoAttack, $01
00089A94 E112                       	smpsAlterNote       $12
00089A96 E701                       	dc.b	smpsNoAttack, $01
00089A98 E113                       	smpsAlterNote       $13
00089A9A 8001                       	dc.b	nRst, $01
00089A9C E10D                       	smpsAlterNote       $0D
00089A9E C20D                       	dc.b	nF5, $0D
00089AA0 E107                       	smpsAlterNote       $07
00089AA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AA6 E10A                       	smpsAlterNote       $0A
00089AA8 E701                       	dc.b	smpsNoAttack, $01
00089AAA E110                       	smpsAlterNote       $10
00089AAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AB0 E10A                       	smpsAlterNote       $0A
00089AB2 E701                       	dc.b	smpsNoAttack, $01
00089AB4 E107                       	smpsAlterNote       $07
00089AB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089ABA E10D                       	smpsAlterNote       $0D
00089ABC E701                       	dc.b	smpsNoAttack, $01
00089ABE E111                       	smpsAlterNote       $11
00089AC0 E701                       	dc.b	smpsNoAttack, $01
00089AC2 E110                       	smpsAlterNote       $10
00089AC4 E701                       	dc.b	smpsNoAttack, $01
00089AC6 E10A                       	smpsAlterNote       $0A
00089AC8 E701                       	dc.b	smpsNoAttack, $01
00089ACA E106                       	smpsAlterNote       $06
00089ACC E701                       	dc.b	smpsNoAttack, $01
00089ACE E10A                       	smpsAlterNote       $0A
00089AD0 E701                       	dc.b	smpsNoAttack, $01
00089AD2 E10D                       	smpsAlterNote       $0D
00089AD4 E701                       	dc.b	smpsNoAttack, $01
00089AD6 E111                       	smpsAlterNote       $11
00089AD8 E701                       	dc.b	smpsNoAttack, $01
00089ADA E10D                       	smpsAlterNote       $0D
00089ADC E701                       	dc.b	smpsNoAttack, $01
00089ADE E107                       	smpsAlterNote       $07
00089AE0 E701                       	dc.b	smpsNoAttack, $01
00089AE2 E106                       	smpsAlterNote       $06
00089AE4 E701                       	dc.b	smpsNoAttack, $01
00089AE6 E10A                       	smpsAlterNote       $0A
00089AE8 E701                       	dc.b	smpsNoAttack, $01
00089AEA E110                       	smpsAlterNote       $10
00089AEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AF0 E10D                       	smpsAlterNote       $0D
00089AF2 E701                       	dc.b	smpsNoAttack, $01
00089AF4 E107                       	smpsAlterNote       $07
00089AF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AFA E10D                       	smpsAlterNote       $0D
00089AFC E701                       	dc.b	smpsNoAttack, $01
00089AFE E110                       	smpsAlterNote       $10
00089B00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B04 E10A                       	smpsAlterNote       $0A
00089B06 E701                       	dc.b	smpsNoAttack, $01
00089B08 E106                       	smpsAlterNote       $06
00089B0A E701                       	dc.b	smpsNoAttack, $01
00089B0C E107                       	smpsAlterNote       $07
00089B0E E701                       	dc.b	smpsNoAttack, $01
00089B10 E10D                       	smpsAlterNote       $0D
00089B12 E701                       	dc.b	smpsNoAttack, $01
00089B14 E111                       	smpsAlterNote       $11
00089B16 E701                       	dc.b	smpsNoAttack, $01
00089B18 E10D                       	smpsAlterNote       $0D
00089B1A E701                       	dc.b	smpsNoAttack, $01
00089B1C E10A                       	smpsAlterNote       $0A
00089B1E E701                       	dc.b	smpsNoAttack, $01
00089B20 E106                       	smpsAlterNote       $06
00089B22 E701                       	dc.b	smpsNoAttack, $01
00089B24 E10A                       	smpsAlterNote       $0A
00089B26 E701                       	dc.b	smpsNoAttack, $01
00089B28 E110                       	smpsAlterNote       $10
00089B2A E701                       	dc.b	smpsNoAttack, $01
00089B2C E111                       	smpsAlterNote       $11
00089B2E E701                       	dc.b	smpsNoAttack, $01
00089B30 E10D                       	smpsAlterNote       $0D
00089B32 E701                       	dc.b	smpsNoAttack, $01
00089B34 E107                       	smpsAlterNote       $07
00089B36 E701                       	dc.b	smpsNoAttack, $01
00089B38 E10D                       	smpsAlterNote       $0D
00089B3A C207                       	dc.b	nF5, $07
00089B3C E10C                       	smpsAlterNote       $0C
00089B3E C10D                       	dc.b	nE5, $0D
00089B40 E109                       	smpsAlterNote       $09
00089B42 E701                       	dc.b	smpsNoAttack, $01
00089B44 E106                       	smpsAlterNote       $06
00089B46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B4A E10C                       	smpsAlterNote       $0C
00089B4C E701                       	dc.b	smpsNoAttack, $01
00089B4E E110                       	smpsAlterNote       $10
00089B50 E701                       	dc.b	smpsNoAttack, $01
00089B52 E10F                       	smpsAlterNote       $0F
00089B54 E701                       	dc.b	smpsNoAttack, $01
00089B56 E109                       	smpsAlterNote       $09
00089B58 E701                       	dc.b	smpsNoAttack, $01
00089B5A E105                       	smpsAlterNote       $05
00089B5C E701                       	dc.b	smpsNoAttack, $01
00089B5E E109                       	smpsAlterNote       $09
00089B60 E701                       	dc.b	smpsNoAttack, $01
00089B62 E10C                       	smpsAlterNote       $0C
00089B64 E701                       	dc.b	smpsNoAttack, $01
00089B66 E110                       	smpsAlterNote       $10
00089B68 E701                       	dc.b	smpsNoAttack, $01
00089B6A E10B                       	smpsAlterNote       $0B
00089B6C BF0D                       	dc.b	nD5, $0D
00089B6E E108                       	smpsAlterNote       $08
00089B70 E701                       	dc.b	smpsNoAttack, $01
00089B72 E105                       	smpsAlterNote       $05
00089B74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B78 E10B                       	smpsAlterNote       $0B
00089B7A E701                       	dc.b	smpsNoAttack, $01
00089B7C E10F                       	smpsAlterNote       $0F
00089B7E E701                       	dc.b	smpsNoAttack, $01
00089B80 E10E                       	smpsAlterNote       $0E
00089B82 E701                       	dc.b	smpsNoAttack, $01
00089B84 E108                       	smpsAlterNote       $08
00089B86 E701                       	dc.b	smpsNoAttack, $01
00089B88 E104                       	smpsAlterNote       $04
00089B8A E701                       	dc.b	smpsNoAttack, $01
00089B8C E108                       	smpsAlterNote       $08
00089B8E E701                       	dc.b	smpsNoAttack, $01
00089B90 E10E                       	smpsAlterNote       $0E
00089B92 E701                       	dc.b	smpsNoAttack, $01
00089B94 E10F                       	smpsAlterNote       $0F
00089B96 E701                       	dc.b	smpsNoAttack, $01
00089B98 E10B                       	smpsAlterNote       $0B
00089B9A E701                       	dc.b	smpsNoAttack, $01
00089B9C E105                       	smpsAlterNote       $05
00089B9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BA2 E108                       	smpsAlterNote       $08
00089BA4 E701                       	dc.b	smpsNoAttack, $01
00089BA6 E10E                       	smpsAlterNote       $0E
00089BA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BAC E108                       	smpsAlterNote       $08
00089BAE E701                       	dc.b	smpsNoAttack, $01
00089BB0 E105                       	smpsAlterNote       $05
00089BB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BB6 E10B                       	smpsAlterNote       $0B
00089BB8 E701                       	dc.b	smpsNoAttack, $01
00089BBA E10F                       	smpsAlterNote       $0F
00089BBC E701                       	dc.b	smpsNoAttack, $01
00089BBE E10E                       	smpsAlterNote       $0E
00089BC0 E701                       	dc.b	smpsNoAttack, $01
00089BC2 E108                       	smpsAlterNote       $08
00089BC4 E701                       	dc.b	smpsNoAttack, $01
00089BC6 E104                       	smpsAlterNote       $04
00089BC8 E701                       	dc.b	smpsNoAttack, $01
00089BCA E108                       	smpsAlterNote       $08
00089BCC E701                       	dc.b	smpsNoAttack, $01
00089BCE E10B                       	smpsAlterNote       $0B
00089BD0 E701                       	dc.b	smpsNoAttack, $01
00089BD2 E10F                       	smpsAlterNote       $0F
00089BD4 E701                       	dc.b	smpsNoAttack, $01
00089BD6 E10B                       	smpsAlterNote       $0B
00089BD8 E701                       	dc.b	smpsNoAttack, $01
00089BDA E105                       	smpsAlterNote       $05
00089BDC E701                       	dc.b	smpsNoAttack, $01
00089BDE E104                       	smpsAlterNote       $04
00089BE0 E701                       	dc.b	smpsNoAttack, $01
00089BE2 E108                       	smpsAlterNote       $08
00089BE4 E701                       	dc.b	smpsNoAttack, $01
00089BE6 E10E                       	smpsAlterNote       $0E
00089BE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BEC E10B                       	smpsAlterNote       $0B
00089BEE E701                       	dc.b	smpsNoAttack, $01
00089BF0 E105                       	smpsAlterNote       $05
00089BF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BF6 E10B                       	smpsAlterNote       $0B
00089BF8 E701                       	dc.b	smpsNoAttack, $01
00089BFA E10E                       	smpsAlterNote       $0E
00089BFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C00 E108                       	smpsAlterNote       $08
00089C02 E701                       	dc.b	smpsNoAttack, $01
00089C04 E105                       	smpsAlterNote       $05
00089C06 8001                       	dc.b	nRst, $01
00089C0A E601                       	smpsAlterVol        $01
00089C0C E10B                       	smpsAlterNote       $0B
00089C0E BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00089C1A 8004                       	dc.b	nRst, $04
00089C1E E6FF                       	smpsAlterVol        $FF
00089C20 E10D                       	smpsAlterNote       $0D
00089C22 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00089C2A E10C                       	smpsAlterNote       $0C
00089C2C E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00089C31 E10D                       	smpsAlterNote       $0D
00089C33 B60D                       	dc.b	nF4, $0D
00089C35 E10A                       	smpsAlterNote       $0A
00089C37 E701                       	dc.b	smpsNoAttack, $01
00089C39 E106                       	smpsAlterNote       $06
00089C3B E701                       	dc.b	smpsNoAttack, $01
00089C3D E10A                       	smpsAlterNote       $0A
00089C3F E701                       	dc.b	smpsNoAttack, $01
00089C41 E110                       	smpsAlterNote       $10
00089C43 E701                       	dc.b	smpsNoAttack, $01
00089C45 E111                       	smpsAlterNote       $11
00089C47 E701                       	dc.b	smpsNoAttack, $01
00089C49 E10D                       	smpsAlterNote       $0D
00089C4B E701                       	dc.b	smpsNoAttack, $01
00089C4D E107                       	smpsAlterNote       $07
00089C4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C53 E10A                       	smpsAlterNote       $0A
00089C55 E701                       	dc.b	smpsNoAttack, $01
00089C57 E110                       	smpsAlterNote       $10
00089C59 E701                       	dc.b	smpsNoAttack, $01
00089C5B E111                       	smpsAlterNote       $11
00089C5D 8001                       	dc.b	nRst, $01
00089C5F E10D                       	smpsAlterNote       $0D
00089C61 B80D                       	dc.b	nG4, $0D
00089C63 E10A                       	smpsAlterNote       $0A
00089C65 E701                       	dc.b	smpsNoAttack, $01
00089C67 E106                       	smpsAlterNote       $06
00089C69 E701                       	dc.b	smpsNoAttack, $01
00089C6B E10A                       	smpsAlterNote       $0A
00089C6D E701                       	dc.b	smpsNoAttack, $01
00089C6F E110                       	smpsAlterNote       $10
00089C71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C75 E10D                       	smpsAlterNote       $0D
00089C77 E701                       	dc.b	smpsNoAttack, $01
00089C79 E107                       	smpsAlterNote       $07
00089C7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C7F E10D                       	smpsAlterNote       $0D
00089C81 E701                       	dc.b	smpsNoAttack, $01
00089C83 E110                       	smpsAlterNote       $10
00089C85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C89 E10A                       	smpsAlterNote       $0A
00089C8B E701                       	dc.b	smpsNoAttack, $01
00089C8D E106                       	smpsAlterNote       $06
00089C8F E701                       	dc.b	smpsNoAttack, $01
00089C91 E107                       	smpsAlterNote       $07
00089C93 E701                       	dc.b	smpsNoAttack, $01
00089C95 E10D                       	smpsAlterNote       $0D
00089C97 E701                       	dc.b	smpsNoAttack, $01
00089C99 E111                       	smpsAlterNote       $11
00089C9B E701                       	dc.b	smpsNoAttack, $01
00089C9D E10D                       	smpsAlterNote       $0D
00089C9F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089CA3 E10F                       	smpsAlterNote       $0F
00089CA5 BA02 8001                  	dc.b	nA4, $02, nRst, $01
00089CA9 E110                       	smpsAlterNote       $10
00089CAB BB03                       	dc.b	nBb4, $03
00089CAD E10F                       	smpsAlterNote       $0F
00089CAF BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00089CB5 E110                       	smpsAlterNote       $10
00089CB7 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089CBB E10F                       	smpsAlterNote       $0F
00089CBD C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00089CC3 E110                       	smpsAlterNote       $10
00089CC5 D302 8001                  	dc.b	nBb6, $02, nRst, $01
00089CC9 E10F                       	smpsAlterNote       $0F
00089CCB D20D                       	dc.b	nA6, $0D
00089CCD E10C                       	smpsAlterNote       $0C
00089CCF E701                       	dc.b	smpsNoAttack, $01
00089CD1 E108                       	smpsAlterNote       $08
00089CD3 E701                       	dc.b	smpsNoAttack, $01
00089CD5 E10C                       	smpsAlterNote       $0C
00089CD7 E701                       	dc.b	smpsNoAttack, $01
00089CD9 E10F                       	smpsAlterNote       $0F
00089CDB E701                       	dc.b	smpsNoAttack, $01
00089CDD E113                       	smpsAlterNote       $13
00089CDF E701                       	dc.b	smpsNoAttack, $01
00089CE1 E10F                       	smpsAlterNote       $0F
00089CE3 E701                       	dc.b	smpsNoAttack, $01
00089CE5 E109                       	smpsAlterNote       $09
00089CE7 E701                       	dc.b	smpsNoAttack, $01
00089CE9 E108                       	smpsAlterNote       $08
00089CEB E701                       	dc.b	smpsNoAttack, $01
00089CED E10C                       	smpsAlterNote       $0C
00089CEF E701                       	dc.b	smpsNoAttack, $01
00089CF1 E112                       	smpsAlterNote       $12
00089CF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CF7 E10F                       	smpsAlterNote       $0F
00089CF9 E701                       	dc.b	smpsNoAttack, $01
00089CFB E109                       	smpsAlterNote       $09
00089CFD E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00089D03 E10D                       	smpsAlterNote       $0D
00089D05 CE07                       	dc.b	nF6, $07
00089D07 E10C                       	smpsAlterNote       $0C
00089D09 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00089D0D E10D                       	smpsAlterNote       $0D
00089D0F CE03                       	dc.b	nF6, $03
00089D11 E10C                       	smpsAlterNote       $0C
00089D13 CC0D                       	dc.b	nEb6, $0D
00089D15 E109                       	smpsAlterNote       $09
00089D17 E701                       	dc.b	smpsNoAttack, $01
00089D19 E106                       	smpsAlterNote       $06
00089D1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D1F E10C                       	smpsAlterNote       $0C
00089D21 E701                       	dc.b	smpsNoAttack, $01
00089D23 E110                       	smpsAlterNote       $10
00089D25 E701                       	dc.b	smpsNoAttack, $01
00089D27 E10F                       	smpsAlterNote       $0F
00089D29 E701                       	dc.b	smpsNoAttack, $01
00089D2B E109                       	smpsAlterNote       $09
00089D2D E701                       	dc.b	smpsNoAttack, $01
00089D2F E105                       	smpsAlterNote       $05
00089D31 E701                       	dc.b	smpsNoAttack, $01
00089D33 E109                       	smpsAlterNote       $09
00089D35 E701                       	dc.b	smpsNoAttack, $01
00089D37 E10C                       	smpsAlterNote       $0C
00089D39 E701                       	dc.b	smpsNoAttack, $01
00089D3B E110                       	smpsAlterNote       $10
00089D3D E701                       	dc.b	smpsNoAttack, $01
00089D3F E10C                       	smpsAlterNote       $0C
00089D41 E701                       	dc.b	smpsNoAttack, $01
00089D43 E106                       	smpsAlterNote       $06
00089D45 E701                       	dc.b	smpsNoAttack, $01
00089D47 E105                       	smpsAlterNote       $05
00089D49 E701                       	dc.b	smpsNoAttack, $01
00089D4B E109                       	smpsAlterNote       $09
00089D4D E701                       	dc.b	smpsNoAttack, $01
00089D4F E10F                       	smpsAlterNote       $0F
00089D51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D55 E10C                       	smpsAlterNote       $0C
00089D57 E701                       	dc.b	smpsNoAttack, $01
00089D59 E10B                       	smpsAlterNote       $0B
00089D5B CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00089D65 E10F                       	smpsAlterNote       $0F
00089D67 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00089D71 E10D                       	smpsAlterNote       $0D
00089D73 C203                       	dc.b	nF5, $03
00089D75 E10C                       	smpsAlterNote       $0C
00089D77 C103 8001                  	dc.b	nE5, $03, nRst, $01
00089D7B E10D                       	smpsAlterNote       $0D
00089D7D C20D                       	dc.b	nF5, $0D
00089D7F E10C                       	smpsAlterNote       $0C
00089D81 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00089D85 E10B                       	smpsAlterNote       $0B
00089D87 BF0D                       	dc.b	nD5, $0D
00089D89 E108                       	smpsAlterNote       $08
00089D8B E701                       	dc.b	smpsNoAttack, $01
00089D8D E104                       	smpsAlterNote       $04
00089D8F E701                       	dc.b	smpsNoAttack, $01
00089D91 E108                       	smpsAlterNote       $08
00089D93 E701                       	dc.b	smpsNoAttack, $01
00089D95 E10E                       	smpsAlterNote       $0E
00089D97 E701                       	dc.b	smpsNoAttack, $01
00089D99 E10F                       	smpsAlterNote       $0F
00089D9B E701                       	dc.b	smpsNoAttack, $01
00089D9D E10B                       	smpsAlterNote       $0B
00089D9F E701                       	dc.b	smpsNoAttack, $01
00089DA1 E105                       	smpsAlterNote       $05
00089DA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DA7 E108                       	smpsAlterNote       $08
00089DA9 E701                       	dc.b	smpsNoAttack, $01
00089DAB E10E                       	smpsAlterNote       $0E
00089DAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DB1 E108                       	smpsAlterNote       $08
00089DB3 E701                       	dc.b	smpsNoAttack, $01
00089DB5 E105                       	smpsAlterNote       $05
00089DB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DBB E10B                       	smpsAlterNote       $0B
00089DBD E701                       	dc.b	smpsNoAttack, $01
00089DBF E10F                       	smpsAlterNote       $0F
00089DC1 E701                       	dc.b	smpsNoAttack, $01
00089DC3 E10E                       	smpsAlterNote       $0E
00089DC5 E701                       	dc.b	smpsNoAttack, $01
00089DC7 E108                       	smpsAlterNote       $08
00089DC9 E701                       	dc.b	smpsNoAttack, $01
00089DCB E104                       	smpsAlterNote       $04
00089DCD E701                       	dc.b	smpsNoAttack, $01
00089DCF E108                       	smpsAlterNote       $08
00089DD1 E701                       	dc.b	smpsNoAttack, $01
00089DD3 E10B                       	smpsAlterNote       $0B
00089DD5 E701                       	dc.b	smpsNoAttack, $01
00089DD7 E10F                       	smpsAlterNote       $0F
00089DD9 E701                       	dc.b	smpsNoAttack, $01
00089DDB E10B                       	smpsAlterNote       $0B
00089DDD E701                       	dc.b	smpsNoAttack, $01
00089DDF E105                       	smpsAlterNote       $05
00089DE1 E701                       	dc.b	smpsNoAttack, $01
00089DE3 E104                       	smpsAlterNote       $04
00089DE5 E701                       	dc.b	smpsNoAttack, $01
00089DE7 E108                       	smpsAlterNote       $08
00089DE9 E701                       	dc.b	smpsNoAttack, $01
00089DEB E10E                       	smpsAlterNote       $0E
00089DED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DF1 E10B                       	smpsAlterNote       $0B
00089DF3 E701                       	dc.b	smpsNoAttack, $01
00089DF5 E105                       	smpsAlterNote       $05
00089DF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DFB E10B                       	smpsAlterNote       $0B
00089DFD E701                       	dc.b	smpsNoAttack, $01
00089DFF E10E                       	smpsAlterNote       $0E
00089E01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E05 E108                       	smpsAlterNote       $08
00089E07 E701                       	dc.b	smpsNoAttack, $01
00089E09 E104                       	smpsAlterNote       $04
00089E0B E701                       	dc.b	smpsNoAttack, $01
00089E0D E105                       	smpsAlterNote       $05
00089E0F E701                       	dc.b	smpsNoAttack, $01
00089E11 E10B                       	smpsAlterNote       $0B
00089E13 E701                       	dc.b	smpsNoAttack, $01
00089E15 E10F                       	smpsAlterNote       $0F
00089E17 E701                       	dc.b	smpsNoAttack, $01
00089E19 E10B                       	smpsAlterNote       $0B
00089E1B E701                       	dc.b	smpsNoAttack, $01
00089E1D E108                       	smpsAlterNote       $08
00089E1F E701                       	dc.b	smpsNoAttack, $01
00089E21 E104                       	smpsAlterNote       $04
00089E23 E701                       	dc.b	smpsNoAttack, $01
00089E25 E108                       	smpsAlterNote       $08
00089E27 E701                       	dc.b	smpsNoAttack, $01
00089E29 E10E                       	smpsAlterNote       $0E
00089E2B E701                       	dc.b	smpsNoAttack, $01
00089E2D E10F                       	smpsAlterNote       $0F
00089E2F E701                       	dc.b	smpsNoAttack, $01
00089E31 E10B                       	smpsAlterNote       $0B
00089E33 E701                       	dc.b	smpsNoAttack, $01
00089E35 E105                       	smpsAlterNote       $05
00089E37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E3B E108                       	smpsAlterNote       $08
00089E3D E701                       	dc.b	smpsNoAttack, $01
00089E3F E10E                       	smpsAlterNote       $0E
00089E41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E45 E108                       	smpsAlterNote       $08
00089E47 E701                       	dc.b	smpsNoAttack, $01
00089E49 E105                       	smpsAlterNote       $05
00089E4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E4F E10B                       	smpsAlterNote       $0B
00089E51 E701                       	dc.b	smpsNoAttack, $01
00089E53 E10F                       	smpsAlterNote       $0F
00089E55 E701                       	dc.b	smpsNoAttack, $01
00089E57 E10E                       	smpsAlterNote       $0E
00089E59 E701                       	dc.b	smpsNoAttack, $01
00089E5B E108                       	smpsAlterNote       $08
00089E5D E701                       	dc.b	smpsNoAttack, $01
00089E5F E104                       	smpsAlterNote       $04
00089E61 E701                       	dc.b	smpsNoAttack, $01
00089E63 E108                       	smpsAlterNote       $08
00089E65 E701                       	dc.b	smpsNoAttack, $01
00089E67 E10B                       	smpsAlterNote       $0B
00089E69 E701                       	dc.b	smpsNoAttack, $01
00089E6B E10F                       	smpsAlterNote       $0F
00089E6D E701                       	dc.b	smpsNoAttack, $01
00089E6F E10B                       	smpsAlterNote       $0B
00089E71 E701                       	dc.b	smpsNoAttack, $01
00089E73 E105                       	smpsAlterNote       $05
00089E75 E701                       	dc.b	smpsNoAttack, $01
00089E77 E104                       	smpsAlterNote       $04
00089E79 E701                       	dc.b	smpsNoAttack, $01
00089E7B E105                       	smpsAlterNote       $05
00089E7D 8001                       	dc.b	nRst, $01
00089E7F E10D                       	smpsAlterNote       $0D
00089E81 C20D                       	dc.b	nF5, $0D
00089E83 E107                       	smpsAlterNote       $07
00089E85 E701                       	dc.b	smpsNoAttack, $01
00089E87 E106                       	smpsAlterNote       $06
00089E89 E701                       	dc.b	smpsNoAttack, $01
00089E8B E10A                       	smpsAlterNote       $0A
00089E8D E701                       	dc.b	smpsNoAttack, $01
00089E8F E110                       	smpsAlterNote       $10
00089E91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E95 E10D                       	smpsAlterNote       $0D
00089E97 E701                       	dc.b	smpsNoAttack, $01
00089E99 E107                       	smpsAlterNote       $07
00089E9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E9F E10D                       	smpsAlterNote       $0D
00089EA1 E701                       	dc.b	smpsNoAttack, $01
00089EA3 E110                       	smpsAlterNote       $10
00089EA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EA9 E10A                       	smpsAlterNote       $0A
00089EAB E701                       	dc.b	smpsNoAttack, $01
00089EAD E106                       	smpsAlterNote       $06
00089EAF E701                       	dc.b	smpsNoAttack, $01
00089EB1 E107                       	smpsAlterNote       $07
00089EB3 E701                       	dc.b	smpsNoAttack, $01
00089EB5 E10D                       	smpsAlterNote       $0D
00089EB7 E701                       	dc.b	smpsNoAttack, $01
00089EB9 E111                       	smpsAlterNote       $11
00089EBB E701                       	dc.b	smpsNoAttack, $01
00089EBD E10D                       	smpsAlterNote       $0D
00089EBF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089EC3 E10C                       	smpsAlterNote       $0C
00089EC5 C10D                       	dc.b	nE5, $0D
00089EC7 E10D                       	smpsAlterNote       $0D
00089EC9 C20A                       	dc.b	nF5, $0A
00089ECB E10C                       	smpsAlterNote       $0C
00089ECD C10E                       	dc.b	nE5, $0E
00089ECF E106                       	smpsAlterNote       $06
00089ED1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089ED5 E10C                       	smpsAlterNote       $0C
00089ED7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089EDB E10B                       	smpsAlterNote       $0B
00089EDD BF0D                       	dc.b	nD5, $0D
00089EDF E10C                       	smpsAlterNote       $0C
00089EE1 C107                       	dc.b	nE5, $07
00089EE3 E10D                       	smpsAlterNote       $0D
00089EE5 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00089EEF E110                       	smpsAlterNote       $10
00089EF1 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00089EF7 E10F                       	smpsAlterNote       $0F
00089EF9 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00089F01 E10D                       	smpsAlterNote       $0D
00089F03 D003                       	dc.b	nG6, $03
00089F07 E0C0                       	smpsPan             panCenter, $00
00089F09 E6FF                       	smpsAlterVol        $FF
00089F0B AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00089F17 8001                       	dc.b	nRst, $01
00089F19 E10C                       	smpsAlterNote       $0C
00089F1B A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00089F25 E604                       	smpsAlterVol        $04
00089F27 E10B                       	smpsAlterNote       $0B
00089F29 B306 8001                  	dc.b	nD4, $06, nRst, $01
00089F2D E10F                       	smpsAlterNote       $0F
00089F2F AE03                       	dc.b	nA3, $03
00089F31 E10D                       	smpsAlterNote       $0D
00089F33 B603 8001                  	dc.b	nF4, $03, nRst, $01
00089F37 E10C                       	smpsAlterNote       $0C
00089F39 B506 8001                  	dc.b	nE4, $06, nRst, $01
00089F3D E10B                       	smpsAlterNote       $0B
00089F3F B302 8001                  	dc.b	nD4, $02, nRst, $01
00089F43 E10A                       	smpsAlterNote       $0A
00089F45 B103                       	dc.b	nC4, $03
00089F47 E110                       	smpsAlterNote       $10
00089F49 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00089F4D E10F                       	smpsAlterNote       $0F
00089F4F AE03 800A                  	dc.b	nA3, $03, nRst, $0A
00089F53 E080                       	smpsPan             panLeft, $00
00089F55 01                         	dc.b	$01
00089F58 E6FB                       	smpsAlterVol        $FB
00089F5A E1E4                       	smpsAlterNote       $E4
00089F5C C501                       	dc.b	nAb5, $01
00089F5E E1F4                       	smpsAlterNote       $F4
00089F60 E701                       	dc.b	smpsNoAttack, $01
00089F62 E104                       	smpsAlterNote       $04
00089F64 E701                       	dc.b	smpsNoAttack, $01
00089F66 E114                       	smpsAlterNote       $14
00089F68 E701                       	dc.b	smpsNoAttack, $01
00089F6A E11C                       	smpsAlterNote       $1C
00089F6C E701                       	dc.b	smpsNoAttack, $01
00089F6E E1EF                       	smpsAlterNote       $EF
00089F70 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00089F73 E1FF                       	smpsAlterNote       $FF
00089F75 E701                       	dc.b	smpsNoAttack, $01
00089F77 E10F                       	smpsAlterNote       $0F
00089F79 C606                       	dc.b	nA5, $06
00089F7B E109                       	smpsAlterNote       $09
00089F7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F81 E10F                       	smpsAlterNote       $0F
00089F83 E701                       	dc.b	smpsNoAttack, $01
00089F85 E112                       	smpsAlterNote       $12
00089F87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F8B E10C                       	smpsAlterNote       $0C
00089F8D E701                       	dc.b	smpsNoAttack, $01
00089F8F E108                       	smpsAlterNote       $08
00089F91 E701                       	dc.b	smpsNoAttack, $01
00089F93 E109                       	smpsAlterNote       $09
00089F95 E701                       	dc.b	smpsNoAttack, $01
00089F97 E10F                       	smpsAlterNote       $0F
00089F99 E701                       	dc.b	smpsNoAttack, $01
00089F9B E113                       	smpsAlterNote       $13
00089F9D E701                       	dc.b	smpsNoAttack, $01
00089F9F E10F                       	smpsAlterNote       $0F
00089FA1 E701                       	dc.b	smpsNoAttack, $01
00089FA3 E10C                       	smpsAlterNote       $0C
00089FA5 E701                       	dc.b	smpsNoAttack, $01
00089FA7 E108                       	smpsAlterNote       $08
00089FA9 E701                       	dc.b	smpsNoAttack, $01
00089FAB E10C                       	smpsAlterNote       $0C
00089FAD E701                       	dc.b	smpsNoAttack, $01
00089FAF E112                       	smpsAlterNote       $12
00089FB1 E701                       	dc.b	smpsNoAttack, $01
00089FB3 E113                       	smpsAlterNote       $13
00089FB5 E701                       	dc.b	smpsNoAttack, $01
00089FB7 E10F                       	smpsAlterNote       $0F
00089FB9 E701                       	dc.b	smpsNoAttack, $01
00089FBB E109                       	smpsAlterNote       $09
00089FBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FC1 E10C                       	smpsAlterNote       $0C
00089FC3 E701                       	dc.b	smpsNoAttack, $01
00089FC5 E112                       	smpsAlterNote       $12
00089FC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FCB E10C                       	smpsAlterNote       $0C
00089FCD E701                       	dc.b	smpsNoAttack, $01
00089FCF E109                       	smpsAlterNote       $09
00089FD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FD5 E10F                       	smpsAlterNote       $0F
00089FD7 E701                       	dc.b	smpsNoAttack, $01
00089FD9 E113                       	smpsAlterNote       $13
00089FDB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089FDF E10D                       	smpsAlterNote       $0D
00089FE1 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00089FE7 E10C                       	smpsAlterNote       $0C
00089FE9 C102 8001                  	dc.b	nE5, $02, nRst, $01
00089FED E10D                       	smpsAlterNote       $0D
00089FEF C201 8001                  	dc.b	nF5, $01, nRst, $01
00089FF3 E10C                       	smpsAlterNote       $0C
00089FF5 C102                       	dc.b	nE5, $02
00089FF7 E10B                       	smpsAlterNote       $0B
00089FF9 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089FFD E10C                       	smpsAlterNote       $0C
00089FFF C101 8001                  	dc.b	nE5, $01, nRst, $01
0008A003 E10B                       	smpsAlterNote       $0B
0008A005 BF02                       	dc.b	nD5, $02
0008A007 E10A                       	smpsAlterNote       $0A
0008A009 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008A013 E110                       	smpsAlterNote       $10
0008A015 BB02                       	dc.b	nBb4, $02
0008A017 E10A                       	smpsAlterNote       $0A
0008A019 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A01D E110                       	smpsAlterNote       $10
0008A01F BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008A023 E10F                       	smpsAlterNote       $0F
0008A025 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008A029 E110                       	smpsAlterNote       $10
0008A02B BB02                       	dc.b	nBb4, $02
0008A02D E10F                       	smpsAlterNote       $0F
0008A02F BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008A039 E10C                       	smpsAlterNote       $0C
0008A03B B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008A043 E10B                       	smpsAlterNote       $0B
0008A045 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008A049 E10F                       	smpsAlterNote       $0F
0008A04B BA02                       	dc.b	nA4, $02
0008A04F E0C0                       	smpsPan             panCenter, $00
0008A051 E601                       	smpsAlterVol        $01
0008A053 E109                       	smpsAlterNote       $09
0008A055 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008A061 E108                       	smpsAlterNote       $08
0008A063 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008A069 E107                       	smpsAlterNote       $07
0008A06B B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008A071 E109                       	smpsAlterNote       $09
0008A073 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008A077 E108                       	smpsAlterNote       $08
0008A079 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008A07D E107                       	smpsAlterNote       $07
0008A07F B302 8001                  	dc.b	nD4, $02, nRst, $01
0008A083 E106                       	smpsAlterNote       $06
0008A085 B103                       	dc.b	nC4, $03
0008A087 E10C                       	smpsAlterNote       $0C
0008A089 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008A08F E080                       	smpsPan             panLeft, $00
0008A091 07                         	dc.b	$07
0008A092 E6FE                       	smpsAlterVol        $FE
0008A094 E10B                       	smpsAlterNote       $0B
0008A096 B20D                       	dc.b	nCs4, $0D
0008A098 E105                       	smpsAlterNote       $05
0008A09A E701                       	dc.b	smpsNoAttack, $01
0008A09C E104                       	smpsAlterNote       $04
0008A09E E701                       	dc.b	smpsNoAttack, $01
0008A0A0 E108                       	smpsAlterNote       $08
0008A0A2 E701                       	dc.b	smpsNoAttack, $01
0008A0A4 E10E                       	smpsAlterNote       $0E
0008A0A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0AA E10B                       	smpsAlterNote       $0B
0008A0AC E701                       	dc.b	smpsNoAttack, $01
0008A0AE E105                       	smpsAlterNote       $05
0008A0B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0B4 E10B                       	smpsAlterNote       $0B
0008A0B6 E701                       	dc.b	smpsNoAttack, $01
0008A0B8 E10E                       	smpsAlterNote       $0E
0008A0BA E701                       	dc.b	smpsNoAttack, $01
0008A0BC E10F                       	smpsAlterNote       $0F
0008A0BE 8001                       	dc.b	nRst, $01
0008A0C0 E10B                       	smpsAlterNote       $0B
0008A0C2 B30D                       	dc.b	nD4, $0D
0008A0C4 E105                       	smpsAlterNote       $05
0008A0C6 E701                       	dc.b	smpsNoAttack, $01
0008A0C8 E104                       	smpsAlterNote       $04
0008A0CA E701                       	dc.b	smpsNoAttack, $01
0008A0CC E108                       	smpsAlterNote       $08
0008A0CE E701                       	dc.b	smpsNoAttack, $01
0008A0D0 E10E                       	smpsAlterNote       $0E
0008A0D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0D6 E10B                       	smpsAlterNote       $0B
0008A0D8 E701                       	dc.b	smpsNoAttack, $01
0008A0DA E105                       	smpsAlterNote       $05
0008A0DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0E0 E10B                       	smpsAlterNote       $0B
0008A0E2 E701                       	dc.b	smpsNoAttack, $01
0008A0E4 E10E                       	smpsAlterNote       $0E
0008A0E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0EA E108                       	smpsAlterNote       $08
0008A0EC E701                       	dc.b	smpsNoAttack, $01
0008A0EE E104                       	smpsAlterNote       $04
0008A0F0 E701                       	dc.b	smpsNoAttack, $01
0008A0F2 E105                       	smpsAlterNote       $05
0008A0F4 E701                       	dc.b	smpsNoAttack, $01
0008A0F6 E10B                       	smpsAlterNote       $0B
0008A0F8 E701                       	dc.b	smpsNoAttack, $01
0008A0FA E10F                       	smpsAlterNote       $0F
0008A0FC E701                       	dc.b	smpsNoAttack, $01
0008A0FE E10B                       	smpsAlterNote       $0B
0008A100 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A104 E10C                       	smpsAlterNote       $0C
0008A106 B50D                       	dc.b	nE4, $0D
0008A108 E106                       	smpsAlterNote       $06
0008A10A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A10E E10C                       	smpsAlterNote       $0C
0008A110 E701                       	dc.b	smpsNoAttack, $01
0008A112 E10F                       	smpsAlterNote       $0F
0008A114 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A118 E109                       	smpsAlterNote       $09
0008A11A E701                       	dc.b	smpsNoAttack, $01
0008A11C E105                       	smpsAlterNote       $05
0008A11E E701                       	dc.b	smpsNoAttack, $01
0008A120 E106                       	smpsAlterNote       $06
0008A122 E701                       	dc.b	smpsNoAttack, $01
0008A124 E10C                       	smpsAlterNote       $0C
0008A126 E701                       	dc.b	smpsNoAttack, $01
0008A128 E110                       	smpsAlterNote       $10
0008A12A E701                       	dc.b	smpsNoAttack, $01
0008A12C E10B                       	smpsAlterNote       $0B
0008A12E B30E                       	dc.b	nD4, $0E
0008A130 E105                       	smpsAlterNote       $05
0008A132 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A136 E10B                       	smpsAlterNote       $0B
0008A138 E701                       	dc.b	smpsNoAttack, $01
0008A13A E10E                       	smpsAlterNote       $0E
0008A13C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A140 E108                       	smpsAlterNote       $08
0008A142 E701                       	dc.b	smpsNoAttack, $01
0008A144 E104                       	smpsAlterNote       $04
0008A146 E701                       	dc.b	smpsNoAttack, $01
0008A148 E105                       	smpsAlterNote       $05
0008A14A E701                       	dc.b	smpsNoAttack, $01
0008A14C E10B                       	smpsAlterNote       $0B
0008A14E E701                       	dc.b	smpsNoAttack, $01
0008A150 E10F                       	smpsAlterNote       $0F
0008A152 E701                       	dc.b	smpsNoAttack, $01
0008A154 E10B                       	smpsAlterNote       $0B
0008A156 E701                       	dc.b	smpsNoAttack, $01
0008A158 E108                       	smpsAlterNote       $08
0008A15A E701                       	dc.b	smpsNoAttack, $01
0008A15C E104                       	smpsAlterNote       $04
0008A15E E701                       	dc.b	smpsNoAttack, $01
0008A160 E108                       	smpsAlterNote       $08
0008A162 E701                       	dc.b	smpsNoAttack, $01
0008A164 E10E                       	smpsAlterNote       $0E
0008A166 E701                       	dc.b	smpsNoAttack, $01
0008A168 E10F                       	smpsAlterNote       $0F
0008A16A E701                       	dc.b	smpsNoAttack, $01
0008A16C E10B                       	smpsAlterNote       $0B
0008A16E E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008A172 E108                       	smpsAlterNote       $08
0008A174 E701                       	dc.b	smpsNoAttack, $01
0008A176 E105                       	smpsAlterNote       $05
0008A178 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A17C E10B                       	smpsAlterNote       $0B
0008A17E E701                       	dc.b	smpsNoAttack, $01
0008A180 E10F                       	smpsAlterNote       $0F
0008A182 E701                       	dc.b	smpsNoAttack, $01
0008A184 E10E                       	smpsAlterNote       $0E
0008A186 E701                       	dc.b	smpsNoAttack, $01
0008A188 E108                       	smpsAlterNote       $08
0008A18A E701                       	dc.b	smpsNoAttack, $01
0008A18C E104                       	smpsAlterNote       $04
0008A18E E701                       	dc.b	smpsNoAttack, $01
0008A190 E108                       	smpsAlterNote       $08
0008A192 E701                       	dc.b	smpsNoAttack, $01
0008A194 E10B                       	smpsAlterNote       $0B
0008A196 E701                       	dc.b	smpsNoAttack, $01
0008A198 E10F                       	smpsAlterNote       $0F
0008A19A E701                       	dc.b	smpsNoAttack, $01
0008A19C E10B                       	smpsAlterNote       $0B
0008A19E B30D                       	dc.b	nD4, $0D
0008A1A0 E108                       	smpsAlterNote       $08
0008A1A2 E701                       	dc.b	smpsNoAttack, $01
0008A1A4 E105                       	smpsAlterNote       $05
0008A1A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1AA E10B                       	smpsAlterNote       $0B
0008A1AC E701                       	dc.b	smpsNoAttack, $01
0008A1AE E10F                       	smpsAlterNote       $0F
0008A1B0 E701                       	dc.b	smpsNoAttack, $01
0008A1B2 E10E                       	smpsAlterNote       $0E
0008A1B4 E701                       	dc.b	smpsNoAttack, $01
0008A1B6 E108                       	smpsAlterNote       $08
0008A1B8 E701                       	dc.b	smpsNoAttack, $01
0008A1BA E104                       	smpsAlterNote       $04
0008A1BC E701                       	dc.b	smpsNoAttack, $01
0008A1BE E108                       	smpsAlterNote       $08
0008A1C0 E701                       	dc.b	smpsNoAttack, $01
0008A1C2 E10B                       	smpsAlterNote       $0B
0008A1C4 E701                       	dc.b	smpsNoAttack, $01
0008A1C6 E10F                       	smpsAlterNote       $0F
0008A1C8 E701                       	dc.b	smpsNoAttack, $01
0008A1CA E10B                       	smpsAlterNote       $0B
0008A1CC E701                       	dc.b	smpsNoAttack, $01
0008A1CE E105                       	smpsAlterNote       $05
0008A1D0 E701                       	dc.b	smpsNoAttack, $01
0008A1D2 E104                       	smpsAlterNote       $04
0008A1D4 E701                       	dc.b	smpsNoAttack, $01
0008A1D6 E108                       	smpsAlterNote       $08
0008A1D8 E701                       	dc.b	smpsNoAttack, $01
0008A1DA E10E                       	smpsAlterNote       $0E
0008A1DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1E0 E10B                       	smpsAlterNote       $0B
0008A1E2 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008A1E6 E108                       	smpsAlterNote       $08
0008A1E8 E701                       	dc.b	smpsNoAttack, $01
0008A1EA E104                       	smpsAlterNote       $04
0008A1EC E701                       	dc.b	smpsNoAttack, $01
0008A1EE E108                       	smpsAlterNote       $08
0008A1F0 E701                       	dc.b	smpsNoAttack, $01
0008A1F2 E10B                       	smpsAlterNote       $0B
0008A1F4 E701                       	dc.b	smpsNoAttack, $01
0008A1F8 E0C0                       	smpsPan             panCenter, $00
0008A1FA E601                       	smpsAlterVol        $01
0008A1FC E108                       	smpsAlterNote       $08
0008A1FE A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008A20A 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008A212 E080                       	smpsPan             panLeft, $00
0008A214 07                         	dc.b	$07
0008A215 E6FF                       	smpsAlterVol        $FF
0008A217 E10D                       	smpsAlterNote       $0D
0008A219 B60D                       	dc.b	nF4, $0D
0008A21B E10A                       	smpsAlterNote       $0A
0008A21D E701                       	dc.b	smpsNoAttack, $01
0008A21F E106                       	smpsAlterNote       $06
0008A221 E701                       	dc.b	smpsNoAttack, $01
0008A223 E10A                       	smpsAlterNote       $0A
0008A225 E701                       	dc.b	smpsNoAttack, $01
0008A227 E110                       	smpsAlterNote       $10
0008A229 E701                       	dc.b	smpsNoAttack, $01
0008A22B E111                       	smpsAlterNote       $11
0008A22D E701                       	dc.b	smpsNoAttack, $01
0008A22F E10D                       	smpsAlterNote       $0D
0008A231 E701                       	dc.b	smpsNoAttack, $01
0008A233 E107                       	smpsAlterNote       $07
0008A235 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A239 E10A                       	smpsAlterNote       $0A
0008A23B E701                       	dc.b	smpsNoAttack, $01
0008A23D E110                       	smpsAlterNote       $10
0008A23F E701                       	dc.b	smpsNoAttack, $01
0008A241 E111                       	smpsAlterNote       $11
0008A243 8001                       	dc.b	nRst, $01
0008A245 E10D                       	smpsAlterNote       $0D
0008A247 B80D                       	dc.b	nG4, $0D
0008A249 E10A                       	smpsAlterNote       $0A
0008A24B E701                       	dc.b	smpsNoAttack, $01
0008A24D E106                       	smpsAlterNote       $06
0008A24F E701                       	dc.b	smpsNoAttack, $01
0008A251 E10A                       	smpsAlterNote       $0A
0008A253 E701                       	dc.b	smpsNoAttack, $01
0008A255 E110                       	smpsAlterNote       $10
0008A257 E701                       	dc.b	smpsNoAttack, $01
0008A259 E111                       	smpsAlterNote       $11
0008A25B E701                       	dc.b	smpsNoAttack, $01
0008A25D E10D                       	smpsAlterNote       $0D
0008A25F E701                       	dc.b	smpsNoAttack, $01
0008A261 E107                       	smpsAlterNote       $07
0008A263 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A267 E10D                       	smpsAlterNote       $0D
0008A269 E701                       	dc.b	smpsNoAttack, $01
0008A26B E110                       	smpsAlterNote       $10
0008A26D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A271 E10A                       	smpsAlterNote       $0A
0008A273 E701                       	dc.b	smpsNoAttack, $01
0008A275 E106                       	smpsAlterNote       $06
0008A277 E701                       	dc.b	smpsNoAttack, $01
0008A279 E107                       	smpsAlterNote       $07
0008A27B E701                       	dc.b	smpsNoAttack, $01
0008A27D E10D                       	smpsAlterNote       $0D
0008A27F E701                       	dc.b	smpsNoAttack, $01
0008A281 E111                       	smpsAlterNote       $11
0008A283 E701                       	dc.b	smpsNoAttack, $01
0008A285 E10D                       	smpsAlterNote       $0D
0008A287 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A28B E10F                       	smpsAlterNote       $0F
0008A28D BA0D                       	dc.b	nA4, $0D
0008A28F E109                       	smpsAlterNote       $09
0008A291 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A295 E10C                       	smpsAlterNote       $0C
0008A297 E701                       	dc.b	smpsNoAttack, $01
0008A299 E112                       	smpsAlterNote       $12
0008A29B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A29F E10C                       	smpsAlterNote       $0C
0008A2A1 E701                       	dc.b	smpsNoAttack, $01
0008A2A3 E109                       	smpsAlterNote       $09
0008A2A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2A9 E10F                       	smpsAlterNote       $0F
0008A2AB E701                       	dc.b	smpsNoAttack, $01
0008A2AD E113                       	smpsAlterNote       $13
0008A2AF E701                       	dc.b	smpsNoAttack, $01
0008A2B1 E112                       	smpsAlterNote       $12
0008A2B3 E701                       	dc.b	smpsNoAttack, $01
0008A2B5 E10C                       	smpsAlterNote       $0C
0008A2B7 E701                       	dc.b	smpsNoAttack, $01
0008A2B9 E108                       	smpsAlterNote       $08
0008A2BB E701                       	dc.b	smpsNoAttack, $01
0008A2BD E10C                       	smpsAlterNote       $0C
0008A2BF E701                       	dc.b	smpsNoAttack, $01
0008A2C1 E10F                       	smpsAlterNote       $0F
0008A2C3 E701                       	dc.b	smpsNoAttack, $01
0008A2C5 E113                       	smpsAlterNote       $13
0008A2C7 E701                       	dc.b	smpsNoAttack, $01
0008A2C9 E10F                       	smpsAlterNote       $0F
0008A2CB E701                       	dc.b	smpsNoAttack, $01
0008A2CD E109                       	smpsAlterNote       $09
0008A2CF E701                       	dc.b	smpsNoAttack, $01
0008A2D1 E108                       	smpsAlterNote       $08
0008A2D3 E701                       	dc.b	smpsNoAttack, $01
0008A2D5 E10C                       	smpsAlterNote       $0C
0008A2D7 E701                       	dc.b	smpsNoAttack, $01
0008A2D9 E112                       	smpsAlterNote       $12
0008A2DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2DF E10F                       	smpsAlterNote       $0F
0008A2E1 E701                       	dc.b	smpsNoAttack, $01
0008A2E3 E109                       	smpsAlterNote       $09
0008A2E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2E9 E10F                       	smpsAlterNote       $0F
0008A2EB E701                       	dc.b	smpsNoAttack, $01
0008A2ED E112                       	smpsAlterNote       $12
0008A2EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2F3 E10C                       	smpsAlterNote       $0C
0008A2F5 E701                       	dc.b	smpsNoAttack, $01
0008A2F7 E108                       	smpsAlterNote       $08
0008A2F9 E701                       	dc.b	smpsNoAttack, $01
0008A2FB E109                       	smpsAlterNote       $09
0008A2FD E701                       	dc.b	smpsNoAttack, $01
0008A2FF E10C                       	smpsAlterNote       $0C
0008A301 B50A                       	dc.b	nE4, $0A
0008A303 E10D                       	smpsAlterNote       $0D
0008A305 B60E                       	dc.b	nF4, $0E
0008A307 E107                       	smpsAlterNote       $07
0008A309 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A30D E10D                       	smpsAlterNote       $0D
0008A30F E701                       	dc.b	smpsNoAttack, $01
0008A311 E110                       	smpsAlterNote       $10
0008A313 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A317 E10A                       	smpsAlterNote       $0A
0008A319 E701                       	dc.b	smpsNoAttack, $01
0008A31B E106                       	smpsAlterNote       $06
0008A31D E701                       	dc.b	smpsNoAttack, $01
0008A31F E107                       	smpsAlterNote       $07
0008A321 E701                       	dc.b	smpsNoAttack, $01
0008A323 E10D                       	smpsAlterNote       $0D
0008A325 E701                       	dc.b	smpsNoAttack, $01
0008A327 E111                       	smpsAlterNote       $11
0008A329 E701                       	dc.b	smpsNoAttack, $01
0008A32B E10D                       	smpsAlterNote       $0D
0008A32D B80D                       	dc.b	nG4, $0D
0008A32F E10A                       	smpsAlterNote       $0A
0008A331 E701                       	dc.b	smpsNoAttack, $01
0008A333 E107                       	smpsAlterNote       $07
0008A335 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A339 E10D                       	smpsAlterNote       $0D
0008A33B E701                       	dc.b	smpsNoAttack, $01
0008A33D E111                       	smpsAlterNote       $11
0008A33F E701                       	dc.b	smpsNoAttack, $01
0008A341 E110                       	smpsAlterNote       $10
0008A343 E701                       	dc.b	smpsNoAttack, $01
0008A345 E10A                       	smpsAlterNote       $0A
0008A347 E701                       	dc.b	smpsNoAttack, $01
0008A349 E106                       	smpsAlterNote       $06
0008A34B E701                       	dc.b	smpsNoAttack, $01
0008A34D E10A                       	smpsAlterNote       $0A
0008A34F E701                       	dc.b	smpsNoAttack, $01
0008A351 E10D                       	smpsAlterNote       $0D
0008A353 E701                       	dc.b	smpsNoAttack, $01
0008A355 E111                       	smpsAlterNote       $11
0008A357 E701                       	dc.b	smpsNoAttack, $01
0008A359 E10D                       	smpsAlterNote       $0D
0008A35B E701                       	dc.b	smpsNoAttack, $01
0008A35D E107                       	smpsAlterNote       $07
0008A35F E701                       	dc.b	smpsNoAttack, $01
0008A361 E106                       	smpsAlterNote       $06
0008A363 E701                       	dc.b	smpsNoAttack, $01
0008A365 E10A                       	smpsAlterNote       $0A
0008A367 E701                       	dc.b	smpsNoAttack, $01
0008A369 E110                       	smpsAlterNote       $10
0008A36B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A36F E10D                       	smpsAlterNote       $0D
0008A371 E701                       	dc.b	smpsNoAttack, $01
0008A373 E10F                       	smpsAlterNote       $0F
0008A375 BA0D                       	dc.b	nA4, $0D
0008A377 E10C                       	smpsAlterNote       $0C
0008A379 E701                       	dc.b	smpsNoAttack, $01
0008A37B E108                       	smpsAlterNote       $08
0008A37D E701                       	dc.b	smpsNoAttack, $01
0008A37F E109                       	smpsAlterNote       $09
0008A381 E701                       	dc.b	smpsNoAttack, $01
0008A383 E10F                       	smpsAlterNote       $0F
0008A385 E701                       	dc.b	smpsNoAttack, $01
0008A387 E113                       	smpsAlterNote       $13
0008A389 E701                       	dc.b	smpsNoAttack, $01
0008A38B E10F                       	smpsAlterNote       $0F
0008A38D E701                       	dc.b	smpsNoAttack, $01
0008A38F E10C                       	smpsAlterNote       $0C
0008A391 E701                       	dc.b	smpsNoAttack, $01
0008A393 E108                       	smpsAlterNote       $08
0008A395 E701                       	dc.b	smpsNoAttack, $01
0008A397 E10C                       	smpsAlterNote       $0C
0008A399 E701                       	dc.b	smpsNoAttack, $01
0008A39B E112                       	smpsAlterNote       $12
0008A39D E701                       	dc.b	smpsNoAttack, $01
0008A39F E113                       	smpsAlterNote       $13
0008A3A1 E701                       	dc.b	smpsNoAttack, $01
0008A3A3 E10F                       	smpsAlterNote       $0F
0008A3A5 E701                       	dc.b	smpsNoAttack, $01
0008A3A7 E109                       	smpsAlterNote       $09
0008A3A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3AD E10C                       	smpsAlterNote       $0C
0008A3AF E701                       	dc.b	smpsNoAttack, $01
0008A3B1 E112                       	smpsAlterNote       $12
0008A3B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3B7 E10C                       	smpsAlterNote       $0C
0008A3B9 E701                       	dc.b	smpsNoAttack, $01
0008A3BB E109                       	smpsAlterNote       $09
0008A3BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3C1 E10F                       	smpsAlterNote       $0F
0008A3C3 E701                       	dc.b	smpsNoAttack, $01
0008A3C5 E113                       	smpsAlterNote       $13
0008A3C7 E701                       	dc.b	smpsNoAttack, $01
0008A3C9 E112                       	smpsAlterNote       $12
0008A3CB E701                       	dc.b	smpsNoAttack, $01
0008A3CD E10C                       	smpsAlterNote       $0C
0008A3CF E701                       	dc.b	smpsNoAttack, $01
0008A3D1 E109                       	smpsAlterNote       $09
0008A3D3 8001                       	dc.b	nRst, $01
0008A3D5 E10D                       	smpsAlterNote       $0D
0008A3D7 B60A                       	dc.b	nF4, $0A
0008A3D9 E10C                       	smpsAlterNote       $0C
0008A3DB B506 8001                  	dc.b	nE4, $06, nRst, $01
0008A3DF E10B                       	smpsAlterNote       $0B
0008A3E1 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008A3E5 E10C                       	smpsAlterNote       $0C
0008A3E7 B503                       	dc.b	nE4, $03
0008A3E9 E10D                       	smpsAlterNote       $0D
0008A3EB B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008A3F5 E10C                       	smpsAlterNote       $0C
0008A3F7 E701                       	dc.b	smpsNoAttack, $01
0008A3F9 E108                       	smpsAlterNote       $08
0008A3FB E701                       	dc.b	smpsNoAttack, $01
0008A3FD E10C                       	smpsAlterNote       $0C
0008A3FF E701                       	dc.b	smpsNoAttack, $01
0008A401 E112                       	smpsAlterNote       $12
0008A403 E701                       	dc.b	smpsNoAttack, $01
0008A405 E113                       	smpsAlterNote       $13
0008A407 E701                       	dc.b	smpsNoAttack, $01
0008A409 E10F                       	smpsAlterNote       $0F
0008A40B E701                       	dc.b	smpsNoAttack, $01
0008A40D E109                       	smpsAlterNote       $09
0008A40F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A413 E10C                       	smpsAlterNote       $0C
0008A415 E701                       	dc.b	smpsNoAttack, $01
0008A417 E112                       	smpsAlterNote       $12
0008A419 E701                       	dc.b	smpsNoAttack, $01
0008A41B E113                       	smpsAlterNote       $13
0008A41D 8001                       	dc.b	nRst, $01
0008A41F E10D                       	smpsAlterNote       $0D
0008A421 C20D                       	dc.b	nF5, $0D
0008A423 E10A                       	smpsAlterNote       $0A
0008A425 E701                       	dc.b	smpsNoAttack, $01
0008A427 E106                       	smpsAlterNote       $06
0008A429 E701                       	dc.b	smpsNoAttack, $01
0008A42B E10A                       	smpsAlterNote       $0A
0008A42D E701                       	dc.b	smpsNoAttack, $01
0008A42F E110                       	smpsAlterNote       $10
0008A431 E701                       	dc.b	smpsNoAttack, $01
0008A433 E111                       	smpsAlterNote       $11
0008A435 E701                       	dc.b	smpsNoAttack, $01
0008A437 E10D                       	smpsAlterNote       $0D
0008A439 E701                       	dc.b	smpsNoAttack, $01
0008A43B E107                       	smpsAlterNote       $07
0008A43D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A441 E10A                       	smpsAlterNote       $0A
0008A443 E701                       	dc.b	smpsNoAttack, $01
0008A445 E110                       	smpsAlterNote       $10
0008A447 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A44B E10A                       	smpsAlterNote       $0A
0008A44D E701                       	dc.b	smpsNoAttack, $01
0008A44F E107                       	smpsAlterNote       $07
0008A451 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A455 E10D                       	smpsAlterNote       $0D
0008A457 E701                       	dc.b	smpsNoAttack, $01
0008A459 E111                       	smpsAlterNote       $11
0008A45B E701                       	dc.b	smpsNoAttack, $01
0008A45D E110                       	smpsAlterNote       $10
0008A45F E701                       	dc.b	smpsNoAttack, $01
0008A461 E10A                       	smpsAlterNote       $0A
0008A463 E701                       	dc.b	smpsNoAttack, $01
0008A465 E106                       	smpsAlterNote       $06
0008A467 E701                       	dc.b	smpsNoAttack, $01
0008A469 E10A                       	smpsAlterNote       $0A
0008A46B E701                       	dc.b	smpsNoAttack, $01
0008A46D E10D                       	smpsAlterNote       $0D
0008A46F E701                       	dc.b	smpsNoAttack, $01
0008A471 E111                       	smpsAlterNote       $11
0008A473 E701                       	dc.b	smpsNoAttack, $01
0008A475 E10D                       	smpsAlterNote       $0D
0008A477 E701                       	dc.b	smpsNoAttack, $01
0008A479 E107                       	smpsAlterNote       $07
0008A47B E701                       	dc.b	smpsNoAttack, $01
0008A47D E106                       	smpsAlterNote       $06
0008A47F E701                       	dc.b	smpsNoAttack, $01
0008A481 E10A                       	smpsAlterNote       $0A
0008A483 E701                       	dc.b	smpsNoAttack, $01
0008A485 E110                       	smpsAlterNote       $10
0008A487 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A48B E10D                       	smpsAlterNote       $0D
0008A48D E701                       	dc.b	smpsNoAttack, $01
0008A48F E107                       	smpsAlterNote       $07
0008A491 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A495 E10D                       	smpsAlterNote       $0D
0008A497 E701                       	dc.b	smpsNoAttack, $01
0008A499 E110                       	smpsAlterNote       $10
0008A49B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A49F E10A                       	smpsAlterNote       $0A
0008A4A1 E701                       	dc.b	smpsNoAttack, $01
0008A4A3 E106                       	smpsAlterNote       $06
0008A4A5 E701                       	dc.b	smpsNoAttack, $01
0008A4A7 E107                       	smpsAlterNote       $07
0008A4A9 E701                       	dc.b	smpsNoAttack, $01
0008A4AB E10D                       	smpsAlterNote       $0D
0008A4AD E701                       	dc.b	smpsNoAttack, $01
0008A4AF E111                       	smpsAlterNote       $11
0008A4B1 E701                       	dc.b	smpsNoAttack, $01
0008A4B3 E10D                       	smpsAlterNote       $0D
0008A4B5 E701                       	dc.b	smpsNoAttack, $01
0008A4B7 E10A                       	smpsAlterNote       $0A
0008A4B9 E701                       	dc.b	smpsNoAttack, $01
0008A4BB E107                       	smpsAlterNote       $07
0008A4BD 8001                       	dc.b	nRst, $01
0008A4BF E10D                       	smpsAlterNote       $0D
0008A4C1 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008A4C7 E601                       	smpsAlterVol        $01
0008A4C9 E110                       	smpsAlterNote       $10
0008A4CB BB0D                       	dc.b	nBb4, $0D
0008A4CD E10A                       	smpsAlterNote       $0A
0008A4CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4D3 E110                       	smpsAlterNote       $10
0008A4D5 E701                       	dc.b	smpsNoAttack, $01
0008A4D7 E113                       	smpsAlterNote       $13
0008A4D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4DD E10D                       	smpsAlterNote       $0D
0008A4DF E701                       	dc.b	smpsNoAttack, $01
0008A4E1 E109                       	smpsAlterNote       $09
0008A4E3 E701                       	dc.b	smpsNoAttack, $01
0008A4E5 E10A                       	smpsAlterNote       $0A
0008A4E7 E701                       	dc.b	smpsNoAttack, $01
0008A4E9 E110                       	smpsAlterNote       $10
0008A4EB E701                       	dc.b	smpsNoAttack, $01
0008A4ED E114                       	smpsAlterNote       $14
0008A4EF E701                       	dc.b	smpsNoAttack, $01
0008A4F1 E110                       	smpsAlterNote       $10
0008A4F3 E701                       	dc.b	smpsNoAttack, $01
0008A4F5 E10D                       	smpsAlterNote       $0D
0008A4F7 E701                       	dc.b	smpsNoAttack, $01
0008A4F9 E109                       	smpsAlterNote       $09
0008A4FB E701                       	dc.b	smpsNoAttack, $01
0008A4FD E10A                       	smpsAlterNote       $0A
0008A4FF 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008A503 E107                       	smpsAlterNote       $07
0008A505 E701                       	dc.b	smpsNoAttack, $01
0008A507 E103                       	smpsAlterNote       $03
0008A509 E701                       	dc.b	smpsNoAttack, $01
0008A50B E107                       	smpsAlterNote       $07
0008A50D E701                       	dc.b	smpsNoAttack, $01
0008A50F E10D                       	smpsAlterNote       $0D
0008A511 E701                       	dc.b	smpsNoAttack, $01
0008A513 E10E                       	smpsAlterNote       $0E
0008A515 E701                       	dc.b	smpsNoAttack, $01
0008A517 E10A                       	smpsAlterNote       $0A
0008A519 E701                       	dc.b	smpsNoAttack, $01
0008A51B E104                       	smpsAlterNote       $04
0008A51D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A521 E107                       	smpsAlterNote       $07
0008A523 E701                       	dc.b	smpsNoAttack, $01
0008A525 E10D                       	smpsAlterNote       $0D
0008A527 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A52B E107                       	smpsAlterNote       $07
0008A52D E701                       	dc.b	smpsNoAttack, $01
0008A52F E104                       	smpsAlterNote       $04
0008A531 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A535 E10B                       	smpsAlterNote       $0B
0008A537 BF0D                       	dc.b	nD5, $0D
0008A539 E108                       	smpsAlterNote       $08
0008A53B E701                       	dc.b	smpsNoAttack, $01
0008A53D E105                       	smpsAlterNote       $05
0008A53F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A543 E10B                       	smpsAlterNote       $0B
0008A545 E701                       	dc.b	smpsNoAttack, $01
0008A547 E10F                       	smpsAlterNote       $0F
0008A549 E701                       	dc.b	smpsNoAttack, $01
0008A54B E10E                       	smpsAlterNote       $0E
0008A54D E701                       	dc.b	smpsNoAttack, $01
0008A54F E108                       	smpsAlterNote       $08
0008A551 E701                       	dc.b	smpsNoAttack, $01
0008A553 E104                       	smpsAlterNote       $04
0008A555 E701                       	dc.b	smpsNoAttack, $01
0008A557 E108                       	smpsAlterNote       $08
0008A559 E701                       	dc.b	smpsNoAttack, $01
0008A55B E10B                       	smpsAlterNote       $0B
0008A55D E701                       	dc.b	smpsNoAttack, $01
0008A55F E10F                       	smpsAlterNote       $0F
0008A561 E701                       	dc.b	smpsNoAttack, $01
0008A563 E10B                       	smpsAlterNote       $0B
0008A565 E701                       	dc.b	smpsNoAttack, $01
0008A567 E105                       	smpsAlterNote       $05
0008A569 E701                       	dc.b	smpsNoAttack, $01
0008A56B E104                       	smpsAlterNote       $04
0008A56D E701                       	dc.b	smpsNoAttack, $01
0008A56F E105                       	smpsAlterNote       $05
0008A571 8001                       	dc.b	nRst, $01
0008A573 E10C                       	smpsAlterNote       $0C
0008A575 C10C                       	dc.b	nE5, $0C
0008A577 E10D                       	smpsAlterNote       $0D
0008A579 C201                       	dc.b	nF5, $01
0008A57B E10E                       	smpsAlterNote       $0E
0008A57D C301 8001                  	dc.b	nFs5, $01, nRst, $01
0008A581 E10D                       	smpsAlterNote       $0D
0008A583 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008A587 E10A                       	smpsAlterNote       $0A
0008A589 E701                       	dc.b	smpsNoAttack, $01
0008A58B E106                       	smpsAlterNote       $06
0008A58D E701                       	dc.b	smpsNoAttack, $01
0008A58F E10A                       	smpsAlterNote       $0A
0008A591 E701                       	dc.b	smpsNoAttack, $01
0008A593 E10D                       	smpsAlterNote       $0D
0008A595 E701                       	dc.b	smpsNoAttack, $01
0008A597 E111                       	smpsAlterNote       $11
0008A599 E701                       	dc.b	smpsNoAttack, $01
0008A59B E10D                       	smpsAlterNote       $0D
0008A59D E701                       	dc.b	smpsNoAttack, $01
0008A59F E107                       	smpsAlterNote       $07
0008A5A1 E701                       	dc.b	smpsNoAttack, $01
0008A5A3 E106                       	smpsAlterNote       $06
0008A5A5 E701                       	dc.b	smpsNoAttack, $01
0008A5A7 E10A                       	smpsAlterNote       $0A
0008A5A9 E701                       	dc.b	smpsNoAttack, $01
0008A5AB E110                       	smpsAlterNote       $10
0008A5AD E701                       	dc.b	smpsNoAttack, $01
0008A5AF E111                       	smpsAlterNote       $11
0008A5B1 8001                       	dc.b	nRst, $01
0008A5B3 E10D                       	smpsAlterNote       $0D
0008A5B5 C40D                       	dc.b	nG5, $0D
0008A5B7 E10A                       	smpsAlterNote       $0A
0008A5B9 E701                       	dc.b	smpsNoAttack, $01
0008A5BB E106                       	smpsAlterNote       $06
0008A5BD E701                       	dc.b	smpsNoAttack, $01
0008A5BF E10A                       	smpsAlterNote       $0A
0008A5C1 E701                       	dc.b	smpsNoAttack, $01
0008A5C3 E10D                       	smpsAlterNote       $0D
0008A5C5 E701                       	dc.b	smpsNoAttack, $01
0008A5C7 E10C                       	smpsAlterNote       $0C
0008A5C9 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008A5D5 8001                       	dc.b	nRst, $01
0008A5D7 E10D                       	smpsAlterNote       $0D
0008A5D9 C20D                       	dc.b	nF5, $0D
0008A5DB E10A                       	smpsAlterNote       $0A
0008A5DD E701                       	dc.b	smpsNoAttack, $01
0008A5DF E106                       	smpsAlterNote       $06
0008A5E1 E701                       	dc.b	smpsNoAttack, $01
0008A5E3 E10A                       	smpsAlterNote       $0A
0008A5E5 E701                       	dc.b	smpsNoAttack, $01
0008A5E7 E110                       	smpsAlterNote       $10
0008A5E9 E701                       	dc.b	smpsNoAttack, $01
0008A5EB E111                       	smpsAlterNote       $11
0008A5ED E701                       	dc.b	smpsNoAttack, $01
0008A5EF E10D                       	smpsAlterNote       $0D
0008A5F1 E701                       	dc.b	smpsNoAttack, $01
0008A5F3 E107                       	smpsAlterNote       $07
0008A5F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5F9 E10A                       	smpsAlterNote       $0A
0008A5FB E701                       	dc.b	smpsNoAttack, $01
0008A5FD E110                       	smpsAlterNote       $10
0008A5FF E701                       	dc.b	smpsNoAttack, $01
0008A601 E111                       	smpsAlterNote       $11
0008A603 8001                       	dc.b	nRst, $01
0008A605 E10F                       	smpsAlterNote       $0F
0008A607 C60A                       	dc.b	nA5, $0A
0008A609 E10D                       	smpsAlterNote       $0D
0008A60B C406 8001                  	dc.b	nG5, $06, nRst, $01
0008A60F E10C                       	smpsAlterNote       $0C
0008A611 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008A61D 8001                       	dc.b	nRst, $01
0008A61F E10D                       	smpsAlterNote       $0D
0008A621 C20D                       	dc.b	nF5, $0D
0008A623 E107                       	smpsAlterNote       $07
0008A625 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A629 E10A                       	smpsAlterNote       $0A
0008A62B E701                       	dc.b	smpsNoAttack, $01
0008A62D E110                       	smpsAlterNote       $10
0008A62F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A633 E10A                       	smpsAlterNote       $0A
0008A635 E701                       	dc.b	smpsNoAttack, $01
0008A637 E107                       	smpsAlterNote       $07
0008A639 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A63D E10D                       	smpsAlterNote       $0D
0008A63F E701                       	dc.b	smpsNoAttack, $01
0008A641 E111                       	smpsAlterNote       $11
0008A643 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A647 E10D                       	smpsAlterNote       $0D
0008A649 C40D                       	dc.b	nG5, $0D
0008A64B E107                       	smpsAlterNote       $07
0008A64D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A651 E10A                       	smpsAlterNote       $0A
0008A653 E701                       	dc.b	smpsNoAttack, $01
0008A655 E10D                       	smpsAlterNote       $0D
0008A657 8001                       	dc.b	nRst, $01
0008A659 E10C                       	smpsAlterNote       $0C
0008A65B C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008A667 E10D                       	smpsAlterNote       $0D
0008A669 C20E                       	dc.b	nF5, $0E
0008A66B E107                       	smpsAlterNote       $07
0008A66D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A671 E10D                       	smpsAlterNote       $0D
0008A673 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A679 E0C0                       	smpsPan             panCenter, $00
0008A67B E603                       	smpsAlterVol        $03
0008A67D E108                       	smpsAlterNote       $08
0008A67F B406                       	dc.b	nEb4, $06
0008A681 E10C                       	smpsAlterNote       $0C
0008A683 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008A687 E108                       	smpsAlterNote       $08
0008A689 B403                       	dc.b	nEb4, $03
0008A68B E109                       	smpsAlterNote       $09
0008A68D B803 8001                  	dc.b	nG4, $03, nRst, $01
0008A691 E10C                       	smpsAlterNote       $0C
0008A693 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0008A69B 03                         	dc.b	$03
0008A69C E6FD                       	smpsAlterVol        $FD
0008A69E F6F1 F4                    	smpsJump            music84_Jump00
0008A6A1                            
0008A6A1                            ; PSG1 Data
0008A6A1                            music84_PSG1:
0008A6A1 E1FD                       	smpsAlterNote       $FD
0008A6A3 EC04                       	smpsPSGAlterVol     $04
0008A6A5 9203                       	dc.b	nF1, $03
0008A6A7 E1FE                       	smpsAlterNote       $FE
0008A6A9 9603                       	dc.b	nA1, $03
0008A6AB EC04                       	smpsPSGAlterVol     $04
0008A6AD E701                       	dc.b	smpsNoAttack, $01
0008A6AF E1FF                       	smpsAlterNote       $FF
0008A6B1 ECFC                       	smpsPSGAlterVol     $FC
0008A6B3 9B03                       	dc.b	nD2, $03
0008A6B5 E1FD                       	smpsAlterNote       $FD
0008A6B7 9403                       	dc.b	nG1, $03
0008A6B9 EC04                       	smpsPSGAlterVol     $04
0008A6BB E701                       	dc.b	smpsNoAttack, $01
0008A6BD E1FE                       	smpsAlterNote       $FE
0008A6BF ECFC                       	smpsPSGAlterVol     $FC
0008A6C1 9703                       	dc.b	nBb1, $03
0008A6C3 E1FF                       	smpsAlterNote       $FF
0008A6C5 9B03                       	dc.b	nD2, $03
0008A6C7 EC04                       	smpsPSGAlterVol     $04
0008A6C9 E701                       	dc.b	smpsNoAttack, $01
0008A6CB E1FE                       	smpsAlterNote       $FE
0008A6CD ECFC                       	smpsPSGAlterVol     $FC
0008A6CF A002                       	dc.b	nG2, $02
0008A6D1 EC04                       	smpsPSGAlterVol     $04
0008A6D3 E701                       	dc.b	smpsNoAttack, $01
0008A6D5 E1FF                       	smpsAlterNote       $FF
0008A6D7 ECFC                       	smpsPSGAlterVol     $FC
0008A6D9 A203                       	dc.b	nA2, $03
0008A6DB EC0B                       	smpsPSGAlterVol     $0B
0008A6DD 800A                       	dc.b	nRst, $0A
0008A6DF E105                       	smpsAlterNote       $05
0008A6E1 01                         	dc.b	$01
0008A6E2 E1FC                       	smpsAlterNote       $FC
0008A6E4 01                         	dc.b	$01
0008A6E5 E105                       	smpsAlterNote       $05
0008A6E7 01                         	dc.b	$01
0008A6E8 E1FD                       	smpsAlterNote       $FD
0008A6EA 01                         	dc.b	$01
0008A6EB E105                       	smpsAlterNote       $05
0008A6ED 01                         	dc.b	$01
0008A6EE E1FD                       	smpsAlterNote       $FD
0008A6F0 01                         	dc.b	$01
0008A6F1 E1FA                       	smpsAlterNote       $FA
0008A6F3 01                         	dc.b	$01
0008A6F4 E1FC                       	smpsAlterNote       $FC
0008A6F6 01                         	dc.b	$01
0008A6F7 E105                       	smpsAlterNote       $05
0008A6F9 01                         	dc.b	$01
0008A6FA E108                       	smpsAlterNote       $08
0008A6FC 0101                       	dc.b	$01, $01
0008A6FE E105                       	smpsAlterNote       $05
0008A700 01                         	dc.b	$01
0008A701 E1FA                       	smpsAlterNote       $FA
0008A703 0101                       	dc.b	$01, $01
0008A705 E1FD                       	smpsAlterNote       $FD
0008A707 01                         	dc.b	$01
0008A708 E105                       	smpsAlterNote       $05
0008A70A 01                         	dc.b	$01
0008A70B E108                       	smpsAlterNote       $08
0008A70D 01                         	dc.b	$01
0008A70E E105                       	smpsAlterNote       $05
0008A710 01                         	dc.b	$01
0008A711 E1FC                       	smpsAlterNote       $FC
0008A713 01                         	dc.b	$01
0008A714 E105                       	smpsAlterNote       $05
0008A716 01                         	dc.b	$01
0008A717 E1FD                       	smpsAlterNote       $FD
0008A719 01                         	dc.b	$01
0008A71A                            
0008A71A                            music84_Jump07:
0008A71A E105                       	smpsAlterNote       $05
0008A71C 8001                       	dc.b	nRst, $01
0008A71E E1FD                       	smpsAlterNote       $FD
0008A720 01                         	dc.b	$01
0008A721 E1FA                       	smpsAlterNote       $FA
0008A723 01                         	dc.b	$01
0008A724 E1FC                       	smpsAlterNote       $FC
0008A726 01                         	dc.b	$01
0008A727 E1FD                       	smpsAlterNote       $FD
0008A729 ECF5                       	smpsPSGAlterVol     $F5
0008A72B 9206                       	dc.b	nF1, $06
0008A72D EC04                       	smpsPSGAlterVol     $04
0008A72F E701                       	dc.b	smpsNoAttack, $01
0008A731 EC07                       	smpsPSGAlterVol     $07
0008A733 8003                       	dc.b	nRst, $03
0008A735 ECF5                       	smpsPSGAlterVol     $F5
0008A737 9206                       	dc.b	nF1, $06
0008A739 EC04                       	smpsPSGAlterVol     $04
0008A73B E701                       	dc.b	smpsNoAttack, $01
0008A73D EC07                       	smpsPSGAlterVol     $07
0008A73F 8006                       	dc.b	nRst, $06
0008A741 E100                       	smpsAlterNote       $00
0008A743 01                         	dc.b	$01
0008A744 E104                       	smpsAlterNote       $04
0008A746 01                         	dc.b	$01
0008A747 E100                       	smpsAlterNote       $00
0008A749 01                         	dc.b	$01
0008A74A E1FB                       	smpsAlterNote       $FB
0008A74C 01                         	dc.b	$01
0008A74D E1FD                       	smpsAlterNote       $FD
0008A74F ECF5                       	smpsPSGAlterVol     $F5
0008A751 9406                       	dc.b	nG1, $06
0008A753 EC04                       	smpsPSGAlterVol     $04
0008A755 E701                       	dc.b	smpsNoAttack, $01
0008A757 EC07                       	smpsPSGAlterVol     $07
0008A759 8003                       	dc.b	nRst, $03
0008A75B ECF5                       	smpsPSGAlterVol     $F5
0008A75D 9407                       	dc.b	nG1, $07
0008A75F EC0B                       	smpsPSGAlterVol     $0B
0008A761 8006                       	dc.b	nRst, $06
0008A763 E100                       	smpsAlterNote       $00
0008A765 01                         	dc.b	$01
0008A766 E103                       	smpsAlterNote       $03
0008A768 0101                       	dc.b	$01, $01
0008A76A E1FD                       	smpsAlterNote       $FD
0008A76C 01                         	dc.b	$01
0008A76D ECF5                       	smpsPSGAlterVol     $F5
0008A76F 9207                       	dc.b	nF1, $07
0008A771 EC0B                       	smpsPSGAlterVol     $0B
0008A773 8004                       	dc.b	nRst, $04
0008A775 ECF5                       	smpsPSGAlterVol     $F5
0008A777 9206                       	dc.b	nF1, $06
0008A779 EC04                       	smpsPSGAlterVol     $04
0008A77B E701                       	dc.b	smpsNoAttack, $01
0008A77D EC07                       	smpsPSGAlterVol     $07
0008A77F 8006                       	dc.b	nRst, $06
0008A781 E103                       	smpsAlterNote       $03
0008A783 01                         	dc.b	$01
0008A784 E104                       	smpsAlterNote       $04
0008A786 01                         	dc.b	$01
0008A787 E100                       	smpsAlterNote       $00
0008A789 01                         	dc.b	$01
0008A78A E1FA                       	smpsAlterNote       $FA
0008A78C 01                         	dc.b	$01
0008A78D E1FD                       	smpsAlterNote       $FD
0008A78F ECF5                       	smpsPSGAlterVol     $F5
0008A791 9206                       	dc.b	nF1, $06
0008A793 EC04                       	smpsPSGAlterVol     $04
0008A795 E701                       	dc.b	smpsNoAttack, $01
0008A797 EC07                       	smpsPSGAlterVol     $07
0008A799 8003                       	dc.b	nRst, $03
0008A79B ECF5                       	smpsPSGAlterVol     $F5
0008A79D 9106                       	dc.b	nE1, $06
0008A79F EC04                       	smpsPSGAlterVol     $04
0008A7A1 E701                       	dc.b	smpsNoAttack, $01
0008A7A3 EC07                       	smpsPSGAlterVol     $07
0008A7A5 8006                       	dc.b	nRst, $06
0008A7A7 E100                       	smpsAlterNote       $00
0008A7A9 01                         	dc.b	$01
0008A7AA E104                       	smpsAlterNote       $04
0008A7AC 01                         	dc.b	$01
0008A7AD E100                       	smpsAlterNote       $00
0008A7AF 01                         	dc.b	$01
0008A7B0 E1FD                       	smpsAlterNote       $FD
0008A7B2 01                         	dc.b	$01
0008A7B3 ECF5                       	smpsPSGAlterVol     $F5
0008A7B5 9206                       	dc.b	nF1, $06
0008A7B7 EC04                       	smpsPSGAlterVol     $04
0008A7B9 E701                       	dc.b	smpsNoAttack, $01
0008A7BB EC07                       	smpsPSGAlterVol     $07
0008A7BD 8003                       	dc.b	nRst, $03
0008A7BF ECF5                       	smpsPSGAlterVol     $F5
0008A7C1 9207                       	dc.b	nF1, $07
0008A7C3 EC0B                       	smpsPSGAlterVol     $0B
0008A7C5 8007                       	dc.b	nRst, $07
0008A7C7 E103                       	smpsAlterNote       $03
0008A7C9 0101                       	dc.b	$01, $01
0008A7CB E1FD                       	smpsAlterNote       $FD
0008A7CD 01                         	dc.b	$01
0008A7CE E1FB                       	smpsAlterNote       $FB
0008A7D0 01                         	dc.b	$01
0008A7D1 E1FD                       	smpsAlterNote       $FD
0008A7D3 ECF5                       	smpsPSGAlterVol     $F5
0008A7D5 9406                       	dc.b	nG1, $06
0008A7D7 EC0B                       	smpsPSGAlterVol     $0B
0008A7D9 8004                       	dc.b	nRst, $04
0008A7DB ECF5                       	smpsPSGAlterVol     $F5
0008A7DD 9406                       	dc.b	nG1, $06
0008A7DF EC04                       	smpsPSGAlterVol     $04
0008A7E1 E701                       	dc.b	smpsNoAttack, $01
0008A7E3 EC07                       	smpsPSGAlterVol     $07
0008A7E5 8006                       	dc.b	nRst, $06
0008A7E7 E100                       	smpsAlterNote       $00
0008A7E9 01                         	dc.b	$01
0008A7EA E104                       	smpsAlterNote       $04
0008A7EC 01                         	dc.b	$01
0008A7ED E100                       	smpsAlterNote       $00
0008A7EF 01                         	dc.b	$01
0008A7F0 E1F9                       	smpsAlterNote       $F9
0008A7F2 01                         	dc.b	$01
0008A7F3 E1FD                       	smpsAlterNote       $FD
0008A7F5 ECF5                       	smpsPSGAlterVol     $F5
0008A7F7 9206                       	dc.b	nF1, $06
0008A7F9 EC04                       	smpsPSGAlterVol     $04
0008A7FB E701                       	dc.b	smpsNoAttack, $01
0008A7FD EC07                       	smpsPSGAlterVol     $07
0008A7FF 8003                       	dc.b	nRst, $03
0008A801 ECF5                       	smpsPSGAlterVol     $F5
0008A803 9207                       	dc.b	nF1, $07
0008A805 EC0B                       	smpsPSGAlterVol     $0B
0008A807 8006                       	dc.b	nRst, $06
0008A809 E100                       	smpsAlterNote       $00
0008A80B 01                         	dc.b	$01
0008A80C E104                       	smpsAlterNote       $04
0008A80E 01                         	dc.b	$01
0008A80F E103                       	smpsAlterNote       $03
0008A811 01                         	dc.b	$01
0008A812 E1FD                       	smpsAlterNote       $FD
0008A814 01                         	dc.b	$01
0008A815 ECF5                       	smpsPSGAlterVol     $F5
0008A817 9207                       	dc.b	nF1, $07
0008A819 EC0B                       	smpsPSGAlterVol     $0B
0008A81B 8004                       	dc.b	nRst, $04
0008A81D ECF5                       	smpsPSGAlterVol     $F5
0008A81F 9206                       	dc.b	nF1, $06
0008A821 EC0B                       	smpsPSGAlterVol     $0B
0008A823 8007                       	dc.b	nRst, $07
0008A825 E103                       	smpsAlterNote       $03
0008A827 0101                       	dc.b	$01, $01
0008A829 E100                       	smpsAlterNote       $00
0008A82B 01                         	dc.b	$01
0008A82C E1FA                       	smpsAlterNote       $FA
0008A82E 01                         	dc.b	$01
0008A82F E1FD                       	smpsAlterNote       $FD
0008A831 ECF5                       	smpsPSGAlterVol     $F5
0008A833 9206                       	dc.b	nF1, $06
0008A835 EC04                       	smpsPSGAlterVol     $04
0008A837 E701                       	dc.b	smpsNoAttack, $01
0008A839 EC07                       	smpsPSGAlterVol     $07
0008A83B 8003                       	dc.b	nRst, $03
0008A83D ECF5                       	smpsPSGAlterVol     $F5
0008A83F 9206                       	dc.b	nF1, $06
0008A841 EC04                       	smpsPSGAlterVol     $04
0008A843 E701                       	dc.b	smpsNoAttack, $01
0008A845 EC07                       	smpsPSGAlterVol     $07
0008A847 8006                       	dc.b	nRst, $06
0008A849 E100                       	smpsAlterNote       $00
0008A84B 01                         	dc.b	$01
0008A84C E104                       	smpsAlterNote       $04
0008A84E 01                         	dc.b	$01
0008A84F E100                       	smpsAlterNote       $00
0008A851 01                         	dc.b	$01
0008A852 E1FD                       	smpsAlterNote       $FD
0008A854 01                         	dc.b	$01
0008A855 ECF5                       	smpsPSGAlterVol     $F5
0008A857 9206                       	dc.b	nF1, $06
0008A859 EC04                       	smpsPSGAlterVol     $04
0008A85B E701                       	dc.b	smpsNoAttack, $01
0008A85D EC07                       	smpsPSGAlterVol     $07
0008A85F 8003                       	dc.b	nRst, $03
0008A861 ECF5                       	smpsPSGAlterVol     $F5
0008A863 9207                       	dc.b	nF1, $07
0008A865 EC0B                       	smpsPSGAlterVol     $0B
0008A867 8007                       	dc.b	nRst, $07
0008A869 E103                       	smpsAlterNote       $03
0008A86B 0101                       	dc.b	$01, $01
0008A86D E1FD                       	smpsAlterNote       $FD
0008A86F 01                         	dc.b	$01
0008A870 E1FA                       	smpsAlterNote       $FA
0008A872 01                         	dc.b	$01
0008A873 E1FD                       	smpsAlterNote       $FD
0008A875 ECF5                       	smpsPSGAlterVol     $F5
0008A877 9206                       	dc.b	nF1, $06
0008A879 EC0B                       	smpsPSGAlterVol     $0B
0008A87B 8004                       	dc.b	nRst, $04
0008A87D ECF5                       	smpsPSGAlterVol     $F5
0008A87F 9206                       	dc.b	nF1, $06
0008A881 EC04                       	smpsPSGAlterVol     $04
0008A883 E701                       	dc.b	smpsNoAttack, $01
0008A885 EC07                       	smpsPSGAlterVol     $07
0008A887 8006                       	dc.b	nRst, $06
0008A889 E103                       	smpsAlterNote       $03
0008A88B 01                         	dc.b	$01
0008A88C E104                       	smpsAlterNote       $04
0008A88E 01                         	dc.b	$01
0008A88F E100                       	smpsAlterNote       $00
0008A891 01                         	dc.b	$01
0008A892 E1FA                       	smpsAlterNote       $FA
0008A894 01                         	dc.b	$01
0008A895 E1FD                       	smpsAlterNote       $FD
0008A897 ECF5                       	smpsPSGAlterVol     $F5
0008A899 9206                       	dc.b	nF1, $06
0008A89B EC04                       	smpsPSGAlterVol     $04
0008A89D E701                       	dc.b	smpsNoAttack, $01
0008A89F EC07                       	smpsPSGAlterVol     $07
0008A8A1 8003                       	dc.b	nRst, $03
0008A8A3 ECF5                       	smpsPSGAlterVol     $F5
0008A8A5 9206                       	dc.b	nF1, $06
0008A8A7 EC04                       	smpsPSGAlterVol     $04
0008A8A9 E701                       	dc.b	smpsNoAttack, $01
0008A8AB EC07                       	smpsPSGAlterVol     $07
0008A8AD 8006                       	dc.b	nRst, $06
0008A8AF E100                       	smpsAlterNote       $00
0008A8B1 01                         	dc.b	$01
0008A8B2 E104                       	smpsAlterNote       $04
0008A8B4 01                         	dc.b	$01
0008A8B5 E103                       	smpsAlterNote       $03
0008A8B7 01                         	dc.b	$01
0008A8B8 E1FD                       	smpsAlterNote       $FD
0008A8BA 01                         	dc.b	$01
0008A8BB ECF5                       	smpsPSGAlterVol     $F5
0008A8BD 9107                       	dc.b	nE1, $07
0008A8BF EC0B                       	smpsPSGAlterVol     $0B
0008A8C1 8004                       	dc.b	nRst, $04
0008A8C3 ECF5                       	smpsPSGAlterVol     $F5
0008A8C5 9106                       	dc.b	nE1, $06
0008A8C7 EC0B                       	smpsPSGAlterVol     $0B
0008A8C9 8007                       	dc.b	nRst, $07
0008A8CB E103                       	smpsAlterNote       $03
0008A8CD 0101                       	dc.b	$01, $01
0008A8CF E100                       	smpsAlterNote       $00
0008A8D1 01                         	dc.b	$01
0008A8D2 E1FA                       	smpsAlterNote       $FA
0008A8D4 01                         	dc.b	$01
0008A8D5 E1FD                       	smpsAlterNote       $FD
0008A8D7 ECF5                       	smpsPSGAlterVol     $F5
0008A8D9 9106                       	dc.b	nE1, $06
0008A8DB EC04                       	smpsPSGAlterVol     $04
0008A8DD E701                       	dc.b	smpsNoAttack, $01
0008A8DF EC07                       	smpsPSGAlterVol     $07
0008A8E1 8003                       	dc.b	nRst, $03
0008A8E3 ECF5                       	smpsPSGAlterVol     $F5
0008A8E5 9106                       	dc.b	nE1, $06
0008A8E7 EC04                       	smpsPSGAlterVol     $04
0008A8E9 E701                       	dc.b	smpsNoAttack, $01
0008A8EB EC07                       	smpsPSGAlterVol     $07
0008A8ED 8006                       	dc.b	nRst, $06
0008A8EF E100                       	smpsAlterNote       $00
0008A8F1 01                         	dc.b	$01
0008A8F2 E104                       	smpsAlterNote       $04
0008A8F4 01                         	dc.b	$01
0008A8F5 E100                       	smpsAlterNote       $00
0008A8F7 01                         	dc.b	$01
0008A8F8 E1FA                       	smpsAlterNote       $FA
0008A8FA 01                         	dc.b	$01
0008A8FB E1FD                       	smpsAlterNote       $FD
0008A8FD ECF5                       	smpsPSGAlterVol     $F5
0008A8FF 9106                       	dc.b	nE1, $06
0008A901 EC04                       	smpsPSGAlterVol     $04
0008A903 E701                       	dc.b	smpsNoAttack, $01
0008A905 EC07                       	smpsPSGAlterVol     $07
0008A907 8003                       	dc.b	nRst, $03
0008A909 ECF5                       	smpsPSGAlterVol     $F5
0008A90B 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008A90F EC04                       	smpsPSGAlterVol     $04
0008A911 E701                       	dc.b	smpsNoAttack, $01
0008A913 ECFC                       	smpsPSGAlterVol     $FC
0008A915 9103 9103                  	dc.b	nE1, $03, nE1, $03
0008A919 EC04                       	smpsPSGAlterVol     $04
0008A91B E701                       	dc.b	smpsNoAttack, $01
0008A91D ECFC                       	smpsPSGAlterVol     $FC
0008A91F 9106                       	dc.b	nE1, $06
0008A921 EC04                       	smpsPSGAlterVol     $04
0008A923 E701                       	dc.b	smpsNoAttack, $01
0008A925 EC07                       	smpsPSGAlterVol     $07
0008A927 8006                       	dc.b	nRst, $06
0008A929 E100                       	smpsAlterNote       $00
0008A92B 01                         	dc.b	$01
0008A92C E104                       	smpsAlterNote       $04
0008A92E 01                         	dc.b	$01
0008A92F E100                       	smpsAlterNote       $00
0008A931 01                         	dc.b	$01
0008A932 E1FA                       	smpsAlterNote       $FA
0008A934 01                         	dc.b	$01
0008A935 E1F9                       	smpsAlterNote       $F9
0008A937 01                         	dc.b	$01
0008A938 E1FD                       	smpsAlterNote       $FD
0008A93A 01                         	dc.b	$01
0008A93B E103                       	smpsAlterNote       $03
0008A93D 01                         	dc.b	$01
0008A93E E104                       	smpsAlterNote       $04
0008A940 01                         	dc.b	$01
0008A941 E100                       	smpsAlterNote       $00
0008A943 01                         	dc.b	$01
0008A944 E1FA                       	smpsAlterNote       $FA
0008A946 0101                       	dc.b	$01, $01
0008A948 E1FD                       	smpsAlterNote       $FD
0008A94A ECF5                       	smpsPSGAlterVol     $F5
0008A94C 9206                       	dc.b	nF1, $06
0008A94E EC04                       	smpsPSGAlterVol     $04
0008A950 E701                       	dc.b	smpsNoAttack, $01
0008A952 EC07                       	smpsPSGAlterVol     $07
0008A954 8003                       	dc.b	nRst, $03
0008A956 ECF5                       	smpsPSGAlterVol     $F5
0008A958 9206                       	dc.b	nF1, $06
0008A95A EC04                       	smpsPSGAlterVol     $04
0008A95C E701                       	dc.b	smpsNoAttack, $01
0008A95E EC07                       	smpsPSGAlterVol     $07
0008A960 8006                       	dc.b	nRst, $06
0008A962 E100                       	smpsAlterNote       $00
0008A964 01                         	dc.b	$01
0008A965 E104                       	smpsAlterNote       $04
0008A967 01                         	dc.b	$01
0008A968 E103                       	smpsAlterNote       $03
0008A96A 01                         	dc.b	$01
0008A96B E1FD                       	smpsAlterNote       $FD
0008A96D 01                         	dc.b	$01
0008A96E ECF5                       	smpsPSGAlterVol     $F5
0008A970 9407                       	dc.b	nG1, $07
0008A972 EC0B                       	smpsPSGAlterVol     $0B
0008A974 8004                       	dc.b	nRst, $04
0008A976 ECF5                       	smpsPSGAlterVol     $F5
0008A978 9406                       	dc.b	nG1, $06
0008A97A EC0B                       	smpsPSGAlterVol     $0B
0008A97C 8007                       	dc.b	nRst, $07
0008A97E E103                       	smpsAlterNote       $03
0008A980 0101                       	dc.b	$01, $01
0008A982 E1FD                       	smpsAlterNote       $FD
0008A984 01                         	dc.b	$01
0008A985 E1F9                       	smpsAlterNote       $F9
0008A987 01                         	dc.b	$01
0008A988 E1FD                       	smpsAlterNote       $FD
0008A98A ECF5                       	smpsPSGAlterVol     $F5
0008A98C 9206                       	dc.b	nF1, $06
0008A98E EC04                       	smpsPSGAlterVol     $04
0008A990 E701                       	dc.b	smpsNoAttack, $01
0008A992 EC07                       	smpsPSGAlterVol     $07
0008A994 8003                       	dc.b	nRst, $03
0008A996 ECF5                       	smpsPSGAlterVol     $F5
0008A998 9206                       	dc.b	nF1, $06
0008A99A EC04                       	smpsPSGAlterVol     $04
0008A99C E701                       	dc.b	smpsNoAttack, $01
0008A99E EC07                       	smpsPSGAlterVol     $07
0008A9A0 8006                       	dc.b	nRst, $06
0008A9A2 E100                       	smpsAlterNote       $00
0008A9A4 01                         	dc.b	$01
0008A9A5 E104                       	smpsAlterNote       $04
0008A9A7 01                         	dc.b	$01
0008A9A8 E100                       	smpsAlterNote       $00
0008A9AA 01                         	dc.b	$01
0008A9AB E1FA                       	smpsAlterNote       $FA
0008A9AD 01                         	dc.b	$01
0008A9AE E1FD                       	smpsAlterNote       $FD
0008A9B0 ECF5                       	smpsPSGAlterVol     $F5
0008A9B2 9206                       	dc.b	nF1, $06
0008A9B4 EC04                       	smpsPSGAlterVol     $04
0008A9B6 E701                       	dc.b	smpsNoAttack, $01
0008A9B8 EC07                       	smpsPSGAlterVol     $07
0008A9BA 8003                       	dc.b	nRst, $03
0008A9BC ECF5                       	smpsPSGAlterVol     $F5
0008A9BE 9107                       	dc.b	nE1, $07
0008A9C0 EC0B                       	smpsPSGAlterVol     $0B
0008A9C2 8006                       	dc.b	nRst, $06
0008A9C4 E100                       	smpsAlterNote       $00
0008A9C6 01                         	dc.b	$01
0008A9C7 E103                       	smpsAlterNote       $03
0008A9C9 0101                       	dc.b	$01, $01
0008A9CB E1FD                       	smpsAlterNote       $FD
0008A9CD 01                         	dc.b	$01
0008A9CE ECF5                       	smpsPSGAlterVol     $F5
0008A9D0 9207                       	dc.b	nF1, $07
0008A9D2 EC0B                       	smpsPSGAlterVol     $0B
0008A9D4 8004                       	dc.b	nRst, $04
0008A9D6 ECF5                       	smpsPSGAlterVol     $F5
0008A9D8 9206                       	dc.b	nF1, $06
0008A9DA EC04                       	smpsPSGAlterVol     $04
0008A9DC E701                       	dc.b	smpsNoAttack, $01
0008A9DE EC07                       	smpsPSGAlterVol     $07
0008A9E0 8006                       	dc.b	nRst, $06
0008A9E2 E103                       	smpsAlterNote       $03
0008A9E4 01                         	dc.b	$01
0008A9E5 E104                       	smpsAlterNote       $04
0008A9E7 01                         	dc.b	$01
0008A9E8 E100                       	smpsAlterNote       $00
0008A9EA 01                         	dc.b	$01
0008A9EB E1FB                       	smpsAlterNote       $FB
0008A9ED 01                         	dc.b	$01
0008A9EE E1FD                       	smpsAlterNote       $FD
0008A9F0 ECF5                       	smpsPSGAlterVol     $F5
0008A9F2 9406                       	dc.b	nG1, $06
0008A9F4 EC04                       	smpsPSGAlterVol     $04
0008A9F6 E701                       	dc.b	smpsNoAttack, $01
0008A9F8 EC07                       	smpsPSGAlterVol     $07
0008A9FA 8003                       	dc.b	nRst, $03
0008A9FC ECF5                       	smpsPSGAlterVol     $F5
0008A9FE 9406                       	dc.b	nG1, $06
0008AA00 EC04                       	smpsPSGAlterVol     $04
0008AA02 E701                       	dc.b	smpsNoAttack, $01
0008AA04 EC07                       	smpsPSGAlterVol     $07
0008AA06 8006                       	dc.b	nRst, $06
0008AA08 E100                       	smpsAlterNote       $00
0008AA0A 01                         	dc.b	$01
0008AA0B E104                       	smpsAlterNote       $04
0008AA0D 01                         	dc.b	$01
0008AA0E E100                       	smpsAlterNote       $00
0008AA10 01                         	dc.b	$01
0008AA11 E1FD                       	smpsAlterNote       $FD
0008AA13 01                         	dc.b	$01
0008AA14 ECF5                       	smpsPSGAlterVol     $F5
0008AA16 9206                       	dc.b	nF1, $06
0008AA18 EC04                       	smpsPSGAlterVol     $04
0008AA1A E701                       	dc.b	smpsNoAttack, $01
0008AA1C EC07                       	smpsPSGAlterVol     $07
0008AA1E 8003                       	dc.b	nRst, $03
0008AA20 ECF5                       	smpsPSGAlterVol     $F5
0008AA22 9207                       	dc.b	nF1, $07
0008AA24 EC0B                       	smpsPSGAlterVol     $0B
0008AA26 8007                       	dc.b	nRst, $07
0008AA28 E103                       	smpsAlterNote       $03
0008AA2A 0101                       	dc.b	$01, $01
0008AA2C E1FD                       	smpsAlterNote       $FD
0008AA2E 01                         	dc.b	$01
0008AA2F E1FA                       	smpsAlterNote       $FA
0008AA31 01                         	dc.b	$01
0008AA32 E1FD                       	smpsAlterNote       $FD
0008AA34 ECF5                       	smpsPSGAlterVol     $F5
0008AA36 9206                       	dc.b	nF1, $06
0008AA38 EC0B                       	smpsPSGAlterVol     $0B
0008AA3A 8004                       	dc.b	nRst, $04
0008AA3C ECF5                       	smpsPSGAlterVol     $F5
0008AA3E 9206                       	dc.b	nF1, $06
0008AA40 EC04                       	smpsPSGAlterVol     $04
0008AA42 E701                       	dc.b	smpsNoAttack, $01
0008AA44 EC07                       	smpsPSGAlterVol     $07
0008AA46 8006                       	dc.b	nRst, $06
0008AA48 E100                       	smpsAlterNote       $00
0008AA4A 01                         	dc.b	$01
0008AA4B E104                       	smpsAlterNote       $04
0008AA4D 01                         	dc.b	$01
0008AA4E E100                       	smpsAlterNote       $00
0008AA50 01                         	dc.b	$01
0008AA51 E1FA                       	smpsAlterNote       $FA
0008AA53 01                         	dc.b	$01
0008AA54 E1FD                       	smpsAlterNote       $FD
0008AA56 ECF5                       	smpsPSGAlterVol     $F5
0008AA58 9206                       	dc.b	nF1, $06
0008AA5A EC04                       	smpsPSGAlterVol     $04
0008AA5C E704                       	dc.b	smpsNoAttack, $04
0008AA5E ECFC                       	smpsPSGAlterVol     $FC
0008AA60 9207                       	dc.b	nF1, $07
0008AA62 EC0B                       	smpsPSGAlterVol     $0B
0008AA64 8006                       	dc.b	nRst, $06
0008AA66 E100                       	smpsAlterNote       $00
0008AA68 01                         	dc.b	$01
0008AA69 E104                       	smpsAlterNote       $04
0008AA6B 01                         	dc.b	$01
0008AA6C E103                       	smpsAlterNote       $03
0008AA6E 01                         	dc.b	$01
0008AA6F E1FD                       	smpsAlterNote       $FD
0008AA71 01                         	dc.b	$01
0008AA72 ECF5                       	smpsPSGAlterVol     $F5
0008AA74 9207                       	dc.b	nF1, $07
0008AA76 EC0B                       	smpsPSGAlterVol     $0B
0008AA78 8004                       	dc.b	nRst, $04
0008AA7A ECF5                       	smpsPSGAlterVol     $F5
0008AA7C 9206                       	dc.b	nF1, $06
0008AA7E EC0B                       	smpsPSGAlterVol     $0B
0008AA80 8007                       	dc.b	nRst, $07
0008AA82 E103                       	smpsAlterNote       $03
0008AA84 0101                       	dc.b	$01, $01
0008AA86 E100                       	smpsAlterNote       $00
0008AA88 01                         	dc.b	$01
0008AA89 E1FA                       	smpsAlterNote       $FA
0008AA8B 01                         	dc.b	$01
0008AA8C E1FD                       	smpsAlterNote       $FD
0008AA8E ECF5                       	smpsPSGAlterVol     $F5
0008AA90 9206                       	dc.b	nF1, $06
0008AA92 EC04                       	smpsPSGAlterVol     $04
0008AA94 E704                       	dc.b	smpsNoAttack, $04
0008AA96 ECFC                       	smpsPSGAlterVol     $FC
0008AA98 9206                       	dc.b	nF1, $06
0008AA9A EC04                       	smpsPSGAlterVol     $04
0008AA9C E701                       	dc.b	smpsNoAttack, $01
0008AA9E EC07                       	smpsPSGAlterVol     $07
0008AAA0 8006                       	dc.b	nRst, $06
0008AAA2 E100                       	smpsAlterNote       $00
0008AAA4 01                         	dc.b	$01
0008AAA5 E104                       	smpsAlterNote       $04
0008AAA7 01                         	dc.b	$01
0008AAA8 E100                       	smpsAlterNote       $00
0008AAAA 01                         	dc.b	$01
0008AAAB E1FD                       	smpsAlterNote       $FD
0008AAAD 01                         	dc.b	$01
0008AAAE ECF5                       	smpsPSGAlterVol     $F5
0008AAB0 9206                       	dc.b	nF1, $06
0008AAB2 EC04                       	smpsPSGAlterVol     $04
0008AAB4 E701                       	dc.b	smpsNoAttack, $01
0008AAB6 EC07                       	smpsPSGAlterVol     $07
0008AAB8 8003                       	dc.b	nRst, $03
0008AABA ECF5                       	smpsPSGAlterVol     $F5
0008AABC 9207                       	dc.b	nF1, $07
0008AABE EC0B                       	smpsPSGAlterVol     $0B
0008AAC0 8007                       	dc.b	nRst, $07
0008AAC2 E103                       	smpsAlterNote       $03
0008AAC4 0101                       	dc.b	$01, $01
0008AAC6 E1FD                       	smpsAlterNote       $FD
0008AAC8 01                         	dc.b	$01
0008AAC9 E1FA                       	smpsAlterNote       $FA
0008AACB 01                         	dc.b	$01
0008AACC E1FD                       	smpsAlterNote       $FD
0008AACE ECF5                       	smpsPSGAlterVol     $F5
0008AAD0 9106                       	dc.b	nE1, $06
0008AAD2 EC0B                       	smpsPSGAlterVol     $0B
0008AAD4 8004                       	dc.b	nRst, $04
0008AAD6 ECF5                       	smpsPSGAlterVol     $F5
0008AAD8 9106                       	dc.b	nE1, $06
0008AADA EC04                       	smpsPSGAlterVol     $04
0008AADC E701                       	dc.b	smpsNoAttack, $01
0008AADE EC07                       	smpsPSGAlterVol     $07
0008AAE0 8006                       	dc.b	nRst, $06
0008AAE2 E100                       	smpsAlterNote       $00
0008AAE4 01                         	dc.b	$01
0008AAE5 E104                       	smpsAlterNote       $04
0008AAE7 01                         	dc.b	$01
0008AAE8 E100                       	smpsAlterNote       $00
0008AAEA 01                         	dc.b	$01
0008AAEB E1FA                       	smpsAlterNote       $FA
0008AAED 01                         	dc.b	$01
0008AAEE E1FD                       	smpsAlterNote       $FD
0008AAF0 ECF5                       	smpsPSGAlterVol     $F5
0008AAF2 9106                       	dc.b	nE1, $06
0008AAF4 EC04                       	smpsPSGAlterVol     $04
0008AAF6 E701                       	dc.b	smpsNoAttack, $01
0008AAF8 EC07                       	smpsPSGAlterVol     $07
0008AAFA 8003                       	dc.b	nRst, $03
0008AAFC ECF5                       	smpsPSGAlterVol     $F5
0008AAFE 9106                       	dc.b	nE1, $06
0008AB00 EC04                       	smpsPSGAlterVol     $04
0008AB02 E701                       	dc.b	smpsNoAttack, $01
0008AB04 EC07                       	smpsPSGAlterVol     $07
0008AB06 8006                       	dc.b	nRst, $06
0008AB08 E100                       	smpsAlterNote       $00
0008AB0A 01                         	dc.b	$01
0008AB0B E104                       	smpsAlterNote       $04
0008AB0D 01                         	dc.b	$01
0008AB0E E103                       	smpsAlterNote       $03
0008AB10 01                         	dc.b	$01
0008AB11 E1FD                       	smpsAlterNote       $FD
0008AB13 01                         	dc.b	$01
0008AB14 ECF5                       	smpsPSGAlterVol     $F5
0008AB16 9107                       	dc.b	nE1, $07
0008AB18 EC0B                       	smpsPSGAlterVol     $0B
0008AB1A 8004                       	dc.b	nRst, $04
0008AB1C ECF5                       	smpsPSGAlterVol     $F5
0008AB1E 9106                       	dc.b	nE1, $06
0008AB20 EC0B                       	smpsPSGAlterVol     $0B
0008AB22 8007                       	dc.b	nRst, $07
0008AB24 E103                       	smpsAlterNote       $03
0008AB26 0101                       	dc.b	$01, $01
0008AB28 E100                       	smpsAlterNote       $00
0008AB2A 01                         	dc.b	$01
0008AB2B E1FA                       	smpsAlterNote       $FA
0008AB2D 01                         	dc.b	$01
0008AB2E E1FD                       	smpsAlterNote       $FD
0008AB30 ECF5                       	smpsPSGAlterVol     $F5
0008AB32 9106                       	dc.b	nE1, $06
0008AB34 EC04                       	smpsPSGAlterVol     $04
0008AB36 E701                       	dc.b	smpsNoAttack, $01
0008AB38 EC07                       	smpsPSGAlterVol     $07
0008AB3A 8003                       	dc.b	nRst, $03
0008AB3C ECF5                       	smpsPSGAlterVol     $F5
0008AB3E 9106                       	dc.b	nE1, $06
0008AB40 EC04                       	smpsPSGAlterVol     $04
0008AB42 E701                       	dc.b	smpsNoAttack, $01
0008AB44 EC07                       	smpsPSGAlterVol     $07
0008AB46 8003                       	dc.b	nRst, $03
0008AB48 ECF5                       	smpsPSGAlterVol     $F5
0008AB4A 9207                       	dc.b	nF1, $07
0008AB4C EC0B                       	smpsPSGAlterVol     $0B
0008AB4E 8006                       	dc.b	nRst, $06
0008AB50 E100                       	smpsAlterNote       $00
0008AB52 01                         	dc.b	$01
0008AB53 E104                       	smpsAlterNote       $04
0008AB55 01                         	dc.b	$01
0008AB56 E103                       	smpsAlterNote       $03
0008AB58 01                         	dc.b	$01
0008AB59 E1FD                       	smpsAlterNote       $FD
0008AB5B 01                         	dc.b	$01
0008AB5C E1F9                       	smpsAlterNote       $F9
0008AB5E 01                         	dc.b	$01
0008AB5F E1FD                       	smpsAlterNote       $FD
0008AB61 01                         	dc.b	$01
0008AB62 E100                       	smpsAlterNote       $00
0008AB64 01                         	dc.b	$01
0008AB65 E104                       	smpsAlterNote       $04
0008AB67 01                         	dc.b	$01
0008AB68 E1FD                       	smpsAlterNote       $FD
0008AB6A ECF5                       	smpsPSGAlterVol     $F5
0008AB6C 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008AB70 EC04                       	smpsPSGAlterVol     $04
0008AB72 E701                       	dc.b	smpsNoAttack, $01
0008AB74 EC07                       	smpsPSGAlterVol     $07
0008AB76 8009                       	dc.b	nRst, $09
0008AB78 E100                       	smpsAlterNote       $00
0008AB7A 01                         	dc.b	$01
0008AB7B E104                       	smpsAlterNote       $04
0008AB7D 01                         	dc.b	$01
0008AB7E E103                       	smpsAlterNote       $03
0008AB80 01                         	dc.b	$01
0008AB81 E1FD                       	smpsAlterNote       $FD
0008AB83 01                         	dc.b	$01
0008AB84 E1F9                       	smpsAlterNote       $F9
0008AB86 01                         	dc.b	$01
0008AB87 E1FD                       	smpsAlterNote       $FD
0008AB89 01                         	dc.b	$01
0008AB8A E100                       	smpsAlterNote       $00
0008AB8C 01                         	dc.b	$01
0008AB8D E104                       	smpsAlterNote       $04
0008AB8F 01                         	dc.b	$01
0008AB90 E100                       	smpsAlterNote       $00
0008AB92 01                         	dc.b	$01
0008AB93 E1FA                       	smpsAlterNote       $FA
0008AB95 01                         	dc.b	$01
0008AB96 E1F9                       	smpsAlterNote       $F9
0008AB98 01                         	dc.b	$01
0008AB99 E1FD                       	smpsAlterNote       $FD
0008AB9B 01                         	dc.b	$01
0008AB9C E103                       	smpsAlterNote       $03
0008AB9E 0101                       	dc.b	$01, $01
0008ABA0 E100                       	smpsAlterNote       $00
0008ABA2 01                         	dc.b	$01
0008ABA3 E1FD                       	smpsAlterNote       $FD
0008ABA5 ECF5                       	smpsPSGAlterVol     $F5
0008ABA7 9202                       	dc.b	nF1, $02
0008ABA9 EC04                       	smpsPSGAlterVol     $04
0008ABAB E701                       	dc.b	smpsNoAttack, $01
0008ABAD ECFC                       	smpsPSGAlterVol     $FC
0008ABAF 9106                       	dc.b	nE1, $06
0008ABB1 EC04                       	smpsPSGAlterVol     $04
0008ABB3 E701                       	dc.b	smpsNoAttack, $01
0008ABB5 EC07                       	smpsPSGAlterVol     $07
0008ABB7 8006                       	dc.b	nRst, $06
0008ABB9 E100                       	smpsAlterNote       $00
0008ABBB 01                         	dc.b	$01
0008ABBC E104                       	smpsAlterNote       $04
0008ABBE 01                         	dc.b	$01
0008ABBF E100                       	smpsAlterNote       $00
0008ABC1 01                         	dc.b	$01
0008ABC2 E1FD                       	smpsAlterNote       $FD
0008ABC4 01                         	dc.b	$01
0008ABC5 E1F9                       	smpsAlterNote       $F9
0008ABC7 01                         	dc.b	$01
0008ABC8 E1FD                       	smpsAlterNote       $FD
0008ABCA 01                         	dc.b	$01
0008ABCB E103                       	smpsAlterNote       $03
0008ABCD 01                         	dc.b	$01
0008ABCE E104                       	smpsAlterNote       $04
0008ABD0 01                         	dc.b	$01
0008ABD1 E1FD                       	smpsAlterNote       $FD
0008ABD3 ECF5                       	smpsPSGAlterVol     $F5
0008ABD5 9102                       	dc.b	nE1, $02
0008ABD7 EC04                       	smpsPSGAlterVol     $04
0008ABD9 E701                       	dc.b	smpsNoAttack, $01
0008ABDB ECFC                       	smpsPSGAlterVol     $FC
0008ABDD 920D                       	dc.b	nF1, $0D
0008ABDF E100                       	smpsAlterNote       $00
0008ABE1 E701                       	dc.b	smpsNoAttack, $01
0008ABE3 E104                       	smpsAlterNote       $04
0008ABE5 E701                       	dc.b	smpsNoAttack, $01
0008ABE7 E100                       	smpsAlterNote       $00
0008ABE9 E701                       	dc.b	smpsNoAttack, $01
0008ABEB E1FD                       	smpsAlterNote       $FD
0008ABED E701                       	dc.b	smpsNoAttack, $01
0008ABEF E1F9                       	smpsAlterNote       $F9
0008ABF1 E701                       	dc.b	smpsNoAttack, $01
0008ABF3 E1FD                       	smpsAlterNote       $FD
0008ABF5 E701                       	dc.b	smpsNoAttack, $01
0008ABF7 E103                       	smpsAlterNote       $03
0008ABF9 E701                       	dc.b	smpsNoAttack, $01
0008ABFB E104                       	smpsAlterNote       $04
0008ABFD E701                       	dc.b	smpsNoAttack, $01
0008ABFF E100                       	smpsAlterNote       $00
0008AC01 E701                       	dc.b	smpsNoAttack, $01
0008AC03 E1FA                       	smpsAlterNote       $FA
0008AC05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC09 E1FD                       	smpsAlterNote       $FD
0008AC0B E701                       	dc.b	smpsNoAttack, $01
0008AC0D E103                       	smpsAlterNote       $03
0008AC0F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC13 E1FD                       	smpsAlterNote       $FD
0008AC15 E701                       	dc.b	smpsNoAttack, $01
0008AC17 E1F9                       	smpsAlterNote       $F9
0008AC19 E701                       	dc.b	smpsNoAttack, $01
0008AC1B E1FA                       	smpsAlterNote       $FA
0008AC1D E701                       	dc.b	smpsNoAttack, $01
0008AC1F E100                       	smpsAlterNote       $00
0008AC21 EC04                       	smpsPSGAlterVol     $04
0008AC23 E701                       	dc.b	smpsNoAttack, $01
0008AC25 EC07                       	smpsPSGAlterVol     $07
0008AC27 E104                       	smpsAlterNote       $04
0008AC29 8001                       	dc.b	nRst, $01
0008AC2B E100                       	smpsAlterNote       $00
0008AC2D 01                         	dc.b	$01
0008AC2E E1FD                       	smpsAlterNote       $FD
0008AC30 01                         	dc.b	$01
0008AC31 E1F9                       	smpsAlterNote       $F9
0008AC33 01                         	dc.b	$01
0008AC34 E1FD                       	smpsAlterNote       $FD
0008AC36 01                         	dc.b	$01
0008AC37 E103                       	smpsAlterNote       $03
0008AC39 01                         	dc.b	$01
0008AC3A E104                       	smpsAlterNote       $04
0008AC3C 01                         	dc.b	$01
0008AC3D E1FD                       	smpsAlterNote       $FD
0008AC3F ECF5                       	smpsPSGAlterVol     $F5
0008AC41 9106                       	dc.b	nE1, $06
0008AC43 EC04                       	smpsPSGAlterVol     $04
0008AC45 E701                       	dc.b	smpsNoAttack, $01
0008AC47 EC07                       	smpsPSGAlterVol     $07
0008AC49 8003                       	dc.b	nRst, $03
0008AC4B ECF5                       	smpsPSGAlterVol     $F5
0008AC4D 9106                       	dc.b	nE1, $06
0008AC4F EC04                       	smpsPSGAlterVol     $04
0008AC51 E701                       	dc.b	smpsNoAttack, $01
0008AC53 EC07                       	smpsPSGAlterVol     $07
0008AC55 8006                       	dc.b	nRst, $06
0008AC57 E100                       	smpsAlterNote       $00
0008AC59 01                         	dc.b	$01
0008AC5A E104                       	smpsAlterNote       $04
0008AC5C 01                         	dc.b	$01
0008AC5D E100                       	smpsAlterNote       $00
0008AC5F 01                         	dc.b	$01
0008AC60 E1FA                       	smpsAlterNote       $FA
0008AC62 01                         	dc.b	$01
0008AC63 E1FD                       	smpsAlterNote       $FD
0008AC65 ECF5                       	smpsPSGAlterVol     $F5
0008AC67 9206                       	dc.b	nF1, $06
0008AC69 EC04                       	smpsPSGAlterVol     $04
0008AC6B E701                       	dc.b	smpsNoAttack, $01
0008AC6D EC07                       	smpsPSGAlterVol     $07
0008AC6F 8003                       	dc.b	nRst, $03
0008AC71 ECF5                       	smpsPSGAlterVol     $F5
0008AC73 9207                       	dc.b	nF1, $07
0008AC75 EC0B                       	smpsPSGAlterVol     $0B
0008AC77 8006                       	dc.b	nRst, $06
0008AC79 E100                       	smpsAlterNote       $00
0008AC7B 01                         	dc.b	$01
0008AC7C E103                       	smpsAlterNote       $03
0008AC7E 0101                       	dc.b	$01, $01
0008AC80 E1FD                       	smpsAlterNote       $FD
0008AC82 01                         	dc.b	$01
0008AC83 ECF5                       	smpsPSGAlterVol     $F5
0008AC85 9107                       	dc.b	nE1, $07
0008AC87 EC0B                       	smpsPSGAlterVol     $0B
0008AC89 8004                       	dc.b	nRst, $04
0008AC8B ECF5                       	smpsPSGAlterVol     $F5
0008AC8D 9106                       	dc.b	nE1, $06
0008AC8F EC04                       	smpsPSGAlterVol     $04
0008AC91 E701                       	dc.b	smpsNoAttack, $01
0008AC93 EC07                       	smpsPSGAlterVol     $07
0008AC95 8006                       	dc.b	nRst, $06
0008AC97 E103                       	smpsAlterNote       $03
0008AC99 01                         	dc.b	$01
0008AC9A E104                       	smpsAlterNote       $04
0008AC9C 01                         	dc.b	$01
0008AC9D E100                       	smpsAlterNote       $00
0008AC9F 01                         	dc.b	$01
0008ACA0 E1FA                       	smpsAlterNote       $FA
0008ACA2 01                         	dc.b	$01
0008ACA3 E1FD                       	smpsAlterNote       $FD
0008ACA5 ECF5                       	smpsPSGAlterVol     $F5
0008ACA7 9106                       	dc.b	nE1, $06
0008ACA9 EC04                       	smpsPSGAlterVol     $04
0008ACAB E701                       	dc.b	smpsNoAttack, $01
0008ACAD EC07                       	smpsPSGAlterVol     $07
0008ACAF 8003                       	dc.b	nRst, $03
0008ACB1 ECF5                       	smpsPSGAlterVol     $F5
0008ACB3 9106                       	dc.b	nE1, $06
0008ACB5 EC04                       	smpsPSGAlterVol     $04
0008ACB7 E701                       	dc.b	smpsNoAttack, $01
0008ACB9 EC07                       	smpsPSGAlterVol     $07
0008ACBB 8003                       	dc.b	nRst, $03
0008ACBD ECF5                       	smpsPSGAlterVol     $F5
0008ACBF 9207                       	dc.b	nF1, $07
0008ACC1 EC0B                       	smpsPSGAlterVol     $0B
0008ACC3 8006                       	dc.b	nRst, $06
0008ACC5 E100                       	smpsAlterNote       $00
0008ACC7 01                         	dc.b	$01
0008ACC8 E103                       	smpsAlterNote       $03
0008ACCA 0101                       	dc.b	$01, $01
0008ACCC E1FD                       	smpsAlterNote       $FD
0008ACCE 01                         	dc.b	$01
0008ACCF E1F9                       	smpsAlterNote       $F9
0008ACD1 01                         	dc.b	$01
0008ACD2 E1FA                       	smpsAlterNote       $FA
0008ACD4 01                         	dc.b	$01
0008ACD5 E100                       	smpsAlterNote       $00
0008ACD7 01                         	dc.b	$01
0008ACD8 E104                       	smpsAlterNote       $04
0008ACDA 01                         	dc.b	$01
0008ACDB E1FD                       	smpsAlterNote       $FD
0008ACDD ECF5                       	smpsPSGAlterVol     $F5
0008ACDF 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008ACE3 EC04                       	smpsPSGAlterVol     $04
0008ACE5 E701                       	dc.b	smpsNoAttack, $01
0008ACE7 EC07                       	smpsPSGAlterVol     $07
0008ACE9 8009                       	dc.b	nRst, $09
0008ACEB E100                       	smpsAlterNote       $00
0008ACED 01                         	dc.b	$01
0008ACEE E103                       	smpsAlterNote       $03
0008ACF0 0101                       	dc.b	$01, $01
0008ACF2 E1FD                       	smpsAlterNote       $FD
0008ACF4 01                         	dc.b	$01
0008ACF5 E1F9                       	smpsAlterNote       $F9
0008ACF7 01                         	dc.b	$01
0008ACF8 E1FA                       	smpsAlterNote       $FA
0008ACFA 01                         	dc.b	$01
0008ACFB E100                       	smpsAlterNote       $00
0008ACFD 01                         	dc.b	$01
0008ACFE E104                       	smpsAlterNote       $04
0008AD00 01                         	dc.b	$01
0008AD01 E100                       	smpsAlterNote       $00
0008AD03 01                         	dc.b	$01
0008AD04 E1FD                       	smpsAlterNote       $FD
0008AD06 01                         	dc.b	$01
0008AD07 E1F9                       	smpsAlterNote       $F9
0008AD09 01                         	dc.b	$01
0008AD0A E1FD                       	smpsAlterNote       $FD
0008AD0C 01                         	dc.b	$01
0008AD0D E103                       	smpsAlterNote       $03
0008AD0F 01                         	dc.b	$01
0008AD10 E104                       	smpsAlterNote       $04
0008AD12 01                         	dc.b	$01
0008AD13 E100                       	smpsAlterNote       $00
0008AD15 01                         	dc.b	$01
0008AD16 E1FD                       	smpsAlterNote       $FD
0008AD18 ECF5                       	smpsPSGAlterVol     $F5
0008AD1A 9203 9106                  	dc.b	nF1, $03, nE1, $06
0008AD1E EC04                       	smpsPSGAlterVol     $04
0008AD20 E701                       	dc.b	smpsNoAttack, $01
0008AD22 EC07                       	smpsPSGAlterVol     $07
0008AD24 8006                       	dc.b	nRst, $06
0008AD26 E100                       	smpsAlterNote       $00
0008AD28 01                         	dc.b	$01
0008AD29 E104                       	smpsAlterNote       $04
0008AD2B 01                         	dc.b	$01
0008AD2C E103                       	smpsAlterNote       $03
0008AD2E 01                         	dc.b	$01
0008AD2F E1FD                       	smpsAlterNote       $FD
0008AD31 01                         	dc.b	$01
0008AD32 E1F9                       	smpsAlterNote       $F9
0008AD34 01                         	dc.b	$01
0008AD35 E1FD                       	smpsAlterNote       $FD
0008AD37 01                         	dc.b	$01
0008AD38 E100                       	smpsAlterNote       $00
0008AD3A 01                         	dc.b	$01
0008AD3B E104                       	smpsAlterNote       $04
0008AD3D 01                         	dc.b	$01
0008AD3E E1FD                       	smpsAlterNote       $FD
0008AD40 ECF5                       	smpsPSGAlterVol     $F5
0008AD42 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0008AD46 E100                       	smpsAlterNote       $00
0008AD48 E701                       	dc.b	smpsNoAttack, $01
0008AD4A E104                       	smpsAlterNote       $04
0008AD4C E701                       	dc.b	smpsNoAttack, $01
0008AD4E E100                       	smpsAlterNote       $00
0008AD50 E701                       	dc.b	smpsNoAttack, $01
0008AD52 E1FD                       	smpsAlterNote       $FD
0008AD54 E701                       	dc.b	smpsNoAttack, $01
0008AD56 E1F9                       	smpsAlterNote       $F9
0008AD58 E701                       	dc.b	smpsNoAttack, $01
0008AD5A E1FD                       	smpsAlterNote       $FD
0008AD5C E701                       	dc.b	smpsNoAttack, $01
0008AD5E E103                       	smpsAlterNote       $03
0008AD60 E701                       	dc.b	smpsNoAttack, $01
0008AD62 E104                       	smpsAlterNote       $04
0008AD64 E701                       	dc.b	smpsNoAttack, $01
0008AD66 E100                       	smpsAlterNote       $00
0008AD68 E701                       	dc.b	smpsNoAttack, $01
0008AD6A E1FA                       	smpsAlterNote       $FA
0008AD6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD70 E1FD                       	smpsAlterNote       $FD
0008AD72 E701                       	dc.b	smpsNoAttack, $01
0008AD74 E103                       	smpsAlterNote       $03
0008AD76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD7A E100                       	smpsAlterNote       $00
0008AD7C E701                       	dc.b	smpsNoAttack, $01
0008AD7E E1FA                       	smpsAlterNote       $FA
0008AD80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD84 E100                       	smpsAlterNote       $00
0008AD86 EC04                       	smpsPSGAlterVol     $04
0008AD88 E701                       	dc.b	smpsNoAttack, $01
0008AD8A EC07                       	smpsPSGAlterVol     $07
0008AD8C E104                       	smpsAlterNote       $04
0008AD8E 8001                       	dc.b	nRst, $01
0008AD90 E103                       	smpsAlterNote       $03
0008AD92 01                         	dc.b	$01
0008AD93 E1FD                       	smpsAlterNote       $FD
0008AD95 01                         	dc.b	$01
0008AD96 E1F9                       	smpsAlterNote       $F9
0008AD98 01                         	dc.b	$01
0008AD99 E1FD                       	smpsAlterNote       $FD
0008AD9B 01                         	dc.b	$01
0008AD9C E100                       	smpsAlterNote       $00
0008AD9E 01                         	dc.b	$01
0008AD9F E104                       	smpsAlterNote       $04
0008ADA1 01                         	dc.b	$01
0008ADA2 E1FD                       	smpsAlterNote       $FD
0008ADA4 ECF5                       	smpsPSGAlterVol     $F5
0008ADA6 9106                       	dc.b	nE1, $06
0008ADA8 EC04                       	smpsPSGAlterVol     $04
0008ADAA E701                       	dc.b	smpsNoAttack, $01
0008ADAC EC07                       	smpsPSGAlterVol     $07
0008ADAE 8003                       	dc.b	nRst, $03
0008ADB0 ECF5                       	smpsPSGAlterVol     $F5
0008ADB2 9106                       	dc.b	nE1, $06
0008ADB4 EC04                       	smpsPSGAlterVol     $04
0008ADB6 E701                       	dc.b	smpsNoAttack, $01
0008ADB8 EC07                       	smpsPSGAlterVol     $07
0008ADBA 8006                       	dc.b	nRst, $06
0008ADBC E100                       	smpsAlterNote       $00
0008ADBE 01                         	dc.b	$01
0008ADBF E104                       	smpsAlterNote       $04
0008ADC1 01                         	dc.b	$01
0008ADC2 E100                       	smpsAlterNote       $00
0008ADC4 01                         	dc.b	$01
0008ADC5 E1FD                       	smpsAlterNote       $FD
0008ADC7 01                         	dc.b	$01
0008ADC8 ECF5                       	smpsPSGAlterVol     $F5
0008ADCA 9206                       	dc.b	nF1, $06
0008ADCC EC04                       	smpsPSGAlterVol     $04
0008ADCE E701                       	dc.b	smpsNoAttack, $01
0008ADD0 EC07                       	smpsPSGAlterVol     $07
0008ADD2 8003                       	dc.b	nRst, $03
0008ADD4 ECF5                       	smpsPSGAlterVol     $F5
0008ADD6 9207                       	dc.b	nF1, $07
0008ADD8 EC0B                       	smpsPSGAlterVol     $0B
0008ADDA 8007                       	dc.b	nRst, $07
0008ADDC E103                       	smpsAlterNote       $03
0008ADDE 0101                       	dc.b	$01, $01
0008ADE0 E1FD                       	smpsAlterNote       $FD
0008ADE2 01                         	dc.b	$01
0008ADE3 E1FA                       	smpsAlterNote       $FA
0008ADE5 01                         	dc.b	$01
0008ADE6 E1FD                       	smpsAlterNote       $FD
0008ADE8 ECF5                       	smpsPSGAlterVol     $F5
0008ADEA 9106                       	dc.b	nE1, $06
0008ADEC EC0B                       	smpsPSGAlterVol     $0B
0008ADEE 8004                       	dc.b	nRst, $04
0008ADF0 ECF5                       	smpsPSGAlterVol     $F5
0008ADF2 9106                       	dc.b	nE1, $06
0008ADF4 EC04                       	smpsPSGAlterVol     $04
0008ADF6 E701                       	dc.b	smpsNoAttack, $01
0008ADF8 EC07                       	smpsPSGAlterVol     $07
0008ADFA 8006                       	dc.b	nRst, $06
0008ADFC E100                       	smpsAlterNote       $00
0008ADFE 01                         	dc.b	$01
0008ADFF E104                       	smpsAlterNote       $04
0008AE01 01                         	dc.b	$01
0008AE02 E100                       	smpsAlterNote       $00
0008AE04 01                         	dc.b	$01
0008AE05 E1FA                       	smpsAlterNote       $FA
0008AE07 01                         	dc.b	$01
0008AE08 E1FD                       	smpsAlterNote       $FD
0008AE0A ECF5                       	smpsPSGAlterVol     $F5
0008AE0C 9206                       	dc.b	nF1, $06
0008AE0E EC04                       	smpsPSGAlterVol     $04
0008AE10 E701                       	dc.b	smpsNoAttack, $01
0008AE12 EC07                       	smpsPSGAlterVol     $07
0008AE14 8003                       	dc.b	nRst, $03
0008AE16 ECF5                       	smpsPSGAlterVol     $F5
0008AE18 9206                       	dc.b	nF1, $06
0008AE1A EC04                       	smpsPSGAlterVol     $04
0008AE1C E701                       	dc.b	smpsNoAttack, $01
0008AE1E EC07                       	smpsPSGAlterVol     $07
0008AE20 8006                       	dc.b	nRst, $06
0008AE22 E100                       	smpsAlterNote       $00
0008AE24 01                         	dc.b	$01
0008AE25 E104                       	smpsAlterNote       $04
0008AE27 01                         	dc.b	$01
0008AE28 E103                       	smpsAlterNote       $03
0008AE2A 01                         	dc.b	$01
0008AE2B E1FD                       	smpsAlterNote       $FD
0008AE2D 01                         	dc.b	$01
0008AE2E ECF5                       	smpsPSGAlterVol     $F5
0008AE30 9107                       	dc.b	nE1, $07
0008AE32 EC0B                       	smpsPSGAlterVol     $0B
0008AE34 8004                       	dc.b	nRst, $04
0008AE36 ECF5                       	smpsPSGAlterVol     $F5
0008AE38 9106                       	dc.b	nE1, $06
0008AE3A EC0B                       	smpsPSGAlterVol     $0B
0008AE3C 8007                       	dc.b	nRst, $07
0008AE3E E103                       	smpsAlterNote       $03
0008AE40 0101                       	dc.b	$01, $01
0008AE42 E100                       	smpsAlterNote       $00
0008AE44 01                         	dc.b	$01
0008AE45 E1FA                       	smpsAlterNote       $FA
0008AE47 01                         	dc.b	$01
0008AE48 E1FD                       	smpsAlterNote       $FD
0008AE4A ECF5                       	smpsPSGAlterVol     $F5
0008AE4C 9206                       	dc.b	nF1, $06
0008AE4E EC04                       	smpsPSGAlterVol     $04
0008AE50 E701                       	dc.b	smpsNoAttack, $01
0008AE52 EC07                       	smpsPSGAlterVol     $07
0008AE54 8003                       	dc.b	nRst, $03
0008AE56 ECF5                       	smpsPSGAlterVol     $F5
0008AE58 9206                       	dc.b	nF1, $06
0008AE5A EC04                       	smpsPSGAlterVol     $04
0008AE5C E701                       	dc.b	smpsNoAttack, $01
0008AE5E EC07                       	smpsPSGAlterVol     $07
0008AE60 8006                       	dc.b	nRst, $06
0008AE62 E100                       	smpsAlterNote       $00
0008AE64 01                         	dc.b	$01
0008AE65 E104                       	smpsAlterNote       $04
0008AE67 01                         	dc.b	$01
0008AE68 E100                       	smpsAlterNote       $00
0008AE6A 01                         	dc.b	$01
0008AE6B E1FD                       	smpsAlterNote       $FD
0008AE6D 01                         	dc.b	$01
0008AE6E ECF5                       	smpsPSGAlterVol     $F5
0008AE70 9106                       	dc.b	nE1, $06
0008AE72 EC04                       	smpsPSGAlterVol     $04
0008AE74 E701                       	dc.b	smpsNoAttack, $01
0008AE76 EC07                       	smpsPSGAlterVol     $07
0008AE78 8003                       	dc.b	nRst, $03
0008AE7A ECF5                       	smpsPSGAlterVol     $F5
0008AE7C 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008AE80 EC04                       	smpsPSGAlterVol     $04
0008AE82 E701                       	dc.b	smpsNoAttack, $01
0008AE84 ECFC                       	smpsPSGAlterVol     $FC
0008AE86 9103                       	dc.b	nE1, $03
0008AE88 EC04                       	smpsPSGAlterVol     $04
0008AE8A E701                       	dc.b	smpsNoAttack, $01
0008AE8C ECFC                       	smpsPSGAlterVol     $FC
0008AE8E 9102                       	dc.b	nE1, $02
0008AE90 EC04                       	smpsPSGAlterVol     $04
0008AE92 E701                       	dc.b	smpsNoAttack, $01
0008AE94 ECFC                       	smpsPSGAlterVol     $FC
0008AE96 9103                       	dc.b	nE1, $03
0008AE98 EC0B                       	smpsPSGAlterVol     $0B
0008AE9A 800A                       	dc.b	nRst, $0A
0008AE9C E100                       	smpsAlterNote       $00
0008AE9E 01                         	dc.b	$01
0008AE9F E104                       	smpsAlterNote       $04
0008AEA1 01                         	dc.b	$01
0008AEA2 E100                       	smpsAlterNote       $00
0008AEA4 01                         	dc.b	$01
0008AEA5 E1FA                       	smpsAlterNote       $FA
0008AEA7 01                         	dc.b	$01
0008AEA8 E1F9                       	smpsAlterNote       $F9
0008AEAA 01                         	dc.b	$01
0008AEAB E1FD                       	smpsAlterNote       $FD
0008AEAD 01                         	dc.b	$01
0008AEAE E103                       	smpsAlterNote       $03
0008AEB0 0101                       	dc.b	$01, $01
0008AEB2 E100                       	smpsAlterNote       $00
0008AEB4 01                         	dc.b	$01
0008AEB5 E1FA                       	smpsAlterNote       $FA
0008AEB7 0101                       	dc.b	$01, $01
0008AEB9 E1FD                       	smpsAlterNote       $FD
0008AEBB ECF5                       	smpsPSGAlterVol     $F5
0008AEBD 9206                       	dc.b	nF1, $06
0008AEBF EC04                       	smpsPSGAlterVol     $04
0008AEC1 E704                       	dc.b	smpsNoAttack, $04
0008AEC3 ECFC                       	smpsPSGAlterVol     $FC
0008AEC5 9206                       	dc.b	nF1, $06
0008AEC7 EC04                       	smpsPSGAlterVol     $04
0008AEC9 E701                       	dc.b	smpsNoAttack, $01
0008AECB EC07                       	smpsPSGAlterVol     $07
0008AECD 8006                       	dc.b	nRst, $06
0008AECF E100                       	smpsAlterNote       $00
0008AED1 01                         	dc.b	$01
0008AED2 E104                       	smpsAlterNote       $04
0008AED4 01                         	dc.b	$01
0008AED5 E103                       	smpsAlterNote       $03
0008AED7 01                         	dc.b	$01
0008AED8 E1FD                       	smpsAlterNote       $FD
0008AEDA 01                         	dc.b	$01
0008AEDB ECF5                       	smpsPSGAlterVol     $F5
0008AEDD 9407                       	dc.b	nG1, $07
0008AEDF EC0B                       	smpsPSGAlterVol     $0B
0008AEE1 8004                       	dc.b	nRst, $04
0008AEE3 ECF5                       	smpsPSGAlterVol     $F5
0008AEE5 9406                       	dc.b	nG1, $06
0008AEE7 EC0B                       	smpsPSGAlterVol     $0B
0008AEE9 8007                       	dc.b	nRst, $07
0008AEEB E103                       	smpsAlterNote       $03
0008AEED 0101                       	dc.b	$01, $01
0008AEEF E1FD                       	smpsAlterNote       $FD
0008AEF1 01                         	dc.b	$01
0008AEF2 E1F9                       	smpsAlterNote       $F9
0008AEF4 01                         	dc.b	$01
0008AEF5 E1FD                       	smpsAlterNote       $FD
0008AEF7 ECF5                       	smpsPSGAlterVol     $F5
0008AEF9 9206                       	dc.b	nF1, $06
0008AEFB EC04                       	smpsPSGAlterVol     $04
0008AEFD E701                       	dc.b	smpsNoAttack, $01
0008AEFF EC07                       	smpsPSGAlterVol     $07
0008AF01 8003                       	dc.b	nRst, $03
0008AF03 ECF5                       	smpsPSGAlterVol     $F5
0008AF05 9206                       	dc.b	nF1, $06
0008AF07 EC04                       	smpsPSGAlterVol     $04
0008AF09 E701                       	dc.b	smpsNoAttack, $01
0008AF0B EC07                       	smpsPSGAlterVol     $07
0008AF0D 8006                       	dc.b	nRst, $06
0008AF0F E100                       	smpsAlterNote       $00
0008AF11 01                         	dc.b	$01
0008AF12 E104                       	smpsAlterNote       $04
0008AF14 01                         	dc.b	$01
0008AF15 E100                       	smpsAlterNote       $00
0008AF17 01                         	dc.b	$01
0008AF18 E1FA                       	smpsAlterNote       $FA
0008AF1A 01                         	dc.b	$01
0008AF1B E1FD                       	smpsAlterNote       $FD
0008AF1D ECF5                       	smpsPSGAlterVol     $F5
0008AF1F 9206                       	dc.b	nF1, $06
0008AF21 EC04                       	smpsPSGAlterVol     $04
0008AF23 E701                       	dc.b	smpsNoAttack, $01
0008AF25 EC07                       	smpsPSGAlterVol     $07
0008AF27 8003                       	dc.b	nRst, $03
0008AF29 ECF5                       	smpsPSGAlterVol     $F5
0008AF2B 9107                       	dc.b	nE1, $07
0008AF2D EC0B                       	smpsPSGAlterVol     $0B
0008AF2F 8006                       	dc.b	nRst, $06
0008AF31 E100                       	smpsAlterNote       $00
0008AF33 01                         	dc.b	$01
0008AF34 E103                       	smpsAlterNote       $03
0008AF36 0101                       	dc.b	$01, $01
0008AF38 E1FD                       	smpsAlterNote       $FD
0008AF3A 01                         	dc.b	$01
0008AF3B ECF5                       	smpsPSGAlterVol     $F5
0008AF3D 9207                       	dc.b	nF1, $07
0008AF3F EC0B                       	smpsPSGAlterVol     $0B
0008AF41 8004                       	dc.b	nRst, $04
0008AF43 ECF5                       	smpsPSGAlterVol     $F5
0008AF45 9206                       	dc.b	nF1, $06
0008AF47 EC04                       	smpsPSGAlterVol     $04
0008AF49 E701                       	dc.b	smpsNoAttack, $01
0008AF4B EC07                       	smpsPSGAlterVol     $07
0008AF4D 8006                       	dc.b	nRst, $06
0008AF4F E103                       	smpsAlterNote       $03
0008AF51 01                         	dc.b	$01
0008AF52 E104                       	smpsAlterNote       $04
0008AF54 01                         	dc.b	$01
0008AF55 E100                       	smpsAlterNote       $00
0008AF57 01                         	dc.b	$01
0008AF58 E1FB                       	smpsAlterNote       $FB
0008AF5A 01                         	dc.b	$01
0008AF5B E1FD                       	smpsAlterNote       $FD
0008AF5D ECF5                       	smpsPSGAlterVol     $F5
0008AF5F 9406                       	dc.b	nG1, $06
0008AF61 EC04                       	smpsPSGAlterVol     $04
0008AF63 E701                       	dc.b	smpsNoAttack, $01
0008AF65 EC07                       	smpsPSGAlterVol     $07
0008AF67 8003                       	dc.b	nRst, $03
0008AF69 ECF5                       	smpsPSGAlterVol     $F5
0008AF6B 9406                       	dc.b	nG1, $06
0008AF6D EC04                       	smpsPSGAlterVol     $04
0008AF6F E701                       	dc.b	smpsNoAttack, $01
0008AF71 EC07                       	smpsPSGAlterVol     $07
0008AF73 8006                       	dc.b	nRst, $06
0008AF75 E100                       	smpsAlterNote       $00
0008AF77 01                         	dc.b	$01
0008AF78 E104                       	smpsAlterNote       $04
0008AF7A 01                         	dc.b	$01
0008AF7B E100                       	smpsAlterNote       $00
0008AF7D 01                         	dc.b	$01
0008AF7E E1FD                       	smpsAlterNote       $FD
0008AF80 01                         	dc.b	$01
0008AF81 ECF5                       	smpsPSGAlterVol     $F5
0008AF83 9206                       	dc.b	nF1, $06
0008AF85 EC04                       	smpsPSGAlterVol     $04
0008AF87 E701                       	dc.b	smpsNoAttack, $01
0008AF89 EC07                       	smpsPSGAlterVol     $07
0008AF8B 8003                       	dc.b	nRst, $03
0008AF8D ECF5                       	smpsPSGAlterVol     $F5
0008AF8F 9207                       	dc.b	nF1, $07
0008AF91 EC0B                       	smpsPSGAlterVol     $0B
0008AF93 8007                       	dc.b	nRst, $07
0008AF95 E103                       	smpsAlterNote       $03
0008AF97 0101                       	dc.b	$01, $01
0008AF99 E1FD                       	smpsAlterNote       $FD
0008AF9B 01                         	dc.b	$01
0008AF9C E1FA                       	smpsAlterNote       $FA
0008AF9E 01                         	dc.b	$01
0008AF9F E1FD                       	smpsAlterNote       $FD
0008AFA1 ECF5                       	smpsPSGAlterVol     $F5
0008AFA3 9206                       	dc.b	nF1, $06
0008AFA5 EC0B                       	smpsPSGAlterVol     $0B
0008AFA7 8004                       	dc.b	nRst, $04
0008AFA9 ECF5                       	smpsPSGAlterVol     $F5
0008AFAB 9206                       	dc.b	nF1, $06
0008AFAD EC04                       	smpsPSGAlterVol     $04
0008AFAF E701                       	dc.b	smpsNoAttack, $01
0008AFB1 EC07                       	smpsPSGAlterVol     $07
0008AFB3 8006                       	dc.b	nRst, $06
0008AFB5 E100                       	smpsAlterNote       $00
0008AFB7 01                         	dc.b	$01
0008AFB8 E104                       	smpsAlterNote       $04
0008AFBA 01                         	dc.b	$01
0008AFBB E100                       	smpsAlterNote       $00
0008AFBD 01                         	dc.b	$01
0008AFBE E1FA                       	smpsAlterNote       $FA
0008AFC0 01                         	dc.b	$01
0008AFC1 E1FD                       	smpsAlterNote       $FD
0008AFC3 ECF5                       	smpsPSGAlterVol     $F5
0008AFC5 9206                       	dc.b	nF1, $06
0008AFC7 EC04                       	smpsPSGAlterVol     $04
0008AFC9 E701                       	dc.b	smpsNoAttack, $01
0008AFCB EC07                       	smpsPSGAlterVol     $07
0008AFCD 8003                       	dc.b	nRst, $03
0008AFCF ECF5                       	smpsPSGAlterVol     $F5
0008AFD1 9207                       	dc.b	nF1, $07
0008AFD3 EC0B                       	smpsPSGAlterVol     $0B
0008AFD5 8006                       	dc.b	nRst, $06
0008AFD7 E100                       	smpsAlterNote       $00
0008AFD9 01                         	dc.b	$01
0008AFDA E103                       	smpsAlterNote       $03
0008AFDC 0101                       	dc.b	$01, $01
0008AFDE E1FD                       	smpsAlterNote       $FD
0008AFE0 01                         	dc.b	$01
0008AFE1 ECF5                       	smpsPSGAlterVol     $F5
0008AFE3 9207                       	dc.b	nF1, $07
0008AFE5 EC0B                       	smpsPSGAlterVol     $0B
0008AFE7 8004                       	dc.b	nRst, $04
0008AFE9 ECF5                       	smpsPSGAlterVol     $F5
0008AFEB 9206                       	dc.b	nF1, $06
0008AFED EC0B                       	smpsPSGAlterVol     $0B
0008AFEF 8007                       	dc.b	nRst, $07
0008AFF1 E103                       	smpsAlterNote       $03
0008AFF3 0101                       	dc.b	$01, $01
0008AFF5 E100                       	smpsAlterNote       $00
0008AFF7 01                         	dc.b	$01
0008AFF8 E1FA                       	smpsAlterNote       $FA
0008AFFA 01                         	dc.b	$01
0008AFFB E1FD                       	smpsAlterNote       $FD
0008AFFD ECF5                       	smpsPSGAlterVol     $F5
0008AFFF 9206                       	dc.b	nF1, $06
0008B001 EC04                       	smpsPSGAlterVol     $04
0008B003 E701                       	dc.b	smpsNoAttack, $01
0008B005 EC07                       	smpsPSGAlterVol     $07
0008B007 8003                       	dc.b	nRst, $03
0008B009 ECF5                       	smpsPSGAlterVol     $F5
0008B00B 9206                       	dc.b	nF1, $06
0008B00D EC04                       	smpsPSGAlterVol     $04
0008B00F E701                       	dc.b	smpsNoAttack, $01
0008B011 EC07                       	smpsPSGAlterVol     $07
0008B013 8006                       	dc.b	nRst, $06
0008B015 E100                       	smpsAlterNote       $00
0008B017 01                         	dc.b	$01
0008B018 E104                       	smpsAlterNote       $04
0008B01A 01                         	dc.b	$01
0008B01B E100                       	smpsAlterNote       $00
0008B01D 01                         	dc.b	$01
0008B01E E1FD                       	smpsAlterNote       $FD
0008B020 01                         	dc.b	$01
0008B021 ECF5                       	smpsPSGAlterVol     $F5
0008B023 9206                       	dc.b	nF1, $06
0008B025 EC04                       	smpsPSGAlterVol     $04
0008B027 E701                       	dc.b	smpsNoAttack, $01
0008B029 EC07                       	smpsPSGAlterVol     $07
0008B02B 8003                       	dc.b	nRst, $03
0008B02D ECF5                       	smpsPSGAlterVol     $F5
0008B02F 9207                       	dc.b	nF1, $07
0008B031 EC0B                       	smpsPSGAlterVol     $0B
0008B033 8007                       	dc.b	nRst, $07
0008B035 E104                       	smpsAlterNote       $04
0008B037 0101                       	dc.b	$01, $01
0008B039 E1FB                       	smpsAlterNote       $FB
0008B03B 01                         	dc.b	$01
0008B03C E1F6                       	smpsAlterNote       $F6
0008B03E 0101                       	dc.b	$01, $01
0008B040 E1FF                       	smpsAlterNote       $FF
0008B042 01                         	dc.b	$01
0008B043 E105                       	smpsAlterNote       $05
0008B045 01                         	dc.b	$01
0008B046 E104                       	smpsAlterNote       $04
0008B048 01                         	dc.b	$01
0008B049 E1FB                       	smpsAlterNote       $FB
0008B04B 01                         	dc.b	$01
0008B04C E1F5                       	smpsAlterNote       $F5
0008B04E 01                         	dc.b	$01
0008B04F E1FC                       	smpsAlterNote       $FC
0008B051 ECF5                       	smpsPSGAlterVol     $F5
0008B053 8B0E                       	dc.b	nBb0, $0E
0008B055 E102                       	smpsAlterNote       $02
0008B057 EC0B                       	smpsPSGAlterVol     $0B
0008B059 8001                       	dc.b	nRst, $01
0008B05B E101                       	smpsAlterNote       $01
0008B05D 01                         	dc.b	$01
0008B05E E1FC                       	smpsAlterNote       $FC
0008B060 01                         	dc.b	$01
0008B061 E1F9                       	smpsAlterNote       $F9
0008B063 0101                       	dc.b	$01, $01
0008B065 E1FF                       	smpsAlterNote       $FF
0008B067 01                         	dc.b	$01
0008B068 E102                       	smpsAlterNote       $02
0008B06A 01                         	dc.b	$01
0008B06B E1FF                       	smpsAlterNote       $FF
0008B06D 01                         	dc.b	$01
0008B06E E1FC                       	smpsAlterNote       $FC
0008B070 01                         	dc.b	$01
0008B071 E1F8                       	smpsAlterNote       $F8
0008B073 01                         	dc.b	$01
0008B074 E1FC                       	smpsAlterNote       $FC
0008B076 01                         	dc.b	$01
0008B077 E101                       	smpsAlterNote       $01
0008B079 01                         	dc.b	$01
0008B07A E102                       	smpsAlterNote       $02
0008B07C 01                         	dc.b	$01
0008B07D E1FF                       	smpsAlterNote       $FF
0008B07F 01                         	dc.b	$01
0008B080 E1FB                       	smpsAlterNote       $FB
0008B082 ECF5                       	smpsPSGAlterVol     $F5
0008B084 8D0D                       	dc.b	nC1, $0D
0008B086 E101                       	smpsAlterNote       $01
0008B088 EC0B                       	smpsPSGAlterVol     $0B
0008B08A 8001                       	dc.b	nRst, $01
0008B08C E102                       	smpsAlterNote       $02
0008B08E 01                         	dc.b	$01
0008B08F E1FF                       	smpsAlterNote       $FF
0008B091 01                         	dc.b	$01
0008B092 E1F9                       	smpsAlterNote       $F9
0008B094 0101                       	dc.b	$01, $01
0008B096 E1FC                       	smpsAlterNote       $FC
0008B098 01                         	dc.b	$01
0008B099 E101                       	smpsAlterNote       $01
0008B09B 0101                       	dc.b	$01, $01
0008B09D E1FC                       	smpsAlterNote       $FC
0008B09F 01                         	dc.b	$01
0008B0A0 E1F9                       	smpsAlterNote       $F9
0008B0A2 0101                       	dc.b	$01, $01
0008B0A4 E1FF                       	smpsAlterNote       $FF
0008B0A6 01                         	dc.b	$01
0008B0A7 E102                       	smpsAlterNote       $02
0008B0A9 01                         	dc.b	$01
0008B0AA E101                       	smpsAlterNote       $01
0008B0AC 01                         	dc.b	$01
0008B0AD E1FC                       	smpsAlterNote       $FC
0008B0AF ECF5                       	smpsPSGAlterVol     $F5
0008B0B1 8F0D                       	dc.b	nD1, $0D
0008B0B3 E1FF                       	smpsAlterNote       $FF
0008B0B5 EC04                       	smpsPSGAlterVol     $04
0008B0B7 E701                       	dc.b	smpsNoAttack, $01
0008B0B9 EC07                       	smpsPSGAlterVol     $07
0008B0BB E103                       	smpsAlterNote       $03
0008B0BD 8001                       	dc.b	nRst, $01
0008B0BF E102                       	smpsAlterNote       $02
0008B0C1 01                         	dc.b	$01
0008B0C2 E1FD                       	smpsAlterNote       $FD
0008B0C4 01                         	dc.b	$01
0008B0C5 E1F9                       	smpsAlterNote       $F9
0008B0C7 01                         	dc.b	$01
0008B0C8 E1FD                       	smpsAlterNote       $FD
0008B0CA 01                         	dc.b	$01
0008B0CB E100                       	smpsAlterNote       $00
0008B0CD 01                         	dc.b	$01
0008B0CE E103                       	smpsAlterNote       $03
0008B0D0 01                         	dc.b	$01
0008B0D1 E100                       	smpsAlterNote       $00
0008B0D3 01                         	dc.b	$01
0008B0D4 E1FA                       	smpsAlterNote       $FA
0008B0D6 01                         	dc.b	$01
0008B0D7 E1F9                       	smpsAlterNote       $F9
0008B0D9 01                         	dc.b	$01
0008B0DA E1FD                       	smpsAlterNote       $FD
0008B0DC 01                         	dc.b	$01
0008B0DD E102                       	smpsAlterNote       $02
0008B0DF 0101                       	dc.b	$01, $01
0008B0E1 E100                       	smpsAlterNote       $00
0008B0E3 01                         	dc.b	$01
0008B0E4 E1FD                       	smpsAlterNote       $FD
0008B0E6 ECF5                       	smpsPSGAlterVol     $F5
0008B0E8 910D                       	dc.b	nE1, $0D
0008B0EA E103                       	smpsAlterNote       $03
0008B0EC EC0B                       	smpsPSGAlterVol     $0B
0008B0EE 8001 01                    	dc.b	nRst, $01, $01
0008B0F1 E100                       	smpsAlterNote       $00
0008B0F3 01                         	dc.b	$01
0008B0F4 E1FA                       	smpsAlterNote       $FA
0008B0F6 0101                       	dc.b	$01, $01
0008B0F8 E100                       	smpsAlterNote       $00
0008B0FA 01                         	dc.b	$01
0008B0FB E103                       	smpsAlterNote       $03
0008B0FD 01                         	dc.b	$01
0008B0FE E1FD                       	smpsAlterNote       $FD
0008B100 ECF5                       	smpsPSGAlterVol     $F5
0008B102 9206                       	dc.b	nF1, $06
0008B104 EC04                       	smpsPSGAlterVol     $04
0008B106 E701                       	dc.b	smpsNoAttack, $01
0008B108 EC07                       	smpsPSGAlterVol     $07
0008B10A 8003                       	dc.b	nRst, $03
0008B10C ECF5                       	smpsPSGAlterVol     $F5
0008B10E 9207                       	dc.b	nF1, $07
0008B110 EC0B                       	smpsPSGAlterVol     $0B
0008B112 8006                       	dc.b	nRst, $06
0008B114 E100                       	smpsAlterNote       $00
0008B116 01                         	dc.b	$01
0008B117 E103                       	smpsAlterNote       $03
0008B119 0101                       	dc.b	$01, $01
0008B11B E1FD                       	smpsAlterNote       $FD
0008B11D 01                         	dc.b	$01
0008B11E ECF5                       	smpsPSGAlterVol     $F5
0008B120 9407                       	dc.b	nG1, $07
0008B122 EC0B                       	smpsPSGAlterVol     $0B
0008B124 8004                       	dc.b	nRst, $04
0008B126 ECF5                       	smpsPSGAlterVol     $F5
0008B128 9406                       	dc.b	nG1, $06
0008B12A EC04                       	smpsPSGAlterVol     $04
0008B12C E701                       	dc.b	smpsNoAttack, $01
0008B12E EC07                       	smpsPSGAlterVol     $07
0008B130 8006                       	dc.b	nRst, $06
0008B132 E103                       	smpsAlterNote       $03
0008B134 01                         	dc.b	$01
0008B135 E104                       	smpsAlterNote       $04
0008B137 01                         	dc.b	$01
0008B138 E100                       	smpsAlterNote       $00
0008B13A 01                         	dc.b	$01
0008B13B E1F9                       	smpsAlterNote       $F9
0008B13D 01                         	dc.b	$01
0008B13E E1FD                       	smpsAlterNote       $FD
0008B140 ECF5                       	smpsPSGAlterVol     $F5
0008B142 9206                       	dc.b	nF1, $06
0008B144 EC04                       	smpsPSGAlterVol     $04
0008B146 E701                       	dc.b	smpsNoAttack, $01
0008B148 EC07                       	smpsPSGAlterVol     $07
0008B14A 8003                       	dc.b	nRst, $03
0008B14C ECF5                       	smpsPSGAlterVol     $F5
0008B14E 9206                       	dc.b	nF1, $06
0008B150 EC04                       	smpsPSGAlterVol     $04
0008B152 E701                       	dc.b	smpsNoAttack, $01
0008B154 EC07                       	smpsPSGAlterVol     $07
0008B156 8006                       	dc.b	nRst, $06
0008B158 E100                       	smpsAlterNote       $00
0008B15A 01                         	dc.b	$01
0008B15B E104                       	smpsAlterNote       $04
0008B15D 01                         	dc.b	$01
0008B15E E103                       	smpsAlterNote       $03
0008B160 01                         	dc.b	$01
0008B161 E1FD                       	smpsAlterNote       $FD
0008B163 01                         	dc.b	$01
0008B164 ECF5                       	smpsPSGAlterVol     $F5
0008B166 9407                       	dc.b	nG1, $07
0008B168 EC0B                       	smpsPSGAlterVol     $0B
0008B16A 8004                       	dc.b	nRst, $04
0008B16C ECF5                       	smpsPSGAlterVol     $F5
0008B16E 9406                       	dc.b	nG1, $06
0008B170 EC0B                       	smpsPSGAlterVol     $0B
0008B172 8007                       	dc.b	nRst, $07
0008B174 E103                       	smpsAlterNote       $03
0008B176 0101                       	dc.b	$01, $01
0008B178 E100                       	smpsAlterNote       $00
0008B17A 01                         	dc.b	$01
0008B17B E1F9                       	smpsAlterNote       $F9
0008B17D 01                         	dc.b	$01
0008B17E E1FD                       	smpsAlterNote       $FD
0008B180 ECF5                       	smpsPSGAlterVol     $F5
0008B182 9206                       	dc.b	nF1, $06
0008B184 EC04                       	smpsPSGAlterVol     $04
0008B186 E701                       	dc.b	smpsNoAttack, $01
0008B188 EC07                       	smpsPSGAlterVol     $07
0008B18A 8003                       	dc.b	nRst, $03
0008B18C ECF5                       	smpsPSGAlterVol     $F5
0008B18E 9206                       	dc.b	nF1, $06
0008B190 EC04                       	smpsPSGAlterVol     $04
0008B192 E701                       	dc.b	smpsNoAttack, $01
0008B194 EC07                       	smpsPSGAlterVol     $07
0008B196 8006                       	dc.b	nRst, $06
0008B198 E100                       	smpsAlterNote       $00
0008B19A 01                         	dc.b	$01
0008B19B E104                       	smpsAlterNote       $04
0008B19D 01                         	dc.b	$01
0008B19E E100                       	smpsAlterNote       $00
0008B1A0 01                         	dc.b	$01
0008B1A1 E1FB                       	smpsAlterNote       $FB
0008B1A3 01                         	dc.b	$01
0008B1A4 E1FD                       	smpsAlterNote       $FD
0008B1A6 ECF5                       	smpsPSGAlterVol     $F5
0008B1A8 9406                       	dc.b	nG1, $06
0008B1AA EC04                       	smpsPSGAlterVol     $04
0008B1AC E701                       	dc.b	smpsNoAttack, $01
0008B1AE EC07                       	smpsPSGAlterVol     $07
0008B1B0 8003                       	dc.b	nRst, $03
0008B1B2 ECF5                       	smpsPSGAlterVol     $F5
0008B1B4 9407                       	dc.b	nG1, $07
0008B1B6 EC0B                       	smpsPSGAlterVol     $0B
0008B1B8 8006                       	dc.b	nRst, $06
0008B1BA E100                       	smpsAlterNote       $00
0008B1BC 01                         	dc.b	$01
0008B1BD E103                       	smpsAlterNote       $03
0008B1BF 0101                       	dc.b	$01, $01
0008B1C1 E1FD                       	smpsAlterNote       $FD
0008B1C3 01                         	dc.b	$01
0008B1C4 ECF5                       	smpsPSGAlterVol     $F5
0008B1C6 9207                       	dc.b	nF1, $07
0008B1C8 EC0B                       	smpsPSGAlterVol     $0B
0008B1CA 8004                       	dc.b	nRst, $04
0008B1CC ECF5                       	smpsPSGAlterVol     $F5
0008B1CE 9206                       	dc.b	nF1, $06
0008B1D0 EC04                       	smpsPSGAlterVol     $04
0008B1D2 E701                       	dc.b	smpsNoAttack, $01
0008B1D4 ECFC                       	smpsPSGAlterVol     $FC
0008B1D6 E1FC                       	smpsAlterNote       $FC
0008B1D8 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008B1DC EC04                       	smpsPSGAlterVol     $04
0008B1DE E701                       	dc.b	smpsNoAttack, $01
0008B1E0 ECFC                       	smpsPSGAlterVol     $FC
0008B1E2 9003                       	dc.b	nEb1, $03
0008B1E4 E1FD                       	smpsAlterNote       $FD
0008B1E6 9403                       	dc.b	nG1, $03
0008B1E8 EC04                       	smpsPSGAlterVol     $04
0008B1EA E701                       	dc.b	smpsNoAttack, $01
0008B1EC E1FE                       	smpsAlterNote       $FE
0008B1EE ECFC                       	smpsPSGAlterVol     $FC
0008B1F0 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008B1F4 EC04                       	smpsPSGAlterVol     $04
0008B1F6 E701                       	dc.b	smpsNoAttack, $01
0008B1F8 EC07                       	smpsPSGAlterVol     $07
0008B1FA 8009                       	dc.b	nRst, $09
0008B1FC E100                       	smpsAlterNote       $00
0008B1FE 01                         	dc.b	$01
0008B1FF F6F5 19                    	smpsJump            music84_Jump07
0008B202                            
0008B202                            ; PSG2 Data
0008B202                            music84_PSG2:
0008B202 E1FC                       	smpsAlterNote       $FC
0008B204 EC04                       	smpsPSGAlterVol     $04
0008B206 8F03                       	dc.b	nD1, $03
0008B208 E1FD                       	smpsAlterNote       $FD
0008B20A 9203                       	dc.b	nF1, $03
0008B20C EC04                       	smpsPSGAlterVol     $04
0008B20E E701                       	dc.b	smpsNoAttack, $01
0008B210 E1FE                       	smpsAlterNote       $FE
0008B212 ECFC                       	smpsPSGAlterVol     $FC
0008B214 9603                       	dc.b	nA1, $03
0008B216 E1FD                       	smpsAlterNote       $FD
0008B218 9103                       	dc.b	nE1, $03
0008B21A EC04                       	smpsPSGAlterVol     $04
0008B21C E701                       	dc.b	smpsNoAttack, $01
0008B21E ECFC                       	smpsPSGAlterVol     $FC
0008B220 9403                       	dc.b	nG1, $03
0008B222 E1FE                       	smpsAlterNote       $FE
0008B224 9703                       	dc.b	nBb1, $03
0008B226 EC04                       	smpsPSGAlterVol     $04
0008B228 E701                       	dc.b	smpsNoAttack, $01
0008B22A E1FF                       	smpsAlterNote       $FF
0008B22C ECFC                       	smpsPSGAlterVol     $FC
0008B22E 9B02                       	dc.b	nD2, $02
0008B230 EC04                       	smpsPSGAlterVol     $04
0008B232 E701                       	dc.b	smpsNoAttack, $01
0008B234 ECFC                       	smpsPSGAlterVol     $FC
0008B236 E1FE                       	smpsAlterNote       $FE
0008B238 9A03                       	dc.b	nCs2, $03
0008B23A EC0B                       	smpsPSGAlterVol     $0B
0008B23C 800A                       	dc.b	nRst, $0A
0008B23E E102                       	smpsAlterNote       $02
0008B240 01                         	dc.b	$01
0008B241 E10A                       	smpsAlterNote       $0A
0008B243 01                         	dc.b	$01
0008B244 E102                       	smpsAlterNote       $02
0008B246 01                         	dc.b	$01
0008B247 E1FC                       	smpsAlterNote       $FC
0008B249 01                         	dc.b	$01
0008B24A E10A                       	smpsAlterNote       $0A
0008B24C 01                         	dc.b	$01
0008B24D E1FC                       	smpsAlterNote       $FC
0008B24F 01                         	dc.b	$01
0008B250 E108                       	smpsAlterNote       $08
0008B252 01                         	dc.b	$01
0008B253 E10A                       	smpsAlterNote       $0A
0008B255 01                         	dc.b	$01
0008B256 E102                       	smpsAlterNote       $02
0008B258 01                         	dc.b	$01
0008B259 E1F7                       	smpsAlterNote       $F7
0008B25B 0101                       	dc.b	$01, $01
0008B25D E102                       	smpsAlterNote       $02
0008B25F 01                         	dc.b	$01
0008B260 E108                       	smpsAlterNote       $08
0008B262 0101                       	dc.b	$01, $01
0008B264 E1FC                       	smpsAlterNote       $FC
0008B266 01                         	dc.b	$01
0008B267 E10A                       	smpsAlterNote       $0A
0008B269 01                         	dc.b	$01
0008B26A E1F7                       	smpsAlterNote       $F7
0008B26C 01                         	dc.b	$01
0008B26D E102                       	smpsAlterNote       $02
0008B26F 01                         	dc.b	$01
0008B270 E10A                       	smpsAlterNote       $0A
0008B272 01                         	dc.b	$01
0008B273 E102                       	smpsAlterNote       $02
0008B275 01                         	dc.b	$01
0008B276 E1FC                       	smpsAlterNote       $FC
0008B278 01                         	dc.b	$01
0008B279                            
0008B279                            music84_Jump06:
0008B279 E10A                       	smpsAlterNote       $0A
0008B27B 8001                       	dc.b	nRst, $01
0008B27D E1FC                       	smpsAlterNote       $FC
0008B27F 01                         	dc.b	$01
0008B280 E108                       	smpsAlterNote       $08
0008B282 01                         	dc.b	$01
0008B283 E10A                       	smpsAlterNote       $0A
0008B285 01                         	dc.b	$01
0008B286 E1FC                       	smpsAlterNote       $FC
0008B288 ECF5                       	smpsPSGAlterVol     $F5
0008B28A 8F06                       	dc.b	nD1, $06
0008B28C EC04                       	smpsPSGAlterVol     $04
0008B28E E701                       	dc.b	smpsNoAttack, $01
0008B290 EC07                       	smpsPSGAlterVol     $07
0008B292 8003                       	dc.b	nRst, $03
0008B294 ECF5                       	smpsPSGAlterVol     $F5
0008B296 8F06                       	dc.b	nD1, $06
0008B298 EC04                       	smpsPSGAlterVol     $04
0008B29A E701                       	dc.b	smpsNoAttack, $01
0008B29C EC07                       	smpsPSGAlterVol     $07
0008B29E 8006                       	dc.b	nRst, $06
0008B2A0 E1FF                       	smpsAlterNote       $FF
0008B2A2 01                         	dc.b	$01
0008B2A3 E102                       	smpsAlterNote       $02
0008B2A5 01                         	dc.b	$01
0008B2A6 E1FF                       	smpsAlterNote       $FF
0008B2A8 01                         	dc.b	$01
0008B2A9 E1F9                       	smpsAlterNote       $F9
0008B2AB 01                         	dc.b	$01
0008B2AC E1FC                       	smpsAlterNote       $FC
0008B2AE ECF5                       	smpsPSGAlterVol     $F5
0008B2B0 9006                       	dc.b	nEb1, $06
0008B2B2 EC04                       	smpsPSGAlterVol     $04
0008B2B4 E701                       	dc.b	smpsNoAttack, $01
0008B2B6 EC07                       	smpsPSGAlterVol     $07
0008B2B8 8003                       	dc.b	nRst, $03
0008B2BA ECF5                       	smpsPSGAlterVol     $F5
0008B2BC 9007                       	dc.b	nEb1, $07
0008B2BE EC0B                       	smpsPSGAlterVol     $0B
0008B2C0 8006                       	dc.b	nRst, $06
0008B2C2 E1FF                       	smpsAlterNote       $FF
0008B2C4 01                         	dc.b	$01
0008B2C5 E103                       	smpsAlterNote       $03
0008B2C7 0101                       	dc.b	$01, $01
0008B2C9 E1FC                       	smpsAlterNote       $FC
0008B2CB 01                         	dc.b	$01
0008B2CC ECF5                       	smpsPSGAlterVol     $F5
0008B2CE 8F07                       	dc.b	nD1, $07
0008B2D0 EC0B                       	smpsPSGAlterVol     $0B
0008B2D2 8004                       	dc.b	nRst, $04
0008B2D4 ECF5                       	smpsPSGAlterVol     $F5
0008B2D6 8F06                       	dc.b	nD1, $06
0008B2D8 EC04                       	smpsPSGAlterVol     $04
0008B2DA E701                       	dc.b	smpsNoAttack, $01
0008B2DC EC07                       	smpsPSGAlterVol     $07
0008B2DE 8006                       	dc.b	nRst, $06
0008B2E0 E102                       	smpsAlterNote       $02
0008B2E2 01                         	dc.b	$01
0008B2E3 E103                       	smpsAlterNote       $03
0008B2E5 01                         	dc.b	$01
0008B2E6 E1FF                       	smpsAlterNote       $FF
0008B2E8 01                         	dc.b	$01
0008B2E9 E1F9                       	smpsAlterNote       $F9
0008B2EB 01                         	dc.b	$01
0008B2EC E1FC                       	smpsAlterNote       $FC
0008B2EE ECF5                       	smpsPSGAlterVol     $F5
0008B2F0 8F06                       	dc.b	nD1, $06
0008B2F2 EC04                       	smpsPSGAlterVol     $04
0008B2F4 E701                       	dc.b	smpsNoAttack, $01
0008B2F6 EC07                       	smpsPSGAlterVol     $07
0008B2F8 8003                       	dc.b	nRst, $03
0008B2FA ECF5                       	smpsPSGAlterVol     $F5
0008B2FC 8F06                       	dc.b	nD1, $06
0008B2FE EC04                       	smpsPSGAlterVol     $04
0008B300 E701                       	dc.b	smpsNoAttack, $01
0008B302 EC07                       	smpsPSGAlterVol     $07
0008B304 8006                       	dc.b	nRst, $06
0008B306 E1FF                       	smpsAlterNote       $FF
0008B308 01                         	dc.b	$01
0008B309 E103                       	smpsAlterNote       $03
0008B30B 01                         	dc.b	$01
0008B30C E1FF                       	smpsAlterNote       $FF
0008B30E 01                         	dc.b	$01
0008B30F E1FC                       	smpsAlterNote       $FC
0008B311 01                         	dc.b	$01
0008B312 ECF5                       	smpsPSGAlterVol     $F5
0008B314 8F06                       	dc.b	nD1, $06
0008B316 EC04                       	smpsPSGAlterVol     $04
0008B318 E701                       	dc.b	smpsNoAttack, $01
0008B31A EC07                       	smpsPSGAlterVol     $07
0008B31C 8003                       	dc.b	nRst, $03
0008B31E ECF5                       	smpsPSGAlterVol     $F5
0008B320 8F07                       	dc.b	nD1, $07
0008B322 EC0B                       	smpsPSGAlterVol     $0B
0008B324 8007                       	dc.b	nRst, $07
0008B326 E101                       	smpsAlterNote       $01
0008B328 0101                       	dc.b	$01, $01
0008B32A E1FC                       	smpsAlterNote       $FC
0008B32C 01                         	dc.b	$01
0008B32D E1F9                       	smpsAlterNote       $F9
0008B32F 01                         	dc.b	$01
0008B330 E1FC                       	smpsAlterNote       $FC
0008B332 ECF5                       	smpsPSGAlterVol     $F5
0008B334 9006                       	dc.b	nEb1, $06
0008B336 EC0B                       	smpsPSGAlterVol     $0B
0008B338 8004                       	dc.b	nRst, $04
0008B33A ECF5                       	smpsPSGAlterVol     $F5
0008B33C 9006                       	dc.b	nEb1, $06
0008B33E EC04                       	smpsPSGAlterVol     $04
0008B340 E701                       	dc.b	smpsNoAttack, $01
0008B342 EC07                       	smpsPSGAlterVol     $07
0008B344 8006                       	dc.b	nRst, $06
0008B346 E100                       	smpsAlterNote       $00
0008B348 01                         	dc.b	$01
0008B349 E102                       	smpsAlterNote       $02
0008B34B 01                         	dc.b	$01
0008B34C E100                       	smpsAlterNote       $00
0008B34E 01                         	dc.b	$01
0008B34F E1FD                       	smpsAlterNote       $FD
0008B351 01                         	dc.b	$01
0008B352 E1FF                       	smpsAlterNote       $FF
0008B354 ECF5                       	smpsPSGAlterVol     $F5
0008B356 9B06                       	dc.b	nD2, $06
0008B358 EC04                       	smpsPSGAlterVol     $04
0008B35A E701                       	dc.b	smpsNoAttack, $01
0008B35C EC07                       	smpsPSGAlterVol     $07
0008B35E 8003                       	dc.b	nRst, $03
0008B360 ECF5                       	smpsPSGAlterVol     $F5
0008B362 9B07                       	dc.b	nD2, $07
0008B364 EC0B                       	smpsPSGAlterVol     $0B
0008B366 8006                       	dc.b	nRst, $06
0008B368 E102                       	smpsAlterNote       $02
0008B36A 01                         	dc.b	$01
0008B36B E106                       	smpsAlterNote       $06
0008B36D 01                         	dc.b	$01
0008B36E E105                       	smpsAlterNote       $05
0008B370 01                         	dc.b	$01
0008B371 E1FF                       	smpsAlterNote       $FF
0008B373 01                         	dc.b	$01
0008B374 ECF5                       	smpsPSGAlterVol     $F5
0008B376 9B07                       	dc.b	nD2, $07
0008B378 EC0B                       	smpsPSGAlterVol     $0B
0008B37A 8004                       	dc.b	nRst, $04
0008B37C ECF5                       	smpsPSGAlterVol     $F5
0008B37E 9B06                       	dc.b	nD2, $06
0008B380 EC0B                       	smpsPSGAlterVol     $0B
0008B382 8007                       	dc.b	nRst, $07
0008B384 E105                       	smpsAlterNote       $05
0008B386 0101                       	dc.b	$01, $01
0008B388 E102                       	smpsAlterNote       $02
0008B38A 01                         	dc.b	$01
0008B38B E1FC                       	smpsAlterNote       $FC
0008B38D 01                         	dc.b	$01
0008B38E E1FF                       	smpsAlterNote       $FF
0008B390 ECF5                       	smpsPSGAlterVol     $F5
0008B392 9B06                       	dc.b	nD2, $06
0008B394 EC04                       	smpsPSGAlterVol     $04
0008B396 E701                       	dc.b	smpsNoAttack, $01
0008B398 EC07                       	smpsPSGAlterVol     $07
0008B39A 8003                       	dc.b	nRst, $03
0008B39C ECF5                       	smpsPSGAlterVol     $F5
0008B39E 9B06                       	dc.b	nD2, $06
0008B3A0 EC04                       	smpsPSGAlterVol     $04
0008B3A2 E701                       	dc.b	smpsNoAttack, $01
0008B3A4 EC07                       	smpsPSGAlterVol     $07
0008B3A6 8006                       	dc.b	nRst, $06
0008B3A8 E102                       	smpsAlterNote       $02
0008B3AA 01                         	dc.b	$01
0008B3AB E106                       	smpsAlterNote       $06
0008B3AD 01                         	dc.b	$01
0008B3AE E102                       	smpsAlterNote       $02
0008B3B0 01                         	dc.b	$01
0008B3B1 E1FF                       	smpsAlterNote       $FF
0008B3B3 01                         	dc.b	$01
0008B3B4 ECF5                       	smpsPSGAlterVol     $F5
0008B3B6 9B06                       	dc.b	nD2, $06
0008B3B8 EC04                       	smpsPSGAlterVol     $04
0008B3BA E701                       	dc.b	smpsNoAttack, $01
0008B3BC EC07                       	smpsPSGAlterVol     $07
0008B3BE 8003                       	dc.b	nRst, $03
0008B3C0 ECF5                       	smpsPSGAlterVol     $F5
0008B3C2 9B07                       	dc.b	nD2, $07
0008B3C4 EC0B                       	smpsPSGAlterVol     $0B
0008B3C6 8007                       	dc.b	nRst, $07
0008B3C8 E105                       	smpsAlterNote       $05
0008B3CA 0101                       	dc.b	$01, $01
0008B3CC E1FF                       	smpsAlterNote       $FF
0008B3CE 01                         	dc.b	$01
0008B3CF E1FC                       	smpsAlterNote       $FC
0008B3D1 01                         	dc.b	$01
0008B3D2 E1FF                       	smpsAlterNote       $FF
0008B3D4 ECF5                       	smpsPSGAlterVol     $F5
0008B3D6 9B06                       	dc.b	nD2, $06
0008B3D8 EC0B                       	smpsPSGAlterVol     $0B
0008B3DA 8004                       	dc.b	nRst, $04
0008B3DC ECF5                       	smpsPSGAlterVol     $F5
0008B3DE 9B06                       	dc.b	nD2, $06
0008B3E0 EC04                       	smpsPSGAlterVol     $04
0008B3E2 E701                       	dc.b	smpsNoAttack, $01
0008B3E4 EC07                       	smpsPSGAlterVol     $07
0008B3E6 8006                       	dc.b	nRst, $06
0008B3E8 E105                       	smpsAlterNote       $05
0008B3EA 01                         	dc.b	$01
0008B3EB E106                       	smpsAlterNote       $06
0008B3ED 01                         	dc.b	$01
0008B3EE E102                       	smpsAlterNote       $02
0008B3F0 01                         	dc.b	$01
0008B3F1 E1FC                       	smpsAlterNote       $FC
0008B3F3 01                         	dc.b	$01
0008B3F4 E1FF                       	smpsAlterNote       $FF
0008B3F6 ECF5                       	smpsPSGAlterVol     $F5
0008B3F8 9B06                       	dc.b	nD2, $06
0008B3FA EC04                       	smpsPSGAlterVol     $04
0008B3FC E701                       	dc.b	smpsNoAttack, $01
0008B3FE EC07                       	smpsPSGAlterVol     $07
0008B400 8003                       	dc.b	nRst, $03
0008B402 ECF5                       	smpsPSGAlterVol     $F5
0008B404 9B06                       	dc.b	nD2, $06
0008B406 EC04                       	smpsPSGAlterVol     $04
0008B408 E701                       	dc.b	smpsNoAttack, $01
0008B40A EC07                       	smpsPSGAlterVol     $07
0008B40C 8006                       	dc.b	nRst, $06
0008B40E E102                       	smpsAlterNote       $02
0008B410 01                         	dc.b	$01
0008B411 E106                       	smpsAlterNote       $06
0008B413 01                         	dc.b	$01
0008B414 E105                       	smpsAlterNote       $05
0008B416 01                         	dc.b	$01
0008B417 E1FF                       	smpsAlterNote       $FF
0008B419 01                         	dc.b	$01
0008B41A ECF5                       	smpsPSGAlterVol     $F5
0008B41C 9B07                       	dc.b	nD2, $07
0008B41E EC0B                       	smpsPSGAlterVol     $0B
0008B420 8004                       	dc.b	nRst, $04
0008B422 ECF5                       	smpsPSGAlterVol     $F5
0008B424 9B06                       	dc.b	nD2, $06
0008B426 EC0B                       	smpsPSGAlterVol     $0B
0008B428 8007                       	dc.b	nRst, $07
0008B42A E105                       	smpsAlterNote       $05
0008B42C 0101                       	dc.b	$01, $01
0008B42E E102                       	smpsAlterNote       $02
0008B430 01                         	dc.b	$01
0008B431 E1FC                       	smpsAlterNote       $FC
0008B433 01                         	dc.b	$01
0008B434 E1FF                       	smpsAlterNote       $FF
0008B436 ECF5                       	smpsPSGAlterVol     $F5
0008B438 9B06                       	dc.b	nD2, $06
0008B43A EC04                       	smpsPSGAlterVol     $04
0008B43C E701                       	dc.b	smpsNoAttack, $01
0008B43E EC07                       	smpsPSGAlterVol     $07
0008B440 8003                       	dc.b	nRst, $03
0008B442 ECF5                       	smpsPSGAlterVol     $F5
0008B444 9B06                       	dc.b	nD2, $06
0008B446 EC04                       	smpsPSGAlterVol     $04
0008B448 E701                       	dc.b	smpsNoAttack, $01
0008B44A EC07                       	smpsPSGAlterVol     $07
0008B44C 8006                       	dc.b	nRst, $06
0008B44E E102                       	smpsAlterNote       $02
0008B450 01                         	dc.b	$01
0008B451 E106                       	smpsAlterNote       $06
0008B453 01                         	dc.b	$01
0008B454 E102                       	smpsAlterNote       $02
0008B456 01                         	dc.b	$01
0008B457 E1FF                       	smpsAlterNote       $FF
0008B459 01                         	dc.b	$01
0008B45A ECF5                       	smpsPSGAlterVol     $F5
0008B45C 9B06                       	dc.b	nD2, $06
0008B45E EC04                       	smpsPSGAlterVol     $04
0008B460 E701                       	dc.b	smpsNoAttack, $01
0008B462 EC07                       	smpsPSGAlterVol     $07
0008B464 8003                       	dc.b	nRst, $03
0008B466 ECF5                       	smpsPSGAlterVol     $F5
0008B468 9B07                       	dc.b	nD2, $07
0008B46A E1FE                       	smpsAlterNote       $FE
0008B46C 9706                       	dc.b	nBb1, $06
0008B46E EC04                       	smpsPSGAlterVol     $04
0008B470 E701                       	dc.b	smpsNoAttack, $01
0008B472 ECFC                       	smpsPSGAlterVol     $FC
0008B474 9703                       	dc.b	nBb1, $03
0008B476 EC04                       	smpsPSGAlterVol     $04
0008B478 E701                       	dc.b	smpsNoAttack, $01
0008B47A ECFC                       	smpsPSGAlterVol     $FC
0008B47C 9702                       	dc.b	nBb1, $02
0008B47E EC04                       	smpsPSGAlterVol     $04
0008B480 E701                       	dc.b	smpsNoAttack, $01
0008B482 ECFC                       	smpsPSGAlterVol     $FC
0008B484 9606                       	dc.b	nA1, $06
0008B486 EC04                       	smpsPSGAlterVol     $04
0008B488 E701                       	dc.b	smpsNoAttack, $01
0008B48A EC07                       	smpsPSGAlterVol     $07
0008B48C 8006                       	dc.b	nRst, $06
0008B48E E101                       	smpsAlterNote       $01
0008B490 01                         	dc.b	$01
0008B491 E107                       	smpsAlterNote       $07
0008B493 01                         	dc.b	$01
0008B494 E101                       	smpsAlterNote       $01
0008B496 01                         	dc.b	$01
0008B497 E1F8                       	smpsAlterNote       $F8
0008B499 01                         	dc.b	$01
0008B49A E1F7                       	smpsAlterNote       $F7
0008B49C 01                         	dc.b	$01
0008B49D E1FC                       	smpsAlterNote       $FC
0008B49F 01                         	dc.b	$01
0008B4A0 E106                       	smpsAlterNote       $06
0008B4A2 01                         	dc.b	$01
0008B4A3 E107                       	smpsAlterNote       $07
0008B4A5 01                         	dc.b	$01
0008B4A6 E101                       	smpsAlterNote       $01
0008B4A8 01                         	dc.b	$01
0008B4A9 E1F8                       	smpsAlterNote       $F8
0008B4AB 0101                       	dc.b	$01, $01
0008B4AD E1FC                       	smpsAlterNote       $FC
0008B4AF ECF5                       	smpsPSGAlterVol     $F5
0008B4B1 8F06                       	dc.b	nD1, $06
0008B4B3 EC04                       	smpsPSGAlterVol     $04
0008B4B5 E701                       	dc.b	smpsNoAttack, $01
0008B4B7 EC07                       	smpsPSGAlterVol     $07
0008B4B9 8003                       	dc.b	nRst, $03
0008B4BB ECF5                       	smpsPSGAlterVol     $F5
0008B4BD 8F06                       	dc.b	nD1, $06
0008B4BF EC04                       	smpsPSGAlterVol     $04
0008B4C1 E701                       	dc.b	smpsNoAttack, $01
0008B4C3 EC07                       	smpsPSGAlterVol     $07
0008B4C5 8006                       	dc.b	nRst, $06
0008B4C7 E1FF                       	smpsAlterNote       $FF
0008B4C9 01                         	dc.b	$01
0008B4CA E102                       	smpsAlterNote       $02
0008B4CC 01                         	dc.b	$01
0008B4CD E101                       	smpsAlterNote       $01
0008B4CF 01                         	dc.b	$01
0008B4D0 E1FC                       	smpsAlterNote       $FC
0008B4D2 01                         	dc.b	$01
0008B4D3 ECF5                       	smpsPSGAlterVol     $F5
0008B4D5 9007                       	dc.b	nEb1, $07
0008B4D7 EC0B                       	smpsPSGAlterVol     $0B
0008B4D9 8004                       	dc.b	nRst, $04
0008B4DB ECF5                       	smpsPSGAlterVol     $F5
0008B4DD 9006                       	dc.b	nEb1, $06
0008B4DF EC0B                       	smpsPSGAlterVol     $0B
0008B4E1 8007                       	dc.b	nRst, $07
0008B4E3 E103                       	smpsAlterNote       $03
0008B4E5 0101                       	dc.b	$01, $01
0008B4E7 E1FC                       	smpsAlterNote       $FC
0008B4E9 01                         	dc.b	$01
0008B4EA E1F9                       	smpsAlterNote       $F9
0008B4EC 01                         	dc.b	$01
0008B4ED E1FC                       	smpsAlterNote       $FC
0008B4EF ECF5                       	smpsPSGAlterVol     $F5
0008B4F1 8F06                       	dc.b	nD1, $06
0008B4F3 EC04                       	smpsPSGAlterVol     $04
0008B4F5 E701                       	dc.b	smpsNoAttack, $01
0008B4F7 EC07                       	smpsPSGAlterVol     $07
0008B4F9 8003                       	dc.b	nRst, $03
0008B4FB ECF5                       	smpsPSGAlterVol     $F5
0008B4FD 8F06                       	dc.b	nD1, $06
0008B4FF EC04                       	smpsPSGAlterVol     $04
0008B501 E701                       	dc.b	smpsNoAttack, $01
0008B503 EC07                       	smpsPSGAlterVol     $07
0008B505 8006                       	dc.b	nRst, $06
0008B507 E1FF                       	smpsAlterNote       $FF
0008B509 01                         	dc.b	$01
0008B50A E103                       	smpsAlterNote       $03
0008B50C 01                         	dc.b	$01
0008B50D E1FF                       	smpsAlterNote       $FF
0008B50F 01                         	dc.b	$01
0008B510 E1F9                       	smpsAlterNote       $F9
0008B512 01                         	dc.b	$01
0008B513 E1FC                       	smpsAlterNote       $FC
0008B515 ECF5                       	smpsPSGAlterVol     $F5
0008B517 8F06                       	dc.b	nD1, $06
0008B519 EC04                       	smpsPSGAlterVol     $04
0008B51B E701                       	dc.b	smpsNoAttack, $01
0008B51D EC07                       	smpsPSGAlterVol     $07
0008B51F 8003                       	dc.b	nRst, $03
0008B521 ECF5                       	smpsPSGAlterVol     $F5
0008B523 8F07                       	dc.b	nD1, $07
0008B525 EC0B                       	smpsPSGAlterVol     $0B
0008B527 8006                       	dc.b	nRst, $06
0008B529 E1FF                       	smpsAlterNote       $FF
0008B52B 01                         	dc.b	$01
0008B52C E102                       	smpsAlterNote       $02
0008B52E 0101                       	dc.b	$01, $01
0008B530 E1FC                       	smpsAlterNote       $FC
0008B532 01                         	dc.b	$01
0008B533 ECF5                       	smpsPSGAlterVol     $F5
0008B535 8F07                       	dc.b	nD1, $07
0008B537 EC0B                       	smpsPSGAlterVol     $0B
0008B539 8004                       	dc.b	nRst, $04
0008B53B ECF5                       	smpsPSGAlterVol     $F5
0008B53D 8F06                       	dc.b	nD1, $06
0008B53F EC04                       	smpsPSGAlterVol     $04
0008B541 E701                       	dc.b	smpsNoAttack, $01
0008B543 EC07                       	smpsPSGAlterVol     $07
0008B545 8006                       	dc.b	nRst, $06
0008B547 E101                       	smpsAlterNote       $01
0008B549 01                         	dc.b	$01
0008B54A E102                       	smpsAlterNote       $02
0008B54C 01                         	dc.b	$01
0008B54D E1FF                       	smpsAlterNote       $FF
0008B54F 01                         	dc.b	$01
0008B550 E1F9                       	smpsAlterNote       $F9
0008B552 01                         	dc.b	$01
0008B553 E1FC                       	smpsAlterNote       $FC
0008B555 ECF5                       	smpsPSGAlterVol     $F5
0008B557 9006                       	dc.b	nEb1, $06
0008B559 EC04                       	smpsPSGAlterVol     $04
0008B55B E701                       	dc.b	smpsNoAttack, $01
0008B55D EC07                       	smpsPSGAlterVol     $07
0008B55F 8003                       	dc.b	nRst, $03
0008B561 ECF5                       	smpsPSGAlterVol     $F5
0008B563 9006                       	dc.b	nEb1, $06
0008B565 EC04                       	smpsPSGAlterVol     $04
0008B567 E701                       	dc.b	smpsNoAttack, $01
0008B569 EC07                       	smpsPSGAlterVol     $07
0008B56B 8006                       	dc.b	nRst, $06
0008B56D E100                       	smpsAlterNote       $00
0008B56F 01                         	dc.b	$01
0008B570 E102                       	smpsAlterNote       $02
0008B572 01                         	dc.b	$01
0008B573 E100                       	smpsAlterNote       $00
0008B575 01                         	dc.b	$01
0008B576 E1FF                       	smpsAlterNote       $FF
0008B578 01                         	dc.b	$01
0008B579 ECF5                       	smpsPSGAlterVol     $F5
0008B57B 9B06                       	dc.b	nD2, $06
0008B57D EC04                       	smpsPSGAlterVol     $04
0008B57F E701                       	dc.b	smpsNoAttack, $01
0008B581 EC07                       	smpsPSGAlterVol     $07
0008B583 8003                       	dc.b	nRst, $03
0008B585 ECF5                       	smpsPSGAlterVol     $F5
0008B587 9B07                       	dc.b	nD2, $07
0008B589 EC0B                       	smpsPSGAlterVol     $0B
0008B58B 8007                       	dc.b	nRst, $07
0008B58D E105                       	smpsAlterNote       $05
0008B58F 0101                       	dc.b	$01, $01
0008B591 E1FF                       	smpsAlterNote       $FF
0008B593 01                         	dc.b	$01
0008B594 E1FC                       	smpsAlterNote       $FC
0008B596 01                         	dc.b	$01
0008B597 E1FF                       	smpsAlterNote       $FF
0008B599 ECF5                       	smpsPSGAlterVol     $F5
0008B59B 9B06                       	dc.b	nD2, $06
0008B59D EC0B                       	smpsPSGAlterVol     $0B
0008B59F 8004                       	dc.b	nRst, $04
0008B5A1 ECF5                       	smpsPSGAlterVol     $F5
0008B5A3 9B06                       	dc.b	nD2, $06
0008B5A5 EC04                       	smpsPSGAlterVol     $04
0008B5A7 E701                       	dc.b	smpsNoAttack, $01
0008B5A9 EC07                       	smpsPSGAlterVol     $07
0008B5AB 8006                       	dc.b	nRst, $06
0008B5AD E102                       	smpsAlterNote       $02
0008B5AF 01                         	dc.b	$01
0008B5B0 E106                       	smpsAlterNote       $06
0008B5B2 01                         	dc.b	$01
0008B5B3 E102                       	smpsAlterNote       $02
0008B5B5 01                         	dc.b	$01
0008B5B6 E1FC                       	smpsAlterNote       $FC
0008B5B8 01                         	dc.b	$01
0008B5B9 E1FF                       	smpsAlterNote       $FF
0008B5BB ECF5                       	smpsPSGAlterVol     $F5
0008B5BD 9B06                       	dc.b	nD2, $06
0008B5BF EC04                       	smpsPSGAlterVol     $04
0008B5C1 E701                       	dc.b	smpsNoAttack, $01
0008B5C3 EC07                       	smpsPSGAlterVol     $07
0008B5C5 8003                       	dc.b	nRst, $03
0008B5C7 ECF5                       	smpsPSGAlterVol     $F5
0008B5C9 9B07                       	dc.b	nD2, $07
0008B5CB EC0B                       	smpsPSGAlterVol     $0B
0008B5CD 8006                       	dc.b	nRst, $06
0008B5CF E102                       	smpsAlterNote       $02
0008B5D1 01                         	dc.b	$01
0008B5D2 E105                       	smpsAlterNote       $05
0008B5D4 0101                       	dc.b	$01, $01
0008B5D6 E1FF                       	smpsAlterNote       $FF
0008B5D8 01                         	dc.b	$01
0008B5D9 ECF5                       	smpsPSGAlterVol     $F5
0008B5DB 9B07                       	dc.b	nD2, $07
0008B5DD EC0B                       	smpsPSGAlterVol     $0B
0008B5DF 8004                       	dc.b	nRst, $04
0008B5E1 ECF5                       	smpsPSGAlterVol     $F5
0008B5E3 9B06                       	dc.b	nD2, $06
0008B5E5 EC0B                       	smpsPSGAlterVol     $0B
0008B5E7 8007                       	dc.b	nRst, $07
0008B5E9 E105                       	smpsAlterNote       $05
0008B5EB 0101                       	dc.b	$01, $01
0008B5ED E102                       	smpsAlterNote       $02
0008B5EF 01                         	dc.b	$01
0008B5F0 E1FC                       	smpsAlterNote       $FC
0008B5F2 01                         	dc.b	$01
0008B5F3 E1FF                       	smpsAlterNote       $FF
0008B5F5 ECF5                       	smpsPSGAlterVol     $F5
0008B5F7 9B06                       	dc.b	nD2, $06
0008B5F9 EC04                       	smpsPSGAlterVol     $04
0008B5FB E701                       	dc.b	smpsNoAttack, $01
0008B5FD EC07                       	smpsPSGAlterVol     $07
0008B5FF 8003                       	dc.b	nRst, $03
0008B601 ECF5                       	smpsPSGAlterVol     $F5
0008B603 9B06                       	dc.b	nD2, $06
0008B605 EC04                       	smpsPSGAlterVol     $04
0008B607 E701                       	dc.b	smpsNoAttack, $01
0008B609 EC07                       	smpsPSGAlterVol     $07
0008B60B 8006                       	dc.b	nRst, $06
0008B60D E102                       	smpsAlterNote       $02
0008B60F 01                         	dc.b	$01
0008B610 E106                       	smpsAlterNote       $06
0008B612 01                         	dc.b	$01
0008B613 E102                       	smpsAlterNote       $02
0008B615 01                         	dc.b	$01
0008B616 E1FF                       	smpsAlterNote       $FF
0008B618 01                         	dc.b	$01
0008B619 ECF5                       	smpsPSGAlterVol     $F5
0008B61B 9B06                       	dc.b	nD2, $06
0008B61D EC04                       	smpsPSGAlterVol     $04
0008B61F E701                       	dc.b	smpsNoAttack, $01
0008B621 EC07                       	smpsPSGAlterVol     $07
0008B623 8003                       	dc.b	nRst, $03
0008B625 ECF5                       	smpsPSGAlterVol     $F5
0008B627 9B07                       	dc.b	nD2, $07
0008B629 EC0B                       	smpsPSGAlterVol     $0B
0008B62B 8007                       	dc.b	nRst, $07
0008B62D E105                       	smpsAlterNote       $05
0008B62F 0101                       	dc.b	$01, $01
0008B631 E1FF                       	smpsAlterNote       $FF
0008B633 01                         	dc.b	$01
0008B634 E1FC                       	smpsAlterNote       $FC
0008B636 01                         	dc.b	$01
0008B637 E1FF                       	smpsAlterNote       $FF
0008B639 ECF5                       	smpsPSGAlterVol     $F5
0008B63B 9B06                       	dc.b	nD2, $06
0008B63D EC0B                       	smpsPSGAlterVol     $0B
0008B63F 8004                       	dc.b	nRst, $04
0008B641 ECF5                       	smpsPSGAlterVol     $F5
0008B643 9B06                       	dc.b	nD2, $06
0008B645 EC04                       	smpsPSGAlterVol     $04
0008B647 E701                       	dc.b	smpsNoAttack, $01
0008B649 EC07                       	smpsPSGAlterVol     $07
0008B64B 8006                       	dc.b	nRst, $06
0008B64D E102                       	smpsAlterNote       $02
0008B64F 01                         	dc.b	$01
0008B650 E106                       	smpsAlterNote       $06
0008B652 01                         	dc.b	$01
0008B653 E102                       	smpsAlterNote       $02
0008B655 01                         	dc.b	$01
0008B656 E1FC                       	smpsAlterNote       $FC
0008B658 01                         	dc.b	$01
0008B659 E1FF                       	smpsAlterNote       $FF
0008B65B ECF5                       	smpsPSGAlterVol     $F5
0008B65D 9B06                       	dc.b	nD2, $06
0008B65F EC04                       	smpsPSGAlterVol     $04
0008B661 E701                       	dc.b	smpsNoAttack, $01
0008B663 EC07                       	smpsPSGAlterVol     $07
0008B665 8003                       	dc.b	nRst, $03
0008B667 ECF5                       	smpsPSGAlterVol     $F5
0008B669 9B06                       	dc.b	nD2, $06
0008B66B EC04                       	smpsPSGAlterVol     $04
0008B66D E701                       	dc.b	smpsNoAttack, $01
0008B66F EC07                       	smpsPSGAlterVol     $07
0008B671 8006                       	dc.b	nRst, $06
0008B673 E102                       	smpsAlterNote       $02
0008B675 01                         	dc.b	$01
0008B676 E106                       	smpsAlterNote       $06
0008B678 01                         	dc.b	$01
0008B679 E105                       	smpsAlterNote       $05
0008B67B 01                         	dc.b	$01
0008B67C E1FF                       	smpsAlterNote       $FF
0008B67E 01                         	dc.b	$01
0008B67F ECF5                       	smpsPSGAlterVol     $F5
0008B681 9B07                       	dc.b	nD2, $07
0008B683 EC0B                       	smpsPSGAlterVol     $0B
0008B685 8004                       	dc.b	nRst, $04
0008B687 ECF5                       	smpsPSGAlterVol     $F5
0008B689 9B06                       	dc.b	nD2, $06
0008B68B EC0B                       	smpsPSGAlterVol     $0B
0008B68D 8007                       	dc.b	nRst, $07
0008B68F E105                       	smpsAlterNote       $05
0008B691 0101                       	dc.b	$01, $01
0008B693 E101                       	smpsAlterNote       $01
0008B695 01                         	dc.b	$01
0008B696 E1FB                       	smpsAlterNote       $FB
0008B698 01                         	dc.b	$01
0008B699 E1FE                       	smpsAlterNote       $FE
0008B69B ECF5                       	smpsPSGAlterVol     $F5
0008B69D 9A06                       	dc.b	nCs2, $06
0008B69F EC04                       	smpsPSGAlterVol     $04
0008B6A1 E701                       	dc.b	smpsNoAttack, $01
0008B6A3 EC07                       	smpsPSGAlterVol     $07
0008B6A5 8003                       	dc.b	nRst, $03
0008B6A7 ECF5                       	smpsPSGAlterVol     $F5
0008B6A9 9A06                       	dc.b	nCs2, $06
0008B6AB EC04                       	smpsPSGAlterVol     $04
0008B6AD E701                       	dc.b	smpsNoAttack, $01
0008B6AF EC07                       	smpsPSGAlterVol     $07
0008B6B1 8003                       	dc.b	nRst, $03
0008B6B3 E1FC                       	smpsAlterNote       $FC
0008B6B5 ECF5                       	smpsPSGAlterVol     $F5
0008B6B7 8F07                       	dc.b	nD1, $07
0008B6B9 EC0B                       	smpsPSGAlterVol     $0B
0008B6BB 8006                       	dc.b	nRst, $06
0008B6BD E1FF                       	smpsAlterNote       $FF
0008B6BF 01                         	dc.b	$01
0008B6C0 E103                       	smpsAlterNote       $03
0008B6C2 01                         	dc.b	$01
0008B6C3 E102                       	smpsAlterNote       $02
0008B6C5 01                         	dc.b	$01
0008B6C6 E1FC                       	smpsAlterNote       $FC
0008B6C8 01                         	dc.b	$01
0008B6C9 E1F8                       	smpsAlterNote       $F8
0008B6CB 01                         	dc.b	$01
0008B6CC E1FC                       	smpsAlterNote       $FC
0008B6CE 01                         	dc.b	$01
0008B6CF E1FF                       	smpsAlterNote       $FF
0008B6D1 01                         	dc.b	$01
0008B6D2 E103                       	smpsAlterNote       $03
0008B6D4 01                         	dc.b	$01
0008B6D5 E1FC                       	smpsAlterNote       $FC
0008B6D7 ECF5                       	smpsPSGAlterVol     $F5
0008B6D9 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008B6DD EC04                       	smpsPSGAlterVol     $04
0008B6DF E701                       	dc.b	smpsNoAttack, $01
0008B6E1 EC07                       	smpsPSGAlterVol     $07
0008B6E3 8009                       	dc.b	nRst, $09
0008B6E5 E1FF                       	smpsAlterNote       $FF
0008B6E7 01                         	dc.b	$01
0008B6E8 E103                       	smpsAlterNote       $03
0008B6EA 01                         	dc.b	$01
0008B6EB E102                       	smpsAlterNote       $02
0008B6ED 01                         	dc.b	$01
0008B6EE E1FC                       	smpsAlterNote       $FC
0008B6F0 01                         	dc.b	$01
0008B6F1 E1F8                       	smpsAlterNote       $F8
0008B6F3 01                         	dc.b	$01
0008B6F4 E1FC                       	smpsAlterNote       $FC
0008B6F6 01                         	dc.b	$01
0008B6F7 E1FF                       	smpsAlterNote       $FF
0008B6F9 01                         	dc.b	$01
0008B6FA E103                       	smpsAlterNote       $03
0008B6FC 01                         	dc.b	$01
0008B6FD E1FF                       	smpsAlterNote       $FF
0008B6FF 01                         	dc.b	$01
0008B700 E1F9                       	smpsAlterNote       $F9
0008B702 01                         	dc.b	$01
0008B703 E1F8                       	smpsAlterNote       $F8
0008B705 01                         	dc.b	$01
0008B706 E1FC                       	smpsAlterNote       $FC
0008B708 01                         	dc.b	$01
0008B709 E102                       	smpsAlterNote       $02
0008B70B 0101                       	dc.b	$01, $01
0008B70D E1FF                       	smpsAlterNote       $FF
0008B70F 01                         	dc.b	$01
0008B710 E1FC                       	smpsAlterNote       $FC
0008B712 ECF5                       	smpsPSGAlterVol     $F5
0008B714 8F02                       	dc.b	nD1, $02
0008B716 EC04                       	smpsPSGAlterVol     $04
0008B718 E701                       	dc.b	smpsNoAttack, $01
0008B71A ECFC                       	smpsPSGAlterVol     $FC
0008B71C E1FB                       	smpsAlterNote       $FB
0008B71E 8D06                       	dc.b	nC1, $06
0008B720 EC04                       	smpsPSGAlterVol     $04
0008B722 E701                       	dc.b	smpsNoAttack, $01
0008B724 EC07                       	smpsPSGAlterVol     $07
0008B726 8006                       	dc.b	nRst, $06
0008B728 E1FE                       	smpsAlterNote       $FE
0008B72A 01                         	dc.b	$01
0008B72B E102                       	smpsAlterNote       $02
0008B72D 01                         	dc.b	$01
0008B72E E1FE                       	smpsAlterNote       $FE
0008B730 01                         	dc.b	$01
0008B731 E1FB                       	smpsAlterNote       $FB
0008B733 01                         	dc.b	$01
0008B734 E1F7                       	smpsAlterNote       $F7
0008B736 01                         	dc.b	$01
0008B737 E1FB                       	smpsAlterNote       $FB
0008B739 01                         	dc.b	$01
0008B73A E101                       	smpsAlterNote       $01
0008B73C 01                         	dc.b	$01
0008B73D E102                       	smpsAlterNote       $02
0008B73F 01                         	dc.b	$01
0008B740 E1FB                       	smpsAlterNote       $FB
0008B742 ECF5                       	smpsPSGAlterVol     $F5
0008B744 8D02                       	dc.b	nC1, $02
0008B746 EC04                       	smpsPSGAlterVol     $04
0008B748 E701                       	dc.b	smpsNoAttack, $01
0008B74A E1FC                       	smpsAlterNote       $FC
0008B74C ECFC                       	smpsPSGAlterVol     $FC
0008B74E 8F0D                       	dc.b	nD1, $0D
0008B750 E1FF                       	smpsAlterNote       $FF
0008B752 E701                       	dc.b	smpsNoAttack, $01
0008B754 E103                       	smpsAlterNote       $03
0008B756 E701                       	dc.b	smpsNoAttack, $01
0008B758 E1FF                       	smpsAlterNote       $FF
0008B75A E701                       	dc.b	smpsNoAttack, $01
0008B75C E1FC                       	smpsAlterNote       $FC
0008B75E E701                       	dc.b	smpsNoAttack, $01
0008B760 E1F8                       	smpsAlterNote       $F8
0008B762 E701                       	dc.b	smpsNoAttack, $01
0008B764 E1FC                       	smpsAlterNote       $FC
0008B766 E701                       	dc.b	smpsNoAttack, $01
0008B768 E102                       	smpsAlterNote       $02
0008B76A E701                       	dc.b	smpsNoAttack, $01
0008B76C E103                       	smpsAlterNote       $03
0008B76E E701                       	dc.b	smpsNoAttack, $01
0008B770 E1FF                       	smpsAlterNote       $FF
0008B772 E701                       	dc.b	smpsNoAttack, $01
0008B774 E1F9                       	smpsAlterNote       $F9
0008B776 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B77A E1FC                       	smpsAlterNote       $FC
0008B77C E701                       	dc.b	smpsNoAttack, $01
0008B77E E102                       	smpsAlterNote       $02
0008B780 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B784 E1FC                       	smpsAlterNote       $FC
0008B786 E701                       	dc.b	smpsNoAttack, $01
0008B788 E1F9                       	smpsAlterNote       $F9
0008B78A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B78E E1FF                       	smpsAlterNote       $FF
0008B790 EC04                       	smpsPSGAlterVol     $04
0008B792 E701                       	dc.b	smpsNoAttack, $01
0008B794 EC07                       	smpsPSGAlterVol     $07
0008B796 E103                       	smpsAlterNote       $03
0008B798 8001                       	dc.b	nRst, $01
0008B79A E102                       	smpsAlterNote       $02
0008B79C 01                         	dc.b	$01
0008B79D E1FB                       	smpsAlterNote       $FB
0008B79F 01                         	dc.b	$01
0008B7A0 E1F7                       	smpsAlterNote       $F7
0008B7A2 01                         	dc.b	$01
0008B7A3 E1FB                       	smpsAlterNote       $FB
0008B7A5 01                         	dc.b	$01
0008B7A6 E102                       	smpsAlterNote       $02
0008B7A8 01                         	dc.b	$01
0008B7A9 E103                       	smpsAlterNote       $03
0008B7AB 01                         	dc.b	$01
0008B7AC E1FB                       	smpsAlterNote       $FB
0008B7AE ECF5                       	smpsPSGAlterVol     $F5
0008B7B0 8E06                       	dc.b	nCs1, $06
0008B7B2 EC04                       	smpsPSGAlterVol     $04
0008B7B4 E701                       	dc.b	smpsNoAttack, $01
0008B7B6 EC07                       	smpsPSGAlterVol     $07
0008B7B8 8003                       	dc.b	nRst, $03
0008B7BA ECF5                       	smpsPSGAlterVol     $F5
0008B7BC 8E06                       	dc.b	nCs1, $06
0008B7BE EC04                       	smpsPSGAlterVol     $04
0008B7C0 E701                       	dc.b	smpsNoAttack, $01
0008B7C2 EC07                       	smpsPSGAlterVol     $07
0008B7C4 8006                       	dc.b	nRst, $06
0008B7C6 E1FE                       	smpsAlterNote       $FE
0008B7C8 01                         	dc.b	$01
0008B7C9 E102                       	smpsAlterNote       $02
0008B7CB 01                         	dc.b	$01
0008B7CC E1FE                       	smpsAlterNote       $FE
0008B7CE 01                         	dc.b	$01
0008B7CF E1F9                       	smpsAlterNote       $F9
0008B7D1 01                         	dc.b	$01
0008B7D2 E1FC                       	smpsAlterNote       $FC
0008B7D4 ECF5                       	smpsPSGAlterVol     $F5
0008B7D6 8F06                       	dc.b	nD1, $06
0008B7D8 EC04                       	smpsPSGAlterVol     $04
0008B7DA E701                       	dc.b	smpsNoAttack, $01
0008B7DC EC07                       	smpsPSGAlterVol     $07
0008B7DE 8003                       	dc.b	nRst, $03
0008B7E0 ECF5                       	smpsPSGAlterVol     $F5
0008B7E2 8F07                       	dc.b	nD1, $07
0008B7E4 EC0B                       	smpsPSGAlterVol     $0B
0008B7E6 8006                       	dc.b	nRst, $06
0008B7E8 E1FF                       	smpsAlterNote       $FF
0008B7EA 01                         	dc.b	$01
0008B7EB E102                       	smpsAlterNote       $02
0008B7ED 0101                       	dc.b	$01, $01
0008B7EF E1FB                       	smpsAlterNote       $FB
0008B7F1 01                         	dc.b	$01
0008B7F2 ECF5                       	smpsPSGAlterVol     $F5
0008B7F4 8E07                       	dc.b	nCs1, $07
0008B7F6 EC0B                       	smpsPSGAlterVol     $0B
0008B7F8 8004                       	dc.b	nRst, $04
0008B7FA ECF5                       	smpsPSGAlterVol     $F5
0008B7FC 8E06                       	dc.b	nCs1, $06
0008B7FE EC04                       	smpsPSGAlterVol     $04
0008B800 E701                       	dc.b	smpsNoAttack, $01
0008B802 EC07                       	smpsPSGAlterVol     $07
0008B804 8006                       	dc.b	nRst, $06
0008B806 E101                       	smpsAlterNote       $01
0008B808 01                         	dc.b	$01
0008B809 E102                       	smpsAlterNote       $02
0008B80B 01                         	dc.b	$01
0008B80C E1FE                       	smpsAlterNote       $FE
0008B80E 01                         	dc.b	$01
0008B80F E1F8                       	smpsAlterNote       $F8
0008B811 01                         	dc.b	$01
0008B812 E1FB                       	smpsAlterNote       $FB
0008B814 ECF5                       	smpsPSGAlterVol     $F5
0008B816 8E06                       	dc.b	nCs1, $06
0008B818 EC04                       	smpsPSGAlterVol     $04
0008B81A E701                       	dc.b	smpsNoAttack, $01
0008B81C EC07                       	smpsPSGAlterVol     $07
0008B81E 8003                       	dc.b	nRst, $03
0008B820 ECF5                       	smpsPSGAlterVol     $F5
0008B822 8E06                       	dc.b	nCs1, $06
0008B824 EC04                       	smpsPSGAlterVol     $04
0008B826 E701                       	dc.b	smpsNoAttack, $01
0008B828 EC07                       	smpsPSGAlterVol     $07
0008B82A 8004                       	dc.b	nRst, $04
0008B82C E1FC                       	smpsAlterNote       $FC
0008B82E ECF5                       	smpsPSGAlterVol     $F5
0008B830 8F06                       	dc.b	nD1, $06
0008B832 EC0B                       	smpsPSGAlterVol     $0B
0008B834 8006                       	dc.b	nRst, $06
0008B836 E1FF                       	smpsAlterNote       $FF
0008B838 01                         	dc.b	$01
0008B839 E102                       	smpsAlterNote       $02
0008B83B 0101                       	dc.b	$01, $01
0008B83D E1FC                       	smpsAlterNote       $FC
0008B83F 01                         	dc.b	$01
0008B840 E1F8                       	smpsAlterNote       $F8
0008B842 01                         	dc.b	$01
0008B843 E1F9                       	smpsAlterNote       $F9
0008B845 01                         	dc.b	$01
0008B846 E1FF                       	smpsAlterNote       $FF
0008B848 01                         	dc.b	$01
0008B849 E103                       	smpsAlterNote       $03
0008B84B 01                         	dc.b	$01
0008B84C E1FC                       	smpsAlterNote       $FC
0008B84E ECF5                       	smpsPSGAlterVol     $F5
0008B850 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008B854 EC04                       	smpsPSGAlterVol     $04
0008B856 E701                       	dc.b	smpsNoAttack, $01
0008B858 EC07                       	smpsPSGAlterVol     $07
0008B85A 8009                       	dc.b	nRst, $09
0008B85C E1FF                       	smpsAlterNote       $FF
0008B85E 01                         	dc.b	$01
0008B85F E102                       	smpsAlterNote       $02
0008B861 0101                       	dc.b	$01, $01
0008B863 E1FC                       	smpsAlterNote       $FC
0008B865 01                         	dc.b	$01
0008B866 E1F8                       	smpsAlterNote       $F8
0008B868 01                         	dc.b	$01
0008B869 E1F9                       	smpsAlterNote       $F9
0008B86B 01                         	dc.b	$01
0008B86C E1FF                       	smpsAlterNote       $FF
0008B86E 01                         	dc.b	$01
0008B86F E103                       	smpsAlterNote       $03
0008B871 01                         	dc.b	$01
0008B872 E1FF                       	smpsAlterNote       $FF
0008B874 01                         	dc.b	$01
0008B875 E1FC                       	smpsAlterNote       $FC
0008B877 01                         	dc.b	$01
0008B878 E1F8                       	smpsAlterNote       $F8
0008B87A 01                         	dc.b	$01
0008B87B E1FC                       	smpsAlterNote       $FC
0008B87D 01                         	dc.b	$01
0008B87E E102                       	smpsAlterNote       $02
0008B880 01                         	dc.b	$01
0008B881 E103                       	smpsAlterNote       $03
0008B883 01                         	dc.b	$01
0008B884 E1FF                       	smpsAlterNote       $FF
0008B886 01                         	dc.b	$01
0008B887 E1FC                       	smpsAlterNote       $FC
0008B889 ECF5                       	smpsPSGAlterVol     $F5
0008B88B 8F03                       	dc.b	nD1, $03
0008B88D E1FB                       	smpsAlterNote       $FB
0008B88F 8D06                       	dc.b	nC1, $06
0008B891 EC04                       	smpsPSGAlterVol     $04
0008B893 E701                       	dc.b	smpsNoAttack, $01
0008B895 EC07                       	smpsPSGAlterVol     $07
0008B897 8006                       	dc.b	nRst, $06
0008B899 E1FE                       	smpsAlterNote       $FE
0008B89B 01                         	dc.b	$01
0008B89C E102                       	smpsAlterNote       $02
0008B89E 01                         	dc.b	$01
0008B89F E101                       	smpsAlterNote       $01
0008B8A1 01                         	dc.b	$01
0008B8A2 E1FB                       	smpsAlterNote       $FB
0008B8A4 01                         	dc.b	$01
0008B8A5 E1F7                       	smpsAlterNote       $F7
0008B8A7 01                         	dc.b	$01
0008B8A8 E1FB                       	smpsAlterNote       $FB
0008B8AA 01                         	dc.b	$01
0008B8AB E1FE                       	smpsAlterNote       $FE
0008B8AD 01                         	dc.b	$01
0008B8AE E102                       	smpsAlterNote       $02
0008B8B0 01                         	dc.b	$01
0008B8B1 E1FB                       	smpsAlterNote       $FB
0008B8B3 ECF5                       	smpsPSGAlterVol     $F5
0008B8B5 8D03                       	dc.b	nC1, $03
0008B8B7 E1FC                       	smpsAlterNote       $FC
0008B8B9 8F0D                       	dc.b	nD1, $0D
0008B8BB E1FF                       	smpsAlterNote       $FF
0008B8BD E701                       	dc.b	smpsNoAttack, $01
0008B8BF E103                       	smpsAlterNote       $03
0008B8C1 E701                       	dc.b	smpsNoAttack, $01
0008B8C3 E1FF                       	smpsAlterNote       $FF
0008B8C5 E701                       	dc.b	smpsNoAttack, $01
0008B8C7 E1FC                       	smpsAlterNote       $FC
0008B8C9 E701                       	dc.b	smpsNoAttack, $01
0008B8CB E1F8                       	smpsAlterNote       $F8
0008B8CD E701                       	dc.b	smpsNoAttack, $01
0008B8CF E1FC                       	smpsAlterNote       $FC
0008B8D1 E701                       	dc.b	smpsNoAttack, $01
0008B8D3 E102                       	smpsAlterNote       $02
0008B8D5 E701                       	dc.b	smpsNoAttack, $01
0008B8D7 E103                       	smpsAlterNote       $03
0008B8D9 E701                       	dc.b	smpsNoAttack, $01
0008B8DB E1FF                       	smpsAlterNote       $FF
0008B8DD E701                       	dc.b	smpsNoAttack, $01
0008B8DF E1F9                       	smpsAlterNote       $F9
0008B8E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8E5 E1FC                       	smpsAlterNote       $FC
0008B8E7 E701                       	dc.b	smpsNoAttack, $01
0008B8E9 E102                       	smpsAlterNote       $02
0008B8EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8EF E1FF                       	smpsAlterNote       $FF
0008B8F1 E701                       	dc.b	smpsNoAttack, $01
0008B8F3 E1F9                       	smpsAlterNote       $F9
0008B8F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8F9 E1FF                       	smpsAlterNote       $FF
0008B8FB EC04                       	smpsPSGAlterVol     $04
0008B8FD E701                       	dc.b	smpsNoAttack, $01
0008B8FF EC07                       	smpsPSGAlterVol     $07
0008B901 E103                       	smpsAlterNote       $03
0008B903 8001                       	dc.b	nRst, $01
0008B905 E102                       	smpsAlterNote       $02
0008B907 01                         	dc.b	$01
0008B908 E1FB                       	smpsAlterNote       $FB
0008B90A 01                         	dc.b	$01
0008B90B E1F7                       	smpsAlterNote       $F7
0008B90D 01                         	dc.b	$01
0008B90E E1FB                       	smpsAlterNote       $FB
0008B910 01                         	dc.b	$01
0008B911 E1FF                       	smpsAlterNote       $FF
0008B913 01                         	dc.b	$01
0008B914 E103                       	smpsAlterNote       $03
0008B916 01                         	dc.b	$01
0008B917 E1FB                       	smpsAlterNote       $FB
0008B919 ECF5                       	smpsPSGAlterVol     $F5
0008B91B 8E06                       	dc.b	nCs1, $06
0008B91D EC04                       	smpsPSGAlterVol     $04
0008B91F E701                       	dc.b	smpsNoAttack, $01
0008B921 EC07                       	smpsPSGAlterVol     $07
0008B923 8003                       	dc.b	nRst, $03
0008B925 ECF5                       	smpsPSGAlterVol     $F5
0008B927 8E06                       	dc.b	nCs1, $06
0008B929 EC04                       	smpsPSGAlterVol     $04
0008B92B E701                       	dc.b	smpsNoAttack, $01
0008B92D EC07                       	smpsPSGAlterVol     $07
0008B92F 8006                       	dc.b	nRst, $06
0008B931 E1FE                       	smpsAlterNote       $FE
0008B933 01                         	dc.b	$01
0008B934 E102                       	smpsAlterNote       $02
0008B936 01                         	dc.b	$01
0008B937 E1FE                       	smpsAlterNote       $FE
0008B939 01                         	dc.b	$01
0008B93A E1FC                       	smpsAlterNote       $FC
0008B93C 01                         	dc.b	$01
0008B93D ECF5                       	smpsPSGAlterVol     $F5
0008B93F 8F06                       	dc.b	nD1, $06
0008B941 EC04                       	smpsPSGAlterVol     $04
0008B943 E701                       	dc.b	smpsNoAttack, $01
0008B945 EC07                       	smpsPSGAlterVol     $07
0008B947 8003                       	dc.b	nRst, $03
0008B949 ECF5                       	smpsPSGAlterVol     $F5
0008B94B 8F07                       	dc.b	nD1, $07
0008B94D EC0B                       	smpsPSGAlterVol     $0B
0008B94F 8007                       	dc.b	nRst, $07
0008B951 E102                       	smpsAlterNote       $02
0008B953 0101                       	dc.b	$01, $01
0008B955 E1FB                       	smpsAlterNote       $FB
0008B957 01                         	dc.b	$01
0008B958 E1F8                       	smpsAlterNote       $F8
0008B95A 01                         	dc.b	$01
0008B95B E1FB                       	smpsAlterNote       $FB
0008B95D ECF5                       	smpsPSGAlterVol     $F5
0008B95F 8E06                       	dc.b	nCs1, $06
0008B961 EC0B                       	smpsPSGAlterVol     $0B
0008B963 8004                       	dc.b	nRst, $04
0008B965 ECF5                       	smpsPSGAlterVol     $F5
0008B967 8E06                       	dc.b	nCs1, $06
0008B969 EC04                       	smpsPSGAlterVol     $04
0008B96B E701                       	dc.b	smpsNoAttack, $01
0008B96D EC07                       	smpsPSGAlterVol     $07
0008B96F 8006                       	dc.b	nRst, $06
0008B971 E1FE                       	smpsAlterNote       $FE
0008B973 01                         	dc.b	$01
0008B974 E102                       	smpsAlterNote       $02
0008B976 01                         	dc.b	$01
0008B977 E1FE                       	smpsAlterNote       $FE
0008B979 01                         	dc.b	$01
0008B97A E1F9                       	smpsAlterNote       $F9
0008B97C 01                         	dc.b	$01
0008B97D E1FC                       	smpsAlterNote       $FC
0008B97F ECF5                       	smpsPSGAlterVol     $F5
0008B981 8F06                       	dc.b	nD1, $06
0008B983 EC04                       	smpsPSGAlterVol     $04
0008B985 E701                       	dc.b	smpsNoAttack, $01
0008B987 EC07                       	smpsPSGAlterVol     $07
0008B989 8003                       	dc.b	nRst, $03
0008B98B ECF5                       	smpsPSGAlterVol     $F5
0008B98D 8F06                       	dc.b	nD1, $06
0008B98F EC04                       	smpsPSGAlterVol     $04
0008B991 E701                       	dc.b	smpsNoAttack, $01
0008B993 EC07                       	smpsPSGAlterVol     $07
0008B995 8006                       	dc.b	nRst, $06
0008B997 E1FF                       	smpsAlterNote       $FF
0008B999 01                         	dc.b	$01
0008B99A E103                       	smpsAlterNote       $03
0008B99C 01                         	dc.b	$01
0008B99D E102                       	smpsAlterNote       $02
0008B99F 01                         	dc.b	$01
0008B9A0 E1FB                       	smpsAlterNote       $FB
0008B9A2 01                         	dc.b	$01
0008B9A3 ECF5                       	smpsPSGAlterVol     $F5
0008B9A5 8E07                       	dc.b	nCs1, $07
0008B9A7 EC0B                       	smpsPSGAlterVol     $0B
0008B9A9 8004                       	dc.b	nRst, $04
0008B9AB ECF5                       	smpsPSGAlterVol     $F5
0008B9AD 8E06                       	dc.b	nCs1, $06
0008B9AF EC0B                       	smpsPSGAlterVol     $0B
0008B9B1 8007                       	dc.b	nRst, $07
0008B9B3 E101                       	smpsAlterNote       $01
0008B9B5 0101                       	dc.b	$01, $01
0008B9B7 E1FE                       	smpsAlterNote       $FE
0008B9B9 01                         	dc.b	$01
0008B9BA E1F9                       	smpsAlterNote       $F9
0008B9BC 01                         	dc.b	$01
0008B9BD E1FC                       	smpsAlterNote       $FC
0008B9BF ECF5                       	smpsPSGAlterVol     $F5
0008B9C1 8F06                       	dc.b	nD1, $06
0008B9C3 EC04                       	smpsPSGAlterVol     $04
0008B9C5 E701                       	dc.b	smpsNoAttack, $01
0008B9C7 EC07                       	smpsPSGAlterVol     $07
0008B9C9 8003                       	dc.b	nRst, $03
0008B9CB ECF5                       	smpsPSGAlterVol     $F5
0008B9CD 8F06                       	dc.b	nD1, $06
0008B9CF EC04                       	smpsPSGAlterVol     $04
0008B9D1 E701                       	dc.b	smpsNoAttack, $01
0008B9D3 EC07                       	smpsPSGAlterVol     $07
0008B9D5 8006                       	dc.b	nRst, $06
0008B9D7 E1FF                       	smpsAlterNote       $FF
0008B9D9 01                         	dc.b	$01
0008B9DA E103                       	smpsAlterNote       $03
0008B9DC 01                         	dc.b	$01
0008B9DD E1FF                       	smpsAlterNote       $FF
0008B9DF 01                         	dc.b	$01
0008B9E0 E1FB                       	smpsAlterNote       $FB
0008B9E2 01                         	dc.b	$01
0008B9E3 ECF5                       	smpsPSGAlterVol     $F5
0008B9E5 8E06                       	dc.b	nCs1, $06
0008B9E7 EC04                       	smpsPSGAlterVol     $04
0008B9E9 E701                       	dc.b	smpsNoAttack, $01
0008B9EB EC07                       	smpsPSGAlterVol     $07
0008B9ED 8003                       	dc.b	nRst, $03
0008B9EF ECF5                       	smpsPSGAlterVol     $F5
0008B9F1 8E07                       	dc.b	nCs1, $07
0008B9F3 E1FF                       	smpsAlterNote       $FF
0008B9F5 9B06                       	dc.b	nD2, $06
0008B9F7 EC04                       	smpsPSGAlterVol     $04
0008B9F9 E701                       	dc.b	smpsNoAttack, $01
0008B9FB ECFC                       	smpsPSGAlterVol     $FC
0008B9FD 9B03                       	dc.b	nD2, $03
0008B9FF EC04                       	smpsPSGAlterVol     $04
0008BA01 E701                       	dc.b	smpsNoAttack, $01
0008BA03 ECFC                       	smpsPSGAlterVol     $FC
0008BA05 9B02                       	dc.b	nD2, $02
0008BA07 EC04                       	smpsPSGAlterVol     $04
0008BA09 E701                       	dc.b	smpsNoAttack, $01
0008BA0B ECFC                       	smpsPSGAlterVol     $FC
0008BA0D E1FE                       	smpsAlterNote       $FE
0008BA0F 9A03                       	dc.b	nCs2, $03
0008BA11 EC0B                       	smpsPSGAlterVol     $0B
0008BA13 800A                       	dc.b	nRst, $0A
0008BA15 E102                       	smpsAlterNote       $02
0008BA17 01                         	dc.b	$01
0008BA18 E10A                       	smpsAlterNote       $0A
0008BA1A 01                         	dc.b	$01
0008BA1B E102                       	smpsAlterNote       $02
0008BA1D 01                         	dc.b	$01
0008BA1E E1F7                       	smpsAlterNote       $F7
0008BA20 01                         	dc.b	$01
0008BA21 E10A                       	smpsAlterNote       $0A
0008BA23 01                         	dc.b	$01
0008BA24 E1FC                       	smpsAlterNote       $FC
0008BA26 01                         	dc.b	$01
0008BA27 E108                       	smpsAlterNote       $08
0008BA29 0101                       	dc.b	$01, $01
0008BA2B E102                       	smpsAlterNote       $02
0008BA2D 01                         	dc.b	$01
0008BA2E E1F7                       	smpsAlterNote       $F7
0008BA30 0101                       	dc.b	$01, $01
0008BA32 E1FC                       	smpsAlterNote       $FC
0008BA34 ECF5                       	smpsPSGAlterVol     $F5
0008BA36 8F06                       	dc.b	nD1, $06
0008BA38 EC04                       	smpsPSGAlterVol     $04
0008BA3A E701                       	dc.b	smpsNoAttack, $01
0008BA3C EC07                       	smpsPSGAlterVol     $07
0008BA3E 8003                       	dc.b	nRst, $03
0008BA40 ECF5                       	smpsPSGAlterVol     $F5
0008BA42 8F06                       	dc.b	nD1, $06
0008BA44 EC04                       	smpsPSGAlterVol     $04
0008BA46 E701                       	dc.b	smpsNoAttack, $01
0008BA48 EC07                       	smpsPSGAlterVol     $07
0008BA4A 8006                       	dc.b	nRst, $06
0008BA4C E1FF                       	smpsAlterNote       $FF
0008BA4E 01                         	dc.b	$01
0008BA4F E102                       	smpsAlterNote       $02
0008BA51 01                         	dc.b	$01
0008BA52 E101                       	smpsAlterNote       $01
0008BA54 01                         	dc.b	$01
0008BA55 E1FC                       	smpsAlterNote       $FC
0008BA57 01                         	dc.b	$01
0008BA58 ECF5                       	smpsPSGAlterVol     $F5
0008BA5A 9007                       	dc.b	nEb1, $07
0008BA5C EC0B                       	smpsPSGAlterVol     $0B
0008BA5E 8004                       	dc.b	nRst, $04
0008BA60 ECF5                       	smpsPSGAlterVol     $F5
0008BA62 9006                       	dc.b	nEb1, $06
0008BA64 EC0B                       	smpsPSGAlterVol     $0B
0008BA66 8007                       	dc.b	nRst, $07
0008BA68 E103                       	smpsAlterNote       $03
0008BA6A 0101                       	dc.b	$01, $01
0008BA6C E1FF                       	smpsAlterNote       $FF
0008BA6E 01                         	dc.b	$01
0008BA6F E1F9                       	smpsAlterNote       $F9
0008BA71 01                         	dc.b	$01
0008BA72 E1FC                       	smpsAlterNote       $FC
0008BA74 ECF5                       	smpsPSGAlterVol     $F5
0008BA76 8F06                       	dc.b	nD1, $06
0008BA78 EC04                       	smpsPSGAlterVol     $04
0008BA7A E701                       	dc.b	smpsNoAttack, $01
0008BA7C EC07                       	smpsPSGAlterVol     $07
0008BA7E 8003                       	dc.b	nRst, $03
0008BA80 ECF5                       	smpsPSGAlterVol     $F5
0008BA82 8F06                       	dc.b	nD1, $06
0008BA84 EC04                       	smpsPSGAlterVol     $04
0008BA86 E701                       	dc.b	smpsNoAttack, $01
0008BA88 EC07                       	smpsPSGAlterVol     $07
0008BA8A 8006                       	dc.b	nRst, $06
0008BA8C E1FF                       	smpsAlterNote       $FF
0008BA8E 01                         	dc.b	$01
0008BA8F E103                       	smpsAlterNote       $03
0008BA91 01                         	dc.b	$01
0008BA92 E1FF                       	smpsAlterNote       $FF
0008BA94 01                         	dc.b	$01
0008BA95 E1F9                       	smpsAlterNote       $F9
0008BA97 01                         	dc.b	$01
0008BA98 E1FC                       	smpsAlterNote       $FC
0008BA9A ECF5                       	smpsPSGAlterVol     $F5
0008BA9C 8F06                       	dc.b	nD1, $06
0008BA9E EC04                       	smpsPSGAlterVol     $04
0008BAA0 E701                       	dc.b	smpsNoAttack, $01
0008BAA2 EC07                       	smpsPSGAlterVol     $07
0008BAA4 8003                       	dc.b	nRst, $03
0008BAA6 ECF5                       	smpsPSGAlterVol     $F5
0008BAA8 8F07                       	dc.b	nD1, $07
0008BAAA EC0B                       	smpsPSGAlterVol     $0B
0008BAAC 8006                       	dc.b	nRst, $06
0008BAAE E1FF                       	smpsAlterNote       $FF
0008BAB0 01                         	dc.b	$01
0008BAB1 E102                       	smpsAlterNote       $02
0008BAB3 0101                       	dc.b	$01, $01
0008BAB5 E1FC                       	smpsAlterNote       $FC
0008BAB7 01                         	dc.b	$01
0008BAB8 ECF5                       	smpsPSGAlterVol     $F5
0008BABA 8F07                       	dc.b	nD1, $07
0008BABC EC0B                       	smpsPSGAlterVol     $0B
0008BABE 8004                       	dc.b	nRst, $04
0008BAC0 ECF5                       	smpsPSGAlterVol     $F5
0008BAC2 8F06                       	dc.b	nD1, $06
0008BAC4 EC04                       	smpsPSGAlterVol     $04
0008BAC6 E701                       	dc.b	smpsNoAttack, $01
0008BAC8 EC07                       	smpsPSGAlterVol     $07
0008BACA 8006                       	dc.b	nRst, $06
0008BACC E101                       	smpsAlterNote       $01
0008BACE 01                         	dc.b	$01
0008BACF E102                       	smpsAlterNote       $02
0008BAD1 01                         	dc.b	$01
0008BAD2 E1FF                       	smpsAlterNote       $FF
0008BAD4 01                         	dc.b	$01
0008BAD5 E1F9                       	smpsAlterNote       $F9
0008BAD7 01                         	dc.b	$01
0008BAD8 E1FC                       	smpsAlterNote       $FC
0008BADA ECF5                       	smpsPSGAlterVol     $F5
0008BADC 9006                       	dc.b	nEb1, $06
0008BADE EC04                       	smpsPSGAlterVol     $04
0008BAE0 E701                       	dc.b	smpsNoAttack, $01
0008BAE2 EC07                       	smpsPSGAlterVol     $07
0008BAE4 8003                       	dc.b	nRst, $03
0008BAE6 ECF5                       	smpsPSGAlterVol     $F5
0008BAE8 9006                       	dc.b	nEb1, $06
0008BAEA EC04                       	smpsPSGAlterVol     $04
0008BAEC E701                       	dc.b	smpsNoAttack, $01
0008BAEE EC07                       	smpsPSGAlterVol     $07
0008BAF0 8006                       	dc.b	nRst, $06
0008BAF2 E100                       	smpsAlterNote       $00
0008BAF4 01                         	dc.b	$01
0008BAF5 E102                       	smpsAlterNote       $02
0008BAF7 01                         	dc.b	$01
0008BAF8 E100                       	smpsAlterNote       $00
0008BAFA 01                         	dc.b	$01
0008BAFB E1FF                       	smpsAlterNote       $FF
0008BAFD 01                         	dc.b	$01
0008BAFE ECF5                       	smpsPSGAlterVol     $F5
0008BB00 9B06                       	dc.b	nD2, $06
0008BB02 EC04                       	smpsPSGAlterVol     $04
0008BB04 E701                       	dc.b	smpsNoAttack, $01
0008BB06 EC07                       	smpsPSGAlterVol     $07
0008BB08 8003                       	dc.b	nRst, $03
0008BB0A ECF5                       	smpsPSGAlterVol     $F5
0008BB0C 9B07                       	dc.b	nD2, $07
0008BB0E EC0B                       	smpsPSGAlterVol     $0B
0008BB10 8007                       	dc.b	nRst, $07
0008BB12 E105                       	smpsAlterNote       $05
0008BB14 0101                       	dc.b	$01, $01
0008BB16 E1FF                       	smpsAlterNote       $FF
0008BB18 01                         	dc.b	$01
0008BB19 E1FC                       	smpsAlterNote       $FC
0008BB1B 01                         	dc.b	$01
0008BB1C E1FF                       	smpsAlterNote       $FF
0008BB1E ECF5                       	smpsPSGAlterVol     $F5
0008BB20 9B06                       	dc.b	nD2, $06
0008BB22 EC0B                       	smpsPSGAlterVol     $0B
0008BB24 8004                       	dc.b	nRst, $04
0008BB26 ECF5                       	smpsPSGAlterVol     $F5
0008BB28 9B06                       	dc.b	nD2, $06
0008BB2A EC04                       	smpsPSGAlterVol     $04
0008BB2C E701                       	dc.b	smpsNoAttack, $01
0008BB2E EC07                       	smpsPSGAlterVol     $07
0008BB30 8006                       	dc.b	nRst, $06
0008BB32 E102                       	smpsAlterNote       $02
0008BB34 01                         	dc.b	$01
0008BB35 E106                       	smpsAlterNote       $06
0008BB37 01                         	dc.b	$01
0008BB38 E102                       	smpsAlterNote       $02
0008BB3A 01                         	dc.b	$01
0008BB3B E1FC                       	smpsAlterNote       $FC
0008BB3D 01                         	dc.b	$01
0008BB3E E1FF                       	smpsAlterNote       $FF
0008BB40 ECF5                       	smpsPSGAlterVol     $F5
0008BB42 9B06                       	dc.b	nD2, $06
0008BB44 EC04                       	smpsPSGAlterVol     $04
0008BB46 E701                       	dc.b	smpsNoAttack, $01
0008BB48 EC07                       	smpsPSGAlterVol     $07
0008BB4A 8003                       	dc.b	nRst, $03
0008BB4C ECF5                       	smpsPSGAlterVol     $F5
0008BB4E 9B07                       	dc.b	nD2, $07
0008BB50 EC0B                       	smpsPSGAlterVol     $0B
0008BB52 8006                       	dc.b	nRst, $06
0008BB54 E102                       	smpsAlterNote       $02
0008BB56 01                         	dc.b	$01
0008BB57 E105                       	smpsAlterNote       $05
0008BB59 0101                       	dc.b	$01, $01
0008BB5B E1FF                       	smpsAlterNote       $FF
0008BB5D 01                         	dc.b	$01
0008BB5E ECF5                       	smpsPSGAlterVol     $F5
0008BB60 9B07                       	dc.b	nD2, $07
0008BB62 EC0B                       	smpsPSGAlterVol     $0B
0008BB64 8004                       	dc.b	nRst, $04
0008BB66 ECF5                       	smpsPSGAlterVol     $F5
0008BB68 9B06                       	dc.b	nD2, $06
0008BB6A EC04                       	smpsPSGAlterVol     $04
0008BB6C E701                       	dc.b	smpsNoAttack, $01
0008BB6E EC07                       	smpsPSGAlterVol     $07
0008BB70 8006                       	dc.b	nRst, $06
0008BB72 E105                       	smpsAlterNote       $05
0008BB74 0101                       	dc.b	$01, $01
0008BB76 E102                       	smpsAlterNote       $02
0008BB78 01                         	dc.b	$01
0008BB79 E1FC                       	smpsAlterNote       $FC
0008BB7B 01                         	dc.b	$01
0008BB7C E1FF                       	smpsAlterNote       $FF
0008BB7E ECF5                       	smpsPSGAlterVol     $F5
0008BB80 9B06                       	dc.b	nD2, $06
0008BB82 EC04                       	smpsPSGAlterVol     $04
0008BB84 E701                       	dc.b	smpsNoAttack, $01
0008BB86 EC07                       	smpsPSGAlterVol     $07
0008BB88 8003                       	dc.b	nRst, $03
0008BB8A ECF5                       	smpsPSGAlterVol     $F5
0008BB8C 9B06                       	dc.b	nD2, $06
0008BB8E EC04                       	smpsPSGAlterVol     $04
0008BB90 E701                       	dc.b	smpsNoAttack, $01
0008BB92 EC07                       	smpsPSGAlterVol     $07
0008BB94 8006                       	dc.b	nRst, $06
0008BB96 E102                       	smpsAlterNote       $02
0008BB98 01                         	dc.b	$01
0008BB99 E106                       	smpsAlterNote       $06
0008BB9B 01                         	dc.b	$01
0008BB9C E102                       	smpsAlterNote       $02
0008BB9E 01                         	dc.b	$01
0008BB9F E1FF                       	smpsAlterNote       $FF
0008BBA1 01                         	dc.b	$01
0008BBA2 ECF5                       	smpsPSGAlterVol     $F5
0008BBA4 9B06                       	dc.b	nD2, $06
0008BBA6 EC04                       	smpsPSGAlterVol     $04
0008BBA8 E701                       	dc.b	smpsNoAttack, $01
0008BBAA EC07                       	smpsPSGAlterVol     $07
0008BBAC 8003                       	dc.b	nRst, $03
0008BBAE ECF5                       	smpsPSGAlterVol     $F5
0008BBB0 9B07                       	dc.b	nD2, $07
0008BBB2 EC0B                       	smpsPSGAlterVol     $0B
0008BBB4 8007                       	dc.b	nRst, $07
0008BBB6 E107                       	smpsAlterNote       $07
0008BBB8 0101                       	dc.b	$01, $01
0008BBBA E1FE                       	smpsAlterNote       $FE
0008BBBC 01                         	dc.b	$01
0008BBBD E1FA                       	smpsAlterNote       $FA
0008BBBF 0101                       	dc.b	$01, $01
0008BBC1 E103                       	smpsAlterNote       $03
0008BBC3 01                         	dc.b	$01
0008BBC4 E109                       	smpsAlterNote       $09
0008BBC6 01                         	dc.b	$01
0008BBC7 E107                       	smpsAlterNote       $07
0008BBC9 01                         	dc.b	$01
0008BBCA E1FE                       	smpsAlterNote       $FE
0008BBCC 01                         	dc.b	$01
0008BBCD E108                       	smpsAlterNote       $08
0008BBCF 01                         	dc.b	$01
0008BBD0 E1FD                       	smpsAlterNote       $FD
0008BBD2 ECF5                       	smpsPSGAlterVol     $F5
0008BBD4 940E                       	dc.b	nG1, $0E
0008BBD6 E103                       	smpsAlterNote       $03
0008BBD8 EC0B                       	smpsPSGAlterVol     $0B
0008BBDA 8001 01                    	dc.b	nRst, $01, $01
0008BBDD E1FD                       	smpsAlterNote       $FD
0008BBDF 01                         	dc.b	$01
0008BBE0 E1FB                       	smpsAlterNote       $FB
0008BBE2 0101                       	dc.b	$01, $01
0008BBE4 E100                       	smpsAlterNote       $00
0008BBE6 01                         	dc.b	$01
0008BBE7 E103                       	smpsAlterNote       $03
0008BBE9 01                         	dc.b	$01
0008BBEA E100                       	smpsAlterNote       $00
0008BBEC 01                         	dc.b	$01
0008BBED E1FD                       	smpsAlterNote       $FD
0008BBEF 01                         	dc.b	$01
0008BBF0 E1FA                       	smpsAlterNote       $FA
0008BBF2 01                         	dc.b	$01
0008BBF3 E1FD                       	smpsAlterNote       $FD
0008BBF5 01                         	dc.b	$01
0008BBF6 E103                       	smpsAlterNote       $03
0008BBF8 0101                       	dc.b	$01, $01
0008BBFA E100                       	smpsAlterNote       $00
0008BBFC 01                         	dc.b	$01
0008BBFD E1FE                       	smpsAlterNote       $FE
0008BBFF ECF5                       	smpsPSGAlterVol     $F5
0008BC01 960D                       	dc.b	nA1, $0D
0008BC03 E104                       	smpsAlterNote       $04
0008BC05 EC0B                       	smpsPSGAlterVol     $0B
0008BC07 8001 01                    	dc.b	nRst, $01, $01
0008BC0A E101                       	smpsAlterNote       $01
0008BC0C 01                         	dc.b	$01
0008BC0D E1FB                       	smpsAlterNote       $FB
0008BC0F 0101                       	dc.b	$01, $01
0008BC11 E1FE                       	smpsAlterNote       $FE
0008BC13 01                         	dc.b	$01
0008BC14 E104                       	smpsAlterNote       $04
0008BC16 0101                       	dc.b	$01, $01
0008BC18 E1FE                       	smpsAlterNote       $FE
0008BC1A 01                         	dc.b	$01
0008BC1B E1FB                       	smpsAlterNote       $FB
0008BC1D 0101                       	dc.b	$01, $01
0008BC1F E101                       	smpsAlterNote       $01
0008BC21 01                         	dc.b	$01
0008BC22 E104                       	smpsAlterNote       $04
0008BC24 0101                       	dc.b	$01, $01
0008BC26 E1FE                       	smpsAlterNote       $FE
0008BC28 ECF5                       	smpsPSGAlterVol     $F5
0008BC2A 970D                       	dc.b	nBb1, $0D
0008BC2C E101                       	smpsAlterNote       $01
0008BC2E EC04                       	smpsPSGAlterVol     $04
0008BC30 E701                       	dc.b	smpsNoAttack, $01
0008BC32 EC07                       	smpsPSGAlterVol     $07
0008BC34 E104                       	smpsAlterNote       $04
0008BC36 8001                       	dc.b	nRst, $01
0008BC38 E103                       	smpsAlterNote       $03
0008BC3A 01                         	dc.b	$01
0008BC3B E1FE                       	smpsAlterNote       $FE
0008BC3D 01                         	dc.b	$01
0008BC3E E1FA                       	smpsAlterNote       $FA
0008BC40 01                         	dc.b	$01
0008BC41 E1FE                       	smpsAlterNote       $FE
0008BC43 01                         	dc.b	$01
0008BC44 E101                       	smpsAlterNote       $01
0008BC46 01                         	dc.b	$01
0008BC47 E104                       	smpsAlterNote       $04
0008BC49 01                         	dc.b	$01
0008BC4A E101                       	smpsAlterNote       $01
0008BC4C 01                         	dc.b	$01
0008BC4D E1FB                       	smpsAlterNote       $FB
0008BC4F 01                         	dc.b	$01
0008BC50 E1FA                       	smpsAlterNote       $FA
0008BC52 01                         	dc.b	$01
0008BC53 E1FE                       	smpsAlterNote       $FE
0008BC55 01                         	dc.b	$01
0008BC56 E103                       	smpsAlterNote       $03
0008BC58 0101                       	dc.b	$01, $01
0008BC5A E101                       	smpsAlterNote       $01
0008BC5C 01                         	dc.b	$01
0008BC5D E1FE                       	smpsAlterNote       $FE
0008BC5F ECF5                       	smpsPSGAlterVol     $F5
0008BC61 990D                       	dc.b	nC2, $0D
0008BC63 E104                       	smpsAlterNote       $04
0008BC65 EC0B                       	smpsPSGAlterVol     $0B
0008BC67 8001 01                    	dc.b	nRst, $01, $01
0008BC6A E102                       	smpsAlterNote       $02
0008BC6C 01                         	dc.b	$01
0008BC6D E1FC                       	smpsAlterNote       $FC
0008BC6F 0101                       	dc.b	$01, $01
0008BC71 E102                       	smpsAlterNote       $02
0008BC73 01                         	dc.b	$01
0008BC74 E104                       	smpsAlterNote       $04
0008BC76 01                         	dc.b	$01
0008BC77 E1FF                       	smpsAlterNote       $FF
0008BC79 ECF5                       	smpsPSGAlterVol     $F5
0008BC7B 9B06                       	dc.b	nD2, $06
0008BC7D EC04                       	smpsPSGAlterVol     $04
0008BC7F E701                       	dc.b	smpsNoAttack, $01
0008BC81 EC07                       	smpsPSGAlterVol     $07
0008BC83 8003                       	dc.b	nRst, $03
0008BC85 ECF5                       	smpsPSGAlterVol     $F5
0008BC87 9B07                       	dc.b	nD2, $07
0008BC89 EC0B                       	smpsPSGAlterVol     $0B
0008BC8B 8006                       	dc.b	nRst, $06
0008BC8D E101                       	smpsAlterNote       $01
0008BC8F 01                         	dc.b	$01
0008BC90 E104                       	smpsAlterNote       $04
0008BC92 0101                       	dc.b	$01, $01
0008BC94 E1FE                       	smpsAlterNote       $FE
0008BC96 01                         	dc.b	$01
0008BC97 E1FC                       	smpsAlterNote       $FC
0008BC99 01                         	dc.b	$01
0008BC9A E1FE                       	smpsAlterNote       $FE
0008BC9C ECF5                       	smpsPSGAlterVol     $F5
0008BC9E 9C06                       	dc.b	nEb2, $06
0008BCA0 EC0B                       	smpsPSGAlterVol     $0B
0008BCA2 8004                       	dc.b	nRst, $04
0008BCA4 ECF5                       	smpsPSGAlterVol     $F5
0008BCA6 9C06                       	dc.b	nEb2, $06
0008BCA8 EC04                       	smpsPSGAlterVol     $04
0008BCAA E701                       	dc.b	smpsNoAttack, $01
0008BCAC EC07                       	smpsPSGAlterVol     $07
0008BCAE 8006                       	dc.b	nRst, $06
0008BCB0 E105                       	smpsAlterNote       $05
0008BCB2 01                         	dc.b	$01
0008BCB3 E106                       	smpsAlterNote       $06
0008BCB5 01                         	dc.b	$01
0008BCB6 E102                       	smpsAlterNote       $02
0008BCB8 01                         	dc.b	$01
0008BCB9 E1FB                       	smpsAlterNote       $FB
0008BCBB 01                         	dc.b	$01
0008BCBC E1FF                       	smpsAlterNote       $FF
0008BCBE ECF5                       	smpsPSGAlterVol     $F5
0008BCC0 9B06                       	dc.b	nD2, $06
0008BCC2 EC04                       	smpsPSGAlterVol     $04
0008BCC4 E701                       	dc.b	smpsNoAttack, $01
0008BCC6 EC07                       	smpsPSGAlterVol     $07
0008BCC8 8003                       	dc.b	nRst, $03
0008BCCA ECF5                       	smpsPSGAlterVol     $F5
0008BCCC 9B06                       	dc.b	nD2, $06
0008BCCE EC04                       	smpsPSGAlterVol     $04
0008BCD0 E701                       	dc.b	smpsNoAttack, $01
0008BCD2 EC07                       	smpsPSGAlterVol     $07
0008BCD4 8006                       	dc.b	nRst, $06
0008BCD6 E101                       	smpsAlterNote       $01
0008BCD8 01                         	dc.b	$01
0008BCD9 E105                       	smpsAlterNote       $05
0008BCDB 01                         	dc.b	$01
0008BCDC E104                       	smpsAlterNote       $04
0008BCDE 01                         	dc.b	$01
0008BCDF E1FE                       	smpsAlterNote       $FE
0008BCE1 01                         	dc.b	$01
0008BCE2 ECF5                       	smpsPSGAlterVol     $F5
0008BCE4 9C07                       	dc.b	nEb2, $07
0008BCE6 EC0B                       	smpsPSGAlterVol     $0B
0008BCE8 8004                       	dc.b	nRst, $04
0008BCEA ECF5                       	smpsPSGAlterVol     $F5
0008BCEC 9C06                       	dc.b	nEb2, $06
0008BCEE EC0B                       	smpsPSGAlterVol     $0B
0008BCF0 8007                       	dc.b	nRst, $07
0008BCF2 E105                       	smpsAlterNote       $05
0008BCF4 0101                       	dc.b	$01, $01
0008BCF6 E102                       	smpsAlterNote       $02
0008BCF8 01                         	dc.b	$01
0008BCF9 E1FB                       	smpsAlterNote       $FB
0008BCFB 01                         	dc.b	$01
0008BCFC E1FF                       	smpsAlterNote       $FF
0008BCFE ECF5                       	smpsPSGAlterVol     $F5
0008BD00 9B06                       	dc.b	nD2, $06
0008BD02 EC04                       	smpsPSGAlterVol     $04
0008BD04 E701                       	dc.b	smpsNoAttack, $01
0008BD06 EC07                       	smpsPSGAlterVol     $07
0008BD08 8003                       	dc.b	nRst, $03
0008BD0A ECF5                       	smpsPSGAlterVol     $F5
0008BD0C 9B06                       	dc.b	nD2, $06
0008BD0E EC04                       	smpsPSGAlterVol     $04
0008BD10 E701                       	dc.b	smpsNoAttack, $01
0008BD12 EC07                       	smpsPSGAlterVol     $07
0008BD14 8006                       	dc.b	nRst, $06
0008BD16 E101                       	smpsAlterNote       $01
0008BD18 01                         	dc.b	$01
0008BD19 E105                       	smpsAlterNote       $05
0008BD1B 01                         	dc.b	$01
0008BD1C E101                       	smpsAlterNote       $01
0008BD1E 01                         	dc.b	$01
0008BD1F E1FC                       	smpsAlterNote       $FC
0008BD21 01                         	dc.b	$01
0008BD22 E1FE                       	smpsAlterNote       $FE
0008BD24 ECF5                       	smpsPSGAlterVol     $F5
0008BD26 9C06                       	dc.b	nEb2, $06
0008BD28 EC04                       	smpsPSGAlterVol     $04
0008BD2A E701                       	dc.b	smpsNoAttack, $01
0008BD2C EC07                       	smpsPSGAlterVol     $07
0008BD2E 8003                       	dc.b	nRst, $03
0008BD30 ECF5                       	smpsPSGAlterVol     $F5
0008BD32 9C07                       	dc.b	nEb2, $07
0008BD34 EC0B                       	smpsPSGAlterVol     $0B
0008BD36 8006                       	dc.b	nRst, $06
0008BD38 E102                       	smpsAlterNote       $02
0008BD3A 01                         	dc.b	$01
0008BD3B E105                       	smpsAlterNote       $05
0008BD3D 0101                       	dc.b	$01, $01
0008BD3F E1FF                       	smpsAlterNote       $FF
0008BD41 01                         	dc.b	$01
0008BD42 ECF5                       	smpsPSGAlterVol     $F5
0008BD44 9B07                       	dc.b	nD2, $07
0008BD46 EC0B                       	smpsPSGAlterVol     $0B
0008BD48 8004                       	dc.b	nRst, $04
0008BD4A ECF5                       	smpsPSGAlterVol     $F5
0008BD4C 9B06                       	dc.b	nD2, $06
0008BD4E EC04                       	smpsPSGAlterVol     $04
0008BD50 E701                       	dc.b	smpsNoAttack, $01
0008BD52 EC07                       	smpsPSGAlterVol     $07
0008BD54 8002                       	dc.b	nRst, $02
0008BD56 E1FC                       	smpsAlterNote       $FC
0008BD58 ECF5                       	smpsPSGAlterVol     $F5
0008BD5A 9006                       	dc.b	nEb1, $06
0008BD5C EC04                       	smpsPSGAlterVol     $04
0008BD5E E701                       	dc.b	smpsNoAttack, $01
0008BD60 ECFC                       	smpsPSGAlterVol     $FC
0008BD62 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0008BD66 EC04                       	smpsPSGAlterVol     $04
0008BD68 E701                       	dc.b	smpsNoAttack, $01
0008BD6A E1FD                       	smpsAlterNote       $FD
0008BD6C ECFC                       	smpsPSGAlterVol     $FC
0008BD6E 9402                       	dc.b	nG1, $02
0008BD70 EC04                       	smpsPSGAlterVol     $04
0008BD72 E701                       	dc.b	smpsNoAttack, $01
0008BD74 E1FE                       	smpsAlterNote       $FE
0008BD76 ECFC                       	smpsPSGAlterVol     $FC
0008BD78 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008BD7C EC04                       	smpsPSGAlterVol     $04
0008BD7E E701                       	dc.b	smpsNoAttack, $01
0008BD80 EC07                       	smpsPSGAlterVol     $07
0008BD82 8008                       	dc.b	nRst, $08
0008BD84 F6F4 F3                    	smpsJump            music84_Jump06
0008BD87                            
0008BD87                            ; PSG3 Data
0008BD87                            music84_PSG3:
0008BD87 F500                       	smpsPSGvoice        $00
0008BD89 E1FF                       	smpsAlterNote       $FF
0008BD8B EC0F                       	smpsPSGAlterVol     $0F
0008BD8D 803A                       	dc.b	nRst, $3A
0008BD8F                            
0008BD8F                            music84_Jump05:
0008BD8F 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008BD9B 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0008BDA5 F6FF E8                    	smpsJump            music84_Jump05
0008BDA8                            
0008BDA8                            ; DAC Data
0008BDA8                            music84_DAC:
0008BDA8 E0C0                       	smpsPan             panCenter, $00
0008BDAA 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0008BDB6 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0008BDC2 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008BDCE 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008BDDA 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008BDE6 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008BDF2 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008BDFE 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008BE0A 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008BE16 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008BE22 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008BE2E 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008BE3A 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008BE46 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008BE52 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008BE5E 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008BE6A 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008BE76 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008BE82 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008BE8E 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008BE9A 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008BEA6 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008BEB2 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008BEBE 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008BECA 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008BED6 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008BEE2 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008BEEE 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008BEFA 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008BF06 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008BF12 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008BF1E 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008BF2A 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008BF36 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008BF42 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008BF4E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008BF5A 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008BF66 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008BF72 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008BF7E 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008BF8A 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008BF96 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008BFA2 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008BFAE 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008BFBA 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008BFC6 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008BFD2 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008BFDE 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008BFEA 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008BFF6 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008C002 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008C00E 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008C01A 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008C026 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008C032 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008C03E 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008C04A 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008C056 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008C062 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008C06E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008C07A 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008C086 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008C092 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008C09E 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008C0AA 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008C0B6 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008C0C2 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008C0CE 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008C0DA 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008C0E6 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008C0F2 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008C0FE 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008C10A 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008C116 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008C122 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008C12E E0C0                       	smpsPan             panCenter, $00
0008C130 F2                         	smpsStop
0008C131                            
0008C131                            music84_Voices:
0008C131                            ;	Voice $00
0008C131                            ;	$3D
0008C131                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008C131                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008C131                            	smpsVcAlgorithm     $05
0008C131                            	smpsVcFeedback      $07
0008C131                            	smpsVcUnusedBits    $00
0008C131                            	smpsVcDetune        $05, $04, $03, $04
0008C131                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008C131                            	smpsVcRateScale     $00, $00, $00, $00
0008C131                            	smpsVcAttackRate    $11, $11, $11, $11
0008C131                            	smpsVcAmpMod        $00, $00, $00, $00
0008C131                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008C131                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008C131                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008C131                            	smpsVcReleaseRate   $08, $08, $08, $07
0008C131 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008C14A                            
0008C14A                            ;	Voice $01
0008C14A                            ;	$04
0008C14A                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008C14A                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008C14A                            	smpsVcAlgorithm     $04
0008C14A                            	smpsVcFeedback      $00
0008C14A                            	smpsVcUnusedBits    $00
0008C14A                            	smpsVcDetune        $04, $03, $04, $05
0008C14A                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008C14A                            	smpsVcRateScale     $00, $01, $00, $01
0008C14A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008C14A                            	smpsVcAmpMod        $00, $00, $00, $00
0008C14A                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008C14A                            	smpsVcDecayRate2    $05, $00, $05, $00
0008C14A                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008C14A                            	smpsVcReleaseRate   $06, $06, $06, $06
0008C14A 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008C163                            
0008C163                            ;	Voice $02
0008C163                            ;	$30
0008C163                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008C163                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008C163                            	smpsVcAlgorithm     $00
0008C163                            	smpsVcFeedback      $06
0008C163                            	smpsVcUnusedBits    $00
0008C163                            	smpsVcDetune        $04, $02, $00, $06
0008C163                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008C163                            	smpsVcRateScale     $00, $00, $00, $00
0008C163                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008C163                            	smpsVcAmpMod        $00, $00, $00, $00
0008C163                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008C163                            	smpsVcDecayRate2    $01, $01, $01, $01
0008C163                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008C163                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008C163 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008C17C                            
0008C17C                            ;	Voice $03
0008C17C                            ;	$3A
0008C17C                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008C17C                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008C17C                            	smpsVcAlgorithm     $02
0008C17C                            	smpsVcFeedback      $07
0008C17C                            	smpsVcUnusedBits    $00
0008C17C                            	smpsVcDetune        $04, $06, $02, $00
0008C17C                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008C17C                            	smpsVcRateScale     $00, $00, $00, $00
0008C17C                            	smpsVcAttackRate    $18, $19, $14, $14
0008C17C                            	smpsVcAmpMod        $00, $00, $00, $00
0008C17C                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008C17C                            	smpsVcDecayRate2    $00, $00, $00, $00
0008C17C                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008C17C                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008C17C 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008C195                            
0008C195                            ;	Voice $04
0008C195                            ;	$3C
0008C195                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008C195                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008C195                            	smpsVcAlgorithm     $04
0008C195                            	smpsVcFeedback      $07
0008C195                            	smpsVcUnusedBits    $00
0008C195                            	smpsVcDetune        $07, $00, $00, $03
0008C195                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008C195                            	smpsVcRateScale     $00, $00, $00, $00
0008C195                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008C195                            	smpsVcAmpMod        $00, $00, $00, $00
0008C195                            	smpsVcDecayRate1    $00, $00, $00, $00
0008C195                            	smpsVcDecayRate2    $00, $00, $00, $00
0008C195                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008C195                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008C195 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008C1AE                            
0008C1AE                            ;	Voice $05
0008C1AE                            ;	$38
0008C1AE                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008C1AE                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008C1AE                            	smpsVcAlgorithm     $00
0008C1AE                            	smpsVcFeedback      $07
0008C1AE                            	smpsVcUnusedBits    $00
0008C1AE                            	smpsVcDetune        $04, $06, $02, $00
0008C1AE                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008C1AE                            	smpsVcRateScale     $00, $00, $00, $00
0008C1AE                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008C1AE                            	smpsVcAmpMod        $00, $00, $00, $00
0008C1AE                            	smpsVcDecayRate1    $00, $03, $00, $17
0008C1AE                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008C1AE                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008C1AE                            	smpsVcReleaseRate   $08, $05, $05, $05
0008C1AE 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008C1C7                            
0008C1C7                            
0008C1C8 00                         		even
0008C1C8                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
000903D8                            		even
000903D8                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00093F30 00                         		even
00093F30                            Music87:	include	sound\music87.asm; Invincibility
00093F30                            triple_Header:
00093F30 =00000001                  smpsHeaderStartSong = 1
00093F30 0000                       	smpsHeaderVoice     triple_Voices
00093F32 0501                       	smpsHeaderChan      $05, $01
00093F34 0200                       	smpsHeaderTempo     $02, $00
00093F36                            
00093F3A 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00093F3E 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00093F42 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00093F46 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00093F4A 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00093F50                            
00093F50                            ; DAC Data
00093F50                            triple_DAC:
00093F50 E0C0                       	smpsPan             panCenter, $00
00093F52 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00093F58                            
00093F58                            triple_Loop01:
00093F58 8282 82                    	dc.b	dSnare, dSnare, dSnare
00093F5B                            
00093F5B                            triple_Loop00:
00093F5B 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00093F67 06                         	dc.b	$06
00093F68 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00093F6D 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00093F79 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00093F80 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00093F85 0303 1B                    	dc.b	$03, $03, $1B
00093F88 E0C0                       	smpsPan             panCenter, $00
00093F8A F6FF C4                    	smpsJump triple_DAC
00093F8D                            
00093F8D                            ; FM1 Data
00093F8D                            triple_FM1:
00093F8D E0C0                       	smpsPan             panCenter, $00
00093F91 8018                       	dc.b	nRst, $18
00093F93                            
00093F93                            triple_Loop0B:
00093F93 AC06 B8                    	dc.b	nG3, $06, nG4
00093F96 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00093F9B                            
00093F9B                            triple_Loop0C:
00093F9B A7B3                       	dc.b	nD3, nD4
00093F9D F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00093FA2                            
00093FA2                            triple_Loop0D:
00093FA2 A9B5                       	dc.b	nE3, nE4
00093FA4 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00093FA9 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00093FB1 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00093FB6 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00093FC2 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00093FCE AD                         	dc.b	nAb3
00093FCF F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00093FD4 8018                       	dc.b	nRst, $18
00093FD6 E0C0                       	smpsPan             panCenter, $00
00093FDA F6FF B1                    	smpsJump triple_FM1
00093FDD                            
00093FDD                            ; FM2 Data
00093FDD                            triple_FM2:
00093FDD E0C0                       	smpsPan             panCenter, $00
00093FE1 8018                       	dc.b	nRst, $18
00093FE3                            
00093FE3                            triple_Loop07:
00093FE3 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00093FEF C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00093FFB F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00094000 8003                       	dc.b	nRst, $03
00094002                            
00094002                            triple_Loop08:
00094002 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00094008 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
0009400D B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00094013                            
00094013                            triple_Loop09:
00094013 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009401F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009402B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00094030 8003                       	dc.b	nRst, $03
00094032                            
00094032                            triple_Loop0A:
00094032 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00094038 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
0009403D B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00094043 E0C0                       	smpsPan             panCenter, $00
00094047 F6FF 94                    	smpsJump triple_FM2
0009404A                            
0009404A                            ; FM3 Data
0009404A                            triple_FM3:
0009404A E0C0                       	smpsPan             panCenter, $00
0009404E 8018                       	dc.b	nRst, $18
00094050                            
00094050                            triple_Loop06:
00094050 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00094057 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
0009405C 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00094068 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00094074 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00094077 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
0009407C 8018                       	dc.b	nRst, $18
0009407E E0C0                       	smpsPan             panCenter, $00
00094082 F6FF C6                    	smpsJump triple_FM3
00094085                            
00094085                            ; FM4 Data
00094085                            triple_FM4:
00094085 E103                       	smpsAlterNote       $03
00094089 E0C0                       	smpsPan             panCenter, $00
0009408B 8018                       	dc.b	nRst, $18
0009408D                            
0009408D                            triple_Loop02:
0009408D C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00094099 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000940A5 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000940AA 8003                       	dc.b	nRst, $03
000940AC                            
000940AC                            triple_Loop03:
000940AC B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000940B2 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000940B7 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000940BD                            
000940BD                            triple_Loop04:
000940BD C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000940C9 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000940D5 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000940DA 8003                       	dc.b	nRst, $03
000940DC                            
000940DC                            triple_Loop05:
000940DC B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000940E2 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000940E7 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000940ED E0C0                       	smpsPan             panCenter, $00
000940EF F6FF 94                    	smpsJump triple_FM4
000940F2                            
000940F2                            ; PSG1 Data
000940F2                            triple_PSG1:
000940F2 8018                       	dc.b	nRst, $18
000940F4                            
000940F4                            triple_Loop0E:
000940F4 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00094100 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009410C 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00094118 9402 8004                  	dc.b	nG1, $02, nRst, $04
0009411C F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00094121 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009412D 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00094139 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00094145 9402 8007                  	dc.b	nG1, $02, nRst, $07
00094149                            
00094149                            triple_Loop0F:
00094149 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0009414F F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00094154 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
0009415A                            
0009415A                            triple_Loop10:
0009415A A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00094166 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00094172 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009417E 9402 8004                  	dc.b	nG1, $02, nRst, $04
00094182 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00094187 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00094193 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009419F 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000941AB 9402 8007                  	dc.b	nG1, $02, nRst, $07
000941AF                            
000941AF                            triple_Loop11:
000941AF 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000941B5 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000941BA 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000941C0 F500                       	smpsPSGvoice        $00
000941C2 F6FF 2E                    	smpsJump triple_PSG1
000941C5                            
000941C5                            triple_Voices:
000941C5                            ;	Voice $00
000941C5                            ;	$3A
000941C5                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000941C5                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000941C5                            	smpsVcAlgorithm     $02
000941C5                            	smpsVcFeedback      $07
000941C5                            	smpsVcUnusedBits    $00
000941C5                            	smpsVcDetune        $00, $00, $00, $00
000941C5                            	smpsVcCoarseFreq    $01, $01, $07, $01
000941C5                            	smpsVcRateScale     $01, $02, $02, $02
000941C5                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000941C5                            	smpsVcAmpMod        $00, $00, $00, $00
000941C5                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000941C5                            	smpsVcDecayRate2    $00, $00, $00, $00
000941C5                            	smpsVcDecayLevel    $00, $01, $0F, $01
000941C5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000941C5 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000941DE                            
000941DE                            ;	Voice $01
000941DE                            ;	$20
000941DE                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000941DE                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000941DE                            	smpsVcAlgorithm     $00
000941DE                            	smpsVcFeedback      $04
000941DE                            	smpsVcUnusedBits    $00
000941DE                            	smpsVcDetune        $00, $00, $03, $07
000941DE                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000941DE                            	smpsVcRateScale     $03, $03, $03, $02
000941DE                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000941DE                            	smpsVcAmpMod        $00, $00, $00, $00
000941DE                            	smpsVcDecayRate1    $04, $04, $0A, $10
000941DE                            	smpsVcDecayRate2    $08, $08, $08, $0F
000941DE                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000941DE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000941DE 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000941DE 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000941F8 00                         		even
000941F8                            Music88:	incbin	sound\music88.bin; Extra Life
000942E6                            		even
000942E6                            Music89:	incbin	sound\music89.bin; Special Stage
000981AE 00                         		even
000981AE                            Music8A:	incbin	sound\music8A.bin; Title Screen
00098378                            		even
00098378                            Music8B:	incbin	sound\music8B.bin; Ending Theme
00098612                            		even
00098612                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009882E                            		even
0009882E                            Music8D:	incbin	sound\music8D.bin; Final Zone
00098A4A                            		even
00098A4A                            Music8E:	incbin	sound\fle.bin ;		Act Clear
00098EB8 00                         		even
00098EB8                            Music8F:	incbin	sound\music8F.bin ; Game Over
000994F8 00                         		even
000994F8                            Music90:	incbin	sound\music90.bin ; Continue
00099656                            		even
00099656                            Music91:	incbin	sound\music91.bin ; Credits
0009A924                            		even
0009A924                            Music92:	incbin	sound\music92.bin ; Drowning
0009AA4E                            		even
0009AA4E                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
0009AB1E                            		even
0009AB1E                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
0009AB58 00                         		even
0009AB58                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
0009AB92 00                         		even
0009AB92                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
0009ABCC 00                         		even
0009ABCC                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
0009AC06 00                         		even
0009AC06                            Music98:	incbin	sound\music98.bin ; Marble Act 2
0009AC40 00                         		even
0009AC40                            Music99:	incbin	sound\music99.bin ; Marble Act 3
0009AC7A 00                         		even
0009AC7A                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
0009ACB4 00                         		even
0009ACB4                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
0009ACEE 00                         		even
0009ACEE                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
0009AD28 00                         		even
0009AD28                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
0009AD62 00                         		even
0009AD62                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
0009B252                            		even
0009B252                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
0009B28C 00                         		even
0009B28C                            ; ---------------------------------------------------------------------------
0009B28C                            ; Sound	effect pointers
0009B28C                            ; ---------------------------------------------------------------------------
0009B28C 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0009B298 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0009B2A4 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0009B2B0 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0009B2BC 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0009B2C8 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0009B2D4 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0009B2E0 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0009B2EC 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0009B2F8 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0009B304 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
0009B310 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
0009B31C 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0009B328 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0009B334 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0009B340 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
0009B34C 0000 0000                  SoundD0Index:	dc.l SoundD0
0009B350                            SoundA0:	incbin	sound\soundA0.bin
0009B366                            		even
0009B366                            SoundA1:	incbin	sound\soundA1.bin
0009B390                            		even
0009B390                            SoundA2:	incbin	sound\soundA2.bin
0009B3B0                            		even
0009B3B0                            SoundA3:	incbin	sound\soundA3.bin
0009B3E2                            		even
0009B3E2                            SoundA4:	incbin	sound\soundA4.bin
0009B418                            		even
0009B418                            SoundA5:	incbin	sound\soundA5.bin
0009B444                            		even
0009B444                            SoundA6:	incbin	sound\soundA6.bin
0009B474                            		even
0009B474                            SoundA7:	incbin	sound\soundA7.bin
0009B4A4                            		even
0009B4A4                            SoundA8:	incbin	sound\soundA8.bin
0009B4D8                            		even
0009B4D8                            SoundA9:	incbin	sound\soundA9.bin
0009B4EA                            		even
0009B4EA                            SoundAA:	incbin	sound\soundAA.bin
0009B52C                            		even
0009B52C                            SoundAB:	incbin	sound\soundAB.bin
0009B54C                            		even
0009B54C                            SoundAC:	incbin	sound\soundAC.bin
0009B580                            		even
0009B580                            SoundAD:	incbin	sound\soundAD.bin
0009B5B6                            		even
0009B5B6                            SoundAE:	incbin	sound\soundAE.bin
0009B600                            		even
0009B600                            SoundAF:	incbin	sound\soundAF.bin
0009B62E                            		even
0009B62E                            SoundB0:	incbin	sound\soundB0.bin
0009B660                            		even
0009B660                            SoundB1:	incbin	sound\soundB1.bin
0009B68C                            		even
0009B68C                            SoundB2:	incbin	sound\soundB2.bin
0009B6DC                            		even
0009B6DC                            SoundB3:	incbin	sound\soundB3.bin
0009B726                            		even
0009B726                            SoundB4:	include	sound\soundB4.asm
0009B726                            SndB4_Bumper_Header:
0009B726 =00000001                  smpsHeaderStartSong = 1
0009B726 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
0009B728 01                         	smpsHeaderTempoSFX  $01
0009B729 03                         	smpsHeaderChanSFX   $03
0009B72A                            
0009B73C                            
0009B73C                            ; FM5 Data
0009B73C                            SndB4_Bumper_FM5:
0009B73E F600 00                    	smpsJump            SndB4_Bumper_Jump00
0009B741                            
0009B741                            ; FM4 Data
0009B741                            SndB4_Bumper_FM4:
0009B741 F2                         	smpsStop
0009B742                            
0009B742                            SndB4_Bumper_Jump00:
0009B742 A020                       	dc.b	nG2, $20
0009B744 F2                         	smpsStop
0009B745                            
0009B745                            ; FM3 Data
0009B745                            SndB4_Bumper_FM3:
0009B745 F2                         	smpsStop
0009B746                            
0009B746                            SndB4_Bumper_Voices:
0009B746                            ;	Voice $00
0009B746                            ;	$32
0009B746                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
0009B746                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
0009B746                            	smpsVcAlgorithm     $02
0009B746                            	smpsVcFeedback      $06
0009B746                            	smpsVcUnusedBits    $00
0009B746                            	smpsVcDetune        $07, $07, $02, $00
0009B746                            	smpsVcCoarseFreq    $00, $00, $00, $04
0009B746                            	smpsVcRateScale     $00, $00, $00, $00
0009B746                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009B746                            	smpsVcAmpMod        $00, $00, $00, $00
0009B746                            	smpsVcDecayRate1    $08, $00, $00, $09
0009B746                            	smpsVcDecayRate2    $0B, $00, $00, $09
0009B746                            	smpsVcDecayLevel    $00, $00, $00, $00
0009B746                            	smpsVcReleaseRate   $0F, $00, $00, $00
0009B746 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009B746 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009B760 00                         		even
0009B760                            SoundB5:	incbin	sound\soundB5.bin
0009B77E 00                         		even
0009B77E                            SoundB6:	incbin	sound\soundB6.bin
0009B79C                            		even
0009B79C                            SoundB7:	incbin	sound\soundB7.bin
0009B7D8                            		even
0009B7D8                            SoundB8:	incbin	sound\soundB8.bin
0009B7F6                            		even
0009B7F6                            SoundB9:	incbin	sound\soundB9.bin
0009B85A                            		even
0009B85A                            SoundBA:	incbin	sound\soundBA.bin
0009B882                            		even
0009B882                            SoundBB:	incbin	sound\soundBB.bin
0009B8AE                            		even
0009B8AE                            SoundBC:	incbin	sound\soundBC.bin
0009B8F0                            		even
0009B8F0                            SoundBD:	incbin	sound\soundBD.bin
0009B944                            		even
0009B944                            SoundBE:	incbin	sound\soundBE.bin
0009B97E                            		even
0009B97E                            SoundBF:	incbin	sound\soundBF.bin
0009B9F0                            		even
0009B9F0                            SoundC0:	incbin	sound\soundC0.bin
0009BA1E                            		even
0009BA1E                            SoundC1:	incbin	sound\soundC1.bin
0009BA78                            		even
0009BA78                            SoundC2:	incbin	sound\soundC2.bin
0009BAA2                            		even
0009BAA2                            SoundC3:	incbin	sound\soundC3.bin
0009BB1C                            		even
0009BB1C                            SoundC4:	incbin	sound\soundC4.bin
0009BC1A                            		even
0009BC1A                            SoundC5:	incbin	sound\soundC5.bin
0009BC82                            		even
0009BC82                            SoundC6:	incbin	sound\soundC6.bin
0009BCC4                            		even
0009BCC4                            SoundC7:	incbin	sound\soundC7.bin
0009BCF2                            		even
0009BCF2                            SoundC8:	incbin	sound\soundC8.bin
0009BD04                            		even
0009BD04                            SoundC9:	incbin	sound\soundC9.bin
0009BD32                            		even
0009BD32                            SoundCA:	incbin	sound\soundCA.bin
0009BD60                            		even
0009BD60                            SoundCB:	incbin	sound\soundCB.bin
0009BDAC                            		even
0009BDAC                            SoundCC:	incbin	sound\C9.ssf
0009BDDA                            		even
0009BDDA                            SoundCD:	incbin	sound\soundCD.bin
0009BDE8                            		even
0009BDE8                            SoundCE:	incbin	sound\soundCE.bin
0009BE06 00                         		even
0009BE06                            SoundCF:	incbin	sound\soundCF.bin
0009BE3E                            		even
0009BE3E                            SoundD0:	incbin	sound\soundD0.bin
0009BE78                            		even
0009BE78                            SegaPCM:	incbin	sound\segapcm.bin
000B5FCE                            SegaPCM_end:	even
000B5FCE                            
000B5FCE                            IdiotPCM:	incbin	sound\youare.bin
000C00A0 00                         IdiotPCM_end:	even
000C00A0                            
000C00A0                            ; end of 'ROM'
000C00A0                            EndOfRom:
000C00A0                            
000C00A0                            
