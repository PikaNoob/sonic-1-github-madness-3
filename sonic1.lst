00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 003C                  		andi.w	#$3C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003BC                            ; ===========================================================================
000003BC                            
000003BC                            CheckSumError:
000003BC 6100 0000                  		bsr.w	VDPSetupGame
000003C0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CA 7E3F                       		moveq	#$3F,d7
000003CC                            
000003CC                            CheckSum_Red:
000003CC 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D4 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D8                            
000003D8                            CheckSum_Loop:
000003D8 60FE                       		bra.s	CheckSum_Loop
000003DA                            ; ===========================================================================
000003DA                            
000003DA                            BusError:
000003DA 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E0 6000                       		bra.s	loc_43A
000003E2                            ; ===========================================================================
000003E2                            
000003E2                            AddressError:
000003E2 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E8 6000                       		bra.s	loc_43A
000003EA                            ; ===========================================================================
000003EA                            
000003EA                            IllegalInstr:
000003EA 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F0 54AF 0002                  		addq.l	#2,2(sp)
000003F4 6000                       		bra.s	loc_462
000003F6                            ; ===========================================================================
000003F6                            
000003F6                            ZeroDivide:
000003F6 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003FC 6000                       		bra.s	loc_462
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            ChkInstr:
000003FE 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000404 6000                       		bra.s	loc_462
00000406                            ; ===========================================================================
00000406                            
00000406                            TrapvInstr:
00000406 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000040C 6000                       		bra.s	loc_462
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            PrivilegeViol:
0000040E 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000414 6000                       		bra.s	loc_462
00000416                            ; ===========================================================================
00000416                            
00000416                            Trace:
00000416 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000041C 6000                       		bra.s	loc_462
0000041E                            ; ===========================================================================
0000041E                            
0000041E                            Line1010Emu:
0000041E 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000424 54AF 0002                  		addq.l	#2,2(sp)
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            Line1111Emu:
0000042A 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000430 54AF 0002                  		addq.l	#2,2(sp)
00000434 6000                       		bra.s	loc_462
00000436                            ; ===========================================================================
00000436                            
00000436                            ErrorExcept:
00000436 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000043C 6000                       		bra.s	loc_462
0000043E                            ; ===========================================================================
0000043E                            
0000043E                            loc_43A:
0000043E 46FC 2700                  		move	#$2700,sr
00000442 544F                       		addq.w	#2,sp
00000444 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000448 544F                       		addq.w	#2,sp
0000044A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000450 6100 0000                  		bsr.w	ShowErrorMsg
00000454 202F 0002                  		move.l	2(sp),d0
00000458 6100 0000                  		bsr.w	sub_5BA
0000045C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000460 6100 0000                  		bsr.w	sub_5BA
00000464 6000                       		bra.s	loc_478
00000466                            ; ===========================================================================
00000466                            
00000466                            loc_462:
00000466 46FC 2700                  		move	#$2700,sr
0000046A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000470 6100 0000                  		bsr.w	ShowErrorMsg
00000474 202F 0002                  		move.l	2(sp),d0
00000478 6100 0000                  		bsr.w	sub_5BA
0000047C                            
0000047C                            loc_478:
0000047C 6100 0000                  		bsr.w	ErrorWaitForC
00000480 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000486 46FC 2300                  		move	#$2300,sr
0000048A 4E73                       		rte	
0000048C                            
0000048C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000048C                            
0000048C                            
0000048C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000048C 4DF9 00C0 0000             		lea	($C00000).l,a6
00000492 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000049C 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A2 323C 027F                  		move.w	#$27F,d1
000004A6                            
000004A6                            Error_LoadGfx:
000004A6 3C98                       		move.w	(a0)+,(a6)
000004A8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004AC 7000                       		moveq	#0,d0		; clear	d0
000004AE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004BA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C4 7212                       		moveq	#$12,d1		; number of characters
000004C6                            
000004C6                            Error_LoopChars:
000004C6 7000                       		moveq	#0,d0
000004C8 1018                       		move.b	(a0)+,d0
000004CA 0640 0790                  		addi.w	#$790,d0
000004CE 3C80                       		move.w	d0,(a6)
000004D0 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D4 4E75                       		rts	
000004D6                            ; End of function ShowErrorMsg
000004D6                            
000004D6                            ; ===========================================================================
000004D6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004DA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004EA 0000                       		dc.w asc_5A6-ErrorText
000004EC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FF 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000512 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000525 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000538 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000054B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000571 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000584 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000597 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005AA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BE 00                         		even
000005BE                            
000005BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BE                            
000005BE                            
000005BE                            sub_5BA:				; XREF: loc_43A; loc_462
000005BE 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C2 7407                       		moveq	#7,d2
000005C4                            
000005C4                            loc_5C0:
000005C4 E998                       		rol.l	#4,d0
000005C6 6100                       		bsr.s	sub_5CA
000005C8 51CA FFFA                  		dbf	d2,loc_5C0
000005CC 4E75                       		rts	
000005CE                            ; End of function sub_5BA
000005CE                            
000005CE                            
000005CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CE                            
000005CE                            
000005CE                            sub_5CA:				; XREF: sub_5BA
000005CE 3200                       		move.w	d0,d1
000005D0 0241 000F                  		andi.w	#$F,d1
000005D4 0C41 000A                  		cmpi.w	#$A,d1
000005D8 6500                       		bcs.s	loc_5D8
000005DA 5E41                       		addq.w	#7,d1
000005DC                            
000005DC                            loc_5D8:
000005DC 0641 07C0                  		addi.w	#$7C0,d1
000005E0 3C81                       		move.w	d1,(a6)
000005E2 4E75                       		rts	
000005E4                            ; End of function sub_5CA
000005E4                            
000005E4                            
000005E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E4                            
000005E4                            
000005E4                            ErrorWaitForC:				; XREF: loc_478
000005E4 6100 0000                  		bsr.w	ReadJoypads
000005E8 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EE 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F2 4E75                       		rts	
000005F4                            ; End of function ErrorWaitForC
000005F4                            
000005F4                            ; ===========================================================================
000005F4                            
000005F4                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D34                            Art_Text_end:		even
00000D34                            
00000D34                            ; ===========================================================================
00000D34                            ;VBlank
00000D34                            loc_B10:				; XREF: Vectors
00000D34 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D38 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D3C 6700                       		beq.s	loc_B88
00000D3E 3039 00C0 0004             		move.w	($C00004).l,d0
00000D44 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D56 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D5C 6700                       		beq.s	loc_B42
00000D5E 303C 0700                  		move.w	#$700,d0
00000D62                            
00000D62                            loc_B3E:
00000D62 51C8 FFFE                  		dbf	d0,loc_B3E
00000D66                            
00000D66                            loc_B42:
00000D66 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D6A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D70 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D76 0240 003E                  		andi.w	#$3E,d0
00000D7A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D82                            
00000D82                            loc_B5E:				; XREF: loc_B88
00000D82 4EB9 0000 0000             		jsr	sub_71B4C
00000D88                            
00000D88                            loc_B64:				; XREF: loc_D50
00000D88 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D8C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D90 4E73                       		rte	
00000D92                            ; ===========================================================================
00000D92 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D96 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D9A 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9E 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DAA 0000                       		dc.w loc_E72-off_B6E
00000DAC                            ; ===========================================================================
00000DAC                            
00000DAC                            loc_B88:				; XREF: loc_B10; off_B6E
00000DAC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DB2 6700                       		beq.s	loc_B9A
00000DB4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DBA 6600 FFC6                  		bne.w	loc_B5E
00000DBE                            
00000DBE                            loc_B9A:
00000DBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC8 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD4 6700                       		beq.s	loc_BBA
00000DD6 303C 0700                  		move.w	#$700,d0
00000DDA                            
00000DDA                            loc_BB6:
00000DDA 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDE                            
00000DDE                            loc_BBA:
00000DDE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DEC                            
00000DEC                            loc_BC8:
00000DEC 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF4 66F6                       		bne.s	loc_BC8
00000DF6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DFA 6600                       		bne.s	loc_BFE
00000DFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E02 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E08 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0E 3ABC 977F                  		move.w	#$977F,(a5)
00000E12 3ABC C000                  		move.w	#$C000,(a5)
00000E16 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E20 6000                       		bra.s	loc_C22
00000E22                            ; ===========================================================================
00000E22                            
00000E22                            loc_BFE:				; XREF: loc_BC8
00000E22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E28 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E34 3ABC 977F                  		move.w	#$977F,(a5)
00000E38 3ABC C000                  		move.w	#$C000,(a5)
00000E3C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E46                            
00000E46                            loc_C22:				; XREF: loc_BC8
00000E46 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E52 6000 FF2E                  		bra.w	loc_B5E
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C32:				; XREF: off_B6E
00000E56 6100 0000                  		bsr.w	sub_106E
00000E5A                            
00000E5A                            loc_C36:				; XREF: off_B6E
00000E5A 4A78 F614                  		tst.w	($FFFFF614).w
00000E5E 6700 0000                  		beq.w	locret_C42
00000E62 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E66                            
00000E66                            locret_C42:
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C44:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C 6100 0000                  		bsr.w	sub_6886
00000E70 6100 0000                  		bsr.w	sub_1642
00000E74 4A78 F614                  		tst.w	($FFFFF614).w
00000E78 6700 0000                  		beq.w	locret_C5C
00000E7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E80                            
00000E80                            locret_C5C:
00000E80 4E75                       		rts	
00000E82                            ; ===========================================================================
00000E82                            
00000E82                            loc_C5E:				; XREF: off_B6E
00000E82 6100 0000                  		bsr.w	sub_106E
00000E86 4E75                       		rts	
00000E88                            ; ===========================================================================
00000E88                            
00000E88                            loc_C64:				; XREF: off_B6E
00000E88 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8E 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E92                            
00000E92                            loc_C6E:				; XREF: off_B6E
00000E92 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E9A                            
00000E9A                            loc_C76:
00000E9A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EA2 66F6                       		bne.s	loc_C76		; if not, branch
00000EA4 6100 0000                  		bsr.w	ReadJoypads
00000EA8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EAC 6600                       		bne.s	loc_CB0
00000EAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EC0 3ABC 977F                  		move.w	#$977F,(a5)
00000EC4 3ABC C000                  		move.w	#$C000,(a5)
00000EC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED2 6000                       		bra.s	loc_CD4
00000ED4                            ; ===========================================================================
00000ED4                            
00000ED4                            loc_CB0:				; XREF: loc_C76
00000ED4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EE0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE6 3ABC 977F                  		move.w	#$977F,(a5)
00000EEA 3ABC C000                  		move.w	#$C000,(a5)
00000EEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF8                            
00000EF8                            loc_CD4:				; XREF: loc_C76
00000EF8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F02 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F08 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0E 3ABC 977F                  		move.w	#$977F,(a5)
00000F12 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F26 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F2C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F32 3ABC 977F                  		move.w	#$977F,(a5)
00000F36 3ABC 7800                  		move.w	#$7800,(a5)
00000F3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F44 4A38 F767                  		tst.b	($FFFFF767).w
00000F48 6700                       		beq.s	loc_D50
00000F4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F50 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F56 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F5C 3ABC 977F                  		move.w	#$977F,(a5)
00000F60 3ABC 7000                  		move.w	#$7000,(a5)
00000F64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F74                            
00000F74                            loc_D50:
00000F74 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F7C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F82 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F88 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F94 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F9A 6400                       		bcc.s	Demo_Time
00000F9C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA2 588F                       		addq.l	#4,sp
00000FA4 6000 FDE2                  		bra.w	loc_B64
00000FA8                            
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            ; Subroutine to	run a demo for an amount of time
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            
00000FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA8                            
00000FA8                            
00000FA8                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FAC 4EB9 0000 0000             		jsr	AniArt_Load
00000FB2 4EB9 0000 0000             		jsr	HudUpdate
00000FB8 6100 0000                  		bsr.w	sub_165E
00000FBC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC0 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC4 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC8                            
00000FC8                            Demo_TimeEnd:
00000FC8 4E75                       		rts	
00000FCA                            ; End of function Demo_Time
00000FCA                            
00000FCA                            ; ===========================================================================
00000FCA                            
00000FCA                            loc_DA6:				; XREF: off_B6E
00000FCA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD2                            
00000FD2                            loc_DAE:
00000FD2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FDA 66F6                       		bne.s	loc_DAE		; if not, branch
00000FDC 6100 0000                  		bsr.w	ReadJoypads
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC C000                  		move.w	#$C000,(a5)
00000FFA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001010 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7800                  		move.w	#$7800,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001034 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001042 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001054 6100 0000                  		bsr.w	PalCycle_SS
00001058 4A38 F767                  		tst.b	($FFFFF767).w
0000105C 6700                       		beq.s	loc_E64
0000105E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001064 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000106A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001070 3ABC 977F                  		move.w	#$977F,(a5)
00001074 3ABC 7000                  		move.w	#$7000,(a5)
00001078 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001082 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001088                            
00001088                            loc_E64:
00001088 4A78 F614                  		tst.w	($FFFFF614).w
0000108C 6700 0000                  		beq.w	locret_E70
00001090 5378 F614                  		subq.w	#1,($FFFFF614).w
00001094                            
00001094                            locret_E70:
00001094 4E75                       		rts	
00001096                            ; ===========================================================================
00001096                            
00001096                            loc_E72:				; XREF: off_B6E
00001096 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109E                            
0000109E                            loc_E7A:
0000109E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A6 66F6                       		bne.s	loc_E7A		; if not, branch
000010A8 6100 0000                  		bsr.w	ReadJoypads
000010AC 4A38 F64E                  		tst.b	($FFFFF64E).w
000010B0 6600                       		bne.s	loc_EB4
000010B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C4 3ABC 977F                  		move.w	#$977F,(a5)
000010C8 3ABC C000                  		move.w	#$C000,(a5)
000010CC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D6 6000                       		bra.s	loc_ED8
000010D8                            ; ===========================================================================
000010D8                            
000010D8                            loc_EB4:				; XREF: loc_E7A
000010D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010EA 3ABC 977F                  		move.w	#$977F,(a5)
000010EE 3ABC C000                  		move.w	#$C000,(a5)
000010F2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010FC                            
000010FC                            loc_ED8:				; XREF: loc_E7A
000010FC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001100 4BF9 00C0 0004             		lea	($C00004).l,a5
00001106 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000110C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001112                            
00001112                            loc_EEE:
00001112 3ABC 977F                  		move.w	#$977F,(a5)
00001116 3ABC 7C00                  		move.w	#$7C00,(a5)
0000111A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001120 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001124 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001130 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001136 3ABC 977F                  		move.w	#$977F,(a5)
0000113A 3ABC 7800                  		move.w	#$7800,(a5)
0000113E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001144 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001148 4A38 F767                  		tst.b	($FFFFF767).w
0000114C 6700                       		beq.s	loc_F54
0000114E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001154 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000115A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001160 3ABC 977F                  		move.w	#$977F,(a5)
00001164 3ABC 7000                  		move.w	#$7000,(a5)
00001168 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001172 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001178                            
00001178                            loc_F54:
00001178 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001180 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001186 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000118C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001192 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001198 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000119C 4EB9 0000 0000             		jsr	AniArt_Load
000011A2 4EB9 0000 0000             		jsr	HudUpdate
000011A8 6100 0000                  		bsr.w	sub_1642
000011AC 4E75                       		rts	
000011AE                            ; ===========================================================================
000011AE                            
000011AE                            loc_F8A:				; XREF: off_B6E
000011AE 6100 0000                  		bsr.w	sub_106E
000011B2 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B6 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011BC 4E75                       		rts	
000011BE                            ; ===========================================================================
000011BE                            
000011BE                            loc_F9A:				; XREF: off_B6E
000011BE 6100 0000                  		bsr.w	sub_106E
000011C2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C6 6000 0000                  		bra.w	sub_1642
000011CA                            ; ===========================================================================
000011CA                            
000011CA                            loc_FA6:				; XREF: off_B6E
000011CA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011D2                            
000011D2                            loc_FAE:
000011D2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011DA 66F6                       		bne.s	loc_FAE		; if not, branch
000011DC 6100 0000                  		bsr.w	ReadJoypads
000011E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011EC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011F2 3ABC 977F                  		move.w	#$977F,(a5)
000011F6 3ABC C000                  		move.w	#$C000,(a5)
000011FA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001200 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001204 4BF9 00C0 0004             		lea	($C00004).l,a5
0000120A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001210 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001216 3ABC 977F                  		move.w	#$977F,(a5)
0000121A 3ABC 7800                  		move.w	#$7800,(a5)
0000121E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001224 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001234 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001254 4A38 F767                  		tst.b	($FFFFF767).w
00001258 6700                       		beq.s	loc_1060
0000125A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001260 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001266 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000126C 3ABC 977F                  		move.w	#$977F,(a5)
00001270 3ABC 7000                  		move.w	#$7000,(a5)
00001274 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000127A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001284                            
00001284                            loc_1060:
00001284 4A78 F614                  		tst.w	($FFFFF614).w
00001288 6700 0000                  		beq.w	locret_106C
0000128C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001290                            
00001290                            locret_106C:
00001290 4E75                       		rts	
00001292                            
00001292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001292                            
00001292                            
00001292                            sub_106E:				; XREF: loc_C32; et al
00001292 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000129A                            
0000129A                            loc_1076:
0000129A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012A2 66F6                       		bne.s	loc_1076	; if not, branch
000012A4 6100 0000                  		bsr.w	ReadJoypads
000012A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000012AC 6600                       		bne.s	loc_10B0
000012AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012C0 3ABC 977F                  		move.w	#$977F,(a5)
000012C4 3ABC C000                  		move.w	#$C000,(a5)
000012C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012D2 6000                       		bra.s	loc_10D4
000012D4                            ; ===========================================================================
000012D4                            
000012D4                            loc_10B0:				; XREF: sub_106E
000012D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E6 3ABC 977F                  		move.w	#$977F,(a5)
000012EA 3ABC C000                  		move.w	#$C000,(a5)
000012EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F8                            
000012F8                            loc_10D4:				; XREF: sub_106E
000012F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001304 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000130A 3ABC 977F                  		move.w	#$977F,(a5)
0000130E 3ABC 7800                  		move.w	#$7800,(a5)
00001312 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001318 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000131C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001322 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001328 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132E 3ABC 977F                  		move.w	#$977F,(a5)
00001332 3ABC 7C00                  		move.w	#$7C00,(a5)
00001336 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000133C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001340 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001348 4E75                       		rts	
0000134A                            ; End of function sub_106E
0000134A                            
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            ; Subroutine to	move pallets from the RAM to CRAM
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            
0000134A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134A                            
0000134A                            
0000134A                            PalToCRAM:
0000134A 46FC 2700                  		move	#$2700,sr
0000134E 4A78 F644                  		tst.w	($FFFFF644).w
00001352 6700                       		beq.s	locret_119C
00001354 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000135A 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135E 43F9 00C0 0000             		lea	($C00000).l,a1
00001364 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001368 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001370 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B6 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013BA 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BE 6600                       		bne.s	loc_119E
000013C0                            
000013C0                            locret_119C:
000013C0 4E73                       		rte	
000013C2                            ; ===========================================================================
000013C2                            
000013C2                            loc_119E:				; XREF: PalToCRAM
000013C2 4238 F64F                  		clr.b	($FFFFF64F).w
000013C6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013CA 6100 FBDC                  		bsr.w	Demo_Time
000013CE 4EB9 0000 0000             		jsr	sub_71B4C
000013D4 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D8 4E73                       		rte	
000013DA                            ; End of function PalToCRAM
000013DA                            
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            ; Subroutine to	initialise joypads
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            
000013DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013DA                            
000013DA                            
000013DA                            JoypadInit:				; XREF: GameClrRAM
000013DA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013E2                            
000013E2                            Joypad_WaitZ80:
000013E2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013EA 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013EC 7040                       		moveq	#$40,d0
000013EE 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F4 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013FA 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001400 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001408 4E75                       		rts	
0000140A                            ; End of function JoypadInit
0000140A                            
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            ; Subroutine to	read joypad input, and send it to the RAM
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            
0000140A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140A                            
0000140A                            
0000140A                            ReadJoypads:
0000140A 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140E 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001414 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001416 5449                       		addq.w	#2,a1		; do the second	joypad
00001418                            
00001418                            Joypad_Read:
00001418 12BC 0000                  		move.b	#0,(a1)
0000141C 4E71                       		nop	
0000141E 4E71                       		nop	
00001420 1011                       		move.b	(a1),d0
00001422 E508                       		lsl.b	#2,d0
00001424 0200 00C0                  		andi.b	#$C0,d0
00001428 12BC 0040                  		move.b	#$40,(a1)
0000142C 4E71                       		nop	
0000142E 4E71                       		nop	
00001430 1211                       		move.b	(a1),d1
00001432 0201 003F                  		andi.b	#$3F,d1
00001436 8001                       		or.b	d1,d0
00001438 4600                       		not.b	d0
0000143A 1210                       		move.b	(a0),d1
0000143C B101                       		eor.b	d0,d1
0000143E 10C0                       		move.b	d0,(a0)+
00001440 C200                       		and.b	d0,d1
00001442 10C1                       		move.b	d1,(a0)+
00001444 4E75                       		rts	
00001446                            ; End of function ReadJoypads
00001446                            
00001446                            
00001446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001446                            
00001446                            
00001446                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001446 41F9 00C0 0004             		lea	($C00004).l,a0
0000144C 43F9 00C0 0000             		lea	($C00000).l,a1
00001452 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001458 7E12                       		moveq	#$12,d7
0000145A                            
0000145A                            VDP_Loop:
0000145A 309A                       		move.w	(a2)+,(a0)
0000145C 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001460                            
00001460 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001466 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000146A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001470 7000                       		moveq	#0,d0
00001472 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000147C 3E3C 003F                  		move.w	#$3F,d7
00001480                            
00001480                            VDP_ClrCRAM:
00001480 3280                       		move.w	d0,(a1)
00001482 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001486                            
00001486 42B8 F616                  		clr.l	($FFFFF616).w
0000148A 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148E 2F01                       		move.l	d1,-(sp)
00001490 4BF9 00C0 0004             		lea	($C00004).l,a5
00001496 3ABC 8F01                  		move.w	#$8F01,(a5)
0000149A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014A0 3ABC 9780                  		move.w	#$9780,(a5)
000014A4 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014AA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014B2                            
000014B2                            loc_128E:
000014B2 3215                       		move.w	(a5),d1
000014B4 0801 0001                  		btst	#1,d1
000014B8 66F8                       		bne.s	loc_128E
000014BA                            
000014BA 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BE 221F                       		move.l	(sp)+,d1
000014C0 4E75                       		rts	
000014C2                            ; End of function VDPSetupGame
000014C2                            
000014C2                            ; ===========================================================================
000014C2 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014CA 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014D2 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014DA 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014E2 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E8                            
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            ; Subroutine to	clear the screen
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            
000014E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E8                            
000014E8                            
000014E8                            ClearScreen:
000014E8 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EE 3ABC 8F01                  		move.w	#$8F01,(a5)
000014F2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F8 3ABC 9780                  		move.w	#$9780,(a5)
000014FC 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001502 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000150A                            
0000150A                            loc_12E6:
0000150A 3215                       		move.w	(a5),d1
0000150C 0801 0001                  		btst	#1,d1
00001510 66F8                       		bne.s	loc_12E6
00001512                            
00001512 3ABC 8F02                  		move.w	#$8F02,(a5)
00001516 4BF9 00C0 0004             		lea	($C00004).l,a5
0000151C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001520 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001526 3ABC 9780                  		move.w	#$9780,(a5)
0000152A 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001530 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001538                            
00001538                            loc_1314:
00001538 3215                       		move.w	(a5),d1
0000153A 0801 0001                  		btst	#1,d1
0000153E 66F8                       		bne.s	loc_1314
00001540                            
00001540 3ABC 8F02                  		move.w	#$8F02,(a5)
00001544 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000154C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001554 43F8 F800                  		lea	($FFFFF800).w,a1
00001558 7000                       		moveq	#0,d0
0000155A 323C 009F                  		move.w	#$9F,d1
0000155E                            
0000155E                            loc_133A:
0000155E 22C0                       		move.l	d0,(a1)+
00001560 51C9 FFFC                  		dbf	d1,loc_133A
00001564                            
00001564 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001568 7000                       		moveq	#0,d0
0000156A 323C 00FF                  		move.w	#$FF,d1
0000156E                            
0000156E                            loc_134A:
0000156E 22C0                       		move.l	d0,(a1)+
00001570 51C9 FFFC                  		dbf	d1,loc_134A
00001574 4E75                       		rts	
00001576                            ; End of function ClearScreen
00001576                            
00001576                            ; ---------------------------------------------------------------------------
00001576                            ; Subroutine to	load the sound driver
00001576                            ; ---------------------------------------------------------------------------
00001576                            
00001576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001576                            
00001576                            
00001576                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001576 4E71                       		nop	
00001578 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001580 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001588 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158E 43F9 00A0 0000             		lea	($A00000).l,a1
00001594 6100 0000                  		bsr.w	KosDec		; decompress
00001598 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 4E71                       		nop	
000015A6 4E71                       		nop	
000015A8 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015B0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B8 4E75                       		rts	
000015BA                            ; End of function SoundDriverLoad
000015BA                            
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            ; Subroutine to	play a sound or	music track
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            
000015BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BA                            
000015BA                            
000015BA                            PlaySound:
000015BA 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BE 4E75                       		rts	
000015C0                            ; End of function PlaySound
000015C0                            
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            ; Subroutine to	play a special sound/music (E0-E4)
000015C0                            ;
000015C0                            ; E0 - Fade out
000015C0                            ; E1 - Sega
000015C0                            ; E2 - Speed up
000015C0                            ; E3 - Normal speed
000015C0                            ; E4 - Stop
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            
000015C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C0                            
000015C0                            
000015C0                            PlaySound_Special:
000015C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C4 4E75                       		rts	
000015C6                            ; End of function PlaySound_Special
000015C6                            
000015C6                            ; ===========================================================================
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            ; Unused sound/music subroutine
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            
000015C6                            PlaySound_Unk:
000015C6 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015CA 4E75                       		rts	
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	pause the game
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PauseGame:				; XREF: Level_MainLoop; et al
000015CC 4E71                       		nop	
000015CE 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015D2 6700                       		beq.s	Unpause		; if not, branch
000015D4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D8 6600                       		bne.s	loc_13BE	; if yes, branch
000015DA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015E0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015E2                            
000015E2                            loc_13BE:
000015E2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E8 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EE                            
000015EE                            loc_13CA:
000015EE 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F4 6100 0000                  		bsr.w	DelayProgram
000015F8 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015FC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001604 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001606 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000160C 4E71                       		nop	
0000160E 6000                       		bra.s	loc_1404
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_ChkBC:				; XREF: PauseGame
00001610 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001616 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001618 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161E 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001620                            
00001620                            Pause_ChkStart:				; XREF: PauseGame
00001620 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001626 67C6                       		beq.s	loc_13CA	; if not, branch
00001628                            
00001628                            loc_1404:				; XREF: PauseGame
00001628 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162E                            
0000162E                            Unpause:				; XREF: PauseGame
0000162E 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001634                            
00001634                            Pause_DoNothing:			; XREF: PauseGame
00001634 4E75                       		rts	
00001636                            ; ===========================================================================
00001636                            
00001636                            Pause_SlowMo:				; XREF: PauseGame
00001636 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000163C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001642 4E75                       		rts	
00001644                            ; End of function PauseGame
00001644                            
00001644                            ; ---------------------------------------------------------------------------
00001644                            ; Subroutine to	display	patterns via the VDP
00001644                            ; ---------------------------------------------------------------------------
00001644                            
00001644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001644                            
00001644                            
00001644                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000164A 283C 0080 0000             		move.l	#$800000,d4
00001650                            
00001650                            loc_142C:
00001650 2D40 0004                  		move.l	d0,4(a6)
00001654 3601                       		move.w	d1,d3
00001656                            
00001656                            loc_1432:
00001656 3C99                       		move.w	(a1)+,(a6)
00001658 51CB FFFC                  		dbf	d3,loc_1432
0000165C D084                       		add.l	d4,d0
0000165E 51CA FFF0                  		dbf	d2,loc_142C
00001662 4E75                       		rts	
00001664                            ; End of function ShowVDPGraphics
00001664                            
00001664                            ; ---------------------------------------------------------------------------
00001664                            ; Nemesis decompression	algorithm
00001664                            ; ---------------------------------------------------------------------------
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            NemDec:
00001664 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001668 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166E 49F9 00C0 0000             		lea	($C00000).l,a4
00001674 6000                       		bra.s	loc_145C
00001676                            ; ===========================================================================
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1518).l,a3
00001680                            
00001680                            loc_145C:				; XREF: NemDec
00001680 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001684 3418                       		move.w	(a0)+,d2
00001686 E34A                       		lsl.w	#1,d2
00001688 6400                       		bcc.s	loc_146A
0000168A D6FC 000A                  		adda.w	#$A,a3
0000168E                            
0000168E                            loc_146A:
0000168E E54A                       		lsl.w	#2,d2
00001690 3A42                       		movea.w	d2,a5
00001692 7608                       		moveq	#8,d3
00001694 7400                       		moveq	#0,d2
00001696 7800                       		moveq	#0,d4
00001698 6100 0000                  		bsr.w	NemDec4
0000169C 1A18                       		move.b	(a0)+,d5
0000169E E145                       		asl.w	#8,d5
000016A0 1A18                       		move.b	(a0)+,d5
000016A2 3C3C 0010                  		move.w	#$10,d6
000016A6 6100                       		bsr.s	NemDec2
000016A8 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016AC 4E75                       		rts	
000016AE                            ; End of function NemDec
000016AE                            
000016AE                            
000016AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AE                            
000016AE                            
000016AE                            NemDec2:				; XREF: NemDec
000016AE 3E06                       		move.w	d6,d7
000016B0 5147                       		subq.w	#8,d7
000016B2 3205                       		move.w	d5,d1
000016B4 EE69                       		lsr.w	d7,d1
000016B6 0C01 00FC                  		cmpi.b	#-4,d1
000016BA 6400                       		bcc.s	loc_14D6
000016BC 0241 00FF                  		andi.w	#$FF,d1
000016C0 D241                       		add.w	d1,d1
000016C2 1031 1000                  		move.b	(a1,d1.w),d0
000016C6 4880                       		ext.w	d0
000016C8 9C40                       		sub.w	d0,d6
000016CA 0C46 0009                  		cmpi.w	#9,d6
000016CE 6400                       		bcc.s	loc_14B2
000016D0 5046                       		addq.w	#8,d6
000016D2 E145                       		asl.w	#8,d5
000016D4 1A18                       		move.b	(a0)+,d5
000016D6                            
000016D6                            loc_14B2:
000016D6 1231 1001                  		move.b	1(a1,d1.w),d1
000016DA 3001                       		move.w	d1,d0
000016DC 0241 000F                  		andi.w	#$F,d1
000016E0 0240 00F0                  		andi.w	#$F0,d0
000016E4                            
000016E4                            loc_14C0:				; XREF: NemDec3
000016E4 E848                       		lsr.w	#4,d0
000016E6                            
000016E6                            loc_14C2:				; XREF: NemDec3
000016E6 E98C                       		lsl.l	#4,d4
000016E8 8801                       		or.b	d1,d4
000016EA 5343                       		subq.w	#1,d3
000016EC 6600                       		bne.s	loc_14D0
000016EE 4ED3                       		jmp	(a3)
000016F0                            ; End of function NemDec2
000016F0                            
000016F0                            
000016F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F0                            
000016F0                            
000016F0                            NemDec3:				; XREF: loc_1502
000016F0 7800                       		moveq	#0,d4
000016F2 7608                       		moveq	#8,d3
000016F4                            
000016F4                            loc_14D0:				; XREF: NemDec2
000016F4 51C8 FFF0                  		dbf	d0,loc_14C2
000016F8 60B4                       		bra.s	NemDec2
000016FA                            ; ===========================================================================
000016FA                            
000016FA                            loc_14D6:				; XREF: NemDec2
000016FA 5D46                       		subq.w	#6,d6
000016FC 0C46 0009                  		cmpi.w	#9,d6
00001700 6400                       		bcc.s	loc_14E4
00001702 5046                       		addq.w	#8,d6
00001704 E145                       		asl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708                            
00001708                            loc_14E4:				; XREF: NemDec3
00001708 5F46                       		subq.w	#7,d6
0000170A 3205                       		move.w	d5,d1
0000170C EC69                       		lsr.w	d6,d1
0000170E 3001                       		move.w	d1,d0
00001710 0241 000F                  		andi.w	#$F,d1
00001714 0240 0070                  		andi.w	#$70,d0
00001718 0C46 0009                  		cmpi.w	#9,d6
0000171C 64C6                       		bcc.s	loc_14C0
0000171E 5046                       		addq.w	#8,d6
00001720 E145                       		asl.w	#8,d5
00001722 1A18                       		move.b	(a0)+,d5
00001724 60BE                       		bra.s	loc_14C0
00001726                            ; End of function NemDec3
00001726                            
00001726                            ; ===========================================================================
00001726                            
00001726                            loc_1502:				; XREF: NemDec
00001726 2884                       		move.l	d4,(a4)
00001728 534D                       		subq.w	#1,a5
0000172A 380D                       		move.w	a5,d4
0000172C 66C2                       		bne.s	NemDec3
0000172E 4E75                       		rts	
00001730                            ; ===========================================================================
00001730 B982                       		eor.l	d4,d2
00001732 2882                       		move.l	d2,(a4)
00001734 534D                       		subq.w	#1,a5
00001736 380D                       		move.w	a5,d4
00001738 66B6                       		bne.s	NemDec3
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            
0000173C                            loc_1518:				; XREF: NemDec
0000173C 28C4                       		move.l	d4,(a4)+
0000173E 534D                       		subq.w	#1,a5
00001740 380D                       		move.w	a5,d4
00001742 66AC                       		bne.s	NemDec3
00001744 4E75                       		rts	
00001746                            ; ===========================================================================
00001746 B982                       		eor.l	d4,d2
00001748 28C2                       		move.l	d2,(a4)+
0000174A 534D                       		subq.w	#1,a5
0000174C 380D                       		move.w	a5,d4
0000174E 66A0                       		bne.s	NemDec3
00001750 4E75                       		rts	
00001752                            
00001752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001752                            
00001752                            
00001752                            NemDec4:				; XREF: NemDec
00001752 1018                       		move.b	(a0)+,d0
00001754                            
00001754                            loc_1530:
00001754 0C00 00FF                  		cmpi.b	#-1,d0
00001758 6600                       		bne.s	loc_1538
0000175A 4E75                       		rts	
0000175C                            ; ===========================================================================
0000175C                            
0000175C                            loc_1538:				; XREF: NemDec4
0000175C 3E00                       		move.w	d0,d7
0000175E                            
0000175E                            loc_153A:
0000175E 1018                       		move.b	(a0)+,d0
00001760 0C00 0080                  		cmpi.b	#$80,d0
00001764 64EE                       		bcc.s	loc_1530
00001766 1200                       		move.b	d0,d1
00001768 0247 000F                  		andi.w	#$F,d7
0000176C 0241 0070                  		andi.w	#$70,d1
00001770 8E41                       		or.w	d1,d7
00001772 0240 000F                  		andi.w	#$F,d0
00001776 1200                       		move.b	d0,d1
00001778 E149                       		lsl.w	#8,d1
0000177A 8E41                       		or.w	d1,d7
0000177C 7208                       		moveq	#8,d1
0000177E 9240                       		sub.w	d0,d1
00001780 6600                       		bne.s	loc_1568
00001782 1018                       		move.b	(a0)+,d0
00001784 D040                       		add.w	d0,d0
00001786 3387 0000                  		move.w	d7,(a1,d0.w)
0000178A 60D2                       		bra.s	loc_153A
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1568:				; XREF: NemDec4
0000178C 1018                       		move.b	(a0)+,d0
0000178E E368                       		lsl.w	d1,d0
00001790 D040                       		add.w	d0,d0
00001792 7A01                       		moveq	#1,d5
00001794 E36D                       		lsl.w	d1,d5
00001796 5345                       		subq.w	#1,d5
00001798                            
00001798                            loc_1574:
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 5440                       		addq.w	#2,d0
0000179E 51CD FFF8                  		dbf	d5,loc_1574
000017A2 60BA                       		bra.s	loc_153A
000017A4                            ; End of function NemDec4
000017A4                            
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            ; Subroutine to	load pattern load cues
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            
000017A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A4                            
000017A4                            
000017A4                            LoadPLC:
000017A4 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AE D040                       		add.w	d0,d0
000017B0 3031 0000                  		move.w	(a1,d0.w),d0
000017B4 43F1 0000                  		lea	(a1,d0.w),a1
000017B8 45F8 F680                  		lea	($FFFFF680).w,a2
000017BC                            
000017BC                            loc_1598:
000017BC 4A92                       		tst.l	(a2)
000017BE 6700                       		beq.s	loc_15A0
000017C0 5C4A                       		addq.w	#6,a2
000017C2 60F8                       		bra.s	loc_1598
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_15A0:				; XREF: LoadPLC
000017C4 3019                       		move.w	(a1)+,d0
000017C6 6B00                       		bmi.s	loc_15AC
000017C8                            
000017C8                            loc_15A4:
000017C8 24D9                       		move.l	(a1)+,(a2)+
000017CA 34D9                       		move.w	(a1)+,(a2)+
000017CC 51C8 FFFA                  		dbf	d0,loc_15A4
000017D0                            
000017D0                            loc_15AC:
000017D0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D4 4E75                       		rts	
000017D6                            ; End of function LoadPLC
000017D6                            
000017D6                            
000017D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D6                            
000017D6                            
000017D6                            LoadPLC2:
000017D6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017DA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017E0 D040                       		add.w	d0,d0
000017E2 3031 0000                  		move.w	(a1,d0.w),d0
000017E6 43F1 0000                  		lea	(a1,d0.w),a1
000017EA 6100                       		bsr.s	ClearPLC
000017EC 45F8 F680                  		lea	($FFFFF680).w,a2
000017F0 3019                       		move.w	(a1)+,d0
000017F2 6B00                       		bmi.s	loc_15D8
000017F4                            
000017F4                            loc_15D0:
000017F4 24D9                       		move.l	(a1)+,(a2)+
000017F6 34D9                       		move.w	(a1)+,(a2)+
000017F8 51C8 FFFA                  		dbf	d0,loc_15D0
000017FC                            
000017FC                            loc_15D8:
000017FC 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001800 4E75                       		rts	
00001802                            ; End of function LoadPLC2
00001802                            
00001802                            ; ---------------------------------------------------------------------------
00001802                            ; Subroutine to	clear the pattern load cues
00001802                            ; ---------------------------------------------------------------------------
00001802                            
00001802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001802                            
00001802                            
00001802                            ClearPLC:				; XREF: LoadPLC2
00001802 45F8 F680                  		lea	($FFFFF680).w,a2
00001806 701F                       		moveq	#$1F,d0
00001808                            
00001808                            ClearPLC_Loop:
00001808 429A                       		clr.l	(a2)+
0000180A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180E 4E75                       		rts	
00001810                            ; End of function ClearPLC
00001810                            
00001810                            ; ---------------------------------------------------------------------------
00001810                            ; Subroutine to	use graphics listed in a pattern load cue
00001810                            ; ---------------------------------------------------------------------------
00001810                            
00001810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001810                            
00001810                            
00001810                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001810 4AB8 F680                  		tst.l	($FFFFF680).w
00001814 6700                       		beq.s	locret_1640
00001816 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000181A 6600                       		bne.s	locret_1640
0000181C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001820 47F9 0000 1726             		lea	(loc_1502).l,a3
00001826 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000182A 3418                       		move.w	(a0)+,d2
0000182C 6A00                       		bpl.s	loc_160E
0000182E D6FC 000A                  		adda.w	#$A,a3
00001832                            
00001832                            loc_160E:
00001832 0242 7FFF                  		andi.w	#$7FFF,d2
00001836 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000183A 6100 FF16                  		bsr.w	NemDec4
0000183E 1A18                       		move.b	(a0)+,d5
00001840 E145                       		asl.w	#8,d5
00001842 1A18                       		move.b	(a0)+,d5
00001844 7C10                       		moveq	#$10,d6
00001846 7000                       		moveq	#0,d0
00001848 21C8 F680                  		move.l	a0,($FFFFF680).w
0000184C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001850 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001854 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001858 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000185C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001860 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001864                            
00001864                            locret_1640:
00001864 4E75                       		rts	
00001866                            ; End of function RunPLC_RAM
00001866                            
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001866 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000186A 6700 0000                  		beq.w	locret_16DA
0000186E 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001874 7000                       		moveq	#0,d0
00001876 3038 F684                  		move.w	($FFFFF684).w,d0
0000187A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001880 6000                       		bra.s	loc_1676
00001882                            ; End of function sub_1642
00001882                            
00001882                            
00001882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001882                            
00001882                            
00001882                            sub_165E:				; XREF: Demo_Time
00001882 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001886 6700                       		beq.s	locret_16DA
00001888 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188E 7000                       		moveq	#0,d0
00001890 3038 F684                  		move.w	($FFFFF684).w,d0
00001894 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000189A                            
0000189A                            loc_1676:				; XREF: sub_1642
0000189A 49F9 00C0 0004             		lea	($C00004).l,a4
000018A0 E588                       		lsl.l	#2,d0
000018A2 E448                       		lsr.w	#2,d0
000018A4 0040 4000                  		ori.w	#$4000,d0
000018A8 4840                       		swap	d0
000018AA 2880                       		move.l	d0,(a4)
000018AC 594C                       		subq.w	#4,a4
000018AE 2078 F680                  		movea.l	($FFFFF680).w,a0
000018B2 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B6 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018BA 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BE 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018C2 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C6 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018CA 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CE                            
000018CE                            loc_16AA:				; XREF: sub_165E
000018CE 3A7C 0008                  		movea.w	#8,a5
000018D2 6100 FE1C                  		bsr.w	NemDec3
000018D6 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018DA 6700                       		beq.s	loc_16DC
000018DC 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018E0 66EC                       		bne.s	loc_16AA
000018E2 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018EA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EE 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018F2 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018FA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FE                            
000018FE                            locret_16DA:				; XREF: sub_1642
000018FE 4E75                       		rts	
00001900                            ; ===========================================================================
00001900                            
00001900                            loc_16DC:				; XREF: sub_165E
00001900 41F8 F680                  		lea	($FFFFF680).w,a0
00001904 7015                       		moveq	#$15,d0
00001906                            
00001906                            loc_16E2:				; XREF: sub_165E
00001906 20E8 0006                  		move.l	6(a0),(a0)+
0000190A 51C8 FFFA                  		dbf	d0,loc_16E2
0000190E 4E75                       		rts	
00001910                            ; End of function sub_165E
00001910                            
00001910                            ; ---------------------------------------------------------------------------
00001910                            ; Subroutine to	execute	the pattern load cue
00001910                            ; ---------------------------------------------------------------------------
00001910                            
00001910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001910                            
00001910                            
00001910                            RunPLC_ROM:
00001910 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001916 D040                       		add.w	d0,d0
00001918 3031 0000                  		move.w	(a1,d0.w),d0
0000191C 43F1 0000                  		lea	(a1,d0.w),a1
00001920 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001922                            
00001922                            RunPLC_Loop:
00001922 2059                       		movea.l	(a1)+,a0	; get art pointer
00001924 7000                       		moveq	#0,d0
00001926 3019                       		move.w	(a1)+,d0	; get VRAM address
00001928 E588                       		lsl.l	#2,d0		; divide address by $20
0000192A E448                       		lsr.w	#2,d0
0000192C 0040 4000                  		ori.w	#$4000,d0
00001930 4840                       		swap	d0
00001932 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001938 6100 FD2A                  		bsr.w	NemDec		; decompress
0000193C 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001940 4E75                       		rts	
00001942                            ; End of function RunPLC_ROM
00001942                            
00001942                            ; ---------------------------------------------------------------------------
00001942                            ; Enigma decompression algorithm
00001942                            ; ---------------------------------------------------------------------------
00001942                            
00001942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001942                            
00001942                            
00001942                            EniDec:
00001942 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001946 3640                       		movea.w	d0,a3
00001948 1018                       		move.b	(a0)+,d0
0000194A 4880                       		ext.w	d0
0000194C 3A40                       		movea.w	d0,a5
0000194E 1818                       		move.b	(a0)+,d4
00001950 E70C                       		lsl.b	#3,d4
00001952 3458                       		movea.w	(a0)+,a2
00001954 D4CB                       		adda.w	a3,a2
00001956 3858                       		movea.w	(a0)+,a4
00001958 D8CB                       		adda.w	a3,a4
0000195A 1A18                       		move.b	(a0)+,d5
0000195C E145                       		asl.w	#8,d5
0000195E 1A18                       		move.b	(a0)+,d5
00001960 7C10                       		moveq	#$10,d6
00001962                            
00001962                            loc_173E:				; XREF: loc_1768
00001962 7007                       		moveq	#7,d0
00001964 3E06                       		move.w	d6,d7
00001966 9E40                       		sub.w	d0,d7
00001968 3205                       		move.w	d5,d1
0000196A EE69                       		lsr.w	d7,d1
0000196C 0241 007F                  		andi.w	#$7F,d1
00001970 3401                       		move.w	d1,d2
00001972 0C41 0040                  		cmpi.w	#$40,d1
00001976 6400                       		bcc.s	loc_1758
00001978 7006                       		moveq	#6,d0
0000197A E24A                       		lsr.w	#1,d2
0000197C                            
0000197C                            loc_1758:
0000197C 6100 0000                  		bsr.w	sub_188C
00001980 0242 000F                  		andi.w	#$F,d2
00001984 E849                       		lsr.w	#4,d1
00001986 D241                       		add.w	d1,d1
00001988 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000198C                            ; End of function EniDec
0000198C                            
0000198C                            ; ===========================================================================
0000198C                            
0000198C                            loc_1768:				; XREF: loc_17B4
0000198C 32CA                       		move.w	a2,(a1)+
0000198E 524A                       		addq.w	#1,a2
00001990 51CA FFFA                  		dbf	d2,loc_1768
00001994 60CC                       		bra.s	loc_173E
00001996                            ; ===========================================================================
00001996                            
00001996                            loc_1772:				; XREF: loc_17B4
00001996 32CC                       		move.w	a4,(a1)+
00001998 51CA FFFC                  		dbf	d2,loc_1772
0000199C 60C4                       		bra.s	loc_173E
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_177A:				; XREF: loc_17B4
0000199E 6100 0000                  		bsr.w	loc_17DC
000019A2                            
000019A2                            loc_177E:
000019A2 32C1                       		move.w	d1,(a1)+
000019A4 51CA FFFC                  		dbf	d2,loc_177E
000019A8 60B8                       		bra.s	loc_173E
000019AA                            ; ===========================================================================
000019AA                            
000019AA                            loc_1786:				; XREF: loc_17B4
000019AA 6100 0000                  		bsr.w	loc_17DC
000019AE                            
000019AE                            loc_178A:
000019AE 32C1                       		move.w	d1,(a1)+
000019B0 5241                       		addq.w	#1,d1
000019B2 51CA FFFA                  		dbf	d2,loc_178A
000019B6 60AA                       		bra.s	loc_173E
000019B8                            ; ===========================================================================
000019B8                            
000019B8                            loc_1794:				; XREF: loc_17B4
000019B8 6100 0000                  		bsr.w	loc_17DC
000019BC                            
000019BC                            loc_1798:
000019BC 32C1                       		move.w	d1,(a1)+
000019BE 5341                       		subq.w	#1,d1
000019C0 51CA FFFA                  		dbf	d2,loc_1798
000019C4 609C                       		bra.s	loc_173E
000019C6                            ; ===========================================================================
000019C6                            
000019C6                            loc_17A2:				; XREF: loc_17B4
000019C6 0C42 000F                  		cmpi.w	#$F,d2
000019CA 6700                       		beq.s	loc_17C4
000019CC                            
000019CC                            loc_17A8:
000019CC 6100 0000                  		bsr.w	loc_17DC
000019D0 32C1                       		move.w	d1,(a1)+
000019D2 51CA FFF8                  		dbf	d2,loc_17A8
000019D6 608A                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17B4:				; XREF: EniDec
000019D8 60B2                       		bra.s	loc_1768
000019DA                            ; ===========================================================================
000019DA 60B0                       		bra.s	loc_1768
000019DC                            ; ===========================================================================
000019DC 60B8                       		bra.s	loc_1772
000019DE                            ; ===========================================================================
000019DE 60B6                       		bra.s	loc_1772
000019E0                            ; ===========================================================================
000019E0 60BC                       		bra.s	loc_177A
000019E2                            ; ===========================================================================
000019E2 60C6                       		bra.s	loc_1786
000019E4                            ; ===========================================================================
000019E4 60D2                       		bra.s	loc_1794
000019E6                            ; ===========================================================================
000019E6 60DE                       		bra.s	loc_17A2
000019E8                            ; ===========================================================================
000019E8                            
000019E8                            loc_17C4:				; XREF: loc_17A2
000019E8 5348                       		subq.w	#1,a0
000019EA 0C46 0010                  		cmpi.w	#$10,d6
000019EE 6600                       		bne.s	loc_17CE
000019F0 5348                       		subq.w	#1,a0
000019F2                            
000019F2                            loc_17CE:
000019F2 3008                       		move.w	a0,d0
000019F4 E248                       		lsr.w	#1,d0
000019F6 6400                       		bcc.s	loc_17D6
000019F8 5248                       		addq.w	#1,a0
000019FA                            
000019FA                            loc_17D6:
000019FA 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FE 4E75                       		rts	
00001A00                            ; ===========================================================================
00001A00                            
00001A00                            loc_17DC:				; XREF: loc_17A2
00001A00 360B                       		move.w	a3,d3
00001A02 1204                       		move.b	d4,d1
00001A04 D201                       		add.b	d1,d1
00001A06 6400                       		bcc.s	loc_17EE
00001A08 5346                       		subq.w	#1,d6
00001A0A 0D05                       		btst	d6,d5
00001A0C 6700                       		beq.s	loc_17EE
00001A0E 0043 8000                  		ori.w	#-$8000,d3
00001A12                            
00001A12                            loc_17EE:
00001A12 D201                       		add.b	d1,d1
00001A14 6400                       		bcc.s	loc_17FC
00001A16 5346                       		subq.w	#1,d6
00001A18 0D05                       		btst	d6,d5
00001A1A 6700                       		beq.s	loc_17FC
00001A1C 0643 4000                  		addi.w	#$4000,d3
00001A20                            
00001A20                            loc_17FC:
00001A20 D201                       		add.b	d1,d1
00001A22 6400                       		bcc.s	loc_180A
00001A24 5346                       		subq.w	#1,d6
00001A26 0D05                       		btst	d6,d5
00001A28 6700                       		beq.s	loc_180A
00001A2A 0643 2000                  		addi.w	#$2000,d3
00001A2E                            
00001A2E                            loc_180A:
00001A2E D201                       		add.b	d1,d1
00001A30 6400                       		bcc.s	loc_1818
00001A32 5346                       		subq.w	#1,d6
00001A34 0D05                       		btst	d6,d5
00001A36 6700                       		beq.s	loc_1818
00001A38 0043 1000                  		ori.w	#$1000,d3
00001A3C                            
00001A3C                            loc_1818:
00001A3C D201                       		add.b	d1,d1
00001A3E 6400                       		bcc.s	loc_1826
00001A40 5346                       		subq.w	#1,d6
00001A42 0D05                       		btst	d6,d5
00001A44 6700                       		beq.s	loc_1826
00001A46 0043 0800                  		ori.w	#$800,d3
00001A4A                            
00001A4A                            loc_1826:
00001A4A 3205                       		move.w	d5,d1
00001A4C 3E06                       		move.w	d6,d7
00001A4E 9E4D                       		sub.w	a5,d7
00001A50 6400                       		bcc.s	loc_1856
00001A52 3C07                       		move.w	d7,d6
00001A54 0646 0010                  		addi.w	#$10,d6
00001A58 4447                       		neg.w	d7
00001A5A EF69                       		lsl.w	d7,d1
00001A5C 1A10                       		move.b	(a0),d5
00001A5E EF3D                       		rol.b	d7,d5
00001A60 DE47                       		add.w	d7,d7
00001A62 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A66 D245                       		add.w	d5,d1
00001A68                            
00001A68                            loc_1844:				; XREF: loc_1868
00001A68 300D                       		move.w	a5,d0
00001A6A D040                       		add.w	d0,d0
00001A6C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A70 D243                       		add.w	d3,d1
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 E14D                       		lsl.w	#8,d5
00001A76 1A18                       		move.b	(a0)+,d5
00001A78 4E75                       		rts	
00001A7A                            ; ===========================================================================
00001A7A                            
00001A7A                            loc_1856:				; XREF: loc_1826
00001A7A 6700                       		beq.s	loc_1868
00001A7C EE69                       		lsr.w	d7,d1
00001A7E 300D                       		move.w	a5,d0
00001A80 D040                       		add.w	d0,d0
00001A82 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A86 D243                       		add.w	d3,d1
00001A88 300D                       		move.w	a5,d0
00001A8A 6000                       		bra.s	sub_188C
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1868:				; XREF: loc_1856
00001A8C 7C10                       		moveq	#$10,d6
00001A8E                            
00001A8E                            loc_186A:
00001A8E 60D8                       		bra.s	loc_1844
00001A90                            ; ===========================================================================
00001A90 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA6 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AB0                            
00001AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB0                            
00001AB0                            
00001AB0                            sub_188C:				; XREF: EniDec
00001AB0 9C40                       		sub.w	d0,d6
00001AB2 0C46 0009                  		cmpi.w	#9,d6
00001AB6 6400                       		bcc.s	locret_189A
00001AB8 5046                       		addq.w	#8,d6
00001ABA E145                       		asl.w	#8,d5
00001ABC 1A18                       		move.b	(a0)+,d5
00001ABE                            
00001ABE                            locret_189A:
00001ABE 4E75                       		rts	
00001AC0                            ; End of function sub_188C
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Kosinski decompression algorithm
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            KosDec:
00001AC0                            
00001AC0 =FFFFFFFE                  var_2		= -2
00001AC0 =FFFFFFFF                  var_1		= -1
00001AC0                            
00001AC0 558F                       		subq.l	#2,sp
00001AC2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC6 1E98                       		move.b	(a0)+,(sp)
00001AC8 3A17                       		move.w	(sp),d5
00001ACA 780F                       		moveq	#$F,d4
00001ACC                            
00001ACC                            loc_18A8:
00001ACC E24D                       		lsr.w	#1,d5
00001ACE 40C6                       		move	sr,d6
00001AD0 51CC 0000                  		dbf	d4,loc_18BA
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18BA:
00001ADE 44C6                       		move	d6,ccr
00001AE0 6400                       		bcc.s	loc_18C2
00001AE2 12D8                       		move.b	(a0)+,(a1)+
00001AE4 60E6                       		bra.s	loc_18A8
00001AE6                            ; ===========================================================================
00001AE6                            
00001AE6                            loc_18C2:				; XREF: KosDec
00001AE6 7600                       		moveq	#0,d3
00001AE8 E24D                       		lsr.w	#1,d5
00001AEA 40C6                       		move	sr,d6
00001AEC 51CC 0000                  		dbf	d4,loc_18D6
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18D6:
00001AFA 44C6                       		move	d6,ccr
00001AFC 6500                       		bcs.s	loc_1906
00001AFE E24D                       		lsr.w	#1,d5
00001B00 51CC 0000                  		dbf	d4,loc_18EA
00001B04 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B08 1E98                       		move.b	(a0)+,(sp)
00001B0A 3A17                       		move.w	(sp),d5
00001B0C 780F                       		moveq	#$F,d4
00001B0E                            
00001B0E                            loc_18EA:
00001B0E E353                       		roxl.w	#1,d3
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18FC
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18FC:
00001B20 E353                       		roxl.w	#1,d3
00001B22 5243                       		addq.w	#1,d3
00001B24 74FF                       		moveq	#-1,d2
00001B26 1418                       		move.b	(a0)+,d2
00001B28 6000                       		bra.s	loc_191C
00001B2A                            ; ===========================================================================
00001B2A                            
00001B2A                            loc_1906:				; XREF: loc_18C2
00001B2A 1018                       		move.b	(a0)+,d0
00001B2C 1218                       		move.b	(a0)+,d1
00001B2E 74FF                       		moveq	#-1,d2
00001B30 1401                       		move.b	d1,d2
00001B32 EB4A                       		lsl.w	#5,d2
00001B34 1400                       		move.b	d0,d2
00001B36 0241 0007                  		andi.w	#7,d1
00001B3A 6700                       		beq.s	loc_1928
00001B3C 1601                       		move.b	d1,d3
00001B3E 5243                       		addq.w	#1,d3
00001B40                            
00001B40                            loc_191C:
00001B40 1031 2000                  		move.b	(a1,d2.w),d0
00001B44 12C0                       		move.b	d0,(a1)+
00001B46 51CB FFF8                  		dbf	d3,loc_191C
00001B4A 6080                       		bra.s	loc_18A8
00001B4C                            ; ===========================================================================
00001B4C                            
00001B4C                            loc_1928:				; XREF: loc_1906
00001B4C 1218                       		move.b	(a0)+,d1
00001B4E 6700                       		beq.s	loc_1938
00001B50 0C01 0001                  		cmpi.b	#1,d1
00001B54 6700 FF76                  		beq.w	loc_18A8
00001B58 1601                       		move.b	d1,d3
00001B5A 60E4                       		bra.s	loc_191C
00001B5C                            ; ===========================================================================
00001B5C                            
00001B5C                            loc_1938:				; XREF: loc_1928
00001B5C 548F                       		addq.l	#2,sp
00001B5E 4E75                       		rts	
00001B60                            ; End of function KosDec
00001B60                            
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            ; Pallet cycling routine loading subroutine
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            
00001B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B60                            
00001B60                            
00001B60                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B60 7400                       		moveq	#0,d2
00001B62 7000                       		moveq	#0,d0
00001B64 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B68 D040                       		add.w	d0,d0		; multiply by 2
00001B6A 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6E 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B72                            ; End of function PalCycle_Load
00001B72                            
00001B72                            ; ===========================================================================
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routines
00001B72                            ; ---------------------------------------------------------------------------
00001B72 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B74 0000                       		dc.w PalCycle_LZ-PalCycle
00001B76 0000                       		dc.w PalCycle_MZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B7C 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B80                            
00001B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B80                            
00001B80                            
00001B80                            PalCycle_Title:				; XREF: TitleScreen
00001B80 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B86 6000                       		bra.s	loc_196A
00001B88                            ; ===========================================================================
00001B88                            
00001B88                            PalCycle_GHZ:				; XREF: PalCycle
00001B88 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8E                            
00001B8E                            loc_196A:				; XREF: PalCycle_Title
00001B8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B92 6A00                       		bpl.s	locret_1990
00001B94 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B9A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA2 0240 0003                  		andi.w	#3,d0
00001BA6 E748                       		lsl.w	#3,d0
00001BA8 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BAC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BB0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB4                            
00001BB4                            locret_1990:
00001BB4 4E75                       		rts	
00001BB6                            ; End of function PalCycle_Title
00001BB6                            
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_LZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	loc_19D8
00001BBC 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BCA 0240 0003                  		andi.w	#3,d0
00001BCE E748                       		lsl.w	#3,d0
00001BD0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BDC 6600                       		bne.s	loc_19C0
00001BDE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE4                            
00001BE4                            loc_19C0:
00001BE4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BEC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF0 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BFC                            
00001BFC                            loc_19D8:
00001BFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C00 0240 0007                  		andi.w	#7,d0
00001C04 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C08 6700                       		beq.s	locret_1A3A
00001C0A 7201                       		moveq	#1,d1
00001C0C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C10 6700                       		beq.s	loc_19F0
00001C12 4441                       		neg.w	d1
00001C14                            
00001C14                            loc_19F0:
00001C14 3038 F650                  		move.w	($FFFFF650).w,d0
00001C18 0240 0003                  		andi.w	#3,d0
00001C1C D041                       		add.w	d1,d0
00001C1E 0C40 0003                  		cmpi.w	#3,d0
00001C22 6500                       		bcs.s	loc_1A0A
00001C24 3200                       		move.w	d0,d1
00001C26 7000                       		moveq	#0,d0
00001C28 4A41                       		tst.w	d1
00001C2A 6A00                       		bpl.s	loc_1A0A
00001C2C 7002                       		moveq	#2,d0
00001C2E                            
00001C2E                            loc_1A0A:
00001C2E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C32 D040                       		add.w	d0,d0
00001C34 3200                       		move.w	d0,d1
00001C36 D040                       		add.w	d0,d0
00001C38 D041                       		add.w	d1,d0
00001C3A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C40 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C44 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C48 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C52 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E                            
00001C5E                            locret_1A3A:
00001C5E 4E75                       		rts	
00001C60                            ; End of function PalCycle_LZ
00001C60                            
00001C60                            ; ===========================================================================
00001C60 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C68                            ; ===========================================================================
00001C68                            
00001C68                            PalCycle_MZ:				; XREF: PalCycle
00001C68 4E75                       		rts	
00001C6A                            
00001C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6A                            
00001C6A                            
00001C6A                            PalCycle_SLZ:				; XREF: PalCycle
00001C6A 4E75                       		rts	
00001C6C                            ; End of function PalCycle_SLZ
00001C6C                            
00001C6C                            
00001C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6C                            
00001C6C                            
00001C6C                            PalCycle_SYZ:				; XREF: PalCycle
00001C6C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C70 6A00                       		bpl.s	locret_1AC6
00001C72 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C78 3038 F632                  		move.w	($FFFFF632).w,d0
00001C7C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C80 0240 0003                  		andi.w	#3,d0
00001C84 E548                       		lsl.w	#2,d0
00001C86 3200                       		move.w	d0,d1
00001C88 D040                       		add.w	d0,d0
00001C8A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C90 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C94 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C98 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CA2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CA6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CAA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CB0                            
00001CB0                            locret_1AC6:
00001CB0 4E75                       		rts	
00001CB2                            ; End of function PalCycle_SYZ
00001CB2                            
00001CB2                            
00001CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB2                            
00001CB2                            
00001CB2                            PalCycle_SBZ:				; XREF: PalCycle
00001CB2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CB8 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CBC 6700                       		beq.s	loc_1ADA
00001CBE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CC4                            
00001CC4                            loc_1ADA:
00001CC4 43F8 F650                  		lea	($FFFFF650).w,a1
00001CC8 321A                       		move.w	(a2)+,d1
00001CCA                            
00001CCA                            loc_1AE0:
00001CCA 5311                       		subq.b	#1,(a1)
00001CCC 6B00                       		bmi.s	loc_1AEA
00001CCE 5489                       		addq.l	#2,a1
00001CD0 5C8A                       		addq.l	#6,a2
00001CD2 6000                       		bra.s	loc_1B06
00001CD4                            ; ===========================================================================
00001CD4                            
00001CD4                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CD4 12DA                       		move.b	(a2)+,(a1)+
00001CD6 1011                       		move.b	(a1),d0
00001CD8 5200                       		addq.b	#1,d0
00001CDA B01A                       		cmp.b	(a2)+,d0
00001CDC 6500                       		bcs.s	loc_1AF6
00001CDE 7000                       		moveq	#0,d0
00001CE0                            
00001CE0                            loc_1AF6:
00001CE0 12C0                       		move.b	d0,(a1)+
00001CE2 0240 000F                  		andi.w	#$F,d0
00001CE6 D040                       		add.w	d0,d0
00001CE8 305A                       		movea.w	(a2)+,a0
00001CEA 365A                       		movea.w	(a2)+,a3
00001CEC 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CF0                            
00001CF0                            loc_1B06:				; XREF: PalCycle_SBZ
00001CF0 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CF4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CF8 6A00                       		bpl.s	locret_1B64
00001CFA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D00 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D06 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D0A 6700                       		beq.s	loc_1B2E
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D12 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D18                            
00001D18                            loc_1B2E:
00001D18 72FF                       		moveq	#-1,d1
00001D1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D1E 6700                       		beq.s	loc_1B38
00001D20 4441                       		neg.w	d1
00001D22                            
00001D22                            loc_1B38:
00001D22 3038 F632                  		move.w	($FFFFF632).w,d0
00001D26 0240 0003                  		andi.w	#3,d0
00001D2A D041                       		add.w	d1,d0
00001D2C 0C40 0003                  		cmpi.w	#3,d0
00001D30 6500                       		bcs.s	loc_1B52
00001D32 3200                       		move.w	d0,d1
00001D34 7000                       		moveq	#0,d0
00001D36 4A41                       		tst.w	d1
00001D38 6A00                       		bpl.s	loc_1B52
00001D3A 7002                       		moveq	#2,d0
00001D3C                            
00001D3C                            loc_1B52:
00001D3C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D40 D040                       		add.w	d0,d0
00001D42 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D4A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D4E                            
00001D4E                            locret_1B64:
00001D4E 4E75                       		rts	
00001D50                            ; End of function PalCycle_SBZ
00001D50                            
00001D50                            ; ===========================================================================
00001D50                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D70                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D90                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DB0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DC2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DD4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E3C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E60                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E80                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E90                            
00001E90                            Pal_SBZCycList:
00001E90                            	include "_inc\SBZ pallet script 1.asm"
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            ; Scrap Brain Zone 1 pallet cycling script
00001E90                            ; ---------------------------------------------------------------------------
00001E90 0008                       	dc.w 8			; number of entries - 1
00001E92 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E94 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E96 FB50                       	dc.w $FB50		; RAM address
00001E98 0D08                       	dc.b $D, 8
00001E9A 0000                       	dc.w Pal_SBZCyc2
00001E9C FB52                       	dc.w $FB52
00001E9E 0E08                       	dc.b $E, 8
00001EA0 0000                       	dc.w Pal_SBZCyc3
00001EA2 FB6E                       	dc.w $FB6E
00001EA4 0B08                       	dc.b $B, 8
00001EA6 0000                       	dc.w Pal_SBZCyc5
00001EA8 FB70                       	dc.w $FB70
00001EAA 0708                       	dc.b 7,	8
00001EAC 0000                       	dc.w Pal_SBZCyc6
00001EAE FB72                       	dc.w $FB72
00001EB0 1C10                       	dc.b $1C, $10
00001EB2 0000                       	dc.w Pal_SBZCyc7
00001EB4 FB7E                       	dc.w $FB7E
00001EB6 0303                       	dc.b 3,	3
00001EB8 0000                       	dc.w Pal_SBZCyc8
00001EBA FB78                       	dc.w $FB78
00001EBC 0303                       	dc.b 3,	3
00001EBE 0000                       	dc.w Pal_SBZCyc8+2
00001EC0 FB7A                       	dc.w $FB7A
00001EC2 0303                       	dc.b 3,	3
00001EC4 0000                       	dc.w Pal_SBZCyc8+4
00001EC6 FB7C                       	dc.w $FB7C
00001EC8                            	even
00001EC8                            	even
00001EC8                            
00001EC8                            Pal_SBZCycList2:
00001EC8                            	include "_inc\SBZ pallet script 2.asm"
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8                            ; Scrap Brain Zone 2 pallet cycling script
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8 0006                       	dc.w 6
00001ECA 0708                       	dc.b 7,	8
00001ECC 0000                       	dc.w Pal_SBZCyc1
00001ECE FB50                       	dc.w $FB50
00001ED0 0D08                       	dc.b $D, 8
00001ED2 0000                       	dc.w Pal_SBZCyc2
00001ED4 FB52                       	dc.w $FB52
00001ED6 0908                       	dc.b 9,	8
00001ED8 0000                       	dc.w Pal_SBZCyc9
00001EDA FB70                       	dc.w $FB70
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc6
00001EE0 FB72                       	dc.w $FB72
00001EE2 0303                       	dc.b 3,	3
00001EE4 0000                       	dc.w Pal_SBZCyc8
00001EE6 FB78                       	dc.w $FB78
00001EE8 0303                       	dc.b 3,	3
00001EEA 0000                       	dc.w Pal_SBZCyc8+2
00001EEC FB7A                       	dc.w $FB7A
00001EEE 0303                       	dc.b 3,	3
00001EF0 0000                       	dc.w Pal_SBZCyc8+4
00001EF2 FB7C                       	dc.w $FB7C
00001EF4                            	even
00001EF4                            	even
00001EF4                            
00001EF4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F04                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F14                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F24                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F30                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F40                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F50                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F70                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F7A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F8A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            ; Subroutine to	fade out and fade in
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            
00001F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F96                            
00001F96                            
00001F96                            Pal_FadeTo:
00001F96 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F9C                            
00001F9C                            Pal_FadeTo2:
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 7200                       		moveq	#0,d1
00001FAA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAE                            
00001FAE                            Pal_ToBlack:
00001FAE 30C1                       		move.w	d1,(a0)+
00001FB0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FB4                            
00001FB4 383C 0015                  		move.w	#$15,d4
00001FB8                            
00001FB8                            loc_1DCE:
00001FB8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FBE 6100 0000                  		bsr.w	DelayProgram
00001FC2 6100                       		bsr.s	Pal_FadeIn
00001FC4 6100 F84A                  		bsr.w	RunPLC_RAM
00001FC8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FCC 4E75                       		rts	
00001FCE                            ; End of function Pal_FadeTo
00001FCE                            
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            ; Pallet fade-in subroutine
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            
00001FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCE                            
00001FCE                            
00001FCE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FCE 7000                       		moveq	#0,d0
00001FD0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE D2C0                       		adda.w	d0,a1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            loc_1DFA:
00001FE4 6100                       		bsr.s	Pal_AddColor
00001FE6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FF0 6600                       		bne.s	locret_1E24
00001FF2 7000                       		moveq	#0,d0
00001FF4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FF8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FFC 1038 F626                  		move.b	($FFFFF626).w,d0
00002000 D0C0                       		adda.w	d0,a0
00002002 D2C0                       		adda.w	d0,a1
00002004 1038 F627                  		move.b	($FFFFF627).w,d0
00002008                            
00002008                            loc_1E1E:
00002008 6100                       		bsr.s	Pal_AddColor
0000200A 51C8 FFFC                  		dbf	d0,loc_1E1E
0000200E                            
0000200E                            locret_1E24:
0000200E 4E75                       		rts	
00002010                            ; End of function Pal_FadeIn
00002010                            
00002010                            
00002010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002010                            
00002010                            
00002010                            Pal_AddColor:				; XREF: Pal_FadeIn
00002010 3419                       		move.w	(a1)+,d2
00002012 3610                       		move.w	(a0),d3
00002014 B642                       		cmp.w	d2,d3
00002016 6700                       		beq.s	loc_1E4E
00002018 3203                       		move.w	d3,d1
0000201A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000201E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002020 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002022 30C1                       		move.w	d1,(a0)+	; update pallet
00002024 4E75                       		rts	
00002026                            ; ===========================================================================
00002026                            
00002026                            Pal_AddGreen:				; XREF: Pal_AddColor
00002026 3203                       		move.w	d3,d1
00002028 0641 0020                  		addi.w	#$20,d1		; increase green value
0000202C B242                       		cmp.w	d2,d1
0000202E 6200                       		bhi.s	Pal_AddRed
00002030 30C1                       		move.w	d1,(a0)+	; update pallet
00002032 4E75                       		rts	
00002034                            ; ===========================================================================
00002034                            
00002034                            Pal_AddRed:				; XREF: Pal_AddGreen
00002034 5458                       		addq.w	#2,(a0)+	; increase red value
00002036 4E75                       		rts	
00002038                            ; ===========================================================================
00002038                            
00002038                            loc_1E4E:				; XREF: Pal_AddColor
00002038 5448                       		addq.w	#2,a0
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_AddColor
0000203C                            
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeFrom:
0000203C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002042 383C 0015                  		move.w	#$15,d4
00002046                            
00002046                            loc_1E5C:
00002046 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000204C 6100 0000                  		bsr.w	DelayProgram
00002050 6100                       		bsr.s	Pal_FadeOut
00002052 6100 F7BC                  		bsr.w	RunPLC_RAM
00002056 51CC FFEE                  		dbf	d4,loc_1E5C
0000205A 4E75                       		rts	
0000205C                            ; End of function Pal_FadeFrom
0000205C                            
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            ; Pallet fade-out subroutine
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            
0000205C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000205C                            
0000205C                            
0000205C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000205C 7000                       		moveq	#0,d0
0000205E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002062 1038 F626                  		move.b	($FFFFF626).w,d0
00002066 D0C0                       		adda.w	d0,a0
00002068 1038 F627                  		move.b	($FFFFF627).w,d0
0000206C                            
0000206C                            loc_1E82:
0000206C 6100                       		bsr.s	Pal_DecColor
0000206E 51C8 FFFC                  		dbf	d0,loc_1E82
00002072                            
00002072 7000                       		moveq	#0,d0
00002074 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002078 1038 F626                  		move.b	($FFFFF626).w,d0
0000207C D0C0                       		adda.w	d0,a0
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            loc_1E98:
00002082 6100                       		bsr.s	Pal_DecColor
00002084 51C8 FFFC                  		dbf	d0,loc_1E98
00002088 4E75                       		rts	
0000208A                            ; End of function Pal_FadeOut
0000208A                            
0000208A                            
0000208A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208A                            
0000208A                            
0000208A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000208A 3410                       		move.w	(a0),d2
0000208C 6700                       		beq.s	loc_1ECC
0000208E 3202                       		move.w	d2,d1
00002090 0241 000E                  		andi.w	#$E,d1
00002094 6700                       		beq.s	Pal_DecGreen
00002096 5558                       		subq.w	#2,(a0)+	; decrease red value
00002098 4E75                       		rts	
0000209A                            ; ===========================================================================
0000209A                            
0000209A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000209A 3202                       		move.w	d2,d1
0000209C 0241 00E0                  		andi.w	#$E0,d1
000020A0 6700                       		beq.s	Pal_DecBlue
000020A2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020A6 4E75                       		rts	
000020A8                            ; ===========================================================================
000020A8                            
000020A8                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020A8 3202                       		move.w	d2,d1
000020AA 0241 0E00                  		andi.w	#$E00,d1
000020AE 6700                       		beq.s	loc_1ECC
000020B0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020B4 4E75                       		rts	
000020B6                            ; ===========================================================================
000020B6                            
000020B6                            loc_1ECC:				; XREF: Pal_DecColor
000020B6 5448                       		addq.w	#2,a0
000020B8 4E75                       		rts	
000020BA                            ; End of function Pal_DecColor
000020BA                            
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            ; Subroutine to	fill the pallet	with white (special stage)
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            
000020BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BA                            
000020BA                            
000020BA                            Pal_MakeWhite:				; XREF: SpecialStage
000020BA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020C0 7000                       		moveq	#0,d0
000020C2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020C6 1038 F626                  		move.b	($FFFFF626).w,d0
000020CA D0C0                       		adda.w	d0,a0
000020CC 323C 0EEE                  		move.w	#$EEE,d1
000020D0 1038 F627                  		move.b	($FFFFF627).w,d0
000020D4                            
000020D4                            PalWhite_Loop:
000020D4 30C1                       		move.w	d1,(a0)+
000020D6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020DA 383C 0015                  		move.w	#$15,d4
000020DE                            
000020DE                            loc_1EF4:
000020DE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020E4 6100 0000                  		bsr.w	DelayProgram
000020E8 6100                       		bsr.s	Pal_WhiteToBlack
000020EA 6100 F724                  		bsr.w	RunPLC_RAM
000020EE 51CC FFEE                  		dbf	d4,loc_1EF4
000020F2 4E75                       		rts	
000020F4                            ; End of function Pal_MakeWhite
000020F4                            
000020F4                            
000020F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F4                            
000020F4                            
000020F4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020F4 7000                       		moveq	#0,d0
000020F6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020FE 1038 F626                  		move.b	($FFFFF626).w,d0
00002102 D0C0                       		adda.w	d0,a0
00002104 D2C0                       		adda.w	d0,a1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            loc_1F20:
0000210A 6100                       		bsr.s	Pal_DecColor2
0000210C 51C8 FFFC                  		dbf	d0,loc_1F20
00002110                            
00002110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002116 6600                       		bne.s	locret_1F4A
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000211E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002122 1038 F626                  		move.b	($FFFFF626).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	($FFFFF627).w,d0
0000212E                            
0000212E                            loc_1F44:
0000212E 6100                       		bsr.s	Pal_DecColor2
00002130 51C8 FFFC                  		dbf	d0,loc_1F44
00002134                            
00002134                            locret_1F4A:
00002134 4E75                       		rts	
00002136                            ; End of function Pal_WhiteToBlack
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002136 3419                       		move.w	(a1)+,d2
00002138 3610                       		move.w	(a0),d3
0000213A B642                       		cmp.w	d2,d3
0000213C 6700                       		beq.s	loc_1F78
0000213E 3203                       		move.w	d3,d1
00002140 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002144 6500                       		bcs.s	loc_1F64
00002146 B242                       		cmp.w	d2,d1
00002148 6500                       		bcs.s	loc_1F64
0000214A 30C1                       		move.w	d1,(a0)+
0000214C 4E75                       		rts	
0000214E                            ; ===========================================================================
0000214E                            
0000214E                            loc_1F64:				; XREF: Pal_DecColor2
0000214E 3203                       		move.w	d3,d1
00002150 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002154 6500                       		bcs.s	loc_1F74
00002156 B242                       		cmp.w	d2,d1
00002158 6500                       		bcs.s	loc_1F74
0000215A 30C1                       		move.w	d1,(a0)+
0000215C 4E75                       		rts	
0000215E                            ; ===========================================================================
0000215E                            
0000215E                            loc_1F74:				; XREF: loc_1F64
0000215E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002160 4E75                       		rts	
00002162                            ; ===========================================================================
00002162                            
00002162                            loc_1F78:				; XREF: Pal_DecColor2
00002162 5448                       		addq.w	#2,a0
00002164 4E75                       		rts	
00002166                            ; End of function Pal_DecColor2
00002166                            
00002166                            ; ---------------------------------------------------------------------------
00002166                            ; Subroutine to	make a white flash when	you enter a special stage
00002166                            ; ---------------------------------------------------------------------------
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_MakeFlash:				; XREF: SpecialStage
00002166 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000216C 383C 0015                  		move.w	#$15,d4
00002170                            
00002170                            loc_1F86:
00002170 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002176 6100 0000                  		bsr.w	DelayProgram
0000217A 6100                       		bsr.s	Pal_ToWhite
0000217C 6100 F692                  		bsr.w	RunPLC_RAM
00002180 51CC FFEE                  		dbf	d4,loc_1F86
00002184 4E75                       		rts	
00002186                            ; End of function Pal_MakeFlash
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002186 7000                       		moveq	#0,d0
00002188 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000218C 1038 F626                  		move.b	($FFFFF626).w,d0
00002190 D0C0                       		adda.w	d0,a0
00002192 1038 F627                  		move.b	($FFFFF627).w,d0
00002196                            
00002196                            loc_1FAC:
00002196 6100                       		bsr.s	Pal_AddColor2
00002198 51C8 FFFC                  		dbf	d0,loc_1FAC
0000219C 7000                       		moveq	#0,d0
0000219E 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021A2 1038 F626                  		move.b	($FFFFF626).w,d0
000021A6 D0C0                       		adda.w	d0,a0
000021A8 1038 F627                  		move.b	($FFFFF627).w,d0
000021AC                            
000021AC                            loc_1FC2:
000021AC 6100                       		bsr.s	Pal_AddColor2
000021AE 51C8 FFFC                  		dbf	d0,loc_1FC2
000021B2 4E75                       		rts	
000021B4                            ; End of function Pal_ToWhite
000021B4                            
000021B4                            
000021B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B4                            
000021B4                            
000021B4                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021B4 3410                       		move.w	(a0),d2
000021B6 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021BA 6700                       		beq.s	loc_2006
000021BC 3202                       		move.w	d2,d1
000021BE 0241 000E                  		andi.w	#$E,d1
000021C2 0C41 000E                  		cmpi.w	#$E,d1
000021C6 6700                       		beq.s	loc_1FE2
000021C8 5458                       		addq.w	#2,(a0)+	; increase red value
000021CA 4E75                       		rts	
000021CC                            ; ===========================================================================
000021CC                            
000021CC                            loc_1FE2:				; XREF: Pal_AddColor2
000021CC 3202                       		move.w	d2,d1
000021CE 0241 00E0                  		andi.w	#$E0,d1
000021D2 0C41 00E0                  		cmpi.w	#$E0,d1
000021D6 6700                       		beq.s	loc_1FF4
000021D8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021DC 4E75                       		rts	
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1FF4:				; XREF: loc_1FE2
000021DE 3202                       		move.w	d2,d1
000021E0 0241 0E00                  		andi.w	#$E00,d1
000021E4 0C41 0E00                  		cmpi.w	#$E00,d1
000021E8 6700                       		beq.s	loc_2006
000021EA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021EE 4E75                       		rts	
000021F0                            ; ===========================================================================
000021F0                            
000021F0                            loc_2006:				; XREF: Pal_AddColor2
000021F0 5448                       		addq.w	#2,a0
000021F2 4E75                       		rts	
000021F4                            ; End of function Pal_AddColor2
000021F4                            
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            ; Pallet cycling routine - Sega	logo
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            
000021F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F4                            
000021F4                            
000021F4                            PalCycle_Sega:				; XREF: SegaScreen
000021F4 4A38 F635                  		tst.b	($FFFFF635).w
000021F8 6600                       		bne.s	loc_206A
000021FA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021FE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002204 7205                       		moveq	#5,d1
00002206 3038 F632                  		move.w	($FFFFF632).w,d0
0000220A                            
0000220A                            loc_2020:
0000220A 6A00                       		bpl.s	loc_202A
0000220C 5448                       		addq.w	#2,a0
0000220E 5341                       		subq.w	#1,d1
00002210 5440                       		addq.w	#2,d0
00002212 60F6                       		bra.s	loc_2020
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_202A:				; XREF: PalCycle_Sega
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2034
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2034:
0000221E 0C40 0060                  		cmpi.w	#$60,d0
00002222 6400                       		bcc.s	loc_203E
00002224 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002228                            
00002228                            loc_203E:
00002228 5440                       		addq.w	#2,d0
0000222A 51C9 FFE8                  		dbf	d1,loc_202A
0000222E 3038 F632                  		move.w	($FFFFF632).w,d0
00002232 5440                       		addq.w	#2,d0
00002234 3400                       		move.w	d0,d2
00002236 0242 001E                  		andi.w	#$1E,d2
0000223A 6600                       		bne.s	loc_2054
0000223C 5440                       		addq.w	#2,d0
0000223E                            
0000223E                            loc_2054:
0000223E 0C40 0064                  		cmpi.w	#$64,d0
00002242 6D00                       		blt.s	loc_2062
00002244 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000224A 70F4                       		moveq	#-$C,d0
0000224C                            
0000224C                            loc_2062:
0000224C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002250 7001                       		moveq	#1,d0
00002252 4E75                       		rts	
00002254                            ; ===========================================================================
00002254                            
00002254                            loc_206A:				; XREF: loc_202A
00002254 5338 F634                  		subq.b	#1,($FFFFF634).w
00002258 6A00                       		bpl.s	loc_20BC
0000225A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002260 3038 F632                  		move.w	($FFFFF632).w,d0
00002264 0640 000C                  		addi.w	#$C,d0
00002268 0C40 0030                  		cmpi.w	#$30,d0
0000226C 6500                       		bcs.s	loc_2088
0000226E 7000                       		moveq	#0,d0
00002270 4E75                       		rts	
00002272                            ; ===========================================================================
00002272                            
00002272                            loc_2088:				; XREF: loc_206A
00002272 31C0 F632                  		move.w	d0,($FFFFF632).w
00002276 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000227C 41F0 0000                  		lea	(a0,d0.w),a0
00002280 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002284 22D8                       		move.l	(a0)+,(a1)+
00002286 22D8                       		move.l	(a0)+,(a1)+
00002288 3298                       		move.w	(a0)+,(a1)
0000228A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000228E 7000                       		moveq	#0,d0
00002290 722C                       		moveq	#$2C,d1
00002292                            
00002292                            loc_20A8:
00002292 3400                       		move.w	d0,d2
00002294 0242 001E                  		andi.w	#$1E,d2
00002298 6600                       		bne.s	loc_20B2
0000229A 5440                       		addq.w	#2,d0
0000229C                            
0000229C                            loc_20B2:
0000229C 3390 0000                  		move.w	(a0),(a1,d0.w)
000022A0 5440                       		addq.w	#2,d0
000022A2 51C9 FFEE                  		dbf	d1,loc_20A8
000022A6                            
000022A6                            loc_20BC:
000022A6 7001                       		moveq	#1,d0
000022A8 4E75                       		rts	
000022AA                            ; End of function PalCycle_Sega
000022AA                            
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000022B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000022E6                            
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            ; Subroutines to load pallets
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            
000022E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E6                            
000022E6                            
000022E6                            PalLoad1:
000022E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EC E748                       		lsl.w	#3,d0
000022EE D2C0                       		adda.w	d0,a1
000022F0 2459                       		movea.l	(a1)+,a2
000022F2 3659                       		movea.w	(a1)+,a3
000022F4 D6FC 0080                  		adda.w	#$80,a3
000022F8 3E19                       		move.w	(a1)+,d7
000022FA                            
000022FA                            loc_2110:
000022FA 26DA                       		move.l	(a2)+,(a3)+
000022FC 51CF FFFC                  		dbf	d7,loc_2110
00002300 4E75                       		rts	
00002302                            ; End of function PalLoad1
00002302                            
00002302                            
00002302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002302                            
00002302                            
00002302                            PalLoad2:
00002302 43F9 0000 0000             		lea	(PalPointers).l,a1
00002308 E748                       		lsl.w	#3,d0
0000230A D2C0                       		adda.w	d0,a1
0000230C 2459                       		movea.l	(a1)+,a2
0000230E 3659                       		movea.w	(a1)+,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2128:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2128
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad2
0000231A                            
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            ; Underwater pallet loading subroutine
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad3_Water:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 96FC 0080                  		suba.w	#$80,a3
0000232C 3E19                       		move.w	(a1)+,d7
0000232E                            
0000232E                            loc_2144:
0000232E 26DA                       		move.l	(a2)+,(a3)+
00002330 51CF FFFC                  		dbf	d7,loc_2144
00002334 4E75                       		rts	
00002336                            ; End of function PalLoad3_Water
00002336                            
00002336                            
00002336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002336                            
00002336                            
00002336                            PalLoad4_Water:
00002336 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233C E748                       		lsl.w	#3,d0
0000233E D2C0                       		adda.w	d0,a1
00002340 2459                       		movea.l	(a1)+,a2
00002342 3659                       		movea.w	(a1)+,a3
00002344 96FC 0100                  		suba.w	#$100,a3
00002348 3E19                       		move.w	(a1)+,d7
0000234A                            
0000234A                            loc_2160:
0000234A 26DA                       		move.l	(a2)+,(a3)+
0000234C 51CF FFFC                  		dbf	d7,loc_2160
00002350 4E75                       		rts	
00002352                            ; End of function PalLoad4_Water
00002352                            
00002352                            ; ===========================================================================
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352                            PalPointers:
00002352                            	include "_inc\Pallet pointers.asm"
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002356 FB00                       	dc.w $FB00		; RAM address
00002358 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000235A 0000 0000                  	dc.l Pal_Title
0000235E FB00                       	dc.w $FB00
00002360 001F                       	dc.w $1F
00002362 0000 0000                  	dc.l Pal_LevelSel
00002366 FB00                       	dc.w $FB00
00002368 001F                       	dc.w $1F
0000236A 0000 0000                  	dc.l Pal_Sonic
0000236E FB00                       	dc.w $FB00
00002370 0007                       	dc.w 7
00002372 0000 0000                  	dc.l Pal_GHZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_LZ
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_MZ
00002386 FB20                       	dc.w $FB20
00002388 0017                       	dc.w $17
0000238A 0000 0000                  	dc.l Pal_SLZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_SYZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ1
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_Special
000023A6 FB00                       	dc.w $FB00
000023A8 001F                       	dc.w $1F
000023AA 0000 0000                  	dc.l Pal_LZWater
000023AE FB00                       	dc.w $FB00
000023B0 001F                       	dc.w $1F
000023B2 0000 0000                  	dc.l Pal_SBZ3
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_SBZ3Water
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SBZ2
000023C6 FB20                       	dc.w $FB20
000023C8 0017                       	dc.w $17
000023CA 0000 0000                  	dc.l Pal_LZSonWater
000023CE FB00                       	dc.w $FB00
000023D0 0007                       	dc.w 7
000023D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023D6 FB00                       	dc.w $FB00
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_SpeResult
000023DE FB00                       	dc.w $FB00
000023E0 001F                       	dc.w $1F
000023E2 0000 0000                  	dc.l Pal_SpeContinue
000023E6 FB00                       	dc.w $FB00
000023E8 000F                       	dc.w $F
000023EA 0000 0000                  	dc.l Pal_Ending
000023EE FB00                       	dc.w $FB00
000023F0 001F                       	dc.w $1F
000023F2 0000 0000                  	dc.l Pal_Idiot
000023F6 FB20                       	dc.w $FB20
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Gronic
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002402 0000 0000                  	dc.l Pal_LZGroWater
00002406 FB00                       	dc.w $FB00
00002408 0007                       	dc.w 7
0000240A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000240E FB00                       	dc.w $FB00
00002410 0007                       	dc.w 7
00002410 0007                       	dc.w 7
00002412                            
00002412                            ; ---------------------------------------------------------------------------
00002412                            ; Pallet data
00002412                            ; ---------------------------------------------------------------------------
00002412                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002492                            Pal_Title:	incbin	pallet\title.bin
00002512                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002592                            Pal_Sonic:	incbin	pallet\sonic.bin
000025B2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002612                            Pal_LZ:		incbin	pallet\lz.bin
00002672                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026F2                            Pal_MZ:		incbin	pallet\mz.bin
00002752                            Pal_SLZ:	incbin	pallet\slz.bin
000027B2                            Pal_SYZ:	incbin	pallet\syz.bin
00002812                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002872                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028D2                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002952                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029B2                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A32                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A52                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A72                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002AF2                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B32                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BB2                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BD2                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002BF2                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C12                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C32                            
00002C32                            ; ---------------------------------------------------------------------------
00002C32                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002C32                            ; ---------------------------------------------------------------------------
00002C32                            
00002C32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C32                            
00002C32                            
00002C32                            DelayProgram:				; XREF: PauseGame
00002C32 46FC 2300                  		move	#$2300,sr
00002C36                            
00002C36                            loc_29AC:
00002C36 4A38 F62A                  		tst.b	($FFFFF62A).w
00002C3A 66FA                       		bne.s	loc_29AC
00002C3C 4E75                       		rts	
00002C3E                            ; End of function DelayProgram
00002C3E                            
00002C3E                            ; ---------------------------------------------------------------------------
00002C3E                            ; Subroutine to	generate a pseudo-random number	in d0
00002C3E                            ; ---------------------------------------------------------------------------
00002C3E                            
00002C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C3E                            
00002C3E                            
00002C3E                            RandomNumber:
00002C3E 2238 F636                  		move.l	($FFFFF636).w,d1
00002C42 6600                       		bne.s	loc_29C0
00002C44 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C4A                            
00002C4A                            loc_29C0:
00002C4A 2001                       		move.l	d1,d0
00002C4C E581                       		asl.l	#2,d1
00002C4E D280                       		add.l	d0,d1
00002C50 E781                       		asl.l	#3,d1
00002C52 D280                       		add.l	d0,d1
00002C54 3001                       		move.w	d1,d0
00002C56 4841                       		swap	d1
00002C58 D041                       		add.w	d1,d0
00002C5A 3200                       		move.w	d0,d1
00002C5C 4841                       		swap	d1
00002C5E 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C62 4E75                       		rts	
00002C64                            ; End of function RandomNumber
00002C64                            
00002C64                            
00002C64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C64                            
00002C64                            
00002C64                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C64 0240 00FF                  		andi.w	#$FF,d0
00002C68 D040                       		add.w	d0,d0
00002C6A 0640 0080                  		addi.w	#$80,d0
00002C6E 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C72 0440 0080                  		subi.w	#$80,d0
00002C76 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C7A 4E75                       		rts	
00002C7C                            ; End of function CalcSine
00002C7C                            
00002C7C                            ; ===========================================================================
00002C7C                            
00002C7C                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EFC                            
00002EFC                            ; ===========================================================================
00002EFC 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F00 3200                       		move.w	d0,d1
00002F02 4841                       		swap	d1
00002F04 7000                       		moveq	#0,d0
00002F06 3200                       		move.w	d0,d1
00002F08 7407                       		moveq	#7,d2
00002F0A                            
00002F0A                            loc_2C80:
00002F0A E599                       		rol.l	#2,d1
00002F0C D040                       		add.w	d0,d0
00002F0E 5240                       		addq.w	#1,d0
00002F10 9240                       		sub.w	d0,d1
00002F12 6400                       		bcc.s	loc_2C9A
00002F14 D240                       		add.w	d0,d1
00002F16 5340                       		subq.w	#1,d0
00002F18 51CA FFF0                  		dbf	d2,loc_2C80
00002F1C E248                       		lsr.w	#1,d0
00002F1E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F22 4E75                       		rts	
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2C9A:
00002F24 5240                       		addq.w	#1,d0
00002F26 51CA FFE2                  		dbf	d2,loc_2C80
00002F2A E248                       		lsr.w	#1,d0
00002F2C 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F30 4E75                       		rts	
00002F32                            
00002F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F32                            
00002F32                            
00002F32                            CalcAngle:
00002F32 48E7 1800                  		movem.l	d3-d4,-(sp)
00002F36 7600                       		moveq	#0,d3
00002F38 7800                       		moveq	#0,d4
00002F3A 3601                       		move.w	d1,d3
00002F3C 3802                       		move.w	d2,d4
00002F3E 8843                       		or.w	d3,d4
00002F40 6700                       		beq.s	loc_2D04
00002F42 3802                       		move.w	d2,d4
00002F44 4A43                       		tst.w	d3
00002F46 6A00 0000                  		bpl.w	loc_2CC2
00002F4A 4443                       		neg.w	d3
00002F4C                            
00002F4C                            loc_2CC2:
00002F4C 4A44                       		tst.w	d4
00002F4E 6A00 0000                  		bpl.w	loc_2CCA
00002F52 4444                       		neg.w	d4
00002F54                            
00002F54                            loc_2CCA:
00002F54 B843                       		cmp.w	d3,d4
00002F56 6400 0000                  		bcc.w	loc_2CDC
00002F5A E18C                       		lsl.l	#8,d4
00002F5C 88C3                       		divu.w	d3,d4
00002F5E 7000                       		moveq	#0,d0
00002F60 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F64 6000                       		bra.s	loc_2CE6
00002F66                            ; ===========================================================================
00002F66                            
00002F66                            loc_2CDC:				; XREF: CalcAngle
00002F66 E18B                       		lsl.l	#8,d3
00002F68 86C4                       		divu.w	d4,d3
00002F6A 7040                       		moveq	#$40,d0
00002F6C 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F70                            
00002F70                            loc_2CE6:
00002F70 4A41                       		tst.w	d1
00002F72 6A00 0000                  		bpl.w	loc_2CF2
00002F76 4440                       		neg.w	d0
00002F78 0640 0080                  		addi.w	#$80,d0
00002F7C                            
00002F7C                            loc_2CF2:
00002F7C 4A42                       		tst.w	d2
00002F7E 6A00 0000                  		bpl.w	loc_2CFE
00002F82 4440                       		neg.w	d0
00002F84 0640 0100                  		addi.w	#$100,d0
00002F88                            
00002F88                            loc_2CFE:
00002F88 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F8C 4E75                       		rts	
00002F8E                            ; ===========================================================================
00002F8E                            
00002F8E                            loc_2D04:				; XREF: CalcAngle
00002F8E 303C 0040                  		move.w	#$40,d0
00002F92 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F96 4E75                       		rts	
00002F98                            ; End of function CalcAngle
00002F98                            
00002F98                            ; ===========================================================================
00002F98                            
00002F98                            Angle_Data:	incbin	misc\angles.bin
0000309A                            
0000309A                            ; ===========================================================================
0000309A                            
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            ; Sega screen
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            
0000309A                            SegaScreen:				; XREF: GameModeArray
0000309A 103C 00E4                  		move.b	#$E4,d0
0000309E 6100 E520                  		bsr.w	PlaySound_Special ; stop music
000030A2 6100 E75E                  		bsr.w	ClearPLC
000030A6 6100 EF94                  		bsr.w	Pal_FadeFrom
000030AA 4DF9 00C0 0004             		lea	($C00004).l,a6
000030B0 3CBC 8004                  		move.w	#$8004,(a6)
000030B4 3CBC 8230                  		move.w	#$8230,(a6)
000030B8 3CBC 8407                  		move.w	#$8407,(a6)
000030BC 3CBC 8700                  		move.w	#$8700,(a6)
000030C0 3CBC 8B00                  		move.w	#$8B00,(a6)
000030C4 4238 F64E                  		clr.b	($FFFFF64E).w
000030C8 46FC 2700                  		move	#$2700,sr
000030CC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000030D0 0200 00BF                  		andi.b	#$BF,d0
000030D4 33C0 00C0 0004             		move.w	d0,($C00004).l
000030DA 6100 E40C                  		bsr.w	ClearScreen
000030DE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030E8 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030EE 6100 E574                  		bsr.w	NemDec
000030F2 43F9 00FF 0000             		lea	($FF0000).l,a1
000030F8 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030FE 303C 0000                  		move.w	#0,d0
00003102 6100 E83E                  		bsr.w	EniDec
00003106 43F9 00FF 0000             		lea	($FF0000).l,a1
0000310C 203C 6510 0003             		move.l	#$65100003,d0
00003112 7217                       		moveq	#$17,d1
00003114 7407                       		moveq	#7,d2
00003116 6100 E52C                  		bsr.w	ShowVDPGraphics
0000311A 43F9 00FF 0180             		lea	($FF0180).l,a1
00003120 203C 4000 0003             		move.l	#$40000003,d0
00003126 7227                       		moveq	#$27,d1
00003128 741B                       		moveq	#$1B,d2
0000312A 6100 E518                  		bsr.w	ShowVDPGraphics
0000312E 7000                       		moveq	#0,d0
00003130 6100 F1D0                  		bsr.w	PalLoad2	; load Sega logo pallet
00003134 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000313A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003140 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003146 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000314C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003150 0000 0040                  		ori.b	#$40,d0
00003154 33C0 00C0 0004             		move.w	d0,($C00004).l
0000315A                            
0000315A                            Sega_WaitPallet:
0000315A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003160 6100 FAD0                  		bsr.w	DelayProgram
00003164 6100 F08E                  		bsr.w	PalCycle_Sega
00003168 66F0                       		bne.s	Sega_WaitPallet
0000316A                            
0000316A 103C 00E1                  		move.b	#$E1,d0
0000316E 6100 E450                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003172 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003178 6100 FAB8                  		bsr.w	DelayProgram
0000317C 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003182                            
00003182                            Sega_WaitEnd:
00003182 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003188 6100 FAA8                  		bsr.w	DelayProgram
0000318C 4A78 F614                  		tst.w	($FFFFF614).w
00003190 6700                       		beq.s	Sega_GotoTitle
00003192 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003198 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000319A                            
0000319A                            Sega_GotoTitle:
0000319A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000031A0 4E75                       		rts	
000031A2                            ; ===========================================================================
000031A2                            
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            ; Title	screen
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            
000031A2                            TitleScreen:				; XREF: GameModeArray
000031A2 103C 00E4                  		move.b	#$E4,d0
000031A6 6100 E418                  		bsr.w	PlaySound_Special ; stop music
000031AA 6100 EE90                  		bsr.w	Pal_FadeFrom
000031AE 6100 E652                  		bsr.w	ClearPLC
000031B2 46FC 2700                  		move	#$2700,sr
000031B6 6100 E3BE                  		bsr.w	SoundDriverLoad
000031BA 4DF9 00C0 0004             		lea	($C00004).l,a6
000031C0 3CBC 8004                  		move.w	#$8004,(a6)
000031C4 3CBC 8230                  		move.w	#$8230,(a6)
000031C8 3CBC 8407                  		move.w	#$8407,(a6)
000031CC 3CBC 9001                  		move.w	#$9001,(a6)
000031D0 3CBC 9200                  		move.w	#$9200,(a6)
000031D4 3CBC 8B03                  		move.w	#$8B03,(a6)
000031D8 3CBC 8720                  		move.w	#$8720,(a6)
000031DC 4238 F64E                  		clr.b	($FFFFF64E).w
000031E0 6100 E306                  		bsr.w	ClearScreen
000031E4 43F8 D000                  		lea	($FFFFD000).w,a1
000031E8 7000                       		moveq	#0,d0
000031EA 323C 07FF                  		move.w	#$7FF,d1
000031EE                            
000031EE                            Title_ClrObjRam:
000031EE 22C0                       		move.l	d0,(a1)+
000031F0 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031F4                            
000031F4                            ; gomer
000031F4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031FE 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
00003204 6100 E45E                  		bsr.w	NemDec
00003208 7003                       		moveq	#3,d0		; load Sonic's pallet
0000320A 6100 F0DA                  		bsr.w	PalLoad1
0000320E                            
0000320E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003214 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
0000321A 303C 0000                  		move.w	#0,d0
0000321E 6100 E722                  		bsr.w	EniDec
00003222                            ; help how the fuck can i do this IT SHOWS NOTHING
00003222 43F9 00FF 0000             		lea	($FF0000).l,a1
00003228 203C 4000 0003             		move.l	#$40000003,d0
0000322E 7227                       		moveq	#$27,d1
00003230 741B                       		moveq	#$1B,d2
00003232                            
00003232 43F9 00FF 0000             		lea	($FF0000).l,a1
00003238 203C 6000 0003             		move.l	#$60000003,d0
0000323E 7227                       		moveq	#$27,d1
00003240 741B                       		moveq	#$1B,d2
00003242                            
00003242 6100 ED52                  		bsr.w	Pal_FadeTo
00003246 6100 EDF4                  		bsr.w	Pal_FadeFrom
0000324A                            
0000324A                            
0000324A 6100 E29C                  		bsr.w	ClearScreen
0000324E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003258 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000325E 6100 E404                  		bsr.w	NemDec
00003262 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
0000326C 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003272 6100 E3F0                  		bsr.w	NemDec
00003276 43F9 00FF 0000             		lea	($FF0000).l,a1
0000327C 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003282 303C 0000                  		move.w	#0,d0
00003286 6100 E6BA                  		bsr.w	EniDec
0000328A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003290 203C 4000 0003             		move.l	#$40000003,d0
00003296 7227                       		moveq	#$27,d1
00003298 741B                       		moveq	#$1B,d2
0000329A 6100 E3A8                  		bsr.w	ShowVDPGraphics
0000329E 6100 ED9C                  		bsr.w	Pal_FadeFrom
000032A2 43F8 FB80                  		lea	($FFFFFB80).w,a1
000032A6 7000                       		moveq	#0,d0
000032A8 323C 001F                  		move.w	#$1F,d1
000032AC                            
000032AC                            Title_ClrPallet:
000032AC 22C0                       		move.l	d0,(a1)+
000032AE 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000032B2                            
000032B2 7003                       		moveq	#3,d0		; load Sonic's pallet
000032B4 6100 F030                  		bsr.w	PalLoad1
000032B8 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000032BE 4EB9 0000 0000             		jsr	ObjectsLoad
000032C4 4EB9 0000 0000             		jsr	BuildSprites
000032CA 6100 ECCA                  		bsr.w	Pal_FadeTo
000032CE 46FC 2700                  		move	#$2700,sr
000032D2 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000032DC 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000032E2 6100 E380                  		bsr.w	NemDec
000032E6 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000032F0 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000032F6 6100 E36C                  		bsr.w	NemDec
000032FA 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003304 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000330A 6100 E358                  		bsr.w	NemDec
0000330E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003314 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000331C 4BF9 0000 05F4             		lea	(Art_Text).l,a5
00003322 323C 0BB6                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003326                            
00003326                            Title_LoadText:
00003326 2C9D                       		move.l	(a5)+,(a6)
00003328 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000332C                            
0000332C 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003332 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003338 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000333E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003344 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
0000334A 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003350 6100 0000                  		bsr.w	LevelSizeLoad
00003354 6100 0000                  		bsr.w	DeformBgLayer
00003358                            
00003358 43F8 B000                  		lea	($FFFFB000).w,a1
0000335C 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003362 303C 0000                  		move.w	#0,d0
00003366 6100 E5DA                  		bsr.w	EniDec
0000336A 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003370 43F9 00FF 0000             		lea	($FF0000).l,a1
00003376 6100 E748                  		bsr.w	KosDec
0000337A 6100 0000                  		bsr.w	LevelLayoutLoad
0000337E                            
0000337E 46FC 2700                  		move	#$2700,sr
00003382 6100 E164                  		bsr.w	ClearScreen
00003386 4BF9 00C0 0004             		lea	($C00004).l,a5
0000338C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003392 47F8 F708                  		lea	($FFFFF708).w,a3
00003396 49F8 A440                  		lea	($FFFFA440).w,a4
0000339A 343C 6000                  		move.w	#$6000,d2
0000339E 6100 0000                  		bsr.w	LoadTilesFromStart2
000033A2 43F9 00FF 0000             		lea	($FF0000).l,a1
000033A8 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000033AE 303C 0000                  		move.w	#0,d0
000033B2 6100 E58E                  		bsr.w	EniDec
000033B6 43F9 00FF 0000             		lea	($FF0000).l,a1
000033BC 203C 4206 0003             		move.l	#$42060003,d0
000033C2 7221                       		moveq	#$21,d1
000033C4 7415                       		moveq	#$15,d2
000033C6 6100 E27C                  		bsr.w	ShowVDPGraphics
000033CA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000033D4 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000033DA 6100 E288                  		bsr.w	NemDec
000033DE 7001                       		moveq	#1,d0		; load title screen pallet
000033E0 6100 EF04                  		bsr.w	PalLoad1
000033E4 103C 008A                  		move.b	#$8A,d0		; play title screen music
000033E8 6100 E1D6                  		bsr.w	PlaySound_Special
000033EC 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000033F2 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000033F8 43F8 D080                  		lea	($FFFFD080).w,a1
000033FC 7000                       		moveq	#0,d0
000033FE 323C 0007                  		move.w	#7,d1
00003402                            
00003402                            Title_ClrObjRam2:
00003402 22C0                       		move.l	d0,(a1)+
00003404 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003408                            
00003408 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000340E 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003414 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000341A 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003420 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003426 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
0000342C 4EB9 0000 0000             		jsr	ObjectsLoad
00003432 6100 0000                  		bsr.w	DeformBgLayer
00003436 4EB9 0000 0000             		jsr	BuildSprites
0000343C 7000                       		moveq	#0,d0
0000343E 6100 E396                  		bsr.w	LoadPLC2
00003442 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003448 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000344E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003452 0000 0040                  		ori.b	#$40,d0
00003456 33C0 00C0 0004             		move.w	d0,($C00004).l
0000345C 6100 EB38                  		bsr.w	Pal_FadeTo
00003460                            
00003460                            loc_317C:
00003460 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003466 6100 F7CA                  		bsr.w	DelayProgram
0000346A 4EB9 0000 0000             		jsr	ObjectsLoad
00003470 6100 0000                  		bsr.w	DeformBgLayer
00003474 4EB9 0000 0000             		jsr	BuildSprites
0000347A 6100 E704                  		bsr.w	PalCycle_Title
0000347E 6100 E390                  		bsr.w	RunPLC_RAM
00003482 3038 D008                  		move.w	($FFFFD008).w,d0
00003486 5440                       		addq.w	#2,d0
00003488 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
0000348C 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003490 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003492 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003498 4E75                       		rts	
0000349A                            ; ===========================================================================
0000349A                            
0000349A                            Title_ChkRegion:
0000349A 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000349E 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000034A0 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000034A6 6000                       		bra.s	Title_EnterCheat
000034A8                            ; ===========================================================================
000034A8                            
000034A8                            Title_RegionJ:				; XREF: Title_ChkRegion
000034A8 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000034AE                            
000034AE                            Title_EnterCheat:			; XREF: Title_ChkRegion
000034AE 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000034B2 D0C0                       		adda.w	d0,a0
000034B4 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000034B8 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000034BC B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000034BE 6600                       		bne.s	loc_3210	; if not, branch
000034C0 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000034C4 4A00                       		tst.b	d0
000034C6 6600                       		bne.s	Title_CountC
000034C8 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000034CC 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000034D0 E249                       		lsr.w	#1,d1
000034D2 0241 0003                  		andi.w	#3,d1
000034D6 6700                       		beq.s	Title_PlayRing
000034D8 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000034DC 6A00                       		bpl.s	Title_PlayRing
000034DE 7201                       		moveq	#1,d1
000034E0 1181 1001                  		move.b	d1,1(a0,d1.w)
000034E4                            
000034E4                            Title_PlayRing:
000034E4 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000034EA 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000034EE 6100 E0D0                  		bsr.w	PlaySound_Special
000034F2 6000                       		bra.s	Title_CountC
000034F4                            ; ===========================================================================
000034F4                            
000034F4                            loc_3210:				; XREF: Title_EnterCheat
000034F4 4A00                       		tst.b	d0
000034F6 6700                       		beq.s	Title_CountC
000034F8 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000034FE 6700                       		beq.s	Title_CountC
00003500 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003506                            
00003506                            Title_CountC:
00003506 1038 F605                  		move.b	($FFFFF605).w,d0
0000350A 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000350E 6700                       		beq.s	loc_3230	; if not, branch
00003510 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003514                            
00003514                            loc_3230:
00003514 4A78 F614                  		tst.w	($FFFFF614).w
00003518 6700 0000                  		beq.w	Demo
0000351C                            		; (temporary until we have an actual options screen)
0000351C 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
00003522 6700                       		beq.s	@notc
00003524                            
00003524 0A38 0001 FFE8             		eor.b	#1,(v_character) ; sonic/gronic 
0000352A 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000352E 6100 E090                  		bsr.w	PlaySound_Special
00003532                            	@notc:
00003532 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003538 6700 FF26                  		beq.w	loc_317C	; if not, branch
0000353C                            
0000353C                            Title_ChkLevSel:
0000353C 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003540 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003544 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
0000354A 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000354E                            		
0000354E                            		
0000354E 7002                       		moveq	#2,d0
00003550 6100 EDB0                  		bsr.w	PalLoad2	; load level select pallet
00003554 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003558 7000                       		moveq	#0,d0
0000355A 323C 00DF                  		move.w	#$DF,d1
0000355E                            
0000355E                            Title_ClrScroll:
0000355E 22C0                       		move.l	d0,(a1)+
00003560 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003564                            
00003564 21C0 F616                  		move.l	d0,($FFFFF616).w
00003568 46FC 2700                  		move	#$2700,sr
0000356C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003572 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000357C 323C 03FF                  		move.w	#$3FF,d1
00003580                            
00003580                            Title_ClrVram:
00003580 2C80                       		move.l	d0,(a6)
00003582 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003586                            
00003586 6100 0000                  		bsr.w	LevSelTextLoad
0000358A                            		
0000358A                            		; sound test fix
0000358A 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000358E 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003594                            		
00003594 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003598 0C46 0014                  		cmpi.w	#$14,d6
0000359C 6700                       		beq.s	@issndtst
0000359E 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
000035A2                            	@issndtst:
000035A2 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000035A6 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000035AA                            		
000035AA 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000035AE 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000035B6                            		
000035B6 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000035BC 6700                       		beq.s	@issndtst2
000035BE                            		
000035BE 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000035C4 6100 0000                  		bsr.w	CStringSlop
000035C8 6000                       		bra.s	LevelSelect
000035CA                            	@issndtst2:
000035CA 43F9 0000 0000             		lea	(Controls_SND).l,a1
000035D0 6100 0000                  		bsr.w	CStringSlop
000035D4                            ; ---------------------------------------------------------------------------
000035D4                            ; Level	Select
000035D4                            ; ---------------------------------------------------------------------------
000035D4                            LevelSelect:
000035D4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035DA 6100 F656                  		bsr.w	DelayProgram
000035DE 6100 0000                  		bsr.w	LevSelControls
000035E2 6100 E22C                  		bsr.w	RunPLC_RAM
000035E6 4AB8 F680                  		tst.l	($FFFFF680).w
000035EA 66E8                       		bne.s	LevelSelect
000035EC 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000035F2 67E0                       		beq.s	LevelSelect	; if not, branch
000035F4 3038 FF82                  		move.w	($FFFFFF82).w,d0
000035F8 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000035FC 6600                       		bne.s	@dont	; if not, dont blow this place up
000035FE                            			
000035FE 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
00003604 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000360A 6100 F626                  		bsr.w	DelayProgram
0000360E                            	@dont:
0000360E 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003612 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003614                            		
00003614 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
0000361A 67B8                       		beq.s	LevelSelect	; if not, branch
0000361C                            		
0000361C 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003622 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003624                            		
00003624 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003628 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000362C                            		
0000362C 4EB9 0000 0000             		jsr		ShowNow_Playing
00003632 60A0                       		bra.s	LevelSelect
00003634                            ; ===========================================================================
00003634                            
00003634                            LevSel_SEGA:				; XREF: LevelSelect
00003634 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
0000363A 4E75                       		rts	
0000363C                            ; ===========================================================================
0000363C                            
0000363C                            LevSel_Ending:				; XREF: LevelSelect
0000363C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003642 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003648 4E75                       		rts	
0000364A                            ; ===========================================================================
0000364A                            
0000364A                            LevSel_Credits:				; XREF: LevelSelect
0000364A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003650 103C 0091                  		move.b	#$91,d0
00003654 6100 DF6A                  		bsr.w	PlaySound_Special ; play credits music
00003658 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000365E 4E75                       		rts	
00003660                            ; ===========================================================================
00003660                            
00003660                            LevSel_Level_SS:			; XREF: LevelSelect
00003660 D040                       		add.w	d0,d0
00003662 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003666 6B00 FF6C                  		bmi.w	LevelSelect
0000366A 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
0000366E 6600                       		bne.s	LevSel_Level	; if not, branch
00003670 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003676 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000367A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003680 7000                       		moveq	#0,d0
00003682 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003686 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000368A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000368E 4E75                       		rts	
00003690                            ; ===========================================================================
00003690                            
00003690                            LevSel_Level:				; XREF: LevSel_Level_SS
00003690 0240 3FFF                  		andi.w	#$3FFF,d0
00003694 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003698                            
00003698                            PlayLevel:				; XREF: ROM:00003246j ...
00003698 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000369E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000036A4 7000                       		moveq	#0,d0
000036A6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000036AA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000036AE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000036B2 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000036B6 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000036BA 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000036BE 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000036C2 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000036C6 103C 00E0                  		move.b	#$E0,d0
000036CA 6100 DEF4                  		bsr.w	PlaySound_Special ; fade out music
000036CE 4E75                       		rts	
000036D0                            ; ===========================================================================
000036D0                            ; ---------------------------------------------------------------------------
000036D0                            ; Level	select - level pointers
000036D0                            ; ---------------------------------------------------------------------------
000036D0                            LSelectPointers:
000036D0                            		incbin	misc\ls_point.bin
000036FA                            		even
000036FA                            ; ---------------------------------------------------------------------------
000036FA                            ; Level	select codes
000036FA                            ; ---------------------------------------------------------------------------
000036FA                            LevelSelectCode_J:
000036FA                            		incbin	misc\ls_jcode.bin
00003700                            		even
00003700                            
00003700                            LevelSelectCode_US:
00003700                            		incbin	misc\ls_ucode.bin
00003706                            		even
00003706                            ; ===========================================================================
00003706                            
00003706                            ; ---------------------------------------------------------------------------
00003706                            ; Demo mode
00003706                            ; ---------------------------------------------------------------------------
00003706                            
00003706                            Demo:					; XREF: TitleScreen
00003706 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000370C                            
0000370C                            loc_33B6:				; XREF: loc_33E4
0000370C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003712 6100 F51E                  		bsr.w	DelayProgram
00003716 6100 0000                  		bsr.w	DeformBgLayer
0000371A 6100 E444                  		bsr.w	PalCycle_Load
0000371E 6100 E0F0                  		bsr.w	RunPLC_RAM
00003722 3038 D008                  		move.w	($FFFFD008).w,d0
00003726 5440                       		addq.w	#2,d0
00003728 31C0 D008                  		move.w	d0,($FFFFD008).w
0000372C 0C40 1C00                  		cmpi.w	#$1C00,d0
00003730 6500                       		bcs.s	loc_33E4
00003732 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003738 4E75                       		rts	
0000373A                            ; ===========================================================================
0000373A                            
0000373A                            loc_33E4:				; XREF: Demo
0000373A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003740 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
00003744 4A78 F614                  		tst.w	($FFFFF614).w
00003748 6600 FFC2                  		bne.w	loc_33B6
0000374C 103C 00E0                  		move.b	#$E0,d0
00003750 6100 DE6E                  		bsr.w	PlaySound_Special ; fade out music
00003754 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003758 0240 0007                  		andi.w	#7,d0
0000375C D040                       		add.w	d0,d0
0000375E 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003762 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003766 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
0000376A 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003770 6500                       		bcs.s	loc_3422	; if yes, branch
00003772 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003778                            
00003778                            loc_3422:
00003778 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
0000377E 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003784 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003788 6600                       		bne.s	Demo_Level	; if not, branch
0000378A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003790 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003794 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003798                            
00003798                            Demo_Level:
00003798 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000379E 7000                       		moveq	#0,d0
000037A0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037A4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037A8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037AC 4E75                       		rts	
000037AE                            ; ===========================================================================
000037AE                            ; ---------------------------------------------------------------------------
000037AE                            ; Levels used in demos
000037AE                            ; ---------------------------------------------------------------------------
000037AE                            Demo_Levels:	incbin	misc\dm_ord1.bin
000037B6                            		even
000037B6                            
000037B6                            ; ---------------------------------------------------------------------------
000037B6                            ; Subroutine to	change what you're selecting in the level select
000037B6                            ; ---------------------------------------------------------------------------
000037B6                            
000037B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037B6                            
000037B6                            
000037B6                            LevSelControls:				; XREF: LevelSelect
000037B6 1238 F605                  		move.b	($FFFFF605).w,d1
000037BA 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000037BE 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000037C0 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000037C4 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000037C8                            
000037C8                            LevSel_UpDown:
000037C8 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000037CE 1238 F604                  		move.b	($FFFFF604).w,d1
000037D2 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000037D6 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000037DA 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000037DE 0801 0000                  		btst	#0,d1		; is up	pressed?
000037E2 6700                       		beq.s	LevSel_Down	; if not, branch
000037E4 5346                       		subq.w	#1,d6		; move up 1 selection
000037E6 6400                       		bcc.s	LevSel_Down
000037E8 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000037EA                            
000037EA                            LevSel_Down:
000037EA 0801 0001                  		btst	#1,d1		; is down pressed?
000037EE 6700                       		beq.s	LevSel_Refresh	; if not, branch
000037F0 5246                       		addq.w	#1,d6		; move down 1 selection
000037F2 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000037F6 6500                       		bcs.s	LevSel_Refresh
000037F8 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000037FA 6000                       		bra.s	LevSel_Refresh
000037FC                            		
000037FC                            LevSel_LR:
000037FC 0801 0002                  		btst	#2,d1		; is left pressed?
00003800 6700                       		beq.s	LevSel_Right	; if not, branch
00003802 0446 0000                  		sub.w	#lsrow2size,d6
00003806 64E2                       		bcc.s	LevSel_Down
00003808 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
0000380C                            LevSel_Right:
0000380C 0801 0003                  		btst	#3,d1		; is right pressed?
00003810 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003812 0646 0000                  		add.w	#lsrow1size,d6
00003816 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000381A 6500                       		bcs.s	LevSel_Refresh
0000381C 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003820                            ; ===========================================================================
00003820                            LevSel_Refresh:
00003820                            		
00003820 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003824 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003828                            		
00003828 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
0000382E 6600                       		bne.s	@exitsndtest
00003830                            		
00003830 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003834 43F9 0000 0000             		lea	(Controls_Normal).l,a1
0000383A 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003842 6100 0000                  		bsr.w	CStringSlop
00003846                            	@exitsndtest:
00003846                            	
00003846 363C C65F                  		move.w	#$C680-$21,d3
0000384A 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
0000384E 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003852                            		
00003852 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00003858 6600                       		bne.s	@entersndtest
0000385A                            		
0000385A 363C C65F                  		move.w	#$C680-$21,d3
0000385E 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003864 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000386C 6100 0000                  		bsr.w	CStringSlop
00003870                            	@entersndtest:
00003870 4E75                       		rts	
00003872                            		
00003872                            LevSel_SndTest:				; XREF: LevSelControls
00003872 1238 F605                  		move.b	($FFFFF605).w,d1
00003876 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
0000387A 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000387C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
00003882 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
00003886                            		
00003886 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000388A 0801 0002                  		btst	#2,d1		; is left pressed?
0000388E 6700                       		beq.s	SndTest_Right	; if not, branch
00003890 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
00003892                            		; no need the fact it's a byte does the trick
00003892                            
00003892                            SndTest_Right:
00003892 0801 0003                  		btst	#3,d1		; is right pressed?
00003896 6700                       		beq.s	SndTest_A	; if not, branch
00003898 5200                       		addq.b	#1,d0		; add 1	to sound test
0000389A                            		; same here
0000389A                            		
0000389A                            SndTest_A:
0000389A 0801 0006                  		btst	#6,d1		; is A pressed?
0000389E 6700                       		beq.s	SndTest_B	; if not, branch
000038A0 5100                       		subq.b	#8,d0		; subtract $10 to sound test
000038A2 5100                       		subq.b	#8,d0
000038A4                            		
000038A4                            SndTest_B:
000038A4 0801 0004                  		btst	#4,d1		; is B pressed?
000038A8 6700                       		beq.s	SndTest_Refresh	; if not, branch
000038AA 5000                       		addq.b	#8,d0		; add $10 to sound test
000038AC 5000                       		addq.b	#8,d0
000038AE                            
000038AE                            SndTest_Refresh:
000038AE 363C C65F                  		move.w	#$C680-$21,d3
000038B2 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
000038B6 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000038BA                            
000038BA                            LevSel_NoMove:
000038BA 4E75                       		rts	
000038BC                            ; End of function LevSelControls
000038BC                            
000038BC                            ; ---------------------------------------------------------------------------
000038BC                            ; Subroutine to load level select text
000038BC                            ; ---------------------------------------------------------------------------
000038BC                            
000038BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038BC                            
000038BC                            LevSelTextLoad_loop:
000038BC 2D44 0004                  		move.l	d4,4(a6)
000038C0 6100 0000                  		bsr.w	LevSel_ChgLine
000038C4 0684 0080 0000             		addi.l	#$800000,d4
000038CA 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000038CE 4E75                       		rts
000038D0                            LevSelTextLoad:				; XREF: TitleScreen
000038D0 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000038D6 4DF9 00C0 0000             		lea	($C00000).l,a6
000038DC 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000038E0 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000038E6                            		
000038E6 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000038EA 61D0                       		bsr.s	LevSelTextLoad_loop
000038EC                            		
000038EC                            		
000038EC 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000038F2 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000038F6 61C4                       		bsr.s	LevSelTextLoad_loop
000038F8 363C C65F                  		move.w	#$C680-$21,d3
000038FC                            		
000038FC                            LevSelHighlightCode:
000038FC 4DF9 00C0 0000             		lea	($C00000).l,a6
00003902 7000                       		moveq	#0,d0
00003904 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003908 3200                       		move.w	d0,d1
0000390A 283C 6086 0003             		move.l	#lsscrpos,d4
00003910                            		
00003910 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003914 6D00                       		blt.s	@notsecond
00003916                            		
00003916 0440 0000                  		sub.w	#lsrow1size,d0
0000391A 0684 0024 0000             		addi.l	#lsoff,d4
00003920                            	@notsecond:
00003920 EF48                       		lsl.w	#7,d0
00003922 4840                       		swap	d0
00003924 D880                       		add.l	d0,d4
00003926 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000392C E749                       		lsl.w	#3,d1
0000392E D241                       		add.w	d1,d1
00003930 D2C1                       		adda.w	d1,a1
00003932 2D44 0004                  		move.l	d4,4(a6)
00003936 6100 0000                  		bsr.w	LevSel_ChgLine
0000393A 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003940 6700                       		beq.s	LevSelSndTest
00003942 4E75                       		rts
00003944                            
00003944                            LevSelSndTest:
00003944 0643 0030                  		add.w	#$30,d3
00003948 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003952 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003956 1400                       		move.b	d0,d2
00003958 E808                       		lsr.b	#4,d0
0000395A 6100 0000                  		bsr.w	LevSel_ChgSnd
0000395E 1002                       		move.b	d2,d0
00003960 6100 0000                  		bsr.w	LevSel_ChgSnd
00003964 4E75                       		rts	
00003966                            ; End of function LevSelTextLoad
00003966                            
00003966                            
00003966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003966                            
00003966                            
00003966                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003966 0240 000F                  		andi.w	#$F,d0
0000396A 0C00 000A                  		cmpi.b	#$A,d0
0000396E 6500                       		bcs.s	loc_3580
00003970 5E00                       		addi.b	#7,d0
00003972                            
00003972                            loc_3580:
00003972 D043                       		add.w	d3,d0
00003974 3C80                       		move.w	d0,(a6)
00003976 4E75                       		rts	
00003978                            ; End of function LevSel_ChgSnd
00003978                            
00003978                            
00003978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003978                            
00003978                            
00003978                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003978 740F                       		moveq	#$10-1,d2		; number of characters per line
0000397A                            
0000397A                            @loop:
0000397A 7000                       		moveq	#0,d0
0000397C 1019                       		move.b	(a1)+,d0
0000397E 0C00 0020                  		cmpi.b	#$20,d0
00003982 6E00                       		bgt.s	@draw
00003984 3CBC 0000                  		move.w	#0,(a6)
00003988 51CA FFF0                  		dbf	d2,@loop
0000398C 4E75                       		rts	
0000398E                            ; ===========================================================================
0000398E                            
0000398E                            @draw:				; XREF: LevSel_ChgLine
0000398E D043                       		add.w	d3,d0
00003990 3C80                       		move.w	d0,(a6)
00003992 51CA FFE6                  		dbf	d2,@loop
00003996 4E75                       		rts	
00003998                            ; End of function LevSel_ChgLine
00003998                            		
00003998                            CStringSlop_draw:
00003998 D043                       		add.w	d3,d0
0000399A 3C80                       		move.w	d0,(a6)
0000399C                            CStringSlop:				; XREF: LevSelTextLoad
0000399C 7000                       		moveq	#0,d0
0000399E 1019                       		move.b	(a1)+,d0
000039A0 0C00 0020                  		cmpi.b	#$20,d0
000039A4 6EF2                       		bgt.s	CStringSlop_draw
000039A6                            		
000039A6 0C00 0001                  		cmpi.b	#1,d0
000039AA 6700                       		beq.s	@InsertSpaces
000039AC 6500                       		blo.s	@end
000039AE                            		
000039AE 3CBC 0000                  		move.w	#0,(a6)
000039B2 60E8                       		bra.s	CStringSlop
000039B4                            	@end:
000039B4 4E75                       		rts
000039B6                            	@InsertSpaces:
000039B6 7000                       		moveq	#0,d0
000039B8 1019                       		move.b	(a1)+,d0
000039BA                            		
000039BA                            	@insert:
000039BA 3CBC 0000                  		move.w	#0,(a6)
000039BE 51C8 FFFA                  		dbf.w	d0,@insert
000039C2 60D8                       		bra.s	CStringSlop
000039C4                            ; End of function LevSel_ChgLine
000039C4                            
000039C4                            ; ===========================================================================
000039C4                            ; ---------------------------------------------------------------------------
000039C4                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
000039C4                            ; ---------------------------------------------------------------------------
000039C4                            LevelMenuText:	
000039C4 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000039D4 2020 2020 2020 2020 2020+          dc.b    "               2"
000039E4 2020 2020 2020 2020 2020+          dc.b    "               3"
000039F4 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003A04 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003A14 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A24 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003A34 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A44 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A54 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003A64 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A74 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A84                            LMTSecondRow:
00003A84 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003A94 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003AA4 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AB4 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003AC4 2020 2020 2020 2020 2020+          dc.b    "               2"
00003AD4 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AE4 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003AF4 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003B04 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003B14 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003B24 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003B34                            LMTSelectableEnd:
00003B34 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003B44                            LMTEnd:
00003B44                            
00003B44                            Now_Playing:
00003B44 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003B54                            		even
00003B54                            NP_Track:
00003B54 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003B5C                            		even
00003B5C                            NP_SFX:
00003B5C 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003B64                            		even
00003B64                            
00003B64                            ShowNow_Playing:
00003B64 1C00                       		move.b	d0,d6
00003B66 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003B6A 43FA FFD8                  		lea	Now_Playing(pc),a1
00003B6E 4DF9 00C0 0000             		lea		($C00000).l,a6
00003B74 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003B7C 6100 FE1E                  		bsr.w	CStringSlop
00003B80                            		
00003B80 43FA FFD2                  		lea	NP_Track(pc),a1
00003B84 0C06 00A0                  		cmpi.b	#$A0,d6
00003B88 6D00                       		blt.s	@track
00003B8A                            		
00003B8A 43FA FFD0                  		lea	NP_SFX(pc),a1
00003B8E                            	@track:
00003B8E 6100 FE0C                  		bsr.w	CStringSlop
00003B92                            		
00003B92 0643 0030                  		add.w	#$30,d3
00003B96 1006                       		move.b	d6,d0
00003B98 1400                       		move.b	d0,d2
00003B9A E808                       		lsr.b	#4,d0
00003B9C 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003BA0 1002                       		move.b	d2,d0
00003BA2 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003BA6 4E75                       		rts	
00003BA8                            
00003BA8                            ; 1 is insert spaces btw
00003BA8                            Controls_Normal:
00003BA8 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003BB4                            		even		
00003BB4                            Controls_SND:
00003BB4 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003BDA 00                         		even
00003BDA                            ; ---------------------------------------------------------------------------
00003BDA                            ; Music	playlist
00003BDA                            ; ---------------------------------------------------------------------------
00003BDA                            MusicList1:	incbin	misc\muslist1.bin
00003BE2                            		even
00003BE2                            MusicList2:	incbin	misc\muslist2.bin
00003BE8                            		even
00003BE8                            MusicList3:	incbin	misc\muslist3.bin
00003BEE                            		even
00003BEE                            MusicList4:	incbin	misc\muslist4.bin
00003BF4                            		even
00003BF4                            ; ===========================================================================
00003BF4                            
00003BF4                            ; ---------------------------------------------------------------------------
00003BF4                            ; Level
00003BF4                            ; ---------------------------------------------------------------------------
00003BF4                            
00003BF4                            Level:					; XREF: GameModeArray
00003BF4 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003BFA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003BFE 6B00                       		bmi.s	loc_37B6
00003C00 103C 00E0                  		move.b	#$E0,d0
00003C04 6100 D9BA                  		bsr.w	PlaySound_Special ; fade out music
00003C08                            
00003C08                            loc_37B6:
00003C08 6100 DBF8                  		bsr.w	ClearPLC
00003C0C 6100 E42E                  		bsr.w	Pal_FadeFrom
00003C10 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C14 6B00                       		bmi.s	Level_ClrRam
00003C16 46FC 2700                  		move	#$2700,sr
00003C1A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003C24 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003C2A 6100 DA38                  		bsr.w	NemDec
00003C2E 46FC 2300                  		move	#$2300,sr
00003C32 7000                       		moveq	#0,d0
00003C34 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C38 E948                       		lsl.w	#4,d0
00003C3A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003C40 45F2 0000                  		lea	(a2,d0.w),a2
00003C44 7000                       		moveq	#0,d0
00003C46 1012                       		move.b	(a2),d0
00003C48 6700                       		beq.s	loc_37FC
00003C4A 6100 DB58                  		bsr.w	LoadPLC		; load level patterns
00003C4E                            
00003C4E                            loc_37FC:
00003C4E 7001                       		moveq	#1,d0
00003C50 6100 DB52                  		bsr.w	LoadPLC		; load standard	patterns
00003C54                            
00003C54                            Level_ClrRam:
00003C54 43F8 D000                  		lea	($FFFFD000).w,a1
00003C58 7000                       		moveq	#0,d0
00003C5A 323C 07FF                  		move.w	#$7FF,d1
00003C5E                            
00003C5E                            Level_ClrObjRam:
00003C5E 22C0                       		move.l	d0,(a1)+
00003C60 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003C64                            
00003C64 43F8 F628                  		lea	($FFFFF628).w,a1
00003C68 7000                       		moveq	#0,d0
00003C6A 323C 0015                  		move.w	#$15,d1
00003C6E                            
00003C6E                            Level_ClrVars:
00003C6E 22C0                       		move.l	d0,(a1)+
00003C70 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003C74                            
00003C74 43F8 F700                  		lea	($FFFFF700).w,a1
00003C78 7000                       		moveq	#0,d0
00003C7A 323C 003F                  		move.w	#$3F,d1
00003C7E                            
00003C7E                            Level_ClrVars2:
00003C7E 22C0                       		move.l	d0,(a1)+
00003C80 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003C84                            
00003C84 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003C88 7000                       		moveq	#0,d0
00003C8A 323C 0047                  		move.w	#$47,d1
00003C8E                            
00003C8E                            Level_ClrVars3:
00003C8E 22C0                       		move.l	d0,(a1)+
00003C90 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003C94                            
00003C94 46FC 2700                  		move	#$2700,sr
00003C98 6100 D84E                  		bsr.w	ClearScreen
00003C9C 4DF9 00C0 0004             		lea	($C00004).l,a6
00003CA2 3CBC 8B03                  		move.w	#$8B03,(a6)
00003CA6 3CBC 8230                  		move.w	#$8230,(a6)
00003CAA 3CBC 8407                  		move.w	#$8407,(a6)
00003CAE 3CBC 857C                  		move.w	#$857C,(a6)
00003CB2 3CBC 9001                  		move.w	#$9001,(a6)
00003CB6 3CBC 8004                  		move.w	#$8004,(a6)
00003CBA 3CBC 8720                  		move.w	#$8720,(a6)
00003CBE 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003CC4 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003CC8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CCE 6600                       		bne.s	Level_LoadPal	; if not, branch
00003CD0 3CBC 8014                  		move.w	#$8014,(a6)
00003CD4 7000                       		moveq	#0,d0
00003CD6 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003CDA D040                       		add.w	d0,d0
00003CDC 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003CE2 3031 0000                  		move.w	(a1,d0.w),d0
00003CE6 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003CEA 31C0 F648                  		move.w	d0,($FFFFF648).w
00003CEE 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003CF2 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003CF6 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003CFA 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003D00 6000 0000                  		bra.w	Level_LoadPal
00003D04                            Player_Palette:
00003D04                            		; normal, lz, sbz, blank
00003D04 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003D0C                            		
00003D0C 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003D14                            		; add more player palettes
00003D14                            Level_LoadPal:
00003D14 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003D1A 46FC 2300                  		move	#$2300,sr
00003D1E                            
00003D1E 7200                       		moveq	#0,d1
00003D20 1238 FFE8                  		move.b	(v_character),d1
00003D24 D241                       		add.w	d1,d1
00003D26 D241                       		add.w	d1,d1
00003D28 D241                       		add.w	d1,d1
00003D2A 303B 10D8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003D2E                            		
00003D2E 6100 E5D2                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003D32 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D38 6600                       		bne.s	Level_GetBgm	; if not, branch
00003D3A 303B 10CA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003D3E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003D44 6600                       		bne.s	Level_WaterPal	; if not, branch
00003D46 303B 10C0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003D4A                            
00003D4A                            Level_WaterPal:
00003D4A 6100 E5CE                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003D4E 4A38 FE30                  		tst.b	($FFFFFE30).w
00003D52 6700                       		beq.s	Level_GetBgm
00003D54 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003D5A                            
00003D5A                            ; NineKode begins here - How to play different songs on different acts
00003D5A                             
00003D5A                            Level_GetBgm:
00003D5A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D5E 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003D62 7000                       		moveq	#0,d0
00003D64 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D68                             
00003D68 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003D6E 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003D70 43F9 0000 3BDA             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003D76 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D78                             
00003D78                            Level_GetBgm2:
00003D78 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003D7E 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003D80 43F9 0000 3BE2             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003D86 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D88                             
00003D88                            Level_GetBgm3:
00003D88 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003D8E 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003D90 43F9 0000 3BE8             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003D96 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D98                             
00003D98                            Level_GetBgm4:
00003D98 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003D9E 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003DA0 43F9 0000 3BEE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003DA6                             
00003DA6                            Level_PlayBgm:
00003DA6 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003DAA 6100 D80E                  		bsr.w	PlaySound	; play music
00003DAE 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003DB4                             
00003DB4                            ; NineKode ends here
00003DB4                            
00003DB4                            Level_TtlCard:
00003DB4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003DBA 6100 EE76                  		bsr.w	DelayProgram
00003DBE 4EB9 0000 0000             		jsr	ObjectsLoad
00003DC4 4EB9 0000 0000             		jsr	BuildSprites
00003DCA 6100 DA44                  		bsr.w	RunPLC_RAM
00003DCE 3038 D108                  		move.w	($FFFFD108).w,d0
00003DD2 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003DD6 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003DD8 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003DDC 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003DDE 4EB9 0000 0000             		jsr	Hud_Base
00003DE4                            
00003DE4                            loc_3946:
00003DE4 7003                       		moveq	#3,d0
00003DE6 6100 E4FE                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003DEA 6100 0000                  		bsr.w	LevelSizeLoad
00003DEE 6100 0000                  		bsr.w	DeformBgLayer
00003DF2 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003DF8 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003DFC 6100 0000                  		bsr.w	LoadTilesFromStart
00003E00 4EB9 0000 0000             		jsr	FloorLog_Unk
00003E06 6100 0000                  		bsr.w	ColIndexLoad
00003E0A 6100 0000                  		bsr.w	LZWaterEffects
00003E0E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003E14 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E18 6B00                       		bmi.s	Level_ChkDebug
00003E1A 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003E20                            
00003E20                            Level_ChkDebug:
00003E20 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003E24 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E26 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003E2C 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E2E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003E34                            
00003E34                            Level_ChkWater:
00003E34 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003E3A 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003E40 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E46 6600                       		bne.s	Level_LoadObj	; if not, branch
00003E48 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003E4E 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003E54 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003E5A 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003E60                            
00003E60                            Level_LoadObj:
00003E60 4EB9 0000 0000             		jsr	ObjPosLoad
00003E66 4EB9 0000 0000             		jsr	ObjectsLoad
00003E6C 4EB9 0000 0000             		jsr	BuildSprites
00003E72 7000                       		moveq	#0,d0
00003E74 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003E78 6600                       		bne.s	loc_39E8	; if yes, branch
00003E7A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E7E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E82 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003E86                            
00003E86                            loc_39E8:
00003E86 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003E8A 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003E8E 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003E92 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003E96                            		; move.b	d0,($FFFFFE2F).w
00003E96 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003E9C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003EA0 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003EA4 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003EA8 6100 0000                  		bsr.w	OscillateNumInit
00003EAC 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003EB2 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003EB8 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003EBE 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003EC4 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003ECA 7000                       		moveq	#0,d0
00003ECC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003ED0 E548                       		lsl.w	#2,d0
00003ED2 2271 0000                  		movea.l	(a1,d0.w),a1
00003ED6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003EDA 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003EDC 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003EE2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003EE6 5340                       		subq.w	#1,d0
00003EE8 E548                       		lsl.w	#2,d0
00003EEA 2271 0000                  		movea.l	(a1,d0.w),a1
00003EEE                            
00003EEE                            Level_Demo:
00003EEE 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003EF4 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003EF8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003EFE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F02 6A00                       		bpl.s	Level_ChkWaterPal
00003F04 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003F0A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003F10 6600                       		bne.s	Level_ChkWaterPal
00003F12 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003F18                            
00003F18                            Level_ChkWaterPal:
00003F18 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003F1E 6600                       		bne.s	Level_Delay	; if not, branch
00003F20 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003F22 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003F28 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003F2A 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003F2C                            
00003F2C                            Level_WaterPal2:
00003F2C 6100 E408                  		bsr.w	PalLoad4_Water
00003F30                            
00003F30                            Level_Delay:
00003F30 323C 0003                  		move.w	#3,d1
00003F34                            
00003F34                            Level_DelayLoop:
00003F34 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F3A 6100 ECF6                  		bsr.w	DelayProgram
00003F3E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003F42                            
00003F42 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003F48 6100 E052                  		bsr.w	Pal_FadeTo2
00003F4C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F50 6B00                       		bmi.s	Level_ClrCardArt
00003F52 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003F56 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003F5A 5838 D124                  		addq.b	#4,($FFFFD124).w
00003F5E 5838 D164                  		addq.b	#4,($FFFFD164).w
00003F62 6000                       		bra.s	Level_StartGame
00003F64                            ; ===========================================================================
00003F64                            
00003F64                            Level_ClrCardArt:
00003F64 7002                       		moveq	#2,d0
00003F66 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
00003F6C 7000                       		moveq	#0,d0
00003F6E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F72 0640 0015                  		addi.w	#$15,d0
00003F76 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003F7C                            
00003F7C                            Level_StartGame:
00003F7C 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003F82                            
00003F82                            ; ---------------------------------------------------------------------------
00003F82                            ; Main level loop (when	all title card and loading sequences are finished)
00003F82                            ; ---------------------------------------------------------------------------
00003F82                            
00003F82                            Level_MainLoop:
00003F82 6100 D648                  		bsr.w	PauseGame
00003F86 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F8C 6100 ECA4                  		bsr.w	DelayProgram
00003F90 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003F94 6100 0000                  		bsr.w	MoveSonicInDemo
00003F98 6100 0000                  		bsr.w	LZWaterEffects
00003F9C 4EB9 0000 0000             		jsr	ObjectsLoad
00003FA2 4A78 FE08                  		tst.w	($FFFFFE08).w
00003FA6 6600                       		bne.s	loc_3B10
00003FA8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003FAE 6400                       		bcc.s	loc_3B14
00003FB0                            
00003FB0                            loc_3B10:
00003FB0 6100 0000                  		bsr.w	DeformBgLayer
00003FB4                            
00003FB4                            loc_3B14:
00003FB4 4EB9 0000 0000             		jsr	BuildSprites
00003FBA 4EB9 0000 0000             		jsr	ObjPosLoad
00003FC0 6100 DB9E                  		bsr.w	PalCycle_Load
00003FC4 6100 D84A                  		bsr.w	RunPLC_RAM
00003FC8 6100 0000                  		bsr.w	OscillateNumDo
00003FCC 6100 0000                  		bsr.w	ChangeRingFrame
00003FD0 6100 0000                  		bsr.w	SignpostArtLoad
00003FD4 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003FDA 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003FDC 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003FE0 6600 FC12                  		bne.w	Level		; if yes, branch
00003FE4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003FEA 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003FEE 4E75                       		rts	
00003FF0                            ; ===========================================================================
00003FF0                            
00003FF0                            Level_ChkDemo:				; XREF: Level_MainLoop
00003FF0 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003FF4 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003FF6 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003FFA 6700                       		beq.s	Level_EndDemo	; if not, branch
00003FFC 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004002 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00004006 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000400C 4E75                       		rts	
0000400E                            ; ===========================================================================
0000400E                            
0000400E                            Level_EndDemo:				; XREF: Level_ChkDemo
0000400E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00004014 6600                       		bne.s	loc_3B88	; if not, branch
00004016 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000401C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004020 6A00                       		bpl.s	loc_3B88	; if yes, branch
00004022 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00004028                            
00004028                            loc_3B88:
00004028 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
0000402E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004034 4278 F794                  		clr.w	($FFFFF794).w
00004038                            
00004038                            loc_3B98:
00004038 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000403E 6100 EBF2                  		bsr.w	DelayProgram
00004042 6100 0000                  		bsr.w	MoveSonicInDemo
00004046 4EB9 0000 0000             		jsr	ObjectsLoad
0000404C 4EB9 0000 0000             		jsr	BuildSprites
00004052 4EB9 0000 0000             		jsr	ObjPosLoad
00004058 5378 F794                  		subq.w	#1,($FFFFF794).w
0000405C 6A00                       		bpl.s	loc_3BC8
0000405E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004064 6100 DFF6                  		bsr.w	Pal_FadeOut
00004068                            
00004068                            loc_3BC8:
00004068 4A78 F614                  		tst.w	($FFFFF614).w
0000406C 66CA                       		bne.s	loc_3B98
0000406E 4E75                       		rts	
00004070                            ; ===========================================================================
00004070                            ; ---------------------------------------------------------------------------
00004070                            ; Subroutine to	do special water effects in Labyrinth Zone
00004070                            ; ---------------------------------------------------------------------------
00004070                            
00004070                            LZWaterEffects:				; XREF: Level
00004070 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004076 6600                       		bne.s	locret_3C28	; if not, branch
00004078 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000407E 6400                       		bcc.s	LZMoveWater
00004080 6100 0000                  		bsr.w	LZWindTunnels
00004084 6100 0000                  		bsr.w	LZWaterSlides
00004088 6100 0000                  		bsr.w	LZDynamicWater
0000408C                            
0000408C                            LZMoveWater:
0000408C 4238 F64E                  		clr.b	($FFFFF64E).w
00004090 7000                       		moveq	#0,d0
00004092 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004096 E248                       		lsr.w	#1,d0
00004098 D078 F648                  		add.w	($FFFFF648).w,d0
0000409C 31C0 F646                  		move.w	d0,($FFFFF646).w
000040A0 3038 F646                  		move.w	($FFFFF646).w,d0
000040A4 9078 F704                  		sub.w	($FFFFF704).w,d0
000040A8 6400                       		bcc.s	loc_3C1A
000040AA 4A40                       		tst.w	d0
000040AC 6A00                       		bpl.s	loc_3C1A
000040AE 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000040B4 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000040BA                            
000040BA                            loc_3C1A:
000040BA 0C40 00DF                  		cmpi.w	#$DF,d0
000040BE 6500                       		bcs.s	loc_3C24
000040C0 303C 00DF                  		move.w	#$DF,d0
000040C4                            
000040C4                            loc_3C24:
000040C4 11C0 F625                  		move.b	d0,($FFFFF625).w
000040C8                            
000040C8                            locret_3C28:
000040C8 4E75                       		rts	
000040CA                            ; ===========================================================================
000040CA                            ; ---------------------------------------------------------------------------
000040CA                            ; Labyrinth default water heights
000040CA                            ; ---------------------------------------------------------------------------
000040CA                            WaterHeight:	incbin	misc\lz_heigh.bin
000040D2                            		even
000040D2                            ; ===========================================================================
000040D2                            
000040D2                            ; ---------------------------------------------------------------------------
000040D2                            ; Labyrinth dynamic water routines
000040D2                            ; ---------------------------------------------------------------------------
000040D2                            
000040D2                            LZDynamicWater:				; XREF: LZWaterEffects
000040D2 7000                       		moveq	#0,d0
000040D4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000040D8 D040                       		add.w	d0,d0
000040DA 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000040DE 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000040E2 7200                       		moveq	#0,d1
000040E4 1238 F64C                  		move.b	($FFFFF64C).w,d1
000040E8 3038 F64A                  		move.w	($FFFFF64A).w,d0
000040EC 9078 F648                  		sub.w	($FFFFF648).w,d0
000040F0 6700                       		beq.s	locret_3C5A
000040F2 6400                       		bcc.s	loc_3C56
000040F4 4441                       		neg.w	d1
000040F6                            
000040F6                            loc_3C56:
000040F6 D378 F648                  		add.w	d1,($FFFFF648).w
000040FA                            
000040FA                            locret_3C5A:
000040FA 4E75                       		rts	
000040FC                            ; ===========================================================================
000040FC 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000040FE 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004100 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004102 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004104                            ; ===========================================================================
00004104                            
00004104                            DynWater_LZ1:				; XREF: DynWater_Index
00004104 3038 F700                  		move.w	($FFFFF700).w,d0
00004108 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000410C 6600                       		bne.s	loc_3CD0
0000410E 323C 00B8                  		move.w	#$B8,d1
00004112 0C40 0600                  		cmpi.w	#$600,d0
00004116 6500                       		bcs.s	loc_3CB4
00004118 323C 0108                  		move.w	#$108,d1
0000411C 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004122 6500                       		bcs.s	loc_3CBA
00004124 0C40 0C00                  		cmpi.w	#$C00,d0
00004128 6500                       		bcs.s	loc_3CB4
0000412A 323C 0318                  		move.w	#$318,d1
0000412E 0C40 1080                  		cmpi.w	#$1080,d0
00004132 6500                       		bcs.s	loc_3CB4
00004134 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000413A 323C 05C8                  		move.w	#$5C8,d1
0000413E 0C40 1380                  		cmpi.w	#$1380,d0
00004142 6500                       		bcs.s	loc_3CB4
00004144 323C 03A8                  		move.w	#$3A8,d1
00004148 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000414C 6600                       		bne.s	loc_3CB4
0000414E 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004154                            
00004154                            loc_3CB4:
00004154 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004158 4E75                       		rts	
0000415A                            ; ===========================================================================
0000415A                            
0000415A                            loc_3CBA:				; XREF: DynWater_LZ1
0000415A 0C40 0C80                  		cmpi.w	#$C80,d0
0000415E 65F4                       		bcs.s	loc_3CB4
00004160 323C 00E8                  		move.w	#$E8,d1
00004164 0C40 1500                  		cmpi.w	#$1500,d0
00004168 65EA                       		bcs.s	loc_3CB4
0000416A 323C 0108                  		move.w	#$108,d1
0000416E 60E4                       		bra.s	loc_3CB4
00004170                            ; ===========================================================================
00004170                            
00004170                            loc_3CD0:				; XREF: DynWater_LZ1
00004170 5302                       		subq.b	#1,d2
00004172 6600                       		bne.s	locret_3CF4
00004174 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000417A 6400                       		bcc.s	locret_3CF4
0000417C 323C 03A8                  		move.w	#$3A8,d1
00004180 0C40 1300                  		cmpi.w	#$1300,d0
00004184 6500                       		bcs.s	loc_3CF0
00004186 323C 0108                  		move.w	#$108,d1
0000418A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004190                            
00004190                            loc_3CF0:
00004190 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004194                            
00004194                            locret_3CF4:
00004194 4E75                       		rts	
00004196                            ; ===========================================================================
00004196                            
00004196                            DynWater_LZ2:				; XREF: DynWater_Index
00004196 3038 F700                  		move.w	($FFFFF700).w,d0
0000419A 323C 0328                  		move.w	#$328,d1
0000419E 0C40 0500                  		cmpi.w	#$500,d0
000041A2 6500                       		bcs.s	loc_3D12
000041A4 323C 03C8                  		move.w	#$3C8,d1
000041A8 0C40 0B00                  		cmpi.w	#$B00,d0
000041AC 6500                       		bcs.s	loc_3D12
000041AE 323C 0428                  		move.w	#$428,d1
000041B2                            
000041B2                            loc_3D12:
000041B2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041B6 4E75                       		rts	
000041B8                            ; ===========================================================================
000041B8                            
000041B8                            DynWater_LZ3:				; XREF: DynWater_Index
000041B8 3038 F700                  		move.w	($FFFFF700).w,d0
000041BC 1438 F64D                  		move.b	($FFFFF64D).w,d2
000041C0 6600                       		bne.s	loc_3D5E
000041C2 323C 0500                  		move.w	#$500,d1
000041C6 0C40 0600                  		cmpi.w	#$600,d0
000041CA 6500                       		bcs.s	loc_3D54
000041CC 0C40 1B00                  		cmpi.w	#$1B00,d0
000041D0 6500                       		bcs.s	loc_3D54
000041D2 323C 0850                  		move.w	#$850,d1
000041D6                            
000041D6                            loc_3D54:
000041D6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041DA 31C1 F648                  		move.w	d1,($FFFFF648).w
000041DE 4E75                       		rts	
000041E0                            ; ===========================================================================
000041E0                            
000041E0                            loc_3D5E:				; XREF: DynWater_LZ3
000041E0 5302                       		subq.b	#1,d2
000041E2 6600                       		bne.s	loc_3DA8
000041E4 323C 04C8                  		move.w	#$4C8,d1
000041E8 0C40 0770                  		cmpi.w	#$770,d0
000041EC 6500                       		bcs.s	loc_3DA2
000041EE 323C 0308                  		move.w	#$308,d1
000041F2 0C40 1400                  		cmpi.w	#$1400,d0
000041F6 6500                       		bcs.s	loc_3DA2
000041F8 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000041FE 6700                       		beq.s	loc_3D8E
00004200 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004206 6400                       		bcc.s	loc_3D8E
00004208 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
0000420E 6400                       		bcc.s	loc_3DA2
00004210                            
00004210                            loc_3D8E:
00004210 323C 0508                  		move.w	#$508,d1
00004214 31C1 F648                  		move.w	d1,($FFFFF648).w
00004218 0C40 1770                  		cmpi.w	#$1770,d0
0000421C 6500                       		bcs.s	loc_3DA2
0000421E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004224                            
00004224                            loc_3DA2:
00004224 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004228 4E75                       		rts	
0000422A                            ; ===========================================================================
0000422A                            
0000422A                            loc_3DA8:
0000422A 5302                       		subq.b	#1,d2
0000422C 6600                       		bne.s	loc_3DD2
0000422E 323C 0508                  		move.w	#$508,d1
00004232 0C40 1860                  		cmpi.w	#$1860,d0
00004236 6500                       		bcs.s	loc_3DCC
00004238 323C 0188                  		move.w	#$188,d1
0000423C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004240 6400                       		bcc.s	loc_3DC6
00004242 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004246 6600                       		bne.s	loc_3DCC
00004248                            
00004248                            loc_3DC6:
00004248 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000424E                            
0000424E                            loc_3DCC:
0000424E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004252 4E75                       		rts	
00004254                            ; ===========================================================================
00004254                            
00004254                            loc_3DD2:
00004254 5302                       		subq.b	#1,d2
00004256 6600                       		bne.s	loc_3E0E
00004258 323C 0188                  		move.w	#$188,d1
0000425C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004260 6500                       		bcs.s	loc_3E04
00004262 323C 0900                  		move.w	#$900,d1
00004266 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000426A 6500                       		bcs.s	loc_3E04
0000426C 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004272 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004278 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000427E 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004284 4E75                       		rts	
00004286                            ; ===========================================================================
00004286                            
00004286                            loc_3E04:
00004286 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000428A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000428E 4E75                       		rts	
00004290                            ; ===========================================================================
00004290                            
00004290                            loc_3E0E:
00004290 0C40 1E00                  		cmpi.w	#$1E00,d0
00004294 6500                       		bcs.s	locret_3E1A
00004296 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000429C                            
0000429C                            locret_3E1A:
0000429C 4E75                       		rts	
0000429E                            ; ===========================================================================
0000429E                            
0000429E                            DynWater_SBZ3:				; XREF: DynWater_Index
0000429E 323C 0228                  		move.w	#$228,d1
000042A2 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000042A8 6500                       		bcs.s	loc_3E2C
000042AA 323C 04C8                  		move.w	#$4C8,d1
000042AE                            
000042AE                            loc_3E2C:
000042AE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042B2 4E75                       		rts
000042B4                            
000042B4                            ; ---------------------------------------------------------------------------
000042B4                            ; Labyrinth Zone "wind tunnels"	subroutine
000042B4                            ; ---------------------------------------------------------------------------
000042B4                            
000042B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042B4                            
000042B4                            
000042B4                            LZWindTunnels:				; XREF: LZWaterEffects
000042B4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000042B8 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000042BC 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000042C2 7000                       		moveq	#0,d0
000042C4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042C8 E748                       		lsl.w	#3,d0
000042CA D4C0                       		adda.w	d0,a2
000042CC 7200                       		moveq	#0,d1
000042CE 4A38 FE11                  		tst.b	($FFFFFE11).w
000042D2 6600                       		bne.s	loc_3E56
000042D4 7201                       		moveq	#1,d1
000042D6 514A                       		subq.w	#8,a2
000042D8                            
000042D8                            loc_3E56:
000042D8 43F8 D000                  		lea	($FFFFD000).w,a1
000042DC                            
000042DC                            LZWind_Loop:
000042DC 3029 0008                  		move.w	8(a1),d0
000042E0 B052                       		cmp.w	(a2),d0
000042E2 6500 0000                  		bcs.w	loc_3EF4
000042E6 B06A 0004                  		cmp.w	4(a2),d0
000042EA 6400 0000                  		bcc.w	loc_3EF4
000042EE 3429 000C                  		move.w	$C(a1),d2
000042F2 B46A 0002                  		cmp.w	2(a2),d2
000042F6 6500                       		bcs.s	loc_3EF4
000042F8 B46A 0006                  		cmp.w	6(a2),d2
000042FC 6400                       		bcc.s	loc_3EF4
000042FE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004302 0200 003F                  		andi.b	#$3F,d0
00004306 6600                       		bne.s	loc_3E90
00004308 303C 00D0                  		move.w	#$D0,d0
0000430C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004312                            
00004312                            loc_3E90:
00004312 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004316 6600 0000                  		bne.w	locret_3F0A
0000431A 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004320 6400                       		bcc.s	loc_3F06
00004322 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004328 0440 0080                  		subi.w	#$80,d0
0000432C B052                       		cmp.w	(a2),d0
0000432E 6400                       		bcc.s	LZWind_Move
00004330 7002                       		moveq	#2,d0
00004332 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004338 6600                       		bne.s	loc_3EBA
0000433A 4440                       		neg.w	d0
0000433C                            
0000433C                            loc_3EBA:
0000433C D169 000C                  		add.w	d0,$C(a1)
00004340                            
00004340                            LZWind_Move:
00004340 5869 0008                  		addq.w	#4,8(a1)
00004344 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000434A 337C 0000 0012             		move.w	#0,$12(a1)
00004350 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004356 08E9 0001 0022             		bset	#1,$22(a1)
0000435C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004362 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004364 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004368                            
00004368                            LZWind_MoveDown:
00004368 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000436E 6700                       		beq.s	locret_3EF2	; if not, branch
00004370 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004374                            
00004374                            locret_3EF2:
00004374 4E75                       		rts	
00004376                            ; ===========================================================================
00004376                            
00004376                            loc_3EF4:				; XREF: LZWindTunnels
00004376 504A                       		addq.w	#8,a2
00004378 51C9 FF62                  		dbf	d1,LZWind_Loop
0000437C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004380 6700                       		beq.s	locret_3F0A
00004382 137C 0000 001C             		move.b	#0,$1C(a1)
00004388                            
00004388                            loc_3F06:
00004388 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000438C                            
0000438C                            locret_3F0A:
0000438C 4E75                       		rts	
0000438E                            ; End of function LZWindTunnels
0000438E                            
0000438E                            ; ===========================================================================
0000438E 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004396 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000043A8 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000043B6                            					; XREF: LZWindTunnels
000043B6                            		even
000043B6                            
000043B6                            ; ---------------------------------------------------------------------------
000043B6                            ; Labyrinth Zone water slide subroutine
000043B6                            ; ---------------------------------------------------------------------------
000043B6                            
000043B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000043B6                            
000043B6                            
000043B6                            LZWaterSlides:				; XREF: LZWaterEffects
000043B6 43F8 D000                  		lea	($FFFFD000).w,a1
000043BA 0829 0001 0022             		btst	#1,$22(a1)
000043C0 6600                       		bne.s	loc_3F6A
000043C2 3029 000C                  		move.w	$C(a1),d0
000043C6 E248                       		lsr.w	#1,d0
000043C8 0240 0380                  		andi.w	#$380,d0
000043CC 1229 0008                  		move.b	8(a1),d1
000043D0 0241 007F                  		andi.w	#$7F,d1
000043D4 D041                       		add.w	d1,d0
000043D6 45F8 A400                  		lea	($FFFFA400).w,a2
000043DA 1032 0000                  		move.b	(a2,d0.w),d0
000043DE 45FA 0000                  		lea	byte_3FCF(pc),a2
000043E2 7206                       		moveq	#6,d1
000043E4                            
000043E4                            loc_3F62:
000043E4 B022                       		cmp.b	-(a2),d0
000043E6 57C9 FFFC                  		dbeq	d1,loc_3F62
000043EA 6700                       		beq.s	LZSlide_Move
000043EC                            
000043EC                            loc_3F6A:
000043EC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000043F0 6700                       		beq.s	locret_3F7A
000043F2 337C 0005 003E             		move.w	#5,$3E(a1)
000043F8 4238 F7CA                  		clr.b	($FFFFF7CA).w
000043FC                            
000043FC                            locret_3F7A:
000043FC 4E75                       		rts	
000043FE                            ; ===========================================================================
000043FE                            
000043FE                            LZSlide_Move:				; XREF: LZWaterSlides
000043FE 0C41 0003                  		cmpi.w	#3,d1
00004402 6400                       		bcc.s	loc_3F84
00004404 4E71                       		nop	
00004406                            
00004406                            loc_3F84:
00004406 08A9 0000 0022             		bclr	#0,$22(a1)
0000440C 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004410 1340 0014                  		move.b	d0,$14(a1)
00004414 6A00                       		bpl.s	loc_3F9A
00004416 08E9 0000 0022             		bset	#0,$22(a1)
0000441C                            
0000441C                            loc_3F9A:
0000441C 4229 0015                  		clr.b	$15(a1)
00004420 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004426 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
0000442C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004430 0200 001F                  		andi.b	#$1F,d0
00004434 6600                       		bne.s	locret_3FBE
00004436 303C 00D0                  		move.w	#$D0,d0
0000443A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play water sound
00004440                            
00004440                            locret_3FBE:
00004440 4E75                       		rts	
00004442                            ; End of function LZWaterSlides
00004442                            
00004442                            ; ===========================================================================
00004442 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004451 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004452                            		even
00004452                            
00004452                            ; ---------------------------------------------------------------------------
00004452                            ; Subroutine to	move Sonic in demo mode
00004452                            ; ---------------------------------------------------------------------------
00004452                            
00004452                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004452                            
00004452                            
00004452                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004452 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004456 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004458 4E75                       		rts	
0000445A                            ; ===========================================================================
0000445A                            
0000445A                            ; This is an unused subroutine for recording a demo
0000445A                            
0000445A                            MoveDemo_Record:
0000445A 43F9 0008 0000             		lea	($80000).l,a1
00004460 3038 F790                  		move.w	($FFFFF790).w,d0
00004464 D2C0                       		adda.w	d0,a1
00004466 1038 F604                  		move.b	($FFFFF604).w,d0
0000446A B011                       		cmp.b	(a1),d0
0000446C 6600                       		bne.s	loc_3FFA
0000446E 5229 0001                  		addq.b	#1,1(a1)
00004472 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004478 6700                       		beq.s	loc_3FFA
0000447A 4E75                       		rts	
0000447C                            ; ===========================================================================
0000447C                            
0000447C                            loc_3FFA:				; XREF: MoveDemo_Record
0000447C 1340 0002                  		move.b	d0,2(a1)
00004480 137C 0000 0003             		move.b	#0,3(a1)
00004486 5478 F790                  		addq.w	#2,($FFFFF790).w
0000448A 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004490 4E75                       		rts	
00004492                            ; ===========================================================================
00004492                            
00004492                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004492 4A38 F604                  		tst.b	($FFFFF604).w
00004496 6A00                       		bpl.s	loc_4022
00004498 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000449C 6B00                       		bmi.s	loc_4022
0000449E 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000044A4                            
000044A4                            loc_4022:
000044A4 43F9 0000 0000             		lea	(Demo_Index).l,a1
000044AA 7000                       		moveq	#0,d0
000044AC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000044B0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000044B6 6600                       		bne.s	loc_4038
000044B8 7006                       		moveq	#6,d0
000044BA                            
000044BA                            loc_4038:
000044BA E548                       		lsl.w	#2,d0
000044BC 2271 0000                  		movea.l	(a1,d0.w),a1
000044C0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044C4 6A00                       		bpl.s	loc_4056
000044C6 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000044CC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000044D0 5340                       		subq.w	#1,d0
000044D2 E548                       		lsl.w	#2,d0
000044D4 2271 0000                  		movea.l	(a1,d0.w),a1
000044D8                            
000044D8                            loc_4056:
000044D8 3038 F790                  		move.w	($FFFFF790).w,d0
000044DC D2C0                       		adda.w	d0,a1
000044DE 1011                       		move.b	(a1),d0
000044E0 41F8 F604                  		lea	($FFFFF604).w,a0
000044E4 1200                       		move.b	d0,d1
000044E6 1410                       		move.b	(a0),d2
000044E8 B500                       		eor.b	d2,d0
000044EA 10C1                       		move.b	d1,(a0)+
000044EC C001                       		and.b	d1,d0
000044EE 10C0                       		move.b	d0,(a0)+
000044F0 5338 F792                  		subq.b	#1,($FFFFF792).w
000044F4 6400                       		bcc.s	locret_407E
000044F6 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000044FC 5478 F790                  		addq.w	#2,($FFFFF790).w
00004500                            
00004500                            locret_407E:
00004500 4E75                       		rts	
00004502                            ; End of function MoveSonicInDemo
00004502                            
00004502                            ; ===========================================================================
00004502                            ; ---------------------------------------------------------------------------
00004502                            ; Demo sequence	pointers
00004502                            ; ---------------------------------------------------------------------------
00004502                            Demo_Index:
00004502                            	include "_inc\Demo pointers for intro.asm"
00004502                            ; ---------------------------------------------------------------------------
00004502                            ; Demo sequence	pointers
00004502                            ; ---------------------------------------------------------------------------
00004502 0000 0000                  	dc.l Demo_GHZ
00004506 0000 0000                  	dc.l Demo_GHZ
0000450A 0000 0000                  	dc.l Demo_MZ
0000450E 0000 0000                  	dc.l Demo_MZ
00004512 0000 0000                  	dc.l Demo_SYZ
00004516 0000 0000                  	dc.l Demo_SYZ
0000451A 0000 0000                  	dc.l Demo_SS
0000451E 0000 0000                  	dc.l Demo_SS
0000451E 0000 0000                  	dc.l Demo_SS
00004522                            
00004522                            Demo_EndIndex:
00004522                            	include "_inc\Demo pointers for ending.asm"
00004522                            ; ---------------------------------------------------------------------------
00004522                            ; Demo (ending) sequence pointers
00004522                            ; ---------------------------------------------------------------------------
00004522 0000 0000                  	dc.l Demo_EndGHZ1
00004526 0000 0000                  	dc.l Demo_EndMZ
0000452A 0000 0000                  	dc.l Demo_EndSYZ
0000452E 0000 0000                  	dc.l Demo_EndLZ
00004532 0000 0000                  	dc.l Demo_EndSLZ
00004536 0000 0000                  	dc.l Demo_EndSBZ1
0000453A 0000 0000                  	dc.l Demo_EndSBZ2
0000453E 0000 0000                  	dc.l Demo_EndGHZ2
0000453E 0000 0000                  	dc.l Demo_EndGHZ2
00004542                            
00004542 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004552 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004562 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004572                            		even
00004572                            
00004572                            ; ---------------------------------------------------------------------------
00004572                            ; Collision index loading subroutine
00004572                            ; ---------------------------------------------------------------------------
00004572                            
00004572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004572                            
00004572                            
00004572                            ColIndexLoad:				; XREF: Level
00004572 7000                       		moveq	#0,d0
00004574 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004578 E548                       		lsl.w	#2,d0
0000457A 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004580 4E75                       		rts	
00004582                            ; End of function ColIndexLoad
00004582                            
00004582                            ; ===========================================================================
00004582                            ; ---------------------------------------------------------------------------
00004582                            ; Collision index pointers
00004582                            ; ---------------------------------------------------------------------------
00004582                            ColPointers:
00004582                            	include "_inc\Collision index pointers.asm"
00004582                            ; ---------------------------------------------------------------------------
00004582                            ; Collision index pointers
00004582                            ; ---------------------------------------------------------------------------
00004582 0000 0000                  	dc.l Col_GHZ
00004586 0000 0000                  	dc.l Col_LZ
0000458A 0000 0000                  	dc.l Col_MZ
0000458E 0000 0000                  	dc.l Col_SLZ
00004592 0000 0000                  	dc.l Col_SYZ
00004596 0000 0000                  	dc.l Col_SBZ
00004596 0000 0000                  	dc.l Col_SBZ
0000459A                            
0000459A                            ; ---------------------------------------------------------------------------
0000459A                            ; Oscillating number subroutine
0000459A                            ; ---------------------------------------------------------------------------
0000459A                            
0000459A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000459A                            
0000459A                            
0000459A                            OscillateNumInit:			; XREF: Level
0000459A 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000459E 45F9 0000 0000             		lea	(Osc_Data).l,a2
000045A4 7220                       		moveq	#$20,d1
000045A6                            
000045A6                            Osc_Loop:
000045A6 32DA                       		move.w	(a2)+,(a1)+
000045A8 51C9 FFFC                  		dbf	d1,Osc_Loop
000045AC 4E75                       		rts	
000045AE                            ; End of function OscillateNumInit
000045AE                            
000045AE                            ; ===========================================================================
000045AE 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000045B2 0000 0080                  		dc.w 0,	$80
000045B6 0000 0080                  		dc.w 0,	$80
000045BA 0000 0080                  		dc.w 0,	$80
000045BE 0000 0080                  		dc.w 0,	$80
000045C2 0000 0080                  		dc.w 0,	$80
000045C6 0000 0080                  		dc.w 0,	$80
000045CA 0000 0080                  		dc.w 0,	$80
000045CE 0000 0080                  		dc.w 0,	$80
000045D2 0000 50F0                  		dc.w 0,	$50F0
000045D6 011E 2080                  		dc.w $11E, $2080
000045DA 00B4 3080                  		dc.w $B4, $3080
000045DE 010E 5080                  		dc.w $10E, $5080
000045E2 01C2 7080                  		dc.w $1C2, $7080
000045E6 0276 0080                  		dc.w $276, $80
000045EA 0000 0080                  		dc.w 0,	$80
000045EE 0000                       		dc.w 0
000045F0                            		even
000045F0                            
000045F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045F0                            
000045F0                            
000045F0                            OscillateNumDo:				; XREF: Level
000045F0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000045F6 6400                       		bcc.s	locret_41C4
000045F8 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000045FC 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004602 3619                       		move.w	(a1)+,d3
00004604 720F                       		moveq	#$F,d1
00004606                            
00004606                            loc_4184:
00004606 341A                       		move.w	(a2)+,d2
00004608 381A                       		move.w	(a2)+,d4
0000460A 0303                       		btst	d1,d3
0000460C 6600                       		bne.s	loc_41A4
0000460E 3029 0002                  		move.w	2(a1),d0
00004612 D042                       		add.w	d2,d0
00004614 3340 0002                  		move.w	d0,2(a1)
00004618 D151                       		add.w	d0,0(a1)
0000461A B811                       		cmp.b	0(a1),d4
0000461C 6200                       		bhi.s	loc_41BA
0000461E 03C3                       		bset	d1,d3
00004620 6000                       		bra.s	loc_41BA
00004622                            ; ===========================================================================
00004622                            
00004622                            loc_41A4:				; XREF: OscillateNumDo
00004622 3029 0002                  		move.w	2(a1),d0
00004626 9042                       		sub.w	d2,d0
00004628 3340 0002                  		move.w	d0,2(a1)
0000462C D151                       		add.w	d0,0(a1)
0000462E B811                       		cmp.b	0(a1),d4
00004630 6300                       		bls.s	loc_41BA
00004632 0383                       		bclr	d1,d3
00004634                            
00004634                            loc_41BA:
00004634 5849                       		addq.w	#4,a1
00004636 51C9 FFCE                  		dbf	d1,loc_4184
0000463A 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000463E                            
0000463E                            locret_41C4:
0000463E 4E75                       		rts	
00004640                            ; End of function OscillateNumDo
00004640                            
00004640                            ; ===========================================================================
00004640 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004644 0002 0018                  		dc.w 2,	$18
00004648 0002 0020                  		dc.w 2,	$20
0000464C 0002 0030                  		dc.w 2,	$30
00004650 0004 0020                  		dc.w 4,	$20
00004654 0008 0008                  		dc.w 8,	8
00004658 0008 0040                  		dc.w 8,	$40
0000465C 0004 0040                  		dc.w 4,	$40
00004660 0002 0050                  		dc.w 2,	$50
00004664 0002 0050                  		dc.w 2,	$50
00004668 0002 0020                  		dc.w 2,	$20
0000466C 0003 0030                  		dc.w 3,	$30
00004670 0005 0050                  		dc.w 5,	$50
00004674 0007 0070                  		dc.w 7,	$70
00004678 0002 0010                  		dc.w 2,	$10
0000467C 0002 0010                  		dc.w 2,	$10
00004680                            		even
00004680                            
00004680                            ; ---------------------------------------------------------------------------
00004680                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004680                            ; ---------------------------------------------------------------------------
00004680                            
00004680                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004680                            
00004680                            
00004680                            ChangeRingFrame:			; XREF: Level
00004680 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004684 6A00                       		bpl.s	loc_421C
00004686 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000468C 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004690 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004696                            
00004696                            loc_421C:
00004696 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000469A 6A00                       		bpl.s	loc_4232
0000469C 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000046A2 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000046A6 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000046AC                            
000046AC                            loc_4232:
000046AC 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000046B0 6A00                       		bpl.s	loc_4250
000046B2 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000046B8 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000046BC 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000046C2 6500                       		bcs.s	loc_4250
000046C4 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000046CA                            
000046CA                            loc_4250:
000046CA 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000046CE 6700                       		beq.s	locret_4272
000046D0 7000                       		moveq	#0,d0
000046D2 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000046D6 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000046DA 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000046DE EF58                       		rol.w	#7,d0
000046E0 0240 0003                  		andi.w	#3,d0
000046E4 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000046E8 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000046EC                            
000046EC                            locret_4272:
000046EC 4E75                       		rts	
000046EE                            ; End of function ChangeRingFrame
000046EE                            
000046EE                            ; ---------------------------------------------------------------------------
000046EE                            ; End-of-act signpost pattern loading subroutine
000046EE                            ; ---------------------------------------------------------------------------
000046EE                            
000046EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046EE                            
000046EE                            
000046EE                            SignpostArtLoad:			; XREF: Level
000046EE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000046F2 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000046F6 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000046FC 6700                       		beq.s	Signpost_Exit	; if yes, branch
000046FE 3038 F700                  		move.w	($FFFFF700).w,d0
00004702 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004706 0441 0100                  		subi.w	#$100,d1
0000470A B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000470C 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000470E 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004712 6700                       		beq.s	Signpost_Exit
00004714 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004718 6700                       		beq.s	Signpost_Exit
0000471A 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000471E 7012                       		moveq	#$12,d0
00004720 6000 D0B4                  		bra.w	LoadPLC2	; load signpost	patterns
00004724                            ; ===========================================================================
00004724                            
00004724                            Signpost_Exit:
00004724 4E75                       		rts	
00004726                            ; End of function SignpostArtLoad
00004726                            
00004726                            ; ===========================================================================
00004726                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000047A6                            Demo_MZ:	incbin	demodata\i_mz.bin
000048D6                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004956                            Demo_SS:	incbin	demodata\i_ss.bin
00004A56                            ; ===========================================================================
00004A56                            
00004A56                            ; ---------------------------------------------------------------------------
00004A56                            ; Special Stage
00004A56                            ; ---------------------------------------------------------------------------
00004A56                            
00004A56                            SpecialStage:				; XREF: GameModeArray
00004A56 303C 00CA                  		move.w	#$CA,d0
00004A5A 6100 CB64                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004A5E 6100 D706                  		bsr.w	Pal_MakeFlash
00004A62 46FC 2700                  		move	#$2700,sr
00004A66 4DF9 00C0 0004             		lea	($C00004).l,a6
00004A6C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004A70 3CBC 8004                  		move.w	#$8004,(a6)
00004A74 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004A7A 3CBC 9011                  		move.w	#$9011,(a6)
00004A7E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A82 0200 00BF                  		andi.b	#$BF,d0
00004A86 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A8C 6100 CA5A                  		bsr.w	ClearScreen
00004A90 46FC 2300                  		move	#$2300,sr
00004A94 4BF9 00C0 0004             		lea	($C00004).l,a5
00004A9A 3ABC 8F01                  		move.w	#$8F01,(a5)
00004A9E 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004AA4 3ABC 9780                  		move.w	#$9780,(a5)
00004AA8 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004AAE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004AB6                            
00004AB6                            loc_463C:
00004AB6 3215                       		move.w	(a5),d1
00004AB8 0801 0001                  		btst	#1,d1
00004ABC 66F8                       		bne.s	loc_463C
00004ABE 3ABC 8F02                  		move.w	#$8F02,(a5)
00004AC2 6100 0000                  		bsr.w	SS_BGLoad
00004AC6 7014                       		moveq	#$14,d0
00004AC8 6100 CE46                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004ACC 43F8 D000                  		lea	($FFFFD000).w,a1
00004AD0 7000                       		moveq	#0,d0
00004AD2 323C 07FF                  		move.w	#$7FF,d1
00004AD6                            
00004AD6                            SS_ClrObjRam:
00004AD6 22C0                       		move.l	d0,(a1)+
00004AD8 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004ADC                            
00004ADC 43F8 F700                  		lea	($FFFFF700).w,a1
00004AE0 7000                       		moveq	#0,d0
00004AE2 323C 003F                  		move.w	#$3F,d1
00004AE6                            
00004AE6                            SS_ClrRam:
00004AE6 22C0                       		move.l	d0,(a1)+
00004AE8 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004AEC                            
00004AEC 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004AF0 7000                       		moveq	#0,d0
00004AF2 323C 0027                  		move.w	#$27,d1
00004AF6                            
00004AF6                            SS_ClrRam2:
00004AF6 22C0                       		move.l	d0,(a1)+
00004AF8 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004AFC                            
00004AFC 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004B00 7000                       		moveq	#0,d0
00004B02 323C 007F                  		move.w	#$7F,d1
00004B06                            
00004B06                            SS_ClrNemRam:
00004B06 22C0                       		move.l	d0,(a1)+
00004B08 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004B0C                            
00004B0C 4238 F64E                  		clr.b	($FFFFF64E).w
00004B10 4278 FE02                  		clr.w	($FFFFFE02).w
00004B14 700A                       		moveq	#$A,d0
00004B16 6100 D7CE                  		bsr.w	PalLoad1	; load special stage pallet
00004B1A 4EB9 0000 0000             		jsr	SS_Load
00004B20 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004B28 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004B30 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004B36 6100 0000                  		bsr.w	PalCycle_SS
00004B3A 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004B3E 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004B44 303C 0089                  		move.w	#$89,d0
00004B48 6100 CA70                  		bsr.w	PlaySound	; play special stage BG	music
00004B4C 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004B52 43F9 0000 4502             		lea	(Demo_Index).l,a1
00004B58 7006                       		moveq	#6,d0
00004B5A E548                       		lsl.w	#2,d0
00004B5C 2271 0000                  		movea.l	(a1,d0.w),a1
00004B60 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004B66 5338 F792                  		subq.b	#1,($FFFFF792).w
00004B6A 4278 FE20                  		clr.w	($FFFFFE20).w
00004B6E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004B72 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004B78 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004B7E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004B82 6700                       		beq.s	SS_NoDebug	; if not, branch
00004B84 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004B8A 6700                       		beq.s	SS_NoDebug	; if not, branch
00004B8C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004B92                            
00004B92                            SS_NoDebug:
00004B92 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004B96 0000 0040                  		ori.b	#$40,d0
00004B9A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004BA0 6100 D518                  		bsr.w	Pal_MakeWhite
00004BA4                            
00004BA4                            ; ---------------------------------------------------------------------------
00004BA4                            ; Main Special Stage loop
00004BA4                            ; ---------------------------------------------------------------------------
00004BA4                            
00004BA4                            SS_MainLoop:
00004BA4 6100 CA26                  		bsr.w	PauseGame
00004BA8 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004BAE 6100 E082                  		bsr.w	DelayProgram
00004BB2 6100 F89E                  		bsr.w	MoveSonicInDemo
00004BB6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004BBC 4EB9 0000 0000             		jsr	ObjectsLoad
00004BC2 4EB9 0000 0000             		jsr	BuildSprites
00004BC8 4EB9 0000 0000             		jsr	SS_ShowLayout
00004BCE 6100 0000                  		bsr.w	SS_BGAnimate
00004BD2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004BD6 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004BD8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004BDC 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004BE0                            
00004BE0                            SS_ChkEnd:
00004BE0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004BE6 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004BEA                            
00004BEA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004BEE 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004BF2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004BF8 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004BFE 6500                       		bcs.s	SS_End		; if not, branch
00004C00 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004C04                            
00004C04                            SS_End:
00004C04 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004C0A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004C10 4278 F794                  		clr.w	($FFFFF794).w
00004C14                            
00004C14                            SS_EndLoop:
00004C14 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004C1A 6100 E016                  		bsr.w	DelayProgram
00004C1E 6100 F832                  		bsr.w	MoveSonicInDemo
00004C22 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C28 4EB9 0000 0000             		jsr	ObjectsLoad
00004C2E 4EB9 0000 0000             		jsr	BuildSprites
00004C34 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C3A 6100 0000                  		bsr.w	SS_BGAnimate
00004C3E 5378 F794                  		subq.w	#1,($FFFFF794).w
00004C42 6A00                       		bpl.s	loc_47D4
00004C44 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004C4A 6100 D53A                  		bsr.w	Pal_ToWhite
00004C4E                            
00004C4E                            loc_47D4:
00004C4E 4A78 F614                  		tst.w	($FFFFF614).w
00004C52 66C0                       		bne.s	SS_EndLoop
00004C54                            
00004C54 46FC 2700                  		move	#$2700,sr
00004C58 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C5E 3CBC 8230                  		move.w	#$8230,(a6)
00004C62 3CBC 8407                  		move.w	#$8407,(a6)
00004C66 3CBC 9001                  		move.w	#$9001,(a6)
00004C6A 6100 C87C                  		bsr.w	ClearScreen
00004C6E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004C78 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004C7E 6100 C9E4                  		bsr.w	NemDec
00004C82 4EB9 0000 0000             		jsr	Hud_Base
00004C88 46FC 2300                  		move	#$2300,sr
00004C8C 7011                       		moveq	#$11,d0
00004C8E 6100 D672                  		bsr.w	PalLoad2	; load results screen pallet
00004C92 7000                       		moveq	#0,d0
00004C94 6100 CB40                  		bsr.w	LoadPLC2
00004C98 701B                       		moveq	#$1B,d0
00004C9A 6100 CB08                  		bsr.w	LoadPLC		; load results screen patterns
00004C9E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004CA4 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004CAA 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004CAE C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004CB2 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004CB6 303C 008E                  		move.w	#$8E,d0
00004CBA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004CC0 43F8 D000                  		lea	($FFFFD000).w,a1
00004CC4 7000                       		moveq	#0,d0
00004CC6 323C 07FF                  		move.w	#$7FF,d1
00004CCA                            
00004CCA                            SS_EndClrObjRam:
00004CCA 22C0                       		move.l	d0,(a1)+
00004CCC 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004CD0                            
00004CD0 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004CD6                            
00004CD6                            SS_NormalExit:
00004CD6 6100 C8F4                  		bsr.w	PauseGame
00004CDA 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004CE0 6100 DF50                  		bsr.w	DelayProgram
00004CE4 4EB9 0000 0000             		jsr	ObjectsLoad
00004CEA 4EB9 0000 0000             		jsr	BuildSprites
00004CF0 6100 CB1E                  		bsr.w	RunPLC_RAM
00004CF4 4A78 FE02                  		tst.w	($FFFFFE02).w
00004CF8 67DC                       		beq.s	SS_NormalExit
00004CFA 4AB8 F680                  		tst.l	($FFFFF680).w
00004CFE 66D6                       		bne.s	SS_NormalExit
00004D00 303C 00CA                  		move.w	#$CA,d0
00004D04 6100 C8BA                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004D08 6100 D45C                  		bsr.w	Pal_MakeFlash
00004D0C 4E75                       		rts	
00004D0E                            ; ===========================================================================
00004D0E                            
00004D0E                            SS_ToSegaScreen:
00004D0E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004D14 4E75                       		rts
00004D16                            
00004D16                            ; ---------------------------------------------------------------------------
00004D16                            ; Special stage	background loading subroutine
00004D16                            ; ---------------------------------------------------------------------------
00004D16                            
00004D16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D16                            
00004D16                            
00004D16                            SS_BGLoad:				; XREF: SpecialStage
00004D16 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D1C 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004D22 303C 4051                  		move.w	#$4051,d0
00004D26 6100 CC1A                  		bsr.w	EniDec
00004D2A 263C 5000 0001             		move.l	#$50000001,d3
00004D30 45F9 00FF 0080             		lea	($FF0080).l,a2
00004D36 7E06                       		moveq	#6,d7
00004D38                            
00004D38                            loc_48BE:
00004D38 2003                       		move.l	d3,d0
00004D3A 7C03                       		moveq	#3,d6
00004D3C 7800                       		moveq	#0,d4
00004D3E 0C47 0003                  		cmpi.w	#3,d7
00004D42 6400                       		bcc.s	loc_48CC
00004D44 7801                       		moveq	#1,d4
00004D46                            
00004D46                            loc_48CC:
00004D46 7A07                       		moveq	#7,d5
00004D48                            
00004D48                            loc_48CE:
00004D48 224A                       		movea.l	a2,a1
00004D4A 0A04 0001                  		eori.b	#1,d4
00004D4E 6600                       		bne.s	loc_48E2
00004D50 0C47 0006                  		cmpi.w	#6,d7
00004D54 6600                       		bne.s	loc_48F2
00004D56 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D5C                            
00004D5C                            loc_48E2:
00004D5C 48E7 F800                  		movem.l	d0-d4,-(sp)
00004D60 7207                       		moveq	#7,d1
00004D62 7407                       		moveq	#7,d2
00004D64 6100 C8DE                  		bsr.w	ShowVDPGraphics
00004D68 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004D6C                            
00004D6C                            loc_48F2:
00004D6C 0680 0010 0000             		addi.l	#$100000,d0
00004D72 51CD FFD4                  		dbf	d5,loc_48CE
00004D76 0680 0380 0000             		addi.l	#$3800000,d0
00004D7C 0A04 0001                  		eori.b	#1,d4
00004D80 51CE FFC4                  		dbf	d6,loc_48CC
00004D84 0683 1000 0000             		addi.l	#$10000000,d3
00004D8A 6A00                       		bpl.s	loc_491C
00004D8C 4843                       		swap	d3
00004D8E 0683 0000 C000             		addi.l	#$C000,d3
00004D94 4843                       		swap	d3
00004D96                            
00004D96                            loc_491C:
00004D96 D4FC 0080                  		adda.w	#$80,a2
00004D9A 51CF FF9C                  		dbf	d7,loc_48BE
00004D9E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DA4 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004DAA 303C 4000                  		move.w	#$4000,d0
00004DAE 6100 CB92                  		bsr.w	EniDec
00004DB2 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DB8 203C 4000 0003             		move.l	#$40000003,d0
00004DBE 723F                       		moveq	#$3F,d1
00004DC0 741F                       		moveq	#$1F,d2
00004DC2 6100 C880                  		bsr.w	ShowVDPGraphics
00004DC6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DCC 203C 5000 0003             		move.l	#$50000003,d0
00004DD2 723F                       		moveq	#$3F,d1
00004DD4 743F                       		moveq	#$3F,d2
00004DD6 6100 C86C                  		bsr.w	ShowVDPGraphics
00004DDA 4E75                       		rts	
00004DDC                            ; End of function SS_BGLoad
00004DDC                            
00004DDC                            ; ---------------------------------------------------------------------------
00004DDC                            ; Pallet cycling routine - special stage
00004DDC                            ; ---------------------------------------------------------------------------
00004DDC                            
00004DDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DDC                            
00004DDC                            
00004DDC                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004DDC 4A78 F63A                  		tst.w	($FFFFF63A).w
00004DE0 6600                       		bne.s	locret_49E6
00004DE2 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004DE6 6A00                       		bpl.s	locret_49E6
00004DE8 4DF9 00C0 0004             		lea	($C00004).l,a6
00004DEE 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004DF2 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004DF6 0240 001F                  		andi.w	#$1F,d0
00004DFA E548                       		lsl.w	#2,d0
00004DFC 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004E02 D0C0                       		adda.w	d0,a0
00004E04 1018                       		move.b	(a0)+,d0
00004E06 6A00                       		bpl.s	loc_4992
00004E08 303C 01FF                  		move.w	#$1FF,d0
00004E0C                            
00004E0C                            loc_4992:
00004E0C 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004E10 7000                       		moveq	#0,d0
00004E12 1018                       		move.b	(a0)+,d0
00004E14 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004E18 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004E1E 43F1 0000                  		lea	(a1,d0.w),a1
00004E22 303C 8200                  		move.w	#-$7E00,d0
00004E26 1019                       		move.b	(a1)+,d0
00004E28 3C80                       		move.w	d0,(a6)
00004E2A 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004E2E 303C 8400                  		move.w	#-$7C00,d0
00004E32 1018                       		move.b	(a0)+,d0
00004E34 3C80                       		move.w	d0,(a6)
00004E36 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004E40 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004E48 7000                       		moveq	#0,d0
00004E4A 1018                       		move.b	(a0)+,d0
00004E4C 6B00                       		bmi.s	loc_49E8
00004E4E 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004E54 D2C0                       		adda.w	d0,a1
00004E56 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004E5A 24D9                       		move.l	(a1)+,(a2)+
00004E5C 24D9                       		move.l	(a1)+,(a2)+
00004E5E 24D9                       		move.l	(a1)+,(a2)+
00004E60                            
00004E60                            locret_49E6:
00004E60 4E75                       		rts	
00004E62                            ; ===========================================================================
00004E62                            
00004E62                            loc_49E8:				; XREF: PalCycle_SS
00004E62 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004E66 0C40 008A                  		cmpi.w	#$8A,d0
00004E6A 6500                       		bcs.s	loc_49F4
00004E6C 5241                       		addq.w	#1,d1
00004E6E                            
00004E6E                            loc_49F4:
00004E6E C2FC 002A                  		mulu.w	#$2A,d1
00004E72 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004E78 D2C1                       		adda.w	d1,a1
00004E7A 0240 007F                  		andi.w	#$7F,d0
00004E7E 0880 0000                  		bclr	#0,d0
00004E82 6700                       		beq.s	loc_4A18
00004E84 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004E88 24D1                       		move.l	(a1),(a2)+
00004E8A 24E9 0004                  		move.l	4(a1),(a2)+
00004E8E 24E9 0008                  		move.l	8(a1),(a2)+
00004E92                            
00004E92                            loc_4A18:
00004E92 D2FC 000C                  		adda.w	#$C,a1
00004E96 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004E9A 0C40 000A                  		cmpi.w	#$A,d0
00004E9E 6500                       		bcs.s	loc_4A2E
00004EA0 0440 000A                  		subi.w	#$A,d0
00004EA4 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004EA8                            
00004EA8                            loc_4A2E:
00004EA8 3200                       		move.w	d0,d1
00004EAA D040                       		add.w	d0,d0
00004EAC D041                       		add.w	d1,d0
00004EAE D2C0                       		adda.w	d0,a1
00004EB0 24D9                       		move.l	(a1)+,(a2)+
00004EB2 34D9                       		move.w	(a1)+,(a2)+
00004EB4 4E75                       		rts	
00004EB6                            ; End of function PalCycle_SS
00004EB6                            
00004EB6                            ; ===========================================================================
00004EB6 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004EC6                            					; XREF: PalCycle_SS
00004EC6 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004ED6 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004EE6 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004EF6 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004F06 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004F16 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004F26 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004F36                            		even
00004F36 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004F44                            					; XREF: PalCycle_SS
00004F44                            		even
00004F44                            
00004F44                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004F8C                            		even
00004F8C                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000505E                            		even
0000505E                            
0000505E                            ; ---------------------------------------------------------------------------
0000505E                            ; Subroutine to	make the special stage background animated
0000505E                            ; ---------------------------------------------------------------------------
0000505E                            
0000505E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000505E                            
0000505E                            
0000505E                            SS_BGAnimate:				; XREF: SpecialStage
0000505E 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005062 6600                       		bne.s	loc_4BF6
00005064 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000506A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005070                            
00005070                            loc_4BF6:
00005070 0C40 0008                  		cmpi.w	#8,d0
00005074 6400                       		bcc.s	loc_4C4E
00005076 0C40 0006                  		cmpi.w	#6,d0
0000507A 6600                       		bne.s	loc_4C10
0000507C 5278 F718                  		addq.w	#1,($FFFFF718).w
00005080 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005084 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000508A                            
0000508A                            loc_4C10:
0000508A 7000                       		moveq	#0,d0
0000508C 3038 F708                  		move.w	($FFFFF708).w,d0
00005090 4440                       		neg.w	d0
00005092 4840                       		swap	d0
00005094 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000509A 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000509E 7609                       		moveq	#9,d3
000050A0                            
000050A0                            loc_4C26:
000050A0 302B 0002                  		move.w	2(a3),d0
000050A4 6100 DBBE                  		bsr.w	CalcSine
000050A8 7400                       		moveq	#0,d2
000050AA 1419                       		move.b	(a1)+,d2
000050AC C1C2                       		muls.w	d2,d0
000050AE E080                       		asr.l	#8,d0
000050B0 36C0                       		move.w	d0,(a3)+
000050B2 1419                       		move.b	(a1)+,d2
000050B4 4882                       		ext.w	d2
000050B6 D55B                       		add.w	d2,(a3)+
000050B8 51CB FFE6                  		dbf	d3,loc_4C26
000050BC 47F8 AA00                  		lea	($FFFFAA00).w,a3
000050C0 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000050C6 6000                       		bra.s	loc_4C7E
000050C8                            ; ===========================================================================
000050C8                            
000050C8                            loc_4C4E:				; XREF: SS_BGAnimate
000050C8 0C40 000C                  		cmpi.w	#$C,d0
000050CC 6600                       		bne.s	loc_4C74
000050CE 5378 F718                  		subq.w	#1,($FFFFF718).w
000050D2 47F8 AB00                  		lea	($FFFFAB00).w,a3
000050D6 243C 0001 8000             		move.l	#$18000,d2
000050DC 7206                       		moveq	#6,d1
000050DE                            
000050DE                            loc_4C64:
000050DE 2013                       		move.l	(a3),d0
000050E0 9082                       		sub.l	d2,d0
000050E2 26C0                       		move.l	d0,(a3)+
000050E4 0482 0000 2000             		subi.l	#$2000,d2
000050EA 51C9 FFF2                  		dbf	d1,loc_4C64
000050EE                            
000050EE                            loc_4C74:
000050EE 47F8 AB00                  		lea	($FFFFAB00).w,a3
000050F2 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000050F8                            
000050F8                            loc_4C7E:
000050F8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000050FC 3038 F718                  		move.w	($FFFFF718).w,d0
00005100 4440                       		neg.w	d0
00005102 4840                       		swap	d0
00005104 7600                       		moveq	#0,d3
00005106 161A                       		move.b	(a2)+,d3
00005108 3438 F70C                  		move.w	($FFFFF70C).w,d2
0000510C 4442                       		neg.w	d2
0000510E 0242 00FF                  		andi.w	#$FF,d2
00005112 E54A                       		lsl.w	#2,d2
00005114                            
00005114                            loc_4C9A:
00005114 301B                       		move.w	(a3)+,d0
00005116 544B                       		addq.w	#2,a3
00005118 7200                       		moveq	#0,d1
0000511A 121A                       		move.b	(a2)+,d1
0000511C 5341                       		subq.w	#1,d1
0000511E                            
0000511E                            loc_4CA4:
0000511E 2380 2000                  		move.l	d0,(a1,d2.w)
00005122 5842                       		addq.w	#4,d2
00005124 0242 03FC                  		andi.w	#$3FC,d2
00005128 51C9 FFF4                  		dbf	d1,loc_4CA4
0000512C 51CB FFE6                  		dbf	d3,loc_4C9A
00005130 4E75                       		rts	
00005132                            ; End of function SS_BGAnimate
00005132                            
00005132                            ; ===========================================================================
00005132 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000513E                            		even
0000513E 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005146                            		even
00005146 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000515A                            		even
0000515A                            					; XREF: SS_BGAnimate
0000515A                            ; ===========================================================================
0000515A                            
0000515A                            ; ---------------------------------------------------------------------------
0000515A                            ; Continue screen
0000515A                            ; ---------------------------------------------------------------------------
0000515A                            
0000515A                            ContinueScreen:				; XREF: GameModeArray
0000515A 6100 CEE0                  		bsr.w	Pal_FadeFrom
0000515E 46FC 2700                  		move	#$2700,sr
00005162 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005166 0200 00BF                  		andi.b	#$BF,d0
0000516A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005170 4DF9 00C0 0004             		lea	($C00004).l,a6
00005176 3CBC 8004                  		move.w	#$8004,(a6)
0000517A 3CBC 8700                  		move.w	#$8700,(a6)
0000517E 6100 C368                  		bsr.w	ClearScreen
00005182 43F8 D000                  		lea	($FFFFD000).w,a1
00005186 7000                       		moveq	#0,d0
00005188 323C 07FF                  		move.w	#$7FF,d1
0000518C                            
0000518C                            Cont_ClrObjRam:
0000518C 22C0                       		move.l	d0,(a1)+
0000518E 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005192                            
00005192 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000519C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000051A2 6100 C4C0                  		bsr.w	NemDec
000051A6 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000051B0 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000051B6 6100 C4AC                  		bsr.w	NemDec
000051BA 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000051C4 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000051CA 6100 C498                  		bsr.w	NemDec
000051CE 720A                       		moveq	#10,d1
000051D0 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000051D6 7012                       		moveq	#$12,d0
000051D8 6100 D10C                  		bsr.w	PalLoad1	; load continue	screen pallet
000051DC 103C 0090                  		move.b	#$90,d0
000051E0 6100 C3D8                  		bsr.w	PlaySound	; play continue	music
000051E4 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000051EA 42B8 F700                  		clr.l	($FFFFF700).w
000051EE 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000051F6 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000051FC 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005202 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005208 11FC 0003 D098             		move.b	#3,($FFFFD098).w
0000520E 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005214 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000521A 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005220 4EB9 0000 0000             		jsr	ObjectsLoad
00005226 4EB9 0000 0000             		jsr	BuildSprites
0000522C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005230 0000 0040                  		ori.b	#$40,d0
00005234 33C0 00C0 0004             		move.w	d0,($C00004).l
0000523A 6100 CD5A                  		bsr.w	Pal_FadeTo
0000523E                            
0000523E                            ; ---------------------------------------------------------------------------
0000523E                            ; Continue screen main loop
0000523E                            ; ---------------------------------------------------------------------------
0000523E                            
0000523E                            Cont_MainLoop:
0000523E 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005244 6100 D9EC                  		bsr.w	DelayProgram
00005248 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000524E 6400                       		bcc.s	loc_4DF2
00005250 46FC 2700                  		move	#$2700,sr
00005254 3238 F614                  		move.w	($FFFFF614).w,d1
00005258 82FC 003C                  		divu.w	#$3C,d1
0000525C 0281 0000 000F             		andi.l	#$F,d1
00005262 4EB9 0000 0000             		jsr	ContScrCounter
00005268 46FC 2300                  		move	#$2300,sr
0000526C                            
0000526C                            loc_4DF2:
0000526C 4EB9 0000 0000             		jsr	ObjectsLoad
00005272 4EB9 0000 0000             		jsr	BuildSprites
00005278 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000527E 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005280 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005286 64B6                       		bcc.s	Cont_MainLoop
00005288 4A78 F614                  		tst.w	($FFFFF614).w
0000528C 6600 FFB0                  		bne.w	Cont_MainLoop
00005290 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005296 4E75                       		rts	
00005298                            ; ===========================================================================
00005298                            
00005298                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005298 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000529E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000052A4 7000                       		moveq	#0,d0
000052A6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000052AA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000052AE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000052B2 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000052B6 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000052BA 4E75                       		rts	
000052BC                            ; ===========================================================================
000052BC                            
000052BC                            ; ---------------------------------------------------------------------------
000052BC                            ; Object 80 - Continue screen elements
000052BC                            ; ---------------------------------------------------------------------------
000052BC                            
000052BC                            Obj80:					; XREF: Obj_Index
000052BC 7000                       		moveq	#0,d0
000052BE 1028 0024                  		move.b	$24(a0),d0
000052C2 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000052C6 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000052CA                            ; ===========================================================================
000052CA 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000052CC 0000                       		dc.w Obj80_Display-Obj80_Index
000052CE 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000052D0 0000                       		dc.w Obj80_ChkType-Obj80_Index
000052D2                            ; ===========================================================================
000052D2                            
000052D2                            Obj80_Main:				; XREF: Obj80_Index
000052D2 5428 0024                  		addq.b	#2,$24(a0)
000052D6 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000052DE 317C 8500 0002             		move.w	#$8500,2(a0)
000052E4 117C 0000 0001             		move.b	#0,1(a0)
000052EA 117C 003C 0019             		move.b	#$3C,$19(a0)
000052F0 317C 0120 0008             		move.w	#$120,8(a0)
000052F6 317C 00C0 000A             		move.w	#$C0,$A(a0)
000052FC 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005302                            
00005302                            Obj80_Display:				; XREF: Obj80_Index
00005302 4EF9 0000 0000             		jmp	DisplaySprite
00005308                            ; ===========================================================================
00005308                            Obj80_MiniSonicPos:
00005308 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000531A 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005326                            ; ===========================================================================
00005326                            
00005326                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005326 2248                       		movea.l	a0,a1
00005328 45F9 0000 5308             		lea	(Obj80_MiniSonicPos).l,a2
0000532E 7200                       		moveq	#0,d1
00005330 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005334 5501                       		subq.b	#2,d1
00005336 6400                       		bcc.s	loc_4EC4
00005338 4EF9 0000 0000             		jmp	DeleteObject
0000533E                            ; ===========================================================================
0000533E                            
0000533E                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000533E 7601                       		moveq	#1,d3
00005340 0C01 000E                  		cmpi.b	#$E,d1
00005344 6500                       		bcs.s	loc_4ED0
00005346 7600                       		moveq	#0,d3
00005348 720E                       		moveq	#$E,d1
0000534A                            
0000534A                            loc_4ED0:
0000534A 1401                       		move.b	d1,d2
0000534C 0202 0001                  		andi.b	#1,d2
00005350                            
00005350                            Obj80_MiniSonLoop:
00005350 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005354 335A 0008                  		move.w	(a2)+,8(a1)
00005358 4A02                       		tst.b	d2
0000535A 6700                       		beq.s	loc_4EEA
0000535C 0469 000A 0008             		subi.w	#$A,8(a1)
00005362                            
00005362                            loc_4EEA:
00005362 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005368 137C 0006 001A             		move.b	#6,$1A(a1)
0000536E 137C 0006 0024             		move.b	#6,$24(a1)
00005374 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000537C 337C 8551 0002             		move.w	#$8551,2(a1)
00005382 137C 0000 0001             		move.b	#0,1(a1)
00005388 43E9 0040                  		lea	$40(a1),a1
0000538C 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005390 43E9 FFC0                  		lea	-$40(a1),a1
00005394 1343 0028                  		move.b	d3,$28(a1)
00005398                            
00005398                            Obj80_ChkType:				; XREF: Obj80_Index
00005398 4A28 0028                  		tst.b	$28(a0)
0000539C 6700                       		beq.s	loc_4F40
0000539E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000053A4 6500                       		bcs.s	loc_4F40
000053A6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000053AA 0200 0001                  		andi.b	#1,d0
000053AE 6600                       		bne.s	loc_4F40
000053B0 4A78 D010                  		tst.w	($FFFFD010).w
000053B4 6600                       		bne.s	Obj80_Delete
000053B6 4E75                       		rts	
000053B8                            ; ===========================================================================
000053B8                            
000053B8                            loc_4F40:				; XREF: Obj80_ChkType
000053B8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000053BC 0200 000F                  		andi.b	#$F,d0
000053C0 6600                       		bne.s	Obj80_Display2
000053C2 0868 0000 001A             		bchg	#0,$1A(a0)
000053C8                            
000053C8                            Obj80_Display2:
000053C8 4EF9 0000 0000             		jmp	DisplaySprite
000053CE                            ; ===========================================================================
000053CE                            
000053CE                            Obj80_Delete:				; XREF: Obj80_ChkType
000053CE 4EF9 0000 0000             		jmp	DeleteObject
000053D4                            ; ===========================================================================
000053D4                            
000053D4                            ; ---------------------------------------------------------------------------
000053D4                            ; Object 81 - Sonic on the continue screen
000053D4                            ; ---------------------------------------------------------------------------
000053D4                            
000053D4                            Obj81:					; XREF: Obj_Index
000053D4 7000                       		moveq	#0,d0
000053D6 1028 0024                  		move.b	$24(a0),d0
000053DA 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000053DE 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000053E2 4EF9 0000 0000             		jmp	DisplaySprite
000053E8                            ; ===========================================================================
000053E8 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000053EA 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000053EC 0000                       		dc.w Obj81_Animate-Obj81_Index
000053EE 0000                       		dc.w Obj81_Run-Obj81_Index
000053F0                            ; ===========================================================================
000053F0                            
000053F0                            Obj81_Main:				; XREF: Obj81_Index
000053F0 5428 0024                  		addq.b	#2,$24(a0)
000053F4 317C 00A0 0008             		move.w	#$A0,8(a0)
000053FA 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005400 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005408 317C 0780 0002             		move.w	#$780,2(a0)
0000540E 117C 0004 0001             		move.b	#4,1(a0)
00005414 117C 0002 0018             		move.b	#2,$18(a0)
0000541A 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005420 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005426                            
00005426                            Obj81_ChkLand:				; XREF: Obj81_Index
00005426 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
0000542C 6600                       		bne.s	Obj81_ShowFall	; if not, branch
0000542E 5428 0024                  		addq.b	#2,$24(a0)
00005432 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005436 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000543E 317C 8500 0002             		move.w	#$8500,2(a0)
00005444 117C 0000 001C             		move.b	#0,$1C(a0)
0000544A 6000                       		bra.s	Obj81_Animate
0000544C                            ; ===========================================================================
0000544C                            
0000544C                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
0000544C 4EB9 0000 0000             		jsr	SpeedToPos
00005452 4EB9 0000 0000             		jsr	Sonic_Animate
00005458 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000545E                            ; ===========================================================================
0000545E                            
0000545E                            Obj81_Animate:				; XREF: Obj81_Index
0000545E 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005462 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005464 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000546A 4EF9 0000 0000             		jmp	AnimateSprite
00005470                            ; ===========================================================================
00005470                            
00005470                            Obj81_GetUp:				; XREF: Obj81_Animate
00005470 5428 0024                  		addq.b	#2,$24(a0)
00005474 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000547C 317C 0780 0002             		move.w	#$780,2(a0)
00005482 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005488 4268 0014                  		clr.w	$14(a0)
0000548C 5168 000C                  		subq.w	#8,$C(a0)
00005490 103C 00E0                  		move.b	#$E0,d0
00005494 6100 C12A                  		bsr.w	PlaySound_Special ; fade out music
00005498                            
00005498                            Obj81_Run:				; XREF: Obj81_Index
00005498 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000549E 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000054A0 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000054A6 6000                       		bra.s	Obj81_ShowRun
000054A8                            ; ===========================================================================
000054A8                            
000054A8                            Obj81_AddSpeed:				; XREF: Obj81_Run
000054A8 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000054AE                            
000054AE                            Obj81_ShowRun:				; XREF: Obj81_Run
000054AE 4EB9 0000 0000             		jsr	SpeedToPos
000054B4 4EB9 0000 0000             		jsr	Sonic_Animate
000054BA 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000054C0                            ; ===========================================================================
000054C0                            Ani_obj81:
000054C0                            	include "_anim\obj81.asm"
000054C0                            ; ---------------------------------------------------------------------------
000054C0                            ; Animation script - Sonic on the continue screen
000054C0                            ; ---------------------------------------------------------------------------
000054C0 0000                       		dc.w byte_504A-Ani_obj81
000054C2 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000054CE 00                         		even
000054CE 00                         		even
000054CE                            
000054CE                            ; ---------------------------------------------------------------------------
000054CE                            ; Sprite mappings - Continue screen
000054CE                            ; ---------------------------------------------------------------------------
000054CE                            Map_obj80:
000054CE                            	include "_maps\obj80.asm"
000054CE                            ; ---------------------------------------------------------------------------
000054CE                            ; Sprite mappings - Continue screen
000054CE                            ; ---------------------------------------------------------------------------
000054CE 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000054D2 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000054D6 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000054DA 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000054DE 0B                         byte_5066:	dc.b $B
000054DF F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000054E4 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000054E9 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000054EE F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000054F3 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000054F8 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000054FD F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005502 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005507 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
0000550C 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005511 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005516 03                         byte_509E:	dc.b 3
00005517 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
0000551C F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005521 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005526 03                         byte_50AE:	dc.b 3
00005527 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
0000552C F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005531 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005536 03                         byte_50BE:	dc.b 3
00005537 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
0000553C F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005541 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005546 02                         byte_50CE:	dc.b 2
00005547 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
0000554C 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005551 01                         byte_50D9:	dc.b 1
00005552 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005557 01                         byte_50DF:	dc.b 1
00005558 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
0000555E 00                         		even
0000555E 00                         		even
0000555E                            
0000555E                            ; ===========================================================================
0000555E                            ; ---------------------------------------------------------------------------
0000555E                            ; Ending sequence in Green Hill	Zone
0000555E                            ; ---------------------------------------------------------------------------
0000555E                            
0000555E                            EndingSequence:				; XREF: GameModeArray
0000555E 103C 00E4                  		move.b	#$E4,d0
00005562 6100 C05C                  		bsr.w	PlaySound_Special ; stop music
00005566 6100 CAD4                  		bsr.w	Pal_FadeFrom
0000556A 43F8 D000                  		lea	($FFFFD000).w,a1
0000556E 7000                       		moveq	#0,d0
00005570 323C 07FF                  		move.w	#$7FF,d1
00005574                            
00005574                            End_ClrObjRam:
00005574 22C0                       		move.l	d0,(a1)+
00005576 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000557A                            
0000557A 43F8 F628                  		lea	($FFFFF628).w,a1
0000557E 7000                       		moveq	#0,d0
00005580 323C 0015                  		move.w	#$15,d1
00005584                            
00005584                            End_ClrRam:
00005584 22C0                       		move.l	d0,(a1)+
00005586 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000558A                            
0000558A 43F8 F700                  		lea	($FFFFF700).w,a1
0000558E 7000                       		moveq	#0,d0
00005590 323C 003F                  		move.w	#$3F,d1
00005594                            
00005594                            End_ClrRam2:
00005594 22C0                       		move.l	d0,(a1)+
00005596 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000559A                            
0000559A 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000559E 7000                       		moveq	#0,d0
000055A0 323C 0047                  		move.w	#$47,d1
000055A4                            
000055A4                            End_ClrRam3:
000055A4 22C0                       		move.l	d0,(a1)+
000055A6 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000055AA                            
000055AA 46FC 2700                  		move	#$2700,sr
000055AE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000055B2 0200 00BF                  		andi.b	#$BF,d0
000055B6 33C0 00C0 0004             		move.w	d0,($C00004).l
000055BC 6100 BF2A                  		bsr.w	ClearScreen
000055C0 4DF9 00C0 0004             		lea	($C00004).l,a6
000055C6 3CBC 8B03                  		move.w	#$8B03,(a6)
000055CA 3CBC 8230                  		move.w	#$8230,(a6)
000055CE 3CBC 8407                  		move.w	#$8407,(a6)
000055D2 3CBC 857C                  		move.w	#$857C,(a6)
000055D6 3CBC 9001                  		move.w	#$9001,(a6)
000055DA 3CBC 8004                  		move.w	#$8004,(a6)
000055DE 3CBC 8720                  		move.w	#$8720,(a6)
000055E2 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000055E8 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000055EC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000055F2 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000055F8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000055FE 6700                       		beq.s	End_LoadData	; if yes, branch
00005600 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005606                            
00005606                            End_LoadData:
00005606 701C                       		moveq	#$1C,d0
00005608 6100 C306                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
0000560C 4EB9 0000 0000             		jsr	Hud_Base
00005612 6100 0000                  		bsr.w	LevelSizeLoad
00005616 6100 0000                  		bsr.w	DeformBgLayer
0000561A 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005620 6100 0000                  		bsr.w	MainLoadBlockLoad
00005624 6100 0000                  		bsr.w	LoadTilesFromStart
00005628 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005630 46FC 2300                  		move	#$2300,sr
00005634 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000563A 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000563E 6100 C480                  		bsr.w	KosDec
00005642 7003                       		moveq	#3,d0
00005644 6100 CCA0                  		bsr.w	PalLoad1	; load Sonic's pallet
00005648 303C 008B                  		move.w	#$8B,d0
0000564C 6100 BF6C                  		bsr.w	PlaySound	; play ending sequence music
00005650 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005656 6700                       		beq.s	End_LoadSonic	; if not, branch
00005658 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000565E                            
0000565E                            End_LoadSonic:
0000565E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005664 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000566A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005670 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005676 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
0000567C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005682 4EB9 0000 0000             		jsr	ObjPosLoad
00005688 4EB9 0000 0000             		jsr	ObjectsLoad
0000568E 4EB9 0000 0000             		jsr	BuildSprites
00005694 7000                       		moveq	#0,d0
00005696 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000569A 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000569E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000056A2 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000056A6 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000056AA 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000056AE 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000056B2 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000056B6 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000056BA 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000056BE 6100 EEDA                  		bsr.w	OscillateNumInit
000056C2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000056C8 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000056CE 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000056D4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000056DA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000056E0 6100 D550                  		bsr.w	DelayProgram
000056E4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000056E8 0000 0040                  		ori.b	#$40,d0
000056EC 33C0 00C0 0004             		move.w	d0,($C00004).l
000056F2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000056F8 6100 C89C                  		bsr.w	Pal_FadeTo
000056FC                            
000056FC                            ; ---------------------------------------------------------------------------
000056FC                            ; Main ending sequence loop
000056FC                            ; ---------------------------------------------------------------------------
000056FC                            
000056FC                            End_MainLoop:
000056FC 6100 BECE                  		bsr.w	PauseGame
00005700 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005706 6100 D52A                  		bsr.w	DelayProgram
0000570A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000570E 6100 0000                  		bsr.w	End_MoveSonic
00005712 4EB9 0000 0000             		jsr	ObjectsLoad
00005718 6100 0000                  		bsr.w	DeformBgLayer
0000571C 4EB9 0000 0000             		jsr	BuildSprites
00005722 4EB9 0000 0000             		jsr	ObjPosLoad
00005728 6100 C436                  		bsr.w	PalCycle_Load
0000572C 6100 EEC2                  		bsr.w	OscillateNumDo
00005730 6100 EF4E                  		bsr.w	ChangeRingFrame
00005734 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000573A 6700                       		beq.s	loc_52DA	; if yes, branch
0000573C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005742 103C 0091                  		move.b	#$91,d0
00005746 6100 BE78                  		bsr.w	PlaySound_Special ; play credits music
0000574A 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005750 4E75                       		rts	
00005752                            ; ===========================================================================
00005752                            
00005752                            loc_52DA:
00005752 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005756 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000575A                            
0000575A 4278 FE02                  		clr.w	($FFFFFE02).w
0000575E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005764 4278 F794                  		clr.w	($FFFFF794).w
00005768                            
00005768                            End_AllEmlds:				; XREF: loc_5334
00005768 6100 BE62                  		bsr.w	PauseGame
0000576C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005772 6100 D4BE                  		bsr.w	DelayProgram
00005776 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000577A 6100 0000                  		bsr.w	End_MoveSonic
0000577E 4EB9 0000 0000             		jsr	ObjectsLoad
00005784 6100 0000                  		bsr.w	DeformBgLayer
00005788 4EB9 0000 0000             		jsr	BuildSprites
0000578E 4EB9 0000 0000             		jsr	ObjPosLoad
00005794 6100 EE5A                  		bsr.w	OscillateNumDo
00005798 6100 EEE6                  		bsr.w	ChangeRingFrame
0000579C 5378 F794                  		subq.w	#1,($FFFFF794).w
000057A0 6A00                       		bpl.s	loc_5334
000057A2 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000057A8 6100 C9DC                  		bsr.w	Pal_ToWhite
000057AC                            
000057AC                            loc_5334:
000057AC 4A78 FE02                  		tst.w	($FFFFFE02).w
000057B0 6700 FFB6                  		beq.w	End_AllEmlds
000057B4 4278 FE02                  		clr.w	($FFFFFE02).w
000057B8 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
000057BE 4BF9 00C0 0004             		lea	($C00004).l,a5
000057C4 4DF9 00C0 0000             		lea	($C00000).l,a6
000057CA 47F8 F700                  		lea	($FFFFF700).w,a3
000057CE 49F8 A400                  		lea	($FFFFA400).w,a4
000057D2 343C 4000                  		move.w	#$4000,d2
000057D6 6100 0000                  		bsr.w	LoadTilesFromStart2
000057DA 7013                       		moveq	#$13,d0
000057DC 6100 CB08                  		bsr.w	PalLoad1	; load ending pallet
000057E0 6100 C8D8                  		bsr.w	Pal_MakeWhite
000057E4 6000 FF16                  		bra.w	End_MainLoop
000057E8                            
000057E8                            ; ---------------------------------------------------------------------------
000057E8                            ; Subroutine controlling Sonic on the ending sequence
000057E8                            ; ---------------------------------------------------------------------------
000057E8                            
000057E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000057E8                            
000057E8                            
000057E8                            End_MoveSonic:				; XREF: End_MainLoop
000057E8 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000057EC 6600                       		bne.s	End_MoveSonic2
000057EE 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000057F4 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000057F6 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000057FA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005800 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005806 4E75                       		rts	
00005808                            ; ===========================================================================
00005808                            
00005808                            End_MoveSonic2:				; XREF: End_MoveSonic
00005808 5500                       		subq.b	#2,d0
0000580A 6600                       		bne.s	End_MoveSonic3
0000580C 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005812 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005814 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005818 7000                       		moveq	#0,d0
0000581A 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
0000581E 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005822 31C0 D014                  		move.w	d0,($FFFFD014).w
00005826 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
0000582C 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005832 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005838 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
0000583E 4E75                       		rts	
00005840                            ; ===========================================================================
00005840                            
00005840                            End_MoveSonic3:				; XREF: End_MoveSonic
00005840 5500                       		subq.b	#2,d0
00005842 6600                       		bne.s	End_MoveSonExit
00005844 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005848 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
0000584E 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005854 4278 D024                  		clr.w	($FFFFD024).w
00005858                            
00005858                            End_MoveSonExit:
00005858 4E75                       		rts	
0000585A                            ; End of function End_MoveSonic
0000585A                            
0000585A                            ; ===========================================================================
0000585A                            ; ---------------------------------------------------------------------------
0000585A                            ; Object 87 - Sonic on ending sequence
0000585A                            ; ---------------------------------------------------------------------------
0000585A                            
0000585A                            Obj87:					; XREF: Obj_Index
0000585A 7000                       		moveq	#0,d0
0000585C 1028 0025                  		move.b	$25(a0),d0
00005860 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005864 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005868 4EF9 0000 0000             		jmp	DisplaySprite
0000586E                            ; ===========================================================================
0000586E 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005872 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005876 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000587A 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000587E 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005882                            ; ===========================================================================
00005882                            
00005882                            Obj87_Main:				; XREF: Obj87_Index
00005882 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005888 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000588A 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005890 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005896 4E75                       		rts	
00005898                            ; ===========================================================================
00005898                            
00005898                            Obj87_Main2:				; XREF: Obj87_Main
00005898 5428 0025                  		addq.b	#2,$25(a0)
0000589C 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000058A4 317C 03E1 0002             		move.w	#$3E1,2(a0)
000058AA 117C 0004 0001             		move.b	#4,1(a0)
000058B0 4228 0022                  		clr.b	$22(a0)
000058B4 117C 0002 0018             		move.b	#2,$18(a0)
000058BA 117C 0000 001A             		move.b	#0,$1A(a0)
000058C0 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
000058C6                            
000058C6                            Obj87_MakeEmlds:			; XREF: Obj87_Index
000058C6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000058CA 6600                       		bne.s	Obj87_Wait
000058CC 5428 0025                  		addq.b	#2,$25(a0)
000058D0 317C 0001 001C             		move.w	#1,$1C(a0)
000058D6 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000058DC                            
000058DC                            Obj87_Wait:
000058DC 4E75                       		rts	
000058DE                            ; ===========================================================================
000058DE                            
000058DE                            Obj87_LookUp:				; XREF: Obj87_Index
000058DE 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000058E6 6600                       		bne.s	locret_5480
000058E8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000058EE 317C 005A 0030             		move.w	#$5A,$30(a0)
000058F4 5428 0025                  		addq.b	#2,$25(a0)
000058F8                            
000058F8                            locret_5480:
000058F8 4E75                       		rts	
000058FA                            ; ===========================================================================
000058FA                            
000058FA                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000058FA 5368 0030                  		subq.w	#1,$30(a0)
000058FE 6600                       		bne.s	Obj87_Wait2
00005900 43F8 D400                  		lea	($FFFFD400).w,a1
00005904 323C 00FF                  		move.w	#$FF,d1
00005908                            
00005908                            Obj87_ClrLoop:
00005908 4299                       		clr.l	(a1)+
0000590A 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000590E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005914 5428 0025                  		addq.b	#2,$25(a0)
00005918 117C 0001 001C             		move.b	#1,$1C(a0)
0000591E 317C 003C 0030             		move.w	#$3C,$30(a0)
00005924                            
00005924                            Obj87_Wait2:
00005924 4E75                       		rts	
00005926                            ; ===========================================================================
00005926                            
00005926                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005926 5368 0030                  		subq.w	#1,$30(a0)
0000592A 6600                       		bne.s	Obj87_Wait3
0000592C 5428 0025                  		addq.b	#2,$25(a0)
00005930 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005936 117C 0002 001C             		move.b	#2,$1C(a0)
0000593C 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005942                            
00005942                            Obj87_Wait3:
00005942 4E75                       		rts	
00005944                            ; ===========================================================================
00005944                            
00005944                            Obj87_Animate:				; XREF: Obj87_Index
00005944 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000594A 4EF9 0000 0000             		jmp	AnimateSprite
00005950                            ; ===========================================================================
00005950                            
00005950                            Obj87_Leap:				; XREF: Obj87_Index
00005950 5368 0030                  		subq.w	#1,$30(a0)
00005954 6600                       		bne.s	Obj87_Wait4
00005956 5428 0025                  		addq.b	#2,$25(a0)
0000595A 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005962 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005968 117C 0004 0001             		move.b	#4,1(a0)
0000596E 4228 0022                  		clr.b	$22(a0)
00005972 117C 0002 0018             		move.b	#2,$18(a0)
00005978 117C 0005 001A             		move.b	#5,$1A(a0)
0000597E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005984 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000598A 60B8                       		bra.s	Obj87_Animate
0000598C                            ; ===========================================================================
0000598C                            
0000598C                            Obj87_Wait4:				; XREF: Obj87_Leap
0000598C 4E75                       		rts	
0000598E                            ; ===========================================================================
0000598E                            Ani_obj87:
0000598E                            	include "_anim\obj87.asm"
0000598E                            ; ---------------------------------------------------------------------------
0000598E                            ; Animation script - Sonic on the ending sequence
0000598E                            ; ---------------------------------------------------------------------------
0000598E 0000                       		dc.w byte_551C-Ani_obj87
00005990 0000                       		dc.w byte_552A-Ani_obj87
00005992 0000                       		dc.w byte_5534-Ani_obj87
00005994 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000059A2 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000059AC 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000059B4                            		even
000059B4                            		even
000059B4                            
000059B4                            ; ===========================================================================
000059B4                            ; ---------------------------------------------------------------------------
000059B4                            ; Object 88 - chaos emeralds on	the ending sequence
000059B4                            ; ---------------------------------------------------------------------------
000059B4                            
000059B4                            Obj88:					; XREF: Obj_Index
000059B4 7000                       		moveq	#0,d0
000059B6 1028 0024                  		move.b	$24(a0),d0
000059BA 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
000059BE 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
000059C2 4EF9 0000 0000             		jmp	DisplaySprite
000059C8                            ; ===========================================================================
000059C8 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
000059CA 0000                       		dc.w Obj88_Move-Obj88_Index
000059CC                            ; ===========================================================================
000059CC                            
000059CC                            Obj88_Main:				; XREF: Obj88_Index
000059CC 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
000059D2 6700                       		beq.s	Obj88_Main2
000059D4 588F                       		addq.l	#4,sp
000059D6 4E75                       		rts	
000059D8                            ; ===========================================================================
000059D8                            
000059D8                            Obj88_Main2:				; XREF: Obj88_Main
000059D8 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000059DE 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000059E4 2248                       		movea.l	a0,a1
000059E6 7600                       		moveq	#0,d3
000059E8 7401                       		moveq	#1,d2
000059EA 7205                       		moveq	#5,d1
000059EC                            
000059EC                            Obj88_MainLoop:
000059EC 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000059F0 5429 0024                  		addq.b	#2,$24(a1)
000059F4 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000059FC 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005A02 137C 0004 0001             		move.b	#4,1(a1)
00005A08 137C 0001 0018             		move.b	#1,$18(a1)
00005A0E 3368 0008 0038             		move.w	8(a0),$38(a1)
00005A14 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005A1A 1342 001C                  		move.b	d2,$1C(a1)
00005A1E 1342 001A                  		move.b	d2,$1A(a1)
00005A22 5202                       		addq.b	#1,d2
00005A24 1343 0026                  		move.b	d3,$26(a1)
00005A28 0603 002A                  		addi.b	#$2A,d3
00005A2C 43E9 0040                  		lea	$40(a1),a1
00005A30 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005A34                            
00005A34                            Obj88_Move:				; XREF: Obj88_Index
00005A34 3028 003E                  		move.w	$3E(a0),d0
00005A38 D168 0026                  		add.w	d0,$26(a0)
00005A3C 1028 0026                  		move.b	$26(a0),d0
00005A40 4EB9 0000 2C64             		jsr	(CalcSine).l
00005A46 7800                       		moveq	#0,d4
00005A48 1828 003C                  		move.b	$3C(a0),d4
00005A4C C3C4                       		muls.w	d4,d1
00005A4E E081                       		asr.l	#8,d1
00005A50 C1C4                       		muls.w	d4,d0
00005A52 E080                       		asr.l	#8,d0
00005A54 D268 0038                  		add.w	$38(a0),d1
00005A58 D068 003A                  		add.w	$3A(a0),d0
00005A5C 3141 0008                  		move.w	d1,8(a0)
00005A60 3140 000C                  		move.w	d0,$C(a0)
00005A64 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005A6A 6700                       		beq.s	loc_55FA
00005A6C 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005A72                            
00005A72                            loc_55FA:
00005A72 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005A78 6700                       		beq.s	loc_5608
00005A7A 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005A80                            
00005A80                            loc_5608:
00005A80 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005A86 6700                       		beq.s	locret_5614
00005A88 5368 003A                  		subq.w	#1,$3A(a0)
00005A8C                            
00005A8C                            locret_5614:
00005A8C 4E75                       		rts	
00005A8E                            ; ===========================================================================
00005A8E                            ; ---------------------------------------------------------------------------
00005A8E                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005A8E                            ; ---------------------------------------------------------------------------
00005A8E                            
00005A8E                            Obj89:					; XREF: Obj_Index
00005A8E 7000                       		moveq	#0,d0
00005A90 1028 0024                  		move.b	$24(a0),d0
00005A94 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005A98 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005A9C                            ; ===========================================================================
00005A9C 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005A9E 0000                       		dc.w Obj89_Move-Obj89_Index
00005AA0 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005AA2                            ; ===========================================================================
00005AA2                            
00005AA2                            Obj89_Main:				; XREF: Obj89_Index
00005AA2 5428 0024                  		addq.b	#2,$24(a0)
00005AA6 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005AAC 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005AB2 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005ABA 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005AC0 117C 0000 0001             		move.b	#0,1(a0)
00005AC6 117C 0000 0018             		move.b	#0,$18(a0)
00005ACC                            
00005ACC                            Obj89_Move:				; XREF: Obj89_Index
00005ACC 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005AD2 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005AD4 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005ADA 4EB9 0000 0000             		jsr	DisplaySprite
00005AE0                            ; ===========================================================================
00005AE0                            
00005AE0                            Obj89_Delay:				; XREF: Obj89_Move
00005AE0 5428 0024                  		addq.b	#2,$24(a0)
00005AE4 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005AEA                            
00005AEA                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005AEA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005AEE 6A00                       		bpl.s	Obj89_Display
00005AF0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005AF6                            
00005AF6                            Obj89_Display:
00005AF6 4EB9 0000 0000             		jsr	DisplaySprite
00005AFC                            ; ===========================================================================
00005AFC                            ; ---------------------------------------------------------------------------
00005AFC                            ; Sprite mappings - Sonic on the ending	sequence
00005AFC                            ; ---------------------------------------------------------------------------
00005AFC                            Map_obj87:
00005AFC                            	include "_maps\obj87.asm"
00005AFC                            ; ---------------------------------------------------------------------------
00005AFC                            ; Sprite mappings - Sonic on the ending	sequence
00005AFC                            ; ---------------------------------------------------------------------------
00005AFC 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005B00 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005B04 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005B08 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005B0C 02                         byte_5690:	dc.b 2
00005B0D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005B12 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B17 03                         byte_569B:	dc.b 3
00005B18 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005B1D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005B22 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B27 02                         byte_56AB:	dc.b 2
00005B28 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005B2D FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005B32 02                         byte_56B6:	dc.b 2
00005B33 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005B38 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005B3D 02                         byte_56C1:	dc.b 2
00005B3E EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005B43 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005B48 03                         byte_56CC:	dc.b 3
00005B49 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005B4E EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005B53 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005B58 07                         byte_56DC:	dc.b 7
00005B59 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005B5E BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005B63 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005B68 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005B6D DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005B72 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005B77 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005B7C 18                         byte_5700:	dc.b $18
00005B7D 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005B82 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005B87 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005B8C 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005B91 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005B96 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005B9B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005BA0 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005BA5 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005BAA B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005BAF A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005BB4 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005BB9 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005BBE B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005BC3 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005BC8 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005BCD D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005BD2 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005BD7 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005BDC E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005BE1 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005BE6 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005BEB F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005BF0 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005BF6 00                         		even
00005BF6 00                         		even
00005BF6                            
00005BF6                            ; ---------------------------------------------------------------------------
00005BF6                            ; Sprite mappings - chaos emeralds on the ending sequence
00005BF6                            ; ---------------------------------------------------------------------------
00005BF6                            Map_obj88:
00005BF6                            	include "_maps\obj88.asm"
00005BF6                            ; ---------------------------------------------------------------------------
00005BF6                            ; Sprite mappings - chaos emeralds on the ending sequence
00005BF6                            ; ---------------------------------------------------------------------------
00005BF6 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005BFA 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005BFE 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005C02 0000                       		dc.w byte_57AC-Map_obj88
00005C04 01                         byte_5788:	dc.b 1
00005C05 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005C0A 01                         byte_578E:	dc.b 1
00005C0B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005C10 01                         byte_5794:	dc.b 1
00005C11 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005C16 01                         byte_579A:	dc.b 1
00005C17 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005C1C 01                         byte_57A0:	dc.b 1
00005C1D F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005C22 01                         byte_57A6:	dc.b 1
00005C23 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005C28 01                         byte_57AC:	dc.b 1
00005C29 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005C2E                            		even
00005C2E                            		even
00005C2E                            
00005C2E                            ; ---------------------------------------------------------------------------
00005C2E                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C2E                            ; ---------------------------------------------------------------------------
00005C2E                            Map_obj89:
00005C2E                            	include "_maps\obj89.asm"
00005C2E                            ; ---------------------------------------------------------------------------
00005C2E                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C2E                            ; ---------------------------------------------------------------------------
00005C2E 0000                       		dc.w byte_57B4-Map_obj89
00005C30 03                         byte_57B4:	dc.b 3
00005C31 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005C36 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005C3B F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005C40                            		even
00005C40                            		even
00005C40                            
00005C40                            ; ===========================================================================
00005C40                            ; ---------------------------------------------------------------------------
00005C40                            ; Credits ending sequence
00005C40                            ; ---------------------------------------------------------------------------
00005C40                            
00005C40                            Credits:				; XREF: GameModeArray
00005C40 6100 BBC0                  		bsr.w	ClearPLC
00005C44 6100 C3F6                  		bsr.w	Pal_FadeFrom
00005C48 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C4E 3CBC 8004                  		move.w	#$8004,(a6)
00005C52 3CBC 8230                  		move.w	#$8230,(a6)
00005C56 3CBC 8407                  		move.w	#$8407,(a6)
00005C5A 3CBC 9001                  		move.w	#$9001,(a6)
00005C5E 3CBC 9200                  		move.w	#$9200,(a6)
00005C62 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C66 3CBC 8720                  		move.w	#$8720,(a6)
00005C6A 4238 F64E                  		clr.b	($FFFFF64E).w
00005C6E 6100 B878                  		bsr.w	ClearScreen
00005C72 43F8 D000                  		lea	($FFFFD000).w,a1
00005C76 7000                       		moveq	#0,d0
00005C78 323C 07FF                  		move.w	#$7FF,d1
00005C7C                            
00005C7C                            Cred_ClrObjRam:
00005C7C 22C0                       		move.l	d0,(a1)+
00005C7E 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005C82                            
00005C82 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005C8C 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005C92 6100 B9D0                  		bsr.w	NemDec
00005C96 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005C9A 7000                       		moveq	#0,d0
00005C9C 323C 001F                  		move.w	#$1F,d1
00005CA0                            
00005CA0                            Cred_ClrPallet:
00005CA0 22C0                       		move.l	d0,(a1)+
00005CA2 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005CA6                            
00005CA6 7003                       		moveq	#3,d0
00005CA8 6100 C63C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005CAC 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005CB2 4EB9 0000 0000             		jsr	ObjectsLoad
00005CB8 4EB9 0000 0000             		jsr	BuildSprites
00005CBE 6100 0000                  		bsr.w	EndingDemoLoad
00005CC2 7000                       		moveq	#0,d0
00005CC4 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005CC8 E948                       		lsl.w	#4,d0
00005CCA 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005CD0 45F2 0000                  		lea	(a2,d0.w),a2
00005CD4 7000                       		moveq	#0,d0
00005CD6 1012                       		move.b	(a2),d0
00005CD8 6700                       		beq.s	loc_5862
00005CDA 6100 BAC8                  		bsr.w	LoadPLC		; load level patterns
00005CDE                            
00005CDE                            loc_5862:
00005CDE 7001                       		moveq	#1,d0
00005CE0 6100 BAC2                  		bsr.w	LoadPLC		; load standard	level patterns
00005CE4 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005CEA 6100 C2AA                  		bsr.w	Pal_FadeTo
00005CEE                            
00005CEE                            Cred_WaitLoop:
00005CEE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005CF4 6100 CF3C                  		bsr.w	DelayProgram
00005CF8 6100 BB16                  		bsr.w	RunPLC_RAM
00005CFC 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005D00 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005D02 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005D06 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005D08 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005D0E 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005D12 4E75                       		rts	
00005D14                            
00005D14                            ; ---------------------------------------------------------------------------
00005D14                            ; Ending sequence demo loading subroutine
00005D14                            ; ---------------------------------------------------------------------------
00005D14                            
00005D14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005D14                            
00005D14                            
00005D14                            EndingDemoLoad:				; XREF: Credits
00005D14 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005D18 0240 000F                  		andi.w	#$F,d0
00005D1C D040                       		add.w	d0,d0
00005D1E 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005D22 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005D26 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005D2A 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005D30 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005D32 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005D38 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005D3E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005D44 7000                       		moveq	#0,d0
00005D46 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005D4A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005D4E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005D52 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005D56 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005D5C 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005D5E 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005D64 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005D68 303C 0008                  		move.w	#8,d0
00005D6C                            
00005D6C                            EndDemo_LampLoad:
00005D6C 24D9                       		move.l	(a1)+,(a2)+
00005D6E 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005D72                            
00005D72                            EndDemo_Exit:
00005D72 4E75                       		rts	
00005D74                            ; End of function EndingDemoLoad
00005D74                            
00005D74                            ; ===========================================================================
00005D74                            ; ---------------------------------------------------------------------------
00005D74                            ; Levels used in the end sequence demos
00005D74                            ; ---------------------------------------------------------------------------
00005D74                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005D84                            
00005D84                            ; ---------------------------------------------------------------------------
00005D84                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005D84                            ; ---------------------------------------------------------------------------
00005D84                            EndDemo_LampVar:
00005D84 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005D86 0A00 062C 000D             		dc.w $A00, $62C, $D
00005D8C 0000 0000                  		dc.l 0
00005D90 0000                       		dc.b 0,	0
00005D92 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005DA6 0101                       		dc.b 1,	1
00005DA8                            ; ===========================================================================
00005DA8                            ; ---------------------------------------------------------------------------
00005DA8                            ; "TRY AGAIN" and "END"	screens
00005DA8                            ; ---------------------------------------------------------------------------
00005DA8                            
00005DA8                            TryAgainEnd:				; XREF: Credits
00005DA8 6100 BA58                  		bsr.w	ClearPLC
00005DAC 6100 C28E                  		bsr.w	Pal_FadeFrom
00005DB0 4DF9 00C0 0004             		lea	($C00004).l,a6
00005DB6 3CBC 8004                  		move.w	#$8004,(a6)
00005DBA 3CBC 8230                  		move.w	#$8230,(a6)
00005DBE 3CBC 8407                  		move.w	#$8407,(a6)
00005DC2 3CBC 9001                  		move.w	#$9001,(a6)
00005DC6 3CBC 9200                  		move.w	#$9200,(a6)
00005DCA 3CBC 8B03                  		move.w	#$8B03,(a6)
00005DCE 3CBC 8720                  		move.w	#$8720,(a6)
00005DD2 4238 F64E                  		clr.b	($FFFFF64E).w
00005DD6 6100 B710                  		bsr.w	ClearScreen
00005DDA 43F8 D000                  		lea	($FFFFD000).w,a1
00005DDE 7000                       		moveq	#0,d0
00005DE0 323C 07FF                  		move.w	#$7FF,d1
00005DE4                            
00005DE4                            TryAg_ClrObjRam:
00005DE4 22C0                       		move.l	d0,(a1)+
00005DE6 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005DEA                            
00005DEA 701D                       		moveq	#$1D,d0
00005DEC 6100 BB22                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005DF0 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005DF4 7000                       		moveq	#0,d0
00005DF6 323C 001F                  		move.w	#$1F,d1
00005DFA                            
00005DFA                            TryAg_ClrPallet:
00005DFA 22C0                       		move.l	d0,(a1)+
00005DFC 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005E00                            
00005E00 7013                       		moveq	#$13,d0
00005E02 6100 C4E2                  		bsr.w	PalLoad1	; load ending pallet
00005E06 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005E0A 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005E10 4EB9 0000 0000             		jsr	ObjectsLoad
00005E16 4EB9 0000 0000             		jsr	BuildSprites
00005E1C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005E22 6100 C172                  		bsr.w	Pal_FadeTo
00005E26                            
00005E26                            ; ---------------------------------------------------------------------------
00005E26                            ; "TRY AGAIN" and "END"	screen main loop
00005E26                            ; ---------------------------------------------------------------------------
00005E26                            TryAg_MainLoop:
00005E26 6100 B7A4                  		bsr.w	PauseGame
00005E2A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005E30 6100 CE00                  		bsr.w	DelayProgram
00005E34 4EB9 0000 0000             		jsr	ObjectsLoad
00005E3A 4EB9 0000 0000             		jsr	BuildSprites
00005E40 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005E46 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005E48 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005E4C 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005E4E 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005E54 67D0                       		beq.s	TryAg_MainLoop
00005E56                            
00005E56                            TryAg_Exit:
00005E56 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005E5C 4E75                       		rts	
00005E5E                            
00005E5E                            ; ===========================================================================
00005E5E                            ; ---------------------------------------------------------------------------
00005E5E                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005E5E                            ; ---------------------------------------------------------------------------
00005E5E                            
00005E5E                            Obj8B:					; XREF: Obj_Index
00005E5E 7000                       		moveq	#0,d0
00005E60 1028 0024                  		move.b	$24(a0),d0
00005E64 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005E68 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005E6C 4EF9 0000 0000             		jmp	DisplaySprite
00005E72                            ; ===========================================================================
00005E72 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005E74 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005E76 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005E78 0000                       		dc.w loc_5A8E-Obj8B_Index
00005E7A                            ; ===========================================================================
00005E7A                            
00005E7A                            Obj8B_Main:				; XREF: Obj8B_Index
00005E7A 5428 0024                  		addq.b	#2,$24(a0)
00005E7E 317C 0120 0008             		move.w	#$120,8(a0)
00005E84 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005E8A 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005E92 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005E98 117C 0000 0001             		move.b	#0,1(a0)
00005E9E 117C 0002 0018             		move.b	#2,$18(a0)
00005EA4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005EAA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005EB0 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005EB2 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005EB8 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005EBE 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005EC4 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005ECA                            
00005ECA                            Obj8B_Animate:				; XREF: Obj8B_Index
00005ECA 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005ED0 4EF9 0000 0000             		jmp	AnimateSprite
00005ED6                            ; ===========================================================================
00005ED6                            
00005ED6                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005ED6 5428 0024                  		addq.b	#2,$24(a0)
00005EDA 7002                       		moveq	#2,d0
00005EDC 0828 0000 001C             		btst	#0,$1C(a0)
00005EE2 6700                       		beq.s	loc_5A6A
00005EE4 4440                       		neg.w	d0
00005EE6                            
00005EE6                            loc_5A6A:
00005EE6 43F8 D800                  		lea	($FFFFD800).w,a1
00005EEA 7205                       		moveq	#5,d1
00005EEC                            
00005EEC                            loc_5A70:
00005EEC 1340 003E                  		move.b	d0,$3E(a1)
00005EF0 3400                       		move.w	d0,d2
00005EF2 E742                       		asl.w	#3,d2
00005EF4 D529 0026                  		add.b	d2,$26(a1)
00005EF8 43E9 0040                  		lea	$40(a1),a1
00005EFC 51C9 FFEE                  		dbf	d1,loc_5A70
00005F00 5228 001A                  		addq.b	#1,$1A(a0)
00005F04 317C 0070 0030             		move.w	#112,$30(a0)
00005F0A                            
00005F0A                            loc_5A8E:				; XREF: Obj8B_Index
00005F0A 5368 0030                  		subq.w	#1,$30(a0)
00005F0E 6A00                       		bpl.s	locret_5AA0
00005F10 0868 0000 001C             		bchg	#0,$1C(a0)
00005F16 117C 0002 0024             		move.b	#2,$24(a0)
00005F1C                            
00005F1C                            locret_5AA0:
00005F1C 4E75                       		rts	
00005F1E                            ; ===========================================================================
00005F1E                            Ani_obj8B:
00005F1E                            	include "_anim\obj8B.asm"
00005F1E                            ; ---------------------------------------------------------------------------
00005F1E                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005F1E                            ; ---------------------------------------------------------------------------
00005F1E 0000                       		dc.w byte_5AA8-Ani_obj8B
00005F20 0000                       		dc.w byte_5AAC-Ani_obj8B
00005F22 0000                       		dc.w byte_5AB0-Ani_obj8B
00005F24 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005F28 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005F2C 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005F3E                            		even
00005F3E                            		even
00005F3E                            
00005F3E                            ; ===========================================================================
00005F3E                            ; ---------------------------------------------------------------------------
00005F3E                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005F3E                            ; ---------------------------------------------------------------------------
00005F3E                            
00005F3E                            Obj8C:					; XREF: Obj_Index
00005F3E 7000                       		moveq	#0,d0
00005F40 1028 0024                  		move.b	$24(a0),d0
00005F44 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005F48 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005F4C 4EF9 0000 0000             		jmp	DisplaySprite
00005F52                            ; ===========================================================================
00005F52 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005F54 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005F56                            ; ===========================================================================
00005F56                            
00005F56                            Obj8C_Main:				; XREF: Obj8C_Index
00005F56 2248                       		movea.l	a0,a1
00005F58 7400                       		moveq	#0,d2
00005F5A 7600                       		moveq	#0,d3
00005F5C 7205                       		moveq	#5,d1
00005F5E 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005F62                            
00005F62                            Obj8C_MakeEms:				; XREF: loc_5B42
00005F62 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005F66 5429 0024                  		addq.b	#2,$24(a1)
00005F6A 237C 0000 5BF6 0004        		move.l	#Map_obj88,4(a1)
00005F72 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005F78 137C 0000 0001             		move.b	#0,1(a1)
00005F7E 137C 0001 0018             		move.b	#1,$18(a1)
00005F84 337C 0104 0008             		move.w	#$104,8(a1)
00005F8A 337C 0120 0038             		move.w	#$120,$38(a1)
00005F90 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005F96 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005F9C 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005FA2 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005FA6                            
00005FA6                            Obj8C_ChkEms:
00005FA6 7000                       		moveq	#0,d0
00005FA8 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005FAC 5340                       		subq.w	#1,d0
00005FAE 6500                       		bcs.s	loc_5B42
00005FB0                            
00005FB0                            Obj8C_ChkEmLoop:
00005FB0 B433 0000                  		cmp.b	(a3,d0.w),d2
00005FB4 6600                       		bne.s	loc_5B3E
00005FB6 5202                       		addq.b	#1,d2
00005FB8 60EC                       		bra.s	Obj8C_ChkEms
00005FBA                            ; ===========================================================================
00005FBA                            
00005FBA                            loc_5B3E:
00005FBA 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005FBE                            
00005FBE                            loc_5B42:
00005FBE 1342 001A                  		move.b	d2,$1A(a1)
00005FC2 5229 001A                  		addq.b	#1,$1A(a1)
00005FC6 5202                       		addq.b	#1,d2
00005FC8 137C 0080 0026             		move.b	#$80,$26(a1)
00005FCE 1343 001E                  		move.b	d3,$1E(a1)
00005FD2 1343 001F                  		move.b	d3,$1F(a1)
00005FD6 0643 000A                  		addi.w	#$A,d3
00005FDA 43E9 0040                  		lea	$40(a1),a1
00005FDE 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005FE2                            
00005FE2                            Obj8C_Move:				; XREF: Obj8C_Index
00005FE2 4A68 003E                  		tst.w	$3E(a0)
00005FE6 6700                       		beq.s	locret_5BBA
00005FE8 4A28 001E                  		tst.b	$1E(a0)
00005FEC 6700                       		beq.s	loc_5B78
00005FEE 5328 001E                  		subq.b	#1,$1E(a0)
00005FF2 6600                       		bne.s	loc_5B80
00005FF4                            
00005FF4                            loc_5B78:
00005FF4 3028 003E                  		move.w	$3E(a0),d0
00005FF8 D168 0026                  		add.w	d0,$26(a0)
00005FFC                            
00005FFC                            loc_5B80:
00005FFC 1028 0026                  		move.b	$26(a0),d0
00006000 6700                       		beq.s	loc_5B8C
00006002 0C00 0080                  		cmpi.b	#$80,d0
00006006 6600                       		bne.s	loc_5B96
00006008                            
00006008                            loc_5B8C:
00006008 4268 003E                  		clr.w	$3E(a0)
0000600C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00006012                            
00006012                            loc_5B96:
00006012 4EB9 0000 2C64             		jsr	(CalcSine).l
00006018 7800                       		moveq	#0,d4
0000601A 1828 003C                  		move.b	$3C(a0),d4
0000601E C3C4                       		muls.w	d4,d1
00006020 E081                       		asr.l	#8,d1
00006022 C1C4                       		muls.w	d4,d0
00006024 E080                       		asr.l	#8,d0
00006026 D268 0038                  		add.w	$38(a0),d1
0000602A D068 003A                  		add.w	$3A(a0),d0
0000602E 3141 0008                  		move.w	d1,8(a0)
00006032 3140 000A                  		move.w	d0,$A(a0)
00006036                            
00006036                            locret_5BBA:
00006036 4E75                       		rts	
00006038                            ; ===========================================================================
00006038                            ; ---------------------------------------------------------------------------
00006038                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006038                            ; ---------------------------------------------------------------------------
00006038                            Map_obj8B:
00006038                            	include "_maps\obj8B.asm"
00006038                            ; ---------------------------------------------------------------------------
00006038                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006038                            ; ---------------------------------------------------------------------------
00006038 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
0000603C 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006040 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006044 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006048 08                         byte_5BCC:	dc.b 8
00006049 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000604E F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006053 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006058 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
0000605D 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006062 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006067 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000606C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006071 08                         byte_5BF5:	dc.b 8
00006072 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006077 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000607C E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006081 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006086 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000608B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006090 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006095 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000609A 08                         byte_5C1E:	dc.b 8
0000609B E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
000060A0 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
000060A5 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000060AA F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000060AF 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000060B4 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000060B9 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060BE 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060C3 08                         byte_5C47:	dc.b 8
000060C4 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000060C9 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000060CE E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000060D3 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000060D8 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000060DD 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000060E2 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060E7 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060EC 0C                         byte_5C70:	dc.b $C
000060ED ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000060F2 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000060F7 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000060FC 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006101 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006106 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000610B 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006110 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006115 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000611A 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
0000611F 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006124 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006129 0A                         byte_5CAD:	dc.b $A
0000612A D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
0000612F DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006134 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006139 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000613E DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006143 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006148 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000614D 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006152 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006157 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
0000615C 0A                         byte_5CE0:	dc.b $A
0000615D C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006162 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006167 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000616C C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006171 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006176 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000617B 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006180 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006185 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000618A 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000618F 0C                         byte_5D13:	dc.b $C
00006190 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006195 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000619A 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000619F 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000061A4 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000061A9 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000061AE 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000061B3 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000061B8 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000061BD 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000061C2 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000061C7 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000061CC                            		even
000061CC                            		even
000061CC                            
000061CC                            ; ---------------------------------------------------------------------------
000061CC                            ; Ending sequence demos
000061CC                            ; ---------------------------------------------------------------------------
000061CC                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000061FA                            		even
000061FA                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000623A                            		even
0000623A                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000626A                            		even
0000626A                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000629A                            		even
0000629A                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000062BA                            		even
000062BA                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000062DA                            		even
000062DA                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000630A                            		even
0000630A                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000633A                            		even
0000633A                            
0000633A                            ; ---------------------------------------------------------------------------
0000633A                            ; Subroutine to	load level boundaries and start	locations
0000633A                            ; ---------------------------------------------------------------------------
0000633A                            
0000633A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000633A                            
0000633A                            
0000633A                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000633A 7000                       		moveq	#0,d0
0000633C 11C0 F740                  		move.b	d0,($FFFFF740).w
00006340 11C0 F741                  		move.b	d0,($FFFFF741).w
00006344 11C0 F746                  		move.b	d0,($FFFFF746).w
00006348 11C0 F748                  		move.b	d0,($FFFFF748).w
0000634C 11C0 F742                  		move.b	d0,($FFFFF742).w
00006350 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006354 ED08                       		lsl.b	#6,d0
00006356 E848                       		lsr.w	#4,d0
00006358 3200                       		move.w	d0,d1
0000635A D040                       		add.w	d0,d0
0000635C D041                       		add.w	d1,d0
0000635E 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006362 3018                       		move.w	(a0)+,d0
00006364 31C0 F730                  		move.w	d0,($FFFFF730).w
00006368 2018                       		move.l	(a0)+,d0
0000636A 21C0 F728                  		move.l	d0,($FFFFF728).w
0000636E 21C0 F720                  		move.l	d0,($FFFFF720).w
00006372 2018                       		move.l	(a0)+,d0
00006374 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006378 21C0 F724                  		move.l	d0,($FFFFF724).w
0000637C 3038 F728                  		move.w	($FFFFF728).w,d0
00006380 0640 0240                  		addi.w	#$240,d0
00006384 31C0 F732                  		move.w	d0,($FFFFF732).w
00006388 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000638E 3018                       		move.w	(a0)+,d0
00006390 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006394 6000 0000                  		bra.w	LevSz_ChkLamp
00006398                            ; ===========================================================================
00006398                            ; ---------------------------------------------------------------------------
00006398                            ; Level size array and ending start location array
00006398                            ; ---------------------------------------------------------------------------
00006398                            LevelSizeArray:        ; GHZ
00006398 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000063A4 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000063B0 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000063BC 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000063C8                                    ; LZ
000063C8 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000063D4 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000063E0 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000063EC 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000063F8                                    ; MZ
000063F8 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
00006404 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00006410 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
0000641C 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
00006428                                    ; SLZ
00006428 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006434 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006440 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
0000644C 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006458                                    ; SYZ
00006458 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006464 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006470 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
0000647C 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006488                                    ; SBZ
00006488 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006494 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
000064A0 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
000064AC 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000064B8                                    ; Ending
000064B8 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
000064C4 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
000064D0 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000064DC 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000064E8                                    even
000064E8                            EndingStLocArray:
000064E8                            		incbin	misc\sloc_end.bin
00006508                            		even
00006508                            
00006508                            ; ===========================================================================
00006508                            
00006508                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006508 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
0000650C 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000650E 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006514 3238 D008                  		move.w	($FFFFD008).w,d1
00006518 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000651C 6000                       		bra.s	loc_60D0
0000651E                            ; ===========================================================================
0000651E                            
0000651E                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000651E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006522 ED08                       		lsl.b	#6,d0
00006524 E848                       		lsr.w	#4,d0
00006526 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000652A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000652E 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006530 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006534 5340                       		subq.w	#1,d0
00006536 E548                       		lsl.w	#2,d0
00006538 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000653C                            
0000653C                            LevSz_SonicPos:
0000653C 7200                       		moveq	#0,d1
0000653E 3219                       		move.w	(a1)+,d1
00006540 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006544 7000                       		moveq	#0,d0
00006546 3011                       		move.w	(a1),d0
00006548 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
0000654C                            
0000654C                            loc_60D0:				; XREF: LevSz_ChkLamp
0000654C 0441 00A0                  		subi.w	#$A0,d1
00006550 6400                       		bcc.s	loc_60D8
00006552 7200                       		moveq	#0,d1
00006554                            
00006554                            loc_60D8:
00006554 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006558 B242                       		cmp.w	d2,d1
0000655A 6500                       		bcs.s	loc_60E2
0000655C 3202                       		move.w	d2,d1
0000655E                            
0000655E                            loc_60E2:
0000655E 31C1 F700                  		move.w	d1,($FFFFF700).w
00006562 0440 0060                  		subi.w	#$60,d0
00006566 6400                       		bcc.s	loc_60EE
00006568 7000                       		moveq	#0,d0
0000656A                            
0000656A                            loc_60EE:
0000656A B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000656E 6D00                       		blt.s	loc_60F8
00006570 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006574                            
00006574                            loc_60F8:
00006574 31C0 F704                  		move.w	d0,($FFFFF704).w
00006578 6100 0000                  		bsr.w	BgScrollSpeed
0000657C 7000                       		moveq	#0,d0
0000657E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006582 E508                       		lsl.b	#2,d0
00006584 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000658A 6000 0000                  		bra.w	LevSz_Unk
0000658E                            ; ===========================================================================
0000658E                            ; ---------------------------------------------------------------------------
0000658E                            ; Sonic	start location array
0000658E                            ; ---------------------------------------------------------------------------
0000658E                            StartLocArray:	incbin	misc\sloc_lev.bin
000065FE                            		even
000065FE                            
000065FE                            ; ---------------------------------------------------------------------------
000065FE                            ; Which	256x256	tiles contain loops or roll-tunnels
000065FE                            ; ---------------------------------------------------------------------------
000065FE                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000065FE                            ; loop,	loop, tunnel, tunnel
000065FE                            ; ---------------------------------------------------------------------------
000065FE                            LoopTileNums:	incbin	misc\loopnums.bin
0000661A                            		even
0000661A                            
0000661A                            ; ===========================================================================
0000661A                            
0000661A                            LevSz_Unk:				; XREF: LevelSizeLoad
0000661A 7000                       		moveq	#0,d0
0000661C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006620 E748                       		lsl.w	#3,d0
00006622 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006626 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000662A 24D9                       		move.l	(a1)+,(a2)+
0000662C 24D9                       		move.l	(a1)+,(a2)+
0000662E 4E75                       		rts	
00006630                            ; End of function LevelSizeLoad
00006630                            
00006630                            ; ===========================================================================
00006630 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006638 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006640 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006648 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006650 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006658 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006660 0070 0100 0100 0100        		dc.l $700100, $1000100
00006668                            
00006668                            ; ---------------------------------------------------------------------------
00006668                            ; Subroutine to	set scroll speed of some backgrounds
00006668                            ; ---------------------------------------------------------------------------
00006668                            
00006668                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006668                            
00006668                            
00006668                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006668 4A38 FE30                  		tst.b	($FFFFFE30).w
0000666C 6600                       		bne.s	loc_6206
0000666E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006672 31C0 F714                  		move.w	d0,($FFFFF714).w
00006676 31C1 F708                  		move.w	d1,($FFFFF708).w
0000667A 31C1 F710                  		move.w	d1,($FFFFF710).w
0000667E 31C1 F718                  		move.w	d1,($FFFFF718).w
00006682                            
00006682                            loc_6206:
00006682 7400                       		moveq	#0,d2
00006684 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006688 D442                       		add.w	d2,d2
0000668A 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000668E 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006692                            ; End of function BgScrollSpeed
00006692                            
00006692                            ; ===========================================================================
00006692 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006696 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000669A 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000669E 0000                       		dc.w BgScroll_End-BgScroll_Index
000066A0                            ; ===========================================================================
000066A0                            
000066A0                            BgScroll_GHZ:				; XREF: BgScroll_Index
000066A0 6000 0000                  		bra.w	Deform_GHZ
000066A4                            ; ===========================================================================
000066A4                            
000066A4                            BgScroll_LZ:				; XREF: BgScroll_Index
000066A4 E280                       		asr.l	#1,d0
000066A6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066AA 4E75                       		rts	
000066AC                            ; ===========================================================================
000066AC                            
000066AC                            BgScroll_MZ:				; XREF: BgScroll_Index
000066AC 4E75                       		rts	
000066AE                            ; ===========================================================================
000066AE                            
000066AE                            BgScroll_SLZ:				; XREF: BgScroll_Index
000066AE E280                       		asr.l	#1,d0
000066B0 0640 00C0                  		addi.w	#$C0,d0
000066B4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066B8 4E75                       		rts	
000066BA                            ; ===========================================================================
000066BA                            
000066BA                            BgScroll_SYZ:				; XREF: BgScroll_Index
000066BA E980                       		asl.l	#4,d0
000066BC 2400                       		move.l	d0,d2
000066BE E380                       		asl.l	#1,d0
000066C0 D082                       		add.l	d2,d0
000066C2 E080                       		asr.l	#8,d0
000066C4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066C8 31C0 F714                  		move.w	d0,($FFFFF714).w
000066CC 4E75                       		rts	
000066CE                            ; ===========================================================================
000066CE                            
000066CE                            BgScroll_SBZ:				; XREF: BgScroll_Index
000066CE E980                       		asl.l	#4,d0
000066D0 E380                       		asl.l	#1,d0
000066D2 E080                       		asr.l	#8,d0
000066D4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066D8 4E75                       		rts	
000066DA                            ; ===========================================================================
000066DA                            
000066DA                            BgScroll_End:				; XREF: BgScroll_Index
000066DA 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000066E0 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000066E6 4E75                       		rts	
000066E8                            ; ===========================================================================
000066E8 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000066EE 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000066F4 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000066FA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006700 4E75                       		rts
00006702                            
00006702                            ; ---------------------------------------------------------------------------
00006702                            ; Background layer deformation subroutines
00006702                            ; ---------------------------------------------------------------------------
00006702                            
00006702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006702                            
00006702                            
00006702                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006702 4A38 F744                  		tst.b	($FFFFF744).w
00006706 6700                       		beq.s	loc_628E
00006708 4E75                       		rts	
0000670A                            ; ===========================================================================
0000670A                            
0000670A                            loc_628E:
0000670A 4278 F754                  		clr.w	($FFFFF754).w
0000670E 4278 F756                  		clr.w	($FFFFF756).w
00006712 4278 F758                  		clr.w	($FFFFF758).w
00006716 4278 F75A                  		clr.w	($FFFFF75A).w
0000671A 6100 0000                  		bsr.w	ScrollHoriz
0000671E 6100 0000                  		bsr.w	ScrollVertical
00006722 6100 0000                  		bsr.w	DynScrResizeLoad
00006726 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000672C 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006732 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006738 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000673E 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006744 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000674A 7000                       		moveq	#0,d0
0000674C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006750 D040                       		add.w	d0,d0
00006752 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006756 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000675A                            ; End of function DeformBgLayer
0000675A                            
0000675A                            ; ===========================================================================
0000675A                            ; ---------------------------------------------------------------------------
0000675A                            ; Offset index for background layer deformation	code
0000675A                            ; ---------------------------------------------------------------------------
0000675A 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000675E 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006762 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006766 0000                       		dc.w Deform_GHZ-Deform_Index
00006768                            ; ---------------------------------------------------------------------------
00006768                            ; Green	Hill Zone background layer deformation code
00006768                            ; ---------------------------------------------------------------------------
00006768                            
00006768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006768                            
00006768                            
00006768                            Deform_GHZ:				; XREF: Deform_Index
00006768 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000676C 48C4                       		ext.l	d4
0000676E EB84                       		asl.l	#5,d4
00006770 2204                       		move.l	d4,d1
00006772 E384                       		asl.l	#1,d4
00006774 D881                       		add.l	d1,d4
00006776 7A00                       		moveq	#0,d5
00006778 6100 0000                  		bsr.w	ScrollBlock1
0000677C 6100 0000                  		bsr.w	ScrollBlock4
00006780 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006784 3038 F704                  		move.w	($FFFFF704).w,d0
00006788 0240 07FF                  		andi.w	#$7FF,d0
0000678C EA48                       		lsr.w	#5,d0
0000678E 4440                       		neg.w	d0
00006790 0640 0026                  		addi.w	#$26,d0
00006794 31C0 F714                  		move.w	d0,($FFFFF714).w
00006798 3800                       		move.w	d0,d4
0000679A 6100 0000                  		bsr.w	ScrollBlock3
0000679E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067A4 323C 006F                  		move.w	#$6F,d1
000067A8 9244                       		sub.w	d4,d1
000067AA 3038 F700                  		move.w	($FFFFF700).w,d0
000067AE 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000067B4 6600                       		bne.s	loc_633C
000067B6 7000                       		moveq	#0,d0
000067B8                            
000067B8                            loc_633C:
000067B8 4440                       		neg.w	d0
000067BA 4840                       		swap	d0
000067BC 3038 F708                  		move.w	($FFFFF708).w,d0
000067C0 4440                       		neg.w	d0
000067C2                            
000067C2                            loc_6346:
000067C2 22C0                       		move.l	d0,(a1)+
000067C4 51C9 FFFC                  		dbf	d1,loc_6346
000067C8 323C 0027                  		move.w	#$27,d1
000067CC 3038 F710                  		move.w	($FFFFF710).w,d0
000067D0 4440                       		neg.w	d0
000067D2                            
000067D2                            loc_6356:
000067D2 22C0                       		move.l	d0,(a1)+
000067D4 51C9 FFFC                  		dbf	d1,loc_6356
000067D8 3038 F710                  		move.w	($FFFFF710).w,d0
000067DC 0640 0000                  		addi.w	#0,d0
000067E0 3438 F700                  		move.w	($FFFFF700).w,d2
000067E4 0642 FE00                  		addi.w	#-$200,d2
000067E8 9440                       		sub.w	d0,d2
000067EA 48C2                       		ext.l	d2
000067EC E182                       		asl.l	#8,d2
000067EE 85FC 0068                  		divs.w	#$68,d2
000067F2 48C2                       		ext.l	d2
000067F4 E182                       		asl.l	#8,d2
000067F6 7600                       		moveq	#0,d3
000067F8 3600                       		move.w	d0,d3
000067FA 323C 0047                  		move.w	#$47,d1
000067FE D244                       		add.w	d4,d1
00006800                            
00006800                            loc_6384:
00006800 3003                       		move.w	d3,d0
00006802 4440                       		neg.w	d0
00006804 22C0                       		move.l	d0,(a1)+
00006806 4843                       		swap	d3
00006808 D682                       		add.l	d2,d3
0000680A 4843                       		swap	d3
0000680C 51C9 FFF2                  		dbf	d1,loc_6384
00006810 4E75                       		rts	
00006812                            ; End of function Deform_GHZ
00006812                            
00006812                            ; ---------------------------------------------------------------------------
00006812                            ; Labyrinth Zone background layer deformation code
00006812                            ; ---------------------------------------------------------------------------
00006812                            
00006812                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006812                            
00006812                            
00006812                            Deform_LZ:				; XREF: Deform_Index
00006812 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006816 48C4                       		ext.l	d4
00006818 EF84                       		asl.l	#7,d4
0000681A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000681E 48C5                       		ext.l	d5
00006820 EF85                       		asl.l	#7,d5
00006822 6100 0000                  		bsr.w	ScrollBlock1
00006826 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000682C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006830 323C 00DF                  		move.w	#$DF,d1
00006834 3038 F700                  		move.w	($FFFFF700).w,d0
00006838 4440                       		neg.w	d0
0000683A 4840                       		swap	d0
0000683C 3038 F708                  		move.w	($FFFFF708).w,d0
00006840 4440                       		neg.w	d0
00006842                            
00006842                            loc_63C6:
00006842 22C0                       		move.l	d0,(a1)+
00006844 51C9 FFFC                  		dbf	d1,loc_63C6
00006848 3038 F646                  		move.w	($FFFFF646).w,d0
0000684C 9078 F704                  		sub.w	($FFFFF704).w,d0
00006850 4E75                       		rts	
00006852                            ; End of function Deform_LZ
00006852                            
00006852                            ; ---------------------------------------------------------------------------
00006852                            ; Marble Zone background layer deformation code
00006852                            ; ---------------------------------------------------------------------------
00006852                            
00006852                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006852                            
00006852                            
00006852                            Deform_MZ:				; XREF: Deform_Index
00006852 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006856 48C4                       		ext.l	d4
00006858 ED84                       		asl.l	#6,d4
0000685A 2204                       		move.l	d4,d1
0000685C E384                       		asl.l	#1,d4
0000685E D881                       		add.l	d1,d4
00006860 7A00                       		moveq	#0,d5
00006862 6100 0000                  		bsr.w	ScrollBlock1
00006866 303C 0200                  		move.w	#$200,d0
0000686A 3238 F704                  		move.w	($FFFFF704).w,d1
0000686E 0441 01C8                  		subi.w	#$1C8,d1
00006872 6500                       		bcs.s	loc_6402
00006874 3401                       		move.w	d1,d2
00006876 D241                       		add.w	d1,d1
00006878 D242                       		add.w	d2,d1
0000687A E441                       		asr.w	#2,d1
0000687C D041                       		add.w	d1,d0
0000687E                            
0000687E                            loc_6402:
0000687E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006882 6100 0000                  		bsr.w	ScrollBlock3
00006886 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000688C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006890 323C 00DF                  		move.w	#$DF,d1
00006894 3038 F700                  		move.w	($FFFFF700).w,d0
00006898 4440                       		neg.w	d0
0000689A 4840                       		swap	d0
0000689C 3038 F708                  		move.w	($FFFFF708).w,d0
000068A0 4440                       		neg.w	d0
000068A2                            
000068A2                            loc_6426:
000068A2 22C0                       		move.l	d0,(a1)+
000068A4 51C9 FFFC                  		dbf	d1,loc_6426
000068A8 4E75                       		rts	
000068AA                            ; End of function Deform_MZ
000068AA                            
000068AA                            ; ---------------------------------------------------------------------------
000068AA                            ; Star Light Zone background layer deformation code
000068AA                            ; ---------------------------------------------------------------------------
000068AA                            
000068AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068AA                            
000068AA                            
000068AA                            Deform_SLZ:				; XREF: Deform_Index
000068AA 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068AE 48C4                       		ext.l	d4
000068B0 EB84                       		asl.l	#5,d4
000068B2 2204                       		move.l	d4,d1
000068B4 E384                       		asl.l	#1,d4
000068B6 D881                       		add.l	d1,d4
000068B8 7A00                       		moveq	#0,d5
000068BA 6100 0000                  		bsr.w	ScrollBlock1
000068BE 6100 0000                  		bsr.w	ScrollBlock3
000068C2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068C6                            	;	move.w	($FFFFF704).w,d0
000068C6                            	;	andi.w	#$7FF,d0
000068C6 EA48                       		lsr.w	#5,d0
000068C8 4440                       		neg.w	d0
000068CA 0640 0026                  		addi.w	#$26,d0
000068CE 31C0 F714                  		move.w	d0,($FFFFF714).w
000068D2 3800                       		move.w	d0,d4
000068D4                            	;	bsr.w	ScrollBlock3
000068D4 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000068DA 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000068DE                            
000068DE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068E2 4440                       		neg.w	d0			; negate (positive to negative)
000068E4 4840                       		swap	d0			; send to the left side of d0
000068E6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068EA 45F8 A800                  		lea	($FFFFA800).w,a2
000068EE 069A 0000 5000             		addi.l	#$5000,(a2)+
000068F4 069A 0000 C000             		addi.l	#$C000,(a2)+
000068FA 3038 A800                  		move.w	($FFFFA800).w,d0
000068FE 4440                       		neg.w	d0			; negate (positive to negative)
00006900 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006902 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006906                            slz_DeformLoop_1:
00006906 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006908 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
0000690C                            
0000690C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006910 4440                       		neg.w	d0			; negate (positive to negative)
00006912 4840                       		swap	d0			; send to the left side of d0
00006914 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006918 45F8 A800                  		lea	($FFFFA800).w,a2
0000691C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006922 069A 0000 C000             		addi.l	#$C000,(a2)+
00006928 3038 A800                  		move.w	($FFFFA800).w,d0
0000692C 4440                       		neg.w	d0			; negate (positive to negative)
0000692E E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006930 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006934                            slz_DeformLoop_2:
00006934 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006936 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
0000693A                            
0000693A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000693E 4440                       		neg.w	d0			; negate (positive to negative)
00006940 4840                       		swap	d0			; send to the left side of d0
00006942 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006946 45F8 A800                  		lea	($FFFFA800).w,a2
0000694A 069A 0000 5000             		addi.l	#$5000,(a2)+
00006950 069A 0000 C000             		addi.l	#$C000,(a2)+
00006956 3038 A800                  		move.w	($FFFFA800).w,d0
0000695A 4440                       		neg.w	d0			; negate (positive to negative)
0000695C E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000695E 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006962                            slz_DeformLoop_3:
00006962 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006964 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006968                            
00006968 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000696C 4440                       		neg.w	d0			; negate (positive to negative)
0000696E 4840                       		swap	d0			; send to the left side of d0
00006970 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006974 45F8 A800                  		lea	($FFFFA800).w,a2
00006978 069A 0000 5000             		addi.l	#$5000,(a2)+
0000697E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006984 3038 A800                  		move.w	($FFFFA800).w,d0
00006988 4440                       		neg.w	d0			; negate (positive to negative)
0000698A E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000698C 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006990                            slz_DeformLoop_4:
00006990 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006992 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006996                            
00006996 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000699A 4440                       		neg.w	d0			; negate (positive to negative)
0000699C 4840                       		swap	d0			; send to the left side of d0
0000699E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069A2 45F8 A800                  		lea	($FFFFA800).w,a2
000069A6 069A 0000 5000             		addi.l	#$5000,(a2)+
000069AC 069A 0000 C000             		addi.l	#$C000,(a2)+
000069B2 3038 A800                  		move.w	($FFFFA800).w,d0
000069B6 4440                       		neg.w	d0			; negate (positive to negative)
000069B8 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000069BA 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069BE                            slz_DeformLoop_5:
000069BE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069C0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
000069C4                            
000069C4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069C8 4440                       		neg.w	d0			; negate (positive to negative)
000069CA 4840                       		swap	d0			; send to the left side of d0
000069CC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069D0 4440                       		neg.w	d0			; negate (positive to negative)
000069D2 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000069D4 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069D8                            slz_DeformLoop_6:
000069D8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069DA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000069DE                            
000069DE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069E2 4440                       		neg.w	d0			; negate (positive to negative)
000069E4 4840                       		swap	d0			; send to the left side of d0
000069E6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069EA 4440                       		neg.w	d0			; negate (positive to negative)
000069EC EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
000069EE 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069F2                            slz_DeformLoop_7:
000069F2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069F4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
000069F8                            
000069F8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069FC 4440                       		neg.w	d0			; negate (positive to negative)
000069FE 4840                       		swap	d0			; send to the left side of d0
00006A00 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A04 4440                       		neg.w	d0			; negate (positive to negative)
00006A06 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006A08 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A0C                            slz_DeformLoop_8:
00006A0C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A0E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006A12                            
00006A12 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A16 4440                       		neg.w	d0			; negate (positive to negative)
00006A18 4840                       		swap	d0			; send to the left side of d0
00006A1A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A1E 4440                       		neg.w	d0			; negate (positive to negative)
00006A20 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A22 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A26                            slz_DeformLoop_9:
00006A26 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A28 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006A2C                            
00006A2C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A30 4440                       		neg.w	d0			; negate (positive to negative)
00006A32 4840                       		swap	d0			; send to the left side of d0
00006A34 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A38 4440                       		neg.w	d0			; negate (positive to negative)
00006A3A E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A3C 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A40                            slz_DeformLoop_10:
00006A40 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A42 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006A46                            
00006A46 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A4A 4440                       		neg.w	d0			; negate (positive to negative)
00006A4C 4840                       		swap	d0			; send to the left side of d0
00006A4E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A52 4440                       		neg.w	d0			; negate (positive to negative)
00006A54 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A56 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A5A                            slz_DeformLoop_11:
00006A5A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A5C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006A60                            
00006A60 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A64 4440                       		neg.w	d0			; negate (positive to negative)
00006A66 4840                       		swap	d0			; send to the left side of d0
00006A68 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A6C 4440                       		neg.w	d0			; negate (positive to negative)
00006A6E E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006A70 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A74                            slz_DeformLoop_12:
00006A74 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A76 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006A7A                            
00006A7A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A7E 4440                       		neg.w	d0			; negate (positive to negative)
00006A80 4840                       		swap	d0			; send to the left side of d0
00006A82 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A86 4440                       		neg.w	d0			; negate (positive to negative)
00006A88 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006A8A 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A8E                            slz_DeformLoop_13:
00006A8E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A90 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006A94 4E75                       		rts	
00006A96                            ; End of function Deform_SLZ
00006A96 4E75                       		rts	
00006A98                            ; End of function Deform_SLZ_2
00006A98                            
00006A98                            ; ---------------------------------------------------------------------------
00006A98                            ; Spring Yard Zone background layer deformation	code
00006A98                            ; ---------------------------------------------------------------------------
00006A98                            
00006A98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A98                            
00006A98                            
00006A98                            Deform_SYZ:				; XREF: Deform_Index
00006A98 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A9C 48C4                       		ext.l	d4
00006A9E ED84                       		asl.l	#6,d4
00006AA0 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006AA4 48C5                       		ext.l	d5
00006AA6 E985                       		asl.l	#4,d5
00006AA8 2205                       		move.l	d5,d1
00006AAA E385                       		asl.l	#1,d5
00006AAC DA81                       		add.l	d1,d5
00006AAE 6100 0000                  		bsr.w	ScrollBlock1
00006AB2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AB8 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006ABC 323C 00DF                  		move.w	#$DF,d1
00006AC0 3038 F700                  		move.w	($FFFFF700).w,d0
00006AC4 4440                       		neg.w	d0
00006AC6 4840                       		swap	d0
00006AC8 3038 F708                  		move.w	($FFFFF708).w,d0
00006ACC 4440                       		neg.w	d0
00006ACE                            
00006ACE                            loc_653C:
00006ACE 22C0                       		move.l	d0,(a1)+
00006AD0 51C9 FFFC                  		dbf	d1,loc_653C
00006AD4 4E75                       		rts	
00006AD6                            ; End of function Deform_SYZ
00006AD6                            
00006AD6                            ; ---------------------------------------------------------------------------
00006AD6                            ; Scrap	Brain Zone background layer deformation	code
00006AD6                            ; ---------------------------------------------------------------------------
00006AD6                            
00006AD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AD6                            
00006AD6                            
00006AD6                            Deform_SBZ:				; XREF: Deform_Index
00006AD6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006ADA 48C4                       		ext.l	d4
00006ADC ED84                       		asl.l	#6,d4
00006ADE 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006AE2 48C5                       		ext.l	d5
00006AE4 E985                       		asl.l	#4,d5
00006AE6 E385                       		asl.l	#1,d5
00006AE8 6100 0000                  		bsr.w	ScrollBlock1
00006AEC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AF2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AF6 323C 00DF                  		move.w	#$DF,d1
00006AFA 3038 F700                  		move.w	($FFFFF700).w,d0
00006AFE 4440                       		neg.w	d0
00006B00 4840                       		swap	d0
00006B02 3038 F708                  		move.w	($FFFFF708).w,d0
00006B06 4440                       		neg.w	d0
00006B08                            
00006B08                            loc_6576:
00006B08 22C0                       		move.l	d0,(a1)+
00006B0A 51C9 FFFC                  		dbf	d1,loc_6576
00006B0E 4E75                       		rts	
00006B10                            ; End of function Deform_SBZ
00006B10                            
00006B10                            ; ---------------------------------------------------------------------------
00006B10                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006B10                            ; ---------------------------------------------------------------------------
00006B10                            
00006B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B10                            
00006B10                            
00006B10                            ScrollHoriz:				; XREF: DeformBgLayer
00006B10 3838 F700                  		move.w	($FFFFF700).w,d4
00006B14 6100                       		bsr.s	ScrollHoriz2
00006B16 3038 F700                  		move.w	($FFFFF700).w,d0
00006B1A 0240 0010                  		andi.w	#$10,d0
00006B1E 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006B22 B300                       		eor.b	d1,d0
00006B24 6600                       		bne.s	locret_65B0
00006B26 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006B2C 3038 F700                  		move.w	($FFFFF700).w,d0
00006B30 9044                       		sub.w	d4,d0
00006B32 6A00                       		bpl.s	loc_65AA
00006B34 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006B3A 4E75                       		rts	
00006B3C                            ; ===========================================================================
00006B3C                            
00006B3C                            loc_65AA:
00006B3C 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006B42                            
00006B42                            locret_65B0:
00006B42 4E75                       		rts	
00006B44                            ; End of function ScrollHoriz
00006B44                            
00006B44                            
00006B44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B44                            
00006B44                            
00006B44                            ScrollHoriz2:				; XREF: ScrollHoriz
00006B44 3038 D008                  		move.w	($FFFFD008).w,d0
00006B48 9078 F700                  		sub.w	($FFFFF700).w,d0
00006B4C 0440 0090                  		subi.w	#$90,d0
00006B50 6500                       		bcs.s	loc_65F6
00006B52 0440 0010                  		subi.w	#$10,d0
00006B56 6400                       		bcc.s	loc_65CC
00006B58 4278 F73A                  		clr.w	($FFFFF73A).w
00006B5C 4E75                       		rts	
00006B5E                            ; ===========================================================================
00006B5E                            
00006B5E                            loc_65CC:
00006B5E 0C40 0010                  		cmpi.w	#$10,d0
00006B62 6500                       		bcs.s	loc_65D6
00006B64 303C 0010                  		move.w	#$10,d0
00006B68                            
00006B68                            loc_65D6:
00006B68 D078 F700                  		add.w	($FFFFF700).w,d0
00006B6C B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006B70 6D00                       		blt.s	loc_65E4
00006B72 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006B76                            
00006B76                            loc_65E4:
00006B76 3200                       		move.w	d0,d1
00006B78 9278 F700                  		sub.w	($FFFFF700).w,d1
00006B7C E141                       		asl.w	#8,d1
00006B7E 31C0 F700                  		move.w	d0,($FFFFF700).w
00006B82 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006B86 4E75                       		rts	
00006B88                            ; ===========================================================================
00006B88                            
00006B88                            loc_65F6:				; XREF: ScrollHoriz2
00006B88 D078 F700                  		add.w	($FFFFF700).w,d0
00006B8C B078 F728                  		cmp.w	($FFFFF728).w,d0
00006B90 6EE4                       		bgt.s	loc_65E4
00006B92 3038 F728                  		move.w	($FFFFF728).w,d0
00006B96 60DE                       		bra.s	loc_65E4
00006B98                            ; End of function ScrollHoriz2
00006B98                            
00006B98                            ; ===========================================================================
00006B98 4A40                       		tst.w	d0
00006B9A 6A00                       		bpl.s	loc_6610
00006B9C 303C FFFE                  		move.w	#-2,d0
00006BA0 60E6                       		bra.s	loc_65F6
00006BA2                            ; ===========================================================================
00006BA2                            
00006BA2                            loc_6610:
00006BA2 303C 0002                  		move.w	#2,d0
00006BA6 60B6                       		bra.s	loc_65CC
00006BA8                            
00006BA8                            ; ---------------------------------------------------------------------------
00006BA8                            ; Subroutine to	scroll the level vertically as Sonic moves
00006BA8                            ; ---------------------------------------------------------------------------
00006BA8                            
00006BA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BA8                            
00006BA8                            
00006BA8                            ScrollVertical:				; XREF: DeformBgLayer
00006BA8 7200                       		moveq	#0,d1
00006BAA 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006BAE 9078 F704                  		sub.w	($FFFFF704).w,d0
00006BB2 0838 0002 D022             		btst	#2,($FFFFD022).w
00006BB8 6700                       		beq.s	loc_662A
00006BBA 5B40                       		subq.w	#5,d0
00006BBC                            
00006BBC                            loc_662A:
00006BBC 0838 0001 D022             		btst	#1,($FFFFD022).w
00006BC2 6700                       		beq.s	loc_664A
00006BC4 0640 0020                  		addi.w	#$20,d0
00006BC8 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006BCC 6500                       		bcs.s	loc_6696
00006BCE 0440 0040                  		subi.w	#$40,d0
00006BD2 6400                       		bcc.s	loc_6696
00006BD4 4A38 F75C                  		tst.b	($FFFFF75C).w
00006BD8 6600                       		bne.s	loc_66A8
00006BDA 6000                       		bra.s	loc_6656
00006BDC                            ; ===========================================================================
00006BDC                            
00006BDC                            loc_664A:
00006BDC 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006BE0 6600                       		bne.s	loc_665C
00006BE2 4A38 F75C                  		tst.b	($FFFFF75C).w
00006BE6 6600                       		bne.s	loc_66A8
00006BE8                            
00006BE8                            loc_6656:
00006BE8 4278 F73C                  		clr.w	($FFFFF73C).w
00006BEC 4E75                       		rts	
00006BEE                            ; ===========================================================================
00006BEE                            
00006BEE                            loc_665C:
00006BEE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006BF4 6600                       		bne.s	loc_6684
00006BF6 3238 D014                  		move.w	($FFFFD014).w,d1
00006BFA 6A00                       		bpl.s	loc_666C
00006BFC 4441                       		neg.w	d1
00006BFE                            
00006BFE                            loc_666C:
00006BFE 0C41 0800                  		cmpi.w	#$800,d1
00006C02 6400                       		bcc.s	loc_6696
00006C04 323C 0600                  		move.w	#$600,d1
00006C08 0C40 0006                  		cmpi.w	#6,d0
00006C0C 6E00                       		bgt.s	loc_66F6
00006C0E 0C40 FFFA                  		cmpi.w	#-6,d0
00006C12 6D00                       		blt.s	loc_66C0
00006C14 6000                       		bra.s	loc_66AE
00006C16                            ; ===========================================================================
00006C16                            
00006C16                            loc_6684:
00006C16 323C 0200                  		move.w	#$200,d1
00006C1A 0C40 0002                  		cmpi.w	#2,d0
00006C1E 6E00                       		bgt.s	loc_66F6
00006C20 0C40 FFFE                  		cmpi.w	#-2,d0
00006C24 6D00                       		blt.s	loc_66C0
00006C26 6000                       		bra.s	loc_66AE
00006C28                            ; ===========================================================================
00006C28                            
00006C28                            loc_6696:
00006C28 323C 1000                  		move.w	#$1000,d1
00006C2C 0C40 0010                  		cmpi.w	#$10,d0
00006C30 6E00                       		bgt.s	loc_66F6
00006C32 0C40 FFF0                  		cmpi.w	#-$10,d0
00006C36 6D00                       		blt.s	loc_66C0
00006C38 6000                       		bra.s	loc_66AE
00006C3A                            ; ===========================================================================
00006C3A                            
00006C3A                            loc_66A8:
00006C3A 7000                       		moveq	#0,d0
00006C3C 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006C40                            
00006C40                            loc_66AE:
00006C40 7200                       		moveq	#0,d1
00006C42 3200                       		move.w	d0,d1
00006C44 D278 F704                  		add.w	($FFFFF704).w,d1
00006C48 4A40                       		tst.w	d0
00006C4A 6A00 0000                  		bpl.w	loc_6700
00006C4E 6000 0000                  		bra.w	loc_66CC
00006C52                            ; ===========================================================================
00006C52                            
00006C52                            loc_66C0:
00006C52 4441                       		neg.w	d1
00006C54 48C1                       		ext.l	d1
00006C56 E181                       		asl.l	#8,d1
00006C58 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006C5C 4841                       		swap	d1
00006C5E                            
00006C5E                            loc_66CC:
00006C5E B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006C62 6E00                       		bgt.s	loc_6724
00006C64 0C41 FF00                  		cmpi.w	#-$100,d1
00006C68 6E00                       		bgt.s	loc_66F0
00006C6A 0241 07FF                  		andi.w	#$7FF,d1
00006C6E 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006C74 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006C7A 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006C80 6000                       		bra.s	loc_6724
00006C82                            ; ===========================================================================
00006C82                            
00006C82                            loc_66F0:
00006C82 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006C86 6000                       		bra.s	loc_6724
00006C88                            ; ===========================================================================
00006C88                            
00006C88                            loc_66F6:
00006C88 48C1                       		ext.l	d1
00006C8A E181                       		asl.l	#8,d1
00006C8C D2B8 F704                  		add.l	($FFFFF704).w,d1
00006C90 4841                       		swap	d1
00006C92                            
00006C92                            loc_6700:
00006C92 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006C96 6D00                       		blt.s	loc_6724
00006C98 0441 0800                  		subi.w	#$800,d1
00006C9C 6500                       		bcs.s	loc_6720
00006C9E 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006CA4 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006CAA 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006CB0 6000                       		bra.s	loc_6724
00006CB2                            ; ===========================================================================
00006CB2                            
00006CB2                            loc_6720:
00006CB2 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006CB6                            
00006CB6                            loc_6724:
00006CB6 3838 F704                  		move.w	($FFFFF704).w,d4
00006CBA 4841                       		swap	d1
00006CBC 2601                       		move.l	d1,d3
00006CBE 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006CC2 E09B                       		ror.l	#8,d3
00006CC4 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006CC8 21C1 F704                  		move.l	d1,($FFFFF704).w
00006CCC 3038 F704                  		move.w	($FFFFF704).w,d0
00006CD0 0240 0010                  		andi.w	#$10,d0
00006CD4 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006CD8 B300                       		eor.b	d1,d0
00006CDA 6600                       		bne.s	locret_6766
00006CDC 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006CE2 3038 F704                  		move.w	($FFFFF704).w,d0
00006CE6 9044                       		sub.w	d4,d0
00006CE8 6A00                       		bpl.s	loc_6760
00006CEA 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006CF0 4E75                       		rts	
00006CF2                            ; ===========================================================================
00006CF2                            
00006CF2                            loc_6760:
00006CF2 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006CF8                            
00006CF8                            locret_6766:
00006CF8 4E75                       		rts	
00006CFA                            ; End of function ScrollVertical
00006CFA                            
00006CFA                            
00006CFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CFA                            
00006CFA                            
00006CFA                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006CFA 2438 F708                  		move.l	($FFFFF708).w,d2
00006CFE 2002                       		move.l	d2,d0
00006D00 D084                       		add.l	d4,d0
00006D02 21C0 F708                  		move.l	d0,($FFFFF708).w
00006D06 2200                       		move.l	d0,d1
00006D08 4841                       		swap	d1
00006D0A 0241 0010                  		andi.w	#$10,d1
00006D0E 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006D12 B701                       		eor.b	d3,d1
00006D14 6600                       		bne.s	loc_679C
00006D16 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006D1C 9082                       		sub.l	d2,d0
00006D1E 6A00                       		bpl.s	loc_6796
00006D20 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006D26 6000                       		bra.s	loc_679C
00006D28                            ; ===========================================================================
00006D28                            
00006D28                            loc_6796:
00006D28 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006D2E                            
00006D2E                            loc_679C:
00006D2E 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006D32 2003                       		move.l	d3,d0
00006D34 D085                       		add.l	d5,d0
00006D36 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006D3A 2200                       		move.l	d0,d1
00006D3C 4841                       		swap	d1
00006D3E 0241 0010                  		andi.w	#$10,d1
00006D42 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006D46 B501                       		eor.b	d2,d1
00006D48 6600                       		bne.s	locret_67D0
00006D4A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006D50 9083                       		sub.l	d3,d0
00006D52 6A00                       		bpl.s	loc_67CA
00006D54 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006D5A 4E75                       		rts	
00006D5C                            ; ===========================================================================
00006D5C                            
00006D5C                            loc_67CA:
00006D5C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006D62                            
00006D62                            locret_67D0:
00006D62 4E75                       		rts	
00006D64                            ; End of function ScrollBlock1
00006D64                            
00006D64                            
00006D64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D64                            
00006D64                            
00006D64                            ScrollBlock2:				; XREF: Deform_SLZ
00006D64 2438 F708                  		move.l	($FFFFF708).w,d2
00006D68 2002                       		move.l	d2,d0
00006D6A D084                       		add.l	d4,d0
00006D6C 21C0 F708                  		move.l	d0,($FFFFF708).w
00006D70 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006D74 2003                       		move.l	d3,d0
00006D76 D085                       		add.l	d5,d0
00006D78 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006D7C 2200                       		move.l	d0,d1
00006D7E 4841                       		swap	d1
00006D80 0241 0010                  		andi.w	#$10,d1
00006D84 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006D88 B501                       		eor.b	d2,d1
00006D8A 6600                       		bne.s	locret_6812
00006D8C 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006D92 9083                       		sub.l	d3,d0
00006D94 6A00                       		bpl.s	loc_680C
00006D96 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006D9C 4E75                       		rts	
00006D9E                            ; ===========================================================================
00006D9E                            
00006D9E                            loc_680C:
00006D9E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006DA4                            
00006DA4                            locret_6812:
00006DA4 4E75                       		rts	
00006DA6                            ; End of function ScrollBlock2
00006DA6                            
00006DA6                            
00006DA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DA6                            
00006DA6                            
00006DA6                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006DA6 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006DAA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006DAE 3200                       		move.w	d0,d1
00006DB0 0241 0010                  		andi.w	#$10,d1
00006DB4 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DB8 B501                       		eor.b	d2,d1
00006DBA 6600                       		bne.s	locret_6842
00006DBC 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DC2 9043                       		sub.w	d3,d0
00006DC4 6A00                       		bpl.s	loc_683C
00006DC6 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DCC 4E75                       		rts	
00006DCE                            ; ===========================================================================
00006DCE                            
00006DCE                            loc_683C:
00006DCE 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006DD4                            
00006DD4                            locret_6842:
00006DD4 4E75                       		rts	
00006DD6                            ; End of function ScrollBlock3
00006DD6                            
00006DD6                            
00006DD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DD6                            
00006DD6                            
00006DD6                            ScrollBlock4:				; XREF: Deform_GHZ
00006DD6 3438 F710                  		move.w	($FFFFF710).w,d2
00006DDA 3638 F714                  		move.w	($FFFFF714).w,d3
00006DDE 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006DE2 48C0                       		ext.l	d0
00006DE4 EF80                       		asl.l	#7,d0
00006DE6 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006DEA 3038 F710                  		move.w	($FFFFF710).w,d0
00006DEE 0240 0010                  		andi.w	#$10,d0
00006DF2 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006DF6 B300                       		eor.b	d1,d0
00006DF8 6600                       		bne.s	locret_6884
00006DFA 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006E00 3038 F710                  		move.w	($FFFFF710).w,d0
00006E04 9042                       		sub.w	d2,d0
00006E06 6A00                       		bpl.s	loc_687E
00006E08 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006E0E 6000                       		bra.s	locret_6884
00006E10                            ; ===========================================================================
00006E10                            
00006E10                            loc_687E:
00006E10 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006E16                            
00006E16                            locret_6884:
00006E16 4E75                       		rts	
00006E18                            ; End of function ScrollBlock4
00006E18                            
00006E18                            
00006E18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E18                            
00006E18                            
00006E18                            sub_6886:				; XREF: loc_C44
00006E18 4BF9 00C0 0004             		lea	($C00004).l,a5
00006E1E 4DF9 00C0 0000             		lea	($C00000).l,a6
00006E24 45F8 F756                  		lea	($FFFFF756).w,a2
00006E28 47F8 F708                  		lea	($FFFFF708).w,a3
00006E2C 49F8 A440                  		lea	($FFFFA440).w,a4
00006E30 343C 6000                  		move.w	#$6000,d2
00006E34 6100 0000                  		bsr.w	sub_6954
00006E38 45F8 F758                  		lea	($FFFFF758).w,a2
00006E3C 47F8 F710                  		lea	($FFFFF710).w,a3
00006E40 6000 0000                  		bra.w	sub_69F4
00006E44                            ; End of function sub_6886
00006E44                            
00006E44                            ; ---------------------------------------------------------------------------
00006E44                            ; Subroutine to	display	correct	tiles as you move
00006E44                            ; ---------------------------------------------------------------------------
00006E44                            
00006E44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E44                            
00006E44                            
00006E44                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006E44 4BF9 00C0 0004             		lea	($C00004).l,a5
00006E4A 4DF9 00C0 0000             		lea	($C00000).l,a6
00006E50 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006E54 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006E58 49F8 A440                  		lea	($FFFFA440).w,a4
00006E5C 343C 6000                  		move.w	#$6000,d2
00006E60 6100 0000                  		bsr.w	sub_6954
00006E64 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006E68 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006E6C 6100 0000                  		bsr.w	sub_69F4
00006E70 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006E74 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006E78 49F8 A400                  		lea	($FFFFA400).w,a4
00006E7C 343C 4000                  		move.w	#$4000,d2
00006E80 4A12                       		tst.b	(a2)
00006E82 6700                       		beq.s	locret_6952
00006E84 0892 0000                  		bclr	#0,(a2)
00006E88 6700                       		beq.s	loc_6908
00006E8A 78F0                       		moveq	#-$10,d4
00006E8C 7AF0                       		moveq	#-$10,d5
00006E8E 6100 0000                  		bsr.w	sub_6C20
00006E92 78F0                       		moveq	#-$10,d4
00006E94 7AF0                       		moveq	#-$10,d5
00006E96 6100 0000                  		bsr.w	sub_6AD8
00006E9A                            
00006E9A                            loc_6908:
00006E9A 0892 0001                  		bclr	#1,(a2)
00006E9E 6700                       		beq.s	loc_6922
00006EA0 383C 00E0                  		move.w	#$E0,d4
00006EA4 7AF0                       		moveq	#-$10,d5
00006EA6 6100 0000                  		bsr.w	sub_6C20
00006EAA 383C 00E0                  		move.w	#$E0,d4
00006EAE 7AF0                       		moveq	#-$10,d5
00006EB0 6100 0000                  		bsr.w	sub_6AD8
00006EB4                            
00006EB4                            loc_6922:
00006EB4 0892 0002                  		bclr	#2,(a2)
00006EB8 6700                       		beq.s	loc_6938
00006EBA 78F0                       		moveq	#-$10,d4
00006EBC 7AF0                       		moveq	#-$10,d5
00006EBE 6100 0000                  		bsr.w	sub_6C20
00006EC2 78F0                       		moveq	#-$10,d4
00006EC4 7AF0                       		moveq	#-$10,d5
00006EC6 6100 0000                  		bsr.w	sub_6B04
00006ECA                            
00006ECA                            loc_6938:
00006ECA 0892 0003                  		bclr	#3,(a2)
00006ECE 6700                       		beq.s	locret_6952
00006ED0 78F0                       		moveq	#-$10,d4
00006ED2 3A3C 0140                  		move.w	#$140,d5
00006ED6 6100 0000                  		bsr.w	sub_6C20
00006EDA 78F0                       		moveq	#-$10,d4
00006EDC 3A3C 0140                  		move.w	#$140,d5
00006EE0 6100 0000                  		bsr.w	sub_6B04
00006EE4                            
00006EE4                            locret_6952:
00006EE4 4E75                       		rts	
00006EE6                            ; End of function LoadTilesAsYouMove
00006EE6                            
00006EE6                            
00006EE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EE6                            
00006EE6                            
00006EE6                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006EE6 4A12                       		tst.b	(a2)
00006EE8 6700 0000                  		beq.w	locret_69F2
00006EEC 0892 0000                  		bclr	#0,(a2)
00006EF0 6700                       		beq.s	loc_6972
00006EF2 78F0                       		moveq	#-$10,d4
00006EF4 7AF0                       		moveq	#-$10,d5
00006EF6 6100 0000                  		bsr.w	sub_6C20
00006EFA 78F0                       		moveq	#-$10,d4
00006EFC 7AF0                       		moveq	#-$10,d5
00006EFE 7C1F                       		moveq	#$1F,d6
00006F00 6100 0000                  		bsr.w	sub_6ADA
00006F04                            
00006F04                            loc_6972:
00006F04 0892 0001                  		bclr	#1,(a2)
00006F08 6700                       		beq.s	loc_698E
00006F0A 383C 00E0                  		move.w	#$E0,d4
00006F0E 7AF0                       		moveq	#-$10,d5
00006F10 6100 0000                  		bsr.w	sub_6C20
00006F14 383C 00E0                  		move.w	#$E0,d4
00006F18 7AF0                       		moveq	#-$10,d5
00006F1A 7C1F                       		moveq	#$1F,d6
00006F1C 6100 0000                  		bsr.w	sub_6ADA
00006F20                            
00006F20                            loc_698E:
00006F20 0892 0002                  		bclr	#2,(a2)
00006F24 6700                       		beq.s	loc_69BE
00006F26 78F0                       		moveq	#-$10,d4
00006F28 7AF0                       		moveq	#-$10,d5
00006F2A 6100 0000                  		bsr.w	sub_6C20
00006F2E 78F0                       		moveq	#-$10,d4
00006F30 7AF0                       		moveq	#-$10,d5
00006F32 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F36 322B 0004                  		move.w	4(a3),d1
00006F3A 0241 FFF0                  		andi.w	#-$10,d1
00006F3E 9C41                       		sub.w	d1,d6
00006F40 6D00                       		blt.s	loc_69BE
00006F42 E84E                       		lsr.w	#4,d6
00006F44 0C46 000F                  		cmpi.w	#$F,d6
00006F48 6500                       		bcs.s	loc_69BA
00006F4A 7C0F                       		moveq	#$F,d6
00006F4C                            
00006F4C                            loc_69BA:
00006F4C 6100 0000                  		bsr.w	sub_6B06
00006F50                            
00006F50                            loc_69BE:
00006F50 0892 0003                  		bclr	#3,(a2)
00006F54 6700                       		beq.s	locret_69F2
00006F56 78F0                       		moveq	#-$10,d4
00006F58 3A3C 0140                  		move.w	#$140,d5
00006F5C 6100 0000                  		bsr.w	sub_6C20
00006F60 78F0                       		moveq	#-$10,d4
00006F62 3A3C 0140                  		move.w	#$140,d5
00006F66 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F6A 322B 0004                  		move.w	4(a3),d1
00006F6E 0241 FFF0                  		andi.w	#-$10,d1
00006F72 9C41                       		sub.w	d1,d6
00006F74 6D00                       		blt.s	locret_69F2
00006F76 E84E                       		lsr.w	#4,d6
00006F78 0C46 000F                  		cmpi.w	#$F,d6
00006F7C 6500                       		bcs.s	loc_69EE
00006F7E 7C0F                       		moveq	#$F,d6
00006F80                            
00006F80                            loc_69EE:
00006F80 6100 0000                  		bsr.w	sub_6B06
00006F84                            
00006F84                            locret_69F2:
00006F84 4E75                       		rts	
00006F86                            ; End of function sub_6954
00006F86                            
00006F86                            
00006F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F86                            
00006F86                            
00006F86                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006F86 4A12                       		tst.b	(a2)
00006F88 6700 0000                  		beq.w	locret_6A80
00006F8C 0892 0002                  		bclr	#2,(a2)
00006F90 6700                       		beq.s	loc_6A3E
00006F92 0C53 0010                  		cmpi.w	#$10,(a3)
00006F96 6500                       		bcs.s	loc_6A3E
00006F98 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006F9C 322B 0004                  		move.w	4(a3),d1
00006FA0 0241 FFF0                  		andi.w	#-$10,d1
00006FA4 9841                       		sub.w	d1,d4
00006FA6 3F04                       		move.w	d4,-(sp)
00006FA8 7AF0                       		moveq	#-$10,d5
00006FAA 6100 0000                  		bsr.w	sub_6C20
00006FAE 381F                       		move.w	(sp)+,d4
00006FB0 7AF0                       		moveq	#-$10,d5
00006FB2 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FB6 322B 0004                  		move.w	4(a3),d1
00006FBA 0241 FFF0                  		andi.w	#-$10,d1
00006FBE 9C41                       		sub.w	d1,d6
00006FC0 6D00                       		blt.s	loc_6A3E
00006FC2 E84E                       		lsr.w	#4,d6
00006FC4 0446 000E                  		subi.w	#$E,d6
00006FC8 6400                       		bcc.s	loc_6A3E
00006FCA 4446                       		neg.w	d6
00006FCC 6100 0000                  		bsr.w	sub_6B06
00006FD0                            
00006FD0                            loc_6A3E:
00006FD0 0892 0003                  		bclr	#3,(a2)
00006FD4 6700                       		beq.s	locret_6A80
00006FD6 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006FDA 322B 0004                  		move.w	4(a3),d1
00006FDE 0241 FFF0                  		andi.w	#-$10,d1
00006FE2 9841                       		sub.w	d1,d4
00006FE4 3F04                       		move.w	d4,-(sp)
00006FE6 3A3C 0140                  		move.w	#$140,d5
00006FEA 6100 0000                  		bsr.w	sub_6C20
00006FEE 381F                       		move.w	(sp)+,d4
00006FF0 3A3C 0140                  		move.w	#$140,d5
00006FF4 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FF8 322B 0004                  		move.w	4(a3),d1
00006FFC 0241 FFF0                  		andi.w	#-$10,d1
00007000 9C41                       		sub.w	d1,d6
00007002 6D00                       		blt.s	locret_6A80
00007004 E84E                       		lsr.w	#4,d6
00007006 0446 000E                  		subi.w	#$E,d6
0000700A 6400                       		bcc.s	locret_6A80
0000700C 4446                       		neg.w	d6
0000700E 6100 0000                  		bsr.w	sub_6B06
00007012                            
00007012                            locret_6A80:
00007012 4E75                       		rts	
00007014                            ; End of function sub_69F4
00007014                            
00007014                            ; ===========================================================================
00007014 4A12                       		tst.b	(a2)
00007016 6700                       		beq.s	locret_6AD6
00007018 0892 0002                  		bclr	#2,(a2)
0000701C 6700                       		beq.s	loc_6AAC
0000701E 383C 00D0                  		move.w	#$D0,d4
00007022 322B 0004                  		move.w	4(a3),d1
00007026 0241 FFF0                  		andi.w	#-$10,d1
0000702A 9841                       		sub.w	d1,d4
0000702C 3F04                       		move.w	d4,-(sp)
0000702E 7AF0                       		moveq	#-$10,d5
00007030 6100 0000                  		bsr.w	sub_6C3C
00007034 381F                       		move.w	(sp)+,d4
00007036 7AF0                       		moveq	#-$10,d5
00007038 7C02                       		moveq	#2,d6
0000703A 6100 0000                  		bsr.w	sub_6B06
0000703E                            
0000703E                            loc_6AAC:
0000703E 0892 0003                  		bclr	#3,(a2)
00007042 6700                       		beq.s	locret_6AD6
00007044 383C 00D0                  		move.w	#$D0,d4
00007048 322B 0004                  		move.w	4(a3),d1
0000704C 0241 FFF0                  		andi.w	#-$10,d1
00007050 9841                       		sub.w	d1,d4
00007052 3F04                       		move.w	d4,-(sp)
00007054 3A3C 0140                  		move.w	#$140,d5
00007058 6100 0000                  		bsr.w	sub_6C3C
0000705C 381F                       		move.w	(sp)+,d4
0000705E 3A3C 0140                  		move.w	#$140,d5
00007062 7C02                       		moveq	#2,d6
00007064 6100 0000                  		bsr.w	sub_6B06
00007068                            
00007068                            locret_6AD6:
00007068 4E75                       		rts	
0000706A                            
0000706A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000706A                            
0000706A                            
0000706A                            sub_6AD8:				; XREF: LoadTilesAsYouMove
0000706A 7C15                       		moveq	#$15,d6
0000706C                            ; End of function sub_6AD8
0000706C                            
0000706C                            
0000706C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000706C                            
0000706C                            
0000706C                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
0000706C 2E3C 0080 0000             		move.l	#$800000,d7
00007072 2200                       		move.l	d0,d1
00007074                            
00007074                            loc_6AE2:
00007074 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007078 6100 0000                  		bsr.w	sub_6BD6
0000707C 2001                       		move.l	d1,d0
0000707E 6100 0000                  		bsr.w	sub_6B32
00007082 5801                       		addq.b	#4,d1
00007084 0201 007F                  		andi.b	#$7F,d1
00007088 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000708C 0645 0010                  		addi.w	#$10,d5
00007090 51CE FFE2                  		dbf	d6,loc_6AE2
00007094 4E75                       		rts	
00007096                            ; End of function sub_6ADA
00007096                            
00007096                            
00007096                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007096                            
00007096                            
00007096                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007096 7C0F                       		moveq	#$F,d6
00007098                            ; End of function sub_6B04
00007098                            
00007098                            
00007098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007098                            
00007098                            
00007098                            sub_6B06:				; XREF: sub_6954
00007098 2E3C 0080 0000             		move.l	#$800000,d7
0000709E 2200                       		move.l	d0,d1
000070A0                            
000070A0                            loc_6B0E:
000070A0 48E7 0C00                  		movem.l	d4-d5,-(sp)
000070A4 6100 0000                  		bsr.w	sub_6BD6
000070A8 2001                       		move.l	d1,d0
000070AA 6100 0000                  		bsr.w	sub_6B32
000070AE 0641 0100                  		addi.w	#$100,d1
000070B2 0241 0FFF                  		andi.w	#$FFF,d1
000070B6 4CDF 0030                  		movem.l	(sp)+,d4-d5
000070BA 0644 0010                  		addi.w	#$10,d4
000070BE 51CE FFE0                  		dbf	d6,loc_6B0E
000070C2 4E75                       		rts	
000070C4                            ; End of function sub_6B06
000070C4                            
000070C4                            
000070C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070C4                            
000070C4                            
000070C4                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000070C4 8042                       		or.w	d2,d0
000070C6 4840                       		swap	d0
000070C8 0810 0004                  		btst	#4,(a0)
000070CC 6600                       		bne.s	loc_6B6E
000070CE 0810 0003                  		btst	#3,(a0)
000070D2 6600                       		bne.s	loc_6B4E
000070D4 2A80                       		move.l	d0,(a5)
000070D6 2C99                       		move.l	(a1)+,(a6)
000070D8 D087                       		add.l	d7,d0
000070DA 2A80                       		move.l	d0,(a5)
000070DC 2C99                       		move.l	(a1)+,(a6)
000070DE 4E75                       		rts	
000070E0                            ; ===========================================================================
000070E0                            
000070E0                            loc_6B4E:
000070E0 2A80                       		move.l	d0,(a5)
000070E2 2819                       		move.l	(a1)+,d4
000070E4 0A84 0800 0800             		eori.l	#$8000800,d4
000070EA 4844                       		swap	d4
000070EC 2C84                       		move.l	d4,(a6)
000070EE D087                       		add.l	d7,d0
000070F0 2A80                       		move.l	d0,(a5)
000070F2 2819                       		move.l	(a1)+,d4
000070F4 0A84 0800 0800             		eori.l	#$8000800,d4
000070FA 4844                       		swap	d4
000070FC 2C84                       		move.l	d4,(a6)
000070FE 4E75                       		rts	
00007100                            ; ===========================================================================
00007100                            
00007100                            loc_6B6E:
00007100 0810 0003                  		btst	#3,(a0)
00007104 6600                       		bne.s	loc_6B90
00007106 2A80                       		move.l	d0,(a5)
00007108 2A19                       		move.l	(a1)+,d5
0000710A 2819                       		move.l	(a1)+,d4
0000710C 0A84 1000 1000             		eori.l	#$10001000,d4
00007112 2C84                       		move.l	d4,(a6)
00007114 D087                       		add.l	d7,d0
00007116 2A80                       		move.l	d0,(a5)
00007118 0A85 1000 1000             		eori.l	#$10001000,d5
0000711E 2C85                       		move.l	d5,(a6)
00007120 4E75                       		rts	
00007122                            ; ===========================================================================
00007122                            
00007122                            loc_6B90:
00007122 2A80                       		move.l	d0,(a5)
00007124 2A19                       		move.l	(a1)+,d5
00007126 2819                       		move.l	(a1)+,d4
00007128 0A84 1800 1800             		eori.l	#$18001800,d4
0000712E 4844                       		swap	d4
00007130 2C84                       		move.l	d4,(a6)
00007132 D087                       		add.l	d7,d0
00007134 2A80                       		move.l	d0,(a5)
00007136 0A85 1800 1800             		eori.l	#$18001800,d5
0000713C 4845                       		swap	d5
0000713E 2C85                       		move.l	d5,(a6)
00007140 4E75                       		rts	
00007142                            ; End of function sub_6B32
00007142                            
00007142                            ; ===========================================================================
00007142 4E75                       		rts	
00007144                            ; ===========================================================================
00007144 2A80                       		move.l	d0,(a5)
00007146 3A3C 2000                  		move.w	#$2000,d5
0000714A 3819                       		move.w	(a1)+,d4
0000714C D845                       		add.w	d5,d4
0000714E 3C84                       		move.w	d4,(a6)
00007150 3819                       		move.w	(a1)+,d4
00007152 D845                       		add.w	d5,d4
00007154 3C84                       		move.w	d4,(a6)
00007156 D087                       		add.l	d7,d0
00007158 2A80                       		move.l	d0,(a5)
0000715A 3819                       		move.w	(a1)+,d4
0000715C D845                       		add.w	d5,d4
0000715E 3C84                       		move.w	d4,(a6)
00007160 3819                       		move.w	(a1)+,d4
00007162 D845                       		add.w	d5,d4
00007164 3C84                       		move.w	d4,(a6)
00007166 4E75                       		rts	
00007168                            
00007168                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007168                            
00007168                            
00007168                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007168 43F8 B000                  		lea	($FFFFB000).w,a1
0000716C D86B 0004                  		add.w	4(a3),d4
00007170 DA53                       		add.w	(a3),d5
00007172 3604                       		move.w	d4,d3
00007174 E24B                       		lsr.w	#1,d3
00007176 0243 0380                  		andi.w	#$380,d3
0000717A E64D                       		lsr.w	#3,d5
0000717C 3005                       		move.w	d5,d0
0000717E EA48                       		lsr.w	#5,d0
00007180 0240 007F                  		andi.w	#$7F,d0
00007184 D043                       		add.w	d3,d0
00007186 76FF                       		moveq	#-1,d3
00007188 1634 0000                  		move.b	(a4,d0.w),d3
0000718C 6700                       		beq.s	locret_6C1E
0000718E 5303                       		subq.b	#1,d3
00007190 0243 007F                  		andi.w	#$7F,d3
00007194 EE5B                       		ror.w	#7,d3
00007196 D844                       		add.w	d4,d4
00007198 0244 01E0                  		andi.w	#$1E0,d4
0000719C 0245 001E                  		andi.w	#$1E,d5
000071A0 D644                       		add.w	d4,d3
000071A2 D645                       		add.w	d5,d3
000071A4 2043                       		movea.l	d3,a0
000071A6 3610                       		move.w	(a0),d3
000071A8 0243 03FF                  		andi.w	#$3FF,d3
000071AC E74B                       		lsl.w	#3,d3
000071AE D2C3                       		adda.w	d3,a1
000071B0                            
000071B0                            locret_6C1E:
000071B0 4E75                       		rts	
000071B2                            ; End of function sub_6BD6
000071B2                            
000071B2                            
000071B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071B2                            
000071B2                            
000071B2                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000071B2 D86B 0004                  		add.w	4(a3),d4
000071B6 DA53                       		add.w	(a3),d5
000071B8 0244 00F0                  		andi.w	#$F0,d4
000071BC 0245 01F0                  		andi.w	#$1F0,d5
000071C0 E94C                       		lsl.w	#4,d4
000071C2 E44D                       		lsr.w	#2,d5
000071C4 D845                       		add.w	d5,d4
000071C6 7003                       		moveq	#3,d0
000071C8 4840                       		swap	d0
000071CA 3004                       		move.w	d4,d0
000071CC 4E75                       		rts	
000071CE                            ; End of function sub_6C20
000071CE                            
000071CE                            
000071CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071CE                            ; not used
000071CE                            
000071CE                            
000071CE                            sub_6C3C:
000071CE D86B 0004                  		add.w	4(a3),d4
000071D2 DA53                       		add.w	(a3),d5
000071D4 0244 00F0                  		andi.w	#$F0,d4
000071D8 0245 01F0                  		andi.w	#$1F0,d5
000071DC E94C                       		lsl.w	#4,d4
000071DE E44D                       		lsr.w	#2,d5
000071E0 D845                       		add.w	d5,d4
000071E2 7002                       		moveq	#2,d0
000071E4 4840                       		swap	d0
000071E6 3004                       		move.w	d4,d0
000071E8 4E75                       		rts	
000071EA                            ; End of function sub_6C3C
000071EA                            
000071EA                            ; ---------------------------------------------------------------------------
000071EA                            ; Subroutine to	load tiles as soon as the level	appears
000071EA                            ; ---------------------------------------------------------------------------
000071EA                            
000071EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071EA                            
000071EA                            
000071EA                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000071EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000071F0 4DF9 00C0 0000             		lea	($C00000).l,a6
000071F6 47F8 F700                  		lea	($FFFFF700).w,a3
000071FA 49F8 A400                  		lea	($FFFFA400).w,a4
000071FE 343C 4000                  		move.w	#$4000,d2
00007202 6100                       		bsr.s	LoadTilesFromStart2
00007204 47F8 F708                  		lea	($FFFFF708).w,a3
00007208 49F8 A440                  		lea	($FFFFA440).w,a4
0000720C 343C 6000                  		move.w	#$6000,d2
00007210                            ; End of function LoadTilesFromStart
00007210                            
00007210                            
00007210                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007210                            
00007210                            
00007210                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007210 78F0                       		moveq	#-$10,d4
00007212 7C0F                       		moveq	#$F,d6
00007214                            
00007214                            loc_6C82:
00007214 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007218 7A00                       		moveq	#0,d5
0000721A 3204                       		move.w	d4,d1
0000721C 6100 FF94                  		bsr.w	sub_6C20
00007220 3801                       		move.w	d1,d4
00007222 7A00                       		moveq	#0,d5
00007224 7C1F                       		moveq	#$1F,d6
00007226 6100 FE44                  		bsr.w	sub_6ADA
0000722A 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000722E 0644 0010                  		addi.w	#$10,d4
00007232 51CE FFE0                  		dbf	d6,loc_6C82
00007236 4E75                       		rts	
00007238                            ; End of function LoadTilesFromStart2
00007238                            
00007238                            ; ---------------------------------------------------------------------------
00007238                            ; Main Load Block loading subroutine
00007238                            ; ---------------------------------------------------------------------------
00007238                            
00007238                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007238                            
00007238                            
00007238                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007238 7000                       		moveq	#0,d0
0000723A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000723E E948                       		lsl.w	#4,d0
00007240 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007246 45F2 0000                  		lea	(a2,d0.w),a2
0000724A 2F0A                       		move.l	a2,-(sp)
0000724C 588A                       		addq.l	#4,a2
0000724E 205A                       		movea.l	(a2)+,a0
00007250 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007254 303C 0000                  		move.w	#0,d0
00007258 6100 A6E8                  		bsr.w	EniDec
0000725C 205A                       		movea.l	(a2)+,a0
0000725E 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007264 6100 A85A                  		bsr.w	KosDec
00007268 6100 0000                  		bsr.w	LevelLayoutLoad
0000726C 301A                       		move.w	(a2)+,d0
0000726E 3012                       		move.w	(a2),d0
00007270 0240 00FF                  		andi.w	#$FF,d0
00007274 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000727A 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000727C 700C                       		moveq	#$C,d0		; use SB3 pallet
0000727E                            
0000727E                            MLB_ChkSBZPal:
0000727E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007284 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007286 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000728C 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000728E                            
0000728E                            MLB_UsePal0E:
0000728E 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007290                            
00007290                            MLB_NormalPal:
00007290 6100 B054                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007294 245F                       		movea.l	(sp)+,a2
00007296 584A                       		addq.w	#4,a2
00007298 7000                       		moveq	#0,d0
0000729A 1012                       		move.b	(a2),d0
0000729C 6700                       		beq.s	locret_6D10
0000729E 6100 A504                  		bsr.w	LoadPLC		; load pattern load cues
000072A2                            
000072A2                            locret_6D10:
000072A2 4E75                       		rts	
000072A4                            ; End of function MainLoadBlockLoad
000072A4                            
000072A4                            ; ---------------------------------------------------------------------------
000072A4                            ; Level	layout loading subroutine
000072A4                            ; ---------------------------------------------------------------------------
000072A4                            
000072A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072A4                            
000072A4                            
000072A4                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000072A4 47F8 A400                  		lea	($FFFFA400).w,a3
000072A8 323C 01FF                  		move.w	#$1FF,d1
000072AC 7000                       		moveq	#0,d0
000072AE                            
000072AE                            LevLoad_ClrRam:
000072AE 26C0                       		move.l	d0,(a3)+
000072B0 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000072B4                            
000072B4 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000072B8 7200                       		moveq	#0,d1
000072BA 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000072BE 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000072C2 7202                       		moveq	#2,d1
000072C4                            ; End of function LevelLayoutLoad
000072C4                            
000072C4                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000072C4                            
000072C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072C4                            
000072C4                            
000072C4                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000072C4 3038 FE10                  		move.w	($FFFFFE10).w,d0
000072C8 ED08                       		lsl.b	#6,d0
000072CA EA48                       		lsr.w	#5,d0
000072CC 3400                       		move.w	d0,d2
000072CE D040                       		add.w	d0,d0
000072D0 D042                       		add.w	d2,d0
000072D2 D041                       		add.w	d1,d0
000072D4 43F9 0000 0000             		lea	(Level_Index).l,a1
000072DA 3031 0000                  		move.w	(a1,d0.w),d0
000072DE 43F1 0000                  		lea	(a1,d0.w),a1
000072E2 7200                       		moveq	#0,d1
000072E4 3401                       		move.w	d1,d2
000072E6 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000072E8 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000072EA                            
000072EA                            LevLoad_NumRows:
000072EA 3001                       		move.w	d1,d0
000072EC 204B                       		movea.l	a3,a0
000072EE                            
000072EE                            LevLoad_Row:
000072EE 10D9                       		move.b	(a1)+,(a0)+
000072F0 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000072F4 47EB 0080                  		lea	$80(a3),a3	; do next row
000072F8 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000072FC 4E75                       		rts	
000072FE                            ; End of function LevelLayoutLoad2
000072FE                            
000072FE                            ; ---------------------------------------------------------------------------
000072FE                            ; Dynamic screen resize	loading	subroutine
000072FE                            ; ---------------------------------------------------------------------------
000072FE                            
000072FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072FE                            
000072FE                            
000072FE                            DynScrResizeLoad:			; XREF: DeformBgLayer
000072FE 7000                       		moveq	#0,d0
00007300 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007304 D040                       		add.w	d0,d0
00007306 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000730A 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000730E 7202                       		moveq	#2,d1
00007310 3038 F726                  		move.w	($FFFFF726).w,d0
00007314 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007318 6700                       		beq.s	locret_6DAA
0000731A 6400                       		bcc.s	loc_6DAC
0000731C 4441                       		neg.w	d1
0000731E 3038 F704                  		move.w	($FFFFF704).w,d0
00007322 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007326 6300                       		bls.s	loc_6DA0
00007328 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000732C 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007332                            
00007332                            loc_6DA0:
00007332 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007336 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000733C                            
0000733C                            locret_6DAA:
0000733C 4E75                       		rts	
0000733E                            ; ===========================================================================
0000733E                            
0000733E                            loc_6DAC:				; XREF: DynScrResizeLoad
0000733E 3038 F704                  		move.w	($FFFFF704).w,d0
00007342 5040                       		addq.w	#8,d0
00007344 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007348 6500                       		bcs.s	loc_6DC4
0000734A 0838 0001 D022             		btst	#1,($FFFFD022).w
00007350 6700                       		beq.s	loc_6DC4
00007352 D241                       		add.w	d1,d1
00007354 D241                       		add.w	d1,d1
00007356                            
00007356                            loc_6DC4:
00007356 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000735A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007360 4E75                       		rts	
00007362                            ; End of function DynScrResizeLoad
00007362                            
00007362                            ; ===========================================================================
00007362                            ; ---------------------------------------------------------------------------
00007362                            ; Offset index for dynamic screen resizing
00007362                            ; ---------------------------------------------------------------------------
00007362 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007366 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000736A 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000736E 0000                       		dc.w Resize_Ending-Resize_Index
00007370                            ; ===========================================================================
00007370                            ; ---------------------------------------------------------------------------
00007370                            ; Green	Hill Zone dynamic screen resizing
00007370                            ; ---------------------------------------------------------------------------
00007370                            
00007370                            Resize_GHZ:				; XREF: Resize_Index
00007370 7000                       		moveq	#0,d0
00007372 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007376 D040                       		add.w	d0,d0
00007378 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000737C 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007380                            ; ===========================================================================
00007380 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007382 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007384 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007386                            ; ===========================================================================
00007386                            
00007386                            Resize_GHZ1:
00007386 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
0000738C 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007392 6500                       		bcs.s	locret_6E08	; if not, branch
00007394 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000739A                            
0000739A                            locret_6E08:
0000739A 4E75                       		rts	
0000739C                            ; ===========================================================================
0000739C                            
0000739C                            Resize_GHZ2:
0000739C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000073A2 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000073A8 6500                       		bcs.s	locret_6E3A
000073AA 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000073B0 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000073B6 6500                       		bcs.s	locret_6E3A
000073B8 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000073BE 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
000073C4 6500                       		bcs.s	locret_6E3A
000073C6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000073CC                            
000073CC                            locret_6E3A:
000073CC 4E75                       		rts	
000073CE                            ; ===========================================================================
000073CE                            
000073CE                            Resize_GHZ3:
000073CE 7000                       		moveq	#0,d0
000073D0 1038 F742                  		move.b	($FFFFF742).w,d0
000073D4 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000073D8 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000073DC                            ; ===========================================================================
000073DC 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000073DE 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000073E0 0000                       		dc.w Resize_GHZ3end-off_6E4A
000073E2                            ; ===========================================================================
000073E2                            
000073E2                            Resize_GHZ3main:
000073E2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000073E8 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000073EE 6500                       		bcs.s	locret_6E96
000073F0 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000073F6 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000073FC 6500                       		bcs.s	locret_6E96
000073FE 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007404 6500                       		bcs.s	loc_6E98
00007406 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000740C 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007412 6400                       		bcc.s	loc_6E8E
00007414 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000741A 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007420                            
00007420                            loc_6E8E:
00007420 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007426 6400                       		bcc.s	loc_6E98
00007428                            
00007428                            locret_6E96:
00007428 4E75                       		rts	
0000742A                            ; ===========================================================================
0000742A                            
0000742A                            loc_6E98:
0000742A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007430 5438 F742                  		addq.b	#2,($FFFFF742).w
00007434 4E75                       		rts	
00007436                            ; ===========================================================================
00007436                            
00007436                            Resize_GHZ3boss:
00007436 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000743C 6400                       		bcc.s	loc_6EB0
0000743E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007442                            
00007442                            loc_6EB0:
00007442 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007448 6500                       		bcs.s	locret_6EE8
0000744A 6100 0000                  		bsr.w	SingleObjLoad
0000744E 6600                       		bne.s	loc_6ED0
00007450 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007454 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000745A 337C 0280 000C             		move.w	#$280,$C(a1)
00007460                            
00007460                            loc_6ED0:
00007460 303C 008C                  		move.w	#$8C,d0
00007464 6100 A154                  		bsr.w	PlaySound	; play boss music
00007468 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000746E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007472 7011                       		moveq	#$11,d0
00007474 6000 A32E                  		bra.w	LoadPLC		; load boss patterns
00007478                            ; ===========================================================================
00007478                            
00007478                            locret_6EE8:
00007478 4E75                       		rts	
0000747A                            ; ===========================================================================
0000747A                            
0000747A                            Resize_GHZ3end:
0000747A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007480 4E75                       		rts	
00007482                            ; ===========================================================================
00007482                            ; ---------------------------------------------------------------------------
00007482                            ; Labyrinth Zone dynamic screen	resizing
00007482                            ; ---------------------------------------------------------------------------
00007482                            
00007482                            Resize_LZ:				; XREF: Resize_Index
00007482 7000                       		moveq	#0,d0
00007484 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007488 D040                       		add.w	d0,d0
0000748A 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000748E 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007492                            ; ===========================================================================
00007492 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007494 0000                       		dc.w Resize_LZ12-Resize_LZx
00007496 0000                       		dc.w Resize_LZ3-Resize_LZx
00007498 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000749A                            ; ===========================================================================
0000749A                            
0000749A                            Resize_LZ12:
0000749A 4E75                       		rts	
0000749C                            ; ===========================================================================
0000749C                            
0000749C                            Resize_LZ3:
0000749C 7000                       		moveq	#0,d0
0000749E 1038 F742                  		move.b	($FFFFF742).w,d0
000074A2 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
000074A6 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
000074AA                            ; ===========================================================================
000074AA                            off_6E4A2:	
000074AA 0000                       		dc.w Resize_LZ3boss-off_6E4A2
000074AC 0000                       		dc.w Resize_LZ3end-off_6E4A2
000074AE                            ; ===========================================================================
000074AE                            Resize_LZ3boss:
000074AE 4A38 F742                  		tst.b	($FFFFF742).w
000074B2 6600                       		bne.s	locret_6F62
000074B4 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000074BA 6500                       		bcs.s	locret_6F62
000074BC 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
000074C2 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000074C8                            
000074C8 6100 0000                  		bsr.w	SingleObjLoad
000074CC 6600                       		bne.s	loc_6F4A
000074CE 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000074D2 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
000074D8 337C 06E0 000C             		move.w	#$6E0,$C(a1)
000074DE                            loc_6F4A:
000074DE 303C 008C                  		move.w	#$8C,d0
000074E2 6100 A0D6                  		bsr.w	PlaySound	; play boss music
000074E6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000074EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000074F0 7020                       		moveq	#$20,d0
000074F2 6000 A2B0                  		bra.w	LoadPLC		; load boss patterns
000074F6                            ; ===========================================================================
000074F6                            
000074F6                            locret_6F62:
000074F6 4E75                       		rts	
000074F8                            ; ===========================================================================
000074F8                            
000074F8                            Resize_LZ3end:
000074F8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000074FE 4E75                       		rts	
00007500                            ; ===========================================================================
00007500                            
00007500                            Resize_SBZ3:
00007500 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007506 6500                       		bcs.s	locret_6F8C
00007508 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000750E 6400                       		bcc.s	locret_6F8C	; if not, branch
00007510 4238 FE30                  		clr.b	($FFFFFE30).w
00007514 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000751A 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007520 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007526                            
00007526                            locret_6F8C:
00007526 4E75                       		rts	
00007528                            ; ===========================================================================
00007528                            ; ---------------------------------------------------------------------------
00007528                            ; Marble Zone dynamic screen resizing
00007528                            ; ---------------------------------------------------------------------------
00007528                            
00007528                            Resize_MZ:				; XREF: Resize_Index
00007528 7000                       		moveq	#0,d0
0000752A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000752E D040                       		add.w	d0,d0
00007530 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007534 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007538                            ; ===========================================================================
00007538 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000753A 0000                       		dc.w Resize_MZ2-Resize_MZx
0000753C 0000                       		dc.w Resize_MZ3-Resize_MZx
0000753E                            ; ===========================================================================
0000753E                            
0000753E                            Resize_MZ1:
0000753E 7000                       		moveq	#0,d0
00007540 1038 F742                  		move.b	($FFFFF742).w,d0
00007544 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007548 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000754C                            ; ===========================================================================
0000754C 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000754E 0000                       		dc.w loc_6FEA-off_6FB2
00007550 0000                       		dc.w loc_702E-off_6FB2
00007552 0000                       		dc.w loc_7050-off_6FB2
00007554                            ; ===========================================================================
00007554                            
00007554                            loc_6FBA:
00007554 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000755A 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007560 6500                       		bcs.s	locret_6FE8
00007562 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007568 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000756E 6500                       		bcs.s	locret_6FE8
00007570 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007576 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000757C 6500                       		bcs.s	locret_6FE8
0000757E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007582                            
00007582                            locret_6FE8:
00007582 4E75                       		rts	
00007584                            ; ===========================================================================
00007584                            
00007584                            loc_6FEA:
00007584 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000758A 6400                       		bcc.s	loc_6FF8
0000758C 5538 F742                  		subq.b	#2,($FFFFF742).w
00007590 4E75                       		rts	
00007592                            ; ===========================================================================
00007592                            
00007592                            loc_6FF8:
00007592 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007598 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000759E 6400                       		bcc.s	locret_702C
000075A0 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000075A6 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000075AC 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000075B2 6400                       		bcc.s	locret_702C
000075B4 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000075BA 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000075C0 6500                       		bcs.s	locret_702C
000075C2 5438 F742                  		addq.b	#2,($FFFFF742).w
000075C6                            
000075C6                            locret_702C:
000075C6 4E75                       		rts	
000075C8                            ; ===========================================================================
000075C8                            
000075C8                            loc_702E:
000075C8 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000075CE 6400                       		bcc.s	loc_703C
000075D0 5538 F742                  		subq.b	#2,($FFFFF742).w
000075D4 4E75                       		rts	
000075D6                            ; ===========================================================================
000075D6                            
000075D6                            loc_703C:
000075D6 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
000075DC 6500                       		bcs.s	locret_704E
000075DE 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000075E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000075E8                            
000075E8                            locret_704E:
000075E8 4E75                       		rts	
000075EA                            ; ===========================================================================
000075EA                            
000075EA                            loc_7050:
000075EA 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000075F0 6500                       		bcs.s	locret_7072
000075F2 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000075F8 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000075FE 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007604 6500                       		bcs.s	locret_7072
00007606 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000760C                            
0000760C                            locret_7072:
0000760C 4E75                       		rts	
0000760E                            ; ===========================================================================
0000760E                            
0000760E                            Resize_MZ2:
0000760E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007614 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000761A 6500                       		bcs.s	locret_7088
0000761C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007622                            
00007622                            locret_7088:
00007622 4E75                       		rts	
00007624                            ; ===========================================================================
00007624                            
00007624                            Resize_MZ3:
00007624 7000                       		moveq	#0,d0
00007626 1038 F742                  		move.b	($FFFFF742).w,d0
0000762A 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000762E 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007632                            ; ===========================================================================
00007632 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007634 0000                       		dc.w Resize_MZ3end-off_7098
00007636                            ; ===========================================================================
00007636                            
00007636                            Resize_MZ3boss:
00007636 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000763C 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007642 6500                       		bcs.s	locret_70E8
00007644 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000764A 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007650 6500                       		bcs.s	locret_70E8
00007652 6100 0000                  		bsr.w	SingleObjLoad
00007656 6600                       		bne.s	loc_70D0
00007658 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000765C 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007662 337C 022C 000C             		move.w	#$22C,$C(a1)
00007668                            
00007668                            loc_70D0:
00007668 303C 008C                  		move.w	#$8C,d0
0000766C 6100 9F4C                  		bsr.w	PlaySound	; play boss music
00007670 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007676 5438 F742                  		addq.b	#2,($FFFFF742).w
0000767A 7011                       		moveq	#$11,d0
0000767C 6000 A126                  		bra.w	LoadPLC		; load boss patterns
00007680                            ; ===========================================================================
00007680                            
00007680                            locret_70E8:
00007680 4E75                       		rts	
00007682                            ; ===========================================================================
00007682                            
00007682                            Resize_MZ3end:
00007682 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007688 4E75                       		rts	
0000768A                            ; ===========================================================================
0000768A                            ; ---------------------------------------------------------------------------
0000768A                            ; Star Light Zone dynamic screen resizing
0000768A                            ; ---------------------------------------------------------------------------
0000768A                            
0000768A                            Resize_SLZ:				; XREF: Resize_Index
0000768A 7000                       		moveq	#0,d0
0000768C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007690 D040                       		add.w	d0,d0
00007692 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007696 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000769A                            ; ===========================================================================
0000769A 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
0000769C 0000                       		dc.w Resize_SLZ2-Resize_SLZx
0000769E 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000076A0                            ; ===========================================================================
000076A0                            
000076A0                            Resize_SLZ1:
000076A0 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
000076A6 4E75                       		rts	
000076A8                            
000076A8                            Resize_SLZ2:
000076A8 4E75                       		rts	
000076AA                            ; ===========================================================================
000076AA                            
000076AA                            Resize_SLZ3:
000076AA 7000                       		moveq	#0,d0
000076AC 1038 F742                  		move.b	($FFFFF742).w,d0
000076B0 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000076B4 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000076B8                            ; ===========================================================================
000076B8 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000076BA 0000                       		dc.w Resize_SLZ3boss-off_7118
000076BC 0000                       		dc.w Resize_SLZ3end-off_7118
000076BE                            ; ===========================================================================
000076BE                            
000076BE                            Resize_SLZ3main:
000076BE 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000076C4 6500                       		bcs.s	locret_7130
000076C6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076CC 5438 F742                  		addq.b	#2,($FFFFF742).w
000076D0                            
000076D0                            locret_7130:
000076D0 4E75                       		rts	
000076D2                            ; ===========================================================================
000076D2                            
000076D2                            Resize_SLZ3boss:
000076D2 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000076D8 6500                       		bcs.s	locret_715C
000076DA 6100 0000                  		bsr.w	SingleObjLoad
000076DE 6600                       		bne.s	loc_7144
000076E0 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
000076E4                            
000076E4                            loc_7144:
000076E4 303C 008C                  		move.w	#$8C,d0
000076E8 6100 9ED0                  		bsr.w	PlaySound	; play boss music
000076EC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076F2 5438 F742                  		addq.b	#2,($FFFFF742).w
000076F6 7011                       		moveq	#$11,d0
000076F8 6000 A0AA                  		bra.w	LoadPLC		; load boss patterns
000076FC                            ; ===========================================================================
000076FC                            
000076FC                            locret_715C:
000076FC 4E75                       		rts	
000076FE                            ; ===========================================================================
000076FE                            
000076FE                            Resize_SLZ3end:
000076FE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007704 4E75                       		rts
00007706 4E75                       		rts
00007708                            ; ===========================================================================
00007708                            ; ---------------------------------------------------------------------------
00007708                            ; Spring Yard Zone dynamic screen resizing
00007708                            ; ---------------------------------------------------------------------------
00007708                            
00007708                            Resize_SYZ:				; XREF: Resize_Index
00007708 7000                       		moveq	#0,d0
0000770A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000770E D040                       		add.w	d0,d0
00007710 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007714 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007718                            ; ===========================================================================
00007718 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000771A 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000771C 0000                       		dc.w Resize_SYZ3-Resize_SYZx
0000771E                            ; ===========================================================================
0000771E                            
0000771E                            Resize_SYZ1:
0000771E 4E75                       		rts	
00007720                            ; ===========================================================================
00007720                            
00007720                            Resize_SYZ2:
00007720 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007726 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000772C 6500                       		bcs.s	locret_71A2
0000772E 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007734 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000773A 6500                       		bcs.s	locret_71A2
0000773C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007742                            
00007742                            locret_71A2:
00007742 4E75                       		rts	
00007744                            ; ===========================================================================
00007744                            
00007744                            Resize_SYZ3:
00007744 7000                       		moveq	#0,d0
00007746 1038 F742                  		move.b	($FFFFF742).w,d0
0000774A 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000774E 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007752                            ; ===========================================================================
00007752 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007754 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007756 0000                       		dc.w Resize_SYZ3end-off_71B2
00007758                            ; ===========================================================================
00007758                            
00007758                            Resize_SYZ3main:
00007758 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
0000775E 6500                       		bcs.s	locret_71CE
00007760 6100 0000                  		bsr.w	SingleObjLoad
00007764 6600                       		bne.s	locret_71CE
00007766 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000776A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000776E                            
0000776E                            locret_71CE:
0000776E 4E75                       		rts	
00007770                            ; ===========================================================================
00007770                            
00007770                            Resize_SYZ3boss:
00007770 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007776 6500                       		bcs.s	locret_7200
00007778 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
0000777E 6100 0000                  		bsr.w	SingleObjLoad
00007782 6600                       		bne.s	loc_71EC
00007784 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007788 5438 F742                  		addq.b	#2,($FFFFF742).w
0000778C                            
0000778C                            loc_71EC:
0000778C 303C 008C                  		move.w	#$8C,d0
00007790 6100 9E28                  		bsr.w	PlaySound	; play boss music
00007794 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000779A 7011                       		moveq	#$11,d0
0000779C 6000 A006                  		bra.w	LoadPLC		; load boss patterns
000077A0                            ; ===========================================================================
000077A0                            
000077A0                            locret_7200:
000077A0 4E75                       		rts	
000077A2                            ; ===========================================================================
000077A2                            
000077A2                            Resize_SYZ3end:
000077A2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077A8 4E75                       		rts	
000077AA                            ; ===========================================================================
000077AA                            ; ---------------------------------------------------------------------------
000077AA                            ; Scrap	Brain Zone dynamic screen resizing
000077AA                            ; ---------------------------------------------------------------------------
000077AA                            
000077AA                            Resize_SBZ:				; XREF: Resize_Index
000077AA 7000                       		moveq	#0,d0
000077AC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000077B0 D040                       		add.w	d0,d0
000077B2 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000077B6 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000077BA                            ; ===========================================================================
000077BA 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000077BC 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000077BE 0000                       		dc.w Resize_FZ-Resize_SBZx
000077C0                            ; ===========================================================================
000077C0                            
000077C0                            Resize_SBZ1:
000077C0 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000077C6 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000077CC 6500                       		bcs.s	locret_7242
000077CE 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000077D4 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000077DA 6500                       		bcs.s	locret_7242
000077DC 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
000077E2                            
000077E2                            locret_7242:
000077E2 4E75                       		rts	
000077E4                            ; ===========================================================================
000077E4                            
000077E4                            Resize_SBZ2:
000077E4 7000                       		moveq	#0,d0
000077E6 1038 F742                  		move.b	($FFFFF742).w,d0
000077EA 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000077EE 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000077F2                            ; ===========================================================================
000077F2 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000077F4 0000                       		dc.w Resize_SBZ2boss-off_7252
000077F6 0000                       		dc.w Resize_SBZ2boss2-off_7252
000077F8 0000                       		dc.w Resize_SBZ2end-off_7252
000077FA                            ; ===========================================================================
000077FA                            
000077FA                            Resize_SBZ2main:
000077FA 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007800 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007806 6500                       		bcs.s	locret_727A
00007808 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
0000780E 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007814 6500                       		bcs.s	locret_727A
00007816 5438 F742                  		addq.b	#2,($FFFFF742).w
0000781A                            
0000781A                            locret_727A:
0000781A 4E75                       		rts	
0000781C                            ; ===========================================================================
0000781C                            
0000781C                            Resize_SBZ2boss:
0000781C 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007822 6500                       		bcs.s	locret_7298
00007824 6100 0000                  		bsr.w	SingleObjLoad
00007828 6600                       		bne.s	locret_7298
0000782A 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
0000782E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007832 701E                       		moveq	#$1E,d0
00007834 6000 9F6E                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007838                            ; ===========================================================================
00007838                            
00007838                            locret_7298:
00007838 4E75                       		rts	
0000783A                            ; ===========================================================================
0000783A                            
0000783A                            Resize_SBZ2boss2:
0000783A 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007840 6500                       		bcs.s	loc_72B6
00007842 6100 0000                  		bsr.w	SingleObjLoad
00007846 6600                       		bne.s	loc_72B0
00007848 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
0000784C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007850                            
00007850                            loc_72B0:
00007850 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007856                            
00007856                            loc_72B6:
00007856 6000                       		bra.s	loc_72C2
00007858                            ; ===========================================================================
00007858                            
00007858                            Resize_SBZ2end:
00007858 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
0000785E 6500                       		bcs.s	loc_72C2
00007860 4E75                       		rts	
00007862                            ; ===========================================================================
00007862                            
00007862                            loc_72C2:
00007862 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007868 4E75                       		rts	
0000786A                            ; ===========================================================================
0000786A                            
0000786A                            Resize_FZ:
0000786A 7000                       		moveq	#0,d0
0000786C 1038 F742                  		move.b	($FFFFF742).w,d0
00007870 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007874 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007878                            ; ===========================================================================
00007878 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
0000787C 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007880 0000                       		dc.w Resize_FZend2-off_72D8
00007882                            ; ===========================================================================
00007882                            
00007882                            Resize_FZmain:
00007882 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007888 6500                       		bcs.s	loc_72F4
0000788A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000788E 701F                       		moveq	#$1F,d0
00007890 6100 9F12                  		bsr.w	LoadPLC		; load FZ boss patterns
00007894                            
00007894                            loc_72F4:
00007894 60CC                       		bra.s	loc_72C2
00007896                            ; ===========================================================================
00007896                            
00007896                            Resize_FZboss:
00007896 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000789C 6500                       		bcs.s	loc_7312
0000789E 6100 0000                  		bsr.w	SingleObjLoad
000078A2 6600                       		bne.s	loc_7312
000078A4 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000078A8 5438 F742                  		addq.b	#2,($FFFFF742).w
000078AC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078B2                            
000078B2                            loc_7312:
000078B2 60AE                       		bra.s	loc_72C2
000078B4                            ; ===========================================================================
000078B4                            
000078B4                            Resize_FZend:
000078B4 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000078BA 6500                       		bcs.s	loc_7320
000078BC 5438 F742                  		addq.b	#2,($FFFFF742).w
000078C0                            
000078C0                            loc_7320:
000078C0 60A0                       		bra.s	loc_72C2
000078C2                            ; ===========================================================================
000078C2                            
000078C2                            locret_7322:
000078C2 4E75                       		rts	
000078C4                            ; ===========================================================================
000078C4                            
000078C4                            Resize_FZend2:
000078C4 609C                       		bra.s	loc_72C2
000078C6                            ; ===========================================================================
000078C6                            ; ---------------------------------------------------------------------------
000078C6                            ; Ending sequence dynamic screen resizing (empty)
000078C6                            ; ---------------------------------------------------------------------------
000078C6                            
000078C6                            Resize_Ending:				; XREF: Resize_Index
000078C6 4E75                       		rts	
000078C8                            ; ===========================================================================
000078C8                            ; ---------------------------------------------------------------------------
000078C8                            ; Object 11 - GHZ bridge
000078C8                            ; ---------------------------------------------------------------------------
000078C8                            
000078C8                            Obj11:					; XREF: Obj_Index
000078C8 7000                       		moveq	#0,d0
000078CA 1028 0024                  		move.b	$24(a0),d0
000078CE 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
000078D2 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
000078D6                            ; ===========================================================================
000078D6 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
000078DA 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
000078DE 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
000078E2                            ; ===========================================================================
000078E2                            
000078E2                            Obj11_Main:				; XREF: Obj11_Index
000078E2 5428 0024                  		addq.b	#2,$24(a0)
000078E6 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000078EE 317C 438E 0002             		move.w	#$438E,2(a0)
000078F4 117C 0004 0001             		move.b	#4,1(a0)
000078FA 117C 0003 0018             		move.b	#3,$18(a0)
00007900 117C 0080 0019             		move.b	#$80,$19(a0)
00007906 3428 000C                  		move.w	$C(a0),d2
0000790A 3628 0008                  		move.w	8(a0),d3
0000790E 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007910 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007914 7200                       		moveq	#0,d1
00007916 1212                       		move.b	(a2),d1		; copy a2 to d1
00007918 14FC 0000                  		move.b	#0,(a2)+
0000791C 3001                       		move.w	d1,d0
0000791E E248                       		lsr.w	#1,d0
00007920 E948                       		lsl.w	#4,d0
00007922 9640                       		sub.w	d0,d3
00007924 5501                       		subq.b	#2,d1
00007926 6500                       		bcs.s	Obj11_Action
00007928                            
00007928                            Obj11_MakeBdg:
00007928 6100 0000                  		bsr.w	SingleObjLoad
0000792C 6600                       		bne.s	Obj11_Action
0000792E 5228 0028                  		addq.b	#1,$28(a0)
00007932 B668 0008                  		cmp.w	8(a0),d3
00007936 6600                       		bne.s	loc_73B8
00007938 0643 0010                  		addi.w	#$10,d3
0000793C 3142 000C                  		move.w	d2,$C(a0)
00007940 3142 003C                  		move.w	d2,$3C(a0)
00007944 3A08                       		move.w	a0,d5
00007946 0445 D000                  		subi.w	#-$3000,d5
0000794A EC4D                       		lsr.w	#6,d5
0000794C 0245 007F                  		andi.w	#$7F,d5
00007950 14C5                       		move.b	d5,(a2)+
00007952 5228 0028                  		addq.b	#1,$28(a0)
00007956                            
00007956                            loc_73B8:				; XREF: ROM:00007398j
00007956 3A09                       		move.w	a1,d5
00007958 0445 D000                  		subi.w	#-$3000,d5
0000795C EC4D                       		lsr.w	#6,d5
0000795E 0245 007F                  		andi.w	#$7F,d5
00007962 14C5                       		move.b	d5,(a2)+
00007964 137C 000A 0024             		move.b	#$A,$24(a1)
0000796A 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
0000796C 3342 000C                  		move.w	d2,$C(a1)
00007970 3342 003C                  		move.w	d2,$3C(a1)
00007974 3343 0008                  		move.w	d3,8(a1)
00007978 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007980 337C 438E 0002             		move.w	#$438E,2(a1)
00007986 137C 0004 0001             		move.b	#4,1(a1)
0000798C 137C 0003 0018             		move.b	#3,$18(a1)
00007992 137C 0008 0019             		move.b	#8,$19(a1)
00007998 0643 0010                  		addi.w	#$10,d3
0000799C 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000079A0                            
000079A0                            Obj11_Action:				; XREF: Obj11_Index
000079A0 6100                       		bsr.s	Obj11_Solid
000079A2 4A28 003E                  		tst.b	$3E(a0)
000079A6 6700                       		beq.s	Obj11_Display
000079A8 5928 003E                  		subq.b	#4,$3E(a0)
000079AC 6100 0000                  		bsr.w	Obj11_Bend
000079B0                            
000079B0                            Obj11_Display:
000079B0 6100 0000                  		bsr.w	DisplaySprite
000079B4 6000 0000                  		bra.w	Obj11_ChkDel
000079B8                            
000079B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079B8                            
000079B8                            
000079B8                            Obj11_Solid:				; XREF: Obj11_Action
000079B8 7200                       		moveq	#0,d1
000079BA 1228 0028                  		move.b	$28(a0),d1
000079BE E749                       		lsl.w	#3,d1
000079C0 3401                       		move.w	d1,d2
000079C2 5041                       		addq.w	#8,d1
000079C4 D442                       		add.w	d2,d2
000079C6 43F8 D000                  		lea	($FFFFD000).w,a1
000079CA 4A69 0012                  		tst.w	$12(a1)
000079CE 6B00 0000                  		bmi.w	locret_751E
000079D2 3029 0008                  		move.w	8(a1),d0
000079D6 9068 0008                  		sub.w	8(a0),d0
000079DA D041                       		add.w	d1,d0
000079DC 6B00 0000                  		bmi.w	locret_751E
000079E0 B042                       		cmp.w	d2,d0
000079E2 6400 0000                  		bcc.w	locret_751E
000079E6 6000                       		bra.s	Platform2
000079E8                            ; End of function Obj11_Solid
000079E8                            
000079E8                            ; ---------------------------------------------------------------------------
000079E8                            ; Platform subroutine
000079E8                            ; ---------------------------------------------------------------------------
000079E8                            
000079E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079E8                            
000079E8                            
000079E8                            PlatformObject:
000079E8 43F8 D000                  		lea	($FFFFD000).w,a1
000079EC 4A69 0012                  		tst.w	$12(a1)
000079F0 6B00 0000                  		bmi.w	locret_751E
000079F4 3029 0008                  		move.w	8(a1),d0
000079F8 9068 0008                  		sub.w	8(a0),d0
000079FC D041                       		add.w	d1,d0
000079FE 6B00 0000                  		bmi.w	locret_751E
00007A02 D241                       		add.w	d1,d1
00007A04 B041                       		cmp.w	d1,d0
00007A06 6400 0000                  		bcc.w	locret_751E
00007A0A                            
00007A0A                            Platform2:
00007A0A 3028 000C                  		move.w	$C(a0),d0
00007A0E 5140                       		subq.w	#8,d0
00007A10                            
00007A10                            Platform3:
00007A10 3429 000C                  		move.w	$C(a1),d2
00007A14 1229 0016                  		move.b	$16(a1),d1
00007A18 4881                       		ext.w	d1
00007A1A D242                       		add.w	d2,d1
00007A1C 5841                       		addq.w	#4,d1
00007A1E 9041                       		sub.w	d1,d0
00007A20 6200 0000                  		bhi.w	locret_751E
00007A24 0C40 FFF0                  		cmpi.w	#-$10,d0
00007A28 6500 0000                  		bcs.w	locret_751E
00007A2C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007A30 6B00 0000                  		bmi.w	locret_751E
00007A34 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007A3A 6400 0000                  		bcc.w	locret_751E
00007A3E D440                       		add.w	d0,d2
00007A40 5642                       		addq.w	#3,d2
00007A42 3342 000C                  		move.w	d2,$C(a1)
00007A46 5428 0024                  		addq.b	#2,$24(a0)
00007A4A                            
00007A4A                            loc_74AE:
00007A4A 0829 0003 0022             		btst	#3,$22(a1)
00007A50 6700                       		beq.s	loc_74DC
00007A52 7000                       		moveq	#0,d0
00007A54 1029 003D                  		move.b	$3D(a1),d0
00007A58 ED48                       		lsl.w	#6,d0
00007A5A 0680 00FF D000             		addi.l	#$FFD000,d0
00007A60 2440                       		movea.l	d0,a2
00007A62 08AA 0003 0022             		bclr	#3,$22(a2)
00007A68 422A 0025                  		clr.b	$25(a2)
00007A6C 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007A72 6600                       		bne.s	loc_74DC
00007A74 552A 0024                  		subq.b	#2,$24(a2)
00007A78                            
00007A78                            loc_74DC:
00007A78 3008                       		move.w	a0,d0
00007A7A 0440 D000                  		subi.w	#-$3000,d0
00007A7E EC48                       		lsr.w	#6,d0
00007A80 0240 007F                  		andi.w	#$7F,d0
00007A84 1340 003D                  		move.b	d0,$3D(a1)
00007A88 137C 0000 0026             		move.b	#0,$26(a1)
00007A8E 337C 0000 0012             		move.w	#0,$12(a1)
00007A94 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007A9A 0829 0001 0022             		btst	#1,$22(a1)
00007AA0 6700                       		beq.s	loc_7512
00007AA2 2F08                       		move.l	a0,-(sp)
00007AA4 2049                       		movea.l	a1,a0
00007AA6 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007AAC 205F                       		movea.l	(sp)+,a0
00007AAE                            
00007AAE                            loc_7512:
00007AAE 08E9 0003 0022             		bset	#3,$22(a1)
00007AB4 08E8 0003 0022             		bset	#3,$22(a0)
00007ABA                            
00007ABA                            locret_751E:
00007ABA 4E75                       		rts	
00007ABC                            ; End of function PlatformObject
00007ABC                            
00007ABC                            ; ---------------------------------------------------------------------------
00007ABC                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007ABC                            ; ---------------------------------------------------------------------------
00007ABC                            
00007ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ABC                            
00007ABC                            
00007ABC                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007ABC 43F8 D000                  		lea	($FFFFD000).w,a1
00007AC0 4A69 0012                  		tst.w	$12(a1)
00007AC4 6B00 FFF4                  		bmi.w	locret_751E
00007AC8 3029 0008                  		move.w	8(a1),d0
00007ACC 9068 0008                  		sub.w	8(a0),d0
00007AD0 D041                       		add.w	d1,d0
00007AD2 6BE6                       		bmi.s	locret_751E
00007AD4 D241                       		add.w	d1,d1
00007AD6 B041                       		cmp.w	d1,d0
00007AD8 64E0                       		bcc.s	locret_751E
00007ADA 0828 0000 0001             		btst	#0,1(a0)
00007AE0 6700                       		beq.s	loc_754A
00007AE2 4640                       		not.w	d0
00007AE4 D041                       		add.w	d1,d0
00007AE6                            
00007AE6                            loc_754A:
00007AE6 E248                       		lsr.w	#1,d0
00007AE8 7600                       		moveq	#0,d3
00007AEA 1632 0000                  		move.b	(a2,d0.w),d3
00007AEE 3028 000C                  		move.w	$C(a0),d0
00007AF2 9043                       		sub.w	d3,d0
00007AF4 6000 FF1A                  		bra.w	Platform3
00007AF8                            ; End of function SlopeObject
00007AF8                            
00007AF8                            
00007AF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AF8                            
00007AF8                            
00007AF8                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007AF8 43F8 D000                  		lea	($FFFFD000).w,a1
00007AFC 4A69 0012                  		tst.w	$12(a1)
00007B00 6B00 FFB8                  		bmi.w	locret_751E
00007B04 3029 0008                  		move.w	8(a1),d0
00007B08 9068 0008                  		sub.w	8(a0),d0
00007B0C D041                       		add.w	d1,d0
00007B0E 6B00 FFAA                  		bmi.w	locret_751E
00007B12 D241                       		add.w	d1,d1
00007B14 B041                       		cmp.w	d1,d0
00007B16 6400 FFA2                  		bcc.w	locret_751E
00007B1A 3028 000C                  		move.w	$C(a0),d0
00007B1E 9043                       		sub.w	d3,d0
00007B20 6000 FEEE                  		bra.w	Platform3
00007B24                            ; End of function Obj15_Solid
00007B24                            
00007B24                            ; ===========================================================================
00007B24                            
00007B24                            Obj11_Action2:				; XREF: Obj11_Index
00007B24 6100                       		bsr.s	Obj11_WalkOff
00007B26 6100 0000                  		bsr.w	DisplaySprite
00007B2A 6000 0000                  		bra.w	Obj11_ChkDel
00007B2E                            
00007B2E                            ; ---------------------------------------------------------------------------
00007B2E                            ; Subroutine allowing Sonic to walk off a bridge
00007B2E                            ; ---------------------------------------------------------------------------
00007B2E                            
00007B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B2E                            
00007B2E                            
00007B2E                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007B2E 7200                       		moveq	#0,d1
00007B30 1228 0028                  		move.b	$28(a0),d1
00007B34 E749                       		lsl.w	#3,d1
00007B36 3401                       		move.w	d1,d2
00007B38 5041                       		addq.w	#8,d1
00007B3A 6100                       		bsr.s	ExitPlatform2
00007B3C 6400                       		bcc.s	locret_75BE
00007B3E E848                       		lsr.w	#4,d0
00007B40 1140 003F                  		move.b	d0,$3F(a0)
00007B44 1028 003E                  		move.b	$3E(a0),d0
00007B48 0C00 0040                  		cmpi.b	#$40,d0
00007B4C 6700                       		beq.s	loc_75B6
00007B4E 5828 003E                  		addq.b	#4,$3E(a0)
00007B52                            
00007B52                            loc_75B6:
00007B52 6100 0000                  		bsr.w	Obj11_Bend
00007B56 6100 0000                  		bsr.w	Obj11_MoveSonic
00007B5A                            
00007B5A                            locret_75BE:
00007B5A 4E75                       		rts	
00007B5C                            ; End of function Obj11_WalkOff
00007B5C                            
00007B5C                            ; ---------------------------------------------------------------------------
00007B5C                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007B5C                            ; ---------------------------------------------------------------------------
00007B5C                            
00007B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B5C                            
00007B5C                            
00007B5C                            ExitPlatform:
00007B5C 3401                       		move.w	d1,d2
00007B5E                            
00007B5E                            ExitPlatform2:
00007B5E D442                       		add.w	d2,d2
00007B60 43F8 D000                  		lea	($FFFFD000).w,a1
00007B64 0829 0001 0022             		btst	#1,$22(a1)
00007B6A 6600                       		bne.s	loc_75E0
00007B6C 3029 0008                  		move.w	8(a1),d0
00007B70 9068 0008                  		sub.w	8(a0),d0
00007B74 D041                       		add.w	d1,d0
00007B76 6B00                       		bmi.s	loc_75E0
00007B78 B042                       		cmp.w	d2,d0
00007B7A 6500                       		bcs.s	locret_75F2
00007B7C                            
00007B7C                            loc_75E0:
00007B7C 08A9 0003 0022             		bclr	#3,$22(a1)
00007B82 117C 0002 0024             		move.b	#2,$24(a0)
00007B88 08A8 0003 0022             		bclr	#3,$22(a0)
00007B8E                            
00007B8E                            locret_75F2:
00007B8E 4E75                       		rts	
00007B90                            ; End of function ExitPlatform
00007B90                            
00007B90                            
00007B90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B90                            
00007B90                            
00007B90                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007B90 7000                       		moveq	#0,d0
00007B92 1028 003F                  		move.b	$3F(a0),d0
00007B96 1030 0029                  		move.b	$29(a0,d0.w),d0
00007B9A ED48                       		lsl.w	#6,d0
00007B9C 0680 00FF D000             		addi.l	#$FFD000,d0
00007BA2 2440                       		movea.l	d0,a2
00007BA4 43F8 D000                  		lea	($FFFFD000).w,a1
00007BA8 302A 000C                  		move.w	$C(a2),d0
00007BAC 5140                       		subq.w	#8,d0
00007BAE 7200                       		moveq	#0,d1
00007BB0 1229 0016                  		move.b	$16(a1),d1
00007BB4 9041                       		sub.w	d1,d0
00007BB6 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007BBA 4E75                       		rts	
00007BBC                            ; End of function Obj11_MoveSonic
00007BBC                            
00007BBC                            
00007BBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BBC                            
00007BBC                            
00007BBC                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007BBC 1028 003E                  		move.b	$3E(a0),d0
00007BC0 6100 B0A2                  		bsr.w	CalcSine
00007BC4 3800                       		move.w	d0,d4
00007BC6 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007BCC 7000                       		moveq	#0,d0
00007BCE 1028 0028                  		move.b	$28(a0),d0
00007BD2 E948                       		lsl.w	#4,d0
00007BD4 7600                       		moveq	#0,d3
00007BD6 1628 003F                  		move.b	$3F(a0),d3
00007BDA 3403                       		move.w	d3,d2
00007BDC D640                       		add.w	d0,d3
00007BDE 7A00                       		moveq	#0,d5
00007BE0 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007BE6 1A35 3000                  		move.b	(a5,d3.w),d5
00007BEA 0243 000F                  		andi.w	#$F,d3
00007BEE E94B                       		lsl.w	#4,d3
00007BF0 47F4 3000                  		lea	(a4,d3.w),a3
00007BF4 45E8 0029                  		lea	$29(a0),a2
00007BF8                            
00007BF8                            loc_765C:
00007BF8 7000                       		moveq	#0,d0
00007BFA 101A                       		move.b	(a2)+,d0
00007BFC ED48                       		lsl.w	#6,d0
00007BFE 0680 00FF D000             		addi.l	#$FFD000,d0
00007C04 2240                       		movea.l	d0,a1
00007C06 7000                       		moveq	#0,d0
00007C08 101B                       		move.b	(a3)+,d0
00007C0A 5240                       		addq.w	#1,d0
00007C0C C0C5                       		mulu.w	d5,d0
00007C0E C0C4                       		mulu.w	d4,d0
00007C10 4840                       		swap	d0
00007C12 D069 003C                  		add.w	$3C(a1),d0
00007C16 3340 000C                  		move.w	d0,$C(a1)
00007C1A 51CA FFDC                  		dbf	d2,loc_765C
00007C1E 7000                       		moveq	#0,d0
00007C20 1028 0028                  		move.b	$28(a0),d0
00007C24 7600                       		moveq	#0,d3
00007C26 1628 003F                  		move.b	$3F(a0),d3
00007C2A 5203                       		addq.b	#1,d3
00007C2C 9600                       		sub.b	d0,d3
00007C2E 4403                       		neg.b	d3
00007C30 6B00                       		bmi.s	locret_76CA
00007C32 3403                       		move.w	d3,d2
00007C34 E94B                       		lsl.w	#4,d3
00007C36 47F4 3000                  		lea	(a4,d3.w),a3
00007C3A D6C2                       		adda.w	d2,a3
00007C3C 5342                       		subq.w	#1,d2
00007C3E 6500                       		bcs.s	locret_76CA
00007C40                            
00007C40                            loc_76A4:
00007C40 7000                       		moveq	#0,d0
00007C42 101A                       		move.b	(a2)+,d0
00007C44 ED48                       		lsl.w	#6,d0
00007C46 0680 00FF D000             		addi.l	#$FFD000,d0
00007C4C 2240                       		movea.l	d0,a1
00007C4E 7000                       		moveq	#0,d0
00007C50 1023                       		move.b	-(a3),d0
00007C52 5240                       		addq.w	#1,d0
00007C54 C0C5                       		mulu.w	d5,d0
00007C56 C0C4                       		mulu.w	d4,d0
00007C58 4840                       		swap	d0
00007C5A D069 003C                  		add.w	$3C(a1),d0
00007C5E 3340 000C                  		move.w	d0,$C(a1)
00007C62 51CA FFDC                  		dbf	d2,loc_76A4
00007C66                            
00007C66                            locret_76CA:
00007C66 4E75                       		rts	
00007C68                            ; End of function Obj11_Bend
00007C68                            
00007C68                            ; ===========================================================================
00007C68                            ; ---------------------------------------------------------------------------
00007C68                            ; GHZ bridge-bending data
00007C68                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007C68                            ; ---------------------------------------------------------------------------
00007C68                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007D78                            		even
00007D78                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007E78                            		even
00007E78                            
00007E78                            ; ===========================================================================
00007E78                            
00007E78                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007E78 3028 0008                  		move.w	8(a0),d0
00007E7C 0240 FF80                  		andi.w	#$FF80,d0
00007E80 3238 F700                  		move.w	($FFFFF700).w,d1
00007E84 0441 0080                  		subi.w	#$80,d1
00007E88 0241 FF80                  		andi.w	#$FF80,d1
00007E8C 9041                       		sub.w	d1,d0
00007E8E 0C40 0280                  		cmpi.w	#$280,d0
00007E92 6200 0000                  		bhi.w	Obj11_DelAll
00007E96 4E75                       		rts	
00007E98                            ; ===========================================================================
00007E98                            
00007E98                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007E98 7400                       		moveq	#0,d2
00007E9A 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007E9E 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007EA0 5302                       		subq.b	#1,d2		; subtract 1
00007EA2 6500                       		bcs.s	Obj11_Delete
00007EA4                            
00007EA4                            Obj11_DelLoop:
00007EA4 7000                       		moveq	#0,d0
00007EA6 101A                       		move.b	(a2)+,d0
00007EA8 ED48                       		lsl.w	#6,d0
00007EAA 0680 00FF D000             		addi.l	#$FFD000,d0
00007EB0 2240                       		movea.l	d0,a1
00007EB2 B048                       		cmp.w	a0,d0
00007EB4 6700                       		beq.s	loc_791E
00007EB6 6100 0000                  		bsr.w	DeleteObject2
00007EBA                            
00007EBA                            loc_791E:
00007EBA 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007EBE                            
00007EBE                            Obj11_Delete:
00007EBE 6100 0000                  		bsr.w	DeleteObject
00007EC2 4E75                       		rts	
00007EC4                            ; ===========================================================================
00007EC4                            
00007EC4                            Obj11_Delete2:				; XREF: Obj11_Index
00007EC4 6100 0000                  		bsr.w	DeleteObject
00007EC8 4E75                       		rts	
00007ECA                            ; ===========================================================================
00007ECA                            
00007ECA                            Obj11_Display2:				; XREF: Obj11_Index
00007ECA 6100 0000                  		bsr.w	DisplaySprite
00007ECE 4E75                       		rts	
00007ED0                            ; ===========================================================================
00007ED0                            ; ---------------------------------------------------------------------------
00007ED0                            ; Sprite mappings - GHZ	bridge
00007ED0                            ; ---------------------------------------------------------------------------
00007ED0                            Map_obj11:
00007ED0                            	include "_maps\obj11.asm"
00007ED0                            ; ---------------------------------------------------------------------------
00007ED0                            ; Sprite mappings - GHZ	bridge
00007ED0                            ; ---------------------------------------------------------------------------
00007ED0 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007ED4 0000                       		dc.w byte_794B-Map_obj11
00007ED6 01                         byte_793A:	dc.b 1
00007ED7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007EDC 02                         byte_7940:	dc.b 2
00007EDD F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007EE2 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007EE7 01                         byte_794B:	dc.b 1
00007EE8 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007EEE 00                         		even
00007EEE 00                         		even
00007EEE                            
00007EEE                            ; ===========================================================================
00007EEE                            ; ---------------------------------------------------------------------------
00007EEE                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007EEE                            ;	    - spiked ball on a chain (SBZ)
00007EEE                            ; ---------------------------------------------------------------------------
00007EEE                            
00007EEE                            Obj15:					; XREF: Obj_Index
00007EEE 7000                       		moveq	#0,d0
00007EF0 1028 0024                  		move.b	$24(a0),d0
00007EF4 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007EF8 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007EFC                            ; ===========================================================================
00007EFC 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007F00 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007F04 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007F08 0000                       		dc.w Obj15_Action-Obj15_Index
00007F0A                            ; ===========================================================================
00007F0A                            
00007F0A                            Obj15_Main:				; XREF: Obj15_Index
00007F0A 5428 0024                  		addq.b	#2,$24(a0)
00007F0E 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007F16 317C 4380 0002             		move.w	#$4380,2(a0)
00007F1C 117C 0004 0001             		move.b	#4,1(a0)
00007F22 117C 0003 0018             		move.b	#3,$18(a0)
00007F28 117C 0018 0019             		move.b	#$18,$19(a0)
00007F2E 117C 0008 0016             		move.b	#8,$16(a0)
00007F34 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007F3A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007F40 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007F46 6600                       		bne.s	Obj15_NotSLZ
00007F48 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007F50 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007F56 117C 0020 0019             		move.b	#$20,$19(a0)
00007F5C 117C 0010 0016             		move.b	#$10,$16(a0)
00007F62 117C 0099 0020             		move.b	#$99,$20(a0)
00007F68                            
00007F68                            Obj15_NotSLZ:
00007F68 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007F6E 6600                       		bne.s	Obj15_SetLength
00007F70 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007F78 317C 0391 0002             		move.w	#$391,2(a0)
00007F7E 117C 0018 0019             		move.b	#$18,$19(a0)
00007F84 117C 0018 0016             		move.b	#$18,$16(a0)
00007F8A 117C 0086 0020             		move.b	#$86,$20(a0)
00007F90 117C 000C 0024             		move.b	#$C,$24(a0)
00007F96                            
00007F96                            Obj15_SetLength:
00007F96 1810                       		move.b	0(a0),d4
00007F98 7200                       		moveq	#0,d1
00007F9A 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007F9E 1212                       		move.b	(a2),d1		; move a2 to d1
00007FA0 3F01                       		move.w	d1,-(sp)
00007FA2 0241 000F                  		andi.w	#$F,d1
00007FA6 14FC 0000                  		move.b	#0,(a2)+
00007FAA 3601                       		move.w	d1,d3
00007FAC E94B                       		lsl.w	#4,d3
00007FAE 5003                       		addq.b	#8,d3
00007FB0 1143 003C                  		move.b	d3,$3C(a0)
00007FB4 5103                       		subq.b	#8,d3
00007FB6 4A28 001A                  		tst.b	$1A(a0)
00007FBA 6700                       		beq.s	Obj15_MakeChain
00007FBC 5003                       		addq.b	#8,d3
00007FBE 5341                       		subq.w	#1,d1
00007FC0                            
00007FC0                            Obj15_MakeChain:
00007FC0 6100 0000                  		bsr.w	SingleObjLoad
00007FC4 6600                       		bne.s	loc_7A92
00007FC6 5228 0028                  		addq.b	#1,$28(a0)
00007FCA 3A09                       		move.w	a1,d5
00007FCC 0445 D000                  		subi.w	#-$3000,d5
00007FD0 EC4D                       		lsr.w	#6,d5
00007FD2 0245 007F                  		andi.w	#$7F,d5
00007FD6 14C5                       		move.b	d5,(a2)+
00007FD8 137C 000A 0024             		move.b	#$A,$24(a1)
00007FDE 1284                       		move.b	d4,0(a1)	; load swinging	object
00007FE0 2368 0004 0004             		move.l	4(a0),4(a1)
00007FE6 3368 0002 0002             		move.w	2(a0),2(a1)
00007FEC 08A9 0006 0002             		bclr	#6,2(a1)
00007FF2 137C 0004 0001             		move.b	#4,1(a1)
00007FF8 137C 0004 0018             		move.b	#4,$18(a1)
00007FFE 137C 0008 0019             		move.b	#8,$19(a1)
00008004 137C 0001 001A             		move.b	#1,$1A(a1)
0000800A 1343 003C                  		move.b	d3,$3C(a1)
0000800E 0403 0010                  		subi.b	#$10,d3
00008012 6400                       		bcc.s	loc_7A8E
00008014 137C 0002 001A             		move.b	#2,$1A(a1)
0000801A 137C 0003 0018             		move.b	#3,$18(a1)
00008020 08E9 0006 0002             		bset	#6,2(a1)
00008026                            
00008026                            loc_7A8E:
00008026 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000802A                            
0000802A                            loc_7A92:
0000802A 3A08                       		move.w	a0,d5
0000802C 0445 D000                  		subi.w	#-$3000,d5
00008030 EC4D                       		lsr.w	#6,d5
00008032 0245 007F                  		andi.w	#$7F,d5
00008036 14C5                       		move.b	d5,(a2)+
00008038 317C 4080 0026             		move.w	#$4080,$26(a0)
0000803E 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008044 321F                       		move.w	(sp)+,d1
00008046 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000804A 6700                       		beq.s	loc_7AD4	; if not, branch
0000804C 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008054 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000805A 117C 0001 001A             		move.b	#1,$1A(a0)
00008060 117C 0002 0018             		move.b	#2,$18(a0)
00008066 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
0000806C                            
0000806C                            loc_7AD4:
0000806C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008072 6700                       		beq.s	Obj15_Action	; if yes, branch
00008074                            
00008074                            Obj15_SetSolid:				; XREF: Obj15_Index
00008074 7200                       		moveq	#0,d1
00008076 1228 0019                  		move.b	$19(a0),d1
0000807A 7600                       		moveq	#0,d3
0000807C 1628 0016                  		move.b	$16(a0),d3
00008080 6100 FA76                  		bsr.w	Obj15_Solid
00008084                            
00008084                            Obj15_Action:				; XREF: Obj15_Index
00008084 6100 0000                  		bsr.w	Obj15_Move
00008088 6100 0000                  		bsr.w	DisplaySprite
0000808C 6000 0000                  		bra.w	Obj15_ChkDel
00008090                            ; ===========================================================================
00008090                            
00008090                            Obj15_Action2:				; XREF: Obj15_Index
00008090 7200                       		moveq	#0,d1
00008092 1228 0019                  		move.b	$19(a0),d1
00008096 6100 FAC4                  		bsr.w	ExitPlatform
0000809A 3F28 0008                  		move.w	8(a0),-(sp)
0000809E 6100 0000                  		bsr.w	Obj15_Move
000080A2 341F                       		move.w	(sp)+,d2
000080A4 7600                       		moveq	#0,d3
000080A6 1628 0016                  		move.b	$16(a0),d3
000080AA 5203                       		addq.b	#1,d3
000080AC 6100 0000                  		bsr.w	MvSonicOnPtfm
000080B0 6100 0000                  		bsr.w	DisplaySprite
000080B4 6000 0000                  		bra.w	Obj15_ChkDel
000080B8                            
000080B8 4E75                       		rts
000080BA                            
000080BA                            ; ---------------------------------------------------------------------------
000080BA                            ; Subroutine to	change Sonic's position with a platform
000080BA                            ; ---------------------------------------------------------------------------
000080BA                            
000080BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080BA                            
000080BA                            
000080BA                            MvSonicOnPtfm:
000080BA 43F8 D000                  		lea	($FFFFD000).w,a1
000080BE 3028 000C                  		move.w	$C(a0),d0
000080C2 9043                       		sub.w	d3,d0
000080C4 6000                       		bra.s	MvSonic2
000080C6                            ; End of function MvSonicOnPtfm
000080C6                            
000080C6                            ; ---------------------------------------------------------------------------
000080C6                            ; Subroutine to	change Sonic's position with a platform
000080C6                            ; ---------------------------------------------------------------------------
000080C6                            
000080C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080C6                            
000080C6                            
000080C6                            MvSonicOnPtfm2:
000080C6 43F8 D000                  		lea	($FFFFD000).w,a1
000080CA 3028 000C                  		move.w	$C(a0),d0
000080CE 0440 0009                  		subi.w	#9,d0
000080D2                            
000080D2                            MvSonic2:
000080D2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000080D6 6B00                       		bmi.s	locret_7B62
000080D8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000080DE 6400                       		bcc.s	locret_7B62
000080E0 4A78 FE08                  		tst.w	($FFFFFE08).w
000080E4 6600                       		bne.s	locret_7B62
000080E6 7200                       		moveq	#0,d1
000080E8 1229 0016                  		move.b	$16(a1),d1
000080EC 9041                       		sub.w	d1,d0
000080EE 3340 000C                  		move.w	d0,$C(a1)
000080F2 9468 0008                  		sub.w	8(a0),d2
000080F6 9569 0008                  		sub.w	d2,8(a1)
000080FA                            
000080FA                            locret_7B62:
000080FA 4E75                       		rts	
000080FC                            ; End of function MvSonicOnPtfm2
000080FC                            
000080FC                            
000080FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080FC                            
000080FC                            
000080FC                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000080FC 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008100 323C 0080                  		move.w	#$80,d1
00008104 0828 0000 0022             		btst	#0,$22(a0)
0000810A 6700                       		beq.s	loc_7B78
0000810C 4440                       		neg.w	d0
0000810E D041                       		add.w	d1,d0
00008110                            
00008110                            loc_7B78:
00008110 6000                       		bra.s	Obj15_Move2
00008112                            ; End of function Obj15_Move
00008112                            
00008112                            
00008112                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008112                            
00008112                            
00008112                            Obj48_Move:				; XREF: Obj48_Display2
00008112 4A28 003D                  		tst.b	$3D(a0)
00008116 6600                       		bne.s	loc_7B9C
00008118 3028 003E                  		move.w	$3E(a0),d0
0000811C 5040                       		addq.w	#8,d0
0000811E 3140 003E                  		move.w	d0,$3E(a0)
00008122 D168 0026                  		add.w	d0,$26(a0)
00008126 0C40 0200                  		cmpi.w	#$200,d0
0000812A 6600                       		bne.s	loc_7BB6
0000812C 117C 0001 003D             		move.b	#1,$3D(a0)
00008132 6000                       		bra.s	loc_7BB6
00008134                            ; ===========================================================================
00008134                            
00008134                            loc_7B9C:
00008134 3028 003E                  		move.w	$3E(a0),d0
00008138 5140                       		subq.w	#8,d0
0000813A 3140 003E                  		move.w	d0,$3E(a0)
0000813E D168 0026                  		add.w	d0,$26(a0)
00008142 0C40 FE00                  		cmpi.w	#-$200,d0
00008146 6600                       		bne.s	loc_7BB6
00008148 117C 0000 003D             		move.b	#0,$3D(a0)
0000814E                            
0000814E                            loc_7BB6:
0000814E 1028 0026                  		move.b	$26(a0),d0
00008152                            ; End of function Obj48_Move
00008152                            
00008152                            
00008152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008152                            
00008152                            
00008152                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008152 6100 AB10                  		bsr.w	CalcSine
00008156 3428 0038                  		move.w	$38(a0),d2
0000815A 3628 003A                  		move.w	$3A(a0),d3
0000815E 45E8 0028                  		lea	$28(a0),a2
00008162 7C00                       		moveq	#0,d6
00008164 1C1A                       		move.b	(a2)+,d6
00008166                            
00008166                            loc_7BCE:
00008166 7800                       		moveq	#0,d4
00008168 181A                       		move.b	(a2)+,d4
0000816A ED4C                       		lsl.w	#6,d4
0000816C 0684 00FF D000             		addi.l	#$FFD000,d4
00008172 2244                       		movea.l	d4,a1
00008174 7800                       		moveq	#0,d4
00008176 1829 003C                  		move.b	$3C(a1),d4
0000817A 2A04                       		move.l	d4,d5
0000817C C9C0                       		muls.w	d0,d4
0000817E E084                       		asr.l	#8,d4
00008180 CBC1                       		muls.w	d1,d5
00008182 E085                       		asr.l	#8,d5
00008184 D842                       		add.w	d2,d4
00008186 DA43                       		add.w	d3,d5
00008188 3344 000C                  		move.w	d4,$C(a1)
0000818C 3345 0008                  		move.w	d5,8(a1)
00008190 51CE FFD4                  		dbf	d6,loc_7BCE
00008194 4E75                       		rts	
00008196                            ; End of function Obj15_Move2
00008196                            
00008196                            ; ===========================================================================
00008196                            
00008196                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008196 3028 003A                  		move.w	$3A(a0),d0
0000819A 0240 FF80                  		andi.w	#$FF80,d0
0000819E 3238 F700                  		move.w	($FFFFF700).w,d1
000081A2 0441 0080                  		subi.w	#$80,d1
000081A6 0241 FF80                  		andi.w	#$FF80,d1
000081AA 9041                       		sub.w	d1,d0
000081AC 0C40 0280                  		cmpi.w	#$280,d0
000081B0 6200 0000                  		bhi.w	Obj15_DelAll
000081B4 4E75                       		rts	
000081B6                            ; ===========================================================================
000081B6                            
000081B6                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000081B6 7400                       		moveq	#0,d2
000081B8 45E8 0028                  		lea	$28(a0),a2
000081BC 141A                       		move.b	(a2)+,d2
000081BE                            
000081BE                            Obj15_DelLoop:
000081BE 7000                       		moveq	#0,d0
000081C0 101A                       		move.b	(a2)+,d0
000081C2 ED48                       		lsl.w	#6,d0
000081C4 0680 00FF D000             		addi.l	#$FFD000,d0
000081CA 2240                       		movea.l	d0,a1
000081CC 6100 0000                  		bsr.w	DeleteObject2
000081D0 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000081D4 4E75                       		rts	
000081D6                            ; ===========================================================================
000081D6                            
000081D6                            Obj15_Delete:				; XREF: Obj15_Index
000081D6 6100 0000                  		bsr.w	DeleteObject
000081DA 4E75                       		rts	
000081DC                            ; ===========================================================================
000081DC                            
000081DC                            Obj15_Display:				; XREF: Obj15_Index
000081DC 6000 0000                  		bra.w	DisplaySprite
000081E0                            ; ===========================================================================
000081E0                            ; ---------------------------------------------------------------------------
000081E0                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000081E0                            ; ---------------------------------------------------------------------------
000081E0                            Map_obj15:
000081E0                            	include "_maps\obj15ghz.asm"
000081E0                            ; ---------------------------------------------------------------------------
000081E0                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000081E0                            ; ---------------------------------------------------------------------------
000081E0 0000                       		dc.w byte_7C4E-Map_obj15
000081E2 0000                       		dc.w byte_7C59-Map_obj15
000081E4 0000                       		dc.w byte_7C5F-Map_obj15
000081E6 02                         byte_7C4E:	dc.b 2
000081E7 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000081EC F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000081F1 01                         byte_7C59:	dc.b 1
000081F2 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000081F7 01                         byte_7C5F:	dc.b 1
000081F8 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000081FE 00                         		even
000081FE 00                         		even
000081FE                            
000081FE                            ; ---------------------------------------------------------------------------
000081FE                            ; Sprite mappings - SLZ	swinging platforms
000081FE                            ; ---------------------------------------------------------------------------
000081FE                            Map_obj15a:
000081FE                            	include "_maps\obj15slz.asm"
000081FE                            ; ---------------------------------------------------------------------------
000081FE                            ; Sprite mappings - SLZ	swinging platforms
000081FE                            ; ---------------------------------------------------------------------------
000081FE 0000                       		dc.w byte_7C6C-Map_obj15a
00008200 0000                       		dc.w byte_7C95-Map_obj15a
00008202 0000                       		dc.w byte_7C9B-Map_obj15a
00008204 08                         byte_7C6C:	dc.b 8
00008205 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000820A F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000820F F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008214 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008219 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000821E 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008223 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008228 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000822D 01                         byte_7C95:	dc.b 1
0000822E F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008233 01                         byte_7C9B:	dc.b 1
00008234 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000823A 00                         		even
0000823A 00                         		even
0000823A                            
0000823A                            ; ===========================================================================
0000823A                            ; ---------------------------------------------------------------------------
0000823A                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000823A                            ; ---------------------------------------------------------------------------
0000823A                            
0000823A                            Obj17:					; XREF: Obj_Index
0000823A 7000                       		moveq	#0,d0
0000823C 1028 0024                  		move.b	$24(a0),d0
00008240 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008244 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008248                            ; ===========================================================================
00008248 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000824A 0000                       		dc.w Obj17_Action-Obj17_Index
0000824C 0000                       		dc.w Obj17_Action-Obj17_Index
0000824E 0000                       		dc.w Obj17_Delete-Obj17_Index
00008250 0000                       		dc.w Obj17_Display-Obj17_Index
00008252                            ; ===========================================================================
00008252                            
00008252                            Obj17_Main:				; XREF: Obj17_Index
00008252 5428 0024                  		addq.b	#2,$24(a0)
00008256 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000825E 317C 4398 0002             		move.w	#$4398,2(a0)
00008264 117C 0007 0022             		move.b	#7,$22(a0)
0000826A 117C 0004 0001             		move.b	#4,1(a0)
00008270 117C 0003 0018             		move.b	#3,$18(a0)
00008276 117C 0008 0019             		move.b	#8,$19(a0)
0000827C 3428 000C                  		move.w	$C(a0),d2
00008280 3628 0008                  		move.w	8(a0),d3
00008284 1810                       		move.b	0(a0),d4
00008286 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000828A 7200                       		moveq	#0,d1
0000828C 1212                       		move.b	(a2),d1		; move a2 to d1
0000828E 14FC 0000                  		move.b	#0,(a2)+
00008292 3001                       		move.w	d1,d0
00008294 E248                       		lsr.w	#1,d0
00008296 E948                       		lsl.w	#4,d0
00008298 9640                       		sub.w	d0,d3
0000829A 5501                       		subq.b	#2,d1
0000829C 6500                       		bcs.s	Obj17_Action
0000829E 7C00                       		moveq	#0,d6
000082A0                            
000082A0                            Obj17_MakeHelix:
000082A0 6100 0000                  		bsr.w	SingleObjLoad
000082A4 6600                       		bne.s	Obj17_Action
000082A6 5228 0028                  		addq.b	#1,$28(a0)
000082AA 3A09                       		move.w	a1,d5
000082AC 0445 D000                  		subi.w	#$D000,d5
000082B0 EC4D                       		lsr.w	#6,d5
000082B2 0245 007F                  		andi.w	#$7F,d5
000082B6 14C5                       		move.b	d5,(a2)+
000082B8 137C 0008 0024             		move.b	#8,$24(a1)
000082BE 1284                       		move.b	d4,0(a1)
000082C0 3342 000C                  		move.w	d2,$C(a1)
000082C4 3343 0008                  		move.w	d3,8(a1)
000082C8 2368 0004 0004             		move.l	4(a0),4(a1)
000082CE 337C 4398 0002             		move.w	#$4398,2(a1)
000082D4 137C 0004 0001             		move.b	#4,1(a1)
000082DA 137C 0003 0018             		move.b	#3,$18(a1)
000082E0 137C 0008 0019             		move.b	#8,$19(a1)
000082E6 1346 003E                  		move.b	d6,$3E(a1)
000082EA 5206                       		addq.b	#1,d6
000082EC 0206 0007                  		andi.b	#7,d6
000082F0 0643 0010                  		addi.w	#$10,d3
000082F4 B668 0008                  		cmp.w	8(a0),d3
000082F8 6600                       		bne.s	loc_7D78
000082FA 1146 003E                  		move.b	d6,$3E(a0)
000082FE 5206                       		addq.b	#1,d6
00008300 0206 0007                  		andi.b	#7,d6
00008304 0643 0010                  		addi.w	#$10,d3
00008308 5228 0028                  		addq.b	#1,$28(a0)
0000830C                            
0000830C                            loc_7D78:
0000830C 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008310                            
00008310                            Obj17_Action:				; XREF: Obj17_Index
00008310 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008314 6100 0000                  		bsr.w	DisplaySprite
00008318 6000 0000                  		bra.w	Obj17_ChkDel
0000831C                            
0000831C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000831C                            
0000831C                            
0000831C                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000831C 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008320 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008326 D028 003E                  		add.b	$3E(a0),d0
0000832A 0200 0007                  		andi.b	#7,d0
0000832E 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008332 6600                       		bne.s	locret_7DA6
00008334 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000833A                            
0000833A                            locret_7DA6:
0000833A 4E75                       		rts	
0000833C                            ; End of function Obj17_RotateSpikes
0000833C                            
0000833C                            ; ===========================================================================
0000833C                            
0000833C                            Obj17_ChkDel:				; XREF: Obj17_Action
0000833C 3028 0008                  		move.w	8(a0),d0
00008340 0240 FF80                  		andi.w	#$FF80,d0
00008344 3238 F700                  		move.w	($FFFFF700).w,d1
00008348 0441 0080                  		subi.w	#$80,d1
0000834C 0241 FF80                  		andi.w	#$FF80,d1
00008350 9041                       		sub.w	d1,d0
00008352 0C40 0280                  		cmpi.w	#$280,d0
00008356 6200 0000                  		bhi.w	Obj17_DelAll
0000835A 4E75                       		rts	
0000835C                            ; ===========================================================================
0000835C                            
0000835C                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000835C 7400                       		moveq	#0,d2
0000835E 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008362 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008364 5502                       		subq.b	#2,d2
00008366 6500                       		bcs.s	Obj17_Delete
00008368                            
00008368                            Obj17_DelLoop:
00008368 7000                       		moveq	#0,d0
0000836A 101A                       		move.b	(a2)+,d0
0000836C ED48                       		lsl.w	#6,d0
0000836E 0680 00FF D000             		addi.l	#$FFD000,d0
00008374 2240                       		movea.l	d0,a1
00008376 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000837A 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000837E                            
0000837E                            Obj17_Delete:				; XREF: Obj17_Index
0000837E 6100 0000                  		bsr.w	DeleteObject
00008382 4E75                       		rts	
00008384                            ; ===========================================================================
00008384                            
00008384                            Obj17_Display:				; XREF: Obj17_Index
00008384 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008388 6000 0000                  		bra.w	DisplaySprite
0000838C                            ; ===========================================================================
0000838C                            ; ---------------------------------------------------------------------------
0000838C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000838C                            ; ---------------------------------------------------------------------------
0000838C                            Map_obj17:
0000838C                            	include "_maps\obj17.asm"
0000838C                            ; ---------------------------------------------------------------------------
0000838C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000838C                            ; ---------------------------------------------------------------------------
0000838C 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008390 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008394 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008398 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000839C 01                         byte_7E08:	dc.b 1
0000839D F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000083A2 01                         byte_7E0E:	dc.b 1
000083A3 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000083A8 01                         byte_7E14:	dc.b 1
000083A9 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000083AE 01                         byte_7E1A:	dc.b 1
000083AF FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000083B4 01                         byte_7E20:	dc.b 1
000083B5 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000083BA 01                         byte_7E26:	dc.b 1
000083BB 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000083C0 01                         byte_7E2C:	dc.b 1
000083C1 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000083C6                            		even
000083C6                            		even
000083C6                            
000083C6                            ; ===========================================================================
000083C6                            ; ---------------------------------------------------------------------------
000083C6                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000083C6                            ; ---------------------------------------------------------------------------
000083C6                            
000083C6                            Obj18:					; XREF: Obj_Index
000083C6 7000                       		moveq	#0,d0
000083C8 1028 0024                  		move.b	$24(a0),d0
000083CC 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000083D0 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000083D4                            ; ===========================================================================
000083D4 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000083D6 0000                       		dc.w Obj18_Solid-Obj18_Index
000083D8 0000                       		dc.w Obj18_Action2-Obj18_Index
000083DA 0000                       		dc.w Obj18_Delete-Obj18_Index
000083DC 0000                       		dc.w Obj18_Action-Obj18_Index
000083DE                            ; ===========================================================================
000083DE                            
000083DE                            Obj18_Main:				; XREF: Obj18_Index
000083DE 5428 0024                  		addq.b	#2,$24(a0)
000083E2 317C 4000 0002             		move.w	#$4000,2(a0)
000083E8 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000083F0 117C 0020 0019             		move.b	#$20,$19(a0)
000083F6 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000083FC 6600                       		bne.s	Obj18_NotSYZ
000083FE 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008406 117C 0020 0019             		move.b	#$20,$19(a0)
0000840C                            
0000840C                            Obj18_NotSYZ:
0000840C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008412 6600                       		bne.s	Obj18_NotSLZ
00008414 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000841C 117C 0020 0019             		move.b	#$20,$19(a0)
00008422 317C 4000 0002             		move.w	#$4000,2(a0)
00008428 117C 0003 0028             		move.b	#3,$28(a0)
0000842E                            
0000842E                            Obj18_NotSLZ:
0000842E 117C 0004 0001             		move.b	#4,1(a0)
00008434 117C 0004 0018             		move.b	#4,$18(a0)
0000843A 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008440 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008446 3168 0008 0032             		move.w	8(a0),$32(a0)
0000844C 317C 0080 0026             		move.w	#$80,$26(a0)
00008452 7200                       		moveq	#0,d1
00008454 1028 0028                  		move.b	$28(a0),d0
00008458 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000845C 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000845E 5201                       		addq.b	#1,d1		; use frame #1
00008460 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008466                            
00008466                            Obj18_SetFrame:
00008466 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000846A                            
0000846A                            Obj18_Solid:				; XREF: Obj18_Index
0000846A 4A28 0038                  		tst.b	$38(a0)
0000846E 6700                       		beq.s	loc_7EE0
00008470 5928 0038                  		subq.b	#4,$38(a0)
00008474                            
00008474                            loc_7EE0:
00008474 7200                       		moveq	#0,d1
00008476 1228 0019                  		move.b	$19(a0),d1
0000847A 6100 F56C                  		bsr.w	PlatformObject
0000847E                            
0000847E                            Obj18_Action:				; XREF: Obj18_Index
0000847E 6100 0000                  		bsr.w	Obj18_Move
00008482 6100 0000                  		bsr.w	Obj18_Nudge
00008486 6100 0000                  		bsr.w	DisplaySprite
0000848A 6000 0000                  		bra.w	Obj18_ChkDel
0000848E                            ; ===========================================================================
0000848E                            
0000848E                            Obj18_Action2:				; XREF: Obj18_Index
0000848E 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008494 6700                       		beq.s	loc_7F06
00008496 5828 0038                  		addq.b	#4,$38(a0)
0000849A                            
0000849A                            loc_7F06:
0000849A 7200                       		moveq	#0,d1
0000849C 1228 0019                  		move.b	$19(a0),d1
000084A0 6100 F6BA                  		bsr.w	ExitPlatform
000084A4 3F28 0008                  		move.w	8(a0),-(sp)
000084A8 6100 0000                  		bsr.w	Obj18_Move
000084AC 6100 0000                  		bsr.w	Obj18_Nudge
000084B0 341F                       		move.w	(sp)+,d2
000084B2 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000084B6 6100 0000                  		bsr.w	DisplaySprite
000084BA 6000 0000                  		bra.w	Obj18_ChkDel
000084BE                            
000084BE 4E75                       		rts
000084C0                            
000084C0                            ; ---------------------------------------------------------------------------
000084C0                            ; Subroutine to	move platform slightly when you	stand on it
000084C0                            ; ---------------------------------------------------------------------------
000084C0                            
000084C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084C0                            
000084C0                            
000084C0                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000084C0 1028 0038                  		move.b	$38(a0),d0
000084C4 6100 A79E                  		bsr.w	CalcSine
000084C8 323C 0400                  		move.w	#$400,d1
000084CC C1C1                       		muls.w	d1,d0
000084CE 4840                       		swap	d0
000084D0 D068 002C                  		add.w	$2C(a0),d0
000084D4 3140 000C                  		move.w	d0,$C(a0)
000084D8 4E75                       		rts	
000084DA                            ; End of function Obj18_Nudge
000084DA                            
000084DA                            ; ---------------------------------------------------------------------------
000084DA                            ; Subroutine to	move platforms
000084DA                            ; ---------------------------------------------------------------------------
000084DA                            
000084DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084DA                            
000084DA                            
000084DA                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000084DA 7000                       		moveq	#0,d0
000084DC 1028 0028                  		move.b	$28(a0),d0
000084E0 0240 000F                  		andi.w	#$F,d0
000084E4 D040                       		add.w	d0,d0
000084E6 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000084EA 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000084EE                            ; End of function Obj18_Move
000084EE                            
000084EE                            ; ===========================================================================
000084EE 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000084F2 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000084F6 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000084FA 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000084FE 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008502 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008506 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008508                            ; ===========================================================================
00008508                            
00008508                            Obj18_Type00:
00008508 4E75                       		rts			; platform 00 doesn't move
0000850A                            ; ===========================================================================
0000850A                            
0000850A                            Obj18_Type05:
0000850A 3028 0032                  		move.w	$32(a0),d0
0000850E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008512 4401                       		neg.b	d1		; reverse platform-motion
00008514 0601 0040                  		addi.b	#$40,d1
00008518 6000                       		bra.s	Obj18_01_Move
0000851A                            ; ===========================================================================
0000851A                            
0000851A                            Obj18_Type01:
0000851A 3028 0032                  		move.w	$32(a0),d0
0000851E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008522 0401 0040                  		subi.b	#$40,d1
00008526                            
00008526                            Obj18_01_Move:
00008526 4881                       		ext.w	d1
00008528 D041                       		add.w	d1,d0
0000852A 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000852E 6000 0000                  		bra.w	Obj18_ChgMotion
00008532                            ; ===========================================================================
00008532                            
00008532                            Obj18_Type0C:
00008532 3028 0034                  		move.w	$34(a0),d0
00008536 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000853A 4401                       		neg.b	d1		; reverse platform-motion
0000853C 0601 0030                  		addi.b	#$30,d1
00008540 6000                       		bra.s	Obj18_02_Move
00008542                            ; ===========================================================================
00008542                            
00008542                            Obj18_Type0B:
00008542 3028 0034                  		move.w	$34(a0),d0
00008546 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000854A 0401 0030                  		subi.b	#$30,d1
0000854E 6000                       		bra.s	Obj18_02_Move
00008550                            ; ===========================================================================
00008550                            
00008550                            Obj18_Type06:
00008550 3028 0034                  		move.w	$34(a0),d0
00008554 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008558 4401                       		neg.b	d1		; reverse platform-motion
0000855A 0601 0040                  		addi.b	#$40,d1
0000855E 6000                       		bra.s	Obj18_02_Move
00008560                            ; ===========================================================================
00008560                            
00008560                            Obj18_Type02:
00008560 3028 0034                  		move.w	$34(a0),d0
00008564 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008568 0401 0040                  		subi.b	#$40,d1
0000856C                            
0000856C                            Obj18_02_Move:
0000856C 4881                       		ext.w	d1
0000856E D041                       		add.w	d1,d0
00008570 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008574 6000 0000                  		bra.w	Obj18_ChgMotion
00008578                            ; ===========================================================================
00008578                            
00008578                            Obj18_Type03:
00008578 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000857C 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000857E 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008584 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008586 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000858C                            
0000858C                            Obj18_03_NoMove:
0000858C 4E75                       		rts	
0000858E                            ; ===========================================================================
0000858E                            
0000858E                            Obj18_03_Wait:
0000858E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008592 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008594 317C 0020 003A             		move.w	#32,$3A(a0)
0000859A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000859E 4E75                       		rts	
000085A0                            ; ===========================================================================
000085A0                            
000085A0                            Obj18_Type04:
000085A0 4A68 003A                  		tst.w	$3A(a0)
000085A4 6700                       		beq.s	loc_8048
000085A6 5368 003A                  		subq.w	#1,$3A(a0)
000085AA 6600                       		bne.s	loc_8048
000085AC 0828 0003 0022             		btst	#3,$22(a0)
000085B2 6700                       		beq.s	loc_8042
000085B4 08E9 0001 0022             		bset	#1,$22(a1)
000085BA 08A9 0003 0022             		bclr	#3,$22(a1)
000085C0 137C 0002 0024             		move.b	#2,$24(a1)
000085C6 08A8 0003 0022             		bclr	#3,$22(a0)
000085CC 4228 0025                  		clr.b	$25(a0)
000085D0 3368 0012 0012             		move.w	$12(a0),$12(a1)
000085D6                            
000085D6                            loc_8042:
000085D6 117C 0008 0024             		move.b	#8,$24(a0)
000085DC                            
000085DC                            loc_8048:
000085DC 2628 002C                  		move.l	$2C(a0),d3
000085E0 3028 0012                  		move.w	$12(a0),d0
000085E4 48C0                       		ext.l	d0
000085E6 E180                       		asl.l	#8,d0
000085E8 D680                       		add.l	d0,d3
000085EA 2143 002C                  		move.l	d3,$2C(a0)
000085EE 0668 0038 0012             		addi.w	#$38,$12(a0)
000085F4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000085F8 0640 00E0                  		addi.w	#$E0,d0
000085FC B068 002C                  		cmp.w	$2C(a0),d0
00008600 6400                       		bcc.s	locret_8074
00008602 117C 0006 0024             		move.b	#6,$24(a0)
00008608                            
00008608                            locret_8074:
00008608 4E75                       		rts	
0000860A                            ; ===========================================================================
0000860A                            
0000860A                            Obj18_Type07:
0000860A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000860E 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008610 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008614 7000                       		moveq	#0,d0
00008616 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000861A E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000861C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008620 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008622 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008628                            
00008628                            Obj18_07_NoMove:
00008628 4E75                       		rts	
0000862A                            ; ===========================================================================
0000862A                            
0000862A                            Obj18_07_Wait:
0000862A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000862E 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008630 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008634 4E75                       		rts	
00008636                            ; ===========================================================================
00008636                            
00008636                            Obj18_Type08:
00008636 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000863A 3028 0034                  		move.w	$34(a0),d0
0000863E 0440 0200                  		subi.w	#$200,d0
00008642 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008646 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008648 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000864C                            
0000864C                            Obj18_08_NoStop:
0000864C 4E75                       		rts	
0000864E                            ; ===========================================================================
0000864E                            
0000864E                            Obj18_Type0A:
0000864E 3028 0034                  		move.w	$34(a0),d0
00008652 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008656 0401 0040                  		subi.b	#$40,d1
0000865A 4881                       		ext.w	d1
0000865C E241                       		asr.w	#1,d1
0000865E D041                       		add.w	d1,d0
00008660 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008664                            
00008664                            Obj18_ChgMotion:
00008664 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000866A 4E75                       		rts	
0000866C                            ; ===========================================================================
0000866C                            
0000866C                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000866C 3028 0032                  		move.w	$32(a0),d0
00008670 0240 FF80                  		andi.w	#$FF80,d0
00008674 3238 F700                  		move.w	($FFFFF700).w,d1
00008678 0441 0080                  		subi.w	#$80,d1
0000867C 0241 FF80                  		andi.w	#$FF80,d1
00008680 9041                       		sub.w	d1,d0
00008682 0C40 0280                  		cmpi.w	#$280,d0
00008686 6200                       		bhi.s	Obj18_Delete
00008688 4E75                       		rts	
0000868A                            ; ===========================================================================
0000868A                            
0000868A                            Obj18_Delete:				; XREF: Obj18_Index
0000868A 6000 0000                  		bra.w	DeleteObject
0000868E                            ; ===========================================================================
0000868E                            ; ---------------------------------------------------------------------------
0000868E                            ; Sprite mappings - unused
0000868E                            ; ---------------------------------------------------------------------------
0000868E                            Map_obj18x:
0000868E                            	include "_maps\obj18x.asm"
0000868E                            ; ---------------------------------------------------------------------------
0000868E                            ; Sprite mappings - unused
0000868E                            ; ---------------------------------------------------------------------------
0000868E 0000                       		dc.w byte_80FE-Map_obj18x
00008690 0000                       		dc.w byte_8109-Map_obj18x
00008692 02                         byte_80FE:	dc.b 2
00008693 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008698 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000869D 0A                         byte_8109:	dc.b $A
0000869E F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000086A3 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000086A8 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000086AD 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000086B2 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000086B7 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000086BC 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000086C1 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000086C6 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000086CB 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000086D0                            		even
000086D0                            		even
000086D0                            
000086D0                            ; ---------------------------------------------------------------------------
000086D0                            ; Sprite mappings - GHZ	platforms
000086D0                            ; ---------------------------------------------------------------------------
000086D0                            Map_obj18:
000086D0                            	include "_maps\obj18ghz.asm"
000086D0                            ; ---------------------------------------------------------------------------
000086D0                            ; Sprite mappings - GHZ	platforms
000086D0                            ; ---------------------------------------------------------------------------
000086D0 0000                       		dc.w byte_8140-Map_obj18
000086D2 0000                       		dc.w byte_8155-Map_obj18
000086D4 04                         byte_8140:	dc.b 4
000086D5 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000086DA F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000086DF F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000086E4 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000086E9 0A                         byte_8155:	dc.b $A
000086EA F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000086EF 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000086F4 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000086F9 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000086FE 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008703 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008708 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000870D 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008712 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008717 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000871C                            		even
0000871C                            		even
0000871C                            
0000871C                            ; ---------------------------------------------------------------------------
0000871C                            ; Sprite mappings - SYZ	platforms
0000871C                            ; ---------------------------------------------------------------------------
0000871C                            Map_obj18a:
0000871C                            	include "_maps\obj18syz.asm"
0000871C                            ; ---------------------------------------------------------------------------
0000871C                            ; Sprite mappings - SYZ	platforms
0000871C                            ; ---------------------------------------------------------------------------
0000871C 0000                       		dc.w byte_818A-Map_obj18a
0000871E 03                         byte_818A:	dc.b 3
0000871F F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008724 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008729 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000872E                            		even
0000872E                            		even
0000872E                            
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            ; Sprite mappings - SLZ	platforms
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            Map_obj18b:
0000872E                            	include "_maps\obj18slz.asm"
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            ; Sprite mappings - SLZ	platforms
0000872E                            ; ---------------------------------------------------------------------------
0000872E 0000                       		dc.w byte_819C-Map_obj18b
00008730 02                         byte_819C:	dc.b 2
00008731 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008736 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000873C 00                         		even
0000873C 00                         		even
0000873C                            
0000873C                            ; ===========================================================================
0000873C                            ; ---------------------------------------------------------------------------
0000873C                            ; Object 19 - Pearto bombs
0000873C                            ; ---------------------------------------------------------------------------
0000873C                            Obj19:					; XREF: Obj_Index
0000873C 7000                       		moveq	#0,d0
0000873E 1028 0024                  		move.b	$24(a0),d0
00008742 323B 0000                  		move.w	off_7070(pc,d0.w),d1
00008746 4EFB 1000                  		jmp	off_7070(pc,d1.w)
0000874A                            ; ---------------------------------------------------------------------------
0000874A                            
0000874A 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
00008750                            ; ---------------------------------------------------------------------------
00008750                            
00008750                            loc_7076:
00008750 5428 0024                  		addq.b	#2,$24(a0)
00008754 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
0000875C 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00008762 117C 0004 0001             		move.b	#4,1(a0)
00008768 117C 0003 0019             		move.b	#3,$19(a0)
0000876E 117C 0087 0020             		move.b	#$87,$20(a0)
00008774 117C 0008 0018             		move.b	#8,$18(a0)
0000877A 317C 0018 0030             		move.w	#$18,$30(a0)
00008780                            
00008780                            loc_70A6:
00008780 0828 0007 0022             		btst	#7,$22(a0)
00008786 6600                       		bne.s	loc_70C2
00008788 4A68 0030                  		tst.w	$30(a0)
0000878C 6600                       		bne.s	loc_70D2
0000878E 4EB9 0000 0000             		jsr	ObjHitFloor
00008794 4A41                       		tst.w	d1
00008796 6A00                       		bpl.s	loc_70D6
00008798 D368 000C                  		add.w	d1,$C(a0)
0000879C                            
0000879C                            loc_70C2:
0000879C 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
000087A0 117C 0000 0024             		move.b	#0,$24(a0)
000087A6                            ; ---------------------------------------------------------------------------
000087A6                            
000087A6                            loc_70D2:
000087A6 5368 0030                  		subq.w	#1,$30(a0)
000087AA                            
000087AA                            loc_70D6:
000087AA 6100 0000                  		bsr.w	ObjectFall
000087AE 6100 0000                  		bsr.w	DisplaySprite
000087B2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000087B6 0640 00E0                  		addi.w	#$E0,d0
000087BA B068 000C                  		cmp.w	$C(a0),d0
000087BE 6500                       		bcs.s	loc_70EE
000087C0 4E75                       		rts
000087C2                            ; ---------------------------------------------------------------------------
000087C2                            
000087C2                            loc_70EE:
000087C2 6100 0000                  		bsr.w	DeleteObject
000087C6 4E75                       		rts
000087C8                            		
000087C8                            Map_obj19:
000087C8                            	include "_maps\obj19.asm"
000087C8                            Map_02b4:
000087C8 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
000087CA 01                         Map_02b4_2: 	dc.b $1
000087CB F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
000087D0                            	even
000087D0                            	even
000087D0                            ; ===========================================================================
000087D0                            ; ---------------------------------------------------------------------------
000087D0                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000087D0                            ; ---------------------------------------------------------------------------
000087D0                            Map_obj48:
000087D0                            	include "_maps\obj48.asm"
000087D0                            ; ---------------------------------------------------------------------------
000087D0                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000087D0                            ; ---------------------------------------------------------------------------
000087D0 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000087D4 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000087D8 06                         byte_81B2:	dc.b 6
000087D9 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000087DE F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000087E3 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000087E8 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000087ED 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000087F2 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000087F7 04                         byte_81D1:	dc.b 4
000087F8 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000087FD E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008802 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008807 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000880C 04                         byte_81E6:	dc.b 4
0000880D E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008812 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008817 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000881C 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008821 04                         byte_81FB:	dc.b 4
00008822 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008827 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000882C 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008831 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008836                            		even
00008836                            		even
00008836                            
00008836                            ; ===========================================================================
00008836                            ; ---------------------------------------------------------------------------
00008836                            ; Object 1A - GHZ collapsing ledge
00008836                            ; ---------------------------------------------------------------------------
00008836                            
00008836                            Obj1A:					; XREF: Obj_Index
00008836 7000                       		moveq	#0,d0
00008838 1028 0024                  		move.b	$24(a0),d0
0000883C 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008840 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008844                            ; ===========================================================================
00008844 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008848 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000884C 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008850                            ; ===========================================================================
00008850                            
00008850                            Obj1A_Main:				; XREF: Obj1A_Index
00008850 5428 0024                  		addq.b	#2,$24(a0)
00008854 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000885C 317C 4000 0002             		move.w	#$4000,2(a0)
00008862 0028 0004 0001             		ori.b	#4,1(a0)
00008868 117C 0004 0018             		move.b	#4,$18(a0)
0000886E 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008874 117C 0064 0019             		move.b	#$64,$19(a0)
0000887A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008880 117C 0038 0016             		move.b	#$38,$16(a0)
00008886 08E8 0004 0001             		bset	#4,1(a0)
0000888C                            
0000888C                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000888C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008890 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008892 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008896 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000889A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000889E                            
0000889E                            Obj1A_Slope:
0000889E 323C 0030                  		move.w	#$30,d1
000088A2 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000088A8 6100 F212                  		bsr.w	SlopeObject
000088AC 6000 0000                  		bra.w	MarkObjGone
000088B0                            ; ===========================================================================
000088B0                            
000088B0                            Obj1A_Touch:				; XREF: Obj1A_Index
000088B0 4A28 0038                  		tst.b	$38(a0)
000088B4 6700 0000                  		beq.w	loc_847A
000088B8 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000088BE 5328 0038                  		subq.b	#1,$38(a0)
000088C2                            
000088C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000088C2                            
000088C2                            
000088C2                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000088C2 323C 0030                  		move.w	#$30,d1
000088C6 6100 F294                  		bsr.w	ExitPlatform
000088CA 323C 0030                  		move.w	#$30,d1
000088CE 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000088D4 3428 0008                  		move.w	8(a0),d2
000088D8 6100 0000                  		bsr.w	SlopeObject2
000088DC 6000 0000                  		bra.w	MarkObjGone
000088E0                            ; End of function Obj1A_WalkOff
000088E0                            
000088E0                            ; ===========================================================================
000088E0                            
000088E0                            Obj1A_Display:				; XREF: Obj1A_Index
000088E0 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000088E4 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000088E6 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000088EA 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000088EE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000088F2 6000 0000                  		bra.w	DisplaySprite
000088F6                            ; ===========================================================================
000088F6                            
000088F6                            loc_82D0:				; XREF: Obj1A_Display
000088F6 5328 0038                  		subq.b	#1,$38(a0)
000088FA 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000088FE 43F8 D000                  		lea	($FFFFD000).w,a1
00008902 0829 0003 0022             		btst	#3,$22(a1)
00008908 6700                       		beq.s	loc_82FC
0000890A 4A28 0038                  		tst.b	$38(a0)
0000890E 6600                       		bne.s	locret_8308
00008910 08A9 0003 0022             		bclr	#3,$22(a1)
00008916 08A9 0005 0022             		bclr	#5,$22(a1)
0000891C 137C 0001 001D             		move.b	#1,$1D(a1)
00008922                            
00008922                            loc_82FC:
00008922 117C 0000 003A             		move.b	#0,$3A(a0)
00008928 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
0000892E                            
0000892E                            locret_8308:
0000892E 4E75                       		rts	
00008930                            ; ===========================================================================
00008930                            
00008930                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008930 6100 0000                  		bsr.w	ObjectFall
00008934 6100 0000                  		bsr.w	DisplaySprite
00008938 4A28 0001                  		tst.b	1(a0)
0000893C 6A00                       		bpl.s	Obj1A_Delete
0000893E 4E75                       		rts	
00008940                            ; ===========================================================================
00008940                            
00008940                            Obj1A_Delete:				; XREF: Obj1A_Index
00008940 6100 0000                  		bsr.w	DeleteObject
00008944 4E75                       		rts	
00008946                            ; ===========================================================================
00008946                            ; ---------------------------------------------------------------------------
00008946                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008946                            ; ---------------------------------------------------------------------------
00008946                            
00008946                            Obj53:					; XREF: Obj_Index
00008946 7000                       		moveq	#0,d0
00008948 1028 0024                  		move.b	$24(a0),d0
0000894C 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008950 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008954                            ; ===========================================================================
00008954 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008958 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
0000895C 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008960                            ; ===========================================================================
00008960                            
00008960                            Obj53_Main:				; XREF: Obj53_Index
00008960 5428 0024                  		addq.b	#2,$24(a0)
00008964 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
0000896C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008972 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008978 6600                       		bne.s	Obj53_NotSLZ
0000897A 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008980 5428 001A                  		addq.b	#2,$1A(a0)
00008984                            
00008984                            Obj53_NotSLZ:
00008984 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000898A 6600                       		bne.s	Obj53_NotSBZ
0000898C 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008992                            
00008992                            Obj53_NotSBZ:
00008992 0028 0004 0001             		ori.b	#4,1(a0)
00008998 117C 0004 0018             		move.b	#4,$18(a0)
0000899E 117C 0007 0038             		move.b	#7,$38(a0)
000089A4 117C 0044 0019             		move.b	#$44,$19(a0)
000089AA                            
000089AA                            Obj53_ChkTouch:				; XREF: Obj53_Index
000089AA 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000089AE 6700                       		beq.s	Obj53_Solid	; if not, branch
000089B0 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000089B4 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000089B8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000089BC                            
000089BC                            Obj53_Solid:
000089BC 323C 0020                  		move.w	#$20,d1
000089C0 6100 F026                  		bsr.w	PlatformObject
000089C4 4A28 0028                  		tst.b	$28(a0)
000089C8 6A00                       		bpl.s	Obj53_MarkAsGone
000089CA 0829 0003 0022             		btst	#3,$22(a1)
000089D0 6700                       		beq.s	Obj53_MarkAsGone
000089D2 08A8 0000 0001             		bclr	#0,1(a0)
000089D8 3029 0008                  		move.w	8(a1),d0
000089DC 9068 0008                  		sub.w	8(a0),d0
000089E0 6400                       		bcc.s	Obj53_MarkAsGone
000089E2 08E8 0000 0001             		bset	#0,1(a0)
000089E8                            
000089E8                            Obj53_MarkAsGone:
000089E8 6000 0000                  		bra.w	MarkObjGone
000089EC                            ; ===========================================================================
000089EC                            
000089EC                            Obj53_Touch:				; XREF: Obj53_Index
000089EC 4A28 0038                  		tst.b	$38(a0)
000089F0 6700 0000                  		beq.w	loc_8458
000089F4 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000089FA 5328 0038                  		subq.b	#1,$38(a0)
000089FE                            
000089FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089FE                            
000089FE                            
000089FE                            Obj53_WalkOff:				; XREF: Obj53_Index
000089FE 323C 0020                  		move.w	#$20,d1
00008A02 6100 F158                  		bsr.w	ExitPlatform
00008A06 3428 0008                  		move.w	8(a0),d2
00008A0A 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008A0E 6000 0000                  		bra.w	MarkObjGone
00008A12                            ; End of function Obj53_WalkOff
00008A12                            
00008A12                            ; ===========================================================================
00008A12                            
00008A12                            Obj53_Display:				; XREF: Obj53_Index
00008A12 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A16 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008A18 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A1C 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008A20 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A24 6000 0000                  		bra.w	DisplaySprite
00008A28                            ; ===========================================================================
00008A28                            
00008A28                            loc_8402:
00008A28 5328 0038                  		subq.b	#1,$38(a0)
00008A2C 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008A30 43F8 D000                  		lea	($FFFFD000).w,a1
00008A34 0829 0003 0022             		btst	#3,$22(a1)
00008A3A 6700                       		beq.s	loc_842E
00008A3C 4A28 0038                  		tst.b	$38(a0)
00008A40 6600                       		bne.s	locret_843A
00008A42 08A9 0003 0022             		bclr	#3,$22(a1)
00008A48 08A9 0005 0022             		bclr	#5,$22(a1)
00008A4E 137C 0001 001D             		move.b	#1,$1D(a1)
00008A54                            
00008A54                            loc_842E:
00008A54 117C 0000 003A             		move.b	#0,$3A(a0)
00008A5A 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008A60                            
00008A60                            locret_843A:
00008A60 4E75                       		rts	
00008A62                            ; ===========================================================================
00008A62                            
00008A62                            Obj53_TimeZero:				; XREF: Obj53_Display
00008A62 6100 0000                  		bsr.w	ObjectFall
00008A66 6100 0000                  		bsr.w	DisplaySprite
00008A6A 4A28 0001                  		tst.b	1(a0)
00008A6E 6A00                       		bpl.s	Obj53_Delete
00008A70 4E75                       		rts	
00008A72                            ; ===========================================================================
00008A72                            
00008A72                            Obj53_Delete:				; XREF: Obj53_Index
00008A72 6100 0000                  		bsr.w	DeleteObject
00008A76 4E75                       		rts	
00008A78                            ; ===========================================================================
00008A78                            
00008A78                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008A78 117C 0000 003A             		move.b	#0,$3A(a0)
00008A7E                            
00008A7E                            loc_8458:				; XREF: Obj53_Touch
00008A7E 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008A84 0828 0000 0028             		btst	#0,$28(a0)
00008A8A 6700                       		beq.s	loc_846C
00008A8C 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008A92                            
00008A92                            loc_846C:
00008A92 7207                       		moveq	#7,d1
00008A94 5228 001A                  		addq.b	#1,$1A(a0)
00008A98 6000                       		bra.s	loc_8486
00008A9A                            ; ===========================================================================
00008A9A                            
00008A9A                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008A9A 117C 0000 003A             		move.b	#0,$3A(a0)
00008AA0                            
00008AA0                            loc_847A:				; XREF: Obj1A_Touch
00008AA0 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008AA6 7218                       		moveq	#$18,d1
00008AA8 5428 001A                  		addq.b	#2,$1A(a0)
00008AAC                            
00008AAC                            loc_8486:				; XREF: Obj53_Collapse
00008AAC 7000                       		moveq	#0,d0
00008AAE 1028 001A                  		move.b	$1A(a0),d0
00008AB2 D040                       		add.w	d0,d0
00008AB4 2668 0004                  		movea.l	4(a0),a3
00008AB8 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008ABC 524B                       		addq.w	#1,a3
00008ABE 08E8 0005 0001             		bset	#5,1(a0)
00008AC4 1810                       		move.b	0(a0),d4
00008AC6 1A28 0001                  		move.b	1(a0),d5
00008ACA 2248                       		movea.l	a0,a1
00008ACC 6000                       		bra.s	loc_84B2
00008ACE                            ; ===========================================================================
00008ACE                            
00008ACE                            loc_84AA:
00008ACE 6100 0000                  		bsr.w	SingleObjLoad
00008AD2 6600                       		bne.s	loc_84F2
00008AD4 5A4B                       		addq.w	#5,a3
00008AD6                            
00008AD6                            loc_84B2:
00008AD6 137C 0006 0024             		move.b	#6,$24(a1)
00008ADC 1284                       		move.b	d4,0(a1)
00008ADE 234B 0004                  		move.l	a3,4(a1)
00008AE2 1345 0001                  		move.b	d5,1(a1)
00008AE6 3368 0008 0008             		move.w	8(a0),8(a1)
00008AEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008AF2 3368 0002 0002             		move.w	2(a0),2(a1)
00008AF8 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008AFE 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008B04 135C 0038                  		move.b	(a4)+,$38(a1)
00008B08 B3C8                       		cmpa.l	a0,a1
00008B0A 6400                       		bcc.s	loc_84EE
00008B0C 6100 0000                  		bsr.w	DisplaySprite2
00008B10                            
00008B10                            loc_84EE:
00008B10 51C9 FFBC                  		dbf	d1,loc_84AA
00008B14                            
00008B14                            loc_84F2:
00008B14 6100 0000                  		bsr.w	DisplaySprite
00008B18 303C 00B9                  		move.w	#$B9,d0
00008B1C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008B22                            ; ===========================================================================
00008B22                            ; ---------------------------------------------------------------------------
00008B22                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008B22                            ; ---------------------------------------------------------------------------
00008B22 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008B32 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008B3C 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008B44 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008B4C                            
00008B4C                            ; ---------------------------------------------------------------------------
00008B4C                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008B4C                            ; ---------------------------------------------------------------------------
00008B4C                            
00008B4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B4C                            
00008B4C                            
00008B4C                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008B4C 43F8 D000                  		lea	($FFFFD000).w,a1
00008B50 0829 0003 0022             		btst	#3,$22(a1)
00008B56 6700                       		beq.s	locret_856E
00008B58 3029 0008                  		move.w	8(a1),d0
00008B5C 9068 0008                  		sub.w	8(a0),d0
00008B60 D041                       		add.w	d1,d0
00008B62 E248                       		lsr.w	#1,d0
00008B64 0828 0000 0001             		btst	#0,1(a0)
00008B6A 6700                       		beq.s	loc_854E
00008B6C 4640                       		not.w	d0
00008B6E D041                       		add.w	d1,d0
00008B70                            
00008B70                            loc_854E:
00008B70 7200                       		moveq	#0,d1
00008B72 1232 0000                  		move.b	(a2,d0.w),d1
00008B76 3028 000C                  		move.w	$C(a0),d0
00008B7A 9041                       		sub.w	d1,d0
00008B7C 7200                       		moveq	#0,d1
00008B7E 1229 0016                  		move.b	$16(a1),d1
00008B82 9041                       		sub.w	d1,d0
00008B84 3340 000C                  		move.w	d0,$C(a1)
00008B88 9468 0008                  		sub.w	8(a0),d2
00008B8C 9569 0008                  		sub.w	d2,8(a1)
00008B90                            
00008B90                            locret_856E:
00008B90 4E75                       		rts	
00008B92                            ; End of function SlopeObject2
00008B92                            
00008B92                            ; ===========================================================================
00008B92                            ; ---------------------------------------------------------------------------
00008B92                            ; Collision data for GHZ collapsing ledge
00008B92                            ; ---------------------------------------------------------------------------
00008B92                            Obj1A_SlopeData:
00008B92                            		incbin	misc\ghzledge.bin
00008BC2                            		even
00008BC2                            
00008BC2                            ; ---------------------------------------------------------------------------
00008BC2                            ; Sprite mappings - GHZ	collapsing ledge
00008BC2                            ; ---------------------------------------------------------------------------
00008BC2                            Map_obj1A:
00008BC2                            	include "_maps\obj1A.asm"
00008BC2                            ; ---------------------------------------------------------------------------
00008BC2                            ; Sprite mappings - GHZ	collapsing ledge
00008BC2                            ; ---------------------------------------------------------------------------
00008BC2 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008BC6 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008BCA 10                         byte_85A8:	dc.b $10
00008BCB C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008BD0 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008BD5 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008BDA E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008BDF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008BE4 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008BE9 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008BEE F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008BF3 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008BF8 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008BFD 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008C02 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008C07 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008C0C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008C11 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008C16 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C1B 10                         byte_85F9:	dc.b $10
00008C1C C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008C21 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C26 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C2B E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C30 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C35 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008C3A F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008C3F F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008C44 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C49 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008C4E 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008C53 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008C58 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008C5D 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008C62 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008C67 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C6C 19                         byte_864A:	dc.b $19
00008C6D C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008C72 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008C77 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008C7C D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008C81 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008C86 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008C8B E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008C90 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008C95 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C9A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008C9F F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008CA4 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008CA9 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008CAE F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008CB3 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CB8 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008CBD 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008CC2 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008CC7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CCC 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008CD1 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008CD6 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008CDB 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008CE0 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008CE5 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CEA 19                         byte_86C8:	dc.b $19
00008CEB C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008CF0 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008CF5 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008CFA D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008CFF E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D04 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D09 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D0E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D13 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D18 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008D1D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D22 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D27 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D2C F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D31 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D36 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008D3B 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008D40 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008D45 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D4A 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008D4F 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008D54 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008D59 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008D5E 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008D63 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D68                            		even
00008D68                            		even
00008D68                            
00008D68                            ; ---------------------------------------------------------------------------
00008D68                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008D68                            ; ---------------------------------------------------------------------------
00008D68                            Map_obj53:
00008D68                            	include "_maps\obj53.asm"
00008D68                            ; ---------------------------------------------------------------------------
00008D68                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008D68                            ; ---------------------------------------------------------------------------
00008D68 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008D6C 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008D70 04                         byte_874E:	dc.b 4
00008D71 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008D76 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008D7B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008D80 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008D85 08                         byte_8763:	dc.b 8
00008D86 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008D8B F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008D90 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008D95 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008D9A 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008D9F 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008DA4 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008DA9 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008DAE 04                         byte_878C:	dc.b 4
00008DAF F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008DB4 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008DB9 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008DBE 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008DC3 08                         byte_87A1:	dc.b 8
00008DC4 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008DC9 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008DCE F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008DD3 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008DD8 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008DDD 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008DE2 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008DE7 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008DEC                            		even
00008DEC                            		even
00008DEC                            
00008DEC                            ; ===========================================================================
00008DEC                            ; ---------------------------------------------------------------------------
00008DEC                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008DEC                            ; ---------------------------------------------------------------------------
00008DEC                            
00008DEC                            Obj1C:					; XREF: Obj_Index
00008DEC 7000                       		moveq	#0,d0
00008DEE 1028 0024                  		move.b	$24(a0),d0
00008DF2 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008DF6 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008DFA                            ; ===========================================================================
00008DFA 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008DFC 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008DFE                            ; ===========================================================================
00008DFE                            
00008DFE                            Obj1C_Main:				; XREF: Obj1C_Index
00008DFE 5428 0024                  		addq.b	#2,$24(a0)
00008E02 7000                       		moveq	#0,d0
00008E04 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008E08 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008E0C 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008E10 2159 0004                  		move.l	(a1)+,4(a0)
00008E14 3159 0002                  		move.w	(a1)+,2(a0)
00008E18 0028 0004 0001             		ori.b	#4,1(a0)
00008E1E 1159 001A                  		move.b	(a1)+,$1A(a0)
00008E22 1159 0019                  		move.b	(a1)+,$19(a0)
00008E26 1159 0018                  		move.b	(a1)+,$18(a0)
00008E2A 1159 0020                  		move.b	(a1)+,$20(a0)
00008E2E                            
00008E2E                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008E2E 3028 0008                  		move.w	8(a0),d0
00008E32 0240 FF80                  		andi.w	#$FF80,d0
00008E36 3238 F700                  		move.w	($FFFFF700).w,d1
00008E3A 0441 0080                  		subi.w	#$80,d1
00008E3E 0241 FF80                  		andi.w	#$FF80,d1
00008E42 9041                       		sub.w	d1,d0
00008E44 0C40 0280                  		cmpi.w	#$280,d0
00008E48 6200 0000                  		bhi.w	DeleteObject
00008E4C 6000 0000                  		bra.w	DisplaySprite
00008E50                            ; ===========================================================================
00008E50                            ; ---------------------------------------------------------------------------
00008E50                            ; Variables for	object $1C are stored in an array
00008E50                            ; ---------------------------------------------------------------------------
00008E50 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008E54 44D8                       		dc.w $44D8		; VRAM setting
00008E56 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008E5A 0000 0000                  		dc.l Map_obj1C
00008E5E 44D8                       		dc.w $44D8
00008E60 0008 0200                  		dc.b 0,	8, 2, 0
00008E64 0000 0000                  		dc.l Map_obj1C
00008E68 44D8                       		dc.w $44D8
00008E6A 0008 0200                  		dc.b 0,	8, 2, 0
00008E6E 0000 7ED0                  		dc.l Map_obj11
00008E72 438E                       		dc.w $438E
00008E74 0110 0100                  		dc.b 1,	$10, 1,	0
00008E78                            ; ---------------------------------------------------------------------------
00008E78                            ; Sprite mappings - SLZ	lava thrower
00008E78                            ; ---------------------------------------------------------------------------
00008E78                            Map_obj1C:
00008E78                            	include "_maps\obj1C.asm"
00008E78                            ; ---------------------------------------------------------------------------
00008E78                            ; Sprite mappings - SLZ	lava thrower
00008E78                            ; ---------------------------------------------------------------------------
00008E78 0000                       		dc.w byte_8858-Map_obj1C
00008E7A 01                         byte_8858:	dc.b 1
00008E7B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008E80                            		even
00008E80                            		even
00008E80                            
00008E80                            ; ===========================================================================
00008E80                            ; ---------------------------------------------------------------------------
00008E80                            ; Object 1D - switch that activates when Sonic touches it
00008E80                            ; (this	is not used anywhere in	the game)
00008E80                            ; ---------------------------------------------------------------------------
00008E80                            
00008E80                            Obj1D:					; XREF: Obj_Index
00008E80 7000                       		moveq	#0,d0
00008E82 1028 0024                  		move.b	$24(a0),d0
00008E86 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008E8A 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008E8E                            ; ===========================================================================
00008E8E 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008E90 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008E92 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008E94                            ; ===========================================================================
00008E94                            
00008E94                            Obj1D_Main:				; XREF: Obj1D_Index
00008E94 5428 0024                  		addq.b	#2,$24(a0)
00008E98 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008EA0 317C 4000 0002             		move.w	#$4000,2(a0)
00008EA6 117C 0004 0001             		move.b	#4,1(a0)
00008EAC 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008EB2 117C 0010 0019             		move.b	#$10,$19(a0)
00008EB8 117C 0005 0018             		move.b	#5,$18(a0)
00008EBE                            
00008EBE                            Obj1D_Action:				; XREF: Obj1D_Index
00008EBE 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008EC4 323C 0010                  		move.w	#$10,d1
00008EC8 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008ECC 6700                       		beq.s	Obj1D_ChkDel
00008ECE 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008ED2 7001                       		moveq	#1,d0
00008ED4 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008ED8                            
00008ED8                            Obj1D_ChkDel:
00008ED8 6100 0000                  		bsr.w	DisplaySprite
00008EDC 3028 0008                  		move.w	8(a0),d0
00008EE0 0240 FF80                  		andi.w	#$FF80,d0
00008EE4 3238 F700                  		move.w	($FFFFF700).w,d1
00008EE8 0441 0080                  		subi.w	#$80,d1
00008EEC 0241 FF80                  		andi.w	#$FF80,d1
00008EF0 9041                       		sub.w	d1,d0
00008EF2 0C40 0280                  		cmpi.w	#$280,d0
00008EF6 6200 0000                  		bhi.w	Obj1D_Delete
00008EFA 4E75                       		rts	
00008EFC                            ; ===========================================================================
00008EFC                            
00008EFC                            Obj1D_Delete:				; XREF: Obj1D_Index
00008EFC 6100 0000                  		bsr.w	DeleteObject
00008F00 4E75                       		rts	
00008F02                            ; ---------------------------------------------------------------------------
00008F02                            ; Subroutine to	check if Sonic touches the object
00008F02                            ; ---------------------------------------------------------------------------
00008F02                            
00008F02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F02                            
00008F02                            
00008F02                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008F02 43F8 D000                  		lea	($FFFFD000).w,a1
00008F06 3029 0008                  		move.w	8(a1),d0
00008F0A 9068 0008                  		sub.w	8(a0),d0
00008F0E D041                       		add.w	d1,d0
00008F10 6B00                       		bmi.s	loc_8918
00008F12 D241                       		add.w	d1,d1
00008F14 B041                       		cmp.w	d1,d0
00008F16 6400                       		bcc.s	loc_8918
00008F18 3429 000C                  		move.w	$C(a1),d2
00008F1C 1229 0016                  		move.b	$16(a1),d1
00008F20 4881                       		ext.w	d1
00008F22 D242                       		add.w	d2,d1
00008F24 3028 000C                  		move.w	$C(a0),d0
00008F28 0440 0010                  		subi.w	#$10,d0
00008F2C 9041                       		sub.w	d1,d0
00008F2E 6200                       		bhi.s	loc_8918
00008F30 0C40 FFF0                  		cmpi.w	#-$10,d0
00008F34 6500                       		bcs.s	loc_8918
00008F36 70FF                       		moveq	#-1,d0
00008F38 4E75                       		rts	
00008F3A                            ; ===========================================================================
00008F3A                            
00008F3A                            loc_8918:
00008F3A 7000                       		moveq	#0,d0
00008F3C 4E75                       		rts	
00008F3E                            ; End of function Obj1D_ChkTouch
00008F3E                            
00008F3E                            ; ===========================================================================
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E                            ; Sprite mappings - object 1D
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E                            Map_obj1D:
00008F3E                            	include "_maps\obj1D.asm"
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E                            ; Sprite mappings - object 1D
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E 0000                       		dc.w byte_891E-Map_obj1D
00008F40 04                         byte_891E:	dc.b 4
00008F41 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008F46 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008F4B E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008F50 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008F56 00                         		even
00008F56 00                         		even
00008F56                            
00008F56                            ; ===========================================================================
00008F56                            ; ---------------------------------------------------------------------------
00008F56                            ; Object 2A - doors (SBZ)
00008F56                            ; ---------------------------------------------------------------------------
00008F56                            
00008F56                            Obj2A:					; XREF: Obj_Index
00008F56 7000                       		moveq	#0,d0
00008F58 1028 0024                  		move.b	$24(a0),d0
00008F5C 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008F60 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008F64                            ; ===========================================================================
00008F64 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008F66 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008F68                            ; ===========================================================================
00008F68                            
00008F68                            Obj2A_Main:				; XREF: Obj2A_Index
00008F68 5428 0024                  		addq.b	#2,$24(a0)
00008F6C 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008F74 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008F7A 0028 0004 0001             		ori.b	#4,1(a0)
00008F80 117C 0008 0019             		move.b	#8,$19(a0)
00008F86 117C 0004 0018             		move.b	#4,$18(a0)
00008F8C                            
00008F8C                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008F8C 323C 0040                  		move.w	#$40,d1
00008F90 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008F94 3038 D008                  		move.w	($FFFFD008).w,d0
00008F98 D041                       		add.w	d1,d0
00008F9A B068 0008                  		cmp.w	8(a0),d0
00008F9E 6500                       		bcs.s	Obj2A_Animate
00008FA0 9041                       		sub.w	d1,d0
00008FA2 9041                       		sub.w	d1,d0
00008FA4 B068 0008                  		cmp.w	8(a0),d0
00008FA8 6400                       		bcc.s	Obj2A_Animate
00008FAA D041                       		add.w	d1,d0
00008FAC B068 0008                  		cmp.w	8(a0),d0
00008FB0 6400                       		bcc.s	loc_899A
00008FB2 0828 0000 0022             		btst	#0,$22(a0)
00008FB8 6600                       		bne.s	Obj2A_Animate
00008FBA 6000                       		bra.s	Obj2A_Open
00008FBC                            ; ===========================================================================
00008FBC                            
00008FBC                            loc_899A:				; XREF: Obj2A_OpenShut
00008FBC 0828 0000 0022             		btst	#0,$22(a0)
00008FC2 6700                       		beq.s	Obj2A_Animate
00008FC4                            
00008FC4                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008FC4 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008FCA                            
00008FCA                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008FCA 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008FD0 6100 0000                  		bsr.w	AnimateSprite
00008FD4 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008FD8 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008FDA 323C 0011                  		move.w	#$11,d1
00008FDE 343C 0020                  		move.w	#$20,d2
00008FE2 3602                       		move.w	d2,d3
00008FE4 5243                       		addq.w	#1,d3
00008FE6 3828 0008                  		move.w	8(a0),d4
00008FEA 6100 0000                  		bsr.w	SolidObject
00008FEE                            
00008FEE                            Obj2A_MarkAsUsed:
00008FEE 6000 0000                  		bra.w	MarkObjGone
00008FF2                            ; ===========================================================================
00008FF2                            Ani_obj2A:
00008FF2                            	include "_anim\obj2A.asm"
00008FF2                            ; ---------------------------------------------------------------------------
00008FF2                            ; Animation script - doors (SBZ)
00008FF2                            ; ---------------------------------------------------------------------------
00008FF2 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008FF4 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008FF6 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009002 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000900E                            		even
0000900E                            		even
0000900E                            
0000900E                            ; ---------------------------------------------------------------------------
0000900E                            ; Sprite mappings - doors (SBZ)
0000900E                            ; ---------------------------------------------------------------------------
0000900E                            Map_obj2A:
0000900E                            	include "_maps\obj2A.asm"
0000900E                            ; ---------------------------------------------------------------------------
0000900E                            ; Sprite mappings - doors (SBZ)
0000900E                            ; ---------------------------------------------------------------------------
0000900E 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009012 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009016 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000901A 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000901E 0000                       		dc.w byte_8A56-Map_obj2A
00009020 02                         byte_89FE:	dc.b 2
00009021 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009026 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000902B 02                         byte_8A09:	dc.b 2
0000902C DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009031 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009036 02                         byte_8A14:	dc.b 2
00009037 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
0000903C 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009041 02                         byte_8A1F:	dc.b 2
00009042 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009047 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
0000904C 02                         byte_8A2A:	dc.b 2
0000904D D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009052 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009057 02                         byte_8A35:	dc.b 2
00009058 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
0000905D 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009062 02                         byte_8A40:	dc.b 2
00009063 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009068 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000906D 02                         byte_8A4B:	dc.b 2
0000906E C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009073 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009078 02                         byte_8A56:	dc.b 2
00009079 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000907E 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009084 00                         		even
00009084 00                         		even
00009084                            
00009084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009084                            
00009084                            
00009084                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009084 6100 0000                  		bsr.w	Obj44_SolidWall2
00009088 6700                       		beq.s	loc_8AA8
0000908A 6B00 0000                  		bmi.w	loc_8AC4
0000908E 4A40                       		tst.w	d0
00009090 6700 0000                  		beq.w	loc_8A92
00009094 6B00                       		bmi.s	loc_8A7C
00009096 4A69 0010                  		tst.w	$10(a1)
0000909A 6B00                       		bmi.s	loc_8A92
0000909C 6000                       		bra.s	loc_8A82
0000909E                            ; ===========================================================================
0000909E                            
0000909E                            loc_8A7C:
0000909E 4A69 0010                  		tst.w	$10(a1)
000090A2 6A00                       		bpl.s	loc_8A92
000090A4                            
000090A4                            loc_8A82:
000090A4 9169 0008                  		sub.w	d0,8(a1)
000090A8 337C 0000 0014             		move.w	#0,$14(a1)
000090AE 337C 0000 0010             		move.w	#0,$10(a1)
000090B4                            
000090B4                            loc_8A92:
000090B4 0829 0001 0022             		btst	#1,$22(a1)
000090BA 6600                       		bne.s	loc_8AB6
000090BC 08E9 0005 0022             		bset	#5,$22(a1)
000090C2 08E8 0005 0022             		bset	#5,$22(a0)
000090C8 4E75                       		rts	
000090CA                            ; ===========================================================================
000090CA                            
000090CA                            loc_8AA8:
000090CA 0828 0005 0022             		btst	#5,$22(a0)
000090D0 6700                       		beq.s	locret_8AC2
000090D2 337C 0001 001C             		move.w	#1,$1C(a1)
000090D8                            
000090D8                            loc_8AB6:
000090D8 08A8 0005 0022             		bclr	#5,$22(a0)
000090DE 08A9 0005 0022             		bclr	#5,$22(a1)
000090E4                            
000090E4                            locret_8AC2:
000090E4 4E75                       		rts	
000090E6                            ; ===========================================================================
000090E6                            
000090E6                            loc_8AC4:
000090E6 4A69 0012                  		tst.w	$12(a1)
000090EA 6A00                       		bpl.s	locret_8AD8
000090EC 4A43                       		tst.w	d3
000090EE 6A00                       		bpl.s	locret_8AD8
000090F0 9769 000C                  		sub.w	d3,$C(a1)
000090F4 337C 0000 0012             		move.w	#0,$12(a1)
000090FA                            
000090FA                            locret_8AD8:
000090FA 4E75                       		rts	
000090FC                            ; End of function Obj44_SolidWall
000090FC                            
000090FC                            
000090FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090FC                            
000090FC                            
000090FC                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
000090FC 43F8 D000                  		lea	($FFFFD000).w,a1
00009100 3029 0008                  		move.w	8(a1),d0
00009104 9068 0008                  		sub.w	8(a0),d0
00009108 D041                       		add.w	d1,d0
0000910A 6B00                       		bmi.s	loc_8B48
0000910C 3601                       		move.w	d1,d3
0000910E D643                       		add.w	d3,d3
00009110 B043                       		cmp.w	d3,d0
00009112 6200                       		bhi.s	loc_8B48
00009114 1629 0016                  		move.b	$16(a1),d3
00009118 4883                       		ext.w	d3
0000911A D443                       		add.w	d3,d2
0000911C 3629 000C                  		move.w	$C(a1),d3
00009120 9668 000C                  		sub.w	$C(a0),d3
00009124 D642                       		add.w	d2,d3
00009126 6B00                       		bmi.s	loc_8B48
00009128 3802                       		move.w	d2,d4
0000912A D844                       		add.w	d4,d4
0000912C B644                       		cmp.w	d4,d3
0000912E 6400                       		bcc.s	loc_8B48
00009130 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009134 6B00                       		bmi.s	loc_8B48
00009136 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000913C 6400                       		bcc.s	loc_8B48
0000913E 4A78 FE08                  		tst.w	($FFFFFE08).w
00009142 6600                       		bne.s	loc_8B48
00009144 3A00                       		move.w	d0,d5
00009146 B240                       		cmp.w	d0,d1
00009148 6400                       		bcc.s	loc_8B30
0000914A D241                       		add.w	d1,d1
0000914C 9041                       		sub.w	d1,d0
0000914E 3A00                       		move.w	d0,d5
00009150 4445                       		neg.w	d5
00009152                            
00009152                            loc_8B30:
00009152 3203                       		move.w	d3,d1
00009154 B443                       		cmp.w	d3,d2
00009156 6400                       		bcc.s	loc_8B3C
00009158 9644                       		sub.w	d4,d3
0000915A 3203                       		move.w	d3,d1
0000915C 4441                       		neg.w	d1
0000915E                            
0000915E                            loc_8B3C:
0000915E BA41                       		cmp.w	d1,d5
00009160 6200                       		bhi.s	loc_8B44
00009162 7801                       		moveq	#1,d4
00009164 4E75                       		rts	
00009166                            ; ===========================================================================
00009166                            
00009166                            loc_8B44:
00009166 78FF                       		moveq	#-1,d4
00009168 4E75                       		rts	
0000916A                            ; ===========================================================================
0000916A                            
0000916A                            loc_8B48:
0000916A 7800                       		moveq	#0,d4
0000916C 4E75                       		rts	
0000916E                            ; End of function Obj44_SolidWall2
0000916E                            
0000916E                            ; ===========================================================================
0000916E                            ; ---------------------------------------------------------------------------
0000916E                            ; Object 1E - Ball Hog enemy (SBZ)
0000916E                            ; ---------------------------------------------------------------------------
0000916E                            
0000916E                            Obj1E:					; XREF: Obj_Index
0000916E 7000                       		moveq	#0,d0
00009170 1028 0024                  		move.b	$24(a0),d0
00009174 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009178 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000917C                            ; ===========================================================================
0000917C 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000917E 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009180                            ; ===========================================================================
00009180                            
00009180                            Obj1E_Main:				; XREF: Obj1E_Index
00009180 117C 0013 0016             		move.b	#$13,$16(a0)
00009186 117C 0008 0017             		move.b	#8,$17(a0)
0000918C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009194 317C 2302 0002             		move.w	#$2302,2(a0)
0000919A 117C 0004 0001             		move.b	#4,1(a0)
000091A0 117C 0004 0018             		move.b	#4,$18(a0)
000091A6 117C 0005 0020             		move.b	#5,$20(a0)
000091AC 117C 000C 0019             		move.b	#$C,$19(a0)
000091B2 6100 0000                  		bsr.w	ObjectFall
000091B6 4EB9 0000 0000             		jsr	ObjHitFloor
000091BC 4A41                       		tst.w	d1
000091BE 6A00                       		bpl.s	locret_8BAC
000091C0 D368 000C                  		add.w	d1,$C(a0)
000091C4 317C 0000 0012             		move.w	#0,$12(a0)
000091CA 5428 0024                  		addq.b	#2,$24(a0)
000091CE                            
000091CE                            locret_8BAC:
000091CE 4E75                       		rts	
000091D0                            ; ===========================================================================
000091D0                            
000091D0                            Obj1E_Action:				; XREF: Obj1E_Index
000091D0 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000091D6 6100 0000                  		bsr.w	AnimateSprite
000091DA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
000091E0 6600                       		bne.s	Obj1E_SetBall	; if not, branch
000091E2 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
000091E6 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
000091E8 6000                       		bra.s	Obj1E_MarkAsGone
000091EA                            ; ===========================================================================
000091EA                            
000091EA                            Obj1E_SetBall:				; XREF: Obj1E_Action
000091EA 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
000091EE                            
000091EE                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
000091EE 6000 0000                  		bra.w	MarkObjGone
000091F2                            ; ===========================================================================
000091F2                            
000091F2                            Obj1E_MakeBall:				; XREF: Obj1E_Action
000091F2 117C 0001 0032             		move.b	#1,$32(a0)
000091F8 6100 0000                  		bsr.w	SingleObjLoad
000091FC 6600                       		bne.s	loc_8C1A
000091FE 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009202 3368 0008 0008             		move.w	8(a0),8(a1)
00009208 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000920E 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009214 337C 0000 0012             		move.w	#0,$12(a1)
0000921A 70FC                       		moveq	#-4,d0
0000921C 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009222 6700                       		beq.s	loc_8C0A	; if not, branch
00009224 4440                       		neg.w	d0
00009226 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000922A                            
0000922A                            loc_8C0A:
0000922A D169 0008                  		add.w	d0,8(a1)
0000922E 0669 000C 000C             		addi.w	#$C,$C(a1)
00009234 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000923A                            
0000923A                            loc_8C1A:
0000923A 60B2                       		bra.s	Obj1E_MarkAsGone
0000923C                            ; ===========================================================================
0000923C                            ; ---------------------------------------------------------------------------
0000923C                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000923C                            ; ---------------------------------------------------------------------------
0000923C                            
0000923C                            Obj20:					; XREF: Obj_Index
0000923C 7000                       		moveq	#0,d0
0000923E 1028 0024                  		move.b	$24(a0),d0
00009242 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009246 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000924A                            ; ===========================================================================
0000924A 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000924C 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000924E                            ; ===========================================================================
0000924E                            
0000924E                            Obj20_Main:				; XREF: Obj20_Index
0000924E 5428 0024                  		addq.b	#2,$24(a0)
00009252 117C 0007 0016             		move.b	#7,$16(a0)
00009258 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009260 317C 2302 0002             		move.w	#$2302,2(a0)
00009266 117C 0004 0001             		move.b	#4,1(a0)
0000926C 117C 0003 0018             		move.b	#3,$18(a0)
00009272 117C 0087 0020             		move.b	#$87,$20(a0)
00009278 117C 0008 0019             		move.b	#8,$19(a0)
0000927E 7000                       		moveq	#0,d0
00009280 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009284 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009288 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000928C 117C 0004 001A             		move.b	#4,$1A(a0)
00009292                            
00009292                            Obj20_Bounce:				; XREF: Obj20_Index
00009292 4EB9 0000 0000             		jsr	ObjectFall
00009298 4A68 0012                  		tst.w	$12(a0)
0000929C 6B00                       		bmi.s	Obj20_ChkExplode
0000929E 4EB9 0000 0000             		jsr	ObjHitFloor
000092A4 4A41                       		tst.w	d1
000092A6 6A00                       		bpl.s	Obj20_ChkExplode
000092A8 D368 000C                  		add.w	d1,$C(a0)
000092AC 317C FD00 0012             		move.w	#-$300,$12(a0)
000092B2 4A03                       		tst.b	d3
000092B4 6700                       		beq.s	Obj20_ChkExplode
000092B6 6B00                       		bmi.s	loc_8CA4
000092B8 4A68 0010                  		tst.w	$10(a0)
000092BC 6A00                       		bpl.s	Obj20_ChkExplode
000092BE 4468 0010                  		neg.w	$10(a0)
000092C2 6000                       		bra.s	Obj20_ChkExplode
000092C4                            ; ===========================================================================
000092C4                            
000092C4                            loc_8CA4:				; XREF: Obj20_Bounce
000092C4 4A68 0010                  		tst.w	$10(a0)
000092C8 6B00                       		bmi.s	Obj20_ChkExplode
000092CA 4468 0010                  		neg.w	$10(a0)
000092CE                            
000092CE                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000092CE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000092D2 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000092D4 10BC 0024                  		move.b	#$24,0(a0)
000092D8 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000092DC 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
000092E2 6000 0000                  		bra.w	Obj3F		; jump to explosion code
000092E6                            ; ===========================================================================
000092E6                            
000092E6                            Obj20_Animate:				; XREF: Obj20_ChkExplode
000092E6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000092EA 6A00                       		bpl.s	Obj20_Display
000092EC 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
000092F2 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000092F8                            
000092F8                            Obj20_Display:
000092F8 6100 0000                  		bsr.w	DisplaySprite
000092FC 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009300 0640 00E0                  		addi.w	#$E0,d0
00009304 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009308 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000930C 4E75                       		rts	
0000930E                            ; ===========================================================================
0000930E                            ; ---------------------------------------------------------------------------
0000930E                            ; Object 24 - explosion	from a destroyed monitor
0000930E                            ; ---------------------------------------------------------------------------
0000930E                            
0000930E                            Obj24:					; XREF: Obj_Index
0000930E 7000                       		moveq	#0,d0
00009310 1028 0024                  		move.b	$24(a0),d0
00009314 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009318 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000931C                            ; ===========================================================================
0000931C 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000931E 0000                       		dc.w Obj24_Animate-Obj24_Index
00009320                            ; ===========================================================================
00009320                            
00009320                            Obj24_Main:				; XREF: Obj24_Index
00009320 5428 0024                  		addq.b	#2,$24(a0)
00009324 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000932C 317C 041C 0002             		move.w	#$41C,2(a0)
00009332 117C 0004 0001             		move.b	#4,1(a0)
00009338 117C 0001 0018             		move.b	#1,$18(a0)
0000933E 117C 0000 0020             		move.b	#0,$20(a0)
00009344 117C 000C 0019             		move.b	#$C,$19(a0)
0000934A 117C 0009 001E             		move.b	#9,$1E(a0)
00009350 117C 0000 001A             		move.b	#0,$1A(a0)
00009356 303C 00A5                  		move.w	#$A5,d0
0000935A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play explosion sound
00009360                            
00009360                            Obj24_Animate:				; XREF: Obj24_Index
00009360 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009364 6A00                       		bpl.s	Obj24_Display
00009366 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000936C 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009370 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009376 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000937A                            
0000937A                            Obj24_Display:
0000937A 6000 0000                  		bra.w	DisplaySprite
0000937E                            ; ===========================================================================
0000937E                            ; ---------------------------------------------------------------------------
0000937E                            ; Object 27 - explosion	from a destroyed enemy
0000937E                            ; ---------------------------------------------------------------------------
0000937E                            
0000937E                            Obj27:					; XREF: Obj_Index
0000937E 7000                       		moveq	#0,d0
00009380 1028 0024                  		move.b	$24(a0),d0
00009384 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009388 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000938C                            ; ===========================================================================
0000938C 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000938E 0000                       		dc.w Obj27_Main-Obj27_Index
00009390 0000                       		dc.w Obj27_Animate-Obj27_Index
00009392                            ; ===========================================================================
00009392                            
00009392                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009392 5428 0024                  		addq.b	#2,$24(a0)
00009396 6100 0000                  		bsr.w	SingleObjLoad
0000939A 6600                       		bne.s	Obj27_Main
0000939C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000093A0 3368 0008 0008             		move.w	8(a0),8(a1)
000093A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000093AC 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000093B2                            
000093B2                            Obj27_Main:				; XREF: Obj27_Index
000093B2 5428 0024                  		addq.b	#2,$24(a0)
000093B6 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000093BE 317C 05A0 0002             		move.w	#$5A0,2(a0)
000093C4 117C 0004 0001             		move.b	#4,1(a0)
000093CA 117C 0001 0018             		move.b	#1,$18(a0)
000093D0 117C 0000 0020             		move.b	#0,$20(a0)
000093D6 117C 000C 0019             		move.b	#$C,$19(a0)
000093DC                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000093DC 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000093E2 117C 0000 001A             		move.b	#0,$1A(a0)
000093E8 303C 00C1                  		move.w	#$C1,d0
000093EC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
000093F2                            
000093F2 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
000093F8 1028 0028                  		move.b	$28(a0),d0
000093FC 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009402 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009408                            
00009408                            Obj27_Animate:				; XREF: Obj27_Index
00009408 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000940C 6A00                       		bpl.s	Obj27_Display
0000940E                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000940E 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009414 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009418 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000941E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009422                            
00009422                            Obj27_Display:
00009422 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
00009428 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
0000942E 6000 0000                  		bra.w	DisplaySprite
00009432                            ; ===========================================================================
00009432                            ; ---------------------------------------------------------------------------
00009432                            Obj27_ExplosionXYSpd:
00009432                            		; dc.w	-$350, -$300	; Left
00009432                            		; dc.w	-$200, -$450	; Near middle (left)
00009432                            		; dc.w	0, -$500	; Middle
00009432                            		; dc.w	$200, -$450	; Near middle (right)
00009432                            		; dc.w	$350, -$300	; Right
00009432                            
00009432 FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009436 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000943A 0000 FA00                  		dc.w	0, -$600	; Middle
0000943E 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009442 0150 FC00                  		dc.w	$150, -$400	; Right
00009446                            
00009446 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009460                            ; ---------------------------------------------------------------------------
00009460                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009460                            ; ---------------------------------------------------------------------------
00009460                            
00009460                            Obj3F:					; XREF: Obj_Index
00009460 7000                       		moveq	#0,d0
00009462 1028 0024                  		move.b	$24(a0),d0
00009466 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000946A 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000946E                            ; ===========================================================================
0000946E 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009470 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009472                            ; ===========================================================================
00009472                            
00009472                            Obj3F_Main:				; XREF: Obj3F_Index
00009472 5428 0024                  		addq.b	#2,$24(a0)
00009476 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000947E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009484 117C 0004 0001             		move.b	#4,1(a0)
0000948A 117C 0001 0018             		move.b	#1,$18(a0)
00009490 117C 0000 0020             		move.b	#0,$20(a0)
00009496 117C 000C 0019             		move.b	#$C,$19(a0)
0000949C 117C 0007 001E             		move.b	#7,$1E(a0)
000094A2 117C 0000 001A             		move.b	#0,$1A(a0)
000094A8 303C 00C4                  		move.w	#$C4,d0
000094AC 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000094B2                            ; ===========================================================================
000094B2                            Ani_obj1E:
000094B2                            	include "_anim\obj1E.asm"
000094B2                            ; ---------------------------------------------------------------------------
000094B2                            ; Animation script - doors (SBZ)
000094B2                            ; ---------------------------------------------------------------------------
000094B2 0000                       		dc.w byte_8E4A-Ani_obj1E
000094B4 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000094CC 00                         		even
000094CC 00                         		even
000094CC                            
000094CC                            ; ---------------------------------------------------------------------------
000094CC                            ; Sprite mappings - Ball Hog enemy (SBZ)
000094CC                            ; ---------------------------------------------------------------------------
000094CC                            Map_obj1E:
000094CC                            	include "_maps\obj1E.asm"
000094CC                            ; ---------------------------------------------------------------------------
000094CC                            ; Sprite mappings - Ball Hog enemy (SBZ)
000094CC                            ; ---------------------------------------------------------------------------
000094CC 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000094D0 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000094D4 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000094D8 02                         byte_8E6E:	dc.b 2
000094D9 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000094DE FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
000094E3 02                         byte_8E79:	dc.b 2
000094E4 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000094E9 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
000094EE 02                         byte_8E84:	dc.b 2
000094EF F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
000094F4 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
000094F9 02                         byte_8E8F:	dc.b 2
000094FA E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
000094FF F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009504 01                         byte_8E9A:	dc.b 1
00009505 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000950A 01                         byte_8EA0:	dc.b 1
0000950B F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009510                            		even
00009510                            		even
00009510                            
00009510                            ; ---------------------------------------------------------------------------
00009510                            ; Sprite mappings - explosion
00009510                            ; ---------------------------------------------------------------------------
00009510                            Map_obj24:
00009510                            	include "_maps\obj24.asm"
00009510                            ; ---------------------------------------------------------------------------
00009510                            ; Sprite mappings - explosion
00009510                            ; ---------------------------------------------------------------------------
00009510 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009514 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009518 01                         byte_8EAE:	dc.b 1
00009519 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000951E 01                         byte_8EB4:	dc.b 1
0000951F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009524 01                         byte_8EBA:	dc.b 1
00009525 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000952A 01                         byte_8EC0:	dc.b 1
0000952B F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009530                            		even
00009530                            		even
00009530                            
00009530                            ; ---------------------------------------------------------------------------
00009530                            ; Sprite mappings - explosion
00009530                            ; ---------------------------------------------------------------------------
00009530 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009534 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009538 0000                       		dc.w byte_8EF7-Map_obj27
0000953A 01                         byte_8ED0:	dc.b 1
0000953B F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009540 01                         byte_8ED6:	dc.b 1
00009541 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009546 01                         byte_8EDC:	dc.b 1
00009547 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000954C 04                         byte_8EE2:	dc.b 4
0000954D EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009552 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009557 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000955C FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009561 04                         byte_8EF7:	dc.b 4
00009562 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009567 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000956C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009571 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009576                            		even
00009576                            ; ---------------------------------------------------------------------------
00009576                            ; Sprite mappings - explosion from when	a boss is destroyed
00009576                            ; ---------------------------------------------------------------------------
00009576 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009578 0000                       		dc.w byte_8F16-Map_obj3F
0000957A 0000                       		dc.w byte_8F1C-Map_obj3F
0000957C FFD6                       		dc.w byte_8EE2-Map_obj3F
0000957E FFEB                       		dc.w byte_8EF7-Map_obj3F
00009580 01                         byte_8F16:	dc.b 1
00009581 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009586 01                         byte_8F1C:	dc.b 1
00009587 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000958C                            		even
0000958C                            ; ===========================================================================
0000958C                            ; ---------------------------------------------------------------------------
0000958C                            ; Object 28 - animals
0000958C                            ; ---------------------------------------------------------------------------
0000958C                            
0000958C                            Obj28:					; XREF: Obj_Index
0000958C 7000                       		moveq	#0,d0
0000958E 1028 0024                  		move.b	$24(a0),d0
00009592 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009596 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000959A                            ; ===========================================================================
0000959A 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000959E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000095A2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000095A6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000095AA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000095AE 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000095B2 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000095B6 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000095BA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000095BE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000095C2 0000                       		dc.w loc_92D6-Obj28_Index
000095C4                            
000095C4 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000095D0                            
000095D0 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000095D4 0000 0000                  		dc.l Map_obj28
000095D8 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
000095DC 0000 0000                  		dc.l Map_obj28a		; mappings address
000095E0 FE80 FD00                  		dc.w $FE80, $FD00
000095E4 0000 0000                  		dc.l Map_obj28
000095E8 FEC0 FE80                  		dc.w $FEC0, $FE80
000095EC 0000 0000                  		dc.l Map_obj28a
000095F0 FE40 FD00                  		dc.w $FE40, $FD00
000095F4 0000 0000                  		dc.l Map_obj28b
000095F8 FD00 FC00                  		dc.w $FD00, $FC00
000095FC 0000 0000                  		dc.l Map_obj28a
00009600 FD80 FC80                  		dc.w $FD80, $FC80
00009604 0000 0000                  		dc.l Map_obj28b
00009608                            
00009608 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009618 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009628 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009634                            
00009634 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009648 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000965C 0000 0000                  		dc.l Map_obj28b
00009660                            
00009660 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009672 0565 05B3                  		dc.w $565, $5B3
00009676                            ; ===========================================================================
00009676                            
00009676                            Obj28_Ending:				; XREF: Obj28_Index
00009676 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000967A 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000967E 7000                       		moveq	#0,d0
00009680 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009684 D040                       		add.w	d0,d0		; multiply d0 by 2
00009686 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000968A 0440 0014                  		subi.w	#$14,d0
0000968E 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009694 D040                       		add.w	d0,d0
00009696 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000969C 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000096A0 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000096A6 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000096AC 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000096B2 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000096B8 117C 000C 0016             		move.b	#$C,$16(a0)
000096BE 117C 0004 0001             		move.b	#4,1(a0)
000096C4 08E8 0000 0001             		bset	#0,1(a0)
000096CA 117C 0006 0018             		move.b	#6,$18(a0)
000096D0 117C 0008 0019             		move.b	#8,$19(a0)
000096D6 117C 0007 001E             		move.b	#7,$1E(a0)
000096DC 6000 0000                  		bra.w	DisplaySprite
000096E0                            ; ===========================================================================
000096E0                            
000096E0                            Obj28_FromEnemy:			; XREF: Obj28_Ending
000096E0 5428 0024                  		addq.b	#2,$24(a0)
000096E4 6100 9558                  		bsr.w	RandomNumber
000096E8 0240 0001                  		andi.w	#1,d0
000096EC 7200                       		moveq	#0,d1
000096EE 1238 FE10                  		move.b	($FFFFFE10).w,d1
000096F2 D241                       		add.w	d1,d1
000096F4 D240                       		add.w	d0,d1
000096F6 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000096FA 1031 1000                  		move.b	(a1,d1.w),d0
000096FE 1140 0030                  		move.b	d0,$30(a0)
00009702 E748                       		lsl.w	#3,d0
00009704 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009708 D2C0                       		adda.w	d0,a1
0000970A 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000970E 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009712 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009716 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000971C 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009722 6700                       		beq.s	loc_90C0	; if yes, branch
00009724 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000972A                            
0000972A                            loc_90C0:
0000972A 117C 000C 0016             		move.b	#$C,$16(a0)
00009730 117C 0004 0001             		move.b	#4,1(a0)
00009736 08E8 0000 0001             		bset	#0,1(a0)
0000973C 117C 0006 0018             		move.b	#6,$18(a0)
00009742 117C 0008 0019             		move.b	#8,$19(a0)
00009748 117C 0007 001E             		move.b	#7,$1E(a0)
0000974E 117C 0002 001A             		move.b	#2,$1A(a0)
00009754 317C FC00 0012             		move.w	#-$400,$12(a0)
0000975A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000975E 6600                       		bne.s	loc_911C
00009760 6100 0000                  		bsr.w	SingleObjLoad
00009764 6600                       		bne.s	Obj28_Display
00009766 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000976A 3368 0008 0008             		move.w	8(a0),8(a1)
00009770 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009776 3028 003E                  		move.w	$3E(a0),d0
0000977A E248                       		lsr.w	#1,d0
0000977C 1340 001A                  		move.b	d0,$1A(a1)
00009780                            
00009780                            Obj28_Display:
00009780 6000 0000                  		bra.w	DisplaySprite
00009784                            ; ===========================================================================
00009784                            
00009784                            loc_911C:
00009784 117C 0012 0024             		move.b	#$12,$24(a0)
0000978A 4268 0010                  		clr.w	$10(a0)
0000978E 6000 0000                  		bra.w	DisplaySprite
00009792                            ; ===========================================================================
00009792                            
00009792                            loc_912A:				; XREF: Obj28_Index
00009792 4A28 0001                  		tst.b	1(a0)
00009796 6A00 0000                  		bpl.w	DeleteObject
0000979A 6100 0000                  		bsr.w	ObjectFall
0000979E 4A68 0012                  		tst.w	$12(a0)
000097A2 6B00                       		bmi.s	loc_9180
000097A4 4EB9 0000 0000             		jsr	ObjHitFloor
000097AA 4A41                       		tst.w	d1
000097AC 6A00                       		bpl.s	loc_9180
000097AE D368 000C                  		add.w	d1,$C(a0)
000097B2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000097B8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097BE 117C 0001 001A             		move.b	#1,$1A(a0)
000097C4 1028 0030                  		move.b	$30(a0),d0
000097C8 D000                       		add.b	d0,d0
000097CA 5800                       		addq.b	#4,d0
000097CC 1140 0024                  		move.b	d0,$24(a0)
000097D0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000097D4 6700                       		beq.s	loc_9180
000097D6 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
000097DC 6700                       		beq.s	loc_9180
000097DE 4468 0010                  		neg.w	$10(a0)
000097E2 0868 0000 0001             		bchg	#0,1(a0)
000097E8                            
000097E8                            loc_9180:
000097E8 6000 0000                  		bra.w	DisplaySprite
000097EC                            ; ===========================================================================
000097EC                            
000097EC                            loc_9184:				; XREF: Obj28_Index
000097EC 6100 0000                  		bsr.w	ObjectFall
000097F0 117C 0001 001A             		move.b	#1,$1A(a0)
000097F6 4A68 0012                  		tst.w	$12(a0)
000097FA 6B00                       		bmi.s	loc_91AE
000097FC 117C 0000 001A             		move.b	#0,$1A(a0)
00009802 4EB9 0000 0000             		jsr	ObjHitFloor
00009808 4A41                       		tst.w	d1
0000980A 6A00                       		bpl.s	loc_91AE
0000980C D368 000C                  		add.w	d1,$C(a0)
00009810 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009816                            
00009816                            loc_91AE:
00009816 4A28 0028                  		tst.b	$28(a0)
0000981A 6600                       		bne.s	loc_9224
0000981C 4A28 0001                  		tst.b	1(a0)
00009820 6A00 0000                  		bpl.w	DeleteObject
00009824 6000 0000                  		bra.w	DisplaySprite
00009828                            ; ===========================================================================
00009828                            
00009828                            loc_91C0:				; XREF: Obj28_Index
00009828 6100 0000                  		bsr.w	SpeedToPos
0000982C 0668 0018 0012             		addi.w	#$18,$12(a0)
00009832 4A68 0012                  		tst.w	$12(a0)
00009836 6B00                       		bmi.s	loc_91FC
00009838 4EB9 0000 0000             		jsr	ObjHitFloor
0000983E 4A41                       		tst.w	d1
00009840 6A00                       		bpl.s	loc_91FC
00009842 D368 000C                  		add.w	d1,$C(a0)
00009846 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000984C 4A28 0028                  		tst.b	$28(a0)
00009850 6700                       		beq.s	loc_91FC
00009852 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009858 6700                       		beq.s	loc_91FC
0000985A 4468 0010                  		neg.w	$10(a0)
0000985E 0868 0000 0001             		bchg	#0,1(a0)
00009864                            
00009864                            loc_91FC:
00009864 5328 001E                  		subq.b	#1,$1E(a0)
00009868 6A00                       		bpl.s	loc_9212
0000986A 117C 0001 001E             		move.b	#1,$1E(a0)
00009870 5228 001A                  		addq.b	#1,$1A(a0)
00009874 0228 0001 001A             		andi.b	#1,$1A(a0)
0000987A                            
0000987A                            loc_9212:
0000987A 4A28 0028                  		tst.b	$28(a0)
0000987E 6600                       		bne.s	loc_9224
00009880 4A28 0001                  		tst.b	1(a0)
00009884 6A00 0000                  		bpl.w	DeleteObject
00009888 6000 0000                  		bra.w	DisplaySprite
0000988C                            ; ===========================================================================
0000988C                            
0000988C                            loc_9224:				; XREF: Obj28_Index
0000988C 3028 0008                  		move.w	8(a0),d0
00009890 9078 D008                  		sub.w	($FFFFD008).w,d0
00009894 6500                       		bcs.s	loc_923C
00009896 0440 0180                  		subi.w	#$180,d0
0000989A 6A00                       		bpl.s	loc_923C
0000989C 4A28 0001                  		tst.b	1(a0)
000098A0 6A00 0000                  		bpl.w	DeleteObject
000098A4                            
000098A4                            loc_923C:
000098A4 6000 0000                  		bra.w	DisplaySprite
000098A8                            ; ===========================================================================
000098A8                            
000098A8                            loc_9240:				; XREF: Obj28_Index
000098A8 4A28 0001                  		tst.b	1(a0)
000098AC 6A00 0000                  		bpl.w	DeleteObject
000098B0 5368 0036                  		subq.w	#1,$36(a0)
000098B4 6600 0000                  		bne.w	loc_925C
000098B8 117C 0002 0024             		move.b	#2,$24(a0)
000098BE 117C 0003 0018             		move.b	#3,$18(a0)
000098C4                            
000098C4                            loc_925C:
000098C4 6000 0000                  		bra.w	DisplaySprite
000098C8                            ; ===========================================================================
000098C8                            
000098C8                            loc_9260:				; XREF: Obj28_Index
000098C8 6100 0000                  		bsr.w	sub_9404
000098CC 6400                       		bcc.s	loc_927C
000098CE 3168 0032 0010             		move.w	$32(a0),$10(a0)
000098D4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098DA 117C 000E 0024             		move.b	#$E,$24(a0)
000098E0 6000 FF46                  		bra.w	loc_91C0
000098E4                            ; ===========================================================================
000098E4                            
000098E4                            loc_927C:
000098E4 6000 FFA6                  		bra.w	loc_9224
000098E8                            ; ===========================================================================
000098E8                            
000098E8                            loc_9280:				; XREF: Obj28_Index
000098E8 6100 0000                  		bsr.w	sub_9404
000098EC 6A00                       		bpl.s	loc_92B6
000098EE 4268 0010                  		clr.w	$10(a0)
000098F2 4268 0032                  		clr.w	$32(a0)
000098F6 6100 0000                  		bsr.w	SpeedToPos
000098FA 0668 0018 0012             		addi.w	#$18,$12(a0)
00009900 6100 0000                  		bsr.w	loc_93C4
00009904 6100 0000                  		bsr.w	loc_93EC
00009908 5328 001E                  		subq.b	#1,$1E(a0)
0000990C 6A00                       		bpl.s	loc_92B6
0000990E 117C 0001 001E             		move.b	#1,$1E(a0)
00009914 5228 001A                  		addq.b	#1,$1A(a0)
00009918 0228 0001 001A             		andi.b	#1,$1A(a0)
0000991E                            
0000991E                            loc_92B6:
0000991E 6000 FF6C                  		bra.w	loc_9224
00009922                            ; ===========================================================================
00009922                            
00009922                            loc_92BA:				; XREF: Obj28_Index
00009922 6100 0000                  		bsr.w	sub_9404
00009926 6A00                       		bpl.s	loc_9310
00009928 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000992E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009934 117C 0004 0024             		move.b	#4,$24(a0)
0000993A 6000 FEB0                  		bra.w	loc_9184
0000993E                            ; ===========================================================================
0000993E                            
0000993E                            loc_92D6:				; XREF: Obj28_Index
0000993E 6100 0000                  		bsr.w	ObjectFall
00009942 117C 0001 001A             		move.b	#1,$1A(a0)
00009948 4A68 0012                  		tst.w	$12(a0)
0000994C 6B00                       		bmi.s	loc_9310
0000994E 117C 0000 001A             		move.b	#0,$1A(a0)
00009954 4EB9 0000 0000             		jsr	ObjHitFloor
0000995A 4A41                       		tst.w	d1
0000995C 6A00                       		bpl.s	loc_9310
0000995E 4628 0029                  		not.b	$29(a0)
00009962 6600                       		bne.s	loc_9306
00009964 4468 0010                  		neg.w	$10(a0)
00009968 0868 0000 0001             		bchg	#0,1(a0)
0000996E                            
0000996E                            loc_9306:
0000996E D368 000C                  		add.w	d1,$C(a0)
00009972 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009978                            
00009978                            loc_9310:
00009978 6000 FF12                  		bra.w	loc_9224
0000997C                            ; ===========================================================================
0000997C                            
0000997C                            loc_9314:				; XREF: Obj28_Index
0000997C 6100 0000                  		bsr.w	sub_9404
00009980 6A00                       		bpl.s	loc_932E
00009982 4268 0010                  		clr.w	$10(a0)
00009986 4268 0032                  		clr.w	$32(a0)
0000998A 6100 0000                  		bsr.w	ObjectFall
0000998E 6100 0000                  		bsr.w	loc_93C4
00009992 6100 0000                  		bsr.w	loc_93EC
00009996                            
00009996                            loc_932E:
00009996 6000 FEF4                  		bra.w	loc_9224
0000999A                            ; ===========================================================================
0000999A                            
0000999A                            loc_9332:				; XREF: Obj28_Index
0000999A 6100 0000                  		bsr.w	sub_9404
0000999E 6A00                       		bpl.s	loc_936C
000099A0 6100 0000                  		bsr.w	ObjectFall
000099A4 117C 0001 001A             		move.b	#1,$1A(a0)
000099AA 4A68 0012                  		tst.w	$12(a0)
000099AE 6B00                       		bmi.s	loc_936C
000099B0 117C 0000 001A             		move.b	#0,$1A(a0)
000099B6 4EB9 0000 0000             		jsr	ObjHitFloor
000099BC 4A41                       		tst.w	d1
000099BE 6A00                       		bpl.s	loc_936C
000099C0 4468 0010                  		neg.w	$10(a0)
000099C4 0868 0000 0001             		bchg	#0,1(a0)
000099CA D368 000C                  		add.w	d1,$C(a0)
000099CE 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099D4                            
000099D4                            loc_936C:
000099D4 6000 FEB6                  		bra.w	loc_9224
000099D8                            ; ===========================================================================
000099D8                            
000099D8                            loc_9370:				; XREF: Obj28_Index
000099D8 6100 0000                  		bsr.w	sub_9404
000099DC 6A00                       		bpl.s	loc_93C0
000099DE 6100 0000                  		bsr.w	SpeedToPos
000099E2 0668 0018 0012             		addi.w	#$18,$12(a0)
000099E8 4A68 0012                  		tst.w	$12(a0)
000099EC 6B00                       		bmi.s	loc_93AA
000099EE 4EB9 0000 0000             		jsr	ObjHitFloor
000099F4 4A41                       		tst.w	d1
000099F6 6A00                       		bpl.s	loc_93AA
000099F8 4628 0029                  		not.b	$29(a0)
000099FC 6600                       		bne.s	loc_93A0
000099FE 4468 0010                  		neg.w	$10(a0)
00009A02 0868 0000 0001             		bchg	#0,1(a0)
00009A08                            
00009A08                            loc_93A0:
00009A08 D368 000C                  		add.w	d1,$C(a0)
00009A0C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A12                            
00009A12                            loc_93AA:
00009A12 5328 001E                  		subq.b	#1,$1E(a0)
00009A16 6A00                       		bpl.s	loc_93C0
00009A18 117C 0001 001E             		move.b	#1,$1E(a0)
00009A1E 5228 001A                  		addq.b	#1,$1A(a0)
00009A22 0228 0001 001A             		andi.b	#1,$1A(a0)
00009A28                            
00009A28                            loc_93C0:
00009A28 6000 FE62                  		bra.w	loc_9224
00009A2C                            ; ===========================================================================
00009A2C                            
00009A2C                            loc_93C4:
00009A2C 117C 0001 001A             		move.b	#1,$1A(a0)
00009A32 4A68 0012                  		tst.w	$12(a0)
00009A36 6B00                       		bmi.s	locret_93EA
00009A38 117C 0000 001A             		move.b	#0,$1A(a0)
00009A3E 4EB9 0000 0000             		jsr	ObjHitFloor
00009A44 4A41                       		tst.w	d1
00009A46 6A00                       		bpl.s	locret_93EA
00009A48 D368 000C                  		add.w	d1,$C(a0)
00009A4C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A52                            
00009A52                            locret_93EA:
00009A52 4E75                       		rts	
00009A54                            ; ===========================================================================
00009A54                            
00009A54                            loc_93EC:
00009A54 08E8 0000 0001             		bset	#0,1(a0)
00009A5A 3028 0008                  		move.w	8(a0),d0
00009A5E 9078 D008                  		sub.w	($FFFFD008).w,d0
00009A62 6400                       		bcc.s	locret_9402
00009A64 08A8 0000 0001             		bclr	#0,1(a0)
00009A6A                            
00009A6A                            locret_9402:
00009A6A 4E75                       		rts	
00009A6C                            
00009A6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A6C                            
00009A6C                            
00009A6C                            sub_9404:
00009A6C 3038 D008                  		move.w	($FFFFD008).w,d0
00009A70 9068 0008                  		sub.w	8(a0),d0
00009A74 0440 00B8                  		subi.w	#$B8,d0
00009A78 4E75                       		rts	
00009A7A                            ; End of function sub_9404
00009A7A                            
00009A7A                            ; ===========================================================================
00009A7A                            ; ---------------------------------------------------------------------------
00009A7A                            ; Object 29 - points that appear when you destroy something
00009A7A                            ; ---------------------------------------------------------------------------
00009A7A                            
00009A7A                            Obj29:					; XREF: Obj_Index
00009A7A 7000                       		moveq	#0,d0
00009A7C 1028 0024                  		move.b	$24(a0),d0
00009A80 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009A84 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009A88 6000 0000                  		bra.w	DisplaySprite
00009A8C                            ; ===========================================================================
00009A8C 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009A8E 0000                       		dc.w Obj29_Slower-Obj29_Index
00009A90                            ; ===========================================================================
00009A90                            
00009A90                            Obj29_Main:				; XREF: Obj29_Index
00009A90 5428 0024                  		addq.b	#2,$24(a0)
00009A94 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009A9C 317C 2797 0002             		move.w	#$2797,2(a0)
00009AA2 117C 0004 0001             		move.b	#4,1(a0)
00009AA8 117C 0001 0018             		move.b	#1,$18(a0)
00009AAE 117C 0008 0019             		move.b	#8,$19(a0)
00009AB4 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009ABA                            
00009ABA                            Obj29_Slower:				; XREF: Obj29_Index
00009ABA 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009ABE 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009AC2 6100 0000                  		bsr.w	SpeedToPos
00009AC6 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009ACC 4E75                       		rts	
00009ACE                            ; ===========================================================================
00009ACE                            ; ---------------------------------------------------------------------------
00009ACE                            ; Sprite mappings - animals
00009ACE                            ; ---------------------------------------------------------------------------
00009ACE                            Map_obj28:
00009ACE                            	include "_maps\obj28.asm"
00009ACE                            ; ---------------------------------------------------------------------------
00009ACE                            ; Sprite mappings - animals
00009ACE                            ; ---------------------------------------------------------------------------
00009ACE 0000                       		dc.w byte_9472-Map_obj28
00009AD0 0000                       		dc.w byte_9478-Map_obj28
00009AD2 0000                       		dc.w byte_946C-Map_obj28
00009AD4 01                         byte_946C:	dc.b 1
00009AD5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009ADA 01                         byte_9472:	dc.b 1
00009ADB F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009AE0 01                         byte_9478:	dc.b 1
00009AE1 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009AE6                            		even
00009AE6                            		even
00009AE6                            
00009AE6                            Map_obj28a:
00009AE6                            	include "_maps\obj28a.asm"
00009AE6                            ; ---------------------------------------------------------------------------
00009AE6                            ; Sprite mappings - animals
00009AE6                            ; ---------------------------------------------------------------------------
00009AE6 0000                       		dc.w byte_948A-Map_obj28a
00009AE8 0000                       		dc.w byte_9490-Map_obj28a
00009AEA 0000                       		dc.w byte_9484-Map_obj28a
00009AEC 01                         byte_9484:	dc.b 1
00009AED F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009AF2 01                         byte_948A:	dc.b 1
00009AF3 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009AF8 01                         byte_9490:	dc.b 1
00009AF9 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009AFE                            		even
00009AFE                            		even
00009AFE                            
00009AFE                            Map_obj28b:
00009AFE                            	include "_maps\obj28b.asm"
00009AFE                            ; ---------------------------------------------------------------------------
00009AFE                            ; Sprite mappings - animals
00009AFE                            ; ---------------------------------------------------------------------------
00009AFE 0000                       		dc.w byte_94A2-Map_obj28b
00009B00 0000                       		dc.w byte_94A8-Map_obj28b
00009B02 0000                       		dc.w byte_949C-Map_obj28b
00009B04 01                         byte_949C:	dc.b 1
00009B05 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B0A 01                         byte_94A2:	dc.b 1
00009B0B FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009B10 01                         byte_94A8:	dc.b 1
00009B11 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009B16                            		even
00009B16                            		even
00009B16                            
00009B16                            ; ---------------------------------------------------------------------------
00009B16                            ; Sprite mappings - points that	appear when you	destroy	something
00009B16                            ; ---------------------------------------------------------------------------
00009B16                            Map_obj29:
00009B16                            	include "_maps\obj29.asm"
00009B16                            ; ---------------------------------------------------------------------------
00009B16                            ; Sprite mappings - points that	appear when you	destroy	something
00009B16                            ; ---------------------------------------------------------------------------
00009B16 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009B1A 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009B1E 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009B22 0000                       		dc.w byte_94E5-Map_obj29
00009B24 01                         byte_94BC:	dc.b 1
00009B25 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009B2A 01                         byte_94C2:	dc.b 1
00009B2B FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009B30 01                         byte_94C8:	dc.b 1
00009B31 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009B36 01                         byte_94CE:	dc.b 1
00009B37 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009B3C 01                         byte_94D4:	dc.b 1
00009B3D FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009B42 02                         byte_94DA:	dc.b 2
00009B43 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009B48 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009B4D 02                         byte_94E5:	dc.b 2
00009B4E FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009B53 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009B58                            		even
00009B58                            		even
00009B58                            
00009B58                            ; ===========================================================================
00009B58                            ; ---------------------------------------------------------------------------
00009B58                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009B58                            ; ---------------------------------------------------------------------------
00009B58                            
00009B58                            Obj1F:					; XREF: Obj_Index
00009B58 7000                       		moveq	#0,d0
00009B5A 1028 0024                  		move.b	$24(a0),d0
00009B5E 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009B62 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009B66                            ; ===========================================================================
00009B66 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009B68 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009B6A 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009B6C 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009B6E 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009B70                            ; ===========================================================================
00009B70                            
00009B70                            Obj1F_Main:				; XREF: Obj1F_Index
00009B70 117C 0010 0016             		move.b	#$10,$16(a0)
00009B76 117C 0008 0017             		move.b	#8,$17(a0)
00009B7C 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009B84 317C 0400 0002             		move.w	#$400,2(a0)
00009B8A 117C 0004 0001             		move.b	#4,1(a0)
00009B90 117C 0003 0018             		move.b	#3,$18(a0)
00009B96 117C 0006 0020             		move.b	#6,$20(a0)
00009B9C 117C 0015 0019             		move.b	#$15,$19(a0)
00009BA2 6100 0000                  		bsr.w	ObjectFall
00009BA6 4EB9 0000 0000             		jsr	ObjHitFloor
00009BAC 4A41                       		tst.w	d1
00009BAE 6A00                       		bpl.s	locret_955A
00009BB0 D368 000C                  		add.w	d1,$C(a0)
00009BB4 1143 0026                  		move.b	d3,$26(a0)
00009BB8 317C 0000 0012             		move.w	#0,$12(a0)
00009BBE 5428 0024                  		addq.b	#2,$24(a0)
00009BC2                            
00009BC2                            locret_955A:
00009BC2 4E75                       		rts	
00009BC4                            ; ===========================================================================
00009BC4                            
00009BC4                            Obj1F_Action:				; XREF: Obj1F_Index
00009BC4 7000                       		moveq	#0,d0
00009BC6 1028 0025                  		move.b	$25(a0),d0
00009BCA 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009BCE 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009BD2 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009BD8 6100 0000                  		bsr.w	AnimateSprite
00009BDC 6000 0000                  		bra.w	MarkObjGone
00009BE0                            ; ===========================================================================
00009BE0 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009BE2 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009BE4                            ; ===========================================================================
00009BE4                            
00009BE4                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009BE4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009BE8 6A00                       		bpl.s	locret_95B6
00009BEA 4A28 0001                  		tst.b	1(a0)
00009BEE 6A00                       		bpl.s	Obj1F_Move
00009BF0 0868 0001 0032             		bchg	#1,$32(a0)
00009BF6 6600                       		bne.s	Obj1F_MakeFire
00009BF8                            
00009BF8                            Obj1F_Move:
00009BF8 5428 0025                  		addq.b	#2,$25(a0)
00009BFC 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009C02 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009C08 6100 0000                  		bsr.w	Obj1F_SetAni
00009C0C 5600                       		addq.b	#3,d0
00009C0E 1140 001C                  		move.b	d0,$1C(a0)
00009C12 0868 0000 0022             		bchg	#0,$22(a0)
00009C18 6600                       		bne.s	locret_95B6
00009C1A 4468 0010                  		neg.w	$10(a0)		; change direction
00009C1E                            
00009C1E                            locret_95B6:
00009C1E 4E75                       		rts	
00009C20                            ; ===========================================================================
00009C20                            
00009C20                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009C20 317C 003B 0030             		move.w	#$3B,$30(a0)
00009C26 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009C2C 6100 0000                  		bsr.w	SingleObjLoad
00009C30 6600                       		bne.s	Obj1F_MakeFire2
00009C32 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009C36 137C 0006 0024             		move.b	#6,$24(a1)
00009C3C 3368 0008 0008             		move.w	8(a0),8(a1)
00009C42 0469 0010 0008             		subi.w	#$10,8(a1)
00009C48 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009C4E 337C FF00 0010             		move.w	#-$100,$10(a1)
00009C54                            
00009C54                            Obj1F_MakeFire2:
00009C54 6100 0000                  		bsr.w	SingleObjLoad
00009C58 6600                       		bne.s	locret_9618
00009C5A 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009C5E 137C 0006 0024             		move.b	#6,$24(a1)
00009C64 3368 0008 0008             		move.w	8(a0),8(a1)
00009C6A 0669 0010 0008             		addi.w	#$10,8(a1)
00009C70 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009C76 337C 0100 0010             		move.w	#$100,$10(a1)
00009C7C                            
00009C7C                            locret_9618:
00009C7C 4E75                       		rts	
00009C7E                            ; ===========================================================================
00009C7E                            
00009C7E                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009C7E 5368 0030                  		subq.w	#1,$30(a0)
00009C82 6B00                       		bmi.s	loc_966E
00009C84 6100 0000                  		bsr.w	SpeedToPos
00009C88 0868 0000 0032             		bchg	#0,$32(a0)
00009C8E 6600                       		bne.s	loc_9654
00009C90 3628 0008                  		move.w	8(a0),d3
00009C94 0643 0010                  		addi.w	#$10,d3
00009C98 0828 0000 0022             		btst	#0,$22(a0)
00009C9E 6700                       		beq.s	loc_9640
00009CA0 0443 0020                  		subi.w	#$20,d3
00009CA4                            
00009CA4                            loc_9640:
00009CA4 4EB9 0000 0000             		jsr	ObjHitFloor2
00009CAA 0C41 FFF8                  		cmpi.w	#-8,d1
00009CAE 6D00                       		blt.s	loc_966E
00009CB0 0C41 000C                  		cmpi.w	#$C,d1
00009CB4 6C00                       		bge.s	loc_966E
00009CB6 4E75                       		rts	
00009CB8                            ; ===========================================================================
00009CB8                            
00009CB8                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009CB8 4EB9 0000 0000             		jsr	ObjHitFloor
00009CBE D368 000C                  		add.w	d1,$C(a0)
00009CC2 1143 0026                  		move.b	d3,$26(a0)
00009CC6 6100 0000                  		bsr.w	Obj1F_SetAni
00009CCA 5600                       		addq.b	#3,d0
00009CCC 1140 001C                  		move.b	d0,$1C(a0)
00009CD0 4E75                       		rts	
00009CD2                            ; ===========================================================================
00009CD2                            
00009CD2                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009CD2 5528 0025                  		subq.b	#2,$25(a0)
00009CD6 317C 003B 0030             		move.w	#59,$30(a0)
00009CDC 317C 0000 0010             		move.w	#0,$10(a0)
00009CE2 6100 0000                  		bsr.w	Obj1F_SetAni
00009CE6 1140 001C                  		move.b	d0,$1C(a0)
00009CEA 4E75                       		rts	
00009CEC                            ; ---------------------------------------------------------------------------
00009CEC                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009CEC                            ; ---------------------------------------------------------------------------
00009CEC                            
00009CEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CEC                            
00009CEC                            
00009CEC                            Obj1F_SetAni:				; XREF: loc_966E
00009CEC 7000                       		moveq	#0,d0
00009CEE 1628 0026                  		move.b	$26(a0),d3
00009CF2 6B00                       		bmi.s	loc_96A4
00009CF4 0C03 0006                  		cmpi.b	#6,d3
00009CF8 6500                       		bcs.s	locret_96A2
00009CFA 7001                       		moveq	#1,d0
00009CFC 0828 0000 0022             		btst	#0,$22(a0)
00009D02 6600                       		bne.s	locret_96A2
00009D04 7002                       		moveq	#2,d0
00009D06                            
00009D06                            locret_96A2:
00009D06 4E75                       		rts	
00009D08                            ; ===========================================================================
00009D08                            
00009D08                            loc_96A4:				; XREF: Obj1F_SetAni
00009D08 0C03 00FA                  		cmpi.b	#-6,d3
00009D0C 6200                       		bhi.s	locret_96B6
00009D0E 7002                       		moveq	#2,d0
00009D10 0828 0000 0022             		btst	#0,$22(a0)
00009D16 6600                       		bne.s	locret_96B6
00009D18 7001                       		moveq	#1,d0
00009D1A                            
00009D1A                            locret_96B6:
00009D1A 4E75                       		rts	
00009D1C                            ; End of function Obj1F_SetAni
00009D1C                            
00009D1C                            ; ===========================================================================
00009D1C                            
00009D1C                            Obj1F_Delete:				; XREF: Obj1F_Index
00009D1C 6100 0000                  		bsr.w	DeleteObject
00009D20 4E75                       		rts	
00009D22                            ; ===========================================================================
00009D22                            ; ---------------------------------------------------------------------------
00009D22                            ; Sub-object - missile that the	Crabmeat throws
00009D22                            ; ---------------------------------------------------------------------------
00009D22                            
00009D22                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009D22 5428 0024                  		addq.b	#2,$24(a0)
00009D26 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009D2E 317C 0400 0002             		move.w	#$400,2(a0)
00009D34 117C 0004 0001             		move.b	#4,1(a0)
00009D3A 117C 0003 0018             		move.b	#3,$18(a0)
00009D40 117C 0087 0020             		move.b	#$87,$20(a0)
00009D46 117C 0008 0019             		move.b	#8,$19(a0)
00009D4C 317C FC00 0012             		move.w	#-$400,$12(a0)
00009D52 117C 0007 001C             		move.b	#7,$1C(a0)
00009D58                            
00009D58                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009D58 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009D5E 6100 0000                  		bsr.w	AnimateSprite
00009D62 6100 0000                  		bsr.w	ObjectFall
00009D66 6100 0000                  		bsr.w	DisplaySprite
00009D6A 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009D6E 0640 00E0                  		addi.w	#$E0,d0
00009D72 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009D76 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009D78 4E75                       		rts	
00009D7A                            ; ===========================================================================
00009D7A                            
00009D7A                            Obj1F_Delete2:
00009D7A 6000 0000                  		bra.w	DeleteObject
00009D7E                            ; ===========================================================================
00009D7E                            Ani_obj1F:
00009D7E                            	include "_anim\obj1F.asm"
00009D7E                            ; ---------------------------------------------------------------------------
00009D7E                            ; Animation script - Crabmeat enemy
00009D7E                            ; ---------------------------------------------------------------------------
00009D7E 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009D84 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009D8A 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009D8E 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009D92 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009D96 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009D9A 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009DA0 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009DA6 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009DAC 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009DB0 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009DB4                            		even
00009DB4                            		even
00009DB4                            
00009DB4                            ; ---------------------------------------------------------------------------
00009DB4                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009DB4                            ; ---------------------------------------------------------------------------
00009DB4                            Map_obj1F:
00009DB4                            	include "_maps\obj1F.asm"
00009DB4                            Map_1514:
00009DB4 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009DB6 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009DB8 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009DBA 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009DBC 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009DBE 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009DC0 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009DC2 03                         Map_1514_E: 	dc.b $3
00009DC3 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009DC8 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009DCD F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009DD2 03                         Map_1514_1E: 	dc.b $3
00009DD3 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009DD8 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009DDD F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009DE2 03                         Map_1514_2E: 	dc.b $3
00009DE3 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009DE8 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009DED F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009DF2 03                         Map_1514_3E: 	dc.b $3
00009DF3 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009DF8 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009DFD F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E02 03                         Map_1514_4E: 	dc.b $3
00009E03 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E08 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E0D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E12 01                         Map_1514_5E: 	dc.b $1
00009E13 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009E18 01                         Map_1514_64: 	dc.b $1
00009E19 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009E1E                            	even
00009E1E                            	even
00009E1E                            
00009E1E                            ; ===========================================================================
00009E1E                            ; ---------------------------------------------------------------------------
00009E1E                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009E1E                            ; ---------------------------------------------------------------------------
00009E1E                            
00009E1E                            Obj22:					; XREF: Obj_Index
00009E1E 7000                       		moveq	#0,d0
00009E20 1028 0024                  		move.b	$24(a0),d0
00009E24 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009E28 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009E2C                            ; ===========================================================================
00009E2C 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009E2E 0000                       		dc.w Obj22_Action-Obj22_Index
00009E30 0000                       		dc.w Obj22_Delete-Obj22_Index
00009E32                            ; ===========================================================================
00009E32                            
00009E32                            Obj22_Main:				; XREF: Obj22_Index
00009E32 5428 0024                  		addq.b	#2,$24(a0)
00009E36 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009E3E 317C 0444 0002             		move.w	#$444,2(a0)
00009E44 117C 0004 0001             		move.b	#4,1(a0)
00009E4A 117C 0003 0018             		move.b	#3,$18(a0)
00009E50 117C 0008 0020             		move.b	#8,$20(a0)
00009E56 117C 0018 0019             		move.b	#$18,$19(a0)
00009E5C                            
00009E5C                            Obj22_Action:				; XREF: Obj22_Index
00009E5C 7000                       		moveq	#0,d0
00009E5E 1028 0025                  		move.b	$25(a0),d0
00009E62 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009E66 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009E6A 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009E70 6100 0000                  		bsr.w	AnimateSprite
00009E74 6000 0000                  		bra.w	MarkObjGone
00009E78                            ; ===========================================================================
00009E78 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009E7A 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009E7C                            ; ===========================================================================
00009E7C                            
00009E7C                            Obj22_Move:				; XREF: Obj22_Index2
00009E7C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009E80 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009E82 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009E88 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009E8A 5428 0025                  		addq.b	#2,$25(a0)
00009E8E 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009E94 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009E9A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009EA0 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009EA6 6600                       		bne.s	locret_986C	; if not, branch
00009EA8 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009EAC                            
00009EAC                            locret_986C:
00009EAC 4E75                       		rts	
00009EAE                            ; ===========================================================================
00009EAE                            
00009EAE                            Obj22_Fire:				; XREF: Obj22_Move
00009EAE 6100 0000                  		bsr.w	SingleObjLoad
00009EB2 6600                       		bne.s	locret_98D0
00009EB4 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009EB8 3368 0008 0008             		move.w	8(a0),8(a1)
00009EBE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EC4 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009ECA 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009ED0 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009ED6 303C 0018                  		move.w	#$18,d0
00009EDA 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009EE0 6600                       		bne.s	loc_98AA	; if not, branch
00009EE2 4440                       		neg.w	d0
00009EE4 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009EE8                            
00009EE8                            loc_98AA:
00009EE8 D169 0008                  		add.w	d0,8(a1)
00009EEC 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009EF2 337C 000E 0032             		move.w	#$E,$32(a1)
00009EF8 2348 003C                  		move.l	a0,$3C(a1)
00009EFC 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009F02 317C 003B 0032             		move.w	#$3B,$32(a0)
00009F08 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009F0E                            
00009F0E                            locret_98D0:
00009F0E 4E75                       		rts	
00009F10                            ; ===========================================================================
00009F10                            
00009F10                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009F10 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F14 6B00                       		bmi.s	Obj22_ChgDir
00009F16 6100 0000                  		bsr.w	SpeedToPos
00009F1A 4A28 0034                  		tst.b	$34(a0)
00009F1E 6600                       		bne.s	locret_992A
00009F20 3038 D008                  		move.w	($FFFFD008).w,d0
00009F24 9068 0008                  		sub.w	8(a0),d0
00009F28 6A00                       		bpl.s	Obj22_SetNrSonic
00009F2A 4440                       		neg.w	d0
00009F2C                            
00009F2C                            Obj22_SetNrSonic:
00009F2C 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009F30 6400                       		bcc.s	locret_992A	; if not, branch
00009F32 4A28 0001                  		tst.b	1(a0)
00009F36 6A00                       		bpl.s	locret_992A
00009F38 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009F3E 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009F44 6000                       		bra.s	Obj22_Stop
00009F46                            ; ===========================================================================
00009F46                            
00009F46                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009F46 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009F4C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009F52 317C 003B 0032             		move.w	#59,$32(a0)
00009F58                            
00009F58                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009F58 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009F5C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009F62 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009F68                            
00009F68                            locret_992A:
00009F68 4E75                       		rts	
00009F6A                            ; ===========================================================================
00009F6A                            
00009F6A                            Obj22_Delete:				; XREF: Obj22_Index
00009F6A 6100 0000                  		bsr.w	DeleteObject
00009F6E 4E75                       		rts	
00009F70                            ; ===========================================================================
00009F70                            ; ---------------------------------------------------------------------------
00009F70                            ; Object 23 - missile that Buzz	Bomber throws
00009F70                            ; ---------------------------------------------------------------------------
00009F70                            
00009F70                            Obj23:					; XREF: Obj_Index
00009F70 7000                       		moveq	#0,d0
00009F72 1028 0024                  		move.b	$24(a0),d0
00009F76 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009F7A 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009F7E                            ; ===========================================================================
00009F7E 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009F80 0000                       		dc.w Obj23_Animate-Obj23_Index
00009F82 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009F84 0000                       		dc.w Obj23_Delete-Obj23_Index
00009F86 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009F88                            ; ===========================================================================
00009F88                            
00009F88                            Obj23_Main:				; XREF: Obj23_Index
00009F88 5368 0032                  		subq.w	#1,$32(a0)
00009F8C 6A00                       		bpl.s	Obj23_ChkCancel
00009F8E 5428 0024                  		addq.b	#2,$24(a0)
00009F92 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009F9A 317C 2444 0002             		move.w	#$2444,2(a0)
00009FA0 117C 0004 0001             		move.b	#4,1(a0)
00009FA6 117C 0003 0018             		move.b	#3,$18(a0)
00009FAC 117C 0008 0019             		move.b	#8,$19(a0)
00009FB2 0228 0003 0022             		andi.b	#3,$22(a0)
00009FB8 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009FBC 6700                       		beq.s	Obj23_Animate	; if not, branch
00009FBE 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009FC4 117C 0087 0020             		move.b	#$87,$20(a0)
00009FCA 117C 0001 001C             		move.b	#1,$1C(a0)
00009FD0 6000                       		bra.s	Obj23_Animate2
00009FD2                            ; ===========================================================================
00009FD2                            
00009FD2                            Obj23_Animate:				; XREF: Obj23_Index
00009FD2 6100                       		bsr.s	Obj23_ChkCancel
00009FD4 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009FDA 6100 0000                  		bsr.w	AnimateSprite
00009FDE 6000 0000                  		bra.w	DisplaySprite
00009FE2                            ; ---------------------------------------------------------------------------
00009FE2                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009FE2                            ; destroyed, and if it has, then cancel	the missile
00009FE2                            ; ---------------------------------------------------------------------------
00009FE2                            
00009FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009FE2                            
00009FE2                            
00009FE2                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009FE2 2268 003C                  		movea.l	$3C(a0),a1
00009FE6 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009FEA 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009FEC 4E75                       		rts	
00009FEE                            ; End of function Obj23_ChkCancel
00009FEE                            
00009FEE                            ; ===========================================================================
00009FEE                            
00009FEE                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009FEE 0828 0007 0022             		btst	#7,$22(a0)
00009FF4 6600                       		bne.s	Obj23_Explode
00009FF6 117C 0087 0020             		move.b	#$87,$20(a0)
00009FFC 117C 0001 001C             		move.b	#1,$1C(a0)
0000A002 6100 0000                  		bsr.w	SpeedToPos
0000A006 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A00C 6100 0000                  		bsr.w	AnimateSprite
0000A010 6100 0000                  		bsr.w	DisplaySprite
0000A014 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A018 0640 00E0                  		addi.w	#$E0,d0
0000A01C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A020 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A022 4E75                       		rts	
0000A024                            ; ===========================================================================
0000A024                            
0000A024                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A024 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A028 117C 0000 0024             		move.b	#0,$24(a0)
0000A02E 6000 F2DE                  		bra.w	Obj24
0000A032                            ; ===========================================================================
0000A032                            
0000A032                            Obj23_Delete:				; XREF: Obj23_Index
0000A032 6100 0000                  		bsr.w	DeleteObject
0000A036 4E75                       		rts	
0000A038                            ; ===========================================================================
0000A038                            
0000A038                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A038 4A28 0001                  		tst.b	1(a0)
0000A03C 6AF4                       		bpl.s	Obj23_Delete
0000A03E 6100 0000                  		bsr.w	SpeedToPos
0000A042                            
0000A042                            Obj23_Animate2:				; XREF: Obj23_Main
0000A042 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A048 6100 0000                  		bsr.w	AnimateSprite
0000A04C 6100 0000                  		bsr.w	DisplaySprite
0000A050 4E75                       		rts	
0000A052                            ; ===========================================================================
0000A052                            Ani_obj22:
0000A052                            	include "_anim\obj22.asm"
0000A052                            ; ---------------------------------------------------------------------------
0000A052                            ; Animation script - Buzz Bomber enemy
0000A052                            ; ---------------------------------------------------------------------------
0000A052 0000                       		dc.w byte_9A1E-Ani_obj22
0000A054 0000                       		dc.w byte_9A22-Ani_obj22
0000A056 0000                       		dc.w byte_9A26-Ani_obj22
0000A058 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A05C 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A060 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A064                            		even
0000A064                            		even
0000A064                            
0000A064                            Ani_obj23:
0000A064                            	include "_anim\obj23.asm"
0000A064                            ; ---------------------------------------------------------------------------
0000A064                            ; Animation script - missile that Buzz Bomber throws
0000A064                            ; ---------------------------------------------------------------------------
0000A064 0000                       		dc.w byte_9A2E-Ani_obj23
0000A066 0000                       		dc.w byte_9A32-Ani_obj23
0000A068 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A06C 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A070                            		even
0000A070                            		even
0000A070                            
0000A070                            ; ---------------------------------------------------------------------------
0000A070                            ; Sprite mappings - Buzz Bomber	enemy
0000A070                            ; ---------------------------------------------------------------------------
0000A070                            Map_obj22:
0000A070                            	include "_maps\obj22.asm"
0000A070                            Map_e97a:
0000A070 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A072 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A074 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A076 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A078 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A07A 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A07C 06                         Map_e97a_C: 	dc.b $6
0000A07D F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A082 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A087 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A08C 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A091 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A096 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A09B 06                         Map_e97a_2B: 	dc.b $6
0000A09C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A0A1 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A0A6 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A0AB 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A0B0 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A0B5 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A0BA 07                         Map_e97a_4A: 	dc.b $7
0000A0BB 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A0C0 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A0C5 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A0CA 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A0CF 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A0D4 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A0D9 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A0DE 07                         Map_e97a_6E: 	dc.b $7
0000A0DF 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A0E4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A0E9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A0EE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A0F3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A0F8 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A0FD F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A102 06                         Map_e97a_92: 	dc.b $6
0000A103 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A108 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A10D 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A112 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A117 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A11C F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A121 04                         Map_e97a_B1: 	dc.b $4
0000A122 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A127 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A12C 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A131 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A136                            	even
0000A136                            	even
0000A136                            
0000A136                            ; ---------------------------------------------------------------------------
0000A136                            ; Sprite mappings - missile that Buzz Bomber throws
0000A136                            ; ---------------------------------------------------------------------------
0000A136                            Map_obj23:
0000A136                            	include "_maps\obj23.asm"
0000A136                            ; ---------------------------------------------------------------------------
0000A136                            ; Sprite mappings - missile that Buzz Bomber throws
0000A136                            ; ---------------------------------------------------------------------------
0000A136 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A13A 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A13E 01                         byte_9B0E:	dc.b 1
0000A13F F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A144 01                         byte_9B14:	dc.b 1
0000A145 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A14A 01                         byte_9B1A:	dc.b 1
0000A14B F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A150 01                         byte_9B20:	dc.b 1
0000A151 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A156                            		even
0000A156                            		even
0000A156                            
0000A156                            ; ===========================================================================
0000A156                            ; ---------------------------------------------------------------------------
0000A156                            ; Object 25 - rings
0000A156                            ; ---------------------------------------------------------------------------
0000A156                            
0000A156                            Obj25:					; XREF: Obj_Index
0000A156 7000                       		moveq	#0,d0
0000A158 1028 0024                  		move.b	$24(a0),d0
0000A15C 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A160 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A164                            ; ===========================================================================
0000A164 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A166 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A168 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A16A 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A16C 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A16E                            ; ---------------------------------------------------------------------------
0000A16E                            ; Distances between rings (format: horizontal, vertical)
0000A16E                            ; ---------------------------------------------------------------------------
0000A16E 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A170 1800                       		dc.b $18, 0		; horizontal normal
0000A172 2000                       		dc.b $20, 0		; horizontal wide
0000A174 0010                       		dc.b 0,	$10		; vertical tight
0000A176 0018                       		dc.b 0,	$18		; vertical normal
0000A178 0020                       		dc.b 0,	$20		; vertical wide
0000A17A 1010                       		dc.b $10, $10		; diagonal
0000A17C 1818                       		dc.b $18, $18
0000A17E 2020                       		dc.b $20, $20
0000A180 F010                       		dc.b $F0, $10
0000A182 E818                       		dc.b $E8, $18
0000A184 E020                       		dc.b $E0, $20
0000A186 1008                       		dc.b $10, 8
0000A188 1810                       		dc.b $18, $10
0000A18A F008                       		dc.b $F0, 8
0000A18C E810                       		dc.b $E8, $10
0000A18E                            ; ===========================================================================
0000A18E                            
0000A18E                            Obj25_Main:				; XREF: Obj25_Index
0000A18E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A192 7000                       		moveq	#0,d0
0000A194 1028 0023                  		move.b	$23(a0),d0
0000A198 45F2 0002                  		lea	2(a2,d0.w),a2
0000A19C 1812                       		move.b	(a2),d4
0000A19E 1228 0028                  		move.b	$28(a0),d1
0000A1A2 1001                       		move.b	d1,d0
0000A1A4 0241 0007                  		andi.w	#7,d1
0000A1A8 0C41 0007                  		cmpi.w	#7,d1
0000A1AC 6600                       		bne.s	loc_9B80
0000A1AE 7206                       		moveq	#6,d1
0000A1B0                            
0000A1B0                            loc_9B80:
0000A1B0 4841                       		swap	d1
0000A1B2 323C 0000                  		move.w	#0,d1
0000A1B6 E808                       		lsr.b	#4,d0
0000A1B8 D040                       		add.w	d0,d0
0000A1BA 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A1BE 4885                       		ext.w	d5
0000A1C0 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A1C4 4886                       		ext.w	d6
0000A1C6 2248                       		movea.l	a0,a1
0000A1C8 3428 0008                  		move.w	8(a0),d2
0000A1CC 3628 000C                  		move.w	$C(a0),d3
0000A1D0 E20C                       		lsr.b	#1,d4
0000A1D2 6500                       		bcs.s	loc_9C02
0000A1D4 0892 0007                  		bclr	#7,(a2)
0000A1D8 6000                       		bra.s	loc_9BBA
0000A1DA                            ; ===========================================================================
0000A1DA                            
0000A1DA                            Obj25_MakeRings:
0000A1DA 4841                       		swap	d1
0000A1DC E20C                       		lsr.b	#1,d4
0000A1DE 6500                       		bcs.s	loc_9C02
0000A1E0 0892 0007                  		bclr	#7,(a2)
0000A1E4 6100 0000                  		bsr.w	SingleObjLoad
0000A1E8 6600                       		bne.s	loc_9C0E
0000A1EA                            
0000A1EA                            loc_9BBA:				; XREF: Obj25_Main
0000A1EA 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A1EE 5429 0024                  		addq.b	#2,$24(a1)
0000A1F2 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A1F6 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A1FC 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A200 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A208 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A20E 137C 0004 0001             		move.b	#4,1(a1)
0000A214 137C 0002 0018             		move.b	#2,$18(a1)
0000A21A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A220 137C 0008 0019             		move.b	#8,$19(a1)
0000A226 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A22C 1341 0034                  		move.b	d1,$34(a1)
0000A230                            
0000A230                            loc_9C02:
0000A230 5241                       		addq.w	#1,d1
0000A232 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A234 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A236 4841                       		swap	d1
0000A238 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A23C                            
0000A23C                            loc_9C0E:
0000A23C 0812 0000                  		btst	#0,(a2)
0000A240 6600 0000                  		bne.w	DeleteObject
0000A244                            
0000A244                            Obj25_Animate:				; XREF: Obj25_Index
0000A244 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A24A 6100 0000                  		bsr.w	DisplaySprite
0000A24E 3028 0032                  		move.w	$32(a0),d0
0000A252 0240 FF80                  		andi.w	#$FF80,d0
0000A256 3238 F700                  		move.w	($FFFFF700).w,d1
0000A25A 0441 0080                  		subi.w	#$80,d1
0000A25E 0241 FF80                  		andi.w	#$FF80,d1
0000A262 9041                       		sub.w	d1,d0
0000A264 0C40 0280                  		cmpi.w	#$280,d0
0000A268 6200                       		bhi.s	Obj25_Delete
0000A26A 4E75                       		rts	
0000A26C                            ; ===========================================================================
0000A26C                            
0000A26C                            Obj25_Collect:				; XREF: Obj25_Index
0000A26C 5428 0024                  		addq.b	#2,$24(a0)
0000A270 117C 0000 0020             		move.b	#0,$20(a0)
0000A276 117C 0001 0018             		move.b	#1,$18(a0)
0000A27C 6100 0000                  		bsr.w	CollectRing
0000A280 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A284 7000                       		moveq	#0,d0
0000A286 1028 0023                  		move.b	$23(a0),d0
0000A28A 1228 0034                  		move.b	$34(a0),d1
0000A28E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A292                            
0000A292                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A292 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A298 6100 0000                  		bsr.w	AnimateSprite
0000A29C 6000 0000                  		bra.w	DisplaySprite
0000A2A0                            ; ===========================================================================
0000A2A0                            
0000A2A0                            Obj25_Delete:				; XREF: Obj25_Index
0000A2A0 6000 0000                  		bra.w	DeleteObject
0000A2A4                            
0000A2A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A2A4                            
0000A2A4                            
0000A2A4                            CollectRing:				; XREF: Obj25_Collect
0000A2A4 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A2A8 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A2AE 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A2B2 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A2B8 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A2BA 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A2C0 6700                       		beq.s	loc_9CA4
0000A2C2 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A2C8 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A2CA 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A2D0 6600                       		bne.s	Obj25_PlaySnd
0000A2D2                            
0000A2D2                            loc_9CA4:
0000A2D2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A2D6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A2DA 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A2DE                            
0000A2DE                            Obj25_PlaySnd:
0000A2DE 4EF9 0000 15C0             		jmp	(PlaySound_Special).l
0000A2E4                            ; End of function CollectRing
0000A2E4                            
0000A2E4                            ; ===========================================================================
0000A2E4                            ; ---------------------------------------------------------------------------
0000A2E4                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A2E4                            ; ---------------------------------------------------------------------------
0000A2E4                            
0000A2E4                            Obj37:					; XREF: Obj_Index
0000A2E4 7000                       		moveq	#0,d0
0000A2E6 1028 0024                  		move.b	$24(a0),d0
0000A2EA 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A2EE 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A2F2                            ; ===========================================================================
0000A2F2 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A2F4 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A2F6 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A2F8 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A2FA 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A2FC                            ; ===========================================================================
0000A2FC                            
0000A2FC                            Obj37_CountRings:			; XREF: Obj37_Index
0000A2FC 2248                       		movea.l	a0,a1
0000A2FE 7A00                       		moveq	#0,d5
0000A300 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A304 7020                       		moveq	#32,d0
0000A306 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A308 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A30A 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A30C                            
0000A30C                            loc_9CDE:
0000A30C 5345                       		subq.w	#1,d5
0000A30E 383C 0288                  		move.w	#$288,d4
0000A312 6000                       		bra.s	Obj37_MakeRings
0000A314                            ; ===========================================================================
0000A314                            
0000A314                            Obj37_Loop:
0000A314 6100 0000                  		bsr.w	SingleObjLoad
0000A318 6600 0000                  		bne.w	Obj37_ResetCounter
0000A31C                            
0000A31C                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A31C 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A320 5429 0024                  		addq.b	#2,$24(a1)
0000A324 137C 0008 0016             		move.b	#8,$16(a1)
0000A32A 137C 0008 0017             		move.b	#8,$17(a1)
0000A330 3368 0008 0008             		move.w	8(a0),8(a1)
0000A336 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A33C 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A344 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A34A 137C 0004 0001             		move.b	#4,1(a1)
0000A350 137C 0003 0018             		move.b	#3,$18(a1)
0000A356 137C 0047 0020             		move.b	#$47,$20(a1)
0000A35C 137C 0008 0019             		move.b	#8,$19(a1)
0000A362 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A368 4A44                       		tst.w	d4
0000A36A 6B00                       		bmi.s	loc_9D62
0000A36C 3004                       		move.w	d4,d0
0000A36E 6100 88F4                  		bsr.w	CalcSine
0000A372 3404                       		move.w	d4,d2
0000A374 E04A                       		lsr.w	#8,d2
0000A376 E560                       		asl.w	d2,d0
0000A378 E561                       		asl.w	d2,d1
0000A37A 3400                       		move.w	d0,d2
0000A37C 3601                       		move.w	d1,d3
0000A37E 0604 0010                  		addi.b	#$10,d4
0000A382 6400                       		bcc.s	loc_9D62
0000A384 0444 0080                  		subi.w	#$80,d4
0000A388 6400                       		bcc.s	loc_9D62
0000A38A 383C 0288                  		move.w	#$288,d4
0000A38E                            
0000A38E                            loc_9D62:
0000A38E 3342 0010                  		move.w	d2,$10(a1)
0000A392 3343 0012                  		move.w	d3,$12(a1)
0000A396 4442                       		neg.w	d2
0000A398 4444                       		neg.w	d4
0000A39A 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A39E                            
0000A39E                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A39E 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A3A4 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A3AA 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A3B0 303C 00C6                  		move.w	#$C6,d0
0000A3B4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A3BA                            
0000A3BA                            Obj37_Bounce:				; XREF: Obj37_Index
0000A3BA 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A3C0 6100 0000                  		bsr.w	SpeedToPos
0000A3C4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A3CA 6B00                       		bmi.s	Obj37_ChkDel
0000A3CC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A3D0 D007                       		add.b	d7,d0
0000A3D2 0200 0003                  		andi.b	#3,d0
0000A3D6 6600                       		bne.s	Obj37_ChkDel
0000A3D8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A3DE 4A41                       		tst.w	d1
0000A3E0 6A00                       		bpl.s	Obj37_ChkDel
0000A3E2 D368 000C                  		add.w	d1,$C(a0)
0000A3E6 3028 0012                  		move.w	$12(a0),d0
0000A3EA E440                       		asr.w	#2,d0
0000A3EC 9168 0012                  		sub.w	d0,$12(a0)
0000A3F0 4468 0012                  		neg.w	$12(a0)
0000A3F4                            
0000A3F4                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A3F4 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A3F8 6700                       		beq.s	Obj37_Delete
0000A3FA 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A3FE 0640 00E0                  		addi.w	#$E0,d0
0000A402 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A406 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A408 6000 0000                  		bra.w	DisplaySprite
0000A40C                            ; ===========================================================================
0000A40C                            
0000A40C                            Obj37_Collect:				; XREF: Obj37_Index
0000A40C 5428 0024                  		addq.b	#2,$24(a0)
0000A410 117C 0000 0020             		move.b	#0,$20(a0)
0000A416 117C 0001 0018             		move.b	#1,$18(a0)
0000A41C 6100 FE86                  		bsr.w	CollectRing
0000A420                            
0000A420                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A420 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A426 6100 0000                  		bsr.w	AnimateSprite
0000A42A 6000 0000                  		bra.w	DisplaySprite
0000A42E                            ; ===========================================================================
0000A42E                            
0000A42E                            Obj37_Delete:				; XREF: Obj37_Index
0000A42E 6000 0000                  		bra.w	DeleteObject
0000A432                            ; ===========================================================================
0000A432                            ; ---------------------------------------------------------------------------
0000A432                            ; Object 4B - giant ring for entry to special stage
0000A432                            ; ---------------------------------------------------------------------------
0000A432                            
0000A432                            Obj4B:					; XREF: Obj_Index
0000A432 7000                       		moveq	#0,d0
0000A434 1028 0024                  		move.b	$24(a0),d0
0000A438 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A43C 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A440                            ; ===========================================================================
0000A440 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A442 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A444 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A446 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A448                            ; ===========================================================================
0000A448                            
0000A448                            Obj4B_Main:				; XREF: Obj4B_Index
0000A448 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A450 317C 2400 0002             		move.w	#$2400,2(a0)
0000A456 0028 0004 0001             		ori.b	#4,1(a0)
0000A45C 117C 0040 0019             		move.b	#$40,$19(a0)
0000A462 4A28 0001                  		tst.b	1(a0)
0000A466 6A00                       		bpl.s	Obj4B_Animate
0000A468 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A46E 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A472 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A478 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A47A 4E75                       		rts	
0000A47C                            ; ===========================================================================
0000A47C                            
0000A47C                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A47C 5428 0024                  		addq.b	#2,$24(a0)
0000A480 117C 0002 0018             		move.b	#2,$18(a0)
0000A486 117C 0052 0020             		move.b	#$52,$20(a0)
0000A48C 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A492                            
0000A492                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A492 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A498 3028 0008                  		move.w	8(a0),d0
0000A49C 0240 FF80                  		andi.w	#$FF80,d0
0000A4A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000A4A4 0441 0080                  		subi.w	#$80,d1
0000A4A8 0241 FF80                  		andi.w	#$FF80,d1
0000A4AC 9041                       		sub.w	d1,d0
0000A4AE 0C40 0280                  		cmpi.w	#$280,d0
0000A4B2 6200 0000                  		bhi.w	DeleteObject
0000A4B6 6000 0000                  		bra.w	DisplaySprite
0000A4BA                            ; ===========================================================================
0000A4BA                            
0000A4BA                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A4BA 5528 0024                  		subq.b	#2,$24(a0)
0000A4BE 117C 0000 0020             		move.b	#0,$20(a0)
0000A4C4 6100 0000                  		bsr.w	SingleObjLoad
0000A4C8 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A4CC 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A4D0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A4D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A4DC 2348 003C                  		move.l	a0,$3C(a1)
0000A4E0 3038 D008                  		move.w	($FFFFD008).w,d0
0000A4E4 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A4E8 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A4EA 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A4F0                            
0000A4F0                            Obj4B_PlaySnd:
0000A4F0 303C 00C3                  		move.w	#$C3,d0
0000A4F4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A4FA 6096                       		bra.s	Obj4B_Animate
0000A4FC                            ; ===========================================================================
0000A4FC                            
0000A4FC                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A4FC 6000 0000                  		bra.w	DeleteObject
0000A500                            ; ===========================================================================
0000A500                            ; ---------------------------------------------------------------------------
0000A500                            ; Object 7C - flash effect when	you collect the	giant ring
0000A500                            ; ---------------------------------------------------------------------------
0000A500                            
0000A500                            Obj7C:					; XREF: Obj_Index
0000A500 7000                       		moveq	#0,d0
0000A502 1028 0024                  		move.b	$24(a0),d0
0000A506 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A50A 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A50E                            ; ===========================================================================
0000A50E 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A510 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A512 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A514                            ; ===========================================================================
0000A514                            
0000A514                            Obj7C_Main:				; XREF: Obj7C_Index
0000A514 5428 0024                  		addq.b	#2,$24(a0)
0000A518 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A520 317C 2462 0002             		move.w	#$2462,2(a0)
0000A526 0028 0004 0001             		ori.b	#4,1(a0)
0000A52C 117C 0000 0018             		move.b	#0,$18(a0)
0000A532 117C 0020 0019             		move.b	#$20,$19(a0)
0000A538 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A53E                            
0000A53E                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A53E 6100                       		bsr.s	Obj7C_Collect
0000A540 3028 0008                  		move.w	8(a0),d0
0000A544 0240 FF80                  		andi.w	#$FF80,d0
0000A548 3238 F700                  		move.w	($FFFFF700).w,d1
0000A54C 0441 0080                  		subi.w	#$80,d1
0000A550 0241 FF80                  		andi.w	#$FF80,d1
0000A554 9041                       		sub.w	d1,d0
0000A556 0C40 0280                  		cmpi.w	#$280,d0
0000A55A 6200 0000                  		bhi.w	DeleteObject
0000A55E 6000 0000                  		bra.w	DisplaySprite
0000A562                            
0000A562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A562                            
0000A562                            
0000A562                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A562 5328 001E                  		subq.b	#1,$1E(a0)
0000A566 6A00                       		bpl.s	locret_9F76
0000A568 117C 0001 001E             		move.b	#1,$1E(a0)
0000A56E 5228 001A                  		addq.b	#1,$1A(a0)
0000A572 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A578 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A57A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A580 6600                       		bne.s	locret_9F76	; if not, branch
0000A582 2268 003C                  		movea.l	$3C(a0),a1
0000A586 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A58C 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A592 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A598 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A59C 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A5A0                            
0000A5A0                            locret_9F76:
0000A5A0 4E75                       		rts	
0000A5A2                            ; ===========================================================================
0000A5A2                            
0000A5A2                            Obj7C_End:				; XREF: Obj7C_Collect
0000A5A2 5428 0024                  		addq.b	#2,$24(a0)
0000A5A6 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A5AC 588F                       		addq.l	#4,sp
0000A5AE 4E75                       		rts	
0000A5B0                            ; End of function Obj7C_Collect
0000A5B0                            
0000A5B0                            ; ===========================================================================
0000A5B0                            
0000A5B0                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A5B0 6000 0000                  		bra.w	DeleteObject
0000A5B4                            ; ===========================================================================
0000A5B4                            Ani_obj25:
0000A5B4                            	include "_anim\obj25.asm"
0000A5B4                            ; ---------------------------------------------------------------------------
0000A5B4                            ; Animation script - ring
0000A5B4                            ; ---------------------------------------------------------------------------
0000A5B4 0000                       		dc.w byte_9F8C-Ani_obj25
0000A5B6 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A5BC                            		even
0000A5BC                            		even
0000A5BC                            
0000A5BC                            ; ---------------------------------------------------------------------------
0000A5BC                            ; Sprite mappings - rings
0000A5BC                            ; ---------------------------------------------------------------------------
0000A5BC                            Map_obj25:
0000A5BC                            	include "_maps\obj25.asm"
0000A5BC                            ; ---------------------------------------------------------------------------
0000A5BC                            ; Sprite mappings - rings
0000A5BC                            ; ---------------------------------------------------------------------------
0000A5BC 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A5C0 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A5C4 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A5C8 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A5CC 01                         byte_9FA2:	dc.b 1
0000A5CD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A5D2 01                         byte_9FA8:	dc.b 1
0000A5D3 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A5D8 01                         byte_9FAE:	dc.b 1
0000A5D9 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A5DE 01                         byte_9FB4:	dc.b 1
0000A5DF F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A5E4 01                         byte_9FBA:	dc.b 1
0000A5E5 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A5EA 01                         byte_9FC0:	dc.b 1
0000A5EB F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A5F0 01                         byte_9FC6:	dc.b 1
0000A5F1 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A5F6 01                         byte_9FCC:	dc.b 1
0000A5F7 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A5FC                            		even
0000A5FC                            		even
0000A5FC                            
0000A5FC                            ; ---------------------------------------------------------------------------
0000A5FC                            ; Sprite mappings - giant ring
0000A5FC                            ; ---------------------------------------------------------------------------
0000A5FC                            Map_obj4B:
0000A5FC                            	include "_maps\obj4B.asm"
0000A5FC                            ; ---------------------------------------------------------------------------
0000A5FC                            ; Sprite mappings - giant ring
0000A5FC                            ; ---------------------------------------------------------------------------
0000A5FC 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A600 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A604 0A                         byte_9FDA:	dc.b $A
0000A605 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A60A E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A60F E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A614 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A619 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A61E F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A623 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A628 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A62D 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A632 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A637 08                         byte_A00D:	dc.b 8
0000A638 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A63D E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A642 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A647 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A64C F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A651 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A656 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A65B 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A660 04                         byte_A036:	dc.b 4
0000A661 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A666 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A66B 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A670 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A675 08                         byte_A04B:	dc.b 8
0000A676 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A67B E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A680 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A685 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A68A F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A68F 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A694 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A699 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A69E                            		even
0000A69E                            		even
0000A69E                            
0000A69E                            ; ---------------------------------------------------------------------------
0000A69E                            ; Sprite mappings - flash effect when you collect the giant ring
0000A69E                            ; ---------------------------------------------------------------------------
0000A69E                            Map_obj7C:
0000A69E                            	include "_maps\obj7C.asm"
0000A69E                            ; ---------------------------------------------------------------------------
0000A69E                            ; Sprite mappings - flash effect when you collect the giant ring
0000A69E                            ; ---------------------------------------------------------------------------
0000A69E 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A6A2 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A6A6 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A6AA 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A6AE 02                         byte_A084:	dc.b 2
0000A6AF E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A6B4 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A6B9 04                         byte_A08F:	dc.b 4
0000A6BA E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A6BF E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A6C4 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A6C9 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A6CE 04                         byte_A0A4:	dc.b 4
0000A6CF E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A6D4 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A6D9 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A6DE 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A6E3 04                         byte_A0B9:	dc.b 4
0000A6E4 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A6E9 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A6EE 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A6F3 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A6F8 04                         byte_A0CE:	dc.b 4
0000A6F9 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A6FE E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A703 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A708 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A70D 04                         byte_A0E3:	dc.b 4
0000A70E E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A713 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A718 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A71D 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A722 02                         byte_A0F8:	dc.b 2
0000A723 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A728 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A72D 04                         byte_A103:	dc.b 4
0000A72E E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A733 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A738 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A73D 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A742                            		even
0000A742                            		even
0000A742                            
0000A742                            ; ===========================================================================
0000A742                            ; ---------------------------------------------------------------------------
0000A742                            ; Object 26 - monitors
0000A742                            ; ---------------------------------------------------------------------------
0000A742                            
0000A742                            Obj26:					; XREF: Obj_Index
0000A742 7000                       		moveq	#0,d0
0000A744 1028 0024                  		move.b	$24(a0),d0
0000A748 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A74C 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A750                            ; ===========================================================================
0000A750 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A752 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A754 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A756 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A758 0000                       		dc.w Obj26_Display-Obj26_Index
0000A75A                            ; ===========================================================================
0000A75A                            
0000A75A                            Obj26_Main:				; XREF: Obj26_Index
0000A75A 5428 0024                  		addq.b	#2,$24(a0)
0000A75E 117C 000E 0016             		move.b	#$E,$16(a0)
0000A764 117C 000E 0017             		move.b	#$E,$17(a0)
0000A76A 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A772 317C 0680 0002             		move.w	#$680,2(a0)
0000A778 117C 0004 0001             		move.b	#4,1(a0)
0000A77E 117C 0003 0018             		move.b	#3,$18(a0)
0000A784 117C 000F 0019             		move.b	#$F,$19(a0)
0000A78A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A78E 7000                       		moveq	#0,d0
0000A790 1028 0023                  		move.b	$23(a0),d0
0000A794 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A79A 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A7A0 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A7A2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A7A8 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A7AE 4E75                       		rts	
0000A7B0                            ; ===========================================================================
0000A7B0                            
0000A7B0                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A7B0 117C 0046 0020             		move.b	#$46,$20(a0)
0000A7B6 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A7BC                            
0000A7BC                            Obj26_Solid:				; XREF: Obj26_Index
0000A7BC 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A7C0 6700                       		beq.s	loc_A1EC	; if not, branch
0000A7C2 5500                       		subq.b	#2,d0
0000A7C4 6600                       		bne.s	Obj26_Fall
0000A7C6 7200                       		moveq	#0,d1
0000A7C8 1228 0019                  		move.b	$19(a0),d1
0000A7CC 0641 000B                  		addi.w	#$B,d1
0000A7D0 6100 D38A                  		bsr.w	ExitPlatform
0000A7D4 0829 0003 0022             		btst	#3,$22(a1)
0000A7DA 6600 0000                  		bne.w	loc_A1BC
0000A7DE 4228 0025                  		clr.b	$25(a0)
0000A7E2 6000 0000                  		bra.w	Obj26_Animate
0000A7E6                            ; ===========================================================================
0000A7E6                            
0000A7E6                            loc_A1BC:				; XREF: Obj26_Solid
0000A7E6 363C 0010                  		move.w	#$10,d3
0000A7EA 3428 0008                  		move.w	8(a0),d2
0000A7EE 6100 D8CA                  		bsr.w	MvSonicOnPtfm
0000A7F2 6000 0000                  		bra.w	Obj26_Animate
0000A7F6                            ; ===========================================================================
0000A7F6                            
0000A7F6                            Obj26_Fall:				; XREF: Obj26_Solid
0000A7F6 6100 0000                  		bsr.w	ObjectFall
0000A7FA 4EB9 0000 0000             		jsr	ObjHitFloor
0000A800 4A41                       		tst.w	d1
0000A802 6A00 0000                  		bpl.w	Obj26_Animate
0000A806 D368 000C                  		add.w	d1,$C(a0)
0000A80A 4268 0012                  		clr.w	$12(a0)
0000A80E 4228 0025                  		clr.b	$25(a0)
0000A812 6000 0000                  		bra.w	Obj26_Animate
0000A816                            ; ===========================================================================
0000A816                            
0000A816                            loc_A1EC:				; XREF: Obj26_Solid
0000A816 323C 001A                  		move.w	#$1A,d1
0000A81A 343C 000F                  		move.w	#$F,d2
0000A81E 6100 0000                  		bsr.w	Obj26_SolidSides
0000A822 6700 0000                  		beq.w	loc_A25C
0000A826 4A69 0012                  		tst.w	$12(a1)
0000A82A 6B00                       		bmi.s	loc_A20A
0000A82C 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A832 6700                       		beq.s	loc_A25C	; if yes, branch
0000A834                            
0000A834                            loc_A20A:
0000A834 4A41                       		tst.w	d1
0000A836 6A00                       		bpl.s	loc_A220
0000A838 9769 000C                  		sub.w	d3,$C(a1)
0000A83C 6100 D20C                  		bsr.w	loc_74AE
0000A840 117C 0002 0025             		move.b	#2,$25(a0)
0000A846 6000 0000                  		bra.w	Obj26_Animate
0000A84A                            ; ===========================================================================
0000A84A                            
0000A84A                            loc_A220:
0000A84A 4A40                       		tst.w	d0
0000A84C 6700 0000                  		beq.w	loc_A246
0000A850 6B00                       		bmi.s	loc_A230
0000A852 4A69 0010                  		tst.w	$10(a1)
0000A856 6B00                       		bmi.s	loc_A246
0000A858 6000                       		bra.s	loc_A236
0000A85A                            ; ===========================================================================
0000A85A                            
0000A85A                            loc_A230:
0000A85A 4A69 0010                  		tst.w	$10(a1)
0000A85E 6A00                       		bpl.s	loc_A246
0000A860                            
0000A860                            loc_A236:
0000A860 9169 0008                  		sub.w	d0,8(a1)
0000A864 337C 0000 0014             		move.w	#0,$14(a1)
0000A86A 337C 0000 0010             		move.w	#0,$10(a1)
0000A870                            
0000A870                            loc_A246:
0000A870 0829 0001 0022             		btst	#1,$22(a1)
0000A876 6600                       		bne.s	loc_A26A
0000A878 08E9 0005 0022             		bset	#5,$22(a1)
0000A87E 08E8 0005 0022             		bset	#5,$22(a0)
0000A884 6000                       		bra.s	Obj26_Animate
0000A886                            ; ===========================================================================
0000A886                            
0000A886                            loc_A25C:
0000A886 0828 0005 0022             		btst	#5,$22(a0)
0000A88C 6700                       		beq.s	Obj26_Animate
0000A88E 337C 0001 001C             		move.w	#1,$1C(a1)
0000A894                            
0000A894                            loc_A26A:
0000A894 08A8 0005 0022             		bclr	#5,$22(a0)
0000A89A 08A9 0005 0022             		bclr	#5,$22(a1)
0000A8A0                            
0000A8A0                            Obj26_Animate:				; XREF: Obj26_Index
0000A8A0 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A8A6 6100 0000                  		bsr.w	AnimateSprite
0000A8AA                            
0000A8AA                            Obj26_Display:				; XREF: Obj26_Index
0000A8AA 6100 0000                  		bsr.w	DisplaySprite
0000A8AE 3028 0008                  		move.w	8(a0),d0
0000A8B2 0240 FF80                  		andi.w	#$FF80,d0
0000A8B6 3238 F700                  		move.w	($FFFFF700).w,d1
0000A8BA 0441 0080                  		subi.w	#$80,d1
0000A8BE 0241 FF80                  		andi.w	#$FF80,d1
0000A8C2 9041                       		sub.w	d1,d0
0000A8C4 0C40 0280                  		cmpi.w	#$280,d0
0000A8C8 6200 0000                  		bhi.w	DeleteObject
0000A8CC 4E75                       		rts	
0000A8CE                            ; ===========================================================================
0000A8CE                            
0000A8CE                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A8CE 5428 0024                  		addq.b	#2,$24(a0)
0000A8D2 117C 0000 0020             		move.b	#0,$20(a0)
0000A8D8 6100 0000                  		bsr.w	SingleObjLoad
0000A8DC 6600                       		bne.s	Obj26_Explode
0000A8DE 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A8E2 3368 0008 0008             		move.w	8(a0),8(a1)
0000A8E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A8EE 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A8F4 7400                       		moveq	#0,d2	; GMZ
0000A8F6 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A8F8                            
0000A8F8                            Obj26_Explode:
0000A8F8 6100 0000                  		bsr.w	SingleObjLoad
0000A8FC 6600                       		bne.s	Obj26_SetBroken
0000A8FE 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A902 5429 0024                  		addq.b	#2,$24(a1)
0000A906 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A90A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A910 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A916                            
0000A916                            Obj26_NextExplosion:
0000A916 5802                       		addq.b	#4,d2
0000A918 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A91C                            
0000A91C                            Obj26_SetBroken:
0000A91C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A920 7000                       		moveq	#0,d0
0000A922 1028 0023                  		move.b	$23(a0),d0
0000A926 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A92C 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A932 6000 0000                  		bra.w	DisplaySprite
0000A936                            ; ===========================================================================
0000A936                            ; ---------------------------------------------------------------------------
0000A936                            ; Object 2E - contents of monitors
0000A936                            ; ---------------------------------------------------------------------------
0000A936                            
0000A936                            Obj2E:					; XREF: Obj_Index
0000A936 7000                       		moveq	#0,d0
0000A938 1028 0024                  		move.b	$24(a0),d0
0000A93C 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A940 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A944 6000 0000                  		bra.w	DisplaySprite
0000A948                            ; ===========================================================================
0000A948 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A94A 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A94C 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A94E                            ; ===========================================================================
0000A94E                            
0000A94E                            Obj2E_Main:				; XREF: Obj2E_Index
0000A94E 5428 0024                  		addq.b	#2,$24(a0)
0000A952 317C 0680 0002             		move.w	#$680,2(a0)
0000A958 117C 0024 0001             		move.b	#$24,1(a0)
0000A95E 117C 0003 0018             		move.b	#3,$18(a0)
0000A964 117C 0008 0019             		move.b	#8,$19(a0)
0000A96A 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A970 7000                       		moveq	#0,d0
0000A972 1028 001C                  		move.b	$1C(a0),d0
0000A976 5400                       		addq.b	#2,d0
0000A978 1140 001A                  		move.b	d0,$1A(a0)
0000A97C 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A982 D000                       		add.b	d0,d0
0000A984 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A988 5249                       		addq.w	#1,a1
0000A98A 2149 0004                  		move.l	a1,4(a0)
0000A98E                            
0000A98E                            Obj2E_Move:				; XREF: Obj2E_Index
0000A98E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A992 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A996 6100 0000                  		bsr.w	SpeedToPos
0000A99A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A9A0 4E75                       		rts	
0000A9A2                            ; ===========================================================================
0000A9A2                            
0000A9A2                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A9A2 5428 0024                  		addq.b	#2,$24(a0)
0000A9A6 317C 001D 001E             		move.w	#29,$1E(a0)
0000A9AC 1028 001C                  		move.b	$1C(a0),d0
0000A9B0 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A9B4 6600                       		bne.s	Obj2E_ChkSonic
0000A9B6 4E75                       		rts			; Eggman monitor does nothing
0000A9B8                            ; ===========================================================================
0000A9B8                            
0000A9B8                            Obj2E_ChkSonic:
0000A9B8 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A9BC 6600                       		bne.s	Obj2E_ChkShoes
0000A9BE                            
0000A9BE                            ExtraLife:
0000A9BE 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A9C2 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A9C6 303C 0088                  		move.w	#$88,d0
0000A9CA 4EF9 0000 15BA             		jmp	(PlaySound).l	; play extra life music
0000A9D0                            ; ===========================================================================
0000A9D0                            
0000A9D0                            Obj2E_ChkShoes:
0000A9D0 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A9D4 6600                       		bne.s	Obj2E_ChkShield
0000A9D6 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A9DC 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A9E2 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A9E8 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A9EE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A9F4 303C 00E2                  		move.w	#$E2,d0
0000A9F8 4EF9 0000 15BA             		jmp	(PlaySound).l	; Speed	up the music
0000A9FE                            ; ===========================================================================
0000A9FE                            
0000A9FE                            Obj2E_ChkShield:
0000A9FE 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AA02 6600                       		bne.s	Obj2E_ChkInvinc
0000AA04 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AA0A 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AA10 303C 00AF                  		move.w	#$AF,d0
0000AA14 4EF9 0000 15BA             		jmp	(PlaySound).l	; play shield sound
0000AA1A                            ; ===========================================================================
0000AA1A                            
0000AA1A                            Obj2E_ChkInvinc:
0000AA1A 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AA1E 6600                       		bne.s	Obj2E_ChkRings
0000AA20 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AA26 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AA2C 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AA32 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AA38 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AA3E 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AA44 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AA4A 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AA50 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AA56 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AA5C 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AA60 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AA62 303C 0087                  		move.w	#$87,d0
0000AA66 4EF9 0000 15BA             		jmp	(PlaySound).l	; play invincibility music
0000AA6C                            ; ===========================================================================
0000AA6C                            
0000AA6C                            Obj2E_NoMusic:
0000AA6C 4E75                       		rts	
0000AA6E                            ; ===========================================================================
0000AA6E                            
0000AA6E                            Obj2E_ChkRings:
0000AA6E 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AA72 6600                       		bne.s	Obj2E_ChkS
0000AA74 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AA7A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AA80 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AA86 6500                       		bcs.s	Obj2E_RingSound
0000AA88 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AA8E 6700 FF2E                  		beq.w	ExtraLife
0000AA92 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AA98 6500                       		bcs.s	Obj2E_RingSound
0000AA9A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AAA0 6700 FF1C                  		beq.w	ExtraLife
0000AAA4                            
0000AAA4                            Obj2E_RingSound:
0000AAA4 303C 00B5                  		move.w	#$B5,d0
0000AAA8 4EF9 0000 15BA             		jmp	(PlaySound).l	; play ring sound
0000AAAE                            ; ===========================================================================
0000AAAE                            
0000AAAE                            Obj2E_ChkS:
0000AAAE 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AAB2 6600                       		bne.s	Obj2E_ChkEnd
0000AAB4                            		; nop	
0000AAB4 7201                       		moveq	#1,d1
0000AAB6 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AABA                            
0000AABA                            Obj2E_ChkEnd:
0000AABA 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AABC                            ; ===========================================================================
0000AABC                            
0000AABC                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AABC 5368 001E                  		subq.w	#1,$1E(a0)
0000AAC0 6B00 0000                  		bmi.w	DeleteObject
0000AAC4 4E75                       		rts	
0000AAC6                            ; ---------------------------------------------------------------------------
0000AAC6                            ; Subroutine to	make the sides of a monitor solid
0000AAC6                            ; ---------------------------------------------------------------------------
0000AAC6                            
0000AAC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AAC6                            
0000AAC6                            
0000AAC6                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AAC6 43F8 D000                  		lea	($FFFFD000).w,a1
0000AACA 3029 0008                  		move.w	8(a1),d0
0000AACE 9068 0008                  		sub.w	8(a0),d0
0000AAD2 D041                       		add.w	d1,d0
0000AAD4 6B00                       		bmi.s	loc_A4E6
0000AAD6 3601                       		move.w	d1,d3
0000AAD8 D643                       		add.w	d3,d3
0000AADA B043                       		cmp.w	d3,d0
0000AADC 6200                       		bhi.s	loc_A4E6
0000AADE 1629 0016                  		move.b	$16(a1),d3
0000AAE2 4883                       		ext.w	d3
0000AAE4 D443                       		add.w	d3,d2
0000AAE6 3629 000C                  		move.w	$C(a1),d3
0000AAEA 9668 000C                  		sub.w	$C(a0),d3
0000AAEE D642                       		add.w	d2,d3
0000AAF0 6B00                       		bmi.s	loc_A4E6
0000AAF2 D442                       		add.w	d2,d2
0000AAF4 B642                       		cmp.w	d2,d3
0000AAF6 6400                       		bcc.s	loc_A4E6
0000AAF8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AAFC 6B00                       		bmi.s	loc_A4E6
0000AAFE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AB04 6400                       		bcc.s	loc_A4E6
0000AB06 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AB0A 6600                       		bne.s	loc_A4E6
0000AB0C B240                       		cmp.w	d0,d1
0000AB0E 6400                       		bcc.s	loc_A4DC
0000AB10 D241                       		add.w	d1,d1
0000AB12 9041                       		sub.w	d1,d0
0000AB14                            
0000AB14                            loc_A4DC:
0000AB14 0C43 0010                  		cmpi.w	#$10,d3
0000AB18 6500                       		bcs.s	loc_A4EA
0000AB1A                            
0000AB1A                            loc_A4E2:
0000AB1A 7201                       		moveq	#1,d1
0000AB1C 4E75                       		rts	
0000AB1E                            ; ===========================================================================
0000AB1E                            
0000AB1E                            loc_A4E6:
0000AB1E 7200                       		moveq	#0,d1
0000AB20 4E75                       		rts	
0000AB22                            ; ===========================================================================
0000AB22                            
0000AB22                            loc_A4EA:
0000AB22 7200                       		moveq	#0,d1
0000AB24 1228 0019                  		move.b	$19(a0),d1
0000AB28 5841                       		addq.w	#4,d1
0000AB2A 3401                       		move.w	d1,d2
0000AB2C D442                       		add.w	d2,d2
0000AB2E D269 0008                  		add.w	8(a1),d1
0000AB32 9268 0008                  		sub.w	8(a0),d1
0000AB36 6BE2                       		bmi.s	loc_A4E2
0000AB38 B242                       		cmp.w	d2,d1
0000AB3A 64DE                       		bcc.s	loc_A4E2
0000AB3C 72FF                       		moveq	#-1,d1
0000AB3E 4E75                       		rts	
0000AB40                            ; End of function Obj26_SolidSides
0000AB40                            
0000AB40                            ; ===========================================================================
0000AB40                            Ani_obj26:
0000AB40                            	include "_anim\obj26.asm"
0000AB40                            ; ---------------------------------------------------------------------------
0000AB40                            ; Animation script - monitors
0000AB40                            ; ---------------------------------------------------------------------------
0000AB40 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AB46 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AB4C 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AB52 0000                       		dc.w byte_A582-Ani_obj26
0000AB54 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AB5A 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AB66 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AB72 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AB7E 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AB8A 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AB96 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000ABA2 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000ABAE 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000ABBA 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000ABC2                            		even
0000ABC2                            		even
0000ABC2                            
0000ABC2                            ; ---------------------------------------------------------------------------
0000ABC2                            ; Sprite mappings - monitors
0000ABC2                            ; ---------------------------------------------------------------------------
0000ABC2                            Map_obj26:
0000ABC2                            	include "_maps\obj26.asm"
0000ABC2                            ; ================================================================================
0000ABC2                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000ABC2                            ; ================================================================================
0000ABC2                            
0000ABC2                            DATAY1U343IF3L:
0000ABC2 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000ABC6 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000ABCA 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000ABCE 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000ABD2 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000ABD6 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000ABDA 05                         DATAY1U343IF3L_0: dc.b $5
0000ABDB E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ABE0 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ABE5 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABEA 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABEF 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABF4 06                         DATAY1U343IF3L_1: dc.b $6
0000ABF5 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000ABFA E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ABFF 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC04 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC09 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC0E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC13 05                         DATAY1U343IF3L_2: dc.b $5
0000AC14 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC19 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC1E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC23 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC28 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC2D 05                         DATAY1U343IF3L_3: dc.b $5
0000AC2E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC33 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC38 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC3D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC42 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC47 06                         DATAY1U343IF3L_4: dc.b $6
0000AC48 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AC4D E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC52 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC57 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC5C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC61 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC66 06                         DATAY1U343IF3L_5: dc.b $6
0000AC67 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AC6C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC71 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC76 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC7B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC80 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC85 06                         DATAY1U343IF3L_6: dc.b $6
0000AC86 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AC8B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC90 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC95 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC9A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC9F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACA4 06                         DATAY1U343IF3L_7: dc.b $6
0000ACA5 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000ACAA E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACAF 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACB4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACB9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACBE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACC3 06                         DATAY1U343IF3L_8: dc.b $6
0000ACC4 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000ACC9 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACCE 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACD3 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACD8 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACDD 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACE2 06                         DATAY1U343IF3L_9: dc.b $6
0000ACE3 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000ACE8 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACED 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACF2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACF7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACFC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD01 05                         DATAY1U343IF3L_A: dc.b $5
0000AD02 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD07 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD0C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD11 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD16 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD1B 01                         DATAY1U343IF3L_B: dc.b $1
0000AD1C FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AD22 00                         	even
0000AD22 00                         	even
0000AD22                            
0000AD22                            ; ===========================================================================
0000AD22                            ; ---------------------------------------------------------------------------
0000AD22                            ; Object 0E - Sonic on the title screen
0000AD22                            ; ---------------------------------------------------------------------------
0000AD22                            
0000AD22                            Obj0E:					; XREF: Obj_Index
0000AD22 7000                       		moveq	#0,d0
0000AD24 1028 0024                  		move.b	$24(a0),d0
0000AD28 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AD2C 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AD30                            ; ===========================================================================
0000AD30 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AD32 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AD34 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AD36 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AD38                            ; ===========================================================================
0000AD38                            
0000AD38                            Obj0E_Main:				; XREF: Obj0E_Index
0000AD38 5428 0024                  		addq.b	#2,$24(a0)
0000AD3C 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AD42 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AD48 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AD50 317C 2300 0002             		move.w	#$2300,2(a0)
0000AD56 117C 0001 0018             		move.b	#1,$18(a0)
0000AD5C 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AD62 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AD68 6100 0000                  		bsr.w	AnimateSprite
0000AD6C                            
0000AD6C                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AD6C 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AD70 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AD72 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AD76 6000 0000                  		bra.w	DisplaySprite
0000AD7A                            ; ===========================================================================
0000AD7A                            
0000AD7A                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AD7A 4E75                       		rts	
0000AD7C                            ; ===========================================================================
0000AD7C                            
0000AD7C                            Obj0E_Move:				; XREF: Obj0E_Index
0000AD7C 5168 000A                  		subq.w	#8,$A(a0)
0000AD80 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AD86 6600                       		bne.s	Obj0E_Display
0000AD88 5428 0024                  		addq.b	#2,$24(a0)
0000AD8C                            
0000AD8C                            Obj0E_Display:
0000AD8C 6000 0000                  		bra.w	DisplaySprite
0000AD90                            ; ===========================================================================
0000AD90 4E75                       		rts	
0000AD92                            ; ===========================================================================
0000AD92                            
0000AD92                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AD92 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AD98 6100 0000                  		bsr.w	AnimateSprite
0000AD9C 6000 0000                  		bra.w	DisplaySprite
0000ADA0                            ; ===========================================================================
0000ADA0 4E75                       		rts	
0000ADA2                            ; ===========================================================================
0000ADA2                            ; ---------------------------------------------------------------------------
0000ADA2                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000ADA2                            ; ---------------------------------------------------------------------------
0000ADA2                            
0000ADA2                            Obj0F:					; XREF: Obj_Index
0000ADA2 7000                       		moveq	#0,d0
0000ADA4 1028 0024                  		move.b	$24(a0),d0
0000ADA8 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000ADAC 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000ADB0 6000 0000                  		bra.w	DisplaySprite
0000ADB4                            ; ===========================================================================
0000ADB4 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000ADB6 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000ADB8 0000                       		dc.w locret_A6F8-Obj0F_Index
0000ADBA                            ; ===========================================================================
0000ADBA                            
0000ADBA                            Obj0F_Main:				; XREF: Obj0F_Index
0000ADBA 5428 0024                  		addq.b	#2,$24(a0)
0000ADBE 317C 00D0 0008             		move.w	#$D0,8(a0)
0000ADC4 317C 0130 000A             		move.w	#$130,$A(a0)
0000ADCA 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000ADD2 317C 0200 0002             		move.w	#$200,2(a0)
0000ADD8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000ADDE 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000ADE0 5428 0024                  		addq.b	#2,$24(a0)
0000ADE4 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000ADEA 6600                       		bne.s	locret_A6F8	; if not, branch
0000ADEC 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000ADF2 317C 0170 0008             		move.w	#$170,8(a0)
0000ADF8 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000ADFE                            
0000ADFE                            locret_A6F8:				; XREF: Obj0F_Index
0000ADFE 4E75                       		rts	
0000AE00                            ; ===========================================================================
0000AE00                            
0000AE00                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AE00 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AE06 6000 0000                  		bra.w	AnimateSprite
0000AE0A                            ; ===========================================================================
0000AE0A                            Ani_obj0E:
0000AE0A                            	include "_anim\obj0E.asm"
0000AE0A                            ; ---------------------------------------------------------------------------
0000AE0A                            ; Animation script - Sonic on the title screen
0000AE0A                            ; ---------------------------------------------------------------------------
0000AE0A 0000                       		dc.w byte_A706-Ani_obj0E
0000AE0C 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AE18                            		even
0000AE18                            		even
0000AE18                            
0000AE18                            Ani_obj0F:
0000AE18                            	include "_anim\obj0F.asm"
0000AE18                            ; ---------------------------------------------------------------------------
0000AE18                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AE18                            ; ---------------------------------------------------------------------------
0000AE18 0000                       		dc.w byte_A714-Ani_obj0F
0000AE1A 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AE1E                            		even
0000AE1E                            		even
0000AE1E                            
0000AE1E                            ; ---------------------------------------------------------------------------
0000AE1E                            ; Subroutine to	animate	a sprite using an animation script
0000AE1E                            ; ---------------------------------------------------------------------------
0000AE1E                            
0000AE1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE1E                            
0000AE1E                            
0000AE1E                            AnimateSprite:
0000AE1E 7000                       		moveq	#0,d0
0000AE20 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AE24 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AE28 6700                       		beq.s	Anim_Run	; if not, branch
0000AE2A 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AE2E 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AE34 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AE3A                            
0000AE3A                            Anim_Run:
0000AE3A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AE3E 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AE40 D040                       		add.w	d0,d0
0000AE42 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AE46 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AE4A 7200                       		moveq	#0,d1
0000AE4C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AE50 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AE54 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AE56                            
0000AE56                            Anim_Next:
0000AE56 1200                       		move.b	d0,d1
0000AE58 0200 001F                  		andi.b	#$1F,d0
0000AE5C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AE60 1028 0022                  		move.b	$22(a0),d0
0000AE64 E719                       		rol.b	#3,d1
0000AE66 B101                       		eor.b	d0,d1
0000AE68 0201 0003                  		andi.b	#3,d1
0000AE6C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AE72 8328 0001                  		or.b	d1,1(a0)
0000AE76 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AE7A                            
0000AE7A                            Anim_Wait:
0000AE7A 4E75                       		rts	
0000AE7C                            ; ===========================================================================
0000AE7C                            
0000AE7C                            Anim_End_FF:
0000AE7C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AE7E 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AE80 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AE86 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AE8A 60CA                       		bra.s	Anim_Next
0000AE8C                            ; ===========================================================================
0000AE8C                            
0000AE8C                            Anim_End_FE:
0000AE8C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AE8E 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AE90 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AE94 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AE98 9200                       		sub.b	d0,d1
0000AE9A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AE9E 60B6                       		bra.s	Anim_Next
0000AEA0                            ; ===========================================================================
0000AEA0                            
0000AEA0                            Anim_End_FD:
0000AEA0 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AEA2 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AEA4 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AEAA                            
0000AEAA                            Anim_End_FC:
0000AEAA 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AEAC 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AEAE 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AEB2                            
0000AEB2                            Anim_End_FB:
0000AEB2 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AEB4 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AEB6 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AEBC 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AEC0                            
0000AEC0                            Anim_End_FA:
0000AEC0 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AEC2 6600                       		bne.s	Anim_End	; if not, branch
0000AEC4 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AEC8                            
0000AEC8                            Anim_End:
0000AEC8 4E75                       		rts	
0000AECA                            ; End of function AnimateSprite
0000AECA                            
0000AECA                            ; ===========================================================================
0000AECA                            ; ---------------------------------------------------------------------------
0000AECA                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AECA                            ; ---------------------------------------------------------------------------
0000AECA                            Map_obj0F:
0000AECA                            	include "_maps\obj0F.asm"
0000AECA                            ; ---------------------------------------------------------------------------
0000AECA                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AECA                            ; ---------------------------------------------------------------------------
0000AECA 0000                       		dc.w byte_A7CD-Map_obj0F
0000AECC 0000                       		dc.w byte_A7CC-Map_obj0F
0000AECE 0000                       		dc.w byte_A7EB-Map_obj0F
0000AED0 0000                       		dc.w byte_A882-Map_obj0F
0000AED2 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AED3 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AED8 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AEDD 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AEE2 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AEE7 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AEEC 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AEF1 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AEF2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AEF7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AEFC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF01 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF06 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF0B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF10 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF15 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF1A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF1F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF24 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF29 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF2E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF33 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF38 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF3D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF42 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF47 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF4C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF51 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF56 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF5B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF60 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF65 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF6A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF6F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF74 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF79 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF7E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF83 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF88 01                         byte_A882:	dc.b 1			; "TM"
0000AF89 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AF8E                            		even
0000AF8E                            		even
0000AF8E                            
0000AF8E                            ; ---------------------------------------------------------------------------
0000AF8E                            ; Sprite mappings - Sonic on the title screen
0000AF8E                            ; ---------------------------------------------------------------------------
0000AF8E                            Map_obj0E:
0000AF8E                            	include "_maps\obj0E.asm"
0000AF8E                            ; ================================================================================
0000AF8E                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000AF8E                            ; ================================================================================
0000AF8E                            
0000AF8E                            DATAGKI0HYDQBXP:
0000AF8E 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000AF92 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000AF96 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000AF9A 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000AF9E 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000AF9F 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000AFA4 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000AFA9 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000AFAE 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000AFB3 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000AFB8 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000AFBD 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000AFC2 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000AFC7 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000AFC8 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000AFCD 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000AFD2 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000AFD7 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000AFDC 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000AFE1 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000AFE6 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000AFEB 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000AFF0 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000AFF5 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000AFFA 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000AFFF 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B000 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B005 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B00A F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B00F 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B014 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B019 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B01E 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B023 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B028 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B02D 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B032 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B037 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B038 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B03D F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B042 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B047 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B04C 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B051 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B056 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B05B 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B060 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B065 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B06A 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B06B F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B070 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B075 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B07A 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B07F 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B084 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B089 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B08E 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B093 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B098 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B09D 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B0A2 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B0A7 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B0AC 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B0B1 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B0B6 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B0BB 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B0BC 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B0C1 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B0C6 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B0CB 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B0D0 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B0D5 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B0DA 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B0DF EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B0E4 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B0E9 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B0EE 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B0F3 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B0F4 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B0F9 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B0FE 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B103 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B108 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B10D 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B112 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B117 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B11C 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B121 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B126 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B12B 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B130 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B135 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B13A 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B13F 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B140 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B145 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B14A 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B14F EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B154 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B159 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B15E EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B163 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B168 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B16D EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B172 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B177 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B17C EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B181 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B186 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B18C 00                         	even
0000B18C 00                         	even
0000B18C                            
0000B18C                            ; ===========================================================================
0000B18C                            ; ---------------------------------------------------------------------------
0000B18C                            ; Object 2B - Chopper enemy (GHZ)
0000B18C                            ; ---------------------------------------------------------------------------
0000B18C                            
0000B18C                            Obj2B:					; XREF: Obj_Index
0000B18C 7000                       		moveq	#0,d0
0000B18E 1028 0024                  		move.b	$24(a0),d0
0000B192 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B196 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B19A 6000 0000                  		bra.w	MarkObjGone
0000B19E                            ; ===========================================================================
0000B19E 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B1A0 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B1A2                            ; ===========================================================================
0000B1A2                            
0000B1A2                            Obj2B_Main:				; XREF: Obj2B_Index
0000B1A2 5428 0024                  		addq.b	#2,$24(a0)
0000B1A6 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B1AE 317C 047B 0002             		move.w	#$47B,2(a0)
0000B1B4 117C 0004 0001             		move.b	#4,1(a0)
0000B1BA 117C 0004 0018             		move.b	#4,$18(a0)
0000B1C0 117C 0009 0020             		move.b	#9,$20(a0)
0000B1C6 117C 0010 0019             		move.b	#$10,$19(a0)
0000B1CC 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B1D2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B1D8                            
0000B1D8                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B1D8 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B1DE 6100 FC3E                  		bsr.w	AnimateSprite
0000B1E2 6100 0000                  		bsr.w	SpeedToPos
0000B1E6 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B1EC 3028 0030                  		move.w	$30(a0),d0
0000B1F0 B068 000C                  		cmp.w	$C(a0),d0
0000B1F4 6400                       		bcc.s	Obj2B_ChgAni
0000B1F6 3140 000C                  		move.w	d0,$C(a0)
0000B1FA 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B200                            
0000B200                            Obj2B_ChgAni:
0000B200 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B206 0440 00C0                  		subi.w	#$C0,d0
0000B20A B068 000C                  		cmp.w	$C(a0),d0
0000B20E 6400                       		bcc.s	locret_ABB6
0000B210 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B216 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B21A 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B21C 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B222                            
0000B222                            locret_ABB6:
0000B222 4E75                       		rts	
0000B224                            ; ===========================================================================
0000B224                            Ani_obj2B:
0000B224                            	include "_anim\obj2B.asm"
0000B224                            ; ---------------------------------------------------------------------------
0000B224                            ; Animation script - Chopper enemy
0000B224                            ; ---------------------------------------------------------------------------
0000B224 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B226 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B228 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B22A 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B22E 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B232 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B236 00                         		even
0000B236 00                         		even
0000B236                            
0000B236                            ; ---------------------------------------------------------------------------
0000B236                            ; Sprite mappings - Chopper enemy (GHZ)
0000B236                            ; ---------------------------------------------------------------------------
0000B236                            Map_obj2B:
0000B236                            	include "_maps\obj2B.asm"
0000B236                            Map_1ff1:
0000B236 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B238 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B23A 02                         Map_1ff1_4: 	dc.b $2
0000B23B E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B240 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B245 02                         Map_1ff1_F: 	dc.b $2
0000B246 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B24B 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B250                            	even
0000B250                            	even
0000B250                            
0000B250                            ; ===========================================================================
0000B250                            ; ---------------------------------------------------------------------------
0000B250                            ; Object 2C - Jaws enemy (LZ)
0000B250                            ; ---------------------------------------------------------------------------
0000B250                            
0000B250                            Obj2C:					; XREF: Obj_Index
0000B250 7000                       		moveq	#0,d0
0000B252 1028 0024                  		move.b	$24(a0),d0
0000B256 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B25A 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B25E                            ; ===========================================================================
0000B25E 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B260 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B262                            ; ===========================================================================
0000B262                            
0000B262                            Obj2C_Main:				; XREF: Obj2C_Index
0000B262 5428 0024                  		addq.b	#2,$24(a0)
0000B266 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B26E 317C 2486 0002             		move.w	#$2486,2(a0)
0000B274 0028 0004 0001             		ori.b	#4,1(a0)
0000B27A 117C 000A 0020             		move.b	#$A,$20(a0)
0000B280 117C 0004 0018             		move.b	#4,$18(a0)
0000B286 117C 0010 0019             		move.b	#$10,$19(a0)
0000B28C 7000                       		moveq	#0,d0
0000B28E 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B292 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B294 5340                       		subq.w	#1,d0
0000B296 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B29A 3140 0032                  		move.w	d0,$32(a0)
0000B29E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B2A4 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B2AA 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B2AC 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B2B0                            
0000B2B0                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B2B0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B2B4 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B2B6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B2BC 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B2C0 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B2C6 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B2CC                            
0000B2CC                            Obj2C_Animate:
0000B2CC 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B2D2 6100 FB4A                  		bsr.w	AnimateSprite
0000B2D6 6100 0000                  		bsr.w	SpeedToPos
0000B2DA 6000 0000                  		bra.w	MarkObjGone
0000B2DE                            ; ===========================================================================
0000B2DE                            Ani_obj2C:
0000B2DE                            	include "_anim\obj2C.asm"
0000B2DE                            ; ---------------------------------------------------------------------------
0000B2DE                            ; Animation script - Jaws enemy
0000B2DE                            ; ---------------------------------------------------------------------------
0000B2DE 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B2E0 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B2E6                            		even
0000B2E6                            		even
0000B2E6                            
0000B2E6                            ; ---------------------------------------------------------------------------
0000B2E6                            ; Sprite mappings - Jaws enemy (LZ)
0000B2E6                            ; ---------------------------------------------------------------------------
0000B2E6                            Map_obj2C:
0000B2E6                            	include "_maps\obj2C.asm"
0000B2E6                            ; ---------------------------------------------------------------------------
0000B2E6                            ; Sprite mappings - Jaws enemy (LZ)
0000B2E6                            ; ---------------------------------------------------------------------------
0000B2E6 0000                       		dc.w byte_AC78-Map_obj2C
0000B2E8 0000                       		dc.w byte_AC83-Map_obj2C
0000B2EA 0000                       		dc.w byte_AC8E-Map_obj2C
0000B2EC 0000                       		dc.w byte_AC99-Map_obj2C
0000B2EE 02                         byte_AC78:	dc.b 2
0000B2EF F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B2F4 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B2F9 02                         byte_AC83:	dc.b 2
0000B2FA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B2FF F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B304 02                         byte_AC8E:	dc.b 2
0000B305 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B30A F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B30F 02                         byte_AC99:	dc.b 2
0000B310 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B315 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B31A                            		even
0000B31A                            		even
0000B31A                            
0000B31A                            ; ===========================================================================
0000B31A                            ; ---------------------------------------------------------------------------
0000B31A                            ; Object 2D - Burrobot enemy (LZ)
0000B31A                            ; ---------------------------------------------------------------------------
0000B31A                            
0000B31A                            Obj2D:					; XREF: Obj_Index
0000B31A 7000                       		moveq	#0,d0
0000B31C 1028 0024                  		move.b	$24(a0),d0
0000B320 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B324 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B328                            ; ===========================================================================
0000B328 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B32A 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B32C                            ; ===========================================================================
0000B32C                            
0000B32C                            Obj2D_Main:				; XREF: Obj2D_Index
0000B32C 5428 0024                  		addq.b	#2,$24(a0)
0000B330 117C 0013 0016             		move.b	#$13,$16(a0)
0000B336 117C 0008 0017             		move.b	#8,$17(a0)
0000B33C 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B344 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B34A 0028 0004 0001             		ori.b	#4,1(a0)
0000B350 117C 0004 0018             		move.b	#4,$18(a0)
0000B356 117C 0005 0020             		move.b	#5,$20(a0)
0000B35C 117C 000C 0019             		move.b	#$C,$19(a0)
0000B362 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B366 117C 0002 001C             		move.b	#2,$1C(a0)
0000B36C                            
0000B36C                            Obj2D_Action:				; XREF: Obj2D_Index
0000B36C 7000                       		moveq	#0,d0
0000B36E 1028 0025                  		move.b	$25(a0),d0
0000B372 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B376 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B37A 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B380 6100 FA9C                  		bsr.w	AnimateSprite
0000B384 6000 0000                  		bra.w	MarkObjGone
0000B388                            ; ===========================================================================
0000B388 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B38A 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B38C 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B38E 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B390                            ; ===========================================================================
0000B390                            
0000B390                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B390 5368 0030                  		subq.w	#1,$30(a0)
0000B394 6A00                       		bpl.s	locret_AD42
0000B396 5428 0025                  		addq.b	#2,$25(a0)
0000B39A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B3A0 317C 0080 0010             		move.w	#$80,$10(a0)
0000B3A6 117C 0001 001C             		move.b	#1,$1C(a0)
0000B3AC 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B3B2 6700                       		beq.s	locret_AD42
0000B3B4 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B3B8                            
0000B3B8                            locret_AD42:
0000B3B8 4E75                       		rts	
0000B3BA                            ; ===========================================================================
0000B3BA                            
0000B3BA                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B3BA 5368 0030                  		subq.w	#1,$30(a0)
0000B3BE 6B00                       		bmi.s	loc_AD84
0000B3C0 6100 0000                  		bsr.w	SpeedToPos
0000B3C4 0868 0000 0032             		bchg	#0,$32(a0)
0000B3CA 6600                       		bne.s	loc_AD78
0000B3CC 3628 0008                  		move.w	8(a0),d3
0000B3D0 0643 000C                  		addi.w	#$C,d3
0000B3D4 0828 0000 0022             		btst	#0,$22(a0)
0000B3DA 6600                       		bne.s	loc_AD6A
0000B3DC 0443 0018                  		subi.w	#$18,d3
0000B3E0                            
0000B3E0                            loc_AD6A:
0000B3E0 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B3E6 0C41 000C                  		cmpi.w	#$C,d1
0000B3EA 6C00                       		bge.s	loc_AD84
0000B3EC 4E75                       		rts	
0000B3EE                            ; ===========================================================================
0000B3EE                            
0000B3EE                            loc_AD78:				; XREF: Obj2D_Move
0000B3EE 4EB9 0000 0000             		jsr	ObjHitFloor
0000B3F4 D368 000C                  		add.w	d1,$C(a0)
0000B3F8 4E75                       		rts	
0000B3FA                            ; ===========================================================================
0000B3FA                            
0000B3FA                            loc_AD84:				; XREF: Obj2D_Move
0000B3FA 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B400 6700                       		beq.s	loc_ADA4
0000B402 5528 0025                  		subq.b	#2,$25(a0)
0000B406 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B40C 317C 0000 0010             		move.w	#0,$10(a0)
0000B412 117C 0000 001C             		move.b	#0,$1C(a0)
0000B418 4E75                       		rts	
0000B41A                            ; ===========================================================================
0000B41A                            
0000B41A                            loc_ADA4:
0000B41A 5428 0025                  		addq.b	#2,$25(a0)
0000B41E 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B424 117C 0002 001C             		move.b	#2,$1C(a0)
0000B42A 4E75                       		rts	
0000B42C                            ; ===========================================================================
0000B42C                            
0000B42C                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B42C 6100 0000                  		bsr.w	SpeedToPos
0000B430 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B436 6B00                       		bmi.s	locret_ADF0
0000B438 117C 0003 001C             		move.b	#3,$1C(a0)
0000B43E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B444 4A41                       		tst.w	d1
0000B446 6A00                       		bpl.s	locret_ADF0
0000B448 D368 000C                  		add.w	d1,$C(a0)
0000B44C 317C 0000 0012             		move.w	#0,$12(a0)
0000B452 117C 0001 001C             		move.b	#1,$1C(a0)
0000B458 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B45E 5528 0025                  		subq.b	#2,$25(a0)
0000B462 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B466                            
0000B466                            locret_ADF0:
0000B466 4E75                       		rts	
0000B468                            ; ===========================================================================
0000B468                            
0000B468                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B468 343C 0060                  		move.w	#$60,d2
0000B46C 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B470 6400                       		bcc.s	locret_AE20
0000B472 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B476 9068 000C                  		sub.w	$C(a0),d0
0000B47A 6400                       		bcc.s	locret_AE20
0000B47C 0C40 FF80                  		cmpi.w	#-$80,d0
0000B480 6500                       		bcs.s	locret_AE20
0000B482 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B486 6600                       		bne.s	locret_AE20
0000B488 5528 0025                  		subq.b	#2,$25(a0)
0000B48C 3141 0010                  		move.w	d1,$10(a0)
0000B490 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B496                            
0000B496                            locret_AE20:
0000B496 4E75                       		rts	
0000B498                            
0000B498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B498                            
0000B498                            
0000B498                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B498 323C 0080                  		move.w	#$80,d1
0000B49C 08E8 0000 0022             		bset	#0,$22(a0)
0000B4A2 3038 D008                  		move.w	($FFFFD008).w,d0
0000B4A6 9068 0008                  		sub.w	8(a0),d0
0000B4AA 6400                       		bcc.s	loc_AE40
0000B4AC 4440                       		neg.w	d0
0000B4AE 4441                       		neg.w	d1
0000B4B0 08A8 0000 0022             		bclr	#0,$22(a0)
0000B4B6                            
0000B4B6                            loc_AE40:
0000B4B6 B042                       		cmp.w	d2,d0
0000B4B8 4E75                       		rts	
0000B4BA                            ; End of function Obj2D_ChkSonic2
0000B4BA                            
0000B4BA                            ; ===========================================================================
0000B4BA                            Ani_obj2D:
0000B4BA                            	include "_anim\obj2D.asm"
0000B4BA                            ; ---------------------------------------------------------------------------
0000B4BA                            ; Animation script - Burrobot enemy but craig
0000B4BA                            ; ---------------------------------------------------------------------------
0000B4BA 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B4BC 0000                       		dc.w byte_AE50-Ani_obj2D
0000B4BE 0000                       		dc.w byte_AE54-Ani_obj2D
0000B4C0 0000                       		dc.w byte_AE58-Ani_obj2D
0000B4C2 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B4C5 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B4C9 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B4D7 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B4DA                            		even
0000B4DA                            		even
0000B4DA                            
0000B4DA                            ; ---------------------------------------------------------------------------
0000B4DA                            ; Sprite mappings - Burrobot enemy (LZ)
0000B4DA                            ; ---------------------------------------------------------------------------
0000B4DA                            Map_obj2D:
0000B4DA                            	include "_maps\obj2D.asm"
0000B4DA                            Map_e3a3:
0000B4DA 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B4DC 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B4DE 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B4E0 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B4E2 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B4E4 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B4E6 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B4E8 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B4EA 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B4EC 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B4EE 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B4F0 02                         Map_e3a3_16: 	dc.b $2
0000B4F1 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B4F6 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B4FB 02                         Map_e3a3_21: 	dc.b $2
0000B4FC EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B501 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B506 02                         Map_e3a3_2C: 	dc.b $2
0000B507 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B50C 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B511 02                         Map_e3a3_37: 	dc.b $2
0000B512 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B517 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B51C 02                         Map_e3a3_42: 	dc.b $2
0000B51D EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B522 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B527 02                         Map_e3a3_4D: 	dc.b $2
0000B528 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B52D FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B532 02                         Map_e3a3_58: 	dc.b $2
0000B533 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B538 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B53D 02                         Map_e3a3_63: 	dc.b $2
0000B53E EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B543 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B548 02                         Map_e3a3_6E: 	dc.b $2
0000B549 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B54E FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B553 02                         Map_e3a3_79: 	dc.b $2
0000B554 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B559 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B55E 02                         Map_e3a3_84: 	dc.b $2
0000B55F EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B564 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B56A 00                         	even
0000B56A 00                         	even
0000B56A                            
0000B56A                            ; ===========================================================================
0000B56A                            ; ---------------------------------------------------------------------------
0000B56A                            ; Object 2F - large moving platforms (MZ)
0000B56A                            ; ---------------------------------------------------------------------------
0000B56A                            
0000B56A                            Obj2F:					; XREF: Obj_Index
0000B56A 7000                       		moveq	#0,d0
0000B56C 1028 0024                  		move.b	$24(a0),d0
0000B570 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B574 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B578                            ; ===========================================================================
0000B578 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B57A 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B57C                            
0000B57C 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B57E 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B580 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B582 0140                       		dc.b 1,	$40
0000B584 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B586 0220                       		dc.b 2,	$20
0000B588                            ; ===========================================================================
0000B588                            
0000B588                            Obj2F_Main:				; XREF: Obj2F_Index
0000B588 5428 0024                  		addq.b	#2,$24(a0)
0000B58C 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B594 317C C000 0002             		move.w	#$C000,2(a0)
0000B59A 117C 0004 0001             		move.b	#4,1(a0)
0000B5A0 117C 0005 0018             		move.b	#5,$18(a0)
0000B5A6 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B5AC 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B5B2 7000                       		moveq	#0,d0
0000B5B4 1028 0028                  		move.b	$28(a0),d0
0000B5B8 E448                       		lsr.w	#2,d0
0000B5BA 0240 001C                  		andi.w	#$1C,d0
0000B5BE 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B5C2 3019                       		move.w	(a1)+,d0
0000B5C4 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B5C8 214A 0030                  		move.l	a2,$30(a0)
0000B5CC 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B5D0 1151 0019                  		move.b	(a1),$19(a0)
0000B5D4 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B5DA 117C 0040 0016             		move.b	#$40,$16(a0)
0000B5E0 08E8 0004 0001             		bset	#4,1(a0)
0000B5E6                            
0000B5E6                            Obj2F_Action:				; XREF: Obj2F_Index
0000B5E6 6100 0000                  		bsr.w	Obj2F_Types
0000B5EA 4A28 0025                  		tst.b	$25(a0)
0000B5EE 6700                       		beq.s	Obj2F_Solid
0000B5F0 7200                       		moveq	#0,d1
0000B5F2 1228 0019                  		move.b	$19(a0),d1
0000B5F6 0641 000B                  		addi.w	#$B,d1
0000B5FA 6100 C560                  		bsr.w	ExitPlatform
0000B5FE 0829 0003 0022             		btst	#3,$22(a1)
0000B604 6600 0000                  		bne.w	Obj2F_Slope
0000B608 4228 0025                  		clr.b	$25(a0)
0000B60C 6000                       		bra.s	Obj2F_Display
0000B60E                            ; ===========================================================================
0000B60E                            
0000B60E                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B60E 7200                       		moveq	#0,d1
0000B610 1228 0019                  		move.b	$19(a0),d1
0000B614 0641 000B                  		addi.w	#$B,d1
0000B618 2468 0030                  		movea.l	$30(a0),a2
0000B61C 3428 0008                  		move.w	8(a0),d2
0000B620 6100 D52A                  		bsr.w	SlopeObject2
0000B624 6000                       		bra.s	Obj2F_Display
0000B626                            ; ===========================================================================
0000B626                            
0000B626                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B626 7200                       		moveq	#0,d1
0000B628 1228 0019                  		move.b	$19(a0),d1
0000B62C 0641 000B                  		addi.w	#$B,d1
0000B630 343C 0020                  		move.w	#$20,d2
0000B634 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B63A 6600                       		bne.s	loc_AF8E
0000B63C 343C 0030                  		move.w	#$30,d2
0000B640                            
0000B640                            loc_AF8E:
0000B640 2468 0030                  		movea.l	$30(a0),a2
0000B644 6100 0000                  		bsr.w	SolidObject2F
0000B648                            
0000B648                            Obj2F_Display:				; XREF: Obj2F_Action
0000B648 6100 0000                  		bsr.w	DisplaySprite
0000B64C 6000 0000                  		bra.w	Obj2F_ChkDel
0000B650                            
0000B650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B650                            
0000B650                            
0000B650                            Obj2F_Types:				; XREF: Obj2F_Action
0000B650 7000                       		moveq	#0,d0
0000B652 1028 0028                  		move.b	$28(a0),d0
0000B656 0240 0007                  		andi.w	#7,d0
0000B65A D040                       		add.w	d0,d0
0000B65C 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B660 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B664                            ; End of function Obj2F_Types
0000B664                            
0000B664                            ; ===========================================================================
0000B664 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B666 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B668 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B66A 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B66C 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B66E 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B670                            ; ===========================================================================
0000B670                            
0000B670                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B670 4E75                       		rts			; type 00 platform doesn't move
0000B672                            ; ===========================================================================
0000B672                            
0000B672                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B672 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B676 323C 0020                  		move.w	#$20,d1
0000B67A 6000                       		bra.s	Obj2F_Move
0000B67C                            ; ===========================================================================
0000B67C                            
0000B67C                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B67C 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B680 323C 0030                  		move.w	#$30,d1
0000B684 6000                       		bra.s	Obj2F_Move
0000B686                            ; ===========================================================================
0000B686                            
0000B686                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B686 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B68A 323C 0040                  		move.w	#$40,d1
0000B68E 6000                       		bra.s	Obj2F_Move
0000B690                            ; ===========================================================================
0000B690                            
0000B690                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B690 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B694 323C 0060                  		move.w	#$60,d1
0000B698                            
0000B698                            Obj2F_Move:
0000B698 0828 0003 0028             		btst	#3,$28(a0)
0000B69E 6700                       		beq.s	loc_AFF2
0000B6A0 4440                       		neg.w	d0
0000B6A2 D041                       		add.w	d1,d0
0000B6A4                            
0000B6A4                            loc_AFF2:
0000B6A4 3228 002C                  		move.w	$2C(a0),d1
0000B6A8 9240                       		sub.w	d0,d1
0000B6AA 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B6AE 4E75                       		rts	
0000B6B0                            ; ===========================================================================
0000B6B0                            
0000B6B0                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B6B0 1028 0034                  		move.b	$34(a0),d0
0000B6B4 4A28 0025                  		tst.b	$25(a0)
0000B6B8 6600                       		bne.s	loc_B010
0000B6BA 5500                       		subq.b	#2,d0
0000B6BC 6400                       		bcc.s	loc_B01C
0000B6BE 7000                       		moveq	#0,d0
0000B6C0 6000                       		bra.s	loc_B01C
0000B6C2                            ; ===========================================================================
0000B6C2                            
0000B6C2                            loc_B010:
0000B6C2 5800                       		addq.b	#4,d0
0000B6C4 0C00 0040                  		cmpi.b	#$40,d0
0000B6C8 6500                       		bcs.s	loc_B01C
0000B6CA 103C 0040                  		move.b	#$40,d0
0000B6CE                            
0000B6CE                            loc_B01C:
0000B6CE 1140 0034                  		move.b	d0,$34(a0)
0000B6D2 4EB9 0000 2C64             		jsr	(CalcSine).l
0000B6D8 E848                       		lsr.w	#4,d0
0000B6DA 3200                       		move.w	d0,d1
0000B6DC D068 002C                  		add.w	$2C(a0),d0
0000B6E0 3140 000C                  		move.w	d0,$C(a0)
0000B6E4 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B6EA 6600                       		bne.s	loc_B07A
0000B6EC 4A28 0035                  		tst.b	$35(a0)
0000B6F0 6600                       		bne.s	loc_B07A
0000B6F2 117C 0001 0035             		move.b	#1,$35(a0)
0000B6F8 6100 0000                  		bsr.w	SingleObjLoad2
0000B6FC 6600                       		bne.s	loc_B07A
0000B6FE 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B702 3368 0008 0008             		move.w	8(a0),8(a1)
0000B708 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B70E 5069 002C                  		addq.w	#8,$2C(a1)
0000B712 5769 002C                  		subq.w	#3,$2C(a1)
0000B716 0469 0040 0008             		subi.w	#$40,8(a1)
0000B71C 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B722 2348 0038                  		move.l	a0,$38(a1)
0000B726 2448                       		movea.l	a0,a2
0000B728 6100                       		bsr.s	sub_B09C
0000B72A                            
0000B72A                            loc_B07A:
0000B72A 7400                       		moveq	#0,d2
0000B72C 45E8 0036                  		lea	$36(a0),a2
0000B730 141A                       		move.b	(a2)+,d2
0000B732 5302                       		subq.b	#1,d2
0000B734 6500                       		bcs.s	locret_B09A
0000B736                            
0000B736                            loc_B086:
0000B736 7000                       		moveq	#0,d0
0000B738 101A                       		move.b	(a2)+,d0
0000B73A ED48                       		lsl.w	#6,d0
0000B73C 0640 D000                  		addi.w	#-$3000,d0
0000B740 3240                       		movea.w	d0,a1
0000B742 3341 003C                  		move.w	d1,$3C(a1)
0000B746 51CA FFEE                  		dbf	d2,loc_B086
0000B74A                            
0000B74A                            locret_B09A:
0000B74A 4E75                       		rts	
0000B74C                            
0000B74C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B74C                            
0000B74C                            
0000B74C                            sub_B09C:
0000B74C 45EA 0036                  		lea	$36(a2),a2
0000B750 7000                       		moveq	#0,d0
0000B752 1012                       		move.b	(a2),d0
0000B754 5212                       		addq.b	#1,(a2)
0000B756 45F2 0001                  		lea	1(a2,d0.w),a2
0000B75A 3009                       		move.w	a1,d0
0000B75C 0440 D000                  		subi.w	#-$3000,d0
0000B760 EC48                       		lsr.w	#6,d0
0000B762 0240 007F                  		andi.w	#$7F,d0
0000B766 1480                       		move.b	d0,(a2)
0000B768 4E75                       		rts	
0000B76A                            ; End of function sub_B09C
0000B76A                            
0000B76A                            ; ===========================================================================
0000B76A                            
0000B76A                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B76A 4A28 0035                  		tst.b	$35(a0)
0000B76E 6700                       		beq.s	loc_B0C6
0000B770 4A28 0001                  		tst.b	1(a0)
0000B774 6A00                       		bpl.s	Obj2F_DelFlames
0000B776                            
0000B776                            loc_B0C6:
0000B776 3028 002A                  		move.w	$2A(a0),d0
0000B77A 0240 FF80                  		andi.w	#$FF80,d0
0000B77E 3238 F700                  		move.w	($FFFFF700).w,d1
0000B782 0441 0080                  		subi.w	#$80,d1
0000B786 0241 FF80                  		andi.w	#$FF80,d1
0000B78A 9041                       		sub.w	d1,d0
0000B78C 0C40 0280                  		cmpi.w	#$280,d0
0000B790 6200 0000                  		bhi.w	DeleteObject
0000B794 4E75                       		rts	
0000B796                            ; ===========================================================================
0000B796                            
0000B796                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B796 7400                       		moveq	#0,d2
0000B798                            
0000B798                            loc_B0E8:
0000B798 45E8 0036                  		lea	$36(a0),a2
0000B79C 1412                       		move.b	(a2),d2
0000B79E 421A                       		clr.b	(a2)+
0000B7A0 5302                       		subq.b	#1,d2
0000B7A2 6500                       		bcs.s	locret_B116
0000B7A4                            
0000B7A4                            loc_B0F4:
0000B7A4 7000                       		moveq	#0,d0
0000B7A6 1012                       		move.b	(a2),d0
0000B7A8 421A                       		clr.b	(a2)+
0000B7AA ED48                       		lsl.w	#6,d0
0000B7AC 0640 D000                  		addi.w	#-$3000,d0
0000B7B0 3240                       		movea.w	d0,a1
0000B7B2 6100 0000                  		bsr.w	DeleteObject2
0000B7B6 51CA FFEC                  		dbf	d2,loc_B0F4
0000B7BA 117C 0000 0035             		move.b	#0,$35(a0)
0000B7C0 117C 0000 0034             		move.b	#0,$34(a0)
0000B7C6                            
0000B7C6                            locret_B116:
0000B7C6 4E75                       		rts	
0000B7C8                            ; ===========================================================================
0000B7C8                            ; ---------------------------------------------------------------------------
0000B7C8                            ; Collision data for large moving platforms (MZ)
0000B7C8                            ; ---------------------------------------------------------------------------
0000B7C8                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B814                            		even
0000B814                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B840                            		even
0000B840                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B88C                            		even
0000B88C                            ; ===========================================================================
0000B88C                            ; ---------------------------------------------------------------------------
0000B88C                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B88C                            ; (appears when	you walk on sinking platforms)
0000B88C                            ; ---------------------------------------------------------------------------
0000B88C                            
0000B88C                            Obj35:					; XREF: Obj_Index
0000B88C 7000                       		moveq	#0,d0
0000B88E 1028 0024                  		move.b	$24(a0),d0
0000B892 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B896 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B89A                            ; ===========================================================================
0000B89A 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B89C 0000                       		dc.w loc_B238-Obj35_Index
0000B89E 0000                       		dc.w Obj35_Move-Obj35_Index
0000B8A0                            ; ===========================================================================
0000B8A0                            
0000B8A0                            Obj35_Main:				; XREF: Obj35_Index
0000B8A0 5428 0024                  		addq.b	#2,$24(a0)
0000B8A4 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B8AC 317C 0345 0002             		move.w	#$345,2(a0)
0000B8B2 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B8B8 117C 0004 0001             		move.b	#4,1(a0)
0000B8BE 117C 0001 0018             		move.b	#1,$18(a0)
0000B8C4 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B8CA 117C 0008 0019             		move.b	#8,$19(a0)
0000B8D0 303C 00C8                  		move.w	#$C8,d0
0000B8D4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000B8DA 4A28 0028                  		tst.b	$28(a0)
0000B8DE 6700                       		beq.s	loc_B238
0000B8E0 5428 0024                  		addq.b	#2,$24(a0)
0000B8E4 6000 0000                  		bra.w	Obj35_Move
0000B8E8                            ; ===========================================================================
0000B8E8                            
0000B8E8                            loc_B238:				; XREF: Obj35_Index
0000B8E8 2268 0030                  		movea.l	$30(a0),a1
0000B8EC 3228 0008                  		move.w	8(a0),d1
0000B8F0 9268 002A                  		sub.w	$2A(a0),d1
0000B8F4 0641 000C                  		addi.w	#$C,d1
0000B8F8 3001                       		move.w	d1,d0
0000B8FA E248                       		lsr.w	#1,d0
0000B8FC 1031 0000                  		move.b	(a1,d0.w),d0
0000B900 4440                       		neg.w	d0
0000B902 D068 002C                  		add.w	$2C(a0),d0
0000B906 3400                       		move.w	d0,d2
0000B908 D068 003C                  		add.w	$3C(a0),d0
0000B90C 3140 000C                  		move.w	d0,$C(a0)
0000B910 0C41 0084                  		cmpi.w	#$84,d1
0000B914 6400                       		bcc.s	loc_B2B0
0000B916 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B91E 0C41 0080                  		cmpi.w	#$80,d1
0000B922 6400                       		bcc.s	loc_B2B0
0000B924 2028 0008                  		move.l	8(a0),d0
0000B928 0680 0008 0000             		addi.l	#$80000,d0
0000B92E 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B934 6600                       		bne.s	loc_B2B0
0000B936 6100 0000                  		bsr.w	SingleObjLoad2
0000B93A 6600                       		bne.s	loc_B2B0
0000B93C 12BC 0035                  		move.b	#$35,0(a1)
0000B940 3368 0008 0008             		move.w	8(a0),8(a1)
0000B946 3342 002C                  		move.w	d2,$2C(a1)
0000B94A 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B950 137C 0001 0028             		move.b	#1,$28(a1)
0000B956 2468 0038                  		movea.l	$38(a0),a2
0000B95A 6100 FDF0                  		bsr.w	sub_B09C
0000B95E                            
0000B95E                            loc_B2B0:
0000B95E 6000                       		bra.s	Obj35_Animate
0000B960                            ; ===========================================================================
0000B960                            
0000B960                            Obj35_Move:				; XREF: Obj35_Index
0000B960 3028 002C                  		move.w	$2C(a0),d0
0000B964 D068 003C                  		add.w	$3C(a0),d0
0000B968 3140 000C                  		move.w	d0,$C(a0)
0000B96C                            
0000B96C                            Obj35_Animate:				; XREF: loc_B238
0000B96C 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B972 6100 F4AA                  		bsr.w	AnimateSprite
0000B976 6000 0000                  		bra.w	DisplaySprite
0000B97A                            ; ===========================================================================
0000B97A                            Ani_obj35:
0000B97A                            	include "_anim\obj35.asm"
0000B97A                            ; ---------------------------------------------------------------------------
0000B97A                            ; Animation script - fireball that sits on the	floor (MZ)
0000B97A                            ; ---------------------------------------------------------------------------
0000B97A 0000                       		dc.w byte_B2CE-Ani_obj35
0000B97C 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B982                            		even
0000B982                            		even
0000B982                            
0000B982                            ; ---------------------------------------------------------------------------
0000B982                            ; Sprite mappings - large moving platforms (MZ)
0000B982                            ; ---------------------------------------------------------------------------
0000B982                            Map_obj2F:
0000B982                            	include "_maps\obj2F.asm"
0000B982                            ; ---------------------------------------------------------------------------
0000B982                            ; Sprite mappings - large moving platforms (MZ)
0000B982                            ; ---------------------------------------------------------------------------
0000B982 0000                       		dc.w byte_B2DA-Map_obj2F
0000B984 0000                       		dc.w byte_B31C-Map_obj2F
0000B986 0000                       		dc.w byte_B34F-Map_obj2F
0000B988 0D                         byte_B2DA:	dc.b $D
0000B989 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B98E F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B993 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B998 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B99D F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B9A2 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B9A7 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B9AC D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B9B1 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B9B6 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B9BB 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B9C0 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B9C5 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B9CA 0A                         byte_B31C:	dc.b $A
0000B9CB D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B9D0 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B9D5 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B9DA C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B9DF E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B9E4 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B9E9 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B9EE E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B9F3 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B9F8 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B9FD 06                         byte_B34F:	dc.b 6
0000B9FE D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BA03 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA08 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BA0D D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BA12 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA17 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BA1C                            		even
0000BA1C                            		even
0000BA1C                            
0000BA1C                            ; ---------------------------------------------------------------------------
0000BA1C                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BA1C                            ; ---------------------------------------------------------------------------
0000BA1C                            Map_obj14:
0000BA1C                            	include "_maps\obj14.asm"
0000BA1C                            ; --------------------------------------------------------------------------------
0000BA1C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BA1C                            ; --------------------------------------------------------------------------------
0000BA1C                            
0000BA1C                            SME_C6wT7:	
0000BA1C 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BA20 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BA24 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BA28 01                         SME_C6wT7_C:	dc.b 1	
0000BA29 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BA2E 01                         SME_C6wT7_12:	dc.b 1	
0000BA2F E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BA34 02                         SME_C6wT7_18:	dc.b 2	
0000BA35 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BA3A E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BA3F 01                         SME_C6wT7_23:	dc.b 1	
0000BA40 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BA45 01                         SME_C6wT7_29:	dc.b 1	
0000BA46 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BA4B 01                         SME_C6wT7_2F:	dc.b 1	
0000BA4C F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BA52 00                         		even
0000BA52 00                         		even
0000BA52                            
0000BA52                            ; ===========================================================================
0000BA52                            ; ---------------------------------------------------------------------------
0000BA52                            ; Object 30 - large green glassy blocks	(MZ)
0000BA52                            ; ---------------------------------------------------------------------------
0000BA52                            
0000BA52                            Obj30:					; XREF: Obj_Index
0000BA52 7000                       		moveq	#0,d0
0000BA54 1028 0024                  		move.b	$24(a0),d0
0000BA58 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BA5C 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BA60 3028 0008                  		move.w	8(a0),d0
0000BA64 0240 FF80                  		andi.w	#$FF80,d0
0000BA68 3238 F700                  		move.w	($FFFFF700).w,d1
0000BA6C 0441 0080                  		subi.w	#$80,d1
0000BA70 0241 FF80                  		andi.w	#$FF80,d1
0000BA74 9041                       		sub.w	d1,d0
0000BA76 0C40 0280                  		cmpi.w	#$280,d0
0000BA7A 6200 0000                  		bhi.w	Obj30_Delete
0000BA7E 6000 0000                  		bra.w	DisplaySprite
0000BA82                            ; ===========================================================================
0000BA82                            
0000BA82                            Obj30_Delete:
0000BA82 6000 0000                  		bra.w	DeleteObject
0000BA86                            ; ===========================================================================
0000BA86 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BA88 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BA8A 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BA8C 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BA8E 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BA90                            
0000BA90 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BA93 0400 01                    		dc.b 4,	0, 1
0000BA96 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BA99 0800 01                    		dc.b 8,	0, 1
0000BA9C                            ; ===========================================================================
0000BA9C                            
0000BA9C                            Obj30_Main:				; XREF: Obj30_Index
0000BA9C 45F9 0000 BA90             		lea	(Obj30_Vars1).l,a2
0000BAA2 7201                       		moveq	#1,d1
0000BAA4 117C 0048 0016             		move.b	#$48,$16(a0)
0000BAAA 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BAB0 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BAB2 45F9 0000 BA96             		lea	(Obj30_Vars2).l,a2
0000BAB8 7201                       		moveq	#1,d1
0000BABA 117C 0038 0016             		move.b	#$38,$16(a0)
0000BAC0                            
0000BAC0                            loc_B40C:
0000BAC0 2248                       		movea.l	a0,a1
0000BAC2 6000                       		bra.s	Obj30_Load	; load main object
0000BAC4                            ; ===========================================================================
0000BAC4                            
0000BAC4                            Obj30_Loop:
0000BAC4 6100 0000                  		bsr.w	SingleObjLoad2
0000BAC8 6600                       		bne.s	loc_B480
0000BACA                            
0000BACA                            Obj30_Load:				; XREF: Obj30_Main
0000BACA 135A 0024                  		move.b	(a2)+,$24(a1)
0000BACE 12BC 0030                  		move.b	#$30,0(a1)
0000BAD2 3368 0008 0008             		move.w	8(a0),8(a1)
0000BAD8 101A                       		move.b	(a2)+,d0
0000BADA 4880                       		ext.w	d0
0000BADC D068 000C                  		add.w	$C(a0),d0
0000BAE0 3340 000C                  		move.w	d0,$C(a1)
0000BAE4 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BAEC 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BAF2 137C 0004 0001             		move.b	#4,1(a1)
0000BAF8 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BAFE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BB04 137C 0020 0019             		move.b	#$20,$19(a1)
0000BB0A 137C 0004 0018             		move.b	#4,$18(a1)
0000BB10 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BB14 2348 003C                  		move.l	a0,$3C(a1)
0000BB18 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BB1C                            
0000BB1C 137C 0010 0019             		move.b	#$10,$19(a1)
0000BB22 137C 0003 0018             		move.b	#3,$18(a1)
0000BB28 5029 0028                  		addq.b	#8,$28(a1)
0000BB2C 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BB32                            
0000BB32                            loc_B480:
0000BB32 317C 0090 0032             		move.w	#$90,$32(a0)
0000BB38 08E8 0004 0001             		bset	#4,1(a0)
0000BB3E                            
0000BB3E                            Obj30_Block012:				; XREF: Obj30_Index
0000BB3E 6100 0000                  		bsr.w	Obj30_Types
0000BB42 323C 002B                  		move.w	#$2B,d1
0000BB46 343C 0048                  		move.w	#$48,d2
0000BB4A 363C 0049                  		move.w	#$49,d3
0000BB4E 3828 0008                  		move.w	8(a0),d4
0000BB52 6000 0000                  		bra.w	SolidObject
0000BB56                            ; ===========================================================================
0000BB56                            
0000BB56                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BB56 2268 003C                  		movea.l	$3C(a0),a1
0000BB5A 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BB60 6000 0000                  		bra.w	Obj30_Types
0000BB64                            ; ===========================================================================
0000BB64                            
0000BB64                            Obj30_Block34:				; XREF: Obj30_Index
0000BB64 6100 0000                  		bsr.w	Obj30_Types
0000BB68 323C 002B                  		move.w	#$2B,d1
0000BB6C 343C 0038                  		move.w	#$38,d2
0000BB70 363C 0039                  		move.w	#$39,d3
0000BB74 3828 0008                  		move.w	8(a0),d4
0000BB78 6000 0000                  		bra.w	SolidObject
0000BB7C                            ; ===========================================================================
0000BB7C                            
0000BB7C                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BB7C 2268 003C                  		movea.l	$3C(a0),a1
0000BB80 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BB86 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BB8C 6000 0002                  		bra.w	*+4
0000BB90                            
0000BB90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB90                            
0000BB90                            
0000BB90                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BB90 7000                       		moveq	#0,d0
0000BB92 1028 0028                  		move.b	$28(a0),d0
0000BB96 0240 0007                  		andi.w	#7,d0
0000BB9A D040                       		add.w	d0,d0
0000BB9C 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BBA0 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BBA4                            ; End of function Obj30_Types
0000BBA4                            
0000BBA4                            ; ===========================================================================
0000BBA4 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BBA6 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BBA8 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BBAA 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BBAC 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BBAE                            ; ===========================================================================
0000BBAE                            
0000BBAE                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BBAE 4E75                       		rts	
0000BBB0                            ; ===========================================================================
0000BBB0                            
0000BBB0                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BBB0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BBB4 323C 0040                  		move.w	#$40,d1
0000BBB8 6000                       		bra.s	loc_B514
0000BBBA                            ; ===========================================================================
0000BBBA                            
0000BBBA                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BBBA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BBBE 323C 0040                  		move.w	#$40,d1
0000BBC2 4440                       		neg.w	d0
0000BBC4 D041                       		add.w	d1,d0
0000BBC6                            
0000BBC6                            loc_B514:				; XREF: Obj30_Type01
0000BBC6 0828 0003 0028             		btst	#3,$28(a0)
0000BBCC 6700                       		beq.s	loc_B526
0000BBCE 4440                       		neg.w	d0
0000BBD0 D041                       		add.w	d1,d0
0000BBD2 E208                       		lsr.b	#1,d0
0000BBD4 0640 0020                  		addi.w	#$20,d0
0000BBD8                            
0000BBD8                            loc_B526:
0000BBD8 6000 0000                  		bra.w	loc_B5EE
0000BBDC                            ; ===========================================================================
0000BBDC                            
0000BBDC                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BBDC 0828 0003 0028             		btst	#3,$28(a0)
0000BBE2 6700                       		beq.s	loc_B53E
0000BBE4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BBE8 0440 0010                  		subi.w	#$10,d0
0000BBEC 6000 0000                  		bra.w	loc_B5EE
0000BBF0                            ; ===========================================================================
0000BBF0                            
0000BBF0                            loc_B53E:
0000BBF0 0828 0003 0022             		btst	#3,$22(a0)
0000BBF6 6600                       		bne.s	loc_B54E
0000BBF8 08A8 0000 0034             		bclr	#0,$34(a0)
0000BBFE 6000                       		bra.s	loc_B582
0000BC00                            ; ===========================================================================
0000BC00                            
0000BC00                            loc_B54E:
0000BC00 4A28 0034                  		tst.b	$34(a0)
0000BC04 6600                       		bne.s	loc_B582
0000BC06 117C 0001 0034             		move.b	#1,$34(a0)
0000BC0C 08E8 0000 0035             		bset	#0,$35(a0)
0000BC12 6700                       		beq.s	loc_B582
0000BC14 08E8 0007 0034             		bset	#7,$34(a0)
0000BC1A 317C 0010 0036             		move.w	#$10,$36(a0)
0000BC20 117C 000A 0038             		move.b	#$A,$38(a0)
0000BC26 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BC2C 6600                       		bne.s	loc_B582
0000BC2E 317C 0040 0036             		move.w	#$40,$36(a0)
0000BC34                            
0000BC34                            loc_B582:
0000BC34 4A28 0034                  		tst.b	$34(a0)
0000BC38 6A00                       		bpl.s	loc_B5AA
0000BC3A 4A28 0038                  		tst.b	$38(a0)
0000BC3E 6700                       		beq.s	loc_B594
0000BC40 5328 0038                  		subq.b	#1,$38(a0)
0000BC44 6600                       		bne.s	loc_B5AA
0000BC46                            
0000BC46                            loc_B594:
0000BC46 4A68 0032                  		tst.w	$32(a0)
0000BC4A 6700                       		beq.s	loc_B5A4
0000BC4C 5368 0032                  		subq.w	#1,$32(a0)
0000BC50 5368 0036                  		subq.w	#1,$36(a0)
0000BC54 6600                       		bne.s	loc_B5AA
0000BC56                            
0000BC56                            loc_B5A4:
0000BC56 08A8 0007 0034             		bclr	#7,$34(a0)
0000BC5C                            
0000BC5C                            loc_B5AA:
0000BC5C 3028 0032                  		move.w	$32(a0),d0
0000BC60 6000                       		bra.s	loc_B5EE
0000BC62                            ; ===========================================================================
0000BC62                            
0000BC62                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BC62 0828 0003 0028             		btst	#3,$28(a0)
0000BC68 6700                       		beq.s	Obj30_ChkSwitch
0000BC6A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC6E 0440 0010                  		subi.w	#$10,d0
0000BC72 6000                       		bra.s	loc_B5EE
0000BC74                            ; ===========================================================================
0000BC74                            
0000BC74                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BC74 4A28 0034                  		tst.b	$34(a0)
0000BC78 6600                       		bne.s	loc_B5E0
0000BC7A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BC7E 7000                       		moveq	#0,d0
0000BC80 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BC84 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BC86 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BC8A 6700                       		beq.s	loc_B5EA	; if not, branch
0000BC8C 117C 0001 0034             		move.b	#1,$34(a0)
0000BC92                            
0000BC92                            loc_B5E0:
0000BC92 4A68 0032                  		tst.w	$32(a0)
0000BC96 6700                       		beq.s	loc_B5EA
0000BC98 5568 0032                  		subq.w	#2,$32(a0)
0000BC9C                            
0000BC9C                            loc_B5EA:
0000BC9C 3028 0032                  		move.w	$32(a0),d0
0000BCA0                            
0000BCA0                            loc_B5EE:
0000BCA0 3228 0030                  		move.w	$30(a0),d1
0000BCA4 9240                       		sub.w	d0,d1
0000BCA6 3141 000C                  		move.w	d1,$C(a0)
0000BCAA 4E75                       		rts	
0000BCAC                            ; ===========================================================================
0000BCAC                            ; ---------------------------------------------------------------------------
0000BCAC                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BCAC                            ; ---------------------------------------------------------------------------
0000BCAC                            Map_obj30:
0000BCAC                            	include "_maps\obj30.asm"
0000BCAC                            ; ---------------------------------------------------------------------------
0000BCAC                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BCAC                            ; ---------------------------------------------------------------------------
0000BCAC 0000                       		dc.w byte_B600-Map_obj30
0000BCAE 0000                       		dc.w byte_B63D-Map_obj30
0000BCB0 0000                       		dc.w byte_B648-Map_obj30
0000BCB2 0C                         byte_B600:	dc.b $C
0000BCB3 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BCB8 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BCBD C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BCC2 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BCC7 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BCCC E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BCD1 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BCD6 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BCDB 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BCE0 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BCE5 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BCEA 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BCEF 02                         byte_B63D:	dc.b 2
0000BCF0 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BCF5 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BCFA 0A                         byte_B648:	dc.b $A
0000BCFB C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BD00 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BD05 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BD0A D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BD0F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BD14 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BD19 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BD1E 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BD23 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BD28 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BD2E 00                         		even
0000BD2E 00                         		even
0000BD2E                            
0000BD2E                            ; ===========================================================================
0000BD2E                            ; ---------------------------------------------------------------------------
0000BD2E                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BD2E                            ; ---------------------------------------------------------------------------
0000BD2E                            
0000BD2E                            Obj31:					; XREF: Obj_Index
0000BD2E 7000                       		moveq	#0,d0
0000BD30 1028 0024                  		move.b	$24(a0),d0
0000BD34 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BD38 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BD3C                            ; ===========================================================================
0000BD3C 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BD3E 0000                       		dc.w loc_B798-Obj31_Index
0000BD40 0000                       		dc.w loc_B7FE-Obj31_Index
0000BD42 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BD44 0000                       		dc.w loc_B7E2-Obj31_Index
0000BD46                            
0000BD46 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BD48 0100                       		dc.b 1,	0
0000BD4A                            
0000BD4A 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BD4D 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BD50 08CC 03                    		dc.b 8,	$CC, 3
0000BD53 06F0 02                    		dc.b 6,	$F0, 2
0000BD56                            
0000BD56 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BD5A 5000 7800                  		dc.w $5000, $7800
0000BD5E 3800 5800                  		dc.w $3800, $5800
0000BD62 B800                       		dc.w $B800
0000BD64                            ; ===========================================================================
0000BD64                            
0000BD64                            Obj31_Main:				; XREF: Obj31_Index
0000BD64 7000                       		moveq	#0,d0
0000BD66 1028 0028                  		move.b	$28(a0),d0
0000BD6A 6A00                       		bpl.s	loc_B6CE
0000BD6C 0240 007F                  		andi.w	#$7F,d0
0000BD70 D040                       		add.w	d0,d0
0000BD72 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BD76 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BD7A 101A                       		move.b	(a2)+,d0
0000BD7C 1140 0028                  		move.b	d0,$28(a0)
0000BD80                            
0000BD80                            loc_B6CE:
0000BD80 0200 000F                  		andi.b	#$F,d0
0000BD84 D040                       		add.w	d0,d0
0000BD86 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BD8A 4A40                       		tst.w	d0
0000BD8C 6600                       		bne.s	loc_B6E0
0000BD8E 3142 0032                  		move.w	d2,$32(a0)
0000BD92                            
0000BD92                            loc_B6E0:
0000BD92 45F9 0000 BD4A             		lea	(Obj31_Var).l,a2
0000BD98 2248                       		movea.l	a0,a1
0000BD9A 7203                       		moveq	#3,d1
0000BD9C 6000                       		bra.s	Obj31_MakeStomper
0000BD9E                            ; ===========================================================================
0000BD9E                            
0000BD9E                            Obj31_Loop:
0000BD9E 6100 0000                  		bsr.w	SingleObjLoad2
0000BDA2 6600 0000                  		bne.w	Obj31_SetSize
0000BDA6                            
0000BDA6                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BDA6 135A 0024                  		move.b	(a2)+,$24(a1)
0000BDAA 12BC 0031                  		move.b	#$31,0(a1)
0000BDAE 3368 0008 0008             		move.w	8(a0),8(a1)
0000BDB4 101A                       		move.b	(a2)+,d0
0000BDB6 4880                       		ext.w	d0
0000BDB8 D068 000C                  		add.w	$C(a0),d0
0000BDBC 3340 000C                  		move.w	d0,$C(a1)
0000BDC0 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BDC8 337C 0300 0002             		move.w	#$300,2(a1)
0000BDCE 137C 0004 0001             		move.b	#4,1(a1)
0000BDD4 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BDDA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BDE0 137C 0010 0019             		move.b	#$10,$19(a1)
0000BDE6 3342 0034                  		move.w	d2,$34(a1)
0000BDEA 137C 0004 0018             		move.b	#4,$18(a1)
0000BDF0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BDF4 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BDFA 6600                       		bne.s	loc_B76A
0000BDFC 5341                       		subq.w	#1,d1
0000BDFE 1028 0028                  		move.b	$28(a0),d0
0000BE02 0240 00F0                  		andi.w	#$F0,d0
0000BE06 0C40 0020                  		cmpi.w	#$20,d0
0000BE0A 679A                       		beq.s	Obj31_MakeStomper
0000BE0C 137C 0038 0019             		move.b	#$38,$19(a1)
0000BE12 137C 0090 0020             		move.b	#$90,$20(a1)
0000BE18 5241                       		addq.w	#1,d1
0000BE1A                            
0000BE1A                            loc_B76A:
0000BE1A 2348 003C                  		move.l	a0,$3C(a1)
0000BE1E 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BE22                            
0000BE22 137C 0003 0018             		move.b	#3,$18(a1)
0000BE28                            
0000BE28                            Obj31_SetSize:
0000BE28 7000                       		moveq	#0,d0
0000BE2A 1028 0028                  		move.b	$28(a0),d0
0000BE2E E648                       		lsr.w	#3,d0
0000BE30 0200 000E                  		andi.b	#$E,d0
0000BE34 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BE38 115A 0019                  		move.b	(a2)+,$19(a0)
0000BE3C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BE40 6000                       		bra.s	loc_B798
0000BE42                            ; ===========================================================================
0000BE42 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BE44 3009                       		dc.b $30, 9
0000BE46 100A                       		dc.b $10, $A
0000BE48                            ; ===========================================================================
0000BE48                            
0000BE48                            loc_B798:				; XREF: Obj31_Index
0000BE48 6100 0000                  		bsr.w	Obj31_Types
0000BE4C 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BE52 7200                       		moveq	#0,d1
0000BE54 1228 0019                  		move.b	$19(a0),d1
0000BE58 0641 000B                  		addi.w	#$B,d1
0000BE5C 343C 000C                  		move.w	#$C,d2
0000BE60 363C 000D                  		move.w	#$D,d3
0000BE64 3828 0008                  		move.w	8(a0),d4
0000BE68 6100 0000                  		bsr.w	SolidObject
0000BE6C 0828 0003 0022             		btst	#3,$22(a0)
0000BE72 6700                       		beq.s	Obj31_Display
0000BE74 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BE7A 6400                       		bcc.s	Obj31_Display
0000BE7C 2448                       		movea.l	a0,a2
0000BE7E 41F8 D000                  		lea	($FFFFD000).w,a0
0000BE82 4EB9 0000 0000             		jsr	KillSonic
0000BE88 204A                       		movea.l	a2,a0
0000BE8A                            
0000BE8A                            Obj31_Display:
0000BE8A 6100 0000                  		bsr.w	DisplaySprite
0000BE8E 6000 0000                  		bra.w	Obj31_ChkDel
0000BE92                            ; ===========================================================================
0000BE92                            
0000BE92                            loc_B7E2:				; XREF: Obj31_Index
0000BE92 117C 0080 0016             		move.b	#$80,$16(a0)
0000BE98 08E8 0004 0001             		bset	#4,1(a0)
0000BE9E 2268 003C                  		movea.l	$3C(a0),a1
0000BEA2 1029 0032                  		move.b	$32(a1),d0
0000BEA6 EA08                       		lsr.b	#5,d0
0000BEA8 5600                       		addq.b	#3,d0
0000BEAA 1140 001A                  		move.b	d0,$1A(a0)
0000BEAE                            
0000BEAE                            loc_B7FE:				; XREF: Obj31_Index
0000BEAE 2268 003C                  		movea.l	$3C(a0),a1
0000BEB2 7000                       		moveq	#0,d0
0000BEB4 1029 0032                  		move.b	$32(a1),d0
0000BEB8 D068 0030                  		add.w	$30(a0),d0
0000BEBC 3140 000C                  		move.w	d0,$C(a0)
0000BEC0                            
0000BEC0                            Obj31_Display2:				; XREF: Obj31_Index
0000BEC0 6100 0000                  		bsr.w	DisplaySprite
0000BEC4                            
0000BEC4                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BEC4 3028 0008                  		move.w	8(a0),d0
0000BEC8 0240 FF80                  		andi.w	#$FF80,d0
0000BECC 3238 F700                  		move.w	($FFFFF700).w,d1
0000BED0 0441 0080                  		subi.w	#$80,d1
0000BED4 0241 FF80                  		andi.w	#$FF80,d1
0000BED8 9041                       		sub.w	d1,d0
0000BEDA 0C40 0280                  		cmpi.w	#$280,d0
0000BEDE 6200 0000                  		bhi.w	DeleteObject
0000BEE2 4E75                       		rts	
0000BEE4                            ; ===========================================================================
0000BEE4                            
0000BEE4                            Obj31_Types:				; XREF: loc_B798
0000BEE4 1028 0028                  		move.b	$28(a0),d0
0000BEE8 0240 000F                  		andi.w	#$F,d0
0000BEEC D040                       		add.w	d0,d0
0000BEEE 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BEF2 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BEF6                            ; ===========================================================================
0000BEF6 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BEF8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BEFA 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BEFC 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BEFE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF00 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BF02 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF04                            ; ===========================================================================
0000BF04                            
0000BF04                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BF04 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BF08 7000                       		moveq	#0,d0
0000BF0A 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BF0E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BF12 6700                       		beq.s	loc_B8A8	; if not, branch
0000BF14 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BF18 6A00                       		bpl.s	loc_B872
0000BF1A 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF20 6700                       		beq.s	loc_B8A0
0000BF22                            
0000BF22                            loc_B872:
0000BF22 4A68 0032                  		tst.w	$32(a0)
0000BF26 6700                       		beq.s	loc_B8A0
0000BF28 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BF2C 0200 000F                  		andi.b	#$F,d0
0000BF30 6600                       		bne.s	loc_B892
0000BF32 4A28 0001                  		tst.b	1(a0)
0000BF36 6A00                       		bpl.s	loc_B892
0000BF38 303C 00C7                  		move.w	#$C7,d0
0000BF3C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BF42                            
0000BF42                            loc_B892:
0000BF42 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BF48 6400                       		bcc.s	Obj31_Restart
0000BF4A 317C 0000 0032             		move.w	#0,$32(a0)
0000BF50                            
0000BF50                            loc_B8A0:
0000BF50 317C 0000 0012             		move.w	#0,$12(a0)
0000BF56 6000                       		bra.s	Obj31_Restart
0000BF58                            ; ===========================================================================
0000BF58                            
0000BF58                            loc_B8A8:				; XREF: Obj31_Type00
0000BF58 3228 0034                  		move.w	$34(a0),d1
0000BF5C B268 0032                  		cmp.w	$32(a0),d1
0000BF60 6700                       		beq.s	Obj31_Restart
0000BF62 3028 0012                  		move.w	$12(a0),d0
0000BF66 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BF6C D168 0032                  		add.w	d0,$32(a0)
0000BF70 B268 0032                  		cmp.w	$32(a0),d1
0000BF74 6200                       		bhi.s	Obj31_Restart
0000BF76 3141 0032                  		move.w	d1,$32(a0)
0000BF7A 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BF80 4A28 0001                  		tst.b	1(a0)
0000BF84 6A00                       		bpl.s	Obj31_Restart
0000BF86 303C 00BD                  		move.w	#$BD,d0
0000BF8A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BF90                            
0000BF90                            Obj31_Restart:
0000BF90 7000                       		moveq	#0,d0
0000BF92 1028 0032                  		move.b	$32(a0),d0
0000BF96 D068 0030                  		add.w	$30(a0),d0
0000BF9A 3140 000C                  		move.w	d0,$C(a0)
0000BF9E 4E75                       		rts	
0000BFA0                            ; ===========================================================================
0000BFA0                            
0000BFA0                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BFA0 4A68 0036                  		tst.w	$36(a0)
0000BFA4 6700                       		beq.s	loc_B938
0000BFA6 4A68 0038                  		tst.w	$38(a0)
0000BFAA 6700                       		beq.s	loc_B902
0000BFAC 5368 0038                  		subq.w	#1,$38(a0)
0000BFB0 6000                       		bra.s	loc_B97C
0000BFB2                            ; ===========================================================================
0000BFB2                            
0000BFB2                            loc_B902:
0000BFB2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BFB6 0200 000F                  		andi.b	#$F,d0
0000BFBA 6600                       		bne.s	loc_B91C
0000BFBC 4A28 0001                  		tst.b	1(a0)
0000BFC0 6A00                       		bpl.s	loc_B91C
0000BFC2 303C 00C7                  		move.w	#$C7,d0
0000BFC6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BFCC                            
0000BFCC                            loc_B91C:
0000BFCC 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFD2 6400                       		bcc.s	loc_B97C
0000BFD4 317C 0000 0032             		move.w	#0,$32(a0)
0000BFDA 317C 0000 0012             		move.w	#0,$12(a0)
0000BFE0 317C 0000 0036             		move.w	#0,$36(a0)
0000BFE6 6000                       		bra.s	loc_B97C
0000BFE8                            ; ===========================================================================
0000BFE8                            
0000BFE8                            loc_B938:				; XREF: Obj31_Type01
0000BFE8 3228 0034                  		move.w	$34(a0),d1
0000BFEC B268 0032                  		cmp.w	$32(a0),d1
0000BFF0 6700                       		beq.s	loc_B97C
0000BFF2 3028 0012                  		move.w	$12(a0),d0
0000BFF6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BFFC D168 0032                  		add.w	d0,$32(a0)
0000C000 B268 0032                  		cmp.w	$32(a0),d1
0000C004 6200                       		bhi.s	loc_B97C
0000C006 3141 0032                  		move.w	d1,$32(a0)
0000C00A 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C010 317C 0001 0036             		move.w	#1,$36(a0)
0000C016 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C01C 4A28 0001                  		tst.b	1(a0)
0000C020 6A00                       		bpl.s	loc_B97C
0000C022 303C 00BD                  		move.w	#$BD,d0
0000C026 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C02C                            
0000C02C                            loc_B97C:
0000C02C 6000 FF62                  		bra.w	Obj31_Restart
0000C030                            ; ===========================================================================
0000C030                            
0000C030                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C030 3038 D008                  		move.w	($FFFFD008).w,d0
0000C034 9068 0008                  		sub.w	8(a0),d0
0000C038 6400                       		bcc.s	loc_B98C
0000C03A 4440                       		neg.w	d0
0000C03C                            
0000C03C                            loc_B98C:
0000C03C 0C40 0090                  		cmpi.w	#$90,d0
0000C040 6400                       		bcc.s	loc_B996
0000C042 5228 0028                  		addq.b	#1,$28(a0)
0000C046                            
0000C046                            loc_B996:
0000C046 6000 FF48                  		bra.w	Obj31_Restart
0000C04A                            ; ===========================================================================
0000C04A                            ; ---------------------------------------------------------------------------
0000C04A                            ; Object 45 - spiked metal block from beta version (MZ)
0000C04A                            ; ---------------------------------------------------------------------------
0000C04A                            
0000C04A                            Obj45:					; XREF: Obj_Index
0000C04A 7000                       		moveq	#0,d0
0000C04C 1028 0024                  		move.b	$24(a0),d0
0000C050 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C054 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C058                            ; ===========================================================================
0000C058 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C05A 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C05C 0000                       		dc.w loc_BA8E-Obj45_Index
0000C05E 0000                       		dc.w Obj45_Display-Obj45_Index
0000C060 0000                       		dc.w loc_BA7A-Obj45_Index
0000C062                            
0000C062 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C065 04E4 01                    		dc.b	4, $E4,	  1
0000C068 0834 03                    		dc.b	8, $34,	  3
0000C06B 0628 02                    		dc.b	6, $28,	  2
0000C06E                            
0000C06E 3800                       word_B9BE:	dc.w $3800
0000C070 A000                       		dc.w -$6000
0000C072 5000                       		dc.w $5000
0000C074                            ; ===========================================================================
0000C074                            
0000C074                            Obj45_Main:				; XREF: Obj45_Index
0000C074 7000                       		moveq	#0,d0
0000C076 1028 0028                  		move.b	$28(a0),d0
0000C07A D040                       		add.w	d0,d0
0000C07C 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C080 45F9 0000 C062             		lea	(Obj45_Var).l,a2
0000C086 2248                       		movea.l	a0,a1
0000C088 7203                       		moveq	#3,d1
0000C08A 6000                       		bra.s	Obj45_Load
0000C08C                            ; ===========================================================================
0000C08C                            
0000C08C                            Obj45_Loop:
0000C08C 6100 0000                  		bsr.w	SingleObjLoad2
0000C090 6600                       		bne.s	loc_BA52
0000C092                            
0000C092                            Obj45_Load:				; XREF: Obj45_Main
0000C092 135A 0024                  		move.b	(a2)+,$24(a1)
0000C096 12BC 0045                  		move.b	#$45,0(a1)
0000C09A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C0A0 101A                       		move.b	(a2)+,d0
0000C0A2 4880                       		ext.w	d0
0000C0A4 D068 0008                  		add.w	8(a0),d0
0000C0A8 3340 0008                  		move.w	d0,8(a1)
0000C0AC 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C0B4 337C 0300 0002             		move.w	#$300,2(a1)
0000C0BA 137C 0004 0001             		move.b	#4,1(a1)
0000C0C0 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C0C6 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C0CC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C0D2 137C 0020 0019             		move.b	#$20,$19(a1)
0000C0D8 3342 0034                  		move.w	d2,$34(a1)
0000C0DC 137C 0004 0018             		move.b	#4,$18(a1)
0000C0E2 0C12 0001                  		cmpi.b	#1,(a2)
0000C0E6 6600                       		bne.s	loc_BA40
0000C0E8 137C 0091 0020             		move.b	#$91,$20(a1)
0000C0EE                            
0000C0EE                            loc_BA40:
0000C0EE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C0F2 2348 003C                  		move.l	a0,$3C(a1)
0000C0F6 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C0FA                            
0000C0FA 137C 0003 0018             		move.b	#3,$18(a1)
0000C100                            
0000C100                            loc_BA52:
0000C100 117C 0010 0019             		move.b	#$10,$19(a0)
0000C106                            
0000C106                            Obj45_Solid:				; XREF: Obj45_Index
0000C106 3F28 0008                  		move.w	8(a0),-(sp)
0000C10A 6100 0000                  		bsr.w	Obj45_Move
0000C10E 323C 0017                  		move.w	#$17,d1
0000C112 343C 0020                  		move.w	#$20,d2
0000C116 363C 0020                  		move.w	#$20,d3
0000C11A 381F                       		move.w	(sp)+,d4
0000C11C 6100 0000                  		bsr.w	SolidObject
0000C120 6100 0000                  		bsr.w	DisplaySprite
0000C124 6000 0000                  		bra.w	Obj45_ChkDel
0000C128                            ; ===========================================================================
0000C128                            
0000C128                            loc_BA7A:				; XREF: Obj45_Index
0000C128 2268 003C                  		movea.l	$3C(a0),a1
0000C12C 1029 0032                  		move.b	$32(a1),d0
0000C130 0600 0010                  		addi.b	#$10,d0
0000C134 EA08                       		lsr.b	#5,d0
0000C136 5600                       		addq.b	#3,d0
0000C138 1140 001A                  		move.b	d0,$1A(a0)
0000C13C                            
0000C13C                            loc_BA8E:				; XREF: Obj45_Index
0000C13C 2268 003C                  		movea.l	$3C(a0),a1
0000C140 7000                       		moveq	#0,d0
0000C142 1029 0032                  		move.b	$32(a1),d0
0000C146 4440                       		neg.w	d0
0000C148 D068 0030                  		add.w	$30(a0),d0
0000C14C 3140 0008                  		move.w	d0,8(a0)
0000C150                            
0000C150                            Obj45_Display:				; XREF: Obj45_Index
0000C150 6100 0000                  		bsr.w	DisplaySprite
0000C154                            
0000C154                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C154 3028 003A                  		move.w	$3A(a0),d0
0000C158 0240 FF80                  		andi.w	#$FF80,d0
0000C15C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C160 0441 0080                  		subi.w	#$80,d1
0000C164 0241 FF80                  		andi.w	#$FF80,d1
0000C168 9041                       		sub.w	d1,d0
0000C16A 0C40 0280                  		cmpi.w	#$280,d0
0000C16E 6200 0000                  		bhi.w	DeleteObject
0000C172 4E75                       		rts	
0000C174                            
0000C174                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C174                            
0000C174                            
0000C174                            Obj45_Move:				; XREF: Obj45_Solid
0000C174 7000                       		moveq	#0,d0
0000C176 1028 0028                  		move.b	$28(a0),d0
0000C17A D040                       		add.w	d0,d0
0000C17C 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C180 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C184                            ; End of function Obj45_Move
0000C184                            
0000C184                            ; ===========================================================================
0000C184 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C186 0000                       		dc.w loc_BADA-off_BAD6
0000C188                            ; ===========================================================================
0000C188                            
0000C188                            loc_BADA:				; XREF: off_BAD6
0000C188 4A68 0036                  		tst.w	$36(a0)
0000C18C 6700                       		beq.s	loc_BB08
0000C18E 4A68 0038                  		tst.w	$38(a0)
0000C192 6700                       		beq.s	loc_BAEC
0000C194 5368 0038                  		subq.w	#1,$38(a0)
0000C198 6000                       		bra.s	loc_BB3C
0000C19A                            ; ===========================================================================
0000C19A                            
0000C19A                            loc_BAEC:
0000C19A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C1A0 6400                       		bcc.s	loc_BB3C
0000C1A2 317C 0000 0032             		move.w	#0,$32(a0)
0000C1A8 317C 0000 0010             		move.w	#0,$10(a0)
0000C1AE 317C 0000 0036             		move.w	#0,$36(a0)
0000C1B4 6000                       		bra.s	loc_BB3C
0000C1B6                            ; ===========================================================================
0000C1B6                            
0000C1B6                            loc_BB08:				; XREF: loc_BADA
0000C1B6 3228 0034                  		move.w	$34(a0),d1
0000C1BA B268 0032                  		cmp.w	$32(a0),d1
0000C1BE 6700                       		beq.s	loc_BB3C
0000C1C0 3028 0010                  		move.w	$10(a0),d0
0000C1C4 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C1CA D168 0032                  		add.w	d0,$32(a0)
0000C1CE B268 0032                  		cmp.w	$32(a0),d1
0000C1D2 6200                       		bhi.s	loc_BB3C
0000C1D4 3141 0032                  		move.w	d1,$32(a0)
0000C1D8 317C 0000 0010             		move.w	#0,$10(a0)
0000C1DE 317C 0001 0036             		move.w	#1,$36(a0)
0000C1E4 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C1EA                            
0000C1EA                            loc_BB3C:
0000C1EA 7000                       		moveq	#0,d0
0000C1EC 1028 0032                  		move.b	$32(a0),d0
0000C1F0 4440                       		neg.w	d0
0000C1F2 D068 0030                  		add.w	$30(a0),d0
0000C1F6 3140 0008                  		move.w	d0,8(a0)
0000C1FA 4E75                       		rts	
0000C1FC                            ; ===========================================================================
0000C1FC                            ; ---------------------------------------------------------------------------
0000C1FC                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C1FC                            ; ---------------------------------------------------------------------------
0000C1FC                            Map_obj31:
0000C1FC                            	include "_maps\obj31.asm"
0000C1FC                            ; ---------------------------------------------------------------------------
0000C1FC                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C1FC                            ; ---------------------------------------------------------------------------
0000C1FC 0000                       		dc.w byte_BB64-Map_obj31
0000C1FE 0000                       		dc.w byte_BB7E-Map_obj31
0000C200 0000                       		dc.w byte_BB98-Map_obj31
0000C202 0000                       		dc.w byte_BB9E-Map_obj31
0000C204 0000                       		dc.w byte_BBA9-Map_obj31
0000C206 0000                       		dc.w byte_BBBE-Map_obj31
0000C208 0000                       		dc.w byte_BBDD-Map_obj31
0000C20A 0000                       		dc.w byte_BC06-Map_obj31
0000C20C 0000                       		dc.w byte_BC06-Map_obj31
0000C20E 0000                       		dc.w byte_BC39-Map_obj31
0000C210 0000                       		dc.w byte_BC53-Map_obj31
0000C212 05                         byte_BB64:	dc.b 5
0000C213 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C218 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C21D EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C222 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C227 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C22C 05                         byte_BB7E:	dc.b 5
0000C22D F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C232 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C237 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C23C F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C241 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C246 01                         byte_BB98:	dc.b 1
0000C247 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C24C 02                         byte_BB9E:	dc.b 2
0000C24D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C252 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C257 04                         byte_BBA9:	dc.b 4
0000C258 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C25D F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C262 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C267 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C26C 06                         byte_BBBE:	dc.b 6
0000C26D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C272 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C277 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C27C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C281 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C286 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C28B 08                         byte_BBDD:	dc.b 8
0000C28C A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C291 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C296 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C29B D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C2A0 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C2A5 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C2AA 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2AF 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2B4 0A                         byte_BC06:	dc.b $A
0000C2B5 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C2BA 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C2BF A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C2C4 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C2C9 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C2CE D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C2D3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C2D8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C2DD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2E2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2E7 05                         byte_BC39:	dc.b 5
0000C2E8 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C2ED F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C2F2 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C2F7 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C2FC EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C301 01                         byte_BC53:	dc.b 1
0000C302 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C308 00                         		even
0000C308 00                         		even
0000C308                            
0000C308                            ; ---------------------------------------------------------------------------
0000C308                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C308                            ; ---------------------------------------------------------------------------
0000C308                            Map_obj45:
0000C308                            	include "_maps\obj45.asm"
0000C308                            ; ---------------------------------------------------------------------------
0000C308                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C308                            ; ---------------------------------------------------------------------------
0000C308 0000                       		dc.w byte_BC6C-Map_obj45
0000C30A 0000                       		dc.w byte_BC7C-Map_obj45
0000C30C 0000                       		dc.w byte_BC8C-Map_obj45
0000C30E 0000                       		dc.w byte_BC92-Map_obj45
0000C310 0000                       		dc.w byte_BC9D-Map_obj45
0000C312 0000                       		dc.w byte_BCB2-Map_obj45
0000C314 0000                       		dc.w byte_BCD1-Map_obj45
0000C316 0000                       		dc.w byte_BCFA-Map_obj45
0000C318 0000                       		dc.w byte_BCFA-Map_obj45
0000C31A 03                         byte_BC6C:	dc.b 3
0000C31B E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C320 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C325 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C32A 03                         byte_BC7C:	dc.b 3
0000C32B E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C330 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C335 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C33A 01                         byte_BC8C:	dc.b 1
0000C33B F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C340 02                         byte_BC92:	dc.b 2
0000C341 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C346 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C34B 04                         byte_BC9D:	dc.b 4
0000C34C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C351 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C356 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C35B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C360 06                         byte_BCB2:	dc.b 6
0000C361 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C366 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C36B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C370 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C375 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C37A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C37F 08                         byte_BCD1:	dc.b 8
0000C380 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C385 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C38A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C38F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C394 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C399 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C39E F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C3A3 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C3A8 08                         byte_BCFA:	dc.b 8
0000C3A9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3AE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3B3 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3B8 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C3BD F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C3C2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C3C7 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C3CC F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C3D1 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C3D6 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C3DC 00                         		even
0000C3DC 00                         		even
0000C3DC                            
0000C3DC                            ; ===========================================================================
0000C3DC                            ; ---------------------------------------------------------------------------
0000C3DC                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C3DC                            ; ---------------------------------------------------------------------------
0000C3DC                            
0000C3DC                            Obj32:					; XREF: Obj_Index
0000C3DC 7000                       		moveq	#0,d0
0000C3DE 1028 0024                  		move.b	$24(a0),d0
0000C3E2 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C3E6 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C3EA                            ; ===========================================================================
0000C3EA 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C3EC 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C3EE                            ; ===========================================================================
0000C3EE                            
0000C3EE                            Obj32_Main:				; XREF: Obj32_Index
0000C3EE 5428 0024                  		addq.b	#2,$24(a0)
0000C3F2 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C3FA 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C400 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C406 6700                       		beq.s	loc_BD60
0000C408 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C40E                            
0000C40E                            loc_BD60:
0000C40E 117C 0004 0001             		move.b	#4,1(a0)
0000C414 117C 0010 0019             		move.b	#$10,$19(a0)
0000C41A 117C 0004 0018             		move.b	#4,$18(a0)
0000C420 5668 000C                  		addq.w	#3,$C(a0)
0000C424                            
0000C424                            Obj32_Pressed:				; XREF: Obj32_Index
0000C424 4A28 0001                  		tst.b	1(a0)
0000C428 6A00                       		bpl.s	Obj32_Display
0000C42A 323C 001B                  		move.w	#$1B,d1
0000C42E 343C 0005                  		move.w	#5,d2
0000C432 363C 0005                  		move.w	#5,d3
0000C436 3828 0008                  		move.w	8(a0),d4
0000C43A 6100 0000                  		bsr.w	SolidObject
0000C43E 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C444 1028 0028                  		move.b	$28(a0),d0
0000C448 0240 000F                  		andi.w	#$F,d0
0000C44C 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C450 47F3 0000                  		lea	(a3,d0.w),a3
0000C454 7600                       		moveq	#0,d3
0000C456 0828 0006 0028             		btst	#6,$28(a0)
0000C45C 6700                       		beq.s	loc_BDB2
0000C45E 7607                       		moveq	#7,d3
0000C460                            
0000C460                            loc_BDB2:
0000C460 4A28 0028                  		tst.b	$28(a0)
0000C464 6A00                       		bpl.s	loc_BDBE
0000C466 6100 0000                  		bsr.w	Obj32_MZBlock
0000C46A 6600                       		bne.s	loc_BDC8
0000C46C                            
0000C46C                            loc_BDBE:
0000C46C 4A28 0025                  		tst.b	$25(a0)
0000C470 6600                       		bne.s	loc_BDC8
0000C472 0793                       		bclr	d3,(a3)
0000C474 6000                       		bra.s	loc_BDDE
0000C476                            ; ===========================================================================
0000C476                            
0000C476                            loc_BDC8:
0000C476 4A13                       		tst.b	(a3)
0000C478 6600                       		bne.s	loc_BDD6
0000C47A 303C 00CD                  		move.w	#$CD,d0
0000C47E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play switch sound
0000C484                            
0000C484                            loc_BDD6:
0000C484 07D3                       		bset	d3,(a3)
0000C486 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C48C                            
0000C48C                            loc_BDDE:
0000C48C 0828 0005 0028             		btst	#5,$28(a0)
0000C492 6700                       		beq.s	Obj32_Display
0000C494 5328 001E                  		subq.b	#1,$1E(a0)
0000C498 6A00                       		bpl.s	Obj32_Display
0000C49A 117C 0007 001E             		move.b	#7,$1E(a0)
0000C4A0 0868 0001 001A             		bchg	#1,$1A(a0)
0000C4A6                            
0000C4A6                            Obj32_Display:
0000C4A6 6100 0000                  		bsr.w	DisplaySprite
0000C4AA 3028 0008                  		move.w	8(a0),d0
0000C4AE 0240 FF80                  		andi.w	#$FF80,d0
0000C4B2 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4B6 0441 0080                  		subi.w	#$80,d1
0000C4BA 0241 FF80                  		andi.w	#$FF80,d1
0000C4BE 9041                       		sub.w	d1,d0
0000C4C0 0C40 0280                  		cmpi.w	#$280,d0
0000C4C4 6200 0000                  		bhi.w	Obj32_Delete
0000C4C8 4E75                       		rts	
0000C4CA                            ; ===========================================================================
0000C4CA                            
0000C4CA                            Obj32_Delete:
0000C4CA 6100 0000                  		bsr.w	DeleteObject
0000C4CE 4E75                       		rts	
0000C4D0                            
0000C4D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C4D0                            
0000C4D0                            
0000C4D0                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C4D0 3F03                       		move.w	d3,-(sp)
0000C4D2 3428 0008                  		move.w	8(a0),d2
0000C4D6 3628 000C                  		move.w	$C(a0),d3
0000C4DA 0442 0010                  		subi.w	#$10,d2
0000C4DE 5143                       		subq.w	#8,d3
0000C4E0 383C 0020                  		move.w	#$20,d4
0000C4E4 3A3C 0010                  		move.w	#$10,d5
0000C4E8 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C4EC 3C3C 005F                  		move.w	#$5F,d6
0000C4F0                            
0000C4F0                            Obj32_MZLoop:
0000C4F0 4A29 0001                  		tst.b	1(a1)
0000C4F4 6A00                       		bpl.s	loc_BE4E
0000C4F6 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C4FA 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C4FC                            
0000C4FC                            loc_BE4E:
0000C4FC 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C500 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C504                            
0000C504 361F                       		move.w	(sp)+,d3
0000C506 7000                       		moveq	#0,d0
0000C508                            
0000C508                            locret_BE5A:
0000C508 4E75                       		rts	
0000C50A                            ; ===========================================================================
0000C50A 1010                       Obj32_MZData:	dc.b $10, $10
0000C50C                            ; ===========================================================================
0000C50C                            
0000C50C                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C50C 7001                       		moveq	#1,d0
0000C50E 0240 003F                  		andi.w	#$3F,d0
0000C512 D040                       		add.w	d0,d0
0000C514 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C518 121A                       		move.b	(a2)+,d1
0000C51A 4881                       		ext.w	d1
0000C51C 3029 0008                  		move.w	8(a1),d0
0000C520 9041                       		sub.w	d1,d0
0000C522 9042                       		sub.w	d2,d0
0000C524 6400                       		bcc.s	loc_BE80
0000C526 D241                       		add.w	d1,d1
0000C528 D041                       		add.w	d1,d0
0000C52A 6500                       		bcs.s	loc_BE84
0000C52C 60CE                       		bra.s	loc_BE4E
0000C52E                            ; ===========================================================================
0000C52E                            
0000C52E                            loc_BE80:
0000C52E B044                       		cmp.w	d4,d0
0000C530 62CA                       		bhi.s	loc_BE4E
0000C532                            
0000C532                            loc_BE84:
0000C532 121A                       		move.b	(a2)+,d1
0000C534 4881                       		ext.w	d1
0000C536 3029 000C                  		move.w	$C(a1),d0
0000C53A 9041                       		sub.w	d1,d0
0000C53C 9043                       		sub.w	d3,d0
0000C53E 6400                       		bcc.s	loc_BE9A
0000C540 D241                       		add.w	d1,d1
0000C542 D041                       		add.w	d1,d0
0000C544 6500                       		bcs.s	loc_BE9E
0000C546 60B4                       		bra.s	loc_BE4E
0000C548                            ; ===========================================================================
0000C548                            
0000C548                            loc_BE9A:
0000C548 B045                       		cmp.w	d5,d0
0000C54A 62B0                       		bhi.s	loc_BE4E
0000C54C                            
0000C54C                            loc_BE9E:
0000C54C 361F                       		move.w	(sp)+,d3
0000C54E 7001                       		moveq	#1,d0
0000C550 4E75                       		rts	
0000C552                            ; End of function Obj32_MZBlock
0000C552                            
0000C552                            ; ===========================================================================
0000C552                            ; ---------------------------------------------------------------------------
0000C552                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C552                            ; ---------------------------------------------------------------------------
0000C552                            Map_obj32:
0000C552                            	include "_maps\obj32.asm"
0000C552                            ; ---------------------------------------------------------------------------
0000C552                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C552                            ; ---------------------------------------------------------------------------
0000C552 0000                       		dc.w byte_BEAC-Map_obj32
0000C554 0000                       		dc.w byte_BEB7-Map_obj32
0000C556 0000                       		dc.w byte_BEC2-Map_obj32
0000C558 0000                       		dc.w byte_BEB7-Map_obj32
0000C55A 02                         byte_BEAC:	dc.b 2
0000C55B F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C560 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C565 02                         byte_BEB7:	dc.b 2
0000C566 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C56B F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C570 02                         byte_BEC2:	dc.b 2
0000C571 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C576 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C57B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C580                            		even
0000C580                            		even
0000C580                            
0000C580                            ; ===========================================================================
0000C580                            ; ---------------------------------------------------------------------------
0000C580                            ; Object 33 - pushable blocks (MZ, LZ)
0000C580                            ; ---------------------------------------------------------------------------
0000C580                            
0000C580                            Obj33:					; XREF: Obj_Index
0000C580 7000                       		moveq	#0,d0
0000C582 1028 0024                  		move.b	$24(a0),d0
0000C586 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C58A 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C58E                            ; ===========================================================================
0000C58E 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C590 0000                       		dc.w loc_BF6E-Obj33_Index
0000C592 0000                       		dc.w loc_C02C-Obj33_Index
0000C594                            
0000C594 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C596 4001                       		dc.b $40, 1
0000C598                            ; ===========================================================================
0000C598                            
0000C598                            Obj33_Main:				; XREF: Obj33_Index
0000C598 5428 0024                  		addq.b	#2,$24(a0)
0000C59C 117C 000F 0016             		move.b	#$F,$16(a0)
0000C5A2 117C 000F 0017             		move.b	#$F,$17(a0)
0000C5A8 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C5B0 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C5B6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C5BC 6600                       		bne.s	loc_BF16
0000C5BE 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C5C4                            
0000C5C4                            loc_BF16:
0000C5C4 117C 0004 0001             		move.b	#4,1(a0)
0000C5CA 117C 0003 0018             		move.b	#3,$18(a0)
0000C5D0 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C5D6 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C5DC 7000                       		moveq	#0,d0
0000C5DE 1028 0028                  		move.b	$28(a0),d0
0000C5E2 D040                       		add.w	d0,d0
0000C5E4 0240 000E                  		andi.w	#$E,d0
0000C5E8 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C5EC 115A 0019                  		move.b	(a2)+,$19(a0)
0000C5F0 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C5F4 4A28 0028                  		tst.b	$28(a0)
0000C5F8 6700                       		beq.s	Obj33_ChkGone
0000C5FA 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C600                            
0000C600                            Obj33_ChkGone:
0000C600 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C604 7000                       		moveq	#0,d0
0000C606 1028 0023                  		move.b	$23(a0),d0
0000C60A 6700                       		beq.s	loc_BF6E
0000C60C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C612 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C618 6600 0000                  		bne.w	DeleteObject
0000C61C                            
0000C61C                            loc_BF6E:				; XREF: Obj33_Index
0000C61C 4A28 0032                  		tst.b	$32(a0)
0000C620 6600 0000                  		bne.w	loc_C046
0000C624 7200                       		moveq	#0,d1
0000C626 1228 0019                  		move.b	$19(a0),d1
0000C62A 0641 000B                  		addi.w	#$B,d1
0000C62E 343C 0010                  		move.w	#$10,d2
0000C632 363C 0011                  		move.w	#$11,d3
0000C636 3828 0008                  		move.w	8(a0),d4
0000C63A 6100 0000                  		bsr.w	loc_C186
0000C63E 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C644 6600                       		bne.s	loc_BFC6	; if not, branch
0000C646 08A8 0007 0028             		bclr	#7,$28(a0)
0000C64C 3028 0008                  		move.w	8(a0),d0
0000C650 0C40 0A20                  		cmpi.w	#$A20,d0
0000C654 6500                       		bcs.s	loc_BFC6
0000C656 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C65A 6400                       		bcc.s	loc_BFC6
0000C65C 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C660 0440 001C                  		subi.w	#$1C,d0
0000C664 3140 000C                  		move.w	d0,$C(a0)
0000C668 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C66E 08E8 0007 0028             		bset	#7,$28(a0)
0000C674                            
0000C674                            loc_BFC6:
0000C674 3028 0008                  		move.w	8(a0),d0
0000C678 0240 FF80                  		andi.w	#$FF80,d0
0000C67C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C680 0441 0080                  		subi.w	#$80,d1
0000C684 0241 FF80                  		andi.w	#$FF80,d1
0000C688 9041                       		sub.w	d1,d0
0000C68A 0C40 0280                  		cmpi.w	#$280,d0
0000C68E 6200                       		bhi.s	loc_BFE6
0000C690 6000 0000                  		bra.w	DisplaySprite
0000C694                            ; ===========================================================================
0000C694                            
0000C694                            loc_BFE6:
0000C694 3028 0034                  		move.w	$34(a0),d0
0000C698 0240 FF80                  		andi.w	#$FF80,d0
0000C69C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C6A0 0441 0080                  		subi.w	#$80,d1
0000C6A4 0241 FF80                  		andi.w	#$FF80,d1
0000C6A8 9041                       		sub.w	d1,d0
0000C6AA 0C40 0280                  		cmpi.w	#$280,d0
0000C6AE 6200                       		bhi.s	loc_C016
0000C6B0 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C6B6 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C6BC 117C 0004 0024             		move.b	#4,$24(a0)
0000C6C2 6000                       		bra.s	loc_C02C
0000C6C4                            ; ===========================================================================
0000C6C4                            
0000C6C4                            loc_C016:
0000C6C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C6C8 7000                       		moveq	#0,d0
0000C6CA 1028 0023                  		move.b	$23(a0),d0
0000C6CE 6700                       		beq.s	loc_C028
0000C6D0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C6D6                            
0000C6D6                            loc_C028:
0000C6D6 6000 0000                  		bra.w	DeleteObject
0000C6DA                            ; ===========================================================================
0000C6DA                            
0000C6DA                            loc_C02C:				; XREF: Obj33_Index
0000C6DA 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C6DE 6700                       		beq.s	locret_C044
0000C6E0 117C 0002 0024             		move.b	#2,$24(a0)
0000C6E6 4228 0032                  		clr.b	$32(a0)
0000C6EA 4268 0010                  		clr.w	$10(a0)
0000C6EE 4268 0012                  		clr.w	$12(a0)
0000C6F2                            
0000C6F2                            locret_C044:
0000C6F2 4E75                       		rts	
0000C6F4                            ; ===========================================================================
0000C6F4                            
0000C6F4                            loc_C046:				; XREF: loc_BF6E
0000C6F4 3F28 0008                  		move.w	8(a0),-(sp)
0000C6F8 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C6FE 6400                       		bcc.s	loc_C056
0000C700 6100 0000                  		bsr.w	SpeedToPos
0000C704                            
0000C704                            loc_C056:
0000C704 0828 0001 0022             		btst	#1,$22(a0)
0000C70A 6700                       		beq.s	loc_C0A0
0000C70C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C712 4EB9 0000 0000             		jsr	ObjHitFloor
0000C718 4A41                       		tst.w	d1
0000C71A 6A00 0000                  		bpl.w	loc_C09E
0000C71E D368 000C                  		add.w	d1,$C(a0)
0000C722 4268 0012                  		clr.w	$12(a0)
0000C726 08A8 0001 0022             		bclr	#1,$22(a0)
0000C72C 3011                       		move.w	(a1),d0
0000C72E 0240 03FF                  		andi.w	#$3FF,d0
0000C732 0C40 016A                  		cmpi.w	#$16A,d0
0000C736 6500                       		bcs.s	loc_C09E
0000C738 3028 0030                  		move.w	$30(a0),d0
0000C73C E640                       		asr.w	#3,d0
0000C73E 3140 0010                  		move.w	d0,$10(a0)
0000C742 117C 0001 0032             		move.b	#1,$32(a0)
0000C748 4268 000E                  		clr.w	$E(a0)
0000C74C                            
0000C74C                            loc_C09E:
0000C74C 6000                       		bra.s	loc_C0E6
0000C74E                            ; ===========================================================================
0000C74E                            
0000C74E                            loc_C0A0:
0000C74E 4A68 0010                  		tst.w	$10(a0)
0000C752 6700 0000                  		beq.w	loc_C0D6
0000C756 6B00                       		bmi.s	loc_C0BC
0000C758 7600                       		moveq	#0,d3
0000C75A 1628 0019                  		move.b	$19(a0),d3
0000C75E 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C764 4A41                       		tst.w	d1		; has block touched a wall?
0000C766 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C768 6000                       		bra.s	loc_C0E6
0000C76A                            ; ===========================================================================
0000C76A                            
0000C76A                            loc_C0BC:
0000C76A 7600                       		moveq	#0,d3
0000C76C 1628 0019                  		move.b	$19(a0),d3
0000C770 4643                       		not.w	d3
0000C772 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C778 4A41                       		tst.w	d1		; has block touched a wall?
0000C77A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C77C 6000                       		bra.s	loc_C0E6
0000C77E                            ; ===========================================================================
0000C77E                            
0000C77E                            Obj33_StopPush:
0000C77E 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C782 6000                       		bra.s	loc_C0E6
0000C784                            ; ===========================================================================
0000C784                            
0000C784                            loc_C0D6:
0000C784 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C78C 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C792 6400                       		bcc.s	loc_C104
0000C794                            
0000C794                            loc_C0E6:
0000C794 7200                       		moveq	#0,d1
0000C796 1228 0019                  		move.b	$19(a0),d1
0000C79A 0641 000B                  		addi.w	#$B,d1
0000C79E 343C 0010                  		move.w	#$10,d2
0000C7A2 363C 0011                  		move.w	#$11,d3
0000C7A6 381F                       		move.w	(sp)+,d4
0000C7A8 6100 0000                  		bsr.w	loc_C186
0000C7AC 6100                       		bsr.s	Obj33_ChkLava
0000C7AE 6000 FEC4                  		bra.w	loc_BFC6
0000C7B2                            ; ===========================================================================
0000C7B2                            
0000C7B2                            loc_C104:
0000C7B2 381F                       		move.w	(sp)+,d4
0000C7B4 43F8 D000                  		lea	($FFFFD000).w,a1
0000C7B8 08A9 0003 0022             		bclr	#3,$22(a1)
0000C7BE 08A8 0003 0022             		bclr	#3,$22(a0)
0000C7C4 6000 FECE                  		bra.w	loc_BFE6
0000C7C8                            ; ===========================================================================
0000C7C8                            
0000C7C8                            Obj33_ChkLava:
0000C7C8 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C7CE 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C7D0 343C FFE0                  		move.w	#-$20,d2
0000C7D4 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C7DA 6700                       		beq.s	Obj33_LoadLava
0000C7DC 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C7E2 6700                       		beq.s	Obj33_LoadLava
0000C7E4 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C7EA 6700                       		beq.s	Obj33_LoadLava
0000C7EC 4E75                       		rts	
0000C7EE                            ; ===========================================================================
0000C7EE                            
0000C7EE                            Obj33_ChkLava2:
0000C7EE 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C7F4 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C7F6 343C 0020                  		move.w	#$20,d2
0000C7FA 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C800 6700                       		beq.s	Obj33_LoadLava
0000C802 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C808 6700                       		beq.s	Obj33_LoadLava
0000C80A                            
0000C80A                            Obj33_NoLava:
0000C80A 4E75                       		rts	
0000C80C                            ; ===========================================================================
0000C80C                            
0000C80C                            Obj33_LoadLava:
0000C80C 6100 0000                  		bsr.w	SingleObjLoad
0000C810 6600                       		bne.s	locret_C184
0000C812 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C816 3368 0008 0008             		move.w	8(a0),8(a1)
0000C81C D569 0008                  		add.w	d2,8(a1)
0000C820 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C826 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C82C 2348 003C                  		move.l	a0,$3C(a1)
0000C830                            
0000C830                            locret_C184:
0000C830 4E75                       		rts	
0000C832                            ; ===========================================================================
0000C832                            
0000C832                            loc_C186:				; XREF: loc_BF6E
0000C832 1028 0025                  		move.b	$25(a0),d0
0000C836 6700 0000                  		beq.w	loc_C218
0000C83A 5500                       		subq.b	#2,d0
0000C83C 6600                       		bne.s	loc_C1AA
0000C83E 6100 B31C                  		bsr.w	ExitPlatform
0000C842 0829 0003 0022             		btst	#3,$22(a1)
0000C848 6600                       		bne.s	loc_C1A4
0000C84A 4228 0025                  		clr.b	$25(a0)
0000C84E 4E75                       		rts	
0000C850                            ; ===========================================================================
0000C850                            
0000C850                            loc_C1A4:
0000C850 3404                       		move.w	d4,d2
0000C852 6000 B866                  		bra.w	MvSonicOnPtfm
0000C856                            ; ===========================================================================
0000C856                            
0000C856                            loc_C1AA:
0000C856 5500                       		subq.b	#2,d0
0000C858 6600                       		bne.s	loc_C1F2
0000C85A 6100 0000                  		bsr.w	SpeedToPos
0000C85E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C864 4EB9 0000 0000             		jsr	ObjHitFloor
0000C86A 4A41                       		tst.w	d1
0000C86C 6A00 0000                  		bpl.w	locret_C1F0
0000C870 D368 000C                  		add.w	d1,$C(a0)
0000C874 4268 0012                  		clr.w	$12(a0)
0000C878 4228 0025                  		clr.b	$25(a0)
0000C87C 3011                       		move.w	(a1),d0
0000C87E 0240 03FF                  		andi.w	#$3FF,d0
0000C882 0C40 016A                  		cmpi.w	#$16A,d0
0000C886 6500                       		bcs.s	locret_C1F0
0000C888 3028 0030                  		move.w	$30(a0),d0
0000C88C E640                       		asr.w	#3,d0
0000C88E 3140 0010                  		move.w	d0,$10(a0)
0000C892 117C 0001 0032             		move.b	#1,$32(a0)
0000C898 4268 000E                  		clr.w	$E(a0)
0000C89C                            
0000C89C                            locret_C1F0:
0000C89C 4E75                       		rts	
0000C89E                            ; ===========================================================================
0000C89E                            
0000C89E                            loc_C1F2:
0000C89E 6100 0000                  		bsr.w	SpeedToPos
0000C8A2 3028 0008                  		move.w	8(a0),d0
0000C8A6 0240 000C                  		andi.w	#$C,d0
0000C8AA 6600 0000                  		bne.w	locret_C2E4
0000C8AE 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C8B4 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C8BA 4268 0010                  		clr.w	$10(a0)
0000C8BE 5528 0025                  		subq.b	#2,$25(a0)
0000C8C2 4E75                       		rts	
0000C8C4                            ; ===========================================================================
0000C8C4                            
0000C8C4                            loc_C218:
0000C8C4 6100 0000                  		bsr.w	loc_FAC8
0000C8C8 4A44                       		tst.w	d4
0000C8CA 6700 0000                  		beq.w	locret_C2E4
0000C8CE 6B00 0000                  		bmi.w	locret_C2E4
0000C8D2 4A28 0032                  		tst.b	$32(a0)
0000C8D6 6700                       		beq.s	loc_C230
0000C8D8 6000 0000                  		bra.w	locret_C2E4
0000C8DC                            ; ===========================================================================
0000C8DC                            
0000C8DC                            loc_C230:
0000C8DC 4A40                       		tst.w	d0
0000C8DE 6700 0000                  		beq.w	locret_C2E4
0000C8E2 6B00                       		bmi.s	loc_C268
0000C8E4 0829 0000 0022             		btst	#0,$22(a1)
0000C8EA 6600 0000                  		bne.w	locret_C2E4
0000C8EE 3F00                       		move.w	d0,-(sp)
0000C8F0 7600                       		moveq	#0,d3
0000C8F2 1628 0019                  		move.b	$19(a0),d3
0000C8F6 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C8FC 301F                       		move.w	(sp)+,d0
0000C8FE 4A41                       		tst.w	d1
0000C900 6B00 0000                  		bmi.w	locret_C2E4
0000C904 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C90C 7001                       		moveq	#1,d0
0000C90E 323C 0040                  		move.w	#$40,d1
0000C912 6000                       		bra.s	loc_C294
0000C914                            ; ===========================================================================
0000C914                            
0000C914                            loc_C268:
0000C914 0829 0000 0022             		btst	#0,$22(a1)
0000C91A 6700                       		beq.s	locret_C2E4
0000C91C 3F00                       		move.w	d0,-(sp)
0000C91E 7600                       		moveq	#0,d3
0000C920 1628 0019                  		move.b	$19(a0),d3
0000C924 4643                       		not.w	d3
0000C926 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C92C 301F                       		move.w	(sp)+,d0
0000C92E 4A41                       		tst.w	d1
0000C930 6B00                       		bmi.s	locret_C2E4
0000C932 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C93A 70FF                       		moveq	#-1,d0
0000C93C 323C FFC0                  		move.w	#-$40,d1
0000C940                            
0000C940                            loc_C294:
0000C940 43F8 D000                  		lea	($FFFFD000).w,a1
0000C944 D169 0008                  		add.w	d0,8(a1)
0000C948 3341 0014                  		move.w	d1,$14(a1)
0000C94C 337C 0000 0010             		move.w	#0,$10(a1)
0000C952 3F00                       		move.w	d0,-(sp)
0000C954 303C 00A7                  		move.w	#$A7,d0
0000C958 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C95E 301F                       		move.w	(sp)+,d0
0000C960 4A28 0028                  		tst.b	$28(a0)
0000C964 6B00                       		bmi.s	locret_C2E4
0000C966 3F00                       		move.w	d0,-(sp)
0000C968 4EB9 0000 0000             		jsr	ObjHitFloor
0000C96E 301F                       		move.w	(sp)+,d0
0000C970 0C41 0004                  		cmpi.w	#4,d1
0000C974 6F00                       		ble.s	loc_C2E0
0000C976 317C 0400 0010             		move.w	#$400,$10(a0)
0000C97C 4A40                       		tst.w	d0
0000C97E 6A00                       		bpl.s	loc_C2D8
0000C980 4468 0010                  		neg.w	$10(a0)
0000C984                            
0000C984                            loc_C2D8:
0000C984 117C 0006 0025             		move.b	#6,$25(a0)
0000C98A 6000                       		bra.s	locret_C2E4
0000C98C                            ; ===========================================================================
0000C98C                            
0000C98C                            loc_C2E0:
0000C98C D368 000C                  		add.w	d1,$C(a0)
0000C990                            
0000C990                            locret_C2E4:
0000C990 4E75                       		rts	
0000C992                            ; ===========================================================================
0000C992                            ; ---------------------------------------------------------------------------
0000C992                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C992                            ; ---------------------------------------------------------------------------
0000C992                            Map_obj33:
0000C992                            	include "_maps\obj33.asm"
0000C992                            ; ---------------------------------------------------------------------------
0000C992                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C992                            ; ---------------------------------------------------------------------------
0000C992 0000                       		dc.w byte_C2EA-Map_obj33
0000C994 0000                       		dc.w byte_C2F0-Map_obj33
0000C996 01                         byte_C2EA:	dc.b 1
0000C997 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C99C 04                         byte_C2F0:	dc.b 4
0000C99D F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C9A2 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C9A7 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C9AC F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C9B2 00                         		even
0000C9B2 00                         		even
0000C9B2                            
0000C9B2                            ; ===========================================================================
0000C9B2                            ; ---------------------------------------------------------------------------
0000C9B2                            ; Object 34 - zone title cards
0000C9B2                            ; ---------------------------------------------------------------------------
0000C9B2                            
0000C9B2                            Obj34:					; XREF: Obj_Index
0000C9B2 7000                       		moveq	#0,d0
0000C9B4 1028 0024                  		move.b	$24(a0),d0
0000C9B8 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C9BC 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C9C0                            ; ===========================================================================
0000C9C0 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C9C2 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C9C4 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C9C6 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C9C8                            ; ===========================================================================
0000C9C8                            
0000C9C8                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C9C8 2248                       		movea.l	a0,a1
0000C9CA 7000                       		moveq	#0,d0
0000C9CC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C9D0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C9D6 6600                       		bne.s	Obj34_CheckFZ
0000C9D8 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C9DA                            
0000C9DA                            Obj34_CheckFZ:
0000C9DA 3400                       		move.w	d0,d2
0000C9DC 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C9E2 6600                       		bne.s	Obj34_LoadConfig
0000C9E4 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C9E6 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C9E8                            
0000C9E8                            Obj34_LoadConfig:
0000C9E8 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C9EE E948                       		lsl.w	#4,d0
0000C9F0 D6C0                       		adda.w	d0,a3
0000C9F2 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C9F8 7203                       		moveq	#3,d1
0000C9FA                            
0000C9FA                            Obj34_Loop:
0000C9FA 12BC 0034                  		move.b	#$34,0(a1)
0000C9FE 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CA02 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CA06 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CA0A 335A 000A                  		move.w	(a2)+,$A(a1)
0000CA0E 135A 0024                  		move.b	(a2)+,$24(a1)
0000CA12 101A                       		move.b	(a2)+,d0
0000CA14 6600                       		bne.s	Obj34_ActNumber
0000CA16 1002                       		move.b	d2,d0
0000CA18                            
0000CA18                            Obj34_ActNumber:
0000CA18 0C00 0007                  		cmpi.b	#7,d0
0000CA1C 6600                       		bne.s	Obj34_MakeSprite
0000CA1E D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CA22 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CA28 6600                       		bne.s	Obj34_MakeSprite
0000CA2A 5300                       		subq.b	#1,d0
0000CA2C                            
0000CA2C                            Obj34_MakeSprite:
0000CA2C 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CA30 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CA38 337C 8580 0002             		move.w	#$8580,2(a1)
0000CA3E 137C 0078 0019             		move.b	#$78,$19(a1)
0000CA44 137C 0000 0001             		move.b	#0,1(a1)
0000CA4A 137C 0000 0018             		move.b	#0,$18(a1)
0000CA50 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CA56 43E9 0040                  		lea	$40(a1),a1	; next object
0000CA5A 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CA5E                            
0000CA5E                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CA5E 7210                       		moveq	#$10,d1		; set horizontal speed
0000CA60 3028 0030                  		move.w	$30(a0),d0
0000CA64 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CA68 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CA6A 6C00                       		bge.s	Obj34_Move
0000CA6C 4441                       		neg.w	d1
0000CA6E                            
0000CA6E                            Obj34_Move:
0000CA6E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CA72                            
0000CA72                            loc_C3C8:
0000CA72 3028 0008                  		move.w	8(a0),d0
0000CA76 6B00                       		bmi.s	locret_C3D8
0000CA78 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CA7C 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CA7E 6000 0000                  		bra.w	DisplaySprite
0000CA82                            ; ===========================================================================
0000CA82                            
0000CA82                            locret_C3D8:
0000CA82 4E75                       		rts	
0000CA84                            ; ===========================================================================
0000CA84                            
0000CA84                            Obj34_Wait:				; XREF: Obj34_Index
0000CA84 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CA88 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CA8A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CA8E 6000 0000                  		bra.w	DisplaySprite
0000CA92                            ; ===========================================================================
0000CA92                            
0000CA92                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CA92 4A28 0001                  		tst.b	1(a0)
0000CA96 6A00                       		bpl.s	Obj34_ChangeArt
0000CA98 7220                       		moveq	#$20,d1
0000CA9A 3028 0032                  		move.w	$32(a0),d0
0000CA9E B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CAA2 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CAA4 6C00                       		bge.s	Obj34_Move2
0000CAA6 4441                       		neg.w	d1
0000CAA8                            
0000CAA8                            Obj34_Move2:
0000CAA8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CAAC 3028 0008                  		move.w	8(a0),d0
0000CAB0 6B00                       		bmi.s	locret_C412
0000CAB2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CAB6 6400                       		bcc.s	locret_C412	; if yes, branch
0000CAB8 6000 0000                  		bra.w	DisplaySprite
0000CABC                            ; ===========================================================================
0000CABC                            
0000CABC                            locret_C412:
0000CABC 4E75                       		rts	
0000CABE                            ; ===========================================================================
0000CABE                            
0000CABE                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CABE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CAC4 6600                       		bne.s	Obj34_Delete
0000CAC6 7002                       		moveq	#2,d0
0000CAC8 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000CACE 7000                       		moveq	#0,d0
0000CAD0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CAD4 0640 0015                  		addi.w	#$15,d0
0000CAD8 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns
0000CADE                            
0000CADE                            Obj34_Delete:
0000CADE 6000 0000                  		bra.w	DeleteObject
0000CAE2                            ; ===========================================================================
0000CAE2 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CAE4 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CAE6 00E4                       		dc.w $E4
0000CAE8 0206                       		dc.b 2,	6
0000CAEA 00EA                       		dc.w $EA
0000CAEC 0207                       		dc.b 2,	7
0000CAEE 00E0                       		dc.w $E0
0000CAF0 020A                       		dc.b 2,	$A
0000CAF2                            ; ---------------------------------------------------------------------------
0000CAF2                            ; Title	card configuration data
0000CAF2                            ; Format:
0000CAF2                            ; 4 bytes per item (YYYY XXXX)
0000CAF2                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CAF2                            ; ---------------------------------------------------------------------------
0000CAF2 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CB02 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CB12 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CB22 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CB32 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CB42 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CB52 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CB62                            ; ===========================================================================
0000CB62                            ; ---------------------------------------------------------------------------
0000CB62                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CB62                            ; ---------------------------------------------------------------------------
0000CB62                            
0000CB62                            Obj39:					; XREF: Obj_Index
0000CB62 7000                       		moveq	#0,d0
0000CB64 1028 0024                  		move.b	$24(a0),d0
0000CB68 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CB6C 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CB70                            ; ===========================================================================
0000CB70 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CB72 0000                       		dc.w loc_C50C-Obj39_Index
0000CB74 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CB76                            ; ===========================================================================
0000CB76                            
0000CB76                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CB76 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CB7A 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CB7C 4E75                       		rts	
0000CB7E                            ; ===========================================================================
0000CB7E                            
0000CB7E                            Obj39_Main:
0000CB7E 5428 0024                  		addq.b	#2,$24(a0)
0000CB82 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CB88 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CB8E 6700                       		beq.s	loc_C4EC	; if not, branch
0000CB90 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CB96                            
0000CB96                            loc_C4EC:
0000CB96 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CB9C 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CBA4 317C 855E 0002             		move.w	#$855E,2(a0)
0000CBAA 117C 0000 0001             		move.b	#0,1(a0)
0000CBB0 117C 0000 0018             		move.b	#0,$18(a0)
0000CBB6                            
0000CBB6                            loc_C50C:				; XREF: Obj39_Index
0000CBB6 7210                       		moveq	#$10,d1		; set horizontal speed
0000CBB8 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CBBE 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CBC0 6500                       		bcs.s	Obj39_Move
0000CBC2 4441                       		neg.w	d1
0000CBC4                            
0000CBC4                            Obj39_Move:
0000CBC4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CBC8 6000 0000                  		bra.w	DisplaySprite
0000CBCC                            ; ===========================================================================
0000CBCC                            
0000CBCC                            Obj39_SetWait:				; XREF: Obj39_Main
0000CBCC 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CBD2 5428 0024                  		addq.b	#2,$24(a0)
0000CBD6 4E75                       		rts	
0000CBD8                            ; ===========================================================================
0000CBD8                            
0000CBD8                            Obj39_Wait:				; XREF: Obj39_Index
0000CBD8 1038 F605                  		move.b	($FFFFF605).w,d0
0000CBDC 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CBE0 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CBE2 0828 0000 001A             		btst	#0,$1A(a0)
0000CBE8 6600                       		bne.s	Obj39_Display
0000CBEA 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CBEE 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CBF0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CBF4 6000 0000                  		bra.w	DisplaySprite
0000CBF8                            ; ===========================================================================
0000CBF8                            
0000CBF8                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CBF8 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CBFC 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CBFE 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CC04 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CC08 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CC0A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CC10 6000                       		bra.s	Obj39_Display
0000CC12                            ; ===========================================================================
0000CC12                            
0000CC12                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CC12 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CC18                            
0000CC18                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CC18 6000 0000                  		bra.w	DisplaySprite
0000CC1C                            ; ===========================================================================
0000CC1C                            ; ---------------------------------------------------------------------------
0000CC1C                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CC1C                            ; ---------------------------------------------------------------------------
0000CC1C                            
0000CC1C                            Obj3A:					; XREF: Obj_Index
0000CC1C 7000                       		moveq	#0,d0
0000CC1E 1028 0024                  		move.b	$24(a0),d0
0000CC22 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CC26 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CC2A                            ; ===========================================================================
0000CC2A 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CC2C 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CC2E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC30 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CC32 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC34 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CC36 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC38 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CC3A 0000                       		dc.w loc_C766-Obj3A_Index
0000CC3C                            ; ===========================================================================
0000CC3C                            
0000CC3C                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CC3C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC40 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CC42 4E75                       		rts	
0000CC44                            ; ===========================================================================
0000CC44                            
0000CC44                            Obj3A_Main:
0000CC44 2248                       		movea.l	a0,a1
0000CC46 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CC4C 7206                       		moveq	#6,d1
0000CC4E                            
0000CC4E                            Obj3A_Loop:
0000CC4E 12BC 003A                  		move.b	#$3A,0(a1)
0000CC52 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CC56 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CC5A 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CC5E 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CC62 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC66 101A                       		move.b	(a2)+,d0
0000CC68 0C00 0006                  		cmpi.b	#6,d0
0000CC6C 6600                       		bne.s	loc_C5CA
0000CC6E D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CC72                            
0000CC72                            loc_C5CA:
0000CC72 1340 001A                  		move.b	d0,$1A(a1)
0000CC76 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CC7E 337C 8580 0002             		move.w	#$8580,2(a1)
0000CC84 137C 0000 0001             		move.b	#0,1(a1)
0000CC8A 43E9 0040                  		lea	$40(a1),a1
0000CC8E 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CC92                            
0000CC92                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CC92 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC94 3028 0030                  		move.w	$30(a0),d0
0000CC98 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CC9C 6700                       		beq.s	loc_C61A	; if yes, branch
0000CC9E 6C00                       		bge.s	Obj3A_Move
0000CCA0 4441                       		neg.w	d1
0000CCA2                            
0000CCA2                            Obj3A_Move:
0000CCA2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCA6                            
0000CCA6                            loc_C5FE:				; XREF: loc_C61A
0000CCA6 3028 0008                  		move.w	8(a0),d0
0000CCAA 6B00                       		bmi.s	locret_C60E
0000CCAC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCB0 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CCB2 6000 0000                  		bra.w	DisplaySprite
0000CCB6                            ; ===========================================================================
0000CCB6                            
0000CCB6                            locret_C60E:
0000CCB6 4E75                       		rts	
0000CCB8                            ; ===========================================================================
0000CCB8                            
0000CCB8                            loc_C610:				; XREF: loc_C61A
0000CCB8 117C 000E 0024             		move.b	#$E,$24(a0)
0000CCBE 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CCC2                            ; ===========================================================================
0000CCC2                            
0000CCC2                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CCC2 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CCC8 67EE                       		beq.s	loc_C610
0000CCCA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CCD0 66D4                       		bne.s	loc_C5FE
0000CCD2 5428 0024                  		addq.b	#2,$24(a0)
0000CCD6 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CCDC                            
0000CCDC                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CCDC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CCE0 6600                       		bne.s	Obj3A_Display
0000CCE2 5428 0024                  		addq.b	#2,$24(a0)
0000CCE6                            
0000CCE6                            Obj3A_Display:
0000CCE6 6000 0000                  		bra.w	DisplaySprite
0000CCEA                            ; ===========================================================================
0000CCEA                            
0000CCEA                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CCEA 6100 0000                  		bsr.w	DisplaySprite
0000CCEE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CCF4 7000                       		moveq	#0,d0
0000CCF6 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CCFA 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CCFC 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CD00 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CD06                            
0000CD06                            Obj3A_RingBonus:
0000CD06 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CD0A 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CD0C 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CD10 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CD16                            
0000CD16                            Obj3A_ChkBonus:
0000CD16 4A40                       		tst.w	d0		; is there any bonus?
0000CD18 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CD1A 303C 00C5                  		move.w	#$C5,d0
0000CD1E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CD24 5428 0024                  		addq.b	#2,$24(a0)
0000CD28 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CD2E 6600                       		bne.s	Obj3A_SetDelay
0000CD30 5828 0024                  		addq.b	#4,$24(a0)
0000CD34                            
0000CD34                            Obj3A_SetDelay:
0000CD34 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD3A                            
0000CD3A                            locret_C692:
0000CD3A 4E75                       		rts	
0000CD3C                            ; ===========================================================================
0000CD3C                            
0000CD3C                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CD3C 4EB9 0000 0000             		jsr	AddPoints
0000CD42 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CD46 0200 0003                  		andi.b	#3,d0
0000CD4A 66EE                       		bne.s	locret_C692
0000CD4C 303C 00CD                  		move.w	#$CD,d0
0000CD50 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CD56                            ; ===========================================================================
0000CD56                            
0000CD56                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CD56 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CD5A 0240 0007                  		andi.w	#7,d0
0000CD5E E748                       		lsl.w	#3,d0
0000CD60 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CD64 0241 0003                  		andi.w	#3,d1
0000CD68 D241                       		add.w	d1,d1
0000CD6A D041                       		add.w	d1,d0
0000CD6C 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CD70 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CD74 4A40                       		tst.w	d0
0000CD76 6600                       		bne.s	Obj3A_ChkSS
0000CD78 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CD7E 6000                       		bra.s	Obj3A_Display2
0000CD80                            ; ===========================================================================
0000CD80                            
0000CD80                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CD80 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CD84 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CD88 6700                       		beq.s	loc_C6EA	; if not, branch
0000CD8A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CD90 6000                       		bra.s	Obj3A_Display2
0000CD92                            ; ===========================================================================
0000CD92                            
0000CD92                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CD92 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CD98                            
0000CD98                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CD98 6000 0000                  		bra.w	DisplaySprite
0000CD9C                            ; ===========================================================================
0000CD9C                            ; ---------------------------------------------------------------------------
0000CD9C                            ; Level	order array
0000CD9C                            ; ---------------------------------------------------------------------------
0000CD9C                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CDCC                            		even
0000CDCC                            ; ===========================================================================
0000CDCC                            
0000CDCC                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CDCC 7220                       		moveq	#$20,d1		; set horizontal speed
0000CDCE 3028 0032                  		move.w	$32(a0),d0
0000CDD2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CDD6 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CDD8 6C00                       		bge.s	Obj3A_Move2
0000CDDA 4441                       		neg.w	d1
0000CDDC                            
0000CDDC                            Obj3A_Move2:
0000CDDC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CDE0 3028 0008                  		move.w	8(a0),d0
0000CDE4 6B00                       		bmi.s	locret_C748
0000CDE6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CDEA 6400                       		bcc.s	locret_C748	; if yes, branch
0000CDEC 6000 0000                  		bra.w	DisplaySprite
0000CDF0                            ; ===========================================================================
0000CDF0                            
0000CDF0                            locret_C748:
0000CDF0 4E75                       		rts	
0000CDF2                            ; ===========================================================================
0000CDF2                            
0000CDF2                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CDF2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CDF8 6600 0000                  		bne.w	DeleteObject
0000CDFC 5428 0024                  		addq.b	#2,$24(a0)
0000CE00 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CE04 303C 008D                  		move.w	#$8D,d0
0000CE08 4EF9 0000 15BA             		jmp	(PlaySound).l	; play FZ music
0000CE0E                            ; ===========================================================================
0000CE0E                            
0000CE0E                            loc_C766:				; XREF: Obj3A_Index
0000CE0E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CE12 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CE18 6700 0000                  		beq.w	DeleteObject
0000CE1C 4E75                       		rts	
0000CE1E                            ; ===========================================================================
0000CE1E 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CE24 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CE26 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CE2C 0201                       		dc.b 2,	1
0000CE2E 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CE34 0206                       		dc.b 2,	6
0000CE36 0520 0120 00EC             		dc.w $520, $120, $EC
0000CE3C 0202                       		dc.b 2,	2
0000CE3E 0540 0120 00FC             		dc.w $540, $120, $FC
0000CE44 0203                       		dc.b 2,	3
0000CE46 0560 0120 010C             		dc.w $560, $120, $10C
0000CE4C 0204                       		dc.b 2,	4
0000CE4E 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CE54 0205                       		dc.b 2,	5
0000CE56                            ; ===========================================================================
0000CE56                            ; ---------------------------------------------------------------------------
0000CE56                            ; Object 7E - special stage results screen
0000CE56                            ; ---------------------------------------------------------------------------
0000CE56                            
0000CE56                            Obj7E:					; XREF: Obj_Index
0000CE56 7000                       		moveq	#0,d0
0000CE58 1028 0024                  		move.b	$24(a0),d0
0000CE5C 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CE60 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CE64                            ; ===========================================================================
0000CE64 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CE66 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CE68 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CE6A 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CE6C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CE6E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CE70 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CE72 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CE74 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CE76 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CE78 0000                       		dc.w loc_C91A-Obj7E_Index
0000CE7A                            ; ===========================================================================
0000CE7A                            
0000CE7A                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CE7A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CE7E 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CE80 4E75                       		rts	
0000CE82                            ; ===========================================================================
0000CE82                            
0000CE82                            Obj7E_Main:
0000CE82 2248                       		movea.l	a0,a1
0000CE84 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CE8A 7203                       		moveq	#3,d1
0000CE8C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CE92 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CE94 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CE96                            
0000CE96                            Obj7E_Loop:
0000CE96 12BC 007E                  		move.b	#$7E,0(a1)
0000CE9A 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CE9E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CEA2 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CEA6 135A 0024                  		move.b	(a2)+,$24(a1)
0000CEAA 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CEAE 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CEB6 337C 8580 0002             		move.w	#$8580,2(a1)
0000CEBC 137C 0000 0001             		move.b	#0,1(a1)
0000CEC2 43E9 0040                  		lea	$40(a1),a1
0000CEC6 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CECA                            
0000CECA 7007                       		moveq	#7,d0
0000CECC 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CED0 6700                       		beq.s	loc_C842
0000CED2 7000                       		moveq	#0,d0
0000CED4 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CED8 6600                       		bne.s	loc_C842	; if not, branch
0000CEDA 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CEDC 317C 0018 0008             		move.w	#$18,8(a0)
0000CEE2 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CEE8                            
0000CEE8                            loc_C842:
0000CEE8 1140 001A                  		move.b	d0,$1A(a0)
0000CEEC                            
0000CEEC                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CEEC 7210                       		moveq	#$10,d1		; set horizontal speed
0000CEEE 3028 0030                  		move.w	$30(a0),d0
0000CEF2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CEF6 6700                       		beq.s	loc_C86C	; if yes, branch
0000CEF8 6C00                       		bge.s	Obj7E_Move
0000CEFA 4441                       		neg.w	d1
0000CEFC                            
0000CEFC                            Obj7E_Move:
0000CEFC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF00                            
0000CF00                            loc_C85A:				; XREF: loc_C86C
0000CF00 3028 0008                  		move.w	8(a0),d0
0000CF04 6B00                       		bmi.s	locret_C86A
0000CF06 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF0A 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CF0C 6000 0000                  		bra.w	DisplaySprite
0000CF10                            ; ===========================================================================
0000CF10                            
0000CF10                            locret_C86A:
0000CF10 4E75                       		rts	
0000CF12                            ; ===========================================================================
0000CF12                            
0000CF12                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CF12 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CF18 66E6                       		bne.s	loc_C85A
0000CF1A 5428 0024                  		addq.b	#2,$24(a0)
0000CF1E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF24 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CF2A                            
0000CF2A                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CF2A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CF2E 6600                       		bne.s	Obj7E_Display
0000CF30 5428 0024                  		addq.b	#2,$24(a0)
0000CF34                            
0000CF34                            Obj7E_Display:
0000CF34 6000 0000                  		bra.w	DisplaySprite
0000CF38                            ; ===========================================================================
0000CF38                            
0000CF38                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CF38 6100 0000                  		bsr.w	DisplaySprite
0000CF3C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CF42 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CF46 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CF48 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CF4E 700A                       		moveq	#10,d0		; add 10 to score
0000CF50 4EB9 0000 0000             		jsr	AddPoints
0000CF56 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CF5A 0200 0003                  		andi.b	#3,d0
0000CF5E 6600                       		bne.s	locret_C8EA
0000CF60 303C 00CD                  		move.w	#$CD,d0
0000CF64 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CF6A                            ; ===========================================================================
0000CF6A                            
0000CF6A                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CF6A 303C 00C5                  		move.w	#$C5,d0
0000CF6E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CF74 5428 0024                  		addq.b	#2,$24(a0)
0000CF78 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF7E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CF84 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CF86 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CF8C 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CF90                            
0000CF90                            locret_C8EA:
0000CF90 4E75                       		rts	
0000CF92                            ; ===========================================================================
0000CF92                            
0000CF92                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CF92 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CF98 6000 0000                  		bra.w	DisplaySprite
0000CF9C                            ; ===========================================================================
0000CF9C                            
0000CF9C                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CF9C 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CFA2 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CFA8 303C 00BF                  		move.w	#$BF,d0
0000CFAC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play continues music
0000CFB2 5428 0024                  		addq.b	#2,$24(a0)
0000CFB6 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CFBC 6000 0000                  		bra.w	DisplaySprite
0000CFC0                            ; ===========================================================================
0000CFC0                            
0000CFC0                            loc_C91A:				; XREF: Obj7E_Index
0000CFC0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CFC4 0200 000F                  		andi.b	#$F,d0
0000CFC8 6600                       		bne.s	Obj7E_Display2
0000CFCA 0868 0000 001A             		bchg	#0,$1A(a0)
0000CFD0                            
0000CFD0                            Obj7E_Display2:
0000CFD0 6000 0000                  		bra.w	DisplaySprite
0000CFD4                            ; ===========================================================================
0000CFD4 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CFDA 0200                       		dc.b 2,	0		; rountine number, frame number
0000CFDC 0320 0120 0118             		dc.w $320, $120, $118
0000CFE2 0201                       		dc.b 2,	1
0000CFE4 0360 0120 0128             		dc.w $360, $120, $128
0000CFEA 0202                       		dc.b 2,	2
0000CFEC 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CFF2 0203                       		dc.b 2,	3
0000CFF4 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CFFA 0206                       		dc.b 2,	6
0000CFFC                            ; ===========================================================================
0000CFFC                            ; ---------------------------------------------------------------------------
0000CFFC                            ; Object 7F - chaos emeralds from the special stage results screen
0000CFFC                            ; ---------------------------------------------------------------------------
0000CFFC                            
0000CFFC                            Obj7F:					; XREF: Obj_Index
0000CFFC 7000                       		moveq	#0,d0
0000CFFE 1028 0024                  		move.b	$24(a0),d0
0000D002 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D006 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D00A                            ; ===========================================================================
0000D00A 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D00C 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D00E                            
0000D00E                            ; ---------------------------------------------------------------------------
0000D00E                            ; X-axis positions for chaos emeralds
0000D00E                            ; ---------------------------------------------------------------------------
0000D00E 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D01A                            ; ===========================================================================
0000D01A                            
0000D01A                            Obj7F_Main:				; XREF: Obj7F_Index
0000D01A 2248                       		movea.l	a0,a1
0000D01C 45F9 0000 D00E             		lea	(Obj7F_PosData).l,a2
0000D022 7400                       		moveq	#0,d2
0000D024 7200                       		moveq	#0,d1
0000D026 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D02A 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D02C 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D030                            
0000D030                            Obj7F_Loop:
0000D030 12BC 007F                  		move.b	#$7F,0(a1)
0000D034 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D038 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D03E 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D042 1633 2000                  		move.b	(a3,d2.w),d3
0000D046 1343 001A                  		move.b	d3,$1A(a1)
0000D04A 1343 001C                  		move.b	d3,$1C(a1)
0000D04E 5202                       		addq.b	#1,d2
0000D050 5429 0024                  		addq.b	#2,$24(a1)
0000D054 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D05C 337C 8541 0002             		move.w	#$8541,2(a1)
0000D062 137C 0000 0001             		move.b	#0,1(a1)
0000D068 43E9 0040                  		lea	$40(a1),a1	; next object
0000D06C 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D070                            
0000D070                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D070 1028 001A                  		move.b	$1A(a0),d0
0000D074 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D07A 0C00 0006                  		cmpi.b	#6,d0
0000D07E 6600                       		bne.s	Obj7F_Display
0000D080 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D086                            
0000D086                            Obj7F_Display:
0000D086 6000 0000                  		bra.w	DisplaySprite
0000D08A                            ; ===========================================================================
0000D08A                            ; ---------------------------------------------------------------------------
0000D08A                            ; Sprite mappings - zone title cards
0000D08A                            ; ---------------------------------------------------------------------------
0000D08A 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000D08C 0000                       		dc.w byte_CA2C-Map_obj34
0000D08E 0000                       		dc.w byte_CA5A-Map_obj34
0000D090 0000                       		dc.w byte_CA7A-Map_obj34
0000D092 0000                       		dc.w byte_CAA8-Map_obj34
0000D094 0000                       		dc.w byte_CADC-Map_obj34
0000D096 0000                       		dc.w byte_CB10-Map_obj34
0000D098 0000                       		dc.w byte_CB26-Map_obj34
0000D09A 0000                       		dc.w byte_CB31-Map_obj34
0000D09C 0000                       		dc.w byte_CB3C-Map_obj34
0000D09E 0000                       		dc.w byte_CB47-Map_obj34
0000D0A0 0000                       		dc.w byte_CB8A-Map_obj34
0000D0A2 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000D0A3 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000D0A8 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000D0AD F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000D0B2 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000D0B7 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000D0BC F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000D0C1 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000D0C6 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000D0CB F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000D0D0 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000D0D5 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000D0DA F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000D0DF 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000D0E0 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000D0E5 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000D0EA F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000D0EF F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000D0F4 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000D0F9 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000D0FE F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D103 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000D108 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000D10D F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000D112 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000D117 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000D11C F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000D121 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000D126 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000D12B F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000D130 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000D135 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000D13A F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000D13F F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000D144 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000D149 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000D14E 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000D14F F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000D154 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000D159 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000D15E F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D163 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D168 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D169 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D16E F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D173 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D178 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D17D F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D182 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D187 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D18C F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D191 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D196 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D19B F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D1A0 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D1A5 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D1AA F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D1AF F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D1B4 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D1B9 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D1BE 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D1BF F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D1C4 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D1C9 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D1CE F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D1D3 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D1D8 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D1DD F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D1E2 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D1E7 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D1EC F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D1F1 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D1F6 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D1FB F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D200 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D205 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D20A F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D20F F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D214 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D219 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D21E F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D223 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D228 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D229 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D22E F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D233 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D238 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D23D F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D242 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D247 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D24C 04                         byte_CB10:	dc.b 4			; ZONE
0000D24D F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D252 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D257 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D25C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D261 00                         		dc.b 0
0000D262 02                         byte_CB26:	dc.b 2			; ACT 1
0000D263 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D268 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D26D 02                         byte_CB31:	dc.b 2			; ACT 2
0000D26E 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D273 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D278 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D279 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D27E F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D283 0D                         byte_CB47:	dc.b $D			; Oval
0000D284 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D289 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D28E EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D293 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D298 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D29D 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D2A2 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D2A7 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D2AC EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D2B1 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D2B6 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D2BB 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D2C0 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D2C5 00                         		dc.b 0
0000D2C6 05                         byte_CB8A:	dc.b 5			; FINAL
0000D2C7 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D2CC F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D2D1 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D2D6 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D2DB F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D2E0                            		even
0000D2E0                            ; ---------------------------------------------------------------------------
0000D2E0                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D2E0                            ; ---------------------------------------------------------------------------
0000D2E0                            Map_obj39:
0000D2E0                            	include "_maps\obj39.asm"
0000D2E0                            ; ---------------------------------------------------------------------------
0000D2E0                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D2E0                            ; ---------------------------------------------------------------------------
0000D2E0 0000                       		dc.w byte_CBAC-Map_obj39
0000D2E2 0000                       		dc.w byte_CBB7-Map_obj39
0000D2E4 0000                       		dc.w byte_CBC2-Map_obj39
0000D2E6 0000                       		dc.w byte_CBCD-Map_obj39
0000D2E8 02                         byte_CBAC:	dc.b 2
0000D2E9 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D2EE F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D2F3 02                         byte_CBB7:	dc.b 2
0000D2F4 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D2F9 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D2FE 02                         byte_CBC2:	dc.b 2
0000D2FF F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D304 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D309 02                         byte_CBCD:	dc.b 2
0000D30A F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D30F F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D314                            		even
0000D314                            		even
0000D314                            
0000D314                            ; ---------------------------------------------------------------------------
0000D314                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D314                            ; ---------------------------------------------------------------------------
0000D314 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D316 0000                       		dc.w byte_CC13-Map_obj3A
0000D318 0000                       		dc.w byte_CC32-Map_obj3A
0000D31A 0000                       		dc.w byte_CC51-Map_obj3A
0000D31C 0000                       		dc.w byte_CC75-Map_obj3A
0000D31E FF6F                       		dc.w byte_CB47-Map_obj3A
0000D320 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D322 FF59                       		dc.w byte_CB31-Map_obj3A
0000D324 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D326 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D327 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D32C F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D331 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D336 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D33B F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D340 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D345 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D34A F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D34F F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D354 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D359 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D35E F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D363 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D368 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D36D F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D372 06                         byte_CC13:	dc.b 6			; PASSED
0000D373 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D378 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D37D F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D382 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D387 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D38C F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D391 06                         byte_CC32:	dc.b 6			; SCORE
0000D392 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D397 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D39C F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D3A1 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D3A6 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D3AB FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D3B0 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D3B1 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D3B6 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D3BB F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D3C0 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D3C5 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D3CA F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D3CF F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D3D4 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D3D5 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D3DA F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D3DF F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D3E4 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D3E9 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D3EE F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D3F3 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D3F8                            		even
0000D3F8                            ; ---------------------------------------------------------------------------
0000D3F8                            ; Sprite mappings - special stage results screen
0000D3F8                            ; ---------------------------------------------------------------------------
0000D3F8 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D3FA 0000                       		dc.w byte_CCEE-Map_obj7E
0000D3FC 0000                       		dc.w byte_CD0D-Map_obj7E
0000D3FE FE8B                       		dc.w byte_CB47-Map_obj7E
0000D400 0000                       		dc.w byte_CD31-Map_obj7E
0000D402 0000                       		dc.w byte_CD46-Map_obj7E
0000D404 0000                       		dc.w byte_CD5B-Map_obj7E
0000D406 0000                       		dc.w byte_CD6B-Map_obj7E
0000D408 0000                       		dc.w byte_CDA8-Map_obj7E
0000D40A 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D40B F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D410 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D415 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D41A F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D41F F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D424 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D429 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D42E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D433 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D438 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D43D F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D442 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D447 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D44C 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D44D F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D452 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D457 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D45C F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D461 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D466 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D46B 07                         byte_CD0D:	dc.b 7
0000D46C F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D471 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D476 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D47B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D480 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D485 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D48A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D48F 04                         byte_CD31:	dc.b 4
0000D490 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D495 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D49A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D49F F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D4A4 04                         byte_CD46:	dc.b 4
0000D4A5 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4AA F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D4AF F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D4B4 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D4B9 03                         byte_CD5B:	dc.b 3
0000D4BA F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4BF F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D4C4 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D4C9 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D4CA F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D4CF F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D4D4 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D4D9 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D4DE F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D4E3 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D4E8 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D4ED F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D4F2 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D4F7 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D4FC F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D501 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D506 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D507 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D50C F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D511 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D516 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D51B F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D520 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D525 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D52A F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D52F F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D534 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D539 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D53E F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D543 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D548 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D54D F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D552                            		even
0000D552                            ; ---------------------------------------------------------------------------
0000D552                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D552                            ; ---------------------------------------------------------------------------
0000D552                            Map_obj7F:
0000D552                            	include "_maps\obj7F.asm"
0000D552                            ; ---------------------------------------------------------------------------
0000D552                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D552                            ; ---------------------------------------------------------------------------
0000D552 0000                       		dc.w byte_CE02-Map_obj7F
0000D554 0000                       		dc.w byte_CE08-Map_obj7F
0000D556 0000                       		dc.w byte_CE0E-Map_obj7F
0000D558 0000                       		dc.w byte_CE14-Map_obj7F
0000D55A 0000                       		dc.w byte_CE1A-Map_obj7F
0000D55C 0000                       		dc.w byte_CE20-Map_obj7F
0000D55E 0000                       		dc.w byte_CE26-Map_obj7F
0000D560 01                         byte_CE02:	dc.b 1
0000D561 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D566 01                         byte_CE08:	dc.b 1
0000D567 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D56C 01                         byte_CE0E:	dc.b 1
0000D56D F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D572 01                         byte_CE14:	dc.b 1
0000D573 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D578 01                         byte_CE1A:	dc.b 1
0000D579 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D57E 01                         byte_CE20:	dc.b 1
0000D57F F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D584 00                         byte_CE26:	dc.b 0			; Blank frame
0000D586 00                         		even
0000D586 00                         		even
0000D586                            
0000D586                            ; ===========================================================================
0000D586                            ; ---------------------------------------------------------------------------
0000D586                            ; Object 36 - spikes
0000D586                            ; ---------------------------------------------------------------------------
0000D586                            
0000D586                            Obj36:					; XREF: Obj_Index
0000D586 7000                       		moveq	#0,d0
0000D588 1028 0024                  		move.b	$24(a0),d0
0000D58C 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D590 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D594                            ; ===========================================================================
0000D594 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D596 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D598                            
0000D598 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D59A 0110                       		dc.b 1,	$10
0000D59C 0204                       		dc.b 2,	4
0000D59E 031C                       		dc.b 3,	$1C
0000D5A0 0440                       		dc.b 4,	$40
0000D5A2 0510                       		dc.b 5,	$10
0000D5A4                            ; ===========================================================================
0000D5A4                            
0000D5A4                            Obj36_Main:				; XREF: Obj36_Index
0000D5A4 5428 0024                  		addq.b	#2,$24(a0)
0000D5A8 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D5B0 317C 051B 0002             		move.w	#$51B,2(a0)
0000D5B6 0028 0004 0001             		ori.b	#4,1(a0)
0000D5BC 117C 0004 0018             		move.b	#4,$18(a0)
0000D5C2 1028 0028                  		move.b	$28(a0),d0
0000D5C6 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D5CC 0240 00F0                  		andi.w	#$F0,d0
0000D5D0 43F9 0000 D598             		lea	(Obj36_Var).l,a1
0000D5D6 E648                       		lsr.w	#3,d0
0000D5D8 D2C0                       		adda.w	d0,a1
0000D5DA 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D5DE 1159 0019                  		move.b	(a1)+,$19(a0)
0000D5E2 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D5E8 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D5EE                            
0000D5EE                            Obj36_Solid:				; XREF: Obj36_Index
0000D5EE 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D5F2 343C 0004                  		move.w	#4,d2
0000D5F6 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D5FC 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D5FE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D604 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D606 343C 0014                  		move.w	#$14,d2
0000D60A                            
0000D60A                            ; Spikes types $1x and $5x face	sideways
0000D60A                            
0000D60A                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D60A 323C 001B                  		move.w	#$1B,d1
0000D60E 3602                       		move.w	d2,d3
0000D610 5243                       		addq.w	#1,d3
0000D612 3828 0008                  		move.w	8(a0),d4
0000D616 6100 0000                  		bsr.w	SolidObject
0000D61A 0828 0003 0022             		btst	#3,$22(a0)
0000D620 6600                       		bne.s	Obj36_Display
0000D622 0C44 0001                  		cmpi.w	#1,d4
0000D626 6700                       		beq.s	Obj36_Hurt
0000D628 6000                       		bra.s	Obj36_Display
0000D62A                            ; ===========================================================================
0000D62A                            
0000D62A                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D62A                            
0000D62A                            Obj36_Upright:				; XREF: Obj36_Solid
0000D62A 7200                       		moveq	#0,d1
0000D62C 1228 0019                  		move.b	$19(a0),d1
0000D630 0641 000B                  		addi.w	#$B,d1
0000D634 343C 0010                  		move.w	#$10,d2
0000D638 363C 0011                  		move.w	#$11,d3
0000D63C 3828 0008                  		move.w	8(a0),d4
0000D640 6100 0000                  		bsr.w	SolidObject
0000D644 0828 0003 0022             		btst	#3,$22(a0)
0000D64A 6600                       		bne.s	Obj36_Hurt
0000D64C 4A44                       		tst.w	d4
0000D64E 6A00                       		bpl.s	Obj36_Display
0000D650                            
0000D650                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D650 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D654 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D656 2F08                       		move.l	a0,-(sp)
0000D658 2448                       		movea.l	a0,a2
0000D65A 41F8 D000                  		lea	($FFFFD000).w,a0
0000D65E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D664 6400                       		bcc.s	loc_CF20
0000D666 2628 000C                  		move.l	$C(a0),d3
0000D66A 3028 0012                  		move.w	$12(a0),d0
0000D66E 48C0                       		ext.l	d0
0000D670 E180                       		asl.l	#8,d0
0000D672 9680                       		sub.l	d0,d3
0000D674 2143 000C                  		move.l	d3,$C(a0)
0000D678 4EB9 0000 0000             		jsr	HurtSonic
0000D67E                            
0000D67E                            loc_CF20:
0000D67E 205F                       		movea.l	(sp)+,a0
0000D680                            
0000D680                            Obj36_Display:
0000D680 6100 0000                  		bsr.w	DisplaySprite
0000D684 3028 0030                  		move.w	$30(a0),d0
0000D688 0240 FF80                  		andi.w	#$FF80,d0
0000D68C 3238 F700                  		move.w	($FFFFF700).w,d1
0000D690 0441 0080                  		subi.w	#$80,d1
0000D694 0241 FF80                  		andi.w	#$FF80,d1
0000D698 9041                       		sub.w	d1,d0
0000D69A 0C40 0280                  		cmpi.w	#$280,d0
0000D69E 6200 0000                  		bhi.w	DeleteObject
0000D6A2 4E75                       		rts	
0000D6A4                            ; ===========================================================================
0000D6A4                            
0000D6A4                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D6A4 7000                       		moveq	#0,d0
0000D6A6 1028 0028                  		move.b	$28(a0),d0
0000D6AA D040                       		add.w	d0,d0
0000D6AC 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D6B0 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D6B4                            ; ===========================================================================
0000D6B4 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D6B6 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D6B8 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D6BA                            ; ===========================================================================
0000D6BA                            
0000D6BA                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D6BA 4E75                       		rts			; don't move the object
0000D6BC                            ; ===========================================================================
0000D6BC                            
0000D6BC                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D6BC 6100 0000                  		bsr.w	Obj36_Wait
0000D6C0 7000                       		moveq	#0,d0
0000D6C2 1028 0034                  		move.b	$34(a0),d0
0000D6C6 D068 0032                  		add.w	$32(a0),d0
0000D6CA 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D6CE 4E75                       		rts	
0000D6D0                            ; ===========================================================================
0000D6D0                            
0000D6D0                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D6D0 6100 0000                  		bsr.w	Obj36_Wait
0000D6D4 7000                       		moveq	#0,d0
0000D6D6 1028 0034                  		move.b	$34(a0),d0
0000D6DA D068 0030                  		add.w	$30(a0),d0
0000D6DE 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D6E2 4E75                       		rts	
0000D6E4                            ; ===========================================================================
0000D6E4                            
0000D6E4                            Obj36_Wait:
0000D6E4 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D6E8 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D6EA 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D6EE 6600                       		bne.s	locret_CFE6
0000D6F0 4A28 0001                  		tst.b	1(a0)
0000D6F4 6A00                       		bpl.s	locret_CFE6
0000D6F6 303C 00B6                  		move.w	#$B6,d0
0000D6FA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D700 6000                       		bra.s	locret_CFE6
0000D702                            ; ===========================================================================
0000D702                            
0000D702                            loc_CFA4:
0000D702 4A68 0036                  		tst.w	$36(a0)
0000D706 6700                       		beq.s	loc_CFC6
0000D708 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D70E 6400                       		bcc.s	locret_CFE6
0000D710 317C 0000 0034             		move.w	#0,$34(a0)
0000D716 317C 0000 0036             		move.w	#0,$36(a0)
0000D71C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D722 6000                       		bra.s	locret_CFE6
0000D724                            ; ===========================================================================
0000D724                            
0000D724                            loc_CFC6:
0000D724 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D72A 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D730 6500                       		bcs.s	locret_CFE6
0000D732 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D738 317C 0001 0036             		move.w	#1,$36(a0)
0000D73E 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D744                            
0000D744                            locret_CFE6:
0000D744 4E75                       		rts	
0000D746                            ; ===========================================================================
0000D746                            ; ---------------------------------------------------------------------------
0000D746                            ; Sprite mappings - spikes
0000D746                            ; ---------------------------------------------------------------------------
0000D746                            Map_obj36:
0000D746                            	include "_maps\obj36.asm"
0000D746                            ; ---------------------------------------------------------------------------
0000D746                            ; Sprite mappings - spikes
0000D746                            ; ---------------------------------------------------------------------------
0000D746 0000                       		dc.w byte_CFF4-Map_obj36
0000D748 0000                       		dc.w byte_D004-Map_obj36
0000D74A 0000                       		dc.w byte_D014-Map_obj36
0000D74C 0000                       		dc.w byte_D01A-Map_obj36
0000D74E 0000                       		dc.w byte_D02A-Map_obj36
0000D750 0000                       		dc.w byte_D049-Map_obj36
0000D752 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D753 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D758 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D75D F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D762 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D763 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D768 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D76D 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D772 01                         byte_D014:	dc.b 1			; 1 spike
0000D773 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D778 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D779 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D77E F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D783 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D788 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D789 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D78E F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D793 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D798 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D79D F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D7A2 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D7A7 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D7A8 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D7AE 00                         		even
0000D7AE 00                         		even
0000D7AE                            
0000D7AE                            ; ===========================================================================
0000D7AE                            ; ---------------------------------------------------------------------------
0000D7AE                            ; Object 3B - purple rock (GHZ)
0000D7AE                            ; ---------------------------------------------------------------------------
0000D7AE                            
0000D7AE                            Obj3B:					; XREF: Obj_Index
0000D7AE 7000                       		moveq	#0,d0
0000D7B0 1028 0024                  		move.b	$24(a0),d0
0000D7B4 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D7B8 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D7BC                            ; ===========================================================================
0000D7BC 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D7BE 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D7C0                            ; ===========================================================================
0000D7C0                            
0000D7C0                            Obj3B_Main:				; XREF: Obj3B_Index
0000D7C0 5428 0024                  		addq.b	#2,$24(a0)
0000D7C4 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D7CC 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D7D2 117C 0004 0001             		move.b	#4,1(a0)
0000D7D8 117C 0013 0019             		move.b	#$13,$19(a0)
0000D7DE 117C 0004 0018             		move.b	#4,$18(a0)
0000D7E4                            
0000D7E4                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D7E4 323C 001B                  		move.w	#$1B,d1
0000D7E8 343C 0010                  		move.w	#$10,d2
0000D7EC 363C 0010                  		move.w	#$10,d3
0000D7F0 3828 0008                  		move.w	8(a0),d4
0000D7F4 6100 0000                  		bsr.w	SolidObject
0000D7F8 6100 0000                  		bsr.w	DisplaySprite
0000D7FC 3028 0008                  		move.w	8(a0),d0
0000D800 0240 FF80                  		andi.w	#$FF80,d0
0000D804 3238 F700                  		move.w	($FFFFF700).w,d1
0000D808 0441 0080                  		subi.w	#$80,d1
0000D80C 0241 FF80                  		andi.w	#$FF80,d1
0000D810 9041                       		sub.w	d1,d0
0000D812 0C40 0280                  		cmpi.w	#$280,d0
0000D816 6200 0000                  		bhi.w	DeleteObject
0000D81A 4E75                       		rts	
0000D81C                            ; ===========================================================================
0000D81C                            ; ---------------------------------------------------------------------------
0000D81C                            ; Object 49 - waterfall	sound effect (GHZ)
0000D81C                            ; ---------------------------------------------------------------------------
0000D81C                            
0000D81C                            Obj49:					; XREF: Obj_Index
0000D81C 7000                       		moveq	#0,d0
0000D81E 1028 0024                  		move.b	$24(a0),d0
0000D822 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D826 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D82A                            ; ===========================================================================
0000D82A 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D82C 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D82E                            ; ===========================================================================
0000D82E                            
0000D82E                            Obj49_Main:				; XREF: Obj49_Index
0000D82E 5428 0024                  		addq.b	#2,$24(a0)
0000D832 117C 0004 0001             		move.b	#4,1(a0)
0000D838                            
0000D838                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D838 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D83C 0200 003F                  		andi.b	#$3F,d0
0000D840 6600                       		bne.s	Obj49_ChkDel
0000D842 303C 00D0                  		move.w	#$D0,d0
0000D846 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D84C                            
0000D84C                            Obj49_ChkDel:
0000D84C 3028 0008                  		move.w	8(a0),d0
0000D850 0240 FF80                  		andi.w	#$FF80,d0
0000D854 3238 F700                  		move.w	($FFFFF700).w,d1
0000D858 0441 0080                  		subi.w	#$80,d1
0000D85C 0241 FF80                  		andi.w	#$FF80,d1
0000D860 9041                       		sub.w	d1,d0
0000D862 0C40 0280                  		cmpi.w	#$280,d0
0000D866 6200 0000                  		bhi.w	DeleteObject
0000D86A 4E75                       		rts	
0000D86C                            ; ===========================================================================
0000D86C                            ; ---------------------------------------------------------------------------
0000D86C                            ; Sprite mappings - purple rock	(GHZ)
0000D86C                            ; ---------------------------------------------------------------------------
0000D86C                            Map_obj3B:
0000D86C                            	include "_maps\obj3B.asm"
0000D86C                            ; ---------------------------------------------------------------------------
0000D86C                            ; Sprite mappings - purple rock	(GHZ)
0000D86C                            ; ---------------------------------------------------------------------------
0000D86C 0000                       		dc.w byte_D110-Map_obj3B
0000D86E 02                         byte_D110:	dc.b 2
0000D86F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D874 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D87A 00                         		even
0000D87A 00                         		even
0000D87A                            
0000D87A                            ; ===========================================================================
0000D87A                            ; ---------------------------------------------------------------------------
0000D87A                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D87A                            ; ---------------------------------------------------------------------------
0000D87A                            
0000D87A                            Obj3C:					; XREF: Obj_Index
0000D87A 7000                       		moveq	#0,d0
0000D87C 1028 0024                  		move.b	$24(a0),d0
0000D880 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D884 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D888 6000 0000                  		bra.w	MarkObjGone
0000D88C                            ; ===========================================================================
0000D88C 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D88E 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D890 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D892                            ; ===========================================================================
0000D892                            
0000D892                            Obj3C_Main:				; XREF: Obj3C_Index
0000D892 5428 0024                  		addq.b	#2,$24(a0)
0000D896 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D89E 317C 450F 0002             		move.w	#$450F,2(a0)
0000D8A4 117C 0004 0001             		move.b	#4,1(a0)
0000D8AA 117C 0010 0019             		move.b	#$10,$19(a0)
0000D8B0 117C 0004 0018             		move.b	#4,$18(a0)
0000D8B6 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D8BC                            
0000D8BC                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D8BC 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D8C2 323C 001B                  		move.w	#$1B,d1
0000D8C6 343C 0020                  		move.w	#$20,d2
0000D8CA 363C 0020                  		move.w	#$20,d3
0000D8CE 3828 0008                  		move.w	8(a0),d4
0000D8D2 6100 0000                  		bsr.w	SolidObject
0000D8D6 0828 0005 0022             		btst	#5,$22(a0)
0000D8DC 6600                       		bne.s	Obj3C_ChkRoll
0000D8DE                            
0000D8DE                            locret_D180:
0000D8DE 4E75                       		rts	
0000D8E0                            ; ===========================================================================
0000D8E0                            
0000D8E0                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D8E0 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D8E6 66F6                       		bne.s	locret_D180	; if not, branch
0000D8E8 3028 0030                  		move.w	$30(a0),d0
0000D8EC 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D8EE 4440                       		neg.w	d0
0000D8F0                            
0000D8F0                            Obj3C_ChkSpeed:
0000D8F0 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D8F4 65E8                       		bcs.s	locret_D180	; if not, branch
0000D8F6 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D8FC 5869 0008                  		addq.w	#4,8(a1)
0000D900 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D906 3028 0008                  		move.w	8(a0),d0
0000D90A B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D90E 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D910 5169 0008                  		subq.w	#8,8(a1)
0000D914 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D91A                            
0000D91A                            Obj3C_Smash:
0000D91A 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D920 08A8 0005 0022             		bclr	#5,$22(a0)
0000D926 08A9 0005 0022             		bclr	#5,$22(a1)
0000D92C 7207                       		moveq	#7,d1		; load 8 fragments
0000D92E 343C 0070                  		move.w	#$70,d2
0000D932 6100                       		bsr.s	SmashObject
0000D934                            
0000D934                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D934 6100 0000                  		bsr.w	SpeedToPos
0000D938 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D93E 6100 0000                  		bsr.w	DisplaySprite
0000D942 4A28 0001                  		tst.b	1(a0)
0000D946 6A00 0000                  		bpl.w	DeleteObject
0000D94A 4E75                       		rts	
0000D94C                            
0000D94C                            ; ---------------------------------------------------------------------------
0000D94C                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D94C                            ; ---------------------------------------------------------------------------
0000D94C                            
0000D94C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D94C                            
0000D94C                            
0000D94C                            SmashObject:				; XREF: Obj3C_Smash
0000D94C 7000                       		moveq	#0,d0
0000D94E 1028 001A                  		move.b	$1A(a0),d0
0000D952 D040                       		add.w	d0,d0
0000D954 2668 0004                  		movea.l	4(a0),a3
0000D958 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D95C 524B                       		addq.w	#1,a3
0000D95E 08E8 0005 0001             		bset	#5,1(a0)
0000D964 1810                       		move.b	0(a0),d4
0000D966 1A28 0001                  		move.b	1(a0),d5
0000D96A 2248                       		movea.l	a0,a1
0000D96C 6000                       		bra.s	Smash_LoadFrag
0000D96E                            ; ===========================================================================
0000D96E                            
0000D96E                            Smash_Loop:
0000D96E 6100 0000                  		bsr.w	SingleObjLoad
0000D972 6600                       		bne.s	Smash_PlaySnd
0000D974 5A4B                       		addq.w	#5,a3
0000D976                            
0000D976                            Smash_LoadFrag:				; XREF: SmashObject
0000D976 137C 0004 0024             		move.b	#4,$24(a1)
0000D97C 1284                       		move.b	d4,0(a1)
0000D97E 234B 0004                  		move.l	a3,4(a1)
0000D982 1345 0001                  		move.b	d5,1(a1)
0000D986 3368 0008 0008             		move.w	8(a0),8(a1)
0000D98C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D992 3368 0002 0002             		move.w	2(a0),2(a1)
0000D998 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D99E 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D9A4 335C 0010                  		move.w	(a4)+,$10(a1)
0000D9A8 335C 0012                  		move.w	(a4)+,$12(a1)
0000D9AC B3C8                       		cmpa.l	a0,a1
0000D9AE 6400                       		bcc.s	loc_D268
0000D9B0 2F08                       		move.l	a0,-(sp)
0000D9B2 2049                       		movea.l	a1,a0
0000D9B4 6100 0000                  		bsr.w	SpeedToPos
0000D9B8 D568 0012                  		add.w	d2,$12(a0)
0000D9BC 205F                       		movea.l	(sp)+,a0
0000D9BE 6100 0000                  		bsr.w	DisplaySprite2
0000D9C2                            
0000D9C2                            loc_D268:
0000D9C2 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D9C6                            
0000D9C6                            Smash_PlaySnd:
0000D9C6 303C 00CB                  		move.w	#$CB,d0
0000D9CA 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D9D0                            ; End of function SmashObject
0000D9D0                            
0000D9D0                            ; ===========================================================================
0000D9D0                            ; Smashed block	fragment speeds
0000D9D0                            ;
0000D9D0 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D9D4 0600 FF00                  		dc.w $600, $FF00
0000D9D8 0600 0100                  		dc.w $600, $100
0000D9DC 0400 0500                  		dc.w $400, $500
0000D9E0 0600 FA00                  		dc.w $600, $FA00
0000D9E4 0800 FE00                  		dc.w $800, $FE00
0000D9E8 0800 0200                  		dc.w $800, $200
0000D9EC 0600 0600                  		dc.w $600, $600
0000D9F0                            
0000D9F0 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D9F4 F800 FE00                  		dc.w $F800, $FE00
0000D9F8 F800 0200                  		dc.w $F800, $200
0000D9FC FA00 0600                  		dc.w $FA00, $600
0000DA00 FC00 FB00                  		dc.w $FC00, $FB00
0000DA04 FA00 FF00                  		dc.w $FA00, $FF00
0000DA08 FA00 0100                  		dc.w $FA00, $100
0000DA0C FC00 0500                  		dc.w $FC00, $500
0000DA10                            ; ---------------------------------------------------------------------------
0000DA10                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA10                            ; ---------------------------------------------------------------------------
0000DA10                            Map_obj3C:
0000DA10                            	include "_maps\obj3C.asm"
0000DA10                            ; ---------------------------------------------------------------------------
0000DA10                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA10                            ; ---------------------------------------------------------------------------
0000DA10 0000                       		dc.w byte_D2BC-Map_obj3C
0000DA12 0000                       		dc.w byte_D2E5-Map_obj3C
0000DA14 0000                       		dc.w byte_D30E-Map_obj3C
0000DA16 08                         byte_D2BC:	dc.b 8
0000DA17 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DA1C F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DA21 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DA26 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DA2B E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DA30 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DA35 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DA3A 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DA3F 08                         byte_D2E5:	dc.b 8
0000DA40 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DA45 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DA4A 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DA4F 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DA54 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DA59 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DA5E 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DA63 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DA68 08                         byte_D30E:	dc.b 8
0000DA69 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DA6E F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DA73 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DA78 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DA7D E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DA82 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DA87 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DA8C 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DA92 00                         		even
0000DA92 00                         		even
0000DA92                            
0000DA92                            ; ---------------------------------------------------------------------------
0000DA92                            ; Object code loading subroutine
0000DA92                            ; ---------------------------------------------------------------------------
0000DA92                            
0000DA92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA92                            
0000DA92                            
0000DA92                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DA92 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DA96 7E7F                       		moveq	#$7F,d7
0000DA98 7000                       		moveq	#0,d0
0000DA9A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DAA0 6400                       		bcc.s	loc_D362
0000DAA2                            
0000DAA2                            loc_D348:
0000DAA2 1010                       		move.b	(a0),d0		; load object number from RAM
0000DAA4 6700                       		beq.s	loc_D358
0000DAA6 D040                       		add.w	d0,d0
0000DAA8 D040                       		add.w	d0,d0
0000DAAA 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DAAE 4E91                       		jsr	(a1)		; run the object's code
0000DAB0 7000                       		moveq	#0,d0
0000DAB2                            
0000DAB2                            loc_D358:
0000DAB2 41E8 0040                  		lea	$40(a0),a0	; next object
0000DAB6 51CF FFEA                  		dbf	d7,loc_D348
0000DABA 4E75                       		rts	
0000DABC                            ; ===========================================================================
0000DABC                            
0000DABC                            loc_D362:
0000DABC 7E1F                       		moveq	#$1F,d7
0000DABE 61E2                       		bsr.s	loc_D348
0000DAC0 7E5F                       		moveq	#$5F,d7
0000DAC2                            
0000DAC2                            loc_D368:
0000DAC2 7000                       		moveq	#0,d0
0000DAC4 1010                       		move.b	(a0),d0
0000DAC6 6700                       		beq.s	loc_D378
0000DAC8 4A28 0001                  		tst.b	1(a0)
0000DACC 6A00                       		bpl.s	loc_D378
0000DACE 6100 0000                  		bsr.w	DisplaySprite
0000DAD2                            
0000DAD2                            loc_D378:
0000DAD2 41E8 0040                  		lea	$40(a0),a0
0000DAD6                            
0000DAD6                            loc_D37C:
0000DAD6 51CF FFEA                  		dbf	d7,loc_D368
0000DADA 4E75                       		rts	
0000DADC                            ; End of function ObjectsLoad
0000DADC                            
0000DADC                            ; ===========================================================================
0000DADC                            ; ---------------------------------------------------------------------------
0000DADC                            ; Object pointers
0000DADC                            ; ---------------------------------------------------------------------------
0000DADC                            Obj_Index:
0000DADC                            	include "_inc\Object pointers.asm"
0000DADC                            ; ---------------------------------------------------------------------------
0000DADC                            ; Object pointers
0000DADC                            ; ---------------------------------------------------------------------------
0000DADC 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DAEC 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DAFC 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DB0C 0000 0000 0000 AD22 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DB1C 0000 78C8 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DB2C 0000 7EEE 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DB3C 0000 873C 0000 8836 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DB4C 0000 8E80 0000 916E 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DB5C 0000 0000 0000 9E1E 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DB6C 0000 A156 0000 A742 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DB7C 0000 9A7A 0000 8F56 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DB8C 0000 B31A 0000 A936 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DB9C 0000 BD2E 0000 C3DC 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DBAC 0000 B88C 0000 D586 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DBBC 0000 CB62 0000 CC1C 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DBCC 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DBDC 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DBEC 0000 C04A 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DBFC 0000 D81C 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DC0C 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DC1C 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DC2C 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DC3C 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DC4C 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DC5C 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DC6C 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DC7C 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DC8C 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DC9C 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DCAC 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DCBC 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DCCC 0000 0000 0000 CE56 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DCDC 0000 53D4 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DCEC 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DCFC 0000 5A8E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DCFC 0000 5A8E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DD0C                            
0000DD0C                            ; ---------------------------------------------------------------------------
0000DD0C                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DD0C                            ; ---------------------------------------------------------------------------
0000DD0C                            
0000DD0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD0C                            
0000DD0C                            
0000DD0C                            ObjectFall:
0000DD0C 2428 0008                  		move.l	8(a0),d2
0000DD10 2628 000C                  		move.l	$C(a0),d3
0000DD14 3028 0010                  		move.w	$10(a0),d0
0000DD18 48C0                       		ext.l	d0
0000DD1A E180                       		asl.l	#8,d0
0000DD1C D480                       		add.l	d0,d2
0000DD1E 3028 0012                  		move.w	$12(a0),d0
0000DD22 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DD28 48C0                       		ext.l	d0
0000DD2A E180                       		asl.l	#8,d0
0000DD2C D680                       		add.l	d0,d3
0000DD2E 2142 0008                  		move.l	d2,8(a0)
0000DD32 2143 000C                  		move.l	d3,$C(a0)
0000DD36 4E75                       		rts	
0000DD38                            ; End of function ObjectFall
0000DD38                            
0000DD38                            ; ---------------------------------------------------------------------------
0000DD38                            ; Subroutine translating object	speed to update	object position
0000DD38                            ; ---------------------------------------------------------------------------
0000DD38                            
0000DD38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD38                            
0000DD38                            
0000DD38                            SpeedToPos:
0000DD38 2428 0008                  		move.l	8(a0),d2
0000DD3C 2628 000C                  		move.l	$C(a0),d3
0000DD40 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DD44 48C0                       		ext.l	d0
0000DD46 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DD48 D480                       		add.l	d0,d2		; add to x-axis	position
0000DD4A 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DD4E 48C0                       		ext.l	d0
0000DD50 E180                       		asl.l	#8,d0		; multiply by $100
0000DD52 D680                       		add.l	d0,d3		; add to y-axis	position
0000DD54 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DD58 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DD5C 4E75                       		rts	
0000DD5E                            ; End of function SpeedToPos
0000DD5E                            
0000DD5E                            ; ---------------------------------------------------------------------------
0000DD5E                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DD5E                            ; ---------------------------------------------------------------------------
0000DD5E                            
0000DD5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD5E                            
0000DD5E                            
0000DD5E                            DisplaySprite:
0000DD5E 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DD62 3028 0018                  		move.w	$18(a0),d0
0000DD66 E248                       		lsr.w	#1,d0
0000DD68 0240 0380                  		andi.w	#$380,d0
0000DD6C D2C0                       		adda.w	d0,a1
0000DD6E 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DD72 6400                       		bcc.s	locret_D620
0000DD74 5451                       		addq.w	#2,(a1)
0000DD76 D2D1                       		adda.w	(a1),a1
0000DD78 3288                       		move.w	a0,(a1)
0000DD7A                            
0000DD7A                            locret_D620:
0000DD7A 4E75                       		rts	
0000DD7C                            ; End of function DisplaySprite
0000DD7C                            
0000DD7C                            ; ---------------------------------------------------------------------------
0000DD7C                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DD7C                            ; ---------------------------------------------------------------------------
0000DD7C                            
0000DD7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD7C                            
0000DD7C                            
0000DD7C                            DisplaySprite2:
0000DD7C 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DD80 3029 0018                  		move.w	$18(a1),d0
0000DD84 E248                       		lsr.w	#1,d0
0000DD86 0240 0380                  		andi.w	#$380,d0
0000DD8A D4C0                       		adda.w	d0,a2
0000DD8C 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DD90 6400                       		bcc.s	locret_D63E
0000DD92 5452                       		addq.w	#2,(a2)
0000DD94 D4D2                       		adda.w	(a2),a2
0000DD96 3489                       		move.w	a1,(a2)
0000DD98                            
0000DD98                            locret_D63E:
0000DD98 4E75                       		rts	
0000DD9A                            ; End of function DisplaySprite2
0000DD9A                            
0000DD9A                            ; ---------------------------------------------------------------------------
0000DD9A                            ; Subroutine to	delete an object
0000DD9A                            ; ---------------------------------------------------------------------------
0000DD9A                            
0000DD9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD9A                            
0000DD9A                            
0000DD9A                            DeleteObject:
0000DD9A 2248                       		movea.l	a0,a1
0000DD9C                            
0000DD9C                            DeleteObject2:
0000DD9C 7200                       		moveq	#0,d1
0000DD9E 700F                       		moveq	#$F,d0
0000DDA0                            
0000DDA0                            loc_D646:
0000DDA0 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DDA2 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DDA6 4E75                       		rts	
0000DDA8                            ; End of function DeleteObject
0000DDA8                            
0000DDA8                            ; ===========================================================================
0000DDA8 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DDAC 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DDB0 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DDB4 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DDB8                            ; ---------------------------------------------------------------------------
0000DDB8                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DDB8                            ; ---------------------------------------------------------------------------
0000DDB8                            
0000DDB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDB8                            
0000DDB8                            
0000DDB8                            BuildSprites:				; XREF: TitleScreen; et al
0000DDB8 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DDBC 7A00                       		moveq	#0,d5
0000DDBE 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DDC2 7E07                       		moveq	#7,d7
0000DDC4                            
0000DDC4                            loc_D66A:
0000DDC4 4A54                       		tst.w	(a4)
0000DDC6 6700 0000                  		beq.w	loc_D72E
0000DDCA 7C02                       		moveq	#2,d6
0000DDCC                            
0000DDCC                            loc_D672:
0000DDCC 3074 6000                  		movea.w	(a4,d6.w),a0
0000DDD0 4A10                       		tst.b	(a0)
0000DDD2 6700 0000                  		beq.w	loc_D726
0000DDD6 08A8 0007 0001             		bclr	#7,1(a0)
0000DDDC 1028 0001                  		move.b	1(a0),d0
0000DDE0 1800                       		move.b	d0,d4
0000DDE2 0240 000C                  		andi.w	#$C,d0
0000DDE6 6700                       		beq.s	loc_D6DE
0000DDE8 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DDEC 7000                       		moveq	#0,d0
0000DDEE 1028 0019                  		move.b	$19(a0),d0
0000DDF2 3628 0008                  		move.w	8(a0),d3
0000DDF6 9651                       		sub.w	(a1),d3
0000DDF8 3203                       		move.w	d3,d1
0000DDFA D240                       		add.w	d0,d1
0000DDFC 6B00 0000                  		bmi.w	loc_D726
0000DE00 3203                       		move.w	d3,d1
0000DE02 9240                       		sub.w	d0,d1
0000DE04 0C41 0140                  		cmpi.w	#$140,d1
0000DE08 6C00                       		bge.s	loc_D726
0000DE0A 0643 0080                  		addi.w	#$80,d3
0000DE0E 0804 0004                  		btst	#4,d4
0000DE12 6700                       		beq.s	loc_D6E8
0000DE14 7000                       		moveq	#0,d0
0000DE16 1028 0016                  		move.b	$16(a0),d0
0000DE1A 3428 000C                  		move.w	$C(a0),d2
0000DE1E 9469 0004                  		sub.w	4(a1),d2
0000DE22 3202                       		move.w	d2,d1
0000DE24 D240                       		add.w	d0,d1
0000DE26 6B00                       		bmi.s	loc_D726
0000DE28 3202                       		move.w	d2,d1
0000DE2A 9240                       		sub.w	d0,d1
0000DE2C 0C41 00E0                  		cmpi.w	#$E0,d1
0000DE30 6C00                       		bge.s	loc_D726
0000DE32 0642 0080                  		addi.w	#$80,d2
0000DE36 6000                       		bra.s	loc_D700
0000DE38                            ; ===========================================================================
0000DE38                            
0000DE38                            loc_D6DE:
0000DE38 3428 000A                  		move.w	$A(a0),d2
0000DE3C 3628 0008                  		move.w	8(a0),d3
0000DE40 6000                       		bra.s	loc_D700
0000DE42                            ; ===========================================================================
0000DE42                            
0000DE42                            loc_D6E8:
0000DE42 3428 000C                  		move.w	$C(a0),d2
0000DE46 9469 0004                  		sub.w	4(a1),d2
0000DE4A 0642 0080                  		addi.w	#$80,d2
0000DE4E 0C42 0060                  		cmpi.w	#$60,d2
0000DE52 6500                       		bcs.s	loc_D726
0000DE54 0C42 0180                  		cmpi.w	#$180,d2
0000DE58 6400                       		bcc.s	loc_D726
0000DE5A                            
0000DE5A                            loc_D700:
0000DE5A 2268 0004                  		movea.l	4(a0),a1
0000DE5E 7200                       		moveq	#0,d1
0000DE60 0804 0005                  		btst	#5,d4
0000DE64 6600                       		bne.s	loc_D71C
0000DE66 1228 001A                  		move.b	$1A(a0),d1
0000DE6A D201                       		add.b	d1,d1
0000DE6C D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DE70 1219                       		move.b	(a1)+,d1
0000DE72 5301                       		subq.b	#1,d1
0000DE74 6B00                       		bmi.s	loc_D720
0000DE76                            
0000DE76                            loc_D71C:
0000DE76 6100 0000                  		bsr.w	sub_D750
0000DE7A                            
0000DE7A                            loc_D720:
0000DE7A 08E8 0007 0001             		bset	#7,1(a0)
0000DE80                            
0000DE80                            loc_D726:
0000DE80 5446                       		addq.w	#2,d6
0000DE82 5554                       		subq.w	#2,(a4)
0000DE84 6600 FF46                  		bne.w	loc_D672
0000DE88                            
0000DE88                            loc_D72E:
0000DE88 49EC 0080                  		lea	$80(a4),a4
0000DE8C 51CF FF36                  		dbf	d7,loc_D66A
0000DE90 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DE94 0C05 0050                  		cmpi.b	#$50,d5
0000DE98 6700                       		beq.s	loc_D748
0000DE9A 24BC 0000 0000             		move.l	#0,(a2)
0000DEA0 4E75                       		rts	
0000DEA2                            ; ===========================================================================
0000DEA2                            
0000DEA2                            loc_D748:
0000DEA2 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DEA8 4E75                       		rts	
0000DEAA                            ; End of function BuildSprites
0000DEAA                            
0000DEAA                            
0000DEAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEAA                            
0000DEAA                            
0000DEAA                            sub_D750:				; XREF: BuildSprites
0000DEAA 3668 0002                  		movea.w	2(a0),a3
0000DEAE 0804 0000                  		btst	#0,d4
0000DEB2 6600                       		bne.s	loc_D796
0000DEB4 0804 0001                  		btst	#1,d4
0000DEB8 6600 0000                  		bne.w	loc_D7E4
0000DEBC                            ; End of function sub_D750
0000DEBC                            
0000DEBC                            
0000DEBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEBC                            
0000DEBC                            
0000DEBC                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DEBC 0C05 0050                  		cmpi.b	#$50,d5
0000DEC0 6700                       		beq.s	locret_D794
0000DEC2 1019                       		move.b	(a1)+,d0
0000DEC4 4880                       		ext.w	d0
0000DEC6 D042                       		add.w	d2,d0
0000DEC8 34C0                       		move.w	d0,(a2)+
0000DECA 14D9                       		move.b	(a1)+,(a2)+
0000DECC 5205                       		addq.b	#1,d5
0000DECE 14C5                       		move.b	d5,(a2)+
0000DED0 1019                       		move.b	(a1)+,d0
0000DED2 E148                       		lsl.w	#8,d0
0000DED4 1019                       		move.b	(a1)+,d0
0000DED6 D04B                       		add.w	a3,d0
0000DED8 34C0                       		move.w	d0,(a2)+
0000DEDA 1019                       		move.b	(a1)+,d0
0000DEDC 4880                       		ext.w	d0
0000DEDE D043                       		add.w	d3,d0
0000DEE0 0240 01FF                  		andi.w	#$1FF,d0
0000DEE4 6600                       		bne.s	loc_D78E
0000DEE6 5240                       		addq.w	#1,d0
0000DEE8                            
0000DEE8                            loc_D78E:
0000DEE8 34C0                       		move.w	d0,(a2)+
0000DEEA 51C9 FFD0                  		dbf	d1,sub_D762
0000DEEE                            
0000DEEE                            locret_D794:
0000DEEE 4E75                       		rts	
0000DEF0                            ; End of function sub_D762
0000DEF0                            
0000DEF0                            ; ===========================================================================
0000DEF0                            
0000DEF0                            loc_D796:
0000DEF0 0804 0001                  		btst	#1,d4
0000DEF4 6600 0000                  		bne.w	loc_D82A
0000DEF8                            
0000DEF8                            loc_D79E:
0000DEF8 0C05 0050                  		cmpi.b	#$50,d5
0000DEFC 6700                       		beq.s	locret_D7E2
0000DEFE 1019                       		move.b	(a1)+,d0
0000DF00 4880                       		ext.w	d0
0000DF02 D042                       		add.w	d2,d0
0000DF04 34C0                       		move.w	d0,(a2)+
0000DF06 1819                       		move.b	(a1)+,d4
0000DF08 14C4                       		move.b	d4,(a2)+
0000DF0A 5205                       		addq.b	#1,d5
0000DF0C 14C5                       		move.b	d5,(a2)+
0000DF0E 1019                       		move.b	(a1)+,d0
0000DF10 E148                       		lsl.w	#8,d0
0000DF12 1019                       		move.b	(a1)+,d0
0000DF14 D04B                       		add.w	a3,d0
0000DF16 0A40 0800                  		eori.w	#$800,d0
0000DF1A 34C0                       		move.w	d0,(a2)+
0000DF1C 1019                       		move.b	(a1)+,d0
0000DF1E 4880                       		ext.w	d0
0000DF20 4440                       		neg.w	d0
0000DF22 D804                       		add.b	d4,d4
0000DF24 0244 0018                  		andi.w	#$18,d4
0000DF28 5044                       		addq.w	#8,d4
0000DF2A 9044                       		sub.w	d4,d0
0000DF2C D043                       		add.w	d3,d0
0000DF2E 0240 01FF                  		andi.w	#$1FF,d0
0000DF32 6600                       		bne.s	loc_D7DC
0000DF34 5240                       		addq.w	#1,d0
0000DF36                            
0000DF36                            loc_D7DC:
0000DF36 34C0                       		move.w	d0,(a2)+
0000DF38 51C9 FFBE                  		dbf	d1,loc_D79E
0000DF3C                            
0000DF3C                            locret_D7E2:
0000DF3C 4E75                       		rts	
0000DF3E                            ; ===========================================================================
0000DF3E                            
0000DF3E                            loc_D7E4:				; XREF: sub_D750
0000DF3E 0C05 0050                  		cmpi.b	#$50,d5
0000DF42 6700                       		beq.s	locret_D828
0000DF44 1019                       		move.b	(a1)+,d0
0000DF46 1811                       		move.b	(a1),d4
0000DF48 4880                       		ext.w	d0
0000DF4A 4440                       		neg.w	d0
0000DF4C E70C                       		lsl.b	#3,d4
0000DF4E 0244 0018                  		andi.w	#$18,d4
0000DF52 5044                       		addq.w	#8,d4
0000DF54 9044                       		sub.w	d4,d0
0000DF56 D042                       		add.w	d2,d0
0000DF58 34C0                       		move.w	d0,(a2)+
0000DF5A 14D9                       		move.b	(a1)+,(a2)+
0000DF5C 5205                       		addq.b	#1,d5
0000DF5E 14C5                       		move.b	d5,(a2)+
0000DF60 1019                       		move.b	(a1)+,d0
0000DF62 E148                       		lsl.w	#8,d0
0000DF64 1019                       		move.b	(a1)+,d0
0000DF66 D04B                       		add.w	a3,d0
0000DF68 0A40 1000                  		eori.w	#$1000,d0
0000DF6C 34C0                       		move.w	d0,(a2)+
0000DF6E 1019                       		move.b	(a1)+,d0
0000DF70 4880                       		ext.w	d0
0000DF72 D043                       		add.w	d3,d0
0000DF74 0240 01FF                  		andi.w	#$1FF,d0
0000DF78 6600                       		bne.s	loc_D822
0000DF7A 5240                       		addq.w	#1,d0
0000DF7C                            
0000DF7C                            loc_D822:
0000DF7C 34C0                       		move.w	d0,(a2)+
0000DF7E 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DF82                            
0000DF82                            locret_D828:
0000DF82 4E75                       		rts	
0000DF84                            ; ===========================================================================
0000DF84                            
0000DF84                            loc_D82A:
0000DF84 0C05 0050                  		cmpi.b	#$50,d5
0000DF88 6700                       		beq.s	locret_D87C
0000DF8A 1019                       		move.b	(a1)+,d0
0000DF8C 1811                       		move.b	(a1),d4
0000DF8E 4880                       		ext.w	d0
0000DF90 4440                       		neg.w	d0
0000DF92 E70C                       		lsl.b	#3,d4
0000DF94 0244 0018                  		andi.w	#$18,d4
0000DF98 5044                       		addq.w	#8,d4
0000DF9A 9044                       		sub.w	d4,d0
0000DF9C D042                       		add.w	d2,d0
0000DF9E 34C0                       		move.w	d0,(a2)+
0000DFA0 1819                       		move.b	(a1)+,d4
0000DFA2 14C4                       		move.b	d4,(a2)+
0000DFA4 5205                       		addq.b	#1,d5
0000DFA6 14C5                       		move.b	d5,(a2)+
0000DFA8 1019                       		move.b	(a1)+,d0
0000DFAA E148                       		lsl.w	#8,d0
0000DFAC 1019                       		move.b	(a1)+,d0
0000DFAE D04B                       		add.w	a3,d0
0000DFB0 0A40 1800                  		eori.w	#$1800,d0
0000DFB4 34C0                       		move.w	d0,(a2)+
0000DFB6 1019                       		move.b	(a1)+,d0
0000DFB8 4880                       		ext.w	d0
0000DFBA 4440                       		neg.w	d0
0000DFBC D804                       		add.b	d4,d4
0000DFBE 0244 0018                  		andi.w	#$18,d4
0000DFC2 5044                       		addq.w	#8,d4
0000DFC4 9044                       		sub.w	d4,d0
0000DFC6 D043                       		add.w	d3,d0
0000DFC8 0240 01FF                  		andi.w	#$1FF,d0
0000DFCC 6600                       		bne.s	loc_D876
0000DFCE 5240                       		addq.w	#1,d0
0000DFD0                            
0000DFD0                            loc_D876:
0000DFD0 34C0                       		move.w	d0,(a2)+
0000DFD2 51C9 FFB0                  		dbf	d1,loc_D82A
0000DFD6                            
0000DFD6                            locret_D87C:
0000DFD6 4E75                       		rts	
0000DFD8                            ; ---------------------------------------------------------------------------
0000DFD8                            ; Subroutine to	check if an object is on the screen
0000DFD8                            ; ---------------------------------------------------------------------------
0000DFD8                            
0000DFD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFD8                            
0000DFD8                            
0000DFD8                            ChkObjOnScreen:
0000DFD8 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DFDC 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DFE0 6B00                       		bmi.s	NotOnScreen
0000DFE2 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DFE6 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DFE8                            
0000DFE8 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DFEC 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DFF0 6B00                       		bmi.s	NotOnScreen
0000DFF2 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DFF6 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DFF8                            
0000DFF8 7000                       		moveq	#0,d0		; set flag to 0
0000DFFA 4E75                       		rts	
0000DFFC                            ; ===========================================================================
0000DFFC                            
0000DFFC                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DFFC 7001                       		moveq	#1,d0		; set flag to 1
0000DFFE 4E75                       		rts	
0000E000                            ; End of function ChkObjOnScreen
0000E000                            
0000E000                            
0000E000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E000                            
0000E000                            
0000E000                            ChkObjOnScreen2:
0000E000 7200                       		moveq	#0,d1
0000E002 1228 0019                  		move.b	$19(a0),d1
0000E006 3028 0008                  		move.w	8(a0),d0
0000E00A 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E00E D041                       		add.w	d1,d0
0000E010 6B00                       		bmi.s	NotOnScreen2
0000E012 D241                       		add.w	d1,d1
0000E014 9041                       		sub.w	d1,d0
0000E016 0C40 0140                  		cmpi.w	#320,d0
0000E01A 6C00                       		bge.s	NotOnScreen2
0000E01C                            
0000E01C 3228 000C                  		move.w	$C(a0),d1
0000E020 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E024 6B00                       		bmi.s	NotOnScreen2
0000E026 0C41 00E0                  		cmpi.w	#224,d1
0000E02A 6C00                       		bge.s	NotOnScreen2
0000E02C                            
0000E02C 7000                       		moveq	#0,d0
0000E02E 4E75                       		rts	
0000E030                            ; ===========================================================================
0000E030                            
0000E030                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E030 7001                       		moveq	#1,d0
0000E032 4E75                       		rts	
0000E034                            ; End of function ChkObjOnScreen2
0000E034                            
0000E034                            ; ---------------------------------------------------------------------------
0000E034                            ; Subroutine to	load a level's objects
0000E034                            ; ---------------------------------------------------------------------------
0000E034                            
0000E034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E034                            
0000E034                            
0000E034                            ObjPosLoad:				; XREF: Level; et al
0000E034 7000                       		moveq	#0,d0
0000E036 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E03A 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E03E 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E042                            ; End of function ObjPosLoad
0000E042                            
0000E042                            ; ===========================================================================
0000E042 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E044 0000                       		dc.w OPL_Next-OPL_Index
0000E046                            ; ===========================================================================
0000E046                            
0000E046                            OPL_Main:				; XREF: OPL_Index
0000E046 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E04A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E04E ED08                       		lsl.b	#6,d0
0000E050 E848                       		lsr.w	#4,d0
0000E052 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E058 2248                       		movea.l	a0,a1
0000E05A D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E05E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E062 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E066 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E06A 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E06E 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E072 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E076 34FC 0101                  		move.w	#$101,(a2)+
0000E07A 303C 005E                  		move.w	#$5E,d0
0000E07E                            
0000E07E                            OPL_ClrList:
0000E07E 429A                       		clr.l	(a2)+
0000E080 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E084                            
0000E084 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E088 7400                       		moveq	#0,d2
0000E08A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E08E 0446 0080                  		subi.w	#$80,d6
0000E092 6400                       		bcc.s	loc_D93C
0000E094 7C00                       		moveq	#0,d6
0000E096                            
0000E096                            loc_D93C:
0000E096 0246 FF80                  		andi.w	#$FF80,d6
0000E09A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E09E                            
0000E09E                            loc_D944:
0000E09E BC50                       		cmp.w	(a0),d6
0000E0A0 6300                       		bls.s	loc_D956
0000E0A2 4A28 0004                  		tst.b	4(a0)
0000E0A6 6A00                       		bpl.s	loc_D952
0000E0A8 1412                       		move.b	(a2),d2
0000E0AA 5212                       		addq.b	#1,(a2)
0000E0AC                            
0000E0AC                            loc_D952:
0000E0AC 5C48                       		addq.w	#6,a0
0000E0AE 60EE                       		bra.s	loc_D944
0000E0B0                            ; ===========================================================================
0000E0B0                            
0000E0B0                            loc_D956:
0000E0B0 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E0B4 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E0B8 0446 0080                  		subi.w	#$80,d6
0000E0BC 6500                       		bcs.s	loc_D976
0000E0BE                            
0000E0BE                            loc_D964:
0000E0BE BC50                       		cmp.w	(a0),d6
0000E0C0 6300                       		bls.s	loc_D976
0000E0C2 4A28 0004                  		tst.b	4(a0)
0000E0C6 6A00                       		bpl.s	loc_D972
0000E0C8 522A 0001                  		addq.b	#1,1(a2)
0000E0CC                            
0000E0CC                            loc_D972:
0000E0CC 5C48                       		addq.w	#6,a0
0000E0CE 60EE                       		bra.s	loc_D964
0000E0D0                            ; ===========================================================================
0000E0D0                            
0000E0D0                            loc_D976:
0000E0D0 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E0D4 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E0DA                            
0000E0DA                            OPL_Next:				; XREF: OPL_Index
0000E0DA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E0DE 7400                       		moveq	#0,d2
0000E0E0 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E0E4 0246 FF80                  		andi.w	#$FF80,d6
0000E0E8 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E0EC 6700 0000                  		beq.w	locret_DA3A
0000E0F0 6C00                       		bge.s	loc_D9F6
0000E0F2 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E0F6 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E0FA 0446 0080                  		subi.w	#$80,d6
0000E0FE 6500                       		bcs.s	loc_D9D2
0000E100                            
0000E100                            loc_D9A6:
0000E100 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E104 6C00                       		bge.s	loc_D9D2
0000E106 5D48                       		subq.w	#6,a0
0000E108 4A28 0004                  		tst.b	4(a0)
0000E10C 6A00                       		bpl.s	loc_D9BC
0000E10E 532A 0001                  		subq.b	#1,1(a2)
0000E112 142A 0001                  		move.b	1(a2),d2
0000E116                            
0000E116                            loc_D9BC:
0000E116 6100 0000                  		bsr.w	loc_DA3C
0000E11A 6600                       		bne.s	loc_D9C6
0000E11C 5D48                       		subq.w	#6,a0
0000E11E 60E0                       		bra.s	loc_D9A6
0000E120                            ; ===========================================================================
0000E120                            
0000E120                            loc_D9C6:
0000E120 4A28 0004                  		tst.b	4(a0)
0000E124 6A00                       		bpl.s	loc_D9D0
0000E126 522A 0001                  		addq.b	#1,1(a2)
0000E12A                            
0000E12A                            loc_D9D0:
0000E12A 5C48                       		addq.w	#6,a0
0000E12C                            
0000E12C                            loc_D9D2:
0000E12C 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E130 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E134 0646 0300                  		addi.w	#$300,d6
0000E138                            
0000E138                            loc_D9DE:
0000E138 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E13C 6E00                       		bgt.s	loc_D9F0
0000E13E 4A28 FFFE                  		tst.b	-2(a0)
0000E142 6A00                       		bpl.s	loc_D9EC
0000E144 5312                       		subq.b	#1,(a2)
0000E146                            
0000E146                            loc_D9EC:
0000E146 5D48                       		subq.w	#6,a0
0000E148 60EE                       		bra.s	loc_D9DE
0000E14A                            ; ===========================================================================
0000E14A                            
0000E14A                            loc_D9F0:
0000E14A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E14E 4E75                       		rts	
0000E150                            ; ===========================================================================
0000E150                            
0000E150                            loc_D9F6:
0000E150 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E154 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E158 0646 0280                  		addi.w	#$280,d6
0000E15C                            
0000E15C                            loc_DA02:
0000E15C BC50                       		cmp.w	(a0),d6
0000E15E 6300                       		bls.s	loc_DA16
0000E160 4A28 0004                  		tst.b	4(a0)
0000E164 6A00                       		bpl.s	loc_DA10
0000E166 1412                       		move.b	(a2),d2
0000E168 5212                       		addq.b	#1,(a2)
0000E16A                            
0000E16A                            loc_DA10:
0000E16A 6100 0000                  		bsr.w	loc_DA3C
0000E16E 67EC                       		beq.s	loc_DA02
0000E170                            
0000E170                            loc_DA16:
0000E170 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E174 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E178 0446 0300                  		subi.w	#$300,d6
0000E17C 6500                       		bcs.s	loc_DA36
0000E17E                            
0000E17E                            loc_DA24:
0000E17E BC50                       		cmp.w	(a0),d6
0000E180 6300                       		bls.s	loc_DA36
0000E182 4A28 0004                  		tst.b	4(a0)
0000E186 6A00                       		bpl.s	loc_DA32
0000E188 522A 0001                  		addq.b	#1,1(a2)
0000E18C                            
0000E18C                            loc_DA32:
0000E18C 5C48                       		addq.w	#6,a0
0000E18E 60EE                       		bra.s	loc_DA24
0000E190                            ; ===========================================================================
0000E190                            
0000E190                            loc_DA36:
0000E190 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E194                            
0000E194                            locret_DA3A:
0000E194 4E75                       		rts	
0000E196                            ; ===========================================================================
0000E196                            
0000E196                            loc_DA3C:
0000E196 4A28 0004                  		tst.b	4(a0)
0000E19A 6A00                       		bpl.s	OPL_MakeItem
0000E19C 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E1A2 6700                       		beq.s	OPL_MakeItem
0000E1A4 5C48                       		addq.w	#6,a0
0000E1A6 7000                       		moveq	#0,d0
0000E1A8 4E75                       		rts	
0000E1AA                            ; ===========================================================================
0000E1AA                            
0000E1AA                            OPL_MakeItem:
0000E1AA 6100 0000                  		bsr.w	SingleObjLoad
0000E1AE 6600                       		bne.s	locret_DA8A
0000E1B0 3358 0008                  		move.w	(a0)+,8(a1)
0000E1B4 3018                       		move.w	(a0)+,d0
0000E1B6 3200                       		move.w	d0,d1
0000E1B8 0240 0FFF                  		andi.w	#$FFF,d0
0000E1BC 3340 000C                  		move.w	d0,$C(a1)
0000E1C0 E559                       		rol.w	#2,d1
0000E1C2 0201 0003                  		andi.b	#3,d1
0000E1C6 1341 0001                  		move.b	d1,1(a1)
0000E1CA 1341 0022                  		move.b	d1,$22(a1)
0000E1CE 1018                       		move.b	(a0)+,d0
0000E1D0 6A00                       		bpl.s	loc_DA80
0000E1D2 0200 007F                  		andi.b	#$7F,d0
0000E1D6 1342 0023                  		move.b	d2,$23(a1)
0000E1DA                            
0000E1DA                            loc_DA80:
0000E1DA 1280                       		move.b	d0,0(a1)
0000E1DC 1358 0028                  		move.b	(a0)+,$28(a1)
0000E1E0 7000                       		moveq	#0,d0
0000E1E2                            
0000E1E2                            locret_DA8A:
0000E1E2 4E75                       		rts	
0000E1E4                            ; ---------------------------------------------------------------------------
0000E1E4                            ; Single object	loading	subroutine
0000E1E4                            ; ---------------------------------------------------------------------------
0000E1E4                            
0000E1E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1E4                            
0000E1E4                            
0000E1E4                            SingleObjLoad:
0000E1E4 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E1E8 303C 005F                  		move.w	#$5F,d0
0000E1EC                            
0000E1EC                            loc_DA94:
0000E1EC 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E1EE 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E1F0 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E1F4 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E1F8                            
0000E1F8                            locret_DAA0:
0000E1F8 4E75                       		rts	
0000E1FA                            ; End of function SingleObjLoad
0000E1FA                            
0000E1FA                            
0000E1FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1FA                            
0000E1FA                            
0000E1FA                            SingleObjLoad2:
0000E1FA 2248                       		movea.l	a0,a1
0000E1FC 303C F000                  		move.w	#-$1000,d0
0000E200 9048                       		sub.w	a0,d0
0000E202 EC48                       		lsr.w	#6,d0
0000E204 5340                       		subq.w	#1,d0
0000E206 6500                       		bcs.s	locret_DABC
0000E208                            
0000E208                            loc_DAB0:
0000E208 4A11                       		tst.b	(a1)
0000E20A 6700                       		beq.s	locret_DABC
0000E20C 43E9 0040                  		lea	$40(a1),a1
0000E210 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E214                            
0000E214                            locret_DABC:
0000E214 4E75                       		rts	
0000E216                            ; End of function SingleObjLoad2
0000E216                            
0000E216                            ; ===========================================================================
0000E216                            ; ---------------------------------------------------------------------------
0000E216                            ; Object 41 - springs
0000E216                            ; ---------------------------------------------------------------------------
0000E216                            
0000E216                            Obj41:					; XREF: Obj_Index
0000E216 7000                       		moveq	#0,d0
0000E218 1028 0024                  		move.b	$24(a0),d0
0000E21C 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E220 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E224 6100 FB38                  		bsr.w	DisplaySprite
0000E228 3028 0008                  		move.w	8(a0),d0
0000E22C 0240 FF80                  		andi.w	#$FF80,d0
0000E230 3238 F700                  		move.w	($FFFFF700).w,d1
0000E234 0441 0080                  		subi.w	#$80,d1
0000E238 0241 FF80                  		andi.w	#$FF80,d1
0000E23C 9041                       		sub.w	d1,d0
0000E23E 0C40 0280                  		cmpi.w	#$280,d0
0000E242 6200 FB56                  		bhi.w	DeleteObject
0000E246 4E75                       		rts	
0000E248                            ; ===========================================================================
0000E248 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E24A 0000                       		dc.w Obj41_Up-Obj41_Index
0000E24C 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E24E 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E250 0000                       		dc.w Obj41_LR-Obj41_Index
0000E252 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E254 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E256 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E258 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E25A 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E25C                            
0000E25C F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E25E F600                       		dc.w -$A00		; power	of yellow spring
0000E260                            ; ===========================================================================
0000E260                            
0000E260                            Obj41_Main:				; XREF: Obj41_Index
0000E260 5428 0024                  		addq.b	#2,$24(a0)
0000E264 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E26C 317C 0523 0002             		move.w	#$523,2(a0)
0000E272 0028 0004 0001             		ori.b	#4,1(a0)
0000E278 117C 0010 0019             		move.b	#$10,$19(a0)
0000E27E 117C 0004 0018             		move.b	#4,$18(a0)
0000E284 1028 0028                  		move.b	$28(a0),d0
0000E288 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E28C 6700                       		beq.s	loc_DB54	; if not, branch
0000E28E 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E294 117C 0001 001C             		move.b	#1,$1C(a0)
0000E29A 117C 0003 001A             		move.b	#3,$1A(a0)
0000E2A0 317C 0533 0002             		move.w	#$533,2(a0)
0000E2A6 117C 0008 0019             		move.b	#8,$19(a0)
0000E2AC                            
0000E2AC                            loc_DB54:
0000E2AC 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E2B0 6700                       		beq.s	loc_DB66	; if not, branch
0000E2B2 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E2B8 08E8 0001 0022             		bset	#1,$22(a0)
0000E2BE                            
0000E2BE                            loc_DB66:
0000E2BE 0800 0001                  		btst	#1,d0
0000E2C2 6700                       		beq.s	loc_DB72
0000E2C4 08E8 0005 0002             		bset	#5,2(a0)
0000E2CA                            
0000E2CA                            loc_DB72:
0000E2CA 0240 000F                  		andi.w	#$F,d0
0000E2CE 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E2D4 4E75                       		rts	
0000E2D6                            ; ===========================================================================
0000E2D6                            
0000E2D6                            Obj41_Up:				; XREF: Obj41_Index
0000E2D6 323C 001B                  		move.w	#$1B,d1
0000E2DA 343C 0008                  		move.w	#8,d2
0000E2DE 363C 0010                  		move.w	#$10,d3
0000E2E2 3828 0008                  		move.w	8(a0),d4
0000E2E6 6100 0000                  		bsr.w	SolidObject
0000E2EA 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E2EE 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E2F0 4E75                       		rts	
0000E2F2                            ; ===========================================================================
0000E2F2                            
0000E2F2                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E2F2 5428 0024                  		addq.b	#2,$24(a0)
0000E2F6 5069 000C                  		addq.w	#8,$C(a1)
0000E2FA 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E300 08E9 0001 0022             		bset	#1,$22(a1)
0000E306 08A9 0003 0022             		bclr	#3,$22(a1)
0000E30C 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E312 137C 0002 0024             		move.b	#2,$24(a1)
0000E318 08A8 0003 0022             		bclr	#3,$22(a0)
0000E31E 4228 0025                  		clr.b	$25(a0)
0000E322 303C 00CC                  		move.w	#$CC,d0
0000E326 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E32C                            
0000E32C                            Obj41_AniUp:				; XREF: Obj41_Index
0000E32C 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E332 6000 CAEA                  		bra.w	AnimateSprite
0000E336                            ; ===========================================================================
0000E336                            
0000E336                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E336 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E33C 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E340 4E75                       		rts	
0000E342                            ; ===========================================================================
0000E342                            
0000E342                            Obj41_LR:				; XREF: Obj41_Index
0000E342 323C 0013                  		move.w	#$13,d1
0000E346 343C 000E                  		move.w	#$E,d2
0000E34A 363C 000F                  		move.w	#$F,d3
0000E34E 3828 0008                  		move.w	8(a0),d4
0000E352 6100 0000                  		bsr.w	SolidObject
0000E356 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E35C 6600                       		bne.s	loc_DC0C
0000E35E 117C 0008 0024             		move.b	#8,$24(a0)
0000E364                            
0000E364                            loc_DC0C:
0000E364 0828 0005 0022             		btst	#5,$22(a0)
0000E36A 6600                       		bne.s	Obj41_BounceLR
0000E36C 4E75                       		rts	
0000E36E                            ; ===========================================================================
0000E36E                            
0000E36E                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E36E 5428 0024                  		addq.b	#2,$24(a0)
0000E372 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E378 5069 0008                  		addq.w	#8,8(a1)
0000E37C 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E382 6600                       		bne.s	loc_DC36	; if yes, branch
0000E384 0469 0010 0008             		subi.w	#$10,8(a1)
0000E38A 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E38E                            
0000E38E                            loc_DC36:
0000E38E 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E394 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E39A 0869 0000 0022             		bchg	#0,$22(a1)
0000E3A0 0829 0002 0022             		btst	#2,$22(a1)
0000E3A6 6600                       		bne.s	loc_DC56
0000E3A8 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E3AE                            
0000E3AE                            loc_DC56:
0000E3AE 08A8 0005 0022             		bclr	#5,$22(a0)
0000E3B4 08A9 0005 0022             		bclr	#5,$22(a1)
0000E3BA 303C 00CC                  		move.w	#$CC,d0
0000E3BE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E3C4                            
0000E3C4                            Obj41_AniLR:				; XREF: Obj41_Index
0000E3C4 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E3CA 6000 CA52                  		bra.w	AnimateSprite
0000E3CE                            ; ===========================================================================
0000E3CE                            
0000E3CE                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E3CE 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E3D4 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E3D8 4E75                       		rts	
0000E3DA                            ; ===========================================================================
0000E3DA                            
0000E3DA                            Obj41_Dwn:				; XREF: Obj41_Index
0000E3DA 323C 001B                  		move.w	#$1B,d1
0000E3DE 343C 0008                  		move.w	#8,d2
0000E3E2 363C 0010                  		move.w	#$10,d3
0000E3E6 3828 0008                  		move.w	8(a0),d4
0000E3EA 6100 0000                  		bsr.w	SolidObject
0000E3EE 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E3F4 6600                       		bne.s	loc_DCA4
0000E3F6 117C 000E 0024             		move.b	#$E,$24(a0)
0000E3FC                            
0000E3FC                            loc_DCA4:
0000E3FC 4A28 0025                  		tst.b	$25(a0)
0000E400 6600                       		bne.s	locret_DCAE
0000E402 4A44                       		tst.w	d4
0000E404 6B00                       		bmi.s	Obj41_BounceDwn
0000E406                            
0000E406                            locret_DCAE:
0000E406 4E75                       		rts	
0000E408                            ; ===========================================================================
0000E408                            
0000E408                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E408 5428 0024                  		addq.b	#2,$24(a0)
0000E40C 5169 000C                  		subq.w	#8,$C(a1)
0000E410 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E416 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E41A 08E9 0001 0022             		bset	#1,$22(a1)
0000E420 08A9 0003 0022             		bclr	#3,$22(a1)
0000E426 137C 0002 0024             		move.b	#2,$24(a1)
0000E42C 08A8 0003 0022             		bclr	#3,$22(a0)
0000E432 4228 0025                  		clr.b	$25(a0)
0000E436 303C 00CC                  		move.w	#$CC,d0
0000E43A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E440                            
0000E440                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E440 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E446 6000 C9D6                  		bra.w	AnimateSprite
0000E44A                            ; ===========================================================================
0000E44A                            
0000E44A                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E44A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E450 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E454 4E75                       		rts	
0000E456                            ; ===========================================================================
0000E456                            Ani_obj41:
0000E456                            	include "_anim\obj41.asm"
0000E456                            ; ---------------------------------------------------------------------------
0000E456                            ; Animation script - springs
0000E456                            ; ---------------------------------------------------------------------------
0000E456 0000                       		dc.w byte_DD02-Ani_obj41
0000E458 0000                       		dc.w byte_DD0E-Ani_obj41
0000E45A 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E466 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E472                            		even
0000E472                            		even
0000E472                            
0000E472                            ; ---------------------------------------------------------------------------
0000E472                            ; Sprite mappings - springs
0000E472                            ; ---------------------------------------------------------------------------
0000E472                            Map_obj41:
0000E472                            	include "_maps\obj41.asm"
0000E472                            ; ---------------------------------------------------------------------------
0000E472                            ; Sprite mappings - springs
0000E472                            ; ---------------------------------------------------------------------------
0000E472 0000                       		dc.w byte_DD26-Map_obj41
0000E474 0000                       		dc.w byte_DD31-Map_obj41
0000E476 0000                       		dc.w byte_DD37-Map_obj41
0000E478 0000                       		dc.w byte_DD47-Map_obj41
0000E47A 0000                       		dc.w byte_DD4D-Map_obj41
0000E47C 0000                       		dc.w byte_DD53-Map_obj41
0000E47E 02                         byte_DD26:	dc.b 2
0000E47F F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E484 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E489 01                         byte_DD31:	dc.b 1
0000E48A 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E48F 03                         byte_DD37:	dc.b 3
0000E490 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E495 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E49A 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E49F 01                         byte_DD47:	dc.b 1
0000E4A0 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E4A5 01                         byte_DD4D:	dc.b 1
0000E4A6 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E4AB 04                         byte_DD53:	dc.b 4
0000E4AC F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E4B1 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E4B6 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E4BB 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E4C0                            		even
0000E4C0                            		even
0000E4C0                            
0000E4C0                            ; ===========================================================================
0000E4C0                            ; ---------------------------------------------------------------------------
0000E4C0                            ; Object 42 - Newtron enemy (GHZ)
0000E4C0                            ; ---------------------------------------------------------------------------
0000E4C0                            
0000E4C0                            Obj42:					; XREF: Obj_Index
0000E4C0 7000                       		moveq	#0,d0
0000E4C2 1028 0024                  		move.b	$24(a0),d0
0000E4C6 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E4CA 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E4CE                            ; ===========================================================================
0000E4CE 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E4D0 0000                       		dc.w Obj42_Action-Obj42_Index
0000E4D2 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E4D4                            ; ===========================================================================
0000E4D4                            
0000E4D4                            Obj42_Main:				; XREF: Obj42_Index
0000E4D4 5428 0024                  		addq.b	#2,$24(a0)
0000E4D8 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E4E0 317C 049B 0002             		move.w	#$49B,2(a0)
0000E4E6 117C 0004 0001             		move.b	#4,1(a0)
0000E4EC 117C 0004 0018             		move.b	#4,$18(a0)
0000E4F2 117C 0014 0019             		move.b	#$14,$19(a0)
0000E4F8 117C 0010 0016             		move.b	#$10,$16(a0)
0000E4FE 117C 0008 0017             		move.b	#8,$17(a0)
0000E504                            
0000E504                            Obj42_Action:				; XREF: Obj42_Index
0000E504 7000                       		moveq	#0,d0
0000E506 1028 0025                  		move.b	$25(a0),d0
0000E50A 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E50E 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E512 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E518 6100 C904                  		bsr.w	AnimateSprite
0000E51C 6000 0000                  		bra.w	MarkObjGone
0000E520                            ; ===========================================================================
0000E520 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E522 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E524 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E526 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E528 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E52A                            ; ===========================================================================
0000E52A                            
0000E52A                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E52A 08E8 0000 0022             		bset	#0,$22(a0)
0000E530 3038 D008                  		move.w	($FFFFD008).w,d0
0000E534 9068 0008                  		sub.w	8(a0),d0
0000E538 6400                       		bcc.s	loc_DDEA
0000E53A 4440                       		neg.w	d0
0000E53C 08A8 0000 0022             		bclr	#0,$22(a0)
0000E542                            
0000E542                            loc_DDEA:
0000E542 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E546 6400                       		bcc.s	locret_DE12	; if not, branch
0000E548 5428 0025                  		addq.b	#2,$25(a0)
0000E54C 117C 0001 001C             		move.b	#1,$1C(a0)
0000E552 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E556 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E558 317C 249B 0002             		move.w	#$249B,2(a0)
0000E55E 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E564 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E56A                            
0000E56A                            locret_DE12:
0000E56A 4E75                       		rts	
0000E56C                            ; ===========================================================================
0000E56C                            
0000E56C                            Obj42_Type00:				; XREF: Obj42_Index2
0000E56C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E572 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E574 08E8 0000 0022             		bset	#0,$22(a0)
0000E57A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E57E 9068 0008                  		sub.w	8(a0),d0
0000E582 6400                       		bcc.s	locret_DE32
0000E584 08A8 0000 0022             		bclr	#0,$22(a0)
0000E58A                            
0000E58A                            locret_DE32:
0000E58A 4E75                       		rts	
0000E58C                            ; ===========================================================================
0000E58C                            
0000E58C                            Obj42_Fall:				; XREF: Obj42_Type00
0000E58C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E592 6600                       		bne.s	loc_DE42
0000E594 117C 000C 0020             		move.b	#$C,$20(a0)
0000E59A                            
0000E59A                            loc_DE42:
0000E59A 6100 F770                  		bsr.w	ObjectFall
0000E59E 6100 0000                  		bsr.w	ObjHitFloor
0000E5A2 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E5A4 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E5A6 D368 000C                  		add.w	d1,$C(a0)
0000E5AA 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E5B0 5428 0025                  		addq.b	#2,$25(a0)
0000E5B4 117C 0002 001C             		move.b	#2,$1C(a0)
0000E5BA 0828 0005 0002             		btst	#5,2(a0)
0000E5C0 6700                       		beq.s	Obj42_Move
0000E5C2 5228 001C                  		addq.b	#1,$1C(a0)
0000E5C6                            
0000E5C6                            Obj42_Move:
0000E5C6 117C 000D 0020             		move.b	#$D,$20(a0)
0000E5CC 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E5D2 0828 0000 0022             		btst	#0,$22(a0)
0000E5D8 6600                       		bne.s	locret_DE86
0000E5DA 4468 0010                  		neg.w	$10(a0)
0000E5DE                            
0000E5DE                            locret_DE86:
0000E5DE 4E75                       		rts	
0000E5E0                            ; ===========================================================================
0000E5E0                            
0000E5E0                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E5E0 6100 F756                  		bsr.w	SpeedToPos
0000E5E4 6100 0000                  		bsr.w	ObjHitFloor
0000E5E8 0C41 FFF8                  		cmpi.w	#-8,d1
0000E5EC 6D00                       		blt.s	loc_DEA2
0000E5EE 0C41 000C                  		cmpi.w	#$C,d1
0000E5F2 6C00                       		bge.s	loc_DEA2
0000E5F4 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E5F8 4E75                       		rts	
0000E5FA                            ; ===========================================================================
0000E5FA                            
0000E5FA                            loc_DEA2:
0000E5FA 5428 0025                  		addq.b	#2,$25(a0)
0000E5FE 4E75                       		rts	
0000E600                            ; ===========================================================================
0000E600                            
0000E600                            Obj42_Speed:				; XREF: Obj42_Index2
0000E600 6100 F736                  		bsr.w	SpeedToPos
0000E604 4E75                       		rts	
0000E606                            ; ===========================================================================
0000E606                            
0000E606                            Obj42_Type01:				; XREF: Obj42_Index2
0000E606 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E60C 6600                       		bne.s	Obj42_FireMissile
0000E60E 117C 000C 0020             		move.b	#$C,$20(a0)
0000E614                            
0000E614                            Obj42_FireMissile:
0000E614 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E61A 6600                       		bne.s	locret_DF14
0000E61C 4A28 0032                  		tst.b	$32(a0)
0000E620 6600                       		bne.s	locret_DF14
0000E622 117C 0001 0032             		move.b	#1,$32(a0)
0000E628 6100 FBBA                  		bsr.w	SingleObjLoad
0000E62C 6600                       		bne.s	locret_DF14
0000E62E 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E632 3368 0008 0008             		move.w	8(a0),8(a1)
0000E638 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E63E 5169 000C                  		subq.w	#8,$C(a1)
0000E642 337C 0200 0010             		move.w	#$200,$10(a1)
0000E648 303C 0014                  		move.w	#$14,d0
0000E64C 0828 0000 0022             		btst	#0,$22(a0)
0000E652 6600                       		bne.s	loc_DF04
0000E654 4440                       		neg.w	d0
0000E656 4469 0010                  		neg.w	$10(a1)
0000E65A                            
0000E65A                            loc_DF04:
0000E65A D169 0008                  		add.w	d0,8(a1)
0000E65E 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E664 137C 0001 0028             		move.b	#1,$28(a1)
0000E66A                            
0000E66A                            locret_DF14:
0000E66A 4E75                       		rts	
0000E66C                            ; ===========================================================================
0000E66C                            
0000E66C                            Obj42_Delete:				; XREF: Obj42_Index
0000E66C 6000 F72C                  		bra.w	DeleteObject
0000E670                            ; ===========================================================================
0000E670                            Ani_obj42:
0000E670                            	include "_anim\obj42.asm"
0000E670                            ; ---------------------------------------------------------------------------
0000E670                            ; Animation script - Newtron enemy
0000E670                            ; ---------------------------------------------------------------------------
0000E670 0000                       		dc.w byte_DF24-Ani_obj42
0000E672 0000                       		dc.w byte_DF28-Ani_obj42
0000E674 0000                       		dc.w byte_DF30-Ani_obj42
0000E676 0000                       		dc.w byte_DF34-Ani_obj42
0000E678 0000                       		dc.w byte_DF38-Ani_obj42
0000E67A 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E67E 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E686 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E68A 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E68E 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E698                            		even
0000E698                            		even
0000E698                            
0000E698                            ; ---------------------------------------------------------------------------
0000E698                            ; Sprite mappings - Newtron enemy (GHZ)
0000E698                            ; ---------------------------------------------------------------------------
0000E698                            Map_obj42:
0000E698                            	include "_maps\obj42.asm"
0000E698                            ; ---------------------------------------------------------------------------
0000E698                            ; Sprite mappings - Newtron enemy (GHZ)
0000E698                            ; ---------------------------------------------------------------------------
0000E698 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E69C 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E6A0 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E6A4 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E6A8 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E6AC 0000                       		dc.w byte_DFF8-Map_obj42
0000E6AE 03                         byte_DF58:	dc.b 3
0000E6AF EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E6B4 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E6B9 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E6BE 03                         byte_DF68:	dc.b 3
0000E6BF EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E6C4 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E6C9 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E6CE 03                         byte_DF78:	dc.b 3
0000E6CF EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E6D4 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E6D9 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E6DE 04                         byte_DF88:	dc.b 4
0000E6DF EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E6E4 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E6E9 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E6EE 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E6F3 03                         byte_DF9D:	dc.b 3
0000E6F4 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E6F9 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E6FE 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E703 02                         byte_DFAD:	dc.b 2
0000E704 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E709 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E70E 03                         byte_DFB8:	dc.b 3
0000E70F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E714 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E719 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E71E 03                         byte_DFC8:	dc.b 3
0000E71F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E724 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E729 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E72E 03                         byte_DFD8:	dc.b 3
0000E72F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E734 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E739 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E73E 03                         byte_DFE8:	dc.b 3
0000E73F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E744 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E749 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E74E 00                         byte_DFF8:	dc.b 0
0000E750 00                         		even
0000E750 00                         		even
0000E750                            
0000E750                            ; ===========================================================================
0000E750                            ; ---------------------------------------------------------------------------
0000E750                            ; Object 43 - Roller enemy (SYZ)
0000E750                            ; ---------------------------------------------------------------------------
0000E750                            
0000E750                            Obj43:					; XREF: Obj_Index
0000E750 7000                       		moveq	#0,d0
0000E752 1028 0024                  		move.b	$24(a0),d0
0000E756 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E75A 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E75E                            ; ===========================================================================
0000E75E 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E760 0000                       		dc.w Obj43_Action-Obj43_Index
0000E762                            ; ===========================================================================
0000E762                            
0000E762                            Obj43_Main:				; XREF: Obj43_Index
0000E762 117C 000E 0016             		move.b	#$E,$16(a0)
0000E768 117C 0008 0017             		move.b	#8,$17(a0)
0000E76E 6100 F59C                  		bsr.w	ObjectFall
0000E772 6100 0000                  		bsr.w	ObjHitFloor
0000E776 4A41                       		tst.w	d1
0000E778 6A00                       		bpl.s	locret_E052
0000E77A D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E77E 317C 0000 0012             		move.w	#0,$12(a0)
0000E784 5428 0024                  		addq.b	#2,$24(a0)
0000E788 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E790 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E796 117C 0004 0001             		move.b	#4,1(a0)
0000E79C 117C 0004 0018             		move.b	#4,$18(a0)
0000E7A2 117C 0010 0019             		move.b	#$10,$19(a0)
0000E7A8                            
0000E7A8                            locret_E052:
0000E7A8 4E75                       		rts	
0000E7AA                            ; ===========================================================================
0000E7AA                            
0000E7AA                            Obj43_Action:				; XREF: Obj43_Index
0000E7AA 7000                       		moveq	#0,d0
0000E7AC 1028 0025                  		move.b	$25(a0),d0
0000E7B0 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E7B4 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E7B8 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E7BE 6100 C65E                  		bsr.w	AnimateSprite
0000E7C2 3028 0008                  		move.w	8(a0),d0
0000E7C6 0240 FF80                  		andi.w	#$FF80,d0
0000E7CA 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7CE 0441 0080                  		subi.w	#$80,d1
0000E7D2 0241 FF80                  		andi.w	#$FF80,d1
0000E7D6 9041                       		sub.w	d1,d0
0000E7D8 0C40 0280                  		cmpi.w	#$280,d0
0000E7DC 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E7E0 6000 F57C                  		bra.w	DisplaySprite
0000E7E4                            ; ===========================================================================
0000E7E4                            
0000E7E4                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E7E4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E7E8 7000                       		moveq	#0,d0
0000E7EA 1028 0023                  		move.b	$23(a0),d0
0000E7EE 6700                       		beq.s	Obj43_Delete
0000E7F0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E7F6                            
0000E7F6                            Obj43_Delete:
0000E7F6 6000 F5A2                  		bra.w	DeleteObject
0000E7FA                            ; ===========================================================================
0000E7FA 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E7FC 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E7FE 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E800 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E802                            ; ===========================================================================
0000E802                            
0000E802                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E802 3038 D008                  		move.w	($FFFFD008).w,d0
0000E806 0440 0100                  		subi.w	#$100,d0
0000E80A 6500                       		bcs.s	loc_E0D2
0000E80C 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E810 6500                       		bcs.s	loc_E0D2
0000E812 5828 0025                  		addq.b	#4,$25(a0)
0000E816 117C 0002 001C             		move.b	#2,$1C(a0)
0000E81C 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E822 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E828                            
0000E828                            loc_E0D2:
0000E828 588F                       		addq.l	#4,sp
0000E82A 4E75                       		rts	
0000E82C                            ; ===========================================================================
0000E82C                            
0000E82C                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E82C 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E832 6700                       		beq.s	loc_E0F8
0000E834 5368 0030                  		subq.w	#1,$30(a0)
0000E838 6A00                       		bpl.s	locret_E0F6
0000E83A 117C 0001 001C             		move.b	#1,$1C(a0)
0000E840 317C 0700 0010             		move.w	#$700,$10(a0)
0000E846 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E84C                            
0000E84C                            locret_E0F6:
0000E84C 4E75                       		rts	
0000E84E                            ; ===========================================================================
0000E84E                            
0000E84E                            loc_E0F8:
0000E84E 5428 0025                  		addq.b	#2,$25(a0)
0000E852 4E75                       		rts	
0000E854                            ; ===========================================================================
0000E854                            
0000E854                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E854 6100 0000                  		bsr.w	Obj43_Stop
0000E858 6100 F4DE                  		bsr.w	SpeedToPos
0000E85C 6100 0000                  		bsr.w	ObjHitFloor
0000E860 0C41 FFF8                  		cmpi.w	#-8,d1
0000E864 6D00                       		blt.s	Obj43_Jump
0000E866 0C41 000C                  		cmpi.w	#$C,d1
0000E86A 6C00                       		bge.s	Obj43_Jump
0000E86C D368 000C                  		add.w	d1,$C(a0)
0000E870 4E75                       		rts	
0000E872                            ; ===========================================================================
0000E872                            
0000E872                            Obj43_Jump:
0000E872 5428 0025                  		addq.b	#2,$25(a0)
0000E876 08E8 0000 0032             		bset	#0,$32(a0)
0000E87C 6700                       		beq.s	locret_E12E
0000E87E 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E884                            
0000E884                            locret_E12E:
0000E884 4E75                       		rts	
0000E886                            ; ===========================================================================
0000E886                            
0000E886                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E886 6100 F484                  		bsr.w	ObjectFall
0000E88A 4A68 0012                  		tst.w	$12(a0)
0000E88E 6B00                       		bmi.s	locret_E150
0000E890 6100 0000                  		bsr.w	ObjHitFloor
0000E894 4A41                       		tst.w	d1
0000E896 6A00                       		bpl.s	locret_E150
0000E898 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E89C 5528 0025                  		subq.b	#2,$25(a0)
0000E8A0 317C 0000 0012             		move.w	#0,$12(a0)
0000E8A6                            
0000E8A6                            locret_E150:
0000E8A6 4E75                       		rts	
0000E8A8                            
0000E8A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8A8                            
0000E8A8                            
0000E8A8                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E8A8 4A28 0032                  		tst.b	$32(a0)
0000E8AC 6B00                       		bmi.s	locret_E188
0000E8AE 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8B2 0440 0030                  		subi.w	#$30,d0
0000E8B6 9068 0008                  		sub.w	8(a0),d0
0000E8BA 6400                       		bcc.s	locret_E188
0000E8BC 117C 0000 001C             		move.b	#0,$1C(a0)
0000E8C2 117C 000E 0020             		move.b	#$E,$20(a0)
0000E8C8 4268 0010                  		clr.w	$10(a0)
0000E8CC 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E8D2 117C 0002 0025             		move.b	#2,$25(a0)
0000E8D8 08E8 0007 0032             		bset	#7,$32(a0)
0000E8DE                            
0000E8DE                            locret_E188:
0000E8DE 4E75                       		rts	
0000E8E0                            ; End of function Obj43_Stop
0000E8E0                            
0000E8E0                            ; ===========================================================================
0000E8E0                            Ani_obj43:
0000E8E0                            	include "_anim\obj43.asm"
0000E8E0                            ; ---------------------------------------------------------------------------
0000E8E0                            ; Animation script - Roller enemy
0000E8E0                            ; ---------------------------------------------------------------------------
0000E8E0 0000                       		dc.w byte_E190-Ani_obj43
0000E8E2 0000                       		dc.w byte_E196-Ani_obj43
0000E8E4 0000                       		dc.w byte_E19C-Ani_obj43
0000E8E6 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E8EC 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E8F2 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E8F8 00                         		even
0000E8F8 00                         		even
0000E8F8                            
0000E8F8                            ; ---------------------------------------------------------------------------
0000E8F8                            ; Sprite mappings - Roller enemy (SYZ)
0000E8F8                            ; ---------------------------------------------------------------------------
0000E8F8                            Map_obj43:
0000E8F8                            	include "_maps\obj43.asm"
0000E8F8                            Map_61da:
0000E8F8 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E8FA 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E8FC 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E8FE 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E900 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E902 02                         Map_61da_A: 	dc.b $2
0000E903 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E908 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E90D 02                         Map_61da_15: 	dc.b $2
0000E90E E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E913 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E918 01                         Map_61da_20: 	dc.b $1
0000E919 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E91E 01                         Map_61da_26: 	dc.b $1
0000E91F F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E924 01                         Map_61da_2C: 	dc.b $1
0000E925 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E92A                            	even
0000E92A                            	even
0000E92A                            
0000E92A                            ; ===========================================================================
0000E92A                            ; ---------------------------------------------------------------------------
0000E92A                            ; Object 44 - walls (GHZ)
0000E92A                            ; ---------------------------------------------------------------------------
0000E92A                            
0000E92A                            Obj44:					; XREF: Obj_Index
0000E92A 7000                       		moveq	#0,d0
0000E92C 1028 0024                  		move.b	$24(a0),d0
0000E930 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E934 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E938                            ; ===========================================================================
0000E938 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E93A 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E93C 0000                       		dc.w Obj44_Display-Obj44_Index
0000E93E                            ; ===========================================================================
0000E93E                            
0000E93E                            Obj44_Main:				; XREF: Obj44_Index
0000E93E 5428 0024                  		addq.b	#2,$24(a0)
0000E942 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E94A 317C 434C 0002             		move.w	#$434C,2(a0)
0000E950 0028 0004 0001             		ori.b	#4,1(a0)
0000E956 117C 0008 0019             		move.b	#8,$19(a0)
0000E95C 117C 0006 0018             		move.b	#6,$18(a0)
0000E962 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E968 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E96E 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E970 5428 0024                  		addq.b	#2,$24(a0)
0000E974 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E976                            ; ===========================================================================
0000E976                            
0000E976                            Obj44_Solid:				; XREF: Obj44_Index
0000E976 323C 0013                  		move.w	#$13,d1
0000E97A 343C 0028                  		move.w	#$28,d2
0000E97E 6100 A704                  		bsr.w	Obj44_SolidWall
0000E982                            
0000E982                            Obj44_Display:				; XREF: Obj44_Index
0000E982 6100 F3DA                  		bsr.w	DisplaySprite
0000E986 3028 0008                  		move.w	8(a0),d0
0000E98A 0240 FF80                  		andi.w	#$FF80,d0
0000E98E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E992 0441 0080                  		subi.w	#$80,d1
0000E996 0241 FF80                  		andi.w	#$FF80,d1
0000E99A 9041                       		sub.w	d1,d0
0000E99C 0C40 0280                  		cmpi.w	#$280,d0
0000E9A0 6200 F3F8                  		bhi.w	DeleteObject
0000E9A4 4E75                       		rts	
0000E9A6                            ; ===========================================================================
0000E9A6                            ; ---------------------------------------------------------------------------
0000E9A6                            ; Sprite mappings - walls (GHZ)
0000E9A6                            ; ---------------------------------------------------------------------------
0000E9A6                            Map_obj44:
0000E9A6                            	include "_maps\obj44.asm"
0000E9A6                            ; ---------------------------------------------------------------------------
0000E9A6                            ; Sprite mappings - walls (GHZ)
0000E9A6                            ; ---------------------------------------------------------------------------
0000E9A6 0000                       		dc.w byte_E256-Map_obj44
0000E9A8 0000                       		dc.w byte_E26B-Map_obj44
0000E9AA 0000                       		dc.w byte_E280-Map_obj44
0000E9AC 04                         byte_E256:	dc.b 4
0000E9AD E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E9B2 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E9B7 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E9BC 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E9C1 04                         byte_E26B:	dc.b 4
0000E9C2 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E9C7 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E9CC 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E9D1 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E9D6 04                         byte_E280:	dc.b 4
0000E9D7 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E9DC F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E9E1 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E9E6 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E9EC 00                         		even
0000E9EC 00                         		even
0000E9EC                            
0000E9EC                            ; ===========================================================================
0000E9EC                            ; ---------------------------------------------------------------------------
0000E9EC                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E9EC                            ; ---------------------------------------------------------------------------
0000E9EC                            
0000E9EC                            Obj13:					; XREF: Obj_Index
0000E9EC 7000                       		moveq	#0,d0
0000E9EE 1028 0024                  		move.b	$24(a0),d0
0000E9F2 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E9F6 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E9FA 6000 0000                  		bra.w	Obj14_ChkDel
0000E9FE                            ; ===========================================================================
0000E9FE 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EA00 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EA02                            ; ---------------------------------------------------------------------------
0000EA02                            ;
0000EA02                            ; Lava ball production rates
0000EA02                            ;
0000EA02 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EA08                            ; ===========================================================================
0000EA08                            
0000EA08                            Obj13_Main:				; XREF: Obj13_Index
0000EA08 5428 0024                  		addq.b	#2,$24(a0)
0000EA0C 1028 0028                  		move.b	$28(a0),d0
0000EA10 E848                       		lsr.w	#4,d0
0000EA12 0240 000F                  		andi.w	#$F,d0
0000EA16 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EA1C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EA22 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EA28                            
0000EA28                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EA28 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EA2C 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EA2E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EA34 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EA38 6600                       		bne.s	locret_E302
0000EA3A 6100 F7A8                  		bsr.w	SingleObjLoad
0000EA3E 6600                       		bne.s	locret_E302
0000EA40 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EA44 3368 0008 0008             		move.w	8(a0),8(a1)
0000EA4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EA50 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EA56                            
0000EA56                            locret_E302:
0000EA56 4E75                       		rts	
0000EA58                            ; ===========================================================================
0000EA58                            ; ---------------------------------------------------------------------------
0000EA58                            ; Object 14 - lava balls (MZ, SLZ)
0000EA58                            ; ---------------------------------------------------------------------------
0000EA58                            
0000EA58                            Obj14:					; XREF: Obj_Index
0000EA58 7000                       		moveq	#0,d0
0000EA5A 1028 0024                  		move.b	$24(a0),d0
0000EA5E 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EA62 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EA66 6000 F2F6                  		bra.w	DisplaySprite
0000EA6A                            ; ===========================================================================
0000EA6A 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EA6C 0000                       		dc.w Obj14_Action-Obj14_Index
0000EA6E 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EA70                            
0000EA70 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EA7A 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EA82                            ; ===========================================================================
0000EA82                            
0000EA82                            Obj14_Main:				; XREF: Obj14_Index
0000EA82 5428 0024                  		addq.b	#2,$24(a0)
0000EA86 117C 0008 0016             		move.b	#8,$16(a0)
0000EA8C 117C 0008 0017             		move.b	#8,$17(a0)
0000EA92 217C 0000 BA1C 0004        		move.l	#Map_obj14,4(a0)
0000EA9A 317C 0345 0002             		move.w	#$345,2(a0)
0000EAA0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EAA6 6600                       		bne.s	loc_E35A
0000EAA8 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EAAE                            
0000EAAE                            loc_E35A:
0000EAAE 117C 0004 0001             		move.b	#4,1(a0)
0000EAB4 117C 0003 0018             		move.b	#3,$18(a0)
0000EABA 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EAC0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EAC6 4A28 0029                  		tst.b	$29(a0)
0000EACA 6700                       		beq.s	Obj14_SetSpeed
0000EACC 5428 0018                  		addq.b	#2,$18(a0)
0000EAD0                            
0000EAD0                            Obj14_SetSpeed:
0000EAD0 7000                       		moveq	#0,d0
0000EAD2 1028 0028                  		move.b	$28(a0),d0
0000EAD6 D040                       		add.w	d0,d0
0000EAD8 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EADE 117C 0008 0019             		move.b	#8,$19(a0)
0000EAE4 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EAEA 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EAEC 117C 0010 0019             		move.b	#$10,$19(a0)
0000EAF2 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EAF8 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EAFE 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EB04                            
0000EB04                            Obj14_PlaySnd:
0000EB04 303C 00AE                  		move.w	#$AE,d0
0000EB08 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EB0E                            
0000EB0E                            Obj14_Action:				; XREF: Obj14_Index
0000EB0E 7000                       		moveq	#0,d0
0000EB10 1028 0028                  		move.b	$28(a0),d0
0000EB14 D040                       		add.w	d0,d0
0000EB16 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EB1A 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EB1E 6100 F218                  		bsr.w	SpeedToPos
0000EB22 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EB28 6100 C2F4                  		bsr.w	AnimateSprite
0000EB2C                            
0000EB2C                            Obj14_ChkDel:				; XREF: Obj13
0000EB2C 3028 0008                  		move.w	8(a0),d0
0000EB30 0240 FF80                  		andi.w	#$FF80,d0
0000EB34 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB38 0441 0080                  		subi.w	#$80,d1
0000EB3C 0241 FF80                  		andi.w	#$FF80,d1
0000EB40 9041                       		sub.w	d1,d0
0000EB42 0C40 0280                  		cmpi.w	#$280,d0
0000EB46 6200 F252                  		bhi.w	DeleteObject
0000EB4A 4E75                       		rts	
0000EB4C                            ; ===========================================================================
0000EB4C 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EB50 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EB54 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EB58 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EB5C 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EB5E                            ; ===========================================================================
0000EB5E                            ; lavaball types 00-03 fly up and fall back down
0000EB5E                            
0000EB5E                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EB5E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EB64 3028 0030                  		move.w	$30(a0),d0
0000EB68 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EB6C 6400                       		bcc.s	loc_E41E	; if not, branch
0000EB6E 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EB72                            
0000EB72                            loc_E41E:
0000EB72 08A8 0001 0022             		bclr	#1,$22(a0)
0000EB78 4A68 0012                  		tst.w	$12(a0)
0000EB7C 6A00                       		bpl.s	locret_E430
0000EB7E 08E8 0001 0022             		bset	#1,$22(a0)
0000EB84                            
0000EB84                            locret_E430:
0000EB84 4E75                       		rts	
0000EB86                            ; ===========================================================================
0000EB86                            ; lavaball type	04 flies up until it hits the ceiling
0000EB86                            
0000EB86                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EB86 08E8 0001 0022             		bset	#1,$22(a0)
0000EB8C 6100 0000                  		bsr.w	ObjHitCeiling
0000EB90 4A41                       		tst.w	d1
0000EB92 6A00                       		bpl.s	locret_E452
0000EB94 117C 0008 0028             		move.b	#8,$28(a0)
0000EB9A 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBA0 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EBA6                            
0000EBA6                            locret_E452:
0000EBA6 4E75                       		rts	
0000EBA8                            ; ===========================================================================
0000EBA8                            ; lavaball type	05 falls down until it hits the	floor
0000EBA8                            
0000EBA8                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EBA8 08A8 0001 0022             		bclr	#1,$22(a0)
0000EBAE 6100 0000                  		bsr.w	ObjHitFloor
0000EBB2 4A41                       		tst.w	d1
0000EBB4 6A00                       		bpl.s	locret_E474
0000EBB6 117C 0008 0028             		move.b	#8,$28(a0)
0000EBBC 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBC2 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EBC8                            
0000EBC8                            locret_E474:
0000EBC8 4E75                       		rts	
0000EBCA                            ; ===========================================================================
0000EBCA                            ; lavaball types 06-07 move sideways
0000EBCA                            
0000EBCA                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EBCA 08E8 0000 0022             		bset	#0,$22(a0)
0000EBD0 76F8                       		moveq	#-8,d3
0000EBD2 6100 0000                  		bsr.w	ObjHitWallLeft
0000EBD6 4A41                       		tst.w	d1
0000EBD8 6A00                       		bpl.s	locret_E498
0000EBDA 117C 0008 0028             		move.b	#8,$28(a0)
0000EBE0 117C 0003 001C             		move.b	#3,$1C(a0)
0000EBE6 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EBEC                            
0000EBEC                            locret_E498:
0000EBEC 4E75                       		rts	
0000EBEE                            ; ===========================================================================
0000EBEE                            
0000EBEE                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EBEE 08A8 0000 0022             		bclr	#0,$22(a0)
0000EBF4 7608                       		moveq	#8,d3
0000EBF6 6100 0000                  		bsr.w	ObjHitWallRight
0000EBFA 4A41                       		tst.w	d1
0000EBFC 6A00                       		bpl.s	locret_E4BC
0000EBFE 117C 0008 0028             		move.b	#8,$28(a0)
0000EC04 117C 0003 001C             		move.b	#3,$1C(a0)
0000EC0A 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC10                            
0000EC10                            locret_E4BC:
0000EC10 4E75                       		rts	
0000EC12                            ; ===========================================================================
0000EC12                            
0000EC12                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EC12 4E75                       		rts	
0000EC14                            ; ===========================================================================
0000EC14                            
0000EC14                            Obj14_Delete:				; XREF: Obj14_Index
0000EC14 6000 F184                  		bra.w	DeleteObject
0000EC18                            ; ===========================================================================
0000EC18                            Ani_obj14:
0000EC18                            	include "_anim\obj14.asm"
0000EC18                            ; ---------------------------------------------------------------------------
0000EC18                            ; Animation script - lava balls
0000EC18                            ; ---------------------------------------------------------------------------
0000EC18 0000                       		dc.w byte_E4CC-Ani_obj14
0000EC1A 0000                       		dc.w byte_E4D2-Ani_obj14
0000EC1C 0000                       		dc.w byte_E4D6-Ani_obj14
0000EC1E 0000                       		dc.w byte_E4DC-Ani_obj14
0000EC20 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EC26 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EC2A 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EC30 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EC34                            		even
0000EC34                            		even
0000EC34                            
0000EC34                            ; ===========================================================================
0000EC34                            ; ---------------------------------------------------------------------------
0000EC34                            ; Object 6D - flame thrower (SBZ)
0000EC34                            ; ---------------------------------------------------------------------------
0000EC34                            
0000EC34                            Obj6D:					; XREF: Obj_Index
0000EC34 7000                       		moveq	#0,d0
0000EC36 1028 0024                  		move.b	$24(a0),d0
0000EC3A 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EC3E 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EC42                            ; ===========================================================================
0000EC42 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EC44 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EC46                            ; ===========================================================================
0000EC46                            
0000EC46                            Obj6D_Main:				; XREF: Obj6D_Index
0000EC46 5428 0024                  		addq.b	#2,$24(a0)
0000EC4A 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EC52 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EC58 0028 0004 0001             		ori.b	#4,1(a0)
0000EC5E 117C 0001 0018             		move.b	#1,$18(a0)
0000EC64 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EC6A 117C 000C 0019             		move.b	#$C,$19(a0)
0000EC70 1028 0028                  		move.b	$28(a0),d0
0000EC74 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EC78 D040                       		add.w	d0,d0		; multiply by 2
0000EC7A 3140 0030                  		move.w	d0,$30(a0)
0000EC7E 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EC82 1028 0028                  		move.b	$28(a0),d0
0000EC86 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EC8A EB48                       		lsl.w	#5,d0		; multiply by $20
0000EC8C 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EC90 117C 000A 0036             		move.b	#$A,$36(a0)
0000EC96 0828 0001 0022             		btst	#1,$22(a0)
0000EC9C 6700                       		beq.s	Obj6D_Action
0000EC9E 117C 0002 001C             		move.b	#2,$1C(a0)
0000ECA4 117C 0015 0036             		move.b	#$15,$36(a0)
0000ECAA                            
0000ECAA                            Obj6D_Action:				; XREF: Obj6D_Index
0000ECAA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000ECAE 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000ECB0 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000ECB6 0868 0000 001C             		bchg	#0,$1C(a0)
0000ECBC 6700                       		beq.s	loc_E57A
0000ECBE 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000ECC4 303C 00B3                  		move.w	#$B3,d0
0000ECC8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000ECCE                            
0000ECCE                            loc_E57A:
0000ECCE 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000ECD4 6100 C148                  		bsr.w	AnimateSprite
0000ECD8 117C 0000 0020             		move.b	#0,$20(a0)
0000ECDE 1028 0036                  		move.b	$36(a0),d0
0000ECE2 B028 001A                  		cmp.b	$1A(a0),d0
0000ECE6 6600                       		bne.s	Obj6D_ChkDel
0000ECE8 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000ECEE                            
0000ECEE                            Obj6D_ChkDel:
0000ECEE 3028 0008                  		move.w	8(a0),d0
0000ECF2 0240 FF80                  		andi.w	#$FF80,d0
0000ECF6 3238 F700                  		move.w	($FFFFF700).w,d1
0000ECFA 0441 0080                  		subi.w	#$80,d1
0000ECFE 0241 FF80                  		andi.w	#$FF80,d1
0000ED02 9041                       		sub.w	d1,d0
0000ED04 0C40 0280                  		cmpi.w	#$280,d0
0000ED08 6200 F090                  		bhi.w	DeleteObject
0000ED0C 6000 F050                  		bra.w	DisplaySprite
0000ED10                            ; ===========================================================================
0000ED10                            Ani_obj6D:
0000ED10                            	include "_anim\obj6D.asm"
0000ED10                            ; ---------------------------------------------------------------------------
0000ED10                            ; Animation script - flamethrower (SBZ)
0000ED10                            ; ---------------------------------------------------------------------------
0000ED10 0000                       		dc.w byte_E5C4-Ani_obj6D
0000ED12 0000                       		dc.w byte_E5D2-Ani_obj6D
0000ED14 0000                       		dc.w byte_E5DC-Ani_obj6D
0000ED16 0000                       		dc.w byte_E5EA-Ani_obj6D
0000ED18 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000ED26 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000ED30 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000ED3E 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000ED48                            		even
0000ED48                            		even
0000ED48                            
0000ED48                            ; ---------------------------------------------------------------------------
0000ED48                            ; Sprite mappings - flame thrower (SBZ)
0000ED48                            ; ---------------------------------------------------------------------------
0000ED48                            Map_obj6D:
0000ED48                            	include "_maps\obj6D.asm"
0000ED48                            ; ---------------------------------------------------------------------------
0000ED48                            ; Sprite mappings - flame thrower (SBZ)
0000ED48                            ; ---------------------------------------------------------------------------
0000ED48 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000ED4C 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000ED50 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000ED54 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000ED58 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000ED5C 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000ED60 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000ED64 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000ED68 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000ED6C 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000ED70 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000ED74 01                         byte_E620:	dc.b 1
0000ED75 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED7A 02                         byte_E626:	dc.b 2
0000ED7B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED80 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED85 02                         byte_E631:	dc.b 2
0000ED86 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED8B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED90 03                         byte_E63C:	dc.b 3
0000ED91 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED96 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED9B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDA0 03                         byte_E64C:	dc.b 3
0000EDA1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDA6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDAB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDB0 04                         byte_E65C:	dc.b 4
0000EDB1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EDB6 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDBB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDC0 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDC5 04                         byte_E671:	dc.b 4
0000EDC6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EDCB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDD0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDD5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDDA 05                         byte_E686:	dc.b 5
0000EDDB F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EDE0 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EDE5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDEA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDEF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDF4 05                         byte_E6A0:	dc.b 5
0000EDF5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EDFA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EDFF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE04 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE09 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE0E 06                         byte_E6BA:	dc.b 6
0000EE0F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EE14 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EE19 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE1E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EE23 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE28 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE2D 06                         byte_E6D9:	dc.b 6
0000EE2E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EE33 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE38 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EE3D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE42 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE47 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE4C 01                         byte_E6F8:	dc.b 1
0000EE4D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE52 02                         byte_E6FE:	dc.b 2
0000EE53 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE58 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE5D 02                         byte_E709:	dc.b 2
0000EE5E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE63 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE68 03                         byte_E714:	dc.b 3
0000EE69 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE6E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE73 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE78 03                         byte_E724:	dc.b 3
0000EE79 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE7E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE83 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE88 04                         byte_E734:	dc.b 4
0000EE89 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE8E 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE93 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE98 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE9D 04                         byte_E749:	dc.b 4
0000EE9E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EEA3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEA8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEAD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEB2 05                         byte_E75E:	dc.b 5
0000EEB3 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EEB8 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEBD 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEC2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEC7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EECC 05                         byte_E778:	dc.b 5
0000EECD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EED2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EED7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEDC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEE1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEE6 06                         byte_E792:	dc.b 6
0000EEE7 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EEEC F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EEF1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEF6 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EEFB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF00 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF05 06                         byte_E7B1:	dc.b 6
0000EF06 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EF0B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF10 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EF15 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF1A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF1F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF24                            		even
0000EF24                            		even
0000EF24                            
0000EF24                            ; ===========================================================================
0000EF24                            ; ---------------------------------------------------------------------------
0000EF24                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EF24                            ; ---------------------------------------------------------------------------
0000EF24                            
0000EF24                            Obj46:					; XREF: Obj_Index
0000EF24 7000                       		moveq	#0,d0
0000EF26 1028 0024                  		move.b	$24(a0),d0
0000EF2A 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EF2E 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EF32                            ; ===========================================================================
0000EF32 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EF34 0000                       		dc.w Obj46_Action-Obj46_Index
0000EF36                            ; ===========================================================================
0000EF36                            
0000EF36                            Obj46_Main:				; XREF: Obj46_Index
0000EF36 5428 0024                  		addq.b	#2,$24(a0)
0000EF3A 117C 000F 0016             		move.b	#$F,$16(a0)
0000EF40 117C 000F 0017             		move.b	#$F,$17(a0)
0000EF46 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EF4E 317C 4000 0002             		move.w	#$4000,2(a0)
0000EF54 117C 0004 0001             		move.b	#4,1(a0)
0000EF5A 117C 0003 0018             		move.b	#3,$18(a0)
0000EF60 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF66 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF6C 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EF72                            
0000EF72                            Obj46_Action:				; XREF: Obj46_Index
0000EF72 4A28 0001                  		tst.b	1(a0)
0000EF76 6A00                       		bpl.s	Obj46_ChkDel
0000EF78 7000                       		moveq	#0,d0
0000EF7A 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EF7E 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EF82 D040                       		add.w	d0,d0
0000EF84 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EF88 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EF8C 323C 001B                  		move.w	#$1B,d1
0000EF90 343C 0010                  		move.w	#$10,d2
0000EF94 363C 0011                  		move.w	#$11,d3
0000EF98 3828 0008                  		move.w	8(a0),d4
0000EF9C 6100 0000                  		bsr.w	SolidObject
0000EFA0                            
0000EFA0                            Obj46_ChkDel:
0000EFA0 6100 EDBC                  		bsr.w	DisplaySprite
0000EFA4 3028 0008                  		move.w	8(a0),d0
0000EFA8 0240 FF80                  		andi.w	#$FF80,d0
0000EFAC 3238 F700                  		move.w	($FFFFF700).w,d1
0000EFB0 0441 0080                  		subi.w	#$80,d1
0000EFB4 0241 FF80                  		andi.w	#$FF80,d1
0000EFB8 9041                       		sub.w	d1,d0
0000EFBA 0C40 0280                  		cmpi.w	#$280,d0
0000EFBE 6200 EDDA                  		bhi.w	DeleteObject
0000EFC2 4E75                       		rts	
0000EFC4                            ; ===========================================================================
0000EFC4 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EFC6 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EFC8 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EFCA 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EFCC 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EFCE                            ; ===========================================================================
0000EFCE                            
0000EFCE                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EFCE 4E75                       		rts	
0000EFD0                            ; ===========================================================================
0000EFD0                            
0000EFD0                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EFD0 3038 D008                  		move.w	($FFFFD008).w,d0
0000EFD4 9068 0008                  		sub.w	8(a0),d0
0000EFD8 6400                       		bcc.s	loc_E888
0000EFDA 4440                       		neg.w	d0
0000EFDC                            
0000EFDC                            loc_E888:
0000EFDC 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EFE0 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EFE2 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EFE8                            
0000EFE8                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EFE8 7000                       		moveq	#0,d0
0000EFEA 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EFEE 0828 0003 0028             		btst	#3,$28(a0)
0000EFF4 6700                       		beq.s	loc_E8A8
0000EFF6 4440                       		neg.w	d0
0000EFF8 0640 0010                  		addi.w	#$10,d0
0000EFFC                            
0000EFFC                            loc_E8A8:
0000EFFC 3228 0030                  		move.w	$30(a0),d1
0000F000 9240                       		sub.w	d0,d1
0000F002 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F006 4E75                       		rts	
0000F008                            ; ===========================================================================
0000F008                            
0000F008                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F008 6100 ED2E                  		bsr.w	SpeedToPos
0000F00C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F012 6100 0000                  		bsr.w	ObjHitFloor
0000F016 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F018 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F01C D368 000C                  		add.w	d1,$C(a0)
0000F020 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F024 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F02A 117C 0004 0028             		move.b	#4,$28(a0)
0000F030 3011                       		move.w	(a1),d0
0000F032 0240 03FF                  		andi.w	#$3FF,d0
0000F036 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F03A 6400                       		bcc.s	locret_E8EE
0000F03C 117C 0000 0028             		move.b	#0,$28(a0)
0000F042                            
0000F042                            locret_E8EE:
0000F042 4E75                       		rts	
0000F044                            ; ===========================================================================
0000F044                            
0000F044                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F044 7000                       		moveq	#0,d0
0000F046 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F04A E648                       		lsr.w	#3,d0
0000F04C 3228 0030                  		move.w	$30(a0),d1
0000F050 9240                       		sub.w	d0,d1
0000F052 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F056 4E75                       		rts	
0000F058                            ; ===========================================================================
0000F058                            ; ---------------------------------------------------------------------------
0000F058                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F058                            ; ---------------------------------------------------------------------------
0000F058                            Map_obj46:
0000F058                            	include "_maps\obj46.asm"
0000F058                            ; ---------------------------------------------------------------------------
0000F058                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F058                            ; ---------------------------------------------------------------------------
0000F058 0000                       		dc.w byte_E906-Map_obj46
0000F05A 01                         byte_E906:	dc.b 1
0000F05B F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F060                            		even
0000F060                            		even
0000F060                            
0000F060                            ; ===========================================================================
0000F060                            ; ---------------------------------------------------------------------------
0000F060                            ; Object 12 - lamp (SYZ)
0000F060                            ; ---------------------------------------------------------------------------
0000F060                            
0000F060                            Obj12:					; XREF: Obj_Index
0000F060 7000                       		moveq	#0,d0
0000F062 1028 0024                  		move.b	$24(a0),d0
0000F066 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F06A 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F06E                            ; ===========================================================================
0000F06E 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F070 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F072                            ; ===========================================================================
0000F072                            
0000F072                            Obj12_Main:				; XREF: Obj12_Index
0000F072 5428 0024                  		addq.b	#2,$24(a0)
0000F076 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F07E 317C 0000 0002             		move.w	#0,2(a0)
0000F084 117C 0004 0001             		move.b	#4,1(a0)
0000F08A 117C 0010 0019             		move.b	#$10,$19(a0)
0000F090 117C 0006 0018             		move.b	#6,$18(a0)
0000F096                            
0000F096                            Obj12_Animate:				; XREF: Obj12_Index
0000F096 5328 001E                  		subq.b	#1,$1E(a0)
0000F09A 6A00                       		bpl.s	Obj12_ChkDel
0000F09C 117C 0007 001E             		move.b	#7,$1E(a0)
0000F0A2 5228 001A                  		addq.b	#1,$1A(a0)
0000F0A6 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F0AC 6500                       		bcs.s	Obj12_ChkDel
0000F0AE 117C 0000 001A             		move.b	#0,$1A(a0)
0000F0B4                            
0000F0B4                            Obj12_ChkDel:
0000F0B4 3028 0008                  		move.w	8(a0),d0
0000F0B8 0240 FF80                  		andi.w	#$FF80,d0
0000F0BC 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0C0 0441 0080                  		subi.w	#$80,d1
0000F0C4 0241 FF80                  		andi.w	#$FF80,d1
0000F0C8 9041                       		sub.w	d1,d0
0000F0CA 0C40 0280                  		cmpi.w	#$280,d0
0000F0CE 6200 ECCA                  		bhi.w	DeleteObject
0000F0D2 6000 EC8A                  		bra.w	DisplaySprite
0000F0D6                            ; ===========================================================================
0000F0D6                            ; ---------------------------------------------------------------------------
0000F0D6                            ; Sprite mappings - lamp (SYZ)
0000F0D6                            ; ---------------------------------------------------------------------------
0000F0D6                            Map_obj12:
0000F0D6                            	include "_maps\obj12.asm"
0000F0D6                            ; ---------------------------------------------------------------------------
0000F0D6                            ; Sprite mappings - lamp (SYZ)
0000F0D6                            ; ---------------------------------------------------------------------------
0000F0D6 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F0DA 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F0DE 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F0E2 02                         byte_E98E:	dc.b 2
0000F0E3 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F0E8 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F0ED 02                         byte_E999:	dc.b 2
0000F0EE F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F0F3 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F0F8 02                         byte_E9A4:	dc.b 2
0000F0F9 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F0FE 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F103 02                         byte_E9AF:	dc.b 2
0000F104 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F109 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F10E 02                         byte_E9BA:	dc.b 2
0000F10F F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F114 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F119 02                         byte_E9C5:	dc.b 2
0000F11A F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F11F 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F124                            		even
0000F124                            		even
0000F124                            
0000F124                            ; ===========================================================================
0000F124                            ; ---------------------------------------------------------------------------
0000F124                            ; Object 47 - pinball bumper (SYZ)
0000F124                            ; ---------------------------------------------------------------------------
0000F124                            
0000F124                            Obj47:					; XREF: Obj_Index
0000F124 7000                       		moveq	#0,d0
0000F126 1028 0024                  		move.b	$24(a0),d0
0000F12A 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F12E 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F132                            ; ===========================================================================
0000F132 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F134 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F136                            ; ===========================================================================
0000F136                            
0000F136                            Obj47_Main:				; XREF: Obj47_Index
0000F136 5428 0024                  		addq.b	#2,$24(a0)
0000F13A 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F142 317C 0380 0002             		move.w	#$380,2(a0)
0000F148 117C 0004 0001             		move.b	#4,1(a0)
0000F14E 117C 0010 0019             		move.b	#$10,$19(a0)
0000F154 117C 0001 0018             		move.b	#1,$18(a0)
0000F15A 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F160                            
0000F160                            Obj47_Hit:				; XREF: Obj47_Index
0000F160 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F164 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F168 4228 0021                  		clr.b	$21(a0)
0000F16C 43F8 D000                  		lea	($FFFFD000).w,a1
0000F170 3228 0008                  		move.w	8(a0),d1
0000F174 3428 000C                  		move.w	$C(a0),d2
0000F178 9269 0008                  		sub.w	8(a1),d1
0000F17C 9469 000C                  		sub.w	$C(a1),d2
0000F180 4EB9 0000 2F32             		jsr	(CalcAngle).l
0000F186 4EB9 0000 2C64             		jsr	(CalcSine).l
0000F18C C3FC F900                  		muls.w	#-$700,d1
0000F190 E081                       		asr.l	#8,d1
0000F192 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F196 C1FC F900                  		muls.w	#-$700,d0
0000F19A E080                       		asr.l	#8,d0
0000F19C 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F1A0 08E9 0001 0022             		bset	#1,$22(a1)
0000F1A6 08A9 0004 0022             		bclr	#4,$22(a1)
0000F1AC 08A9 0005 0022             		bclr	#5,$22(a1)
0000F1B2 4229 003C                  		clr.b	$3C(a1)
0000F1B6 117C 0001 001C             		move.b	#1,$1C(a0)
0000F1BC 303C 00B4                  		move.w	#$B4,d0
0000F1C0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F1C6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F1CA 7000                       		moveq	#0,d0
0000F1CC 1028 0023                  		move.b	$23(a0),d0
0000F1D0 6700                       		beq.s	Obj47_Score
0000F1D2 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F1D8 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F1DA 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F1DE                            
0000F1DE                            Obj47_Score:
0000F1DE 7001                       		moveq	#1,d0
0000F1E0 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F1E6 6100 EFFC                  		bsr.w	SingleObjLoad
0000F1EA 6600                       		bne.s	Obj47_Display
0000F1EC 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F1F0 3368 0008 0008             		move.w	8(a0),8(a1)
0000F1F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F1FC 137C 0004 001A             		move.b	#4,$1A(a1)
0000F202                            
0000F202                            Obj47_Display:
0000F202 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F208 6100 BC14                  		bsr.w	AnimateSprite
0000F20C 3028 0008                  		move.w	8(a0),d0
0000F210 0240 FF80                  		andi.w	#$FF80,d0
0000F214 3238 F700                  		move.w	($FFFFF700).w,d1
0000F218 0441 0080                  		subi.w	#$80,d1
0000F21C 0241 FF80                  		andi.w	#$FF80,d1
0000F220 9041                       		sub.w	d1,d0
0000F222 0C40 0280                  		cmpi.w	#$280,d0
0000F226 6200                       		bhi.s	Obj47_ChkHit
0000F228 6000 EB34                  		bra.w	DisplaySprite
0000F22C                            ; ===========================================================================
0000F22C                            
0000F22C                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F22C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F230 7000                       		moveq	#0,d0
0000F232 1028 0023                  		move.b	$23(a0),d0
0000F236 6700                       		beq.s	Obj47_Delete
0000F238 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F23E                            
0000F23E                            Obj47_Delete:
0000F23E 6000 EB5A                  		bra.w	DeleteObject
0000F242                            ; ===========================================================================
0000F242                            Ani_obj47:
0000F242                            	include "_anim\obj47.asm"
0000F242                            ; ---------------------------------------------------------------------------
0000F242                            ; Animation script - flamethrower (SBZ)
0000F242                            ; ---------------------------------------------------------------------------
0000F242 0000                       		dc.w byte_EAF4-Ani_obj47
0000F244 0000                       		dc.w byte_EAF8-Ani_obj47
0000F246 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F24A 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F252                            		even
0000F252                            		even
0000F252                            
0000F252                            ; ---------------------------------------------------------------------------
0000F252                            ; Sprite mappings - pinball bumper (SYZ)
0000F252                            ; ---------------------------------------------------------------------------
0000F252                            Map_obj47:
0000F252                            	include "_maps\obj47.asm"
0000F252                            ; ---------------------------------------------------------------------------
0000F252                            ; Sprite mappings - pinball bumper (SYZ)
0000F252                            ; ---------------------------------------------------------------------------
0000F252 0000                       		dc.w byte_EB06-Map_obj47
0000F254 0000                       		dc.w byte_EB11-Map_obj47
0000F256 0000                       		dc.w byte_EB1C-Map_obj47
0000F258 02                         byte_EB06:	dc.b 2
0000F259 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F25E F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F263 02                         byte_EB11:	dc.b 2
0000F264 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F269 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F26E 02                         byte_EB1C:	dc.b 2
0000F26F F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F274 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F27A 00                         		even
0000F27A 00                         		even
0000F27A                            
0000F27A                            ; ===========================================================================
0000F27A                            ; ---------------------------------------------------------------------------
0000F27A                            ; Object 0D - signpost at the end of a level
0000F27A                            ; ---------------------------------------------------------------------------
0000F27A                            
0000F27A                            Obj0D:					; XREF: Obj_Index
0000F27A 7000                       		moveq	#0,d0
0000F27C 1028 0024                  		move.b	$24(a0),d0
0000F280 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F284 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F288 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F28E 6100 BB8E                  		bsr.w	AnimateSprite
0000F292 6100 EACA                  		bsr.w	DisplaySprite
0000F296 3028 0008                  		move.w	8(a0),d0
0000F29A 0240 FF80                  		andi.w	#$FF80,d0
0000F29E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2A2 0441 0080                  		subi.w	#$80,d1
0000F2A6 0241 FF80                  		andi.w	#$FF80,d1
0000F2AA 9041                       		sub.w	d1,d0
0000F2AC 0C40 0280                  		cmpi.w	#$280,d0
0000F2B0 6200 EAE8                  		bhi.w	DeleteObject
0000F2B4 4E75                       		rts	
0000F2B6                            ; ===========================================================================
0000F2B6 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F2B8 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F2BA 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F2BC 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F2BE 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F2C0                            ; ===========================================================================
0000F2C0                            
0000F2C0                            Obj0D_Main:				; XREF: Obj0D_Index
0000F2C0 5428 0024                  		addq.b	#2,$24(a0)
0000F2C4 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F2CC 317C 0680 0002             		move.w	#$680,2(a0)
0000F2D2 117C 0004 0001             		move.b	#4,1(a0)
0000F2D8 117C 0018 0019             		move.b	#$18,$19(a0)
0000F2DE 117C 0004 0018             		move.b	#4,$18(a0)
0000F2E4                            
0000F2E4                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F2E4 3038 D008                  		move.w	($FFFFD008).w,d0
0000F2E8 9068 0008                  		sub.w	8(a0),d0
0000F2EC 6500                       		bcs.s	locret_EBBA
0000F2EE 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F2F2 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F2F4 303C 00CF                  		move.w	#$CF,d0
0000F2F8 4EB9 0000 15BA             		jsr	(PlaySound).l	; play signpost	sound
0000F2FE 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F302 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F308 5428 0024                  		addq.b	#2,$24(a0)
0000F30C                            
0000F30C                            locret_EBBA:
0000F30C 4E75                       		rts	
0000F30E                            ; ===========================================================================
0000F30E                            
0000F30E                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F30E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F312 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F314 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F31A 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F31E 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F324 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F326 5428 0024                  		addq.b	#2,$24(a0)
0000F32A                            
0000F32A                            Obj0D_Sparkle:
0000F32A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F32E 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F330 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F336 7000                       		moveq	#0,d0
0000F338 1028 0034                  		move.b	$34(a0),d0
0000F33C 5428 0034                  		addq.b	#2,$34(a0)
0000F340 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F346 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F34A 6100 EE98                  		bsr.w	SingleObjLoad
0000F34E 6600                       		bne.s	locret_EC42
0000F350 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F354 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F35A 101A                       		move.b	(a2)+,d0
0000F35C 4880                       		ext.w	d0
0000F35E D068 0008                  		add.w	8(a0),d0
0000F362 3340 0008                  		move.w	d0,8(a1)
0000F366 101A                       		move.b	(a2)+,d0
0000F368 4880                       		ext.w	d0
0000F36A D068 000C                  		add.w	$C(a0),d0
0000F36E 3340 000C                  		move.w	d0,$C(a1)
0000F372 237C 0000 A5BC 0004        		move.l	#Map_obj25,4(a1)
0000F37A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F380 137C 0004 0001             		move.b	#4,1(a1)
0000F386 137C 0002 0018             		move.b	#2,$18(a1)
0000F38C 137C 0008 0019             		move.b	#8,$19(a1)
0000F392                            
0000F392                            locret_EC42:
0000F392 4E75                       		rts	
0000F394                            ; ===========================================================================
0000F394 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F396 0808                       		dc.b	8,   8
0000F398 F000                       		dc.b -$10,   0
0000F39A 18F8                       		dc.b  $18,  -8
0000F39C 00F8                       		dc.b	0,  -8
0000F39E 1000                       		dc.b  $10,   0
0000F3A0 E808                       		dc.b -$18,   8
0000F3A2 1810                       		dc.b  $18, $10
0000F3A4                            ; ===========================================================================
0000F3A4                            
0000F3A4                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F3A4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F3A8 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F3AC 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F3B2 6600                       		bne.s	loc_EC70
0000F3B4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F3BA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F3C0 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F3C2 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F3C8 6000                       		bra.s	loc_EC70
0000F3CA                            
0000F3CA                            Obj0D_MoveLeft:
0000F3CA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F3D0                            
0000F3D0                            loc_EC70:
0000F3D0 4A38 D000                  		tst.b	($FFFFD000).w
0000F3D4 6700                       		beq.s	loc_EC86
0000F3D6 3038 D008                  		move.w	($FFFFD008).w,d0
0000F3DA 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F3DE 0641 0128                  		addi.w	#$128,d1
0000F3E2 B041                       		cmp.w	d1,d0
0000F3E4 6500                       		bcs.s	locret_ECEE
0000F3E6                            
0000F3E6                            loc_EC86:
0000F3E6 5428 0024                  		addq.b	#2,$24(a0)
0000F3EA                            
0000F3EA                            ; ---------------------------------------------------------------------------
0000F3EA                            ; Subroutine to	set up bonuses at the end of an	act
0000F3EA                            ; ---------------------------------------------------------------------------
0000F3EA                            
0000F3EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F3EA                            
0000F3EA                            
0000F3EA                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F3EA 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F3EE 6600                       		bne.s	locret_ECEE
0000F3F0 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F3F6 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F3FA 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F3FE 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F404 7010                       		moveq	#$10,d0
0000F406 4EB9 0000 17D6             		jsr	(LoadPLC2).l	; load title card patterns
0000F40C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F412 7000                       		moveq	#0,d0
0000F414 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F418 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F41C 7200                       		moveq	#0,d1
0000F41E 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F422 D041                       		add.w	d1,d0		; add up your time
0000F424 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F428 7214                       		moveq	#$14,d1
0000F42A B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F42C 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F42E 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F430                            
0000F430                            loc_ECD0:
0000F430 D040                       		add.w	d0,d0
0000F432 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F438 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F43C C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F440 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F444 303C 008E                  		move.w	#$8E,d0
0000F448 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F44E                            
0000F44E                            locret_ECEE:
0000F44E 4E75                       		rts	
0000F450                            ; End of function GotThroughAct
0000F450                            
0000F450                            ; ===========================================================================
0000F450 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F464 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F47A                            ; ===========================================================================
0000F47A                            
0000F47A                            locret_ED1A:				; XREF: Obj0D_Index
0000F47A 4E75                       		rts	
0000F47C                            ; ===========================================================================
0000F47C                            Ani_obj0D:
0000F47C                            	include "_anim\obj0D.asm"
0000F47C                            ; ---------------------------------------------------------------------------
0000F47C                            ; Animation script - signpost
0000F47C                            ; ---------------------------------------------------------------------------
0000F47C 0000                       		dc.w byte_ED24-Ani_obj0D
0000F47E 0000                       		dc.w byte_ED28-Ani_obj0D
0000F480 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F482 0000                       		dc.w byte_ED34-Ani_obj0D
0000F484 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F488 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F48E 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F494 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F498 00                         		even
0000F498 00                         		even
0000F498                            
0000F498                            ; ---------------------------------------------------------------------------
0000F498                            ; Sprite mappings - signpost
0000F498                            ; ---------------------------------------------------------------------------
0000F498                            Map_obj0D:
0000F498                            	include "_maps\obj0D.asm"
0000F498                            ; ---------------------------------------------------------------------------
0000F498                            ; Sprite mappings - signpost
0000F498                            ; ---------------------------------------------------------------------------
0000F498 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F49C 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F4A0 0000                       		dc.w byte_ED73-Map_obj0D
0000F4A2 03                         byte_ED42:	dc.b 3
0000F4A3 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F4A8 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F4AD 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4B2 02                         byte_ED52:	dc.b 2
0000F4B3 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F4B8 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4BD 02                         byte_ED5D:	dc.b 2
0000F4BE F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F4C3 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F4C8 02                         byte_ED68:	dc.b 2
0000F4C9 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F4CE 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F4D3 03                         byte_ED73:	dc.b 3
0000F4D4 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F4D9 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F4DE 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4E4 00                         		even
0000F4E4 00                         		even
0000F4E4                            
0000F4E4                            ; ===========================================================================
0000F4E4                            ; ---------------------------------------------------------------------------
0000F4E4                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F4E4                            ; ---------------------------------------------------------------------------
0000F4E4                            
0000F4E4                            Obj4C:					; XREF: Obj_Index
0000F4E4 7000                       		moveq	#0,d0
0000F4E6 1028 0024                  		move.b	$24(a0),d0
0000F4EA 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F4EE 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F4F2 6000 0000                  		bra.w	Obj4D_ChkDel
0000F4F6                            ; ===========================================================================
0000F4F6 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F4F8 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F4FA 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F4FC 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F4FE 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F500 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F502                            ; ===========================================================================
0000F502                            
0000F502                            Obj4C_Main:				; XREF: Obj4C_Index
0000F502 5428 0024                  		addq.b	#2,$24(a0)
0000F506 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F50E 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F514 117C 0004 0001             		move.b	#4,1(a0)
0000F51A 117C 0001 0018             		move.b	#1,$18(a0)
0000F520 117C 0038 0019             		move.b	#$38,$19(a0)
0000F526 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F52C                            
0000F52C                            loc_EDCC:				; XREF: Obj4C_Index
0000F52C 5368 0032                  		subq.w	#1,$32(a0)
0000F530 6A00                       		bpl.s	locret_EDF0
0000F532 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F538 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F53C 3228 000C                  		move.w	$C(a0),d1
0000F540 B041                       		cmp.w	d1,d0
0000F542 6400                       		bcc.s	locret_EDF0
0000F544 0441 0170                  		subi.w	#$170,d1
0000F548 B041                       		cmp.w	d1,d0
0000F54A 6500                       		bcs.s	locret_EDF0
0000F54C 5428 0024                  		addq.b	#2,$24(a0)
0000F550                            
0000F550                            locret_EDF0:
0000F550 4E75                       		rts	
0000F552                            ; ===========================================================================
0000F552                            
0000F552                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F552 5428 0024                  		addq.b	#2,$24(a0)
0000F556 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F55A 6600                       		bne.s	loc_EE18
0000F55C 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F560 3368 0008 0008             		move.w	8(a0),8(a1)
0000F566 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F56C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F572 2348 003C                  		move.l	a0,$3C(a1)
0000F576                            
0000F576                            loc_EE18:
0000F576 117C 0001 001C             		move.b	#1,$1C(a0)
0000F57C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F580 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F582 117C 0004 001C             		move.b	#4,$1C(a0)
0000F588 6000                       		bra.s	Obj4C_Display
0000F58A                            ; ===========================================================================
0000F58A                            
0000F58A                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F58A 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F58E 08E9 0001 0022             		bset	#1,$22(a1)
0000F594 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F59A 6000                       		bra.s	Obj4C_Display
0000F59C                            ; ===========================================================================
0000F59C                            
0000F59C                            loc_EE3E:				; XREF: Obj4C_Index
0000F59C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F5A0 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F5A2 5428 0024                  		addq.b	#2,$24(a0)
0000F5A6 4E75                       		rts	
0000F5A8                            ; ===========================================================================
0000F5A8                            
0000F5A8                            Obj4C_Display:				; XREF: Obj4C_Index
0000F5A8 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F5AE 6100 B86E                  		bsr.w	AnimateSprite
0000F5B2 6100 E7AA                  		bsr.w	DisplaySprite
0000F5B6 4E75                       		rts	
0000F5B8                            ; ===========================================================================
0000F5B8                            
0000F5B8                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F5B8 117C 0000 001C             		move.b	#0,$1C(a0)
0000F5BE 117C 0002 0024             		move.b	#2,$24(a0)
0000F5C4 4A28 0028                  		tst.b	$28(a0)
0000F5C8 6700 E7D0                  		beq.w	DeleteObject
0000F5CC 4E75                       		rts	
0000F5CE                            ; ===========================================================================
0000F5CE                            ; ---------------------------------------------------------------------------
0000F5CE                            ; Object 4D - lava geyser / lavafall (MZ)
0000F5CE                            ; ---------------------------------------------------------------------------
0000F5CE                            
0000F5CE                            Obj4D:					; XREF: Obj_Index
0000F5CE 7000                       		moveq	#0,d0
0000F5D0 1028 0024                  		move.b	$24(a0),d0
0000F5D4 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F5D8 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F5DC 6000 E780                  		bra.w	DisplaySprite
0000F5E0                            ; ===========================================================================
0000F5E0 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F5E2 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F5E4 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F5E6 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F5E8                            
0000F5E8 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F5EC                            ; ===========================================================================
0000F5EC                            
0000F5EC                            Obj4D_Main:				; XREF: Obj4D_Index
0000F5EC 5428 0024                  		addq.b	#2,$24(a0)
0000F5F0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F5F6 4A28 0028                  		tst.b	$28(a0)
0000F5FA 6700                       		beq.s	loc_EEA4
0000F5FC 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F602                            
0000F602                            loc_EEA4:
0000F602 7000                       		moveq	#0,d0
0000F604 1028 0028                  		move.b	$28(a0),d0
0000F608 D040                       		add.w	d0,d0
0000F60A 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F610 2248                       		movea.l	a0,a1
0000F612 7201                       		moveq	#1,d1
0000F614 6100                       		bsr.s	Obj4D_MakeLava
0000F616 6000                       		bra.s	loc_EF10
0000F618                            ; ===========================================================================
0000F618                            
0000F618                            Obj4D_Loop:
0000F618 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F61C 6600                       		bne.s	loc_EF0A
0000F61E                            
0000F61E                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F61E 12BC 004D                  		move.b	#$4D,0(a1)
0000F622 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F62A 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F630 137C 0004 0001             		move.b	#4,1(a1)
0000F636 137C 0020 0019             		move.b	#$20,$19(a1)
0000F63C 3368 0008 0008             		move.w	8(a0),8(a1)
0000F642 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F648 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F64E 137C 0001 0018             		move.b	#1,$18(a1)
0000F654 137C 0005 001C             		move.b	#5,$1C(a1)
0000F65A 4A28 0028                  		tst.b	$28(a0)
0000F65E 6700                       		beq.s	loc_EF0A
0000F660 137C 0002 001C             		move.b	#2,$1C(a1)
0000F666                            
0000F666                            loc_EF0A:
0000F666 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F66A 4E75                       		rts	
0000F66C                            ; ===========================================================================
0000F66C                            
0000F66C                            loc_EF10:				; XREF: Obj4D_Main
0000F66C 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F672 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F678 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F67E 137C 0093 0020             		move.b	#$93,$20(a1)
0000F684 137C 0080 0016             		move.b	#$80,$16(a1)
0000F68A 08E9 0004 0001             		bset	#4,1(a1)
0000F690 5829 0024                  		addq.b	#4,$24(a1)
0000F694 2348 003C                  		move.l	a0,$3C(a1)
0000F698 4A28 0028                  		tst.b	$28(a0)
0000F69C 6700                       		beq.s	Obj4D_PlaySnd
0000F69E 7200                       		moveq	#0,d1
0000F6A0 6100 FF76                  		bsr.w	Obj4D_Loop
0000F6A4 5429 0024                  		addq.b	#2,$24(a1)
0000F6A8 08E9 0004 0002             		bset	#4,2(a1)
0000F6AE 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F6B4 137C 0000 0018             		move.b	#0,$18(a1)
0000F6BA 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F6C0 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F6C6 117C 0000 0028             		move.b	#0,$28(a0)
0000F6CC                            
0000F6CC                            Obj4D_PlaySnd:
0000F6CC 303C 00C8                  		move.w	#$C8,d0
0000F6D0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000F6D6                            
0000F6D6                            Obj4D_Action:				; XREF: Obj4D_Index
0000F6D6 7000                       		moveq	#0,d0
0000F6D8 1028 0028                  		move.b	$28(a0),d0
0000F6DC D040                       		add.w	d0,d0
0000F6DE 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F6E2 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F6E6 6100 E650                  		bsr.w	SpeedToPos
0000F6EA 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F6F0 6100 B72C                  		bsr.w	AnimateSprite
0000F6F4                            
0000F6F4                            Obj4D_ChkDel:				; XREF: Obj4C
0000F6F4 3028 0008                  		move.w	8(a0),d0
0000F6F8 0240 FF80                  		andi.w	#$FF80,d0
0000F6FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000F700 0441 0080                  		subi.w	#$80,d1
0000F704 0241 FF80                  		andi.w	#$FF80,d1
0000F708 9041                       		sub.w	d1,d0
0000F70A 0C40 0280                  		cmpi.w	#$280,d0
0000F70E 6200 E68A                  		bhi.w	DeleteObject
0000F712 4E75                       		rts	
0000F714                            ; ===========================================================================
0000F714 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F716 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F718                            ; ===========================================================================
0000F718                            
0000F718                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F718 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F71E 3028 0030                  		move.w	$30(a0),d0
0000F722 B068 000C                  		cmp.w	$C(a0),d0
0000F726 6400                       		bcc.s	locret_EFDA
0000F728 5828 0024                  		addq.b	#4,$24(a0)
0000F72C 2268 003C                  		movea.l	$3C(a0),a1
0000F730 137C 0003 001C             		move.b	#3,$1C(a1)
0000F736                            
0000F736                            locret_EFDA:
0000F736 4E75                       		rts	
0000F738                            ; ===========================================================================
0000F738                            
0000F738                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F738 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F73E 3028 0030                  		move.w	$30(a0),d0
0000F742 B068 000C                  		cmp.w	$C(a0),d0
0000F746 6400                       		bcc.s	locret_EFFA
0000F748 5828 0024                  		addq.b	#4,$24(a0)
0000F74C 2268 003C                  		movea.l	$3C(a0),a1
0000F750 137C 0001 001C             		move.b	#1,$1C(a1)
0000F756                            
0000F756                            locret_EFFA:
0000F756 4E75                       		rts	
0000F758                            ; ===========================================================================
0000F758                            
0000F758                            loc_EFFC:				; XREF: Obj4D_Index
0000F758 2268 003C                  		movea.l	$3C(a0),a1
0000F75C 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F762 6700 0000                  		beq.w	Obj4D_Delete
0000F766 3029 000C                  		move.w	$C(a1),d0
0000F76A 0640 0060                  		addi.w	#$60,d0
0000F76E 3140 000C                  		move.w	d0,$C(a0)
0000F772 9068 0030                  		sub.w	$30(a0),d0
0000F776 4440                       		neg.w	d0
0000F778 7208                       		moveq	#8,d1
0000F77A 0C40 0040                  		cmpi.w	#$40,d0
0000F77E 6C00                       		bge.s	loc_F026
0000F780 720B                       		moveq	#$B,d1
0000F782                            
0000F782                            loc_F026:
0000F782 0C40 0080                  		cmpi.w	#$80,d0
0000F786 6F00                       		ble.s	loc_F02E
0000F788 720E                       		moveq	#$E,d1
0000F78A                            
0000F78A                            loc_F02E:
0000F78A 5328 001E                  		subq.b	#1,$1E(a0)
0000F78E 6A00                       		bpl.s	loc_F04C
0000F790 117C 0007 001E             		move.b	#7,$1E(a0)
0000F796 5228 001B                  		addq.b	#1,$1B(a0)
0000F79A 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F7A0 6500                       		bcs.s	loc_F04C
0000F7A2 117C 0000 001B             		move.b	#0,$1B(a0)
0000F7A8                            
0000F7A8                            loc_F04C:
0000F7A8 1028 001B                  		move.b	$1B(a0),d0
0000F7AC D001                       		add.b	d1,d0
0000F7AE 1140 001A                  		move.b	d0,$1A(a0)
0000F7B2 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F7B6                            ; ===========================================================================
0000F7B6                            
0000F7B6                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F7B6 6000 E5E2                  		bra.w	DeleteObject
0000F7BA                            ; ===========================================================================
0000F7BA                            ; ---------------------------------------------------------------------------
0000F7BA                            ; Object 4E - advancing	wall of	lava (MZ)
0000F7BA                            ; ---------------------------------------------------------------------------
0000F7BA                            
0000F7BA                            Obj4E:					; XREF: Obj_Index
0000F7BA 7000                       		moveq	#0,d0
0000F7BC 1028 0024                  		move.b	$24(a0),d0
0000F7C0 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F7C4 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F7C8                            ; ===========================================================================
0000F7C8 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F7CA 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F7CC 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F7CE 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F7D0 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F7D2                            ; ===========================================================================
0000F7D2                            
0000F7D2                            Obj4E_Main:				; XREF: Obj4E_Index
0000F7D2 5828 0024                  		addq.b	#4,$24(a0)
0000F7D6 2248                       		movea.l	a0,a1
0000F7D8 7201                       		moveq	#1,d1
0000F7DA 6000                       		bra.s	Obj4E_Main2
0000F7DC                            ; ===========================================================================
0000F7DC                            
0000F7DC                            Obj4E_Loop:
0000F7DC 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F7E0 6600                       		bne.s	loc_F0C8
0000F7E2                            
0000F7E2                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F7E2 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F7E6 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F7EE 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F7F4 137C 0004 0001             		move.b	#4,1(a1)
0000F7FA 137C 0050 0019             		move.b	#$50,$19(a1)
0000F800 3368 0008 0008             		move.w	8(a0),8(a1)
0000F806 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F80C 137C 0001 0018             		move.b	#1,$18(a1)
0000F812 137C 0000 001C             		move.b	#0,$1C(a1)
0000F818 137C 0094 0020             		move.b	#$94,$20(a1)
0000F81E 2348 003C                  		move.l	a0,$3C(a1)
0000F822                            
0000F822                            loc_F0C8:
0000F822 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F826                            
0000F826 5C29 0024                  		addq.b	#6,$24(a1)
0000F82A 137C 0004 001A             		move.b	#4,$1A(a1)
0000F830                            
0000F830                            Obj4E_Action:				; XREF: Obj4E_Index
0000F830 3038 D008                  		move.w	($FFFFD008).w,d0
0000F834 9068 0008                  		sub.w	8(a0),d0
0000F838 6400                       		bcc.s	Obj4E_ChkSonic
0000F83A 4440                       		neg.w	d0
0000F83C                            
0000F83C                            Obj4E_ChkSonic:
0000F83C 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F840 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F842 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F846 9068 000C                  		sub.w	$C(a0),d0
0000F84A 6400                       		bcc.s	loc_F0F4
0000F84C 4440                       		neg.w	d0
0000F84E                            
0000F84E                            loc_F0F4:
0000F84E 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F852 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F854 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F85A 6000                       		bra.s	Obj4E_Solid
0000F85C                            ; ===========================================================================
0000F85C                            
0000F85C                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F85C 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F860 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F862 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F868 5528 0024                  		subq.b	#2,$24(a0)
0000F86C                            
0000F86C                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F86C 323C 002B                  		move.w	#$2B,d1
0000F870 343C 0018                  		move.w	#$18,d2
0000F874 3602                       		move.w	d2,d3
0000F876 5243                       		addq.w	#1,d3
0000F878 3828 0008                  		move.w	8(a0),d4
0000F87C 1028 0024                  		move.b	$24(a0),d0
0000F880 3F00                       		move.w	d0,-(sp)
0000F882 6100 0000                  		bsr.w	SolidObject
0000F886 301F                       		move.w	(sp)+,d0
0000F888 1140 0024                  		move.b	d0,$24(a0)
0000F88C 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F892 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F894 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F898 4228 0036                  		clr.b	$36(a0)
0000F89C                            
0000F89C                            Obj4E_Animate:
0000F89C 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F8A2 6100 B57A                  		bsr.w	AnimateSprite
0000F8A6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F8AC 6400                       		bcc.s	Obj4E_ChkDel
0000F8AE 6100 E488                  		bsr.w	SpeedToPos
0000F8B2                            
0000F8B2                            Obj4E_ChkDel:
0000F8B2 6100 E4AA                  		bsr.w	DisplaySprite
0000F8B6 4A28 0036                  		tst.b	$36(a0)
0000F8BA 6600                       		bne.s	locret_F17E
0000F8BC 3028 0008                  		move.w	8(a0),d0
0000F8C0 0240 FF80                  		andi.w	#$FF80,d0
0000F8C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F8C8 0441 0080                  		subi.w	#$80,d1
0000F8CC 0241 FF80                  		andi.w	#$FF80,d1
0000F8D0 9041                       		sub.w	d1,d0
0000F8D2 0C40 0280                  		cmpi.w	#$280,d0
0000F8D6 6200                       		bhi.s	Obj4E_ChkGone
0000F8D8                            
0000F8D8                            locret_F17E:
0000F8D8 4E75                       		rts	
0000F8DA                            ; ===========================================================================
0000F8DA                            
0000F8DA                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F8DA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F8DE 7000                       		moveq	#0,d0
0000F8E0 1028 0023                  		move.b	$23(a0),d0
0000F8E4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F8EA 117C 0008 0024             		move.b	#8,$24(a0)
0000F8F0 4E75                       		rts	
0000F8F2                            ; ===========================================================================
0000F8F2                            
0000F8F2                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F8F2 2268 003C                  		movea.l	$3C(a0),a1
0000F8F6 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F8FC 6700                       		beq.s	Obj4E_Delete
0000F8FE 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F904 0468 0080 0008             		subi.w	#$80,8(a0)
0000F90A 6000 E452                  		bra.w	DisplaySprite
0000F90E                            ; ===========================================================================
0000F90E                            
0000F90E                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F90E 6000 E48A                  		bra.w	DeleteObject
0000F912                            ; ===========================================================================
0000F912                            ; ---------------------------------------------------------------------------
0000F912                            ; Object 54 - invisible	lava tag (MZ)
0000F912                            ; ---------------------------------------------------------------------------
0000F912                            
0000F912                            Obj54:					; XREF: Obj_Index
0000F912 7000                       		moveq	#0,d0
0000F914 1028 0024                  		move.b	$24(a0),d0
0000F918 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F91C 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F920                            ; ===========================================================================
0000F920 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F922 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F924                            
0000F924 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F928                            ; ===========================================================================
0000F928                            
0000F928                            Obj54_Main:				; XREF: Obj54_Index
0000F928 5428 0024                  		addq.b	#2,$24(a0)
0000F92C 7000                       		moveq	#0,d0
0000F92E 1028 0028                  		move.b	$28(a0),d0
0000F932 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F938 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F940 117C 0084 0001             		move.b	#$84,1(a0)
0000F946                            
0000F946                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F946 3028 0008                  		move.w	8(a0),d0
0000F94A 0240 FF80                  		andi.w	#$FF80,d0
0000F94E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F952 0441 0080                  		subi.w	#$80,d1
0000F956 0241 FF80                  		andi.w	#$FF80,d1
0000F95A 9041                       		sub.w	d1,d0
0000F95C 6B00 E43C                  		bmi.w	DeleteObject
0000F960 0C40 0280                  		cmpi.w	#$280,d0
0000F964 6200 E434                  		bhi.w	DeleteObject
0000F968 4E75                       		rts	
0000F96A                            ; ===========================================================================
0000F96A                            ; ---------------------------------------------------------------------------
0000F96A                            ; Sprite mappings - invisible lava tag (MZ)
0000F96A                            ; ---------------------------------------------------------------------------
0000F96A                            Map_obj54:
0000F96A                            	include "_maps\obj54.asm"
0000F96A                            ; ---------------------------------------------------------------------------
0000F96A                            ; Sprite mappings - invisible lava tag (MZ)
0000F96A                            ; ---------------------------------------------------------------------------
0000F96A 0000                       		dc.w byte_F212-Map_obj54
0000F96C 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F96E 00                         		even
0000F96E 00                         		even
0000F96E                            
0000F96E                            Ani_obj4C:
0000F96E                            	include "_anim\obj4C.asm"
0000F96E                            ; ---------------------------------------------------------------------------
0000F96E                            ; Animation script - geyser of lava (MZ)
0000F96E                            ; ---------------------------------------------------------------------------
0000F96E 0000                       		dc.w byte_F220-Ani_obj4C
0000F970 0000                       		dc.w byte_F22A-Ani_obj4C
0000F972 0000                       		dc.w byte_F22E-Ani_obj4C
0000F974 0000                       		dc.w byte_F232-Ani_obj4C
0000F976 0000                       		dc.w byte_F23A-Ani_obj4C
0000F978 0000                       		dc.w byte_F23E-Ani_obj4C
0000F97A 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F984 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F988 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F98C 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F994 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F998 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F99C                            		even
0000F99C                            		even
0000F99C                            
0000F99C                            Ani_obj4E:
0000F99C                            	include "_anim\obj4E.asm"
0000F99C                            ; ---------------------------------------------------------------------------
0000F99C                            ; Animation script - advancing wall of lava (MZ)
0000F99C                            ; ---------------------------------------------------------------------------
0000F99C 0000                       		dc.w byte_F244-Ani_obj4E
0000F99E 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F9A4                            		even
0000F9A4                            		even
0000F9A4                            
0000F9A4                            ; ---------------------------------------------------------------------------
0000F9A4                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F9A4                            ; ---------------------------------------------------------------------------
0000F9A4                            Map_obj4C:
0000F9A4                            	include "_maps\obj4C.asm"
0000F9A4                            ; ---------------------------------------------------------------------------
0000F9A4                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F9A4                            ; ---------------------------------------------------------------------------
0000F9A4 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F9A8 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F9AC 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F9B0 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F9B4 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F9B8 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F9BC 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F9C0 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F9C4 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F9C8 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F9CC 02                         byte_F272:	dc.b 2
0000F9CD EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F9D2 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F9D7 02                         byte_F27D:	dc.b 2
0000F9D8 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F9DD EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F9E2 04                         byte_F288:	dc.b 4
0000F9E3 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F9E8 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F9ED F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F9F2 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F9F7 04                         byte_F29D:	dc.b 4
0000F9F8 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F9FD F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FA02 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FA07 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FA0C 06                         byte_F2B2:	dc.b 6
0000FA0D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FA12 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA17 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA1C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA21 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FA26 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FA2B 06                         byte_F2D1:	dc.b 6
0000FA2C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA31 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FA36 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FA3B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FA40 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FA45 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FA4A 02                         byte_F2F0:	dc.b 2
0000FA4B E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FA50 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FA55 02                         byte_F2FB:	dc.b 2
0000FA56 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FA5B E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FA60 0A                         byte_F306:	dc.b $A
0000FA61 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FA66 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FA6B B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FA70 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FA75 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FA7A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FA7F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FA84 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FA89 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FA8E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FA93 0A                         byte_F339:	dc.b $A
0000FA94 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FA99 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FA9E B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FAA3 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FAA8 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FAAD D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FAB2 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FAB7 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FABC 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FAC1 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FAC6 0A                         byte_F36C:	dc.b $A
0000FAC7 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FACC 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FAD1 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FAD6 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FADB D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FAE0 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FAE5 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FAEA F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FAEF 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FAF4 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FAF9 06                         byte_F39F:	dc.b 6
0000FAFA 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FAFF 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB04 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB09 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB0E D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB13 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB18 06                         byte_F3BE:	dc.b 6
0000FB19 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FB1E 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FB23 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FB28 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FB2D D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB32 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FB37 06                         byte_F3DD:	dc.b 6
0000FB38 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FB3D 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FB42 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FB47 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB4C D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB51 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB56 10                         byte_F3FC:	dc.b $10
0000FB57 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB5C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB61 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB66 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB6B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB70 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB75 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FB7A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FB7F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FB84 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FB89 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FB8E 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FB93 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FB98 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FB9D 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FBA2 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FBA7 10                         byte_F44D:	dc.b $10
0000FBA8 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FBAD 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FBB2 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FBB7 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FBBC D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FBC1 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBC6 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FBCB F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FBD0 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FBD5 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FBDA 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FBDF 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FBE4 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FBE9 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FBEE 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FBF3 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FBF8 10                         byte_F49E:	dc.b $10
0000FBF9 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FBFE 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FC03 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FC08 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC0D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC12 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC17 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FC1C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FC21 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FC26 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FC2B 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FC30 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FC35 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FC3A 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FC3F 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FC44 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FC49 06                         byte_F4EF:	dc.b 6
0000FC4A E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FC4F E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FC54 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FC59 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FC5E D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FC63 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FC68 06                         byte_F50E:	dc.b 6
0000FC69 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FC6E E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FC73 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FC78 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FC7D D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FC82 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FC87 00                         byte_F52D:	dc.b 0
0000FC88                            		even
0000FC88                            		even
0000FC88                            
0000FC88                            ; ---------------------------------------------------------------------------
0000FC88                            ; Sprite mappings - advancing wall of lava (MZ)
0000FC88                            ; ---------------------------------------------------------------------------
0000FC88                            Map_obj4E:
0000FC88                            	include "_maps\obj4E.asm"
0000FC88                            ; ---------------------------------------------------------------------------
0000FC88                            ; Sprite mappings - advancing wall of lava (MZ)
0000FC88                            ; ---------------------------------------------------------------------------
0000FC88 0000                       		dc.w byte_F538-Map_obj4E
0000FC8A 0000                       		dc.w byte_F566-Map_obj4E
0000FC8C 0000                       		dc.w byte_F594-Map_obj4E
0000FC8E 0000                       		dc.w byte_F5C2-Map_obj4E
0000FC90 0000                       		dc.w byte_F5F0-Map_obj4E
0000FC92 09                         byte_F538:	dc.b 9
0000FC93 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FC98 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FC9D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FCA2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FCA7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FCAC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FCB1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FCB6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FCBB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FCC0 09                         byte_F566:	dc.b 9
0000FCC1 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FCC6 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FCCB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FCD0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FCD5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FCDA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FCDF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FCE4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FCE9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FCEE 09                         byte_F594:	dc.b 9
0000FCEF E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FCF4 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FCF9 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FCFE E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD03 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD08 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD0D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD12 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD17 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD1C 09                         byte_F5C2:	dc.b 9
0000FD1D E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FD22 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FD27 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD2C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD31 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD36 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD3B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD40 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD45 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD4A 08                         byte_F5F0:	dc.b 8
0000FD4B E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FD50 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD55 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD5A 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD5F E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD64 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD69 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD6E 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD74 00                         		even
0000FD74 00                         		even
0000FD74                            
0000FD74                            ; ===========================================================================
0000FD74                            ; ---------------------------------------------------------------------------
0000FD74                            ; Object 40 - Moto Bug enemy (GHZ)
0000FD74                            ; ---------------------------------------------------------------------------
0000FD74                            
0000FD74                            Obj40:					; XREF: Obj_Index
0000FD74 7000                       		moveq	#0,d0
0000FD76 1028 0024                  		move.b	$24(a0),d0
0000FD7A 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FD7E 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FD82                            ; ===========================================================================
0000FD82 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FD84 0000                       		dc.w Obj40_Action-Obj40_Index
0000FD86 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FD88 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FD8A                            ; ===========================================================================
0000FD8A                            
0000FD8A                            Obj40_Main:				; XREF: Obj40_Index
0000FD8A 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FD92 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FD98 117C 0004 0001             		move.b	#4,1(a0)
0000FD9E 117C 0004 0018             		move.b	#4,$18(a0)
0000FDA4 117C 0014 0019             		move.b	#$14,$19(a0)
0000FDAA 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FDAE 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FDB0 117C 000E 0016             		move.b	#$E,$16(a0)
0000FDB6 117C 0008 0017             		move.b	#8,$17(a0)
0000FDBC 117C 000C 0020             		move.b	#$C,$20(a0)
0000FDC2 6100 DF48                  		bsr.w	ObjectFall
0000FDC6 4EB9 0000 0000             		jsr	ObjHitFloor
0000FDCC 4A41                       		tst.w	d1
0000FDCE 6A00                       		bpl.s	locret_F68A
0000FDD0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FDD4 317C 0000 0012             		move.w	#0,$12(a0)
0000FDDA 5428 0024                  		addq.b	#2,$24(a0)
0000FDDE 0868 0000 0022             		bchg	#0,$22(a0)
0000FDE4                            
0000FDE4                            locret_F68A:
0000FDE4 4E75                       		rts	
0000FDE6                            ; ===========================================================================
0000FDE6                            
0000FDE6                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FDE6 5828 0024                  		addq.b	#4,$24(a0)
0000FDEA 6000 0000                  		bra.w	Obj40_Animate
0000FDEE                            ; ===========================================================================
0000FDEE                            
0000FDEE                            Obj40_Action:				; XREF: Obj40_Index
0000FDEE 7000                       		moveq	#0,d0
0000FDF0 1028 0025                  		move.b	$25(a0),d0
0000FDF4 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FDF8 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FDFC 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FE02 6100 B01A                  		bsr.w	AnimateSprite
0000FE06                            
0000FE06                            ; ---------------------------------------------------------------------------
0000FE06                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FE06                            ; ---------------------------------------------------------------------------
0000FE06                            
0000FE06                            MarkObjGone:
0000FE06 3028 0008                  		move.w	8(a0),d0
0000FE0A 0240 FF80                  		andi.w	#$FF80,d0
0000FE0E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE12 0441 0080                  		subi.w	#$80,d1
0000FE16 0241 FF80                  		andi.w	#$FF80,d1
0000FE1A 9041                       		sub.w	d1,d0
0000FE1C 0C40 0280                  		cmpi.w	#$280,d0
0000FE20 6200 0000                  		bhi.w	Mark_ChkGone
0000FE24 6000 DF38                  		bra.w	DisplaySprite
0000FE28                            ; ===========================================================================
0000FE28                            
0000FE28                            Mark_ChkGone:
0000FE28 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FE2C 7000                       		moveq	#0,d0
0000FE2E 1028 0023                  		move.b	$23(a0),d0
0000FE32 6700                       		beq.s	Mark_Delete
0000FE34 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FE3A                            
0000FE3A                            Mark_Delete:
0000FE3A 6000 DF5E                  		bra.w	DeleteObject
0000FE3E                            
0000FE3E                            ; ===========================================================================
0000FE3E 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FE40 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FE42                            ; ===========================================================================
0000FE42                            
0000FE42                            Obj40_Move:				; XREF: Obj40_Index2
0000FE42 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FE46 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FE48 5428 0025                  		addq.b	#2,$25(a0)
0000FE4C 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FE52 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE58 0868 0000 0022             		bchg	#0,$22(a0)
0000FE5E 6600                       		bne.s	locret_F70A
0000FE60 4468 0010                  		neg.w	$10(a0)		; change direction
0000FE64                            
0000FE64                            locret_F70A:
0000FE64 4E75                       		rts	
0000FE66                            ; ===========================================================================
0000FE66                            
0000FE66                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FE66 6100 DED0                  		bsr.w	SpeedToPos
0000FE6A 4EB9 0000 0000             		jsr	ObjHitFloor
0000FE70 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE74 6D00                       		blt.s	Obj40_Pause
0000FE76 0C41 000C                  		cmpi.w	#$C,d1
0000FE7A 6C00                       		bge.s	Obj40_Pause
0000FE7C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE80 5328 0033                  		subq.b	#1,$33(a0)
0000FE84 6A00                       		bpl.s	locret_F756
0000FE86 117C 000F 0033             		move.b	#$F,$33(a0)
0000FE8C 6100 E356                  		bsr.w	SingleObjLoad
0000FE90 6600                       		bne.s	locret_F756
0000FE92 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FE96 3368 0008 0008             		move.w	8(a0),8(a1)
0000FE9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FEA2 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FEA8 137C 0002 001C             		move.b	#2,$1C(a1)
0000FEAE                            
0000FEAE                            locret_F756:
0000FEAE 4E75                       		rts	
0000FEB0                            ; ===========================================================================
0000FEB0                            
0000FEB0                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FEB0 5528 0025                  		subq.b	#2,$25(a0)
0000FEB4 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FEBA 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FEC0 117C 0000 001C             		move.b	#0,$1C(a0)
0000FEC6 4E75                       		rts	
0000FEC8                            ; ===========================================================================
0000FEC8                            
0000FEC8                            Obj40_Animate:				; XREF: Obj40_Index
0000FEC8 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FECE 6100 AF4E                  		bsr.w	AnimateSprite
0000FED2 6000 DE8A                  		bra.w	DisplaySprite
0000FED6                            ; ===========================================================================
0000FED6                            
0000FED6                            Obj40_Delete:				; XREF: Obj40_Index
0000FED6 6000 DEC2                  		bra.w	DeleteObject
0000FEDA                            ; ===========================================================================
0000FEDA                            Ani_obj40:
0000FEDA                            	include "_anim\obj40.asm"
0000FEDA                            ; ---------------------------------------------------------------------------
0000FEDA                            ; Animation script - Motobug enemy
0000FEDA                            ; ---------------------------------------------------------------------------
0000FEDA 0000                       		dc.w byte_F788-Ani_obj40
0000FEDC 0000                       		dc.w byte_F78C-Ani_obj40
0000FEDE 0000                       		dc.w byte_F792-Ani_obj40
0000FEE0 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FEE4 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FEEA 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FEF8                            		even
0000FEF8                            		even
0000FEF8                            
0000FEF8                            ; ---------------------------------------------------------------------------
0000FEF8                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FEF8                            ; ---------------------------------------------------------------------------
0000FEF8                            Map_obj40:
0000FEF8                            	include "_maps\obj40.asm"
0000FEF8                            Map_cedc:
0000FEF8 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FEFA 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FEFC 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FEFE 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FF00 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FF02 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FF04 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FF06 04                         Map_cedc_E: 	dc.b $4
0000FF07 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FF0C 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FF11 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FF16 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FF1B 04                         Map_cedc_23: 	dc.b $4
0000FF1C F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FF21 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FF26 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FF2B 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FF30 05                         Map_cedc_38: 	dc.b $5
0000FF31 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FF36 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FF3B F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FF40 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FF45 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FF4A 01                         Map_cedc_52: 	dc.b $1
0000FF4B FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FF50 01                         Map_cedc_58: 	dc.b $1
0000FF51 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FF56 01                         Map_cedc_5E: 	dc.b $1
0000FF57 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FF5C 00                         Map_cedc_64: 	dc.b $0
0000FF5E 00                         	even
0000FF5E 00                         	even
0000FF5E                            
0000FF5E                            ; ===========================================================================
0000FF5E                            ; ---------------------------------------------------------------------------
0000FF5E                            ; Object 4F - blank
0000FF5E                            ; ---------------------------------------------------------------------------
0000FF5E                            
0000FF5E                            Obj4F:					; XREF: Obj_Index
0000FF5E 4E75                       		rts	
0000FF60                            
0000FF60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF60                            
0000FF60                            
0000FF60                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FF60 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FF64 D047                       		add.w	d7,d0
0000FF66 0240 0003                  		andi.w	#3,d0
0000FF6A 6600                       		bne.s	loc_F836
0000FF6C 7600                       		moveq	#0,d3
0000FF6E 1628 0019                  		move.b	$19(a0),d3
0000FF72 4A68 0010                  		tst.w	$10(a0)
0000FF76 6B00                       		bmi.s	loc_F82C
0000FF78 6100 0000                  		bsr.w	ObjHitWallRight
0000FF7C 4A41                       		tst.w	d1
0000FF7E 6A00                       		bpl.s	loc_F836
0000FF80                            
0000FF80                            loc_F828:
0000FF80 7001                       		moveq	#1,d0
0000FF82 4E75                       		rts	
0000FF84                            ; ===========================================================================
0000FF84                            
0000FF84                            loc_F82C:
0000FF84 4643                       		not.w	d3
0000FF86 6100 0000                  		bsr.w	ObjHitWallLeft
0000FF8A 4A41                       		tst.w	d1
0000FF8C 6BF2                       		bmi.s	loc_F828
0000FF8E                            
0000FF8E                            loc_F836:
0000FF8E 7000                       		moveq	#0,d0
0000FF90 4E75                       		rts	
0000FF92                            ; End of function Obj50_ChkWall
0000FF92                            
0000FF92                            ; ===========================================================================
0000FF92                            ; ---------------------------------------------------------------------------
0000FF92                            ; Object 50 - Yadrin enemy (SYZ)
0000FF92                            ; ---------------------------------------------------------------------------
0000FF92                            
0000FF92                            Obj50:					; XREF: Obj_Index
0000FF92 7000                       		moveq	#0,d0
0000FF94 1028 0024                  		move.b	$24(a0),d0
0000FF98 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FF9C 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FFA0                            ; ===========================================================================
0000FFA0 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FFA2 0000                       		dc.w Obj50_Action-Obj50_Index
0000FFA4                            ; ===========================================================================
0000FFA4                            
0000FFA4                            Obj50_Main:				; XREF: Obj50_Index
0000FFA4 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FFAC 317C 247B 0002             		move.w	#$247B,2(a0)
0000FFB2 117C 0004 0001             		move.b	#4,1(a0)
0000FFB8 117C 0004 0018             		move.b	#4,$18(a0)
0000FFBE 117C 0014 0019             		move.b	#$14,$19(a0)
0000FFC4 117C 0011 0016             		move.b	#$11,$16(a0)
0000FFCA 117C 0008 0017             		move.b	#8,$17(a0)
0000FFD0 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FFD6 6100 DD34                  		bsr.w	ObjectFall
0000FFDA 6100 0000                  		bsr.w	ObjHitFloor
0000FFDE 4A41                       		tst.w	d1
0000FFE0 6A00                       		bpl.s	locret_F89E
0000FFE2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FFE6 317C 0000 0012             		move.w	#0,$12(a0)
0000FFEC 5428 0024                  		addq.b	#2,$24(a0)
0000FFF0 0868 0000 0022             		bchg	#0,$22(a0)
0000FFF6                            
0000FFF6                            locret_F89E:
0000FFF6 4E75                       		rts	
0000FFF8                            ; ===========================================================================
0000FFF8                            
0000FFF8                            Obj50_Action:				; XREF: Obj50_Index
0000FFF8 7000                       		moveq	#0,d0
0000FFFA 1028 0025                  		move.b	$25(a0),d0
0000FFFE 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010002 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00010006 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0001000C 6100 AE10                  		bsr.w	AnimateSprite
00010010 6000 FDF4                  		bra.w	MarkObjGone
00010014                            ; ===========================================================================
00010014 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00010016 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00010018                            ; ===========================================================================
00010018                            
00010018                            Obj50_Move:				; XREF: Obj50_Index2
00010018 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001001C 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0001001E 5428 0025                  		addq.b	#2,$25(a0)
00010022 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00010028 117C 0001 001C             		move.b	#1,$1C(a0)
0001002E 0868 0000 0022             		bchg	#0,$22(a0)
00010034 6600                       		bne.s	locret_F8E2
00010036 4468 0010                  		neg.w	$10(a0)		; change direction
0001003A                            
0001003A                            locret_F8E2:
0001003A 4E75                       		rts	
0001003C                            ; ===========================================================================
0001003C                            
0001003C                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0001003C 6100 DCFA                  		bsr.w	SpeedToPos
00010040 6100 0000                  		bsr.w	ObjHitFloor
00010044 0C41 FFF8                  		cmpi.w	#-8,d1
00010048 6D00                       		blt.s	Obj50_Pause
0001004A 0C41 000C                  		cmpi.w	#$C,d1
0001004E 6C00                       		bge.s	Obj50_Pause
00010050 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010054 6100 FF0A                  		bsr.w	Obj50_ChkWall
00010058 6600                       		bne.s	Obj50_Pause
0001005A 4E75                       		rts	
0001005C                            ; ===========================================================================
0001005C                            
0001005C                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0001005C 5528 0025                  		subq.b	#2,$25(a0)
00010060 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010066 317C 0000 0010             		move.w	#0,$10(a0)
0001006C 117C 0000 001C             		move.b	#0,$1C(a0)
00010072 4E75                       		rts	
00010074                            ; ===========================================================================
00010074                            Ani_obj50:
00010074                            	include "_anim\obj50.asm"
00010074                            ; ---------------------------------------------------------------------------
00010074                            ; Animation script - Yadrin enemy
00010074                            ; ---------------------------------------------------------------------------
00010074 0000                       		dc.w byte_F920-Ani_obj50
00010076 0000                       		dc.w byte_F924-Ani_obj50
00010078 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0001007C 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010086                            		even
00010086                            		even
00010086                            
00010086                            ; ---------------------------------------------------------------------------
00010086                            ; Sprite mappings - Yadrin enemy (SYZ)
00010086                            ; ---------------------------------------------------------------------------
00010086                            Map_obj50:
00010086                            	include "_maps\obj50.asm"
00010086                            Map_ff24:
00010086 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010088 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
0001008A 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
0001008C 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
0001008E 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010090 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010092 05                         Map_ff24_C: 	dc.b $5
00010093 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010098 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0001009D EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000100A2 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000100A7 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000100AC 05                         Map_ff24_26: 	dc.b $5
000100AD F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000100B2 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000100B7 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000100BC F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000100C1 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000100C6 05                         Map_ff24_40: 	dc.b $5
000100C7 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000100CC 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000100D1 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000100D6 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000100DB 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000100E0 05                         Map_ff24_5A: 	dc.b $5
000100E1 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000100E6 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000100EB EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000100F0 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000100F5 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000100FA 05                         Map_ff24_74: 	dc.b $5
000100FB F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010100 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010105 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001010A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001010F 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010114 05                         Map_ff24_8E: 	dc.b $5
00010115 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0001011A 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
0001011F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010124 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010129 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001012E                            	even
0001012E                            	even
0001012E                            
0001012E                            ; ---------------------------------------------------------------------------
0001012E                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0001012E                            ;
0001012E                            ; variables:
0001012E                            ; d1 = width
0001012E                            ; d2 = height /	2 (when	jumping)
0001012E                            ; d3 = height /	2 (when	walking)
0001012E                            ; d4 = x-axis position
0001012E                            ; ---------------------------------------------------------------------------
0001012E                            
0001012E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001012E                            
0001012E                            
0001012E                            SolidObject:
0001012E 4A28 0025                  		tst.b	$25(a0)
00010132 6700 0000                  		beq.w	loc_FAC8
00010136 3401                       		move.w	d1,d2
00010138 D442                       		add.w	d2,d2
0001013A 43F8 D000                  		lea	($FFFFD000).w,a1
0001013E 0829 0001 0022             		btst	#1,$22(a1)
00010144 6600                       		bne.s	loc_F9FE
00010146 3029 0008                  		move.w	8(a1),d0
0001014A 9068 0008                  		sub.w	8(a0),d0
0001014E D041                       		add.w	d1,d0
00010150 6B00                       		bmi.s	loc_F9FE
00010152 B042                       		cmp.w	d2,d0
00010154 6500                       		bcs.s	loc_FA12
00010156                            
00010156                            loc_F9FE:
00010156 08A9 0003 0022             		bclr	#3,$22(a1)
0001015C 08A8 0003 0022             		bclr	#3,$22(a0)
00010162 4228 0025                  		clr.b	$25(a0)
00010166 7800                       		moveq	#0,d4
00010168 4E75                       		rts	
0001016A                            ; ===========================================================================
0001016A                            
0001016A                            loc_FA12:
0001016A 3404                       		move.w	d4,d2
0001016C                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
0001016C 7800                       		moveq	#0,d4
0001016E 4E75                       		rts	
00010170                            ; ===========================================================================
00010170                            
00010170                            SolidObject71:				; XREF: Obj71_Solid
00010170 4A28 0025                  		tst.b	$25(a0)
00010174 6700 0000                  		beq.w	loc_FAD0
00010178 3401                       		move.w	d1,d2
0001017A D442                       		add.w	d2,d2
0001017C 43F8 D000                  		lea	($FFFFD000).w,a1
00010180 0829 0001 0022             		btst	#1,$22(a1)
00010186 6600                       		bne.s	loc_FA44
00010188 3029 0008                  		move.w	8(a1),d0
0001018C 9068 0008                  		sub.w	8(a0),d0
00010190 D041                       		add.w	d1,d0
00010192 6B00                       		bmi.s	loc_FA44
00010194 B042                       		cmp.w	d2,d0
00010196 6500                       		bcs.s	loc_FA58
00010198                            
00010198                            loc_FA44:
00010198 08A9 0003 0022             		bclr	#3,$22(a1)
0001019E 08A8 0003 0022             		bclr	#3,$22(a0)
000101A4 4228 0025                  		clr.b	$25(a0)
000101A8 7800                       		moveq	#0,d4
000101AA 4E75                       		rts	
000101AC                            ; ===========================================================================
000101AC                            
000101AC                            loc_FA58:
000101AC 3404                       		move.w	d4,d2
000101AE                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000101AE 7800                       		moveq	#0,d4
000101B0 4E75                       		rts	
000101B2                            ; ===========================================================================
000101B2                            
000101B2                            SolidObject2F:				; XREF: Obj2F_Solid
000101B2 43F8 D000                  		lea	($FFFFD000).w,a1
000101B6 4A28 0001                  		tst.b	1(a0)
000101BA 6A00 0000                  		bpl.w	loc_FB92
000101BE 3029 0008                  		move.w	8(a1),d0
000101C2 9068 0008                  		sub.w	8(a0),d0
000101C6 D041                       		add.w	d1,d0
000101C8 6B00 0000                  		bmi.w	loc_FB92
000101CC 3601                       		move.w	d1,d3
000101CE D643                       		add.w	d3,d3
000101D0 B043                       		cmp.w	d3,d0
000101D2 6200 0000                  		bhi.w	loc_FB92
000101D6 3A00                       		move.w	d0,d5
000101D8 0828 0000 0001             		btst	#0,1(a0)
000101DE 6700                       		beq.s	loc_FA94
000101E0 4645                       		not.w	d5
000101E2 DA43                       		add.w	d3,d5
000101E4                            
000101E4                            loc_FA94:
000101E4 E24D                       		lsr.w	#1,d5
000101E6 7600                       		moveq	#0,d3
000101E8 1632 5000                  		move.b	(a2,d5.w),d3
000101EC 9612                       		sub.b	(a2),d3
000101EE 3A28 000C                  		move.w	$C(a0),d5
000101F2 9A43                       		sub.w	d3,d5
000101F4 1629 0016                  		move.b	$16(a1),d3
000101F8 4883                       		ext.w	d3
000101FA D443                       		add.w	d3,d2
000101FC 3629 000C                  		move.w	$C(a1),d3
00010200 9645                       		sub.w	d5,d3
00010202 5843                       		addq.w	#4,d3
00010204 D642                       		add.w	d2,d3
00010206 6B00 0000                  		bmi.w	loc_FB92
0001020A 3802                       		move.w	d2,d4
0001020C D844                       		add.w	d4,d4
0001020E B644                       		cmp.w	d4,d3
00010210 6400 0000                  		bcc.w	loc_FB92
00010214 6000 0000                  		bra.w	loc_FB0E
00010218                            ; ===========================================================================
00010218                            
00010218                            loc_FAC8:
00010218 4A28 0001                  		tst.b	1(a0)
0001021C 6A00 0000                  		bpl.w	loc_FB92
00010220                            
00010220                            loc_FAD0:
00010220 43F8 D000                  		lea	($FFFFD000).w,a1
00010224 3029 0008                  		move.w	8(a1),d0
00010228 9068 0008                  		sub.w	8(a0),d0
0001022C D041                       		add.w	d1,d0
0001022E 6B00 0000                  		bmi.w	loc_FB92
00010232 3601                       		move.w	d1,d3
00010234 D643                       		add.w	d3,d3
00010236 B043                       		cmp.w	d3,d0
00010238 6200 0000                  		bhi.w	loc_FB92
0001023C 1629 0016                  		move.b	$16(a1),d3
00010240 4883                       		ext.w	d3
00010242 D443                       		add.w	d3,d2
00010244 3629 000C                  		move.w	$C(a1),d3
00010248 9668 000C                  		sub.w	$C(a0),d3
0001024C 5843                       		addq.w	#4,d3
0001024E D642                       		add.w	d2,d3
00010250 6B00 0000                  		bmi.w	loc_FB92
00010254 3802                       		move.w	d2,d4
00010256 D844                       		add.w	d4,d4
00010258 B644                       		cmp.w	d4,d3
0001025A 6400 0000                  		bcc.w	loc_FB92
0001025E                            
0001025E                            loc_FB0E:
0001025E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010262 6B00 0000                  		bmi.w	loc_FB92
00010266 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001026C 6400 0000                  		bcc.w	loc_FB92
00010270 4A78 FE08                  		tst.w	($FFFFFE08).w
00010274 6600 0000                  		bne.w	loc_FBAC
00010278 3A00                       		move.w	d0,d5
0001027A B240                       		cmp.w	d0,d1
0001027C 6400                       		bcc.s	loc_FB36
0001027E D241                       		add.w	d1,d1
00010280 9041                       		sub.w	d1,d0
00010282 3A00                       		move.w	d0,d5
00010284 4445                       		neg.w	d5
00010286                            
00010286                            loc_FB36:
00010286 3203                       		move.w	d3,d1
00010288 B443                       		cmp.w	d3,d2
0001028A 6400                       		bcc.s	loc_FB44
0001028C 5943                       		subq.w	#4,d3
0001028E 9644                       		sub.w	d4,d3
00010290 3203                       		move.w	d3,d1
00010292 4441                       		neg.w	d1
00010294                            
00010294                            loc_FB44:
00010294 BA41                       		cmp.w	d1,d5
00010296 6200 0000                  		bhi.w	loc_FBB0
0001029A 0C41 0004                  		cmpi.w	#4,d1
0001029E 6300                       		bls.s	loc_FB8C
000102A0 4A40                       		tst.w	d0
000102A2 6700                       		beq.s	loc_FB70
000102A4 6B00                       		bmi.s	loc_FB5E
000102A6 4A69 0010                  		tst.w	$10(a1)
000102AA 6B00                       		bmi.s	loc_FB70
000102AC 6000                       		bra.s	loc_FB64
000102AE                            ; ===========================================================================
000102AE                            
000102AE                            loc_FB5E:
000102AE 4A69 0010                  		tst.w	$10(a1)
000102B2 6A00                       		bpl.s	loc_FB70
000102B4                            
000102B4                            loc_FB64:
000102B4 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000102BA 337C 0000 0010             		move.w	#0,$10(a1)
000102C0                            
000102C0                            loc_FB70:
000102C0 9169 0008                  		sub.w	d0,8(a1)
000102C4 0829 0001 0022             		btst	#1,$22(a1)
000102CA 6600                       		bne.s	loc_FB8C
000102CC 08E9 0005 0022             		bset	#5,$22(a1)
000102D2 08E8 0005 0022             		bset	#5,$22(a0)
000102D8 7801                       		moveq	#1,d4
000102DA 4E75                       		rts	
000102DC                            ; ===========================================================================
000102DC                            
000102DC                            loc_FB8C:
000102DC 6100                       		bsr.s	loc_FBA0
000102DE 7801                       		moveq	#1,d4
000102E0 4E75                       		rts	
000102E2                            ; ===========================================================================
000102E2                            
000102E2                            loc_FB92:
000102E2 0828 0005 0022             		btst	#5,$22(a0)
000102E8 6700                       		beq.s	loc_FBAC
000102EA 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000102F0                            
000102F0                            loc_FBA0:
000102F0 08A8 0005 0022             		bclr	#5,$22(a0)
000102F6 08A9 0005 0022             		bclr	#5,$22(a1)
000102FC                            
000102FC                            loc_FBAC:
000102FC 7800                       		moveq	#0,d4
000102FE 4E75                       		rts	
00010300                            ; ===========================================================================
00010300                            
00010300                            loc_FBB0:
00010300 4A43                       		tst.w	d3
00010302 6B00                       		bmi.s	loc_FBBC
00010304 0C43 0010                  		cmpi.w	#$10,d3
00010308 6500                       		bcs.s	loc_FBEE
0001030A 60D6                       		bra.s	loc_FB92
0001030C                            ; ===========================================================================
0001030C                            
0001030C                            loc_FBBC:
0001030C 4A69 0012                  		tst.w	$12(a1)
00010310 6700                       		beq.s	loc_FBD6
00010312 6A00                       		bpl.s	loc_FBD2
00010314 4A43                       		tst.w	d3
00010316 6A00                       		bpl.s	loc_FBD2
00010318 9769 000C                  		sub.w	d3,$C(a1)
0001031C 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010322                            
00010322                            loc_FBD2:
00010322 78FF                       		moveq	#-1,d4
00010324 4E75                       		rts	
00010326                            ; ===========================================================================
00010326                            
00010326                            loc_FBD6:
00010326 0829 0001 0022             		btst	#1,$22(a1)
0001032C 66F4                       		bne.s	loc_FBD2
0001032E 2F08                       		move.l	a0,-(sp)
00010330 2049                       		movea.l	a1,a0
00010332 4EB9 0000 0000             		jsr	KillSonic
00010338 205F                       		movea.l	(sp)+,a0
0001033A 78FF                       		moveq	#-1,d4
0001033C 4E75                       		rts	
0001033E                            ; ===========================================================================
0001033E                            
0001033E                            loc_FBEE:
0001033E 5943                       		subq.w	#4,d3
00010340 7200                       		moveq	#0,d1
00010342 1228 0019                  		move.b	$19(a0),d1
00010346 3401                       		move.w	d1,d2
00010348 D442                       		add.w	d2,d2
0001034A D269 0008                  		add.w	8(a1),d1
0001034E 9268 0008                  		sub.w	8(a0),d1
00010352 6B00                       		bmi.s	loc_FC28
00010354 B242                       		cmp.w	d2,d1
00010356 6400                       		bcc.s	loc_FC28
00010358 4A69 0012                  		tst.w	$12(a1)
0001035C 6B00                       		bmi.s	loc_FC28
0001035E 9769 000C                  		sub.w	d3,$C(a1)
00010362 5369 000C                  		subq.w	#1,$C(a1)
00010366 6100                       		bsr.s	sub_FC2C
00010368 117C 0002 0025             		move.b	#2,$25(a0)
0001036E 08E8 0003 0022             		bset	#3,$22(a0)
00010374 78FF                       		moveq	#-1,d4
00010376 4E75                       		rts	
00010378                            ; ===========================================================================
00010378                            
00010378                            loc_FC28:
00010378 7800                       		moveq	#0,d4
0001037A 4E75                       		rts	
0001037C                            ; End of function SolidObject
0001037C                            
0001037C                            
0001037C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001037C                            
0001037C                            
0001037C                            sub_FC2C:				; XREF: SolidObject
0001037C 0829 0003 0022             		btst	#3,$22(a1)
00010382 6700                       		beq.s	loc_FC4E
00010384 7000                       		moveq	#0,d0
00010386 1029 003D                  		move.b	$3D(a1),d0
0001038A ED48                       		lsl.w	#6,d0
0001038C 0680 00FF D000             		addi.l	#$FFD000,d0
00010392 2440                       		movea.l	d0,a2
00010394 08AA 0003 0022             		bclr	#3,$22(a2)
0001039A 422A 0025                  		clr.b	$25(a2)
0001039E                            
0001039E                            loc_FC4E:
0001039E 3008                       		move.w	a0,d0
000103A0 0440 D000                  		subi.w	#-$3000,d0
000103A4 EC48                       		lsr.w	#6,d0
000103A6 0240 007F                  		andi.w	#$7F,d0
000103AA 1340 003D                  		move.b	d0,$3D(a1)
000103AE 137C 0000 0026             		move.b	#0,$26(a1)
000103B4 337C 0000 0012             		move.w	#0,$12(a1)
000103BA 3369 0010 0014             		move.w	$10(a1),$14(a1)
000103C0 0829 0001 0022             		btst	#1,$22(a1)
000103C6 6700                       		beq.s	loc_FC84
000103C8 2F08                       		move.l	a0,-(sp)
000103CA 2049                       		movea.l	a1,a0
000103CC 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000103D2 205F                       		movea.l	(sp)+,a0
000103D4                            
000103D4                            loc_FC84:
000103D4 08E9 0003 0022             		bset	#3,$22(a1)
000103DA 08E8 0003 0022             		bset	#3,$22(a0)
000103E0 4E75                       		rts	
000103E2                            ; End of function sub_FC2C
000103E2                            
000103E2                            ; ===========================================================================
000103E2                            ; ---------------------------------------------------------------------------
000103E2                            ; Object 51 - smashable	green block (MZ)
000103E2                            ; ---------------------------------------------------------------------------
000103E2                            
000103E2                            Obj51:					; XREF: Obj_Index
000103E2 7000                       		moveq	#0,d0
000103E4 1028 0024                  		move.b	$24(a0),d0
000103E8 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000103EC 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000103F0 6000 FA14                  		bra.w	MarkObjGone
000103F4                            ; ===========================================================================
000103F4 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000103F6 0000                       		dc.w Obj51_Solid-Obj51_Index
000103F8 0000                       		dc.w Obj51_Display-Obj51_Index
000103FA                            ; ===========================================================================
000103FA                            
000103FA                            Obj51_Main:				; XREF: Obj51_Index
000103FA 5428 0024                  		addq.b	#2,$24(a0)
000103FE 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010406 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001040C 117C 0004 0001             		move.b	#4,1(a0)
00010412 117C 0010 0019             		move.b	#$10,$19(a0)
00010418 117C 0004 0018             		move.b	#4,$18(a0)
0001041E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010424                            
00010424                            Obj51_Solid:				; XREF: Obj51_Index
00010424 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001042A 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010430 323C 001B                  		move.w	#$1B,d1
00010434 343C 0010                  		move.w	#$10,d2
00010438 363C 0011                  		move.w	#$11,d3
0001043C 3828 0008                  		move.w	8(a0),d4
00010440 6100 FCEC                  		bsr.w	SolidObject
00010444 0828 0003 0022             		btst	#3,$22(a0)
0001044A 6600                       		bne.s	Obj51_Smash
0001044C                            
0001044C                            locret_FCFC:
0001044C 4E75                       		rts	
0001044E                            ; ===========================================================================
0001044E                            
0001044E                            Obj51_Smash:				; XREF: Obj51_Solid
0001044E 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010454 66F6                       		bne.s	locret_FCFC	; if not, branch
00010456 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0001045C 08E9 0002 0022             		bset	#2,$22(a1)
00010462 137C 000E 0016             		move.b	#$E,$16(a1)
00010468 137C 0007 0017             		move.b	#7,$17(a1)
0001046E 137C 0002 001C             		move.b	#2,$1C(a1)
00010474 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001047A 08E9 0001 0022             		bset	#1,$22(a1)
00010480 08A9 0003 0022             		bclr	#3,$22(a1)
00010486 137C 0002 0024             		move.b	#2,$24(a1)
0001048C 08A8 0003 0022             		bclr	#3,$22(a0)
00010492 4228 0025                  		clr.b	$25(a0)
00010496 117C 0001 001A             		move.b	#1,$1A(a0)
0001049C 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000104A2 7203                       		moveq	#3,d1		; set number of	fragments to 4
000104A4 343C 0038                  		move.w	#$38,d2
000104A8 6100 D4A2                  		bsr.w	SmashObject
000104AC 6100 DD36                  		bsr.w	SingleObjLoad
000104B0 6600                       		bne.s	Obj51_Display
000104B2 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000104B6 3368 0008 0008             		move.w	8(a0),8(a1)
000104BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000104C2 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000104C6 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000104CA 0C42 0006                  		cmpi.w	#6,d2
000104CE 6500                       		bcs.s	Obj51_Bonus
000104D0 7406                       		moveq	#6,d2
000104D2                            
000104D2                            Obj51_Bonus:
000104D2 7000                       		moveq	#0,d0
000104D4 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000104D8 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000104DE 6500                       		bcs.s	loc_FD98	; if not, branch
000104E0 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000104E4 740A                       		moveq	#10,d2
000104E6                            
000104E6                            loc_FD98:
000104E6 4EB9 0000 0000             		jsr	AddPoints
000104EC E24A                       		lsr.w	#1,d2
000104EE 1342 001A                  		move.b	d2,$1A(a1)
000104F2                            
000104F2                            Obj51_Display:				; XREF: Obj51_Index
000104F2 6100 D844                  		bsr.w	SpeedToPos
000104F6 0668 0038 0012             		addi.w	#$38,$12(a0)
000104FC 6100 D860                  		bsr.w	DisplaySprite
00010500 4A28 0001                  		tst.b	1(a0)
00010504 6A00 D894                  		bpl.w	DeleteObject
00010508 4E75                       		rts	
0001050A                            ; ===========================================================================
0001050A FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0001050E FF00 FF00                  		dc.w $FF00, $FF00
00010512 0200 FE00                  		dc.w $200, $FE00
00010516 0100 FF00                  		dc.w $100, $FF00
0001051A                            
0001051A 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010522                            ; ---------------------------------------------------------------------------
00010522                            ; Sprite mappings - smashable green block (MZ)
00010522                            ; ---------------------------------------------------------------------------
00010522                            Map_obj51:
00010522                            	include "_maps\obj51.asm"
00010522                            ; ---------------------------------------------------------------------------
00010522                            ; Sprite mappings - smashable green block (MZ)
00010522                            ; ---------------------------------------------------------------------------
00010522 0000                       		dc.w byte_FDD8-Map_obj51
00010524 0000                       		dc.w byte_FDE3-Map_obj51
00010526 02                         byte_FDD8:	dc.b 2
00010527 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0001052C 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010531 04                         byte_FDE3:	dc.b 4
00010532 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010537 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0001053C F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010541 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010546                            		even
00010546                            		even
00010546                            
00010546                            ; ===========================================================================
00010546                            ; ---------------------------------------------------------------------------
00010546                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010546                            ; ---------------------------------------------------------------------------
00010546                            
00010546                            Obj52:					; XREF: Obj_Index
00010546 7000                       		moveq	#0,d0
00010548 1028 0024                  		move.b	$24(a0),d0
0001054C 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010550 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010554                            ; ===========================================================================
00010554 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010556 0000                       		dc.w Obj52_Platform-Obj52_Index
00010558 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001055A                            
0001055A 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0001055C 2001                       		dc.b $20, 1
0001055E 2002                       		dc.b $20, 2
00010560 4003                       		dc.b $40, 3
00010562 3004                       		dc.b $30, 4
00010564                            ; ===========================================================================
00010564                            
00010564                            Obj52_Main:				; XREF: Obj52_Index
00010564 5428 0024                  		addq.b	#2,$24(a0)
00010568 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010570 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010576 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001057C 6600                       		bne.s	loc_FE44
0001057E 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010586 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001058C 117C 0007 0016             		move.b	#7,$16(a0)
00010592                            
00010592                            loc_FE44:
00010592 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010598 6600                       		bne.s	loc_FE60
0001059A 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000105A0 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000105A6 6700                       		beq.s	loc_FE60	; if yes, branch
000105A8 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000105AE                            
000105AE                            loc_FE60:
000105AE 117C 0004 0001             		move.b	#4,1(a0)
000105B4 7000                       		moveq	#0,d0
000105B6 1028 0028                  		move.b	$28(a0),d0
000105BA E648                       		lsr.w	#3,d0
000105BC 0240 001E                  		andi.w	#$1E,d0
000105C0 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000105C4 115A 0019                  		move.b	(a2)+,$19(a0)
000105C8 115A 001A                  		move.b	(a2)+,$1A(a0)
000105CC 117C 0004 0018             		move.b	#4,$18(a0)
000105D2 3168 0008 0030             		move.w	8(a0),$30(a0)
000105D8 3168 000C 0032             		move.w	$C(a0),$32(a0)
000105DE 0228 000F 0028             		andi.b	#$F,$28(a0)
000105E4                            
000105E4                            Obj52_Platform:				; XREF: Obj52_Index
000105E4 6100 0000                  		bsr.w	Obj52_Move
000105E8 7200                       		moveq	#0,d1
000105EA 1228 0019                  		move.b	$19(a0),d1
000105EE 4EB9 0000 79E8             		jsr	(PlatformObject).l
000105F4 6000                       		bra.s	Obj52_ChkDel
000105F6                            ; ===========================================================================
000105F6                            
000105F6                            Obj52_StandOn:				; XREF: Obj52_Index
000105F6 7200                       		moveq	#0,d1
000105F8 1228 0019                  		move.b	$19(a0),d1
000105FC 4EB9 0000 7B5C             		jsr	(ExitPlatform).l
00010602 3F28 0008                  		move.w	8(a0),-(sp)
00010606 6100 0000                  		bsr.w	Obj52_Move
0001060A 341F                       		move.w	(sp)+,d2
0001060C 4EB9 0000 80C6             		jsr	(MvSonicOnPtfm2).l
00010612                            
00010612                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010612 3028 0030                  		move.w	$30(a0),d0
00010616 0240 FF80                  		andi.w	#$FF80,d0
0001061A 3238 F700                  		move.w	($FFFFF700).w,d1
0001061E 0441 0080                  		subi.w	#$80,d1
00010622 0241 FF80                  		andi.w	#$FF80,d1
00010626 9041                       		sub.w	d1,d0
00010628 0C40 0280                  		cmpi.w	#$280,d0
0001062C 6200 D76C                  		bhi.w	DeleteObject
00010630 6000 D72C                  		bra.w	DisplaySprite
00010634                            ; ===========================================================================
00010634                            
00010634                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010634 7000                       		moveq	#0,d0
00010636 1028 0028                  		move.b	$28(a0),d0
0001063A 0240 000F                  		andi.w	#$F,d0
0001063E D040                       		add.w	d0,d0
00010640 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010644 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010648                            ; ===========================================================================
00010648 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0001064C 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010650 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010654 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010658 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0001065C 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0001065E                            ; ===========================================================================
0001065E                            
0001065E                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0001065E 4E75                       		rts	
00010660                            ; ===========================================================================
00010660                            
00010660                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010660 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010664 323C 0060                  		move.w	#$60,d1
00010668 0828 0000 0022             		btst	#0,$22(a0)
0001066E 6700                       		beq.s	loc_FF26
00010670 4440                       		neg.w	d0
00010672 D041                       		add.w	d1,d0
00010674                            
00010674                            loc_FF26:
00010674 3228 0030                  		move.w	$30(a0),d1
00010678 9240                       		sub.w	d0,d1
0001067A 3141 0008                  		move.w	d1,8(a0)
0001067E 4E75                       		rts	
00010680                            ; ===========================================================================
00010680                            
00010680                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010680 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010686 6600                       		bne.s	Obj52_02_Wait
00010688 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001068C                            
0001068C                            Obj52_02_Wait:
0001068C 4E75                       		rts	
0001068E                            ; ===========================================================================
0001068E                            
0001068E                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001068E 7600                       		moveq	#0,d3
00010690 1628 0019                  		move.b	$19(a0),d3
00010694 6100 0000                  		bsr.w	ObjHitWallRight
00010698 4A41                       		tst.w	d1		; has the platform hit a wall?
0001069A 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0001069C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000106A0 3168 0008 0030             		move.w	8(a0),$30(a0)
000106A6 4E75                       		rts	
000106A8                            ; ===========================================================================
000106A8                            
000106A8                            Obj52_03_End:
000106A8 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000106AC 4E75                       		rts	
000106AE                            ; ===========================================================================
000106AE                            
000106AE                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000106AE 7600                       		moveq	#0,d3
000106B0 1628 0019                  		move.b	$19(a0),d3
000106B4 6100 0000                  		bsr.w	ObjHitWallRight
000106B8 4A41                       		tst.w	d1		; has the platform hit a wall?
000106BA 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000106BC 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000106C0 3168 0008 0030             		move.w	8(a0),$30(a0)
000106C6 4E75                       		rts	
000106C8                            ; ===========================================================================
000106C8                            
000106C8                            Obj52_05_End:
000106C8 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000106CC 4E75                       		rts	
000106CE                            ; ===========================================================================
000106CE                            
000106CE                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000106CE 6100 D668                  		bsr.w	SpeedToPos
000106D2 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000106D8 6100 0000                  		bsr.w	ObjHitFloor
000106DC 4A41                       		tst.w	d1		; has platform hit the floor?
000106DE 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000106E2 D368 000C                  		add.w	d1,$C(a0)
000106E6 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000106EA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000106EE                            
000106EE                            locret_FFA0:
000106EE 4E75                       		rts	
000106F0                            ; ===========================================================================
000106F0                            
000106F0                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000106F0 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000106F4 6700                       		beq.s	Obj52_07_ChkDel
000106F6 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000106FA                            
000106FA                            Obj52_07_ChkDel:
000106FA 588F                       		addq.l	#4,sp
000106FC 3028 0030                  		move.w	$30(a0),d0
00010700 0240 FF80                  		andi.w	#$FF80,d0
00010704 3238 F700                  		move.w	($FFFFF700).w,d1
00010708 0441 0080                  		subi.w	#$80,d1
0001070C 0241 FF80                  		andi.w	#$FF80,d1
00010710 9041                       		sub.w	d1,d0
00010712 0C40 0280                  		cmpi.w	#$280,d0
00010716 6200 D682                  		bhi.w	DeleteObject
0001071A 4E75                       		rts	
0001071C                            ; ===========================================================================
0001071C                            
0001071C                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0001071C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010720 323C 0080                  		move.w	#$80,d1
00010724 0828 0000 0022             		btst	#0,$22(a0)
0001072A 6700                       		beq.s	loc_FFE2
0001072C 4440                       		neg.w	d0
0001072E D041                       		add.w	d1,d0
00010730                            
00010730                            loc_FFE2:
00010730 3228 0032                  		move.w	$32(a0),d1
00010734 9240                       		sub.w	d0,d1
00010736 3141 000C                  		move.w	d1,$C(a0)
0001073A 4E75                       		rts	
0001073C                            ; ===========================================================================
0001073C                            
0001073C                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0001073C 7600                       		moveq	#0,d3
0001073E 1628 0019                  		move.b	$19(a0),d3
00010742 D643                       		add.w	d3,d3
00010744 7208                       		moveq	#8,d1
00010746 0828 0000 0022             		btst	#0,$22(a0)
0001074C 6700                       		beq.s	loc_10004
0001074E 4441                       		neg.w	d1
00010750 4443                       		neg.w	d3
00010752                            
00010752                            loc_10004:
00010752 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010756 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010758 3028 0008                  		move.w	8(a0),d0
0001075C 9068 0030                  		sub.w	$30(a0),d0
00010760 B043                       		cmp.w	d3,d0
00010762 6700                       		beq.s	Obj52_0A_Wait
00010764 D368 0008                  		add.w	d1,8(a0)	; move platform
00010768 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001076E 4E75                       		rts	
00010770                            ; ===========================================================================
00010770                            
00010770                            Obj52_0A_Wait:
00010770 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010774 6600                       		bne.s	locret_1002E	; if time remains, branch
00010776 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001077C                            
0001077C                            locret_1002E:
0001077C 4E75                       		rts	
0001077E                            ; ===========================================================================
0001077E                            
0001077E                            Obj52_0A_Back:
0001077E 3028 0008                  		move.w	8(a0),d0
00010782 9068 0030                  		sub.w	$30(a0),d0
00010786 6700                       		beq.s	Obj52_0A_Reset
00010788 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0001078C 4E75                       		rts	
0001078E                            ; ===========================================================================
0001078E                            
0001078E                            Obj52_0A_Reset:
0001078E 4268 0036                  		clr.w	$36(a0)
00010792 5328 0028                  		subq.b	#1,$28(a0)
00010796 4E75                       		rts	
00010798                            ; ===========================================================================
00010798                            ; ---------------------------------------------------------------------------
00010798                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010798                            ; ---------------------------------------------------------------------------
00010798                            Map_obj52:
00010798                            	include "_maps\obj52mz.asm"
00010798                            ; ---------------------------------------------------------------------------
00010798                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010798                            ; ---------------------------------------------------------------------------
00010798 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0001079C 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000107A0 0000                       		dc.w byte_1008F-Map_obj52
000107A2 01                         byte_10054:	dc.b 1
000107A3 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000107A8 02                         byte_1005A:	dc.b 2
000107A9 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000107AE F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000107B3 04                         byte_10065:	dc.b 4
000107B4 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000107B9 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000107BE F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000107C3 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000107C8 04                         byte_1007A:	dc.b 4
000107C9 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000107CE F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000107D3 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000107D8 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000107DD 03                         byte_1008F:	dc.b 3
000107DE F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000107E3 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000107E8 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000107EE 00                         		even
000107EE 00                         		even
000107EE                            
000107EE                            ; ---------------------------------------------------------------------------
000107EE                            ; Sprite mappings - moving block (LZ)
000107EE                            ; ---------------------------------------------------------------------------
000107EE                            Map_obj52a:
000107EE                            	include "_maps\obj52lz.asm"
000107EE                            ; ---------------------------------------------------------------------------
000107EE                            ; Sprite mappings - moving block (LZ)
000107EE                            ; ---------------------------------------------------------------------------
000107EE 0000                       		dc.w byte_100A2-Map_obj52a
000107F0 01                         byte_100A2:	dc.b 1
000107F1 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000107F6                            		even
000107F6                            		even
000107F6                            
000107F6                            ; ===========================================================================
000107F6                            ; ---------------------------------------------------------------------------
000107F6                            ; Object 55 - Basaran enemy (MZ)
000107F6                            ; ---------------------------------------------------------------------------
000107F6                            
000107F6                            Obj55:					; XREF: Obj_Index
000107F6 7000                       		moveq	#0,d0
000107F8 1028 0024                  		move.b	$24(a0),d0
000107FC 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010800 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010804                            ; ===========================================================================
00010804 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010806 0000                       		dc.w Obj55_Action-Obj55_Index
00010808                            ; ===========================================================================
00010808                            
00010808                            Obj55_Main:				; XREF: Obj55_Index
00010808 5428 0024                  		addq.b	#2,$24(a0)
0001080C 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010814 317C 84B8 0002             		move.w	#$84B8,2(a0)
0001081A 117C 0004 0001             		move.b	#4,1(a0)
00010820 117C 000C 0016             		move.b	#$C,$16(a0)
00010826 117C 0002 0018             		move.b	#2,$18(a0)
0001082C 117C 000B 0020             		move.b	#$B,$20(a0)
00010832 117C 0010 0019             		move.b	#$10,$19(a0)
00010838                            
00010838                            Obj55_Action:				; XREF: Obj55_Index
00010838 7000                       		moveq	#0,d0
0001083A 1028 0025                  		move.b	$25(a0),d0
0001083E 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010842 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010846 43F9 0000 0000             		lea	(Ani_obj55).l,a1
0001084C 6100 A5D0                  		bsr.w	AnimateSprite
00010850 6000 F5B4                  		bra.w	MarkObjGone
00010854                            ; ===========================================================================
00010854 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010856 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010858 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
0001085A 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
0001085C                            ; ===========================================================================
0001085C                            
0001085C                            Obj55_ChkDrop:				; XREF: Obj55_Index2
0001085C 343C 0080                  		move.w	#$80,d2
00010860 6100 0000                  		bsr.w	Obj55_ChkSonic
00010864 6400                       		bcc.s	Obj55_NoDrop
00010866 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001086A 3140 0036                  		move.w	d0,$36(a0)
0001086E 9068 000C                  		sub.w	$C(a0),d0
00010872 6500                       		bcs.s	Obj55_NoDrop
00010874 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010878 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
0001087A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001087E 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010880 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010884 D007                       		add.b	d7,d0
00010886 0200 0007                  		andi.b	#7,d0
0001088A 6600                       		bne.s	Obj55_NoDrop
0001088C 117C 0001 001C             		move.b	#1,$1C(a0)
00010892 5428 0025                  		addq.b	#2,$25(a0)
00010896                            
00010896                            Obj55_NoDrop:
00010896 4E75                       		rts	
00010898                            ; ===========================================================================
00010898                            
00010898                            Obj55_DropFly:				; XREF: Obj55_Index2
00010898 6100 D49E                  		bsr.w	SpeedToPos
0001089C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000108A2 343C 0080                  		move.w	#$80,d2
000108A6 6100 0000                  		bsr.w	Obj55_ChkSonic
000108AA 3028 0036                  		move.w	$36(a0),d0
000108AE 9068 000C                  		sub.w	$C(a0),d0
000108B2 6500                       		bcs.s	Obj55_ChkDel
000108B4 0C40 0010                  		cmpi.w	#$10,d0
000108B8 6400                       		bcc.s	locret_10180
000108BA 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000108BE 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000108C4 117C 0002 001C             		move.b	#2,$1C(a0)
000108CA 5428 0025                  		addq.b	#2,$25(a0)
000108CE                            
000108CE                            locret_10180:
000108CE 4E75                       		rts	
000108D0                            ; ===========================================================================
000108D0                            
000108D0                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000108D0 4A28 0001                  		tst.b	1(a0)
000108D4 6A00 D4C4                  		bpl.w	DeleteObject
000108D8 4E75                       		rts	
000108DA                            ; ===========================================================================
000108DA                            
000108DA                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000108DA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000108DE 0200 000F                  		andi.b	#$F,d0
000108E2 6600                       		bne.s	loc_101A0
000108E4 303C 00C0                  		move.w	#$C0,d0
000108E8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flapping sound
000108EE                            
000108EE                            loc_101A0:
000108EE 6100 D448                  		bsr.w	SpeedToPos
000108F2 3038 D008                  		move.w	($FFFFD008).w,d0
000108F6 9068 0008                  		sub.w	8(a0),d0
000108FA 6400                       		bcc.s	loc_101B0
000108FC 4440                       		neg.w	d0
000108FE                            
000108FE                            loc_101B0:
000108FE 0C40 0080                  		cmpi.w	#$80,d0
00010902 6500                       		bcs.s	locret_101C6
00010904 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010908 D007                       		add.b	d7,d0
0001090A 0200 0007                  		andi.b	#7,d0
0001090E 6600                       		bne.s	locret_101C6
00010910 5428 0025                  		addq.b	#2,$25(a0)
00010914                            
00010914                            locret_101C6:
00010914 4E75                       		rts	
00010916                            ; ===========================================================================
00010916                            
00010916                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010916 6100 D420                  		bsr.w	SpeedToPos
0001091A 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010920 6100 0000                  		bsr.w	ObjHitCeiling
00010924 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010926 6A00                       		bpl.s	locret_101F4	; if not, branch
00010928 9368 000C                  		sub.w	d1,$C(a0)
0001092C 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010932 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010936 4268 0012                  		clr.w	$12(a0)
0001093A 4228 001C                  		clr.b	$1C(a0)
0001093E 4228 0025                  		clr.b	$25(a0)
00010942                            
00010942                            locret_101F4:
00010942 4E75                       		rts	
00010944                            ; ===========================================================================
00010944                            
00010944                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010944 323C 0100                  		move.w	#$100,d1
00010948 08E8 0000 0022             		bset	#0,$22(a0)
0001094E 3038 D008                  		move.w	($FFFFD008).w,d0
00010952 9068 0008                  		sub.w	8(a0),d0
00010956 6400                       		bcc.s	loc_10214
00010958 4440                       		neg.w	d0
0001095A 4441                       		neg.w	d1
0001095C 08A8 0000 0022             		bclr	#0,$22(a0)
00010962                            
00010962                            loc_10214:
00010962 B042                       		cmp.w	d2,d0
00010964 4E75                       		rts	
00010966                            ; ===========================================================================
00010966 6100 D3D0                  		bsr.w	SpeedToPos
0001096A 6100 D3F2                  		bsr.w	DisplaySprite
0001096E 4A28 0001                  		tst.b	1(a0)
00010972 6A00 D426                  		bpl.w	DeleteObject
00010976 4E75                       		rts	
00010978                            ; ===========================================================================
00010978                            Ani_obj55:
00010978                            	include "_anim\obj55.asm"
00010978                            ; ---------------------------------------------------------------------------
00010978                            ; Animation script - Basaran enemy
00010978                            ; ---------------------------------------------------------------------------
00010978 0000                       		dc.w byte_10230-Ani_obj55
0001097A 0000                       		dc.w byte_10234-Ani_obj55
0001097C 0000                       		dc.w byte_10238-Ani_obj55
0001097E 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010982 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010986 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
0001098C                            		even
0001098C                            		even
0001098C                            
0001098C                            ; ---------------------------------------------------------------------------
0001098C                            ; Sprite mappings - Basaran enemy (MZ)
0001098C                            ; ---------------------------------------------------------------------------
0001098C                            Map_obj55:
0001098C                            	include "_maps\obj55.asm"
0001098C                            ; ---------------------------------------------------------------------------
0001098C                            ; Sprite mappings - Basaran enemy (MZ)
0001098C                            ; ---------------------------------------------------------------------------
0001098C 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010990 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010994 01                         byte_10246:	dc.b 1
00010995 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0001099A 03                         byte_1024C:	dc.b 3
0001099B F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000109A0 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000109A5 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000109AA 04                         byte_1025C:	dc.b 4
000109AB F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000109B0 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000109B5 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000109BA 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000109BF 04                         byte_10271:	dc.b 4
000109C0 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000109C5 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000109CA 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000109CF FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000109D4                            		even
000109D4                            		even
000109D4                            
000109D4                            ; ===========================================================================
000109D4                            ; ---------------------------------------------------------------------------
000109D4                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000109D4                            ; ---------------------------------------------------------------------------
000109D4                            
000109D4                            Obj56:					; XREF: Obj_Index
000109D4 7000                       		moveq	#0,d0
000109D6 1028 0024                  		move.b	$24(a0),d0
000109DA 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000109DE 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000109E2                            ; ===========================================================================
000109E2 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000109E4 0000                       		dc.w Obj56_Action-Obj56_Index
000109E6                            
000109E6 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000109E8 2020                       		dc.b  $20, $20
000109EA 1020                       		dc.b  $10, $20
000109EC 201A                       		dc.b  $20, $1A
000109EE 1027                       		dc.b  $10, $27
000109F0 1010                       		dc.b  $10, $10
000109F2 0820                       		dc.b	8, $20
000109F4 4010                       		dc.b  $40, $10
000109F6                            ; ===========================================================================
000109F6                            
000109F6                            Obj56_Main:				; XREF: Obj56_Index
000109F6 5428 0024                  		addq.b	#2,$24(a0)
000109FA 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010A02 317C 4000 0002             		move.w	#$4000,2(a0)
00010A08 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010A0E 6600                       		bne.s	loc_102C8
00010A10 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010A16                            
00010A16                            loc_102C8:
00010A16 117C 0004 0001             		move.b	#4,1(a0)
00010A1C 117C 0003 0018             		move.b	#3,$18(a0)
00010A22 7000                       		moveq	#0,d0
00010A24 1028 0028                  		move.b	$28(a0),d0
00010A28 E648                       		lsr.w	#3,d0
00010A2A 0240 000E                  		andi.w	#$E,d0
00010A2E 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010A32 115A 0019                  		move.b	(a2)+,$19(a0)
00010A36 1152 0016                  		move.b	(a2),$16(a0)
00010A3A E248                       		lsr.w	#1,d0
00010A3C 1140 001A                  		move.b	d0,$1A(a0)
00010A40 3168 0008 0034             		move.w	8(a0),$34(a0)
00010A46 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010A4C 7000                       		moveq	#0,d0
00010A4E 1012                       		move.b	(a2),d0
00010A50 D040                       		add.w	d0,d0
00010A52 3140 003A                  		move.w	d0,$3A(a0)
00010A56 7000                       		moveq	#0,d0
00010A58 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010A5E 6700                       		beq.s	loc_10332
00010A60 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010A64 0240 000F                  		andi.w	#$F,d0
00010A68 5140                       		subq.w	#8,d0
00010A6A 6500                       		bcs.s	loc_10332
00010A6C E548                       		lsl.w	#2,d0
00010A6E 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010A72 45F2 0000                  		lea	(a2,d0.w),a2
00010A76 4A52                       		tst.w	(a2)
00010A78 6A00                       		bpl.s	loc_10332
00010A7A 0868 0000 0022             		bchg	#0,$22(a0)
00010A80                            
00010A80                            loc_10332:
00010A80 1028 0028                  		move.b	$28(a0),d0
00010A84 6A00                       		bpl.s	Obj56_Action
00010A86 0200 000F                  		andi.b	#$F,d0
00010A8A 1140 003C                  		move.b	d0,$3C(a0)
00010A8E 117C 0005 0028             		move.b	#5,$28(a0)
00010A94 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010A9A 6600                       		bne.s	Obj56_ChkGone
00010A9C 117C 000C 0028             		move.b	#$C,$28(a0)
00010AA2 317C 0080 003A             		move.w	#$80,$3A(a0)
00010AA8                            
00010AA8                            Obj56_ChkGone:
00010AA8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010AAC 7000                       		moveq	#0,d0
00010AAE 1028 0023                  		move.b	$23(a0),d0
00010AB2 6700                       		beq.s	Obj56_Action
00010AB4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010ABA 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010AC0 6700                       		beq.s	Obj56_Action
00010AC2 5228 0028                  		addq.b	#1,$28(a0)
00010AC6 4268 003A                  		clr.w	$3A(a0)
00010ACA                            
00010ACA                            Obj56_Action:				; XREF: Obj56_Index
00010ACA 3F28 0008                  		move.w	8(a0),-(sp)
00010ACE 7000                       		moveq	#0,d0
00010AD0 1028 0028                  		move.b	$28(a0),d0	; get object type
00010AD4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010AD8 D040                       		add.w	d0,d0
00010ADA 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010ADE 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010AE2 381F                       		move.w	(sp)+,d4
00010AE4 4A28 0001                  		tst.b	1(a0)
00010AE8 6A00                       		bpl.s	Obj56_ChkDel
00010AEA 7200                       		moveq	#0,d1
00010AEC 1228 0019                  		move.b	$19(a0),d1
00010AF0 0641 000B                  		addi.w	#$B,d1
00010AF4 7400                       		moveq	#0,d2
00010AF6 1428 0016                  		move.b	$16(a0),d2
00010AFA 3602                       		move.w	d2,d3
00010AFC 5243                       		addq.w	#1,d3
00010AFE 6100 F62E                  		bsr.w	SolidObject
00010B02                            
00010B02                            Obj56_ChkDel:
00010B02 3028 0034                  		move.w	$34(a0),d0
00010B06 0240 FF80                  		andi.w	#$FF80,d0
00010B0A 3238 F700                  		move.w	($FFFFF700).w,d1
00010B0E 0441 0080                  		subi.w	#$80,d1
00010B12 0241 FF80                  		andi.w	#$FF80,d1
00010B16 9041                       		sub.w	d1,d0
00010B18 0C40 0280                  		cmpi.w	#$280,d0
00010B1C 6200 D27C                  		bhi.w	DeleteObject
00010B20 6000 D23C                  		bra.w	DisplaySprite
00010B24                            ; ===========================================================================
00010B24 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010B28 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010B2C 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010B30 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010B34 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010B38 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010B3C 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010B40                            ; ===========================================================================
00010B40                            
00010B40                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010B40 4E75                       		rts	
00010B42                            ; ===========================================================================
00010B42                            
00010B42                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010B42 323C 0040                  		move.w	#$40,d1
00010B46 7000                       		moveq	#0,d0
00010B48 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010B4C 6000                       		bra.s	Obj56_Move_LR
00010B4E                            ; ===========================================================================
00010B4E                            
00010B4E                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010B4E 323C 0080                  		move.w	#$80,d1
00010B52 7000                       		moveq	#0,d0
00010B54 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010B58                            
00010B58                            Obj56_Move_LR:
00010B58 0828 0000 0022             		btst	#0,$22(a0)
00010B5E 6700                       		beq.s	loc_10416
00010B60 4440                       		neg.w	d0
00010B62 D041                       		add.w	d1,d0
00010B64                            
00010B64                            loc_10416:
00010B64 3228 0034                  		move.w	$34(a0),d1
00010B68 9240                       		sub.w	d0,d1
00010B6A 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010B6E 4E75                       		rts	
00010B70                            ; ===========================================================================
00010B70                            
00010B70                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010B70 323C 0040                  		move.w	#$40,d1
00010B74 7000                       		moveq	#0,d0
00010B76 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010B7A 6000                       		bra.s	Obj56_Move_UD
00010B7C                            ; ===========================================================================
00010B7C                            
00010B7C                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010B7C 323C 0080                  		move.w	#$80,d1
00010B80 7000                       		moveq	#0,d0
00010B82 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010B86                            
00010B86                            Obj56_Move_UD:
00010B86 0828 0000 0022             		btst	#0,$22(a0)
00010B8C 6700                       		beq.s	loc_10444
00010B8E 4440                       		neg.w	d0
00010B90 D041                       		add.w	d1,d0
00010B92                            
00010B92                            loc_10444:
00010B92 3228 0030                  		move.w	$30(a0),d1
00010B96 9240                       		sub.w	d0,d1
00010B98 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010B9C 4E75                       		rts	
00010B9E                            ; ===========================================================================
00010B9E                            
00010B9E                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010B9E 4A28 0038                  		tst.b	$38(a0)
00010BA2 6600                       		bne.s	loc_104A4
00010BA4 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010BAA 6600                       		bne.s	loc_1047A	; if not, branch
00010BAC 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010BB2 6600                       		bne.s	loc_1047A
00010BB4 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010BB8 3038 D008                  		move.w	($FFFFD008).w,d0
00010BBC B068 0008                  		cmp.w	8(a0),d0
00010BC0 6400                       		bcc.s	loc_1047A
00010BC2 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010BC8                            
00010BC8                            loc_1047A:
00010BC8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010BCC 7000                       		moveq	#0,d0
00010BCE 1028 003C                  		move.b	$3C(a0),d0
00010BD2 0832 0000 0000             		btst	#0,(a2,d0.w)
00010BD8 6700                       		beq.s	loc_104AE
00010BDA 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010BE0 6600                       		bne.s	loc_1049E	; if not, branch
00010BE2 0C00 0003                  		cmpi.b	#3,d0
00010BE6 6600                       		bne.s	loc_1049E
00010BE8 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010BEC                            
00010BEC                            loc_1049E:
00010BEC 117C 0001 0038             		move.b	#1,$38(a0)
00010BF2                            
00010BF2                            loc_104A4:
00010BF2 4A68 003A                  		tst.w	$3A(a0)
00010BF6 6700                       		beq.s	loc_104C8
00010BF8 5568 003A                  		subq.w	#2,$3A(a0)
00010BFC                            
00010BFC                            loc_104AE:
00010BFC 3028 003A                  		move.w	$3A(a0),d0
00010C00 0828 0000 0022             		btst	#0,$22(a0)
00010C06 6700                       		beq.s	loc_104BC
00010C08 4440                       		neg.w	d0
00010C0A                            
00010C0A                            loc_104BC:
00010C0A 3228 0030                  		move.w	$30(a0),d1
00010C0E D240                       		add.w	d0,d1
00010C10 3141 000C                  		move.w	d1,$C(a0)
00010C14 4E75                       		rts	
00010C16                            ; ===========================================================================
00010C16                            
00010C16                            loc_104C8:
00010C16 5228 0028                  		addq.b	#1,$28(a0)
00010C1A 4228 0038                  		clr.b	$38(a0)
00010C1E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C22 7000                       		moveq	#0,d0
00010C24 1028 0023                  		move.b	$23(a0),d0
00010C28 67D2                       		beq.s	loc_104AE
00010C2A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010C30 60CA                       		bra.s	loc_104AE
00010C32                            ; ===========================================================================
00010C32                            
00010C32                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010C32 4A28 0038                  		tst.b	$38(a0)
00010C36 6600                       		bne.s	loc_10500
00010C38 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010C3C 7000                       		moveq	#0,d0
00010C3E 1028 003C                  		move.b	$3C(a0),d0
00010C42 4A32 0000                  		tst.b	(a2,d0.w)
00010C46 6A00                       		bpl.s	loc_10512
00010C48 117C 0001 0038             		move.b	#1,$38(a0)
00010C4E                            
00010C4E                            loc_10500:
00010C4E 7000                       		moveq	#0,d0
00010C50 1028 0016                  		move.b	$16(a0),d0
00010C54 D040                       		add.w	d0,d0
00010C56 B068 003A                  		cmp.w	$3A(a0),d0
00010C5A 6700                       		beq.s	loc_1052C
00010C5C 5468 003A                  		addq.w	#2,$3A(a0)
00010C60                            
00010C60                            loc_10512:
00010C60 3028 003A                  		move.w	$3A(a0),d0
00010C64 0828 0000 0022             		btst	#0,$22(a0)
00010C6A 6700                       		beq.s	loc_10520
00010C6C 4440                       		neg.w	d0
00010C6E                            
00010C6E                            loc_10520:
00010C6E 3228 0030                  		move.w	$30(a0),d1
00010C72 D240                       		add.w	d0,d1
00010C74 3141 000C                  		move.w	d1,$C(a0)
00010C78 4E75                       		rts	
00010C7A                            ; ===========================================================================
00010C7A                            
00010C7A                            loc_1052C:
00010C7A 5328 0028                  		subq.b	#1,$28(a0)
00010C7E 4228 0038                  		clr.b	$38(a0)
00010C82 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C86 7000                       		moveq	#0,d0
00010C88 1028 0023                  		move.b	$23(a0),d0
00010C8C 67D2                       		beq.s	loc_10512
00010C8E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010C94 60CA                       		bra.s	loc_10512
00010C96                            ; ===========================================================================
00010C96                            
00010C96                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010C96 4A28 0038                  		tst.b	$38(a0)
00010C9A 6600                       		bne.s	loc_1055E
00010C9C 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010CA0 6700                       		beq.s	locret_10578
00010CA2 117C 0001 0038             		move.b	#1,$38(a0)
00010CA8 4268 003A                  		clr.w	$3A(a0)
00010CAC                            
00010CAC                            loc_1055E:
00010CAC 5268 0008                  		addq.w	#1,8(a0)
00010CB0 3168 0008 0034             		move.w	8(a0),$34(a0)
00010CB6 5268 003A                  		addq.w	#1,$3A(a0)
00010CBA 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010CC0 6600                       		bne.s	locret_10578
00010CC2 4228 0028                  		clr.b	$28(a0)
00010CC6                            
00010CC6                            locret_10578:
00010CC6 4E75                       		rts	
00010CC8                            ; ===========================================================================
00010CC8                            
00010CC8                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010CC8 4A28 0038                  		tst.b	$38(a0)
00010CCC 6600                       		bne.s	loc_10598
00010CCE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010CD2 7000                       		moveq	#0,d0
00010CD4 1028 003C                  		move.b	$3C(a0),d0
00010CD8 0832 0000 0000             		btst	#0,(a2,d0.w)
00010CDE 6700                       		beq.s	loc_105A2
00010CE0 117C 0001 0038             		move.b	#1,$38(a0)
00010CE6                            
00010CE6                            loc_10598:
00010CE6 4A68 003A                  		tst.w	$3A(a0)
00010CEA 6700                       		beq.s	loc_105C0
00010CEC 5568 003A                  		subq.w	#2,$3A(a0)
00010CF0                            
00010CF0                            loc_105A2:
00010CF0 3028 003A                  		move.w	$3A(a0),d0
00010CF4 0828 0000 0022             		btst	#0,$22(a0)
00010CFA 6700                       		beq.s	loc_105B4
00010CFC 4440                       		neg.w	d0
00010CFE 0640 0080                  		addi.w	#$80,d0
00010D02                            
00010D02                            loc_105B4:
00010D02 3228 0034                  		move.w	$34(a0),d1
00010D06 D240                       		add.w	d0,d1
00010D08 3141 0008                  		move.w	d1,8(a0)
00010D0C 4E75                       		rts	
00010D0E                            ; ===========================================================================
00010D0E                            
00010D0E                            loc_105C0:
00010D0E 5228 0028                  		addq.b	#1,$28(a0)
00010D12 4228 0038                  		clr.b	$38(a0)
00010D16 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D1A 7000                       		moveq	#0,d0
00010D1C 1028 0023                  		move.b	$23(a0),d0
00010D20 67CE                       		beq.s	loc_105A2
00010D22 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010D28 60C6                       		bra.s	loc_105A2
00010D2A                            ; ===========================================================================
00010D2A                            
00010D2A                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010D2A 4A28 0038                  		tst.b	$38(a0)
00010D2E 6600                       		bne.s	loc_105F8
00010D30 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D34 7000                       		moveq	#0,d0
00010D36 1028 003C                  		move.b	$3C(a0),d0
00010D3A 4A32 0000                  		tst.b	(a2,d0.w)
00010D3E 6A00                       		bpl.s	loc_10606
00010D40 117C 0001 0038             		move.b	#1,$38(a0)
00010D46                            
00010D46                            loc_105F8:
00010D46 303C 0080                  		move.w	#$80,d0
00010D4A B068 003A                  		cmp.w	$3A(a0),d0
00010D4E 6700                       		beq.s	loc_10624
00010D50 5468 003A                  		addq.w	#2,$3A(a0)
00010D54                            
00010D54                            loc_10606:
00010D54 3028 003A                  		move.w	$3A(a0),d0
00010D58 0828 0000 0022             		btst	#0,$22(a0)
00010D5E 6700                       		beq.s	loc_10618
00010D60 4440                       		neg.w	d0
00010D62 0640 0080                  		addi.w	#$80,d0
00010D66                            
00010D66                            loc_10618:
00010D66 3228 0034                  		move.w	$34(a0),d1
00010D6A D240                       		add.w	d0,d1
00010D6C 3141 0008                  		move.w	d1,8(a0)
00010D70 4E75                       		rts	
00010D72                            ; ===========================================================================
00010D72                            
00010D72                            loc_10624:
00010D72 5328 0028                  		subq.b	#1,$28(a0)
00010D76 4228 0038                  		clr.b	$38(a0)
00010D7A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D7E 7000                       		moveq	#0,d0
00010D80 1028 0023                  		move.b	$23(a0),d0
00010D84 67CE                       		beq.s	loc_10606
00010D86 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010D8C 60C6                       		bra.s	loc_10606
00010D8E                            ; ===========================================================================
00010D8E                            
00010D8E                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010D8E 323C 0010                  		move.w	#$10,d1
00010D92 7000                       		moveq	#0,d0
00010D94 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010D98 E248                       		lsr.w	#1,d0
00010D9A 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010D9E 6000                       		bra.s	Obj56_Move_Sqr
00010DA0                            ; ===========================================================================
00010DA0                            
00010DA0                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010DA0 323C 0030                  		move.w	#$30,d1
00010DA4 7000                       		moveq	#0,d0
00010DA6 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010DAA 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010DAE 6000                       		bra.s	Obj56_Move_Sqr
00010DB0                            ; ===========================================================================
00010DB0                            
00010DB0                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010DB0 323C 0050                  		move.w	#$50,d1
00010DB4 7000                       		moveq	#0,d0
00010DB6 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010DBA 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010DBE 6000                       		bra.s	Obj56_Move_Sqr
00010DC0                            ; ===========================================================================
00010DC0                            
00010DC0                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010DC0 323C 0070                  		move.w	#$70,d1
00010DC4 7000                       		moveq	#0,d0
00010DC6 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010DCA 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010DCE                            
00010DCE                            Obj56_Move_Sqr:
00010DCE 4A43                       		tst.w	d3
00010DD0 6600                       		bne.s	loc_1068E
00010DD2 5228 0022                  		addq.b	#1,$22(a0)
00010DD6 0228 0003 0022             		andi.b	#3,$22(a0)
00010DDC                            
00010DDC                            loc_1068E:
00010DDC 1428 0022                  		move.b	$22(a0),d2
00010DE0 0202 0003                  		andi.b	#3,d2
00010DE4 6600                       		bne.s	loc_106AE
00010DE6 9041                       		sub.w	d1,d0
00010DE8 D068 0034                  		add.w	$34(a0),d0
00010DEC 3140 0008                  		move.w	d0,8(a0)
00010DF0 4441                       		neg.w	d1
00010DF2 D268 0030                  		add.w	$30(a0),d1
00010DF6 3141 000C                  		move.w	d1,$C(a0)
00010DFA 4E75                       		rts	
00010DFC                            ; ===========================================================================
00010DFC                            
00010DFC                            loc_106AE:
00010DFC 5302                       		subq.b	#1,d2
00010DFE 6600                       		bne.s	loc_106CC
00010E00 5341                       		subq.w	#1,d1
00010E02 9041                       		sub.w	d1,d0
00010E04 4440                       		neg.w	d0
00010E06 D068 0030                  		add.w	$30(a0),d0
00010E0A 3140 000C                  		move.w	d0,$C(a0)
00010E0E 5241                       		addq.w	#1,d1
00010E10 D268 0034                  		add.w	$34(a0),d1
00010E14 3141 0008                  		move.w	d1,8(a0)
00010E18 4E75                       		rts	
00010E1A                            ; ===========================================================================
00010E1A                            
00010E1A                            loc_106CC:
00010E1A 5302                       		subq.b	#1,d2
00010E1C 6600                       		bne.s	loc_106EA
00010E1E 5341                       		subq.w	#1,d1
00010E20 9041                       		sub.w	d1,d0
00010E22 4440                       		neg.w	d0
00010E24 D068 0034                  		add.w	$34(a0),d0
00010E28 3140 0008                  		move.w	d0,8(a0)
00010E2C 5241                       		addq.w	#1,d1
00010E2E D268 0030                  		add.w	$30(a0),d1
00010E32 3141 000C                  		move.w	d1,$C(a0)
00010E36 4E75                       		rts	
00010E38                            ; ===========================================================================
00010E38                            
00010E38                            loc_106EA:
00010E38 9041                       		sub.w	d1,d0
00010E3A D068 0030                  		add.w	$30(a0),d0
00010E3E 3140 000C                  		move.w	d0,$C(a0)
00010E42 4441                       		neg.w	d1
00010E44 D268 0034                  		add.w	$34(a0),d1
00010E48 3141 0008                  		move.w	d1,8(a0)
00010E4C 4E75                       		rts	
00010E4E                            ; ===========================================================================
00010E4E                            ; ---------------------------------------------------------------------------
00010E4E                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010E4E                            ; ---------------------------------------------------------------------------
00010E4E                            Map_obj56:
00010E4E                            	include "_maps\obj56.asm"
00010E4E                            ; ---------------------------------------------------------------------------
00010E4E                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010E4E                            ; ---------------------------------------------------------------------------
00010E4E 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010E52 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010E56 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010E5A 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010E5E 01                         byte_10710:	dc.b 1
00010E5F F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010E64 04                         byte_10716:	dc.b 4
00010E65 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010E6A E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010E6F 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010E74 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010E79 02                         byte_1072B:	dc.b 2
00010E7A E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010E7F 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010E84 04                         byte_10736:	dc.b 4
00010E85 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010E8A E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010E8F 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010E94 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010E99 03                         byte_1074B:	dc.b 3
00010E9A D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010E9F F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010EA4 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010EA9 01                         byte_1075B:	dc.b 1
00010EAA F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010EAF 02                         byte_10761:	dc.b 2
00010EB0 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010EB5 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010EBA 04                         byte_1076C:	dc.b 4
00010EBB F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010EC0 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010EC5 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010ECA F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010ED0 00                         		even
00010ED0 00                         		even
00010ED0                            
00010ED0                            ; ===========================================================================
00010ED0                            ; ---------------------------------------------------------------------------
00010ED0                            ; Object 57 - spiked balls (SYZ, LZ)
00010ED0                            ; ---------------------------------------------------------------------------
00010ED0                            
00010ED0                            Obj57:					; XREF: Obj_Index
00010ED0 7000                       		moveq	#0,d0
00010ED2 1028 0024                  		move.b	$24(a0),d0
00010ED6 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010EDA 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010EDE                            ; ===========================================================================
00010EDE 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010EE0 0000                       		dc.w Obj57_Move-Obj57_Index
00010EE2 0000                       		dc.w Obj57_Display-Obj57_Index
00010EE4                            ; ===========================================================================
00010EE4                            
00010EE4                            Obj57_Main:				; XREF: Obj57_Index
00010EE4 5428 0024                  		addq.b	#2,$24(a0)
00010EE8 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010EF0 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010EF6 117C 0004 0001             		move.b	#4,1(a0)
00010EFC 117C 0004 0018             		move.b	#4,$18(a0)
00010F02 117C 0008 0019             		move.b	#8,$19(a0)
00010F08 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F0E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F14 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010F1A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F20 6600                       		bne.s	loc_107E8
00010F22 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010F28 317C 0310 0002             		move.w	#$310,2(a0)
00010F2E 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010F36                            
00010F36                            loc_107E8:
00010F36 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F3A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010F3E 4881                       		ext.w	d1
00010F40 E741                       		asl.w	#3,d1		; multiply by 8
00010F42 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010F46 1028 0022                  		move.b	$22(a0),d0
00010F4A E418                       		ror.b	#2,d0
00010F4C 0200 00C0                  		andi.b	#-$40,d0
00010F50 1140 0026                  		move.b	d0,$26(a0)
00010F54 45E8 0029                  		lea	$29(a0),a2
00010F58 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F5C 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010F60 14FC 0000                  		move.b	#0,(a2)+
00010F64 3601                       		move.w	d1,d3
00010F66 E94B                       		lsl.w	#4,d3
00010F68 1143 003C                  		move.b	d3,$3C(a0)
00010F6C 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010F6E 6500                       		bcs.s	loc_10894
00010F70 0828 0003 0028             		btst	#3,$28(a0)
00010F76 6700                       		beq.s	Obj57_MakeChain
00010F78 5341                       		subq.w	#1,d1
00010F7A 6500                       		bcs.s	loc_10894
00010F7C                            
00010F7C                            Obj57_MakeChain:
00010F7C 6100 D266                  		bsr.w	SingleObjLoad
00010F80 6600                       		bne.s	loc_10894
00010F82 5228 0029                  		addq.b	#1,$29(a0)
00010F86 3A09                       		move.w	a1,d5
00010F88 0445 D000                  		subi.w	#-$3000,d5
00010F8C EC4D                       		lsr.w	#6,d5
00010F8E 0245 007F                  		andi.w	#$7F,d5
00010F92 14C5                       		move.b	d5,(a2)+
00010F94 137C 0004 0024             		move.b	#4,$24(a1)
00010F9A 1290                       		move.b	0(a0),0(a1)
00010F9C 2368 0004 0004             		move.l	4(a0),4(a1)
00010FA2 3368 0002 0002             		move.w	2(a0),2(a1)
00010FA8 1368 0001 0001             		move.b	1(a0),1(a1)
00010FAE 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010FB4 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010FBA 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010FC0 0403 0010                  		subi.b	#$10,d3
00010FC4 1343 003C                  		move.b	d3,$3C(a1)
00010FC8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010FCE 6600                       		bne.s	loc_10890
00010FD0 4A03                       		tst.b	d3
00010FD2 6600                       		bne.s	loc_10890
00010FD4 137C 0002 001A             		move.b	#2,$1A(a1)
00010FDA                            
00010FDA                            loc_10890:
00010FDA 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010FDE                            
00010FDE                            loc_10894:
00010FDE 3A08                       		move.w	a0,d5
00010FE0 0445 D000                  		subi.w	#-$3000,d5
00010FE4 EC4D                       		lsr.w	#6,d5
00010FE6 0245 007F                  		andi.w	#$7F,d5
00010FEA 14C5                       		move.b	d5,(a2)+
00010FEC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010FF2 6600                       		bne.s	Obj57_Move
00010FF4 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010FFA 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00011000                            
00011000                            Obj57_Move:				; XREF: Obj57_Index
00011000 6100 0000                  		bsr.w	Obj57_MoveSub
00011004 6000 0000                  		bra.w	Obj57_ChkDel
00011008                            ; ===========================================================================
00011008                            
00011008                            Obj57_MoveSub:				; XREF: Obj57_Move
00011008 3028 003E                  		move.w	$3E(a0),d0
0001100C D168 0026                  		add.w	d0,$26(a0)
00011010 1028 0026                  		move.b	$26(a0),d0
00011014 4EB9 0000 2C64             		jsr	(CalcSine).l
0001101A 3428 0038                  		move.w	$38(a0),d2
0001101E 3628 003A                  		move.w	$3A(a0),d3
00011022 45E8 0029                  		lea	$29(a0),a2
00011026 7C00                       		moveq	#0,d6
00011028 1C1A                       		move.b	(a2)+,d6
0001102A                            
0001102A                            Obj57_MoveLoop:
0001102A 7800                       		moveq	#0,d4
0001102C 181A                       		move.b	(a2)+,d4
0001102E ED4C                       		lsl.w	#6,d4
00011030 0684 00FF D000             		addi.l	#$FFD000,d4
00011036 2244                       		movea.l	d4,a1
00011038 7800                       		moveq	#0,d4
0001103A 1829 003C                  		move.b	$3C(a1),d4
0001103E 2A04                       		move.l	d4,d5
00011040 C9C0                       		muls.w	d0,d4
00011042 E084                       		asr.l	#8,d4
00011044 CBC1                       		muls.w	d1,d5
00011046 E085                       		asr.l	#8,d5
00011048 D842                       		add.w	d2,d4
0001104A DA43                       		add.w	d3,d5
0001104C 3344 000C                  		move.w	d4,$C(a1)
00011050 3345 0008                  		move.w	d5,8(a1)
00011054 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011058 4E75                       		rts	
0001105A                            ; ===========================================================================
0001105A                            
0001105A                            Obj57_ChkDel:				; XREF: Obj57_Move
0001105A 3028 003A                  		move.w	$3A(a0),d0
0001105E 0240 FF80                  		andi.w	#$FF80,d0
00011062 3238 F700                  		move.w	($FFFFF700).w,d1
00011066 0441 0080                  		subi.w	#$80,d1
0001106A 0241 FF80                  		andi.w	#$FF80,d1
0001106E 9041                       		sub.w	d1,d0
00011070 0C40 0280                  		cmpi.w	#$280,d0
00011074 6200 0000                  		bhi.w	Obj57_Delete
00011078 6000 CCE4                  		bra.w	DisplaySprite
0001107C                            ; ===========================================================================
0001107C                            
0001107C                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001107C 7400                       		moveq	#0,d2
0001107E 45E8 0029                  		lea	$29(a0),a2
00011082 141A                       		move.b	(a2)+,d2
00011084                            
00011084                            Obj57_DelLoop:
00011084 7000                       		moveq	#0,d0
00011086 101A                       		move.b	(a2)+,d0
00011088 ED48                       		lsl.w	#6,d0
0001108A 0680 00FF D000             		addi.l	#$FFD000,d0
00011090 2240                       		movea.l	d0,a1
00011092 6100 CD08                  		bsr.w	DeleteObject2
00011096 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001109A                            
0001109A 4E75                       		rts	
0001109C                            ; ===========================================================================
0001109C                            
0001109C                            Obj57_Display:				; XREF: Obj57_Index
0001109C 6000 CCC0                  		bra.w	DisplaySprite
000110A0                            ; ===========================================================================
000110A0                            ; ---------------------------------------------------------------------------
000110A0                            ; Sprite mappings - chain of spiked balls (SYZ)
000110A0                            ; ---------------------------------------------------------------------------
000110A0                            Map_obj57:
000110A0                            	include "_maps\obj57syz.asm"
000110A0                            ; ---------------------------------------------------------------------------
000110A0                            ; Sprite mappings - chain of spiked balls (SYZ)
000110A0                            ; ---------------------------------------------------------------------------
000110A0 0000                       		dc.w byte_10958-Map_obj57
000110A2 01                         byte_10958:	dc.b 1
000110A3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000110A8                            		even
000110A8                            		even
000110A8                            
000110A8                            ; ---------------------------------------------------------------------------
000110A8                            ; Sprite mappings - spiked ball	on a chain (LZ)
000110A8                            ; ---------------------------------------------------------------------------
000110A8                            Map_obj57a:
000110A8                            	include "_maps\obj57lz.asm"
000110A8                            ; ---------------------------------------------------------------------------
000110A8                            ; Sprite mappings - spiked ball	on a chain (LZ)
000110A8                            ; ---------------------------------------------------------------------------
000110A8 0000                       		dc.w byte_10964-Map_obj57a
000110AA 0000                       		dc.w byte_1096A-Map_obj57a
000110AC 0000                       		dc.w byte_10970-Map_obj57a
000110AE 01                         byte_10964:	dc.b 1
000110AF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000110B4 01                         byte_1096A:	dc.b 1
000110B5 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000110BA 01                         byte_10970:	dc.b 1
000110BB F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000110C0                            		even
000110C0                            		even
000110C0                            
000110C0                            ; ===========================================================================
000110C0                            ; ---------------------------------------------------------------------------
000110C0                            ; Object 58 - giant spiked balls (SYZ)
000110C0                            ; ---------------------------------------------------------------------------
000110C0                            
000110C0                            Obj58:					; XREF: Obj_Index
000110C0 7000                       		moveq	#0,d0
000110C2 1028 0024                  		move.b	$24(a0),d0
000110C6 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000110CA 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000110CE                            ; ===========================================================================
000110CE 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000110D0 0000                       		dc.w Obj58_Move-Obj58_Index
000110D2                            ; ===========================================================================
000110D2                            
000110D2                            Obj58_Main:				; XREF: Obj58_Index
000110D2 5428 0024                  		addq.b	#2,$24(a0)
000110D6 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000110DE 317C 0396 0002             		move.w	#$396,2(a0)
000110E4 117C 0004 0001             		move.b	#4,1(a0)
000110EA 117C 0004 0018             		move.b	#4,$18(a0)
000110F0 117C 0018 0019             		move.b	#$18,$19(a0)
000110F6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000110FC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011102 117C 0086 0020             		move.b	#$86,$20(a0)
00011108 1228 0028                  		move.b	$28(a0),d1	; get object type
0001110C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011110 4881                       		ext.w	d1
00011112 E741                       		asl.w	#3,d1		; multiply by 8
00011114 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011118 1028 0022                  		move.b	$22(a0),d0
0001111C E418                       		ror.b	#2,d0
0001111E 0200 00C0                  		andi.b	#$C0,d0
00011122 1140 0026                  		move.b	d0,$26(a0)
00011126 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
0001112C                            
0001112C                            Obj58_Move:				; XREF: Obj58_Index
0001112C 7000                       		moveq	#0,d0
0001112E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011132 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011136 D040                       		add.w	d0,d0
00011138 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
0001113C 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011140 3028 003A                  		move.w	$3A(a0),d0
00011144 0240 FF80                  		andi.w	#$FF80,d0
00011148 3238 F700                  		move.w	($FFFFF700).w,d1
0001114C 0441 0080                  		subi.w	#$80,d1
00011150 0241 FF80                  		andi.w	#$FF80,d1
00011154 9041                       		sub.w	d1,d0
00011156 0C40 0280                  		cmpi.w	#$280,d0
0001115A 6200 CC3E                  		bhi.w	DeleteObject
0001115E 6000 CBFE                  		bra.w	DisplaySprite
00011162                            ; ===========================================================================
00011162 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011164 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011166 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011168 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001116A                            ; ===========================================================================
0001116A                            
0001116A                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001116A 4E75                       		rts	
0001116C                            ; ===========================================================================
0001116C                            
0001116C                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001116C 323C 0060                  		move.w	#$60,d1
00011170 7000                       		moveq	#0,d0
00011172 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011176 0828 0000 0022             		btst	#0,$22(a0)
0001117C 6700                       		beq.s	loc_10A38
0001117E 4440                       		neg.w	d0
00011180 D041                       		add.w	d1,d0
00011182                            
00011182                            loc_10A38:
00011182 3228 003A                  		move.w	$3A(a0),d1
00011186 9240                       		sub.w	d0,d1
00011188 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001118C 4E75                       		rts	
0001118E                            ; ===========================================================================
0001118E                            
0001118E                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001118E 323C 0060                  		move.w	#$60,d1
00011192 7000                       		moveq	#0,d0
00011194 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011198 0828 0000 0022             		btst	#0,$22(a0)
0001119E 6700                       		beq.s	loc_10A5C
000111A0 4440                       		neg.w	d0
000111A2 0640 0080                  		addi.w	#$80,d0
000111A6                            
000111A6                            loc_10A5C:
000111A6 3228 0038                  		move.w	$38(a0),d1
000111AA 9240                       		sub.w	d0,d1
000111AC 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000111B0 4E75                       		rts	
000111B2                            ; ===========================================================================
000111B2                            
000111B2                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000111B2 3028 003E                  		move.w	$3E(a0),d0
000111B6 D168 0026                  		add.w	d0,$26(a0)
000111BA 1028 0026                  		move.b	$26(a0),d0
000111BE 4EB9 0000 2C64             		jsr	(CalcSine).l
000111C4 3428 0038                  		move.w	$38(a0),d2
000111C8 3628 003A                  		move.w	$3A(a0),d3
000111CC 7800                       		moveq	#0,d4
000111CE 1828 003C                  		move.b	$3C(a0),d4
000111D2 2A04                       		move.l	d4,d5
000111D4 C9C0                       		muls.w	d0,d4
000111D6 E084                       		asr.l	#8,d4
000111D8 CBC1                       		muls.w	d1,d5
000111DA E085                       		asr.l	#8,d5
000111DC D842                       		add.w	d2,d4
000111DE DA43                       		add.w	d3,d5
000111E0 3144 000C                  		move.w	d4,$C(a0)
000111E4 3145 0008                  		move.w	d5,8(a0)
000111E8 4E75                       		rts	
000111EA                            ; ===========================================================================
000111EA                            ; ---------------------------------------------------------------------------
000111EA                            ; Sprite mappings - SBZ	spiked ball on a chain
000111EA                            ; ---------------------------------------------------------------------------
000111EA                            Map_obj15b:
000111EA                            	include "_maps\obj15sbz.asm"
000111EA                            ; ---------------------------------------------------------------------------
000111EA                            ; Sprite mappings - spiked ball on a chain (SBZ)
000111EA                            ; ---------------------------------------------------------------------------
000111EA 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000111EE 0000                       		dc.w byte_10AC6-Map_obj15b
000111F0 05                         byte_10AA6:	dc.b 5
000111F1 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000111F6 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000111FB F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011200 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011205 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001120A 01                         byte_10AC0:	dc.b 1
0001120B F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011210 02                         byte_10AC6:	dc.b 2
00011211 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011216 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001121C 00                         		even
0001121C 00                         		even
0001121C                            
0001121C                            ; ===========================================================================
0001121C                            ; ---------------------------------------------------------------------------
0001121C                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001121C                            ; ---------------------------------------------------------------------------
0001121C                            
0001121C                            Obj59:					; XREF: Obj_Index
0001121C 7000                       		moveq	#0,d0
0001121E 1028 0024                  		move.b	$24(a0),d0
00011222 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011226 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001122A 3028 0032                  		move.w	$32(a0),d0
0001122E 0240 FF80                  		andi.w	#$FF80,d0
00011232 3238 F700                  		move.w	($FFFFF700).w,d1
00011236 0441 0080                  		subi.w	#$80,d1
0001123A 0241 FF80                  		andi.w	#$FF80,d1
0001123E 9041                       		sub.w	d1,d0
00011240 0C40 0280                  		cmpi.w	#$280,d0
00011244 6200 CB54                  		bhi.w	DeleteObject
00011248 6000 CB14                  		bra.w	DisplaySprite
0001124C                            ; ===========================================================================
0001124C 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001124E 0000                       		dc.w Obj59_Platform-Obj59_Index
00011250 0000                       		dc.w Obj59_Action-Obj59_Index
00011252 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011254                            
00011254 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011256                            
00011256 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011258 2001                       		dc.b $20, 1
0001125A 3401                       		dc.b $34, 1
0001125C 1003                       		dc.b $10, 3
0001125E 2003                       		dc.b $20, 3
00011260 3403                       		dc.b $34, 3
00011262 1401                       		dc.b $14, 1
00011264 2401                       		dc.b $24, 1
00011266 2C01                       		dc.b $2C, 1
00011268 1403                       		dc.b $14, 3
0001126A 2403                       		dc.b $24, 3
0001126C 2C03                       		dc.b $2C, 3
0001126E 2005                       		dc.b $20, 5
00011270 2007                       		dc.b $20, 7
00011272 3009                       		dc.b $30, 9
00011274                            ; ===========================================================================
00011274                            
00011274                            Obj59_Main:				; XREF: Obj59_Index
00011274 5428 0024                  		addq.b	#2,$24(a0)
00011278 7000                       		moveq	#0,d0
0001127A 1028 0028                  		move.b	$28(a0),d0
0001127E 6A00                       		bpl.s	Obj59_Main2
00011280 5828 0024                  		addq.b	#4,$24(a0)
00011284 0240 007F                  		andi.w	#$7F,d0
00011288 C0FC 0006                  		mulu.w	#6,d0
0001128C 3140 003C                  		move.w	d0,$3C(a0)
00011290 3140 003E                  		move.w	d0,$3E(a0)
00011294 588F                       		addq.l	#4,sp
00011296 4E75                       		rts	
00011298                            ; ===========================================================================
00011298                            
00011298                            Obj59_Main2:
00011298 E648                       		lsr.w	#3,d0
0001129A 0240 001E                  		andi.w	#$1E,d0
0001129E 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000112A2 115A 0019                  		move.b	(a2)+,$19(a0)
000112A6 115A 001A                  		move.b	(a2)+,$1A(a0)
000112AA 7000                       		moveq	#0,d0
000112AC 1028 0028                  		move.b	$28(a0),d0
000112B0 D040                       		add.w	d0,d0
000112B2 0240 001E                  		andi.w	#$1E,d0
000112B6 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000112BA 101A                       		move.b	(a2)+,d0
000112BC E548                       		lsl.w	#2,d0
000112BE 3140 003C                  		move.w	d0,$3C(a0)
000112C2 115A 0028                  		move.b	(a2)+,$28(a0)
000112C6 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000112CE 317C 4000 0002             		move.w	#$4000,2(a0)
000112D4 117C 0004 0001             		move.b	#4,1(a0)
000112DA 117C 0004 0018             		move.b	#4,$18(a0)
000112E0 3168 0008 0032             		move.w	8(a0),$32(a0)
000112E6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000112EC                            
000112EC                            Obj59_Platform:				; XREF: Obj59_Index
000112EC 7200                       		moveq	#0,d1
000112EE 1228 0019                  		move.b	$19(a0),d1
000112F2 4EB9 0000 79E8             		jsr	(PlatformObject).l
000112F8 6000 0000                  		bra.w	Obj59_Types
000112FC                            ; ===========================================================================
000112FC                            
000112FC                            Obj59_Action:				; XREF: Obj59_Index
000112FC 7200                       		moveq	#0,d1
000112FE 1228 0019                  		move.b	$19(a0),d1
00011302 4EB9 0000 7B5C             		jsr	(ExitPlatform).l
00011308 3F28 0008                  		move.w	8(a0),-(sp)
0001130C 6100 0000                  		bsr.w	Obj59_Types
00011310 341F                       		move.w	(sp)+,d2
00011312 4A10                       		tst.b	0(a0)
00011314 6700                       		beq.s	locret_10BD4
00011316 4EF9 0000 80C6             		jmp	(MvSonicOnPtfm2).l
0001131C                            ; ===========================================================================
0001131C                            
0001131C                            locret_10BD4:
0001131C 4E75                       		rts	
0001131E                            ; ===========================================================================
0001131E                            
0001131E                            Obj59_Types:
0001131E 7000                       		moveq	#0,d0
00011320 1028 0028                  		move.b	$28(a0),d0
00011324 0240 000F                  		andi.w	#$F,d0
00011328 D040                       		add.w	d0,d0
0001132A 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001132E 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011332                            ; ===========================================================================
00011332 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011336 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001133A 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001133E 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011342 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011346                            ; ===========================================================================
00011346                            
00011346                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011346 4E75                       		rts	
00011348                            ; ===========================================================================
00011348                            
00011348                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011348 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0001134E 6600                       		bne.s	locret_10C0C
00011350 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011354                            
00011354                            locret_10C0C:
00011354 4E75                       		rts	
00011356                            ; ===========================================================================
00011356                            
00011356                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011356 6100 0000                  		bsr.w	Obj59_Move
0001135A 3028 0034                  		move.w	$34(a0),d0
0001135E 4440                       		neg.w	d0
00011360 D068 0030                  		add.w	$30(a0),d0
00011364 3140 000C                  		move.w	d0,$C(a0)
00011368 4E75                       		rts	
0001136A                            ; ===========================================================================
0001136A                            
0001136A                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001136A 6100 0000                  		bsr.w	Obj59_Move
0001136E 3028 0034                  		move.w	$34(a0),d0
00011372 D068 0030                  		add.w	$30(a0),d0
00011376 3140 000C                  		move.w	d0,$C(a0)
0001137A 4E75                       		rts	
0001137C                            ; ===========================================================================
0001137C                            
0001137C                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001137C 6100 0000                  		bsr.w	Obj59_Move
00011380 3028 0034                  		move.w	$34(a0),d0
00011384 E240                       		asr.w	#1,d0
00011386 4440                       		neg.w	d0
00011388 D068 0030                  		add.w	$30(a0),d0
0001138C 3140 000C                  		move.w	d0,$C(a0)
00011390 3028 0034                  		move.w	$34(a0),d0
00011394 D068 0032                  		add.w	$32(a0),d0
00011398 3140 0008                  		move.w	d0,8(a0)
0001139C 4E75                       		rts	
0001139E                            ; ===========================================================================
0001139E                            
0001139E                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001139E 6100 0000                  		bsr.w	Obj59_Move
000113A2 3028 0034                  		move.w	$34(a0),d0
000113A6 E240                       		asr.w	#1,d0
000113A8 D068 0030                  		add.w	$30(a0),d0
000113AC 3140 000C                  		move.w	d0,$C(a0)
000113B0 3028 0034                  		move.w	$34(a0),d0
000113B4 4440                       		neg.w	d0
000113B6 D068 0032                  		add.w	$32(a0),d0
000113BA 3140 0008                  		move.w	d0,8(a0)
000113BE 4E75                       		rts	
000113C0                            ; ===========================================================================
000113C0                            
000113C0                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000113C0 6100 0000                  		bsr.w	Obj59_Move
000113C4 3028 0034                  		move.w	$34(a0),d0
000113C8 4440                       		neg.w	d0
000113CA D068 0030                  		add.w	$30(a0),d0
000113CE 3140 000C                  		move.w	d0,$C(a0)
000113D2 4A28 0028                  		tst.b	$28(a0)
000113D6 6700 0000                  		beq.w	loc_10C94
000113DA 4E75                       		rts	
000113DC                            ; ===========================================================================
000113DC                            
000113DC                            loc_10C94:
000113DC 0828 0003 0022             		btst	#3,$22(a0)
000113E2 6700                       		beq.s	Obj59_Delete
000113E4 08E9 0001 0022             		bset	#1,$22(a1)
000113EA 08A9 0003 0022             		bclr	#3,$22(a1)
000113F0 137C 0002 0024             		move.b	#2,$24(a1)
000113F6                            
000113F6                            Obj59_Delete:
000113F6 6000 C9A2                  		bra.w	DeleteObject
000113FA                            
000113FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000113FA                            
000113FA                            
000113FA                            Obj59_Move:				; XREF: Obj59_Type02; et al
000113FA 3028 0038                  		move.w	$38(a0),d0
000113FE 4A28 003A                  		tst.b	$3A(a0)
00011402 6600                       		bne.s	loc_10CC8
00011404 0C40 0800                  		cmpi.w	#$800,d0
00011408 6400                       		bcc.s	loc_10CD0
0001140A 0640 0010                  		addi.w	#$10,d0
0001140E 6000                       		bra.s	loc_10CD0
00011410                            ; ===========================================================================
00011410                            
00011410                            loc_10CC8:
00011410 4A40                       		tst.w	d0
00011412 6700                       		beq.s	loc_10CD0
00011414 0440 0010                  		subi.w	#$10,d0
00011418                            
00011418                            loc_10CD0:
00011418 3140 0038                  		move.w	d0,$38(a0)
0001141C 48C0                       		ext.l	d0
0001141E E180                       		asl.l	#8,d0
00011420 D0A8 0034                  		add.l	$34(a0),d0
00011424 2140 0034                  		move.l	d0,$34(a0)
00011428 4840                       		swap	d0
0001142A 3428 003C                  		move.w	$3C(a0),d2
0001142E B042                       		cmp.w	d2,d0
00011430 6300                       		bls.s	loc_10CF0
00011432 117C 0001 003A             		move.b	#1,$3A(a0)
00011438                            
00011438                            loc_10CF0:
00011438 D442                       		add.w	d2,d2
0001143A B042                       		cmp.w	d2,d0
0001143C 6600                       		bne.s	locret_10CFA
0001143E 4228 0028                  		clr.b	$28(a0)
00011442                            
00011442                            locret_10CFA:
00011442 4E75                       		rts	
00011444                            ; End of function Obj59_Move
00011444                            
00011444                            ; ===========================================================================
00011444                            
00011444                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011444 5368 003C                  		subq.w	#1,$3C(a0)
00011448 6600                       		bne.s	Obj59_ChkDel
0001144A 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011450 6100 CD92                  		bsr.w	SingleObjLoad
00011454 6600                       		bne.s	Obj59_ChkDel
00011456 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001145A 3368 0008 0008             		move.w	8(a0),8(a1)
00011460 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011466 137C 000E 0028             		move.b	#$E,$28(a1)
0001146C                            
0001146C                            Obj59_ChkDel:
0001146C 588F                       		addq.l	#4,sp
0001146E 3028 0008                  		move.w	8(a0),d0
00011472 0240 FF80                  		andi.w	#$FF80,d0
00011476 3238 F700                  		move.w	($FFFFF700).w,d1
0001147A 0441 0080                  		subi.w	#$80,d1
0001147E 0241 FF80                  		andi.w	#$FF80,d1
00011482 9041                       		sub.w	d1,d0
00011484 0C40 0280                  		cmpi.w	#$280,d0
00011488 6200 C910                  		bhi.w	DeleteObject
0001148C 4E75                       		rts	
0001148E                            ; ===========================================================================
0001148E                            ; ---------------------------------------------------------------------------
0001148E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001148E                            ; ---------------------------------------------------------------------------
0001148E                            Map_obj59:
0001148E                            	include "_maps\obj59.asm"
0001148E                            ; ---------------------------------------------------------------------------
0001148E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001148E                            ; ---------------------------------------------------------------------------
0001148E 0000                       		dc.w byte_10D4A-Map_obj59
00011490 03                         byte_10D4A:	dc.b 3
00011491 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011496 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001149B F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000114A0                            		even
000114A0                            		even
000114A0                            
000114A0                            ; ===========================================================================
000114A0                            ; ---------------------------------------------------------------------------
000114A0                            ; Object 5A - platforms	moving in circles (SLZ)
000114A0                            ; ---------------------------------------------------------------------------
000114A0                            
000114A0                            Obj5A:					; XREF: Obj_Index
000114A0 7000                       		moveq	#0,d0
000114A2 1028 0024                  		move.b	$24(a0),d0
000114A6 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000114AA 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000114AE 3028 0032                  		move.w	$32(a0),d0
000114B2 0240 FF80                  		andi.w	#$FF80,d0
000114B6 3238 F700                  		move.w	($FFFFF700).w,d1
000114BA 0441 0080                  		subi.w	#$80,d1
000114BE 0241 FF80                  		andi.w	#$FF80,d1
000114C2 9041                       		sub.w	d1,d0
000114C4 0C40 0280                  		cmpi.w	#$280,d0
000114C8 6200 C8D0                  		bhi.w	DeleteObject
000114CC 6000 C890                  		bra.w	DisplaySprite
000114D0                            ; ===========================================================================
000114D0 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000114D2 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000114D4 0000                       		dc.w Obj5A_Action-Obj5A_Index
000114D6                            ; ===========================================================================
000114D6                            
000114D6                            Obj5A_Main:				; XREF: Obj5A_Index
000114D6 5428 0024                  		addq.b	#2,$24(a0)
000114DA 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000114E2 317C 4000 0002             		move.w	#$4000,2(a0)
000114E8 117C 0004 0001             		move.b	#4,1(a0)
000114EE 117C 0004 0018             		move.b	#4,$18(a0)
000114F4 117C 0018 0019             		move.b	#$18,$19(a0)
000114FA 3168 0008 0032             		move.w	8(a0),$32(a0)
00011500 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011506                            
00011506                            Obj5A_Platform:				; XREF: Obj5A_Index
00011506 7200                       		moveq	#0,d1
00011508 1228 0019                  		move.b	$19(a0),d1
0001150C 4EB9 0000 79E8             		jsr	(PlatformObject).l
00011512 6000 0000                  		bra.w	Obj5A_Types
00011516                            ; ===========================================================================
00011516                            
00011516                            Obj5A_Action:				; XREF: Obj5A_Index
00011516 7200                       		moveq	#0,d1
00011518 1228 0019                  		move.b	$19(a0),d1
0001151C 4EB9 0000 7B5C             		jsr	(ExitPlatform).l
00011522 3F28 0008                  		move.w	8(a0),-(sp)
00011526 6100 0000                  		bsr.w	Obj5A_Types
0001152A 341F                       		move.w	(sp)+,d2
0001152C 4EF9 0000 80C6             		jmp	(MvSonicOnPtfm2).l
00011532                            ; ===========================================================================
00011532                            
00011532                            Obj5A_Types:
00011532 7000                       		moveq	#0,d0
00011534 1028 0028                  		move.b	$28(a0),d0
00011538 0240 000C                  		andi.w	#$C,d0
0001153C E248                       		lsr.w	#1,d0
0001153E 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011542 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011546                            ; ===========================================================================
00011546 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011548 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001154A                            ; ===========================================================================
0001154A                            
0001154A                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001154A 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001154E 0401 0050                  		subi.b	#$50,d1
00011552 4881                       		ext.w	d1
00011554 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011558 0402 0050                  		subi.b	#$50,d2
0001155C 4882                       		ext.w	d2
0001155E 0828 0000 0028             		btst	#0,$28(a0)
00011564 6700                       		beq.s	loc_10E24
00011566 4441                       		neg.w	d1
00011568 4442                       		neg.w	d2
0001156A                            
0001156A                            loc_10E24:
0001156A 0828 0001 0028             		btst	#1,$28(a0)
00011570 6700                       		beq.s	loc_10E30
00011572 4441                       		neg.w	d1
00011574 C342                       		exg	d1,d2
00011576                            
00011576                            loc_10E30:
00011576 D268 0032                  		add.w	$32(a0),d1
0001157A 3141 0008                  		move.w	d1,8(a0)
0001157E D468 0030                  		add.w	$30(a0),d2
00011582 3142 000C                  		move.w	d2,$C(a0)
00011586 4E75                       		rts	
00011588                            ; ===========================================================================
00011588                            
00011588                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011588 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001158C 0401 0050                  		subi.b	#$50,d1
00011590 4881                       		ext.w	d1
00011592 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011596 0402 0050                  		subi.b	#$50,d2
0001159A 4882                       		ext.w	d2
0001159C 0828 0000 0028             		btst	#0,$28(a0)
000115A2 6700                       		beq.s	loc_10E62
000115A4 4441                       		neg.w	d1
000115A6 4442                       		neg.w	d2
000115A8                            
000115A8                            loc_10E62:
000115A8 0828 0001 0028             		btst	#1,$28(a0)
000115AE 6700                       		beq.s	loc_10E6E
000115B0 4441                       		neg.w	d1
000115B2 C342                       		exg	d1,d2
000115B4                            
000115B4                            loc_10E6E:
000115B4 4441                       		neg.w	d1
000115B6 D268 0032                  		add.w	$32(a0),d1
000115BA 3141 0008                  		move.w	d1,8(a0)
000115BE D468 0030                  		add.w	$30(a0),d2
000115C2 3142 000C                  		move.w	d2,$C(a0)
000115C6 4E75                       		rts	
000115C8                            ; ===========================================================================
000115C8                            ; ---------------------------------------------------------------------------
000115C8                            ; Sprite mappings - platforms that move	in circles (SLZ)
000115C8                            ; ---------------------------------------------------------------------------
000115C8                            Map_obj5A:
000115C8                            	include "_maps\obj5A.asm"
000115C8                            ; ---------------------------------------------------------------------------
000115C8                            ; Sprite mappings - platforms that move	in circles (SLZ)
000115C8                            ; ---------------------------------------------------------------------------
000115C8 0000                       		dc.w byte_10E84-Map_obj5A
000115CA 02                         byte_10E84:	dc.b 2
000115CB F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000115D0 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000115D6 00                         		even
000115D6 00                         		even
000115D6                            
000115D6                            ; ===========================================================================
000115D6                            ; ---------------------------------------------------------------------------
000115D6                            ; Object 5B - blocks that form a staircase (SLZ)
000115D6                            ; ---------------------------------------------------------------------------
000115D6                            
000115D6                            Obj5B:					; XREF: Obj_Index
000115D6 7000                       		moveq	#0,d0
000115D8 1028 0024                  		move.b	$24(a0),d0
000115DC 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000115E0 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000115E4 3028 0030                  		move.w	$30(a0),d0
000115E8 0240 FF80                  		andi.w	#$FF80,d0
000115EC 3238 F700                  		move.w	($FFFFF700).w,d1
000115F0 0441 0080                  		subi.w	#$80,d1
000115F4 0241 FF80                  		andi.w	#$FF80,d1
000115F8 9041                       		sub.w	d1,d0
000115FA 0C40 0280                  		cmpi.w	#$280,d0
000115FE 6200 C79A                  		bhi.w	DeleteObject
00011602 6000 C75A                  		bra.w	DisplaySprite
00011606                            ; ===========================================================================
00011606 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011608 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001160A 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001160C                            ; ===========================================================================
0001160C                            
0001160C                            Obj5B_Main:				; XREF: Obj5B_Index
0001160C 5428 0024                  		addq.b	#2,$24(a0)
00011610 7638                       		moveq	#$38,d3
00011612 7801                       		moveq	#1,d4
00011614 0828 0000 0022             		btst	#0,$22(a0)
0001161A 6700                       		beq.s	loc_10EDA
0001161C 763B                       		moveq	#$3B,d3
0001161E 78FF                       		moveq	#-1,d4
00011620                            
00011620                            loc_10EDA:
00011620 3428 0008                  		move.w	8(a0),d2
00011624 2248                       		movea.l	a0,a1
00011626 7203                       		moveq	#3,d1
00011628 6000                       		bra.s	Obj5B_MakeBlocks
0001162A                            ; ===========================================================================
0001162A                            
0001162A                            Obj5B_Loop:
0001162A 6100 CBCE                  		bsr.w	SingleObjLoad2
0001162E 6600 0000                  		bne.w	Obj5B_Move
00011632 137C 0004 0024             		move.b	#4,$24(a1)
00011638                            
00011638                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011638 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
0001163C 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011644 337C 4000 0002             		move.w	#$4000,2(a1)
0001164A 137C 0004 0001             		move.b	#4,1(a1)
00011650 137C 0003 0018             		move.b	#3,$18(a1)
00011656 137C 0010 0019             		move.b	#$10,$19(a1)
0001165C 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011662 3342 0008                  		move.w	d2,8(a1)
00011666 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001166C 3368 0008 0030             		move.w	8(a0),$30(a1)
00011672 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011678 0642 0020                  		addi.w	#$20,d2
0001167C 1343 0037                  		move.b	d3,$37(a1)
00011680 2348 003C                  		move.l	a0,$3C(a1)
00011684 D604                       		add.b	d4,d3
00011686 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001168A                            
0001168A                            Obj5B_Move:				; XREF: Obj5B_Index
0001168A 7000                       		moveq	#0,d0
0001168C 1028 0028                  		move.b	$28(a0),d0
00011690 0240 0007                  		andi.w	#7,d0
00011694 D040                       		add.w	d0,d0
00011696 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001169A 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001169E                            
0001169E                            Obj5B_Solid:				; XREF: Obj5B_Index
0001169E 2468 003C                  		movea.l	$3C(a0),a2
000116A2 7000                       		moveq	#0,d0
000116A4 1028 0037                  		move.b	$37(a0),d0
000116A8 1032 0000                  		move.b	(a2,d0.w),d0
000116AC D068 0032                  		add.w	$32(a0),d0
000116B0 3140 000C                  		move.w	d0,$C(a0)
000116B4 7200                       		moveq	#0,d1
000116B6 1228 0019                  		move.b	$19(a0),d1
000116BA 0641 000B                  		addi.w	#$B,d1
000116BE 343C 0010                  		move.w	#$10,d2
000116C2 363C 0011                  		move.w	#$11,d3
000116C6 3828 0008                  		move.w	8(a0),d4
000116CA 6100 EA62                  		bsr.w	SolidObject
000116CE 4A04                       		tst.b	d4
000116D0 6A00                       		bpl.s	loc_10F92
000116D2 1544 0036                  		move.b	d4,$36(a2)
000116D6                            
000116D6                            loc_10F92:
000116D6 0828 0003 0022             		btst	#3,$22(a0)
000116DC 6700                       		beq.s	locret_10FA0
000116DE 157C 0001 0036             		move.b	#1,$36(a2)
000116E4                            
000116E4                            locret_10FA0:
000116E4 4E75                       		rts	
000116E6                            ; ===========================================================================
000116E6 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000116E8 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000116EA 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000116EC 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000116EE                            ; ===========================================================================
000116EE                            
000116EE                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000116EE 4A68 0034                  		tst.w	$34(a0)
000116F2 6600                       		bne.s	loc_10FC0
000116F4 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000116FA 6600                       		bne.s	locret_10FBE
000116FC 317C 001E 0034             		move.w	#$1E,$34(a0)
00011702                            
00011702                            locret_10FBE:
00011702 4E75                       		rts	
00011704                            ; ===========================================================================
00011704                            
00011704                            loc_10FC0:
00011704 5368 0034                  		subq.w	#1,$34(a0)
00011708 66F8                       		bne.s	locret_10FBE
0001170A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001170E 4E75                       		rts	
00011710                            ; ===========================================================================
00011710                            
00011710                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011710 4A68 0034                  		tst.w	$34(a0)
00011714 6600                       		bne.s	loc_10FE0
00011716 4A28 0036                  		tst.b	$36(a0)
0001171A 6A00                       		bpl.s	locret_10FDE
0001171C 317C 003C 0034             		move.w	#$3C,$34(a0)
00011722                            
00011722                            locret_10FDE:
00011722 4E75                       		rts	
00011724                            ; ===========================================================================
00011724                            
00011724                            loc_10FE0:
00011724 5368 0034                  		subq.w	#1,$34(a0)
00011728 6600                       		bne.s	loc_10FEC
0001172A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001172E 4E75                       		rts	
00011730                            ; ===========================================================================
00011730                            
00011730                            loc_10FEC:
00011730 43E8 0038                  		lea	$38(a0),a1
00011734 3028 0034                  		move.w	$34(a0),d0
00011738 E408                       		lsr.b	#2,d0
0001173A 0200 0001                  		andi.b	#1,d0
0001173E 12C0                       		move.b	d0,(a1)+
00011740 0A00 0001                  		eori.b	#1,d0
00011744 12C0                       		move.b	d0,(a1)+
00011746 0A00 0001                  		eori.b	#1,d0
0001174A 12C0                       		move.b	d0,(a1)+
0001174C 0A00 0001                  		eori.b	#1,d0
00011750 12C0                       		move.b	d0,(a1)+
00011752 4E75                       		rts	
00011754                            ; ===========================================================================
00011754                            
00011754                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011754 43E8 0038                  		lea	$38(a0),a1
00011758 0C11 0080                  		cmpi.b	#$80,(a1)
0001175C 6700                       		beq.s	locret_11038
0001175E 5211                       		addq.b	#1,(a1)
00011760 7200                       		moveq	#0,d1
00011762 1219                       		move.b	(a1)+,d1
00011764 4841                       		swap	d1
00011766 E289                       		lsr.l	#1,d1
00011768 2401                       		move.l	d1,d2
0001176A E289                       		lsr.l	#1,d1
0001176C 2601                       		move.l	d1,d3
0001176E D682                       		add.l	d2,d3
00011770 4841                       		swap	d1
00011772 4842                       		swap	d2
00011774 4843                       		swap	d3
00011776 12C3                       		move.b	d3,(a1)+
00011778 12C2                       		move.b	d2,(a1)+
0001177A 12C1                       		move.b	d1,(a1)+
0001177C                            
0001177C                            locret_11038:
0001177C 4E75                       		rts	
0001177E 4E75                       		rts	
00011780                            ; ===========================================================================
00011780                            ; ---------------------------------------------------------------------------
00011780                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011780                            ; ---------------------------------------------------------------------------
00011780                            Map_obj5B:
00011780                            	include "_maps\obj5B.asm"
00011780                            ; ---------------------------------------------------------------------------
00011780                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011780                            ; ---------------------------------------------------------------------------
00011780 0000                       		dc.w byte_1103E-Map_obj5B
00011782 01                         byte_1103E:	dc.b 1
00011783 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011788                            		even
00011788                            		even
00011788                            
00011788                            ; ===========================================================================
00011788                            ; ---------------------------------------------------------------------------
00011788                            ; Object 5C - metal girders in foreground (SLZ)
00011788                            ; ---------------------------------------------------------------------------
00011788                            
00011788                            Obj5C:					; XREF: Obj_Index
00011788 7000                       		moveq	#0,d0
0001178A 1028 0024                  		move.b	$24(a0),d0
0001178E 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011792 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011796                            ; ===========================================================================
00011796 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011798 0000                       		dc.w Obj5C_Display-Obj5C_Index
0001179A                            ; ===========================================================================
0001179A                            
0001179A                            Obj5C_Main:				; XREF: Obj5C_Index
0001179A 5428 0024                  		addq.b	#2,$24(a0)
0001179E 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000117A6 317C 83CC 0002             		move.w	#$83CC,2(a0)
000117AC 117C 0010 0019             		move.b	#$10,$19(a0)
000117B2                            
000117B2                            Obj5C_Display:				; XREF: Obj5C_Index
000117B2 2238 F700                  		move.l	($FFFFF700).w,d1
000117B6 D281                       		add.l	d1,d1
000117B8 4841                       		swap	d1
000117BA 4441                       		neg.w	d1
000117BC 3141 0008                  		move.w	d1,8(a0)
000117C0 2238 F704                  		move.l	($FFFFF704).w,d1
000117C4 D281                       		add.l	d1,d1
000117C6 4841                       		swap	d1
000117C8 0241 003F                  		andi.w	#$3F,d1
000117CC 4441                       		neg.w	d1
000117CE 0641 0100                  		addi.w	#$100,d1
000117D2 3141 000A                  		move.w	d1,$A(a0)
000117D6 6000 C586                  		bra.w	DisplaySprite
000117DA                            ; ===========================================================================
000117DA                            ; ---------------------------------------------------------------------------
000117DA                            ; Sprite mappings - metal girders in foreground	(SLZ)
000117DA                            ; ---------------------------------------------------------------------------
000117DA                            Map_obj5C:
000117DA                            	include "_maps\obj5C.asm"
000117DA                            ; ---------------------------------------------------------------------------
000117DA                            ; Sprite mappings - metal girders in foreground	(SLZ)
000117DA                            ; ---------------------------------------------------------------------------
000117DA 0000                       		dc.w byte_11098-Map_obj5C
000117DC 09                         byte_11098:	dc.b 9
000117DD 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000117E2 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000117E7 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000117EC E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000117F1 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000117F6 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000117FB 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011800 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011805 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001180A                            		even
0001180A                            		even
0001180A                            
0001180A                            ; ===========================================================================
0001180A                            ; ---------------------------------------------------------------------------
0001180A                            ; Object 1B - water surface (LZ)
0001180A                            ; ---------------------------------------------------------------------------
0001180A                            
0001180A                            Obj1B:					; XREF: Obj_Index
0001180A 7000                       		moveq	#0,d0
0001180C 1028 0024                  		move.b	$24(a0),d0
00011810 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011814 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011818                            ; ===========================================================================
00011818 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001181A 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001181C                            ; ===========================================================================
0001181C                            
0001181C                            Obj1B_Main:				; XREF: Obj1B_Index
0001181C 5428 0024                  		addq.b	#2,$24(a0)
00011820 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011828 317C C300 0002             		move.w	#$C300,2(a0)
0001182E 117C 0004 0001             		move.b	#4,1(a0)
00011834 117C 0080 0019             		move.b	#$80,$19(a0)
0001183A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011840                            
00011840                            Obj1B_Action:				; XREF: Obj1B_Index
00011840 3238 F700                  		move.w	($FFFFF700).w,d1
00011844 0241 FFE0                  		andi.w	#$FFE0,d1
00011848 D268 0030                  		add.w	$30(a0),d1
0001184C 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011852 6700                       		beq.s	loc_11114
00011854 0641 0020                  		addi.w	#$20,d1
00011858                            
00011858                            loc_11114:
00011858 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
0001185C 3238 F646                  		move.w	($FFFFF646).w,d1
00011860 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011864 4A28 0032                  		tst.b	$32(a0)
00011868 6600                       		bne.s	Obj1B_Animate
0001186A 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011870 6700                       		beq.s	loc_1114A	; if not, branch
00011872 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011876 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
0001187C 6000                       		bra.s	Obj1B_Display
0001187E                            ; ===========================================================================
0001187E                            
0001187E                            Obj1B_Animate:				; XREF: loc_11114
0001187E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011882 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011884 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001188A 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
0001188E                            
0001188E                            loc_1114A:				; XREF: loc_11114
0001188E 5328 001E                  		subq.b	#1,$1E(a0)
00011892 6A00                       		bpl.s	Obj1B_Display
00011894 117C 0007 001E             		move.b	#7,$1E(a0)
0001189A 5228 001A                  		addq.b	#1,$1A(a0)
0001189E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000118A4 6500                       		bcs.s	Obj1B_Display
000118A6 117C 0000 001A             		move.b	#0,$1A(a0)
000118AC                            
000118AC                            Obj1B_Display:
000118AC 6000 C4B0                  		bra.w	DisplaySprite
000118B0                            ; ===========================================================================
000118B0                            ; ---------------------------------------------------------------------------
000118B0                            ; Sprite mappings - water surface (LZ)
000118B0                            ; ---------------------------------------------------------------------------
000118B0                            Map_obj1B:
000118B0                            	include "_maps\obj1B.asm"
000118B0                            ; ---------------------------------------------------------------------------
000118B0                            ; Sprite mappings - water surface (LZ)
000118B0                            ; ---------------------------------------------------------------------------
000118B0 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000118B4 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000118B8 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000118BC 03                         byte_11178:	dc.b 3
000118BD FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000118C2 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000118C7 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000118CC 03                         byte_11188:	dc.b 3
000118CD FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000118D2 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000118D7 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000118DC 03                         byte_11198:	dc.b 3
000118DD FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000118E2 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000118E7 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000118EC 06                         byte_111A8:	dc.b 6
000118ED FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000118F2 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000118F7 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000118FC FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011901 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011906 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001190B 06                         byte_111C7:	dc.b 6
0001190C FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011911 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011916 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001191B FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011920 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011925 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001192A 06                         byte_111E6:	dc.b 6
0001192B FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011930 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011935 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001193A FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
0001193F FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011944 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
0001194A 00                         		even
0001194A 00                         		even
0001194A                            
0001194A                            ; ===========================================================================
0001194A                            ; ---------------------------------------------------------------------------
0001194A                            ; Object 0B - pole that	breaks (LZ)
0001194A                            ; ---------------------------------------------------------------------------
0001194A                            
0001194A                            Obj0B:					; XREF: Obj_Index
0001194A 7000                       		moveq	#0,d0
0001194C 1028 0024                  		move.b	$24(a0),d0
00011950 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011954 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011958                            ; ===========================================================================
00011958 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
0001195A 0000                       		dc.w Obj0B_Action-Obj0B_Index
0001195C 0000                       		dc.w Obj0B_Display-Obj0B_Index
0001195E                            ; ===========================================================================
0001195E                            
0001195E                            Obj0B_Main:				; XREF: Obj0B_Index
0001195E 5428 0024                  		addq.b	#2,$24(a0)
00011962 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
0001196A 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011970 117C 0004 0001             		move.b	#4,1(a0)
00011976 117C 0008 0019             		move.b	#8,$19(a0)
0001197C 117C 0004 0018             		move.b	#4,$18(a0)
00011982 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011988 7000                       		moveq	#0,d0
0001198A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001198E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011992 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011996                            
00011996                            Obj0B_Action:				; XREF: Obj0B_Index
00011996 4A28 0032                  		tst.b	$32(a0)
0001199A 6700                       		beq.s	Obj0B_Grab
0001199C 4A68 0030                  		tst.w	$30(a0)
000119A0 6700                       		beq.s	Obj0B_MoveUp
000119A2 5368 0030                  		subq.w	#1,$30(a0)
000119A6 6600                       		bne.s	Obj0B_MoveUp
000119A8 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000119AE 6000                       		bra.s	Obj0B_Release
000119B0                            ; ===========================================================================
000119B0                            
000119B0                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000119B0 43F8 D000                  		lea	($FFFFD000).w,a1
000119B4 3028 000C                  		move.w	$C(a0),d0
000119B8 0440 0018                  		subi.w	#$18,d0
000119BC 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000119C2 6700                       		beq.s	Obj0B_MoveDown
000119C4 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000119C8 B069 000C                  		cmp.w	$C(a1),d0
000119CC 6500                       		bcs.s	Obj0B_MoveDown
000119CE 3340 000C                  		move.w	d0,$C(a1)
000119D2                            
000119D2                            Obj0B_MoveDown:
000119D2 0640 0024                  		addi.w	#$24,d0
000119D6 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000119DC 6700                       		beq.s	Obj0B_LetGo
000119DE 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000119E2 B069 000C                  		cmp.w	$C(a1),d0
000119E6 6400                       		bcc.s	Obj0B_LetGo
000119E8 3340 000C                  		move.w	d0,$C(a1)
000119EC                            
000119EC                            Obj0B_LetGo:
000119EC 1038 F603                  		move.b	($FFFFF603).w,d0
000119F0 0240 0070                  		andi.w	#$70,d0
000119F4 6700                       		beq.s	Obj0B_Display
000119F6                            
000119F6                            Obj0B_Release:				; XREF: Obj0B_Action
000119F6 4228 0020                  		clr.b	$20(a0)
000119FA 5428 0024                  		addq.b	#2,$24(a0)
000119FE 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011A02 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011A06 4228 0032                  		clr.b	$32(a0)
00011A0A 6000                       		bra.s	Obj0B_Display
00011A0C                            ; ===========================================================================
00011A0C                            
00011A0C                            Obj0B_Grab:				; XREF: Obj0B_Action
00011A0C 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011A10 6700                       		beq.s	Obj0B_Display	; if not, branch
00011A12 43F8 D000                  		lea	($FFFFD000).w,a1
00011A16 3028 0008                  		move.w	8(a0),d0
00011A1A 0640 0014                  		addi.w	#$14,d0
00011A1E B069 0008                  		cmp.w	8(a1),d0
00011A22 6400                       		bcc.s	Obj0B_Display
00011A24 4228 0021                  		clr.b	$21(a0)
00011A28 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011A2E 6400                       		bcc.s	Obj0B_Display
00011A30 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011A34 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011A38 3028 0008                  		move.w	8(a0),d0
00011A3C 0640 0014                  		addi.w	#$14,d0
00011A40 3340 0008                  		move.w	d0,8(a1)
00011A44 08A9 0000 0022             		bclr	#0,$22(a1)
00011A4A 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011A50 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011A56 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011A5C 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011A62                            
00011A62                            Obj0B_Display:				; XREF: Obj0B_Index
00011A62 6000 E3A2                  		bra.w	MarkObjGone
00011A66                            ; ===========================================================================
00011A66                            ; ---------------------------------------------------------------------------
00011A66                            ; Sprite mappings - pole that breaks (LZ)
00011A66                            ; ---------------------------------------------------------------------------
00011A66                            Map_obj0B:
00011A66                            	include "_maps\obj0B.asm"
00011A66                            ; ---------------------------------------------------------------------------
00011A66                            ; Sprite mappings - pole that breaks (LZ)
00011A66                            ; ---------------------------------------------------------------------------
00011A66 0000                       		dc.w byte_11326-Map_obj0B
00011A68 0000                       		dc.w byte_11331-Map_obj0B
00011A6A 02                         byte_11326:	dc.b 2			; normal pole
00011A6B E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011A70 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011A75 04                         byte_11331:	dc.b 4			; broken pole
00011A76 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011A7B F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011A80 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011A85 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011A8A                            		even
00011A8A                            		even
00011A8A                            
00011A8A                            ; ===========================================================================
00011A8A                            ; ---------------------------------------------------------------------------
00011A8A                            ; Object 0C - flapping door (LZ)
00011A8A                            ; ---------------------------------------------------------------------------
00011A8A                            
00011A8A                            Obj0C:					; XREF: Obj_Index
00011A8A 7000                       		moveq	#0,d0
00011A8C 1028 0024                  		move.b	$24(a0),d0
00011A90 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011A94 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011A98                            ; ===========================================================================
00011A98 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011A9A 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011A9C                            ; ===========================================================================
00011A9C                            
00011A9C                            Obj0C_Main:				; XREF: Obj0C_Index
00011A9C 5428 0024                  		addq.b	#2,$24(a0)
00011AA0 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011AA8 317C 4328 0002             		move.w	#$4328,2(a0)
00011AAE 0028 0004 0001             		ori.b	#4,1(a0)
00011AB4 117C 0028 0019             		move.b	#$28,$19(a0)
00011ABA 7000                       		moveq	#0,d0
00011ABC 1028 0028                  		move.b	$28(a0),d0	; get object type
00011AC0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011AC4 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011AC8                            
00011AC8                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011AC8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011ACC 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011ACE 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011AD4 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011ADA 4A28 0001                  		tst.b	1(a0)
00011ADE 6A00                       		bpl.s	Obj0C_Solid
00011AE0 303C 00BB                  		move.w	#$BB,d0
00011AE4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00011AEA                            
00011AEA                            Obj0C_Solid:
00011AEA 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011AF0 6100 932C                  		bsr.w	AnimateSprite
00011AF4 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011AF8 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011AFC 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011AFE 3038 D008                  		move.w	($FFFFD008).w,d0
00011B02 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011B06 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011B08 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011B0E 323C 0013                  		move.w	#$13,d1
00011B12 343C 0020                  		move.w	#$20,d2
00011B16 3602                       		move.w	d2,d3
00011B18 5243                       		addq.w	#1,d3
00011B1A 3828 0008                  		move.w	8(a0),d4
00011B1E 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011B22                            
00011B22                            Obj0C_Display:
00011B22 6000 E2E2                  		bra.w	MarkObjGone
00011B26                            ; ===========================================================================
00011B26                            Ani_obj0C:
00011B26                            	include "_anim\obj0C.asm"
00011B26                            ; ---------------------------------------------------------------------------
00011B26                            ; Animation script - flapping door (LZ)
00011B26                            ; ---------------------------------------------------------------------------
00011B26 0000                       		dc.w byte_113E6-Ani_obj0C
00011B28 0000                       		dc.w byte_113EC-Ani_obj0C
00011B2A 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011B30 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011B36                            		even
00011B36                            		even
00011B36                            
00011B36                            ; ---------------------------------------------------------------------------
00011B36                            ; Sprite mappings - flapping door (LZ)
00011B36                            ; ---------------------------------------------------------------------------
00011B36                            Map_obj0C:
00011B36                            	include "_maps\obj0C.asm"
00011B36                            ; ---------------------------------------------------------------------------
00011B36                            ; Sprite mappings - flapping door (LZ)
00011B36                            ; ---------------------------------------------------------------------------
00011B36 0000                       		dc.w byte_113F8-Map_obj0C
00011B38 0000                       		dc.w byte_11403-Map_obj0C
00011B3A 0000                       		dc.w byte_1140E-Map_obj0C
00011B3C 02                         byte_113F8:	dc.b 2
00011B3D E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011B42 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011B47 02                         byte_11403:	dc.b 2
00011B48 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011B4D 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011B52 02                         byte_1140E:	dc.b 2
00011B53 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011B58 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011B5E 00                         		even
00011B5E 00                         		even
00011B5E                            
00011B5E                            ; ===========================================================================
00011B5E                            ; ---------------------------------------------------------------------------
00011B5E                            ; Object 71 - invisible	solid blocks
00011B5E                            ; ---------------------------------------------------------------------------
00011B5E                            
00011B5E                            Obj71:					; XREF: Obj_Index
00011B5E 7000                       		moveq	#0,d0
00011B60 1028 0024                  		move.b	$24(a0),d0
00011B64 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011B68 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011B6C                            ; ===========================================================================
00011B6C 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011B6E 0000                       		dc.w Obj71_Solid-Obj71_Index
00011B70                            ; ===========================================================================
00011B70                            
00011B70                            Obj71_Main:				; XREF: Obj71_Index
00011B70 5428 0024                  		addq.b	#2,$24(a0)
00011B74 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011B7C 317C 8680 0002             		move.w	#$8680,2(a0)
00011B82 0028 0004 0001             		ori.b	#4,1(a0)
00011B88 1028 0028                  		move.b	$28(a0),d0	; get object type
00011B8C 1200                       		move.b	d0,d1
00011B8E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011B92 0640 0010                  		addi.w	#$10,d0
00011B96 E248                       		lsr.w	#1,d0
00011B98 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011B9C 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011BA0 5241                       		addq.w	#1,d1
00011BA2 E749                       		lsl.w	#3,d1
00011BA4 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011BA8                            
00011BA8                            Obj71_Solid:				; XREF: Obj71_Index
00011BA8 6100 C42E                  		bsr.w	ChkObjOnScreen
00011BAC 6600                       		bne.s	Obj71_ChkDel
00011BAE 7200                       		moveq	#0,d1
00011BB0 1228 0019                  		move.b	$19(a0),d1
00011BB4 0641 000B                  		addi.w	#$B,d1
00011BB8 7400                       		moveq	#0,d2
00011BBA 1428 0016                  		move.b	$16(a0),d2
00011BBE 3602                       		move.w	d2,d3
00011BC0 5243                       		addq.w	#1,d3
00011BC2 3828 0008                  		move.w	8(a0),d4
00011BC6 6100 E5A8                  		bsr.w	SolidObject71
00011BCA                            
00011BCA                            Obj71_ChkDel:
00011BCA 3028 0008                  		move.w	8(a0),d0
00011BCE 0240 FF80                  		andi.w	#$FF80,d0
00011BD2 3238 F700                  		move.w	($FFFFF700).w,d1
00011BD6 0441 0080                  		subi.w	#$80,d1
00011BDA 0241 FF80                  		andi.w	#$FF80,d1
00011BDE 9041                       		sub.w	d1,d0
00011BE0 0C40 0280                  		cmpi.w	#$280,d0
00011BE4 6200                       		bhi.s	Obj71_Delete
00011BE6 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011BEA 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011BEC 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011BF0                            ; ===========================================================================
00011BF0                            
00011BF0                            Obj71_NoDisplay:
00011BF0 4E75                       		rts	
00011BF2                            ; ===========================================================================
00011BF2                            
00011BF2                            Obj71_Delete:
00011BF2 4EFA C1A6                  		jmp	DeleteObject
00011BF6                            ; ===========================================================================
00011BF6                            ; ---------------------------------------------------------------------------
00011BF6                            ; Sprite mappings - invisible solid blocks
00011BF6                            ; ---------------------------------------------------------------------------
00011BF6                            Map_obj71:
00011BF6                            	include "_maps\obj71.asm"
00011BF6                            ; ---------------------------------------------------------------------------
00011BF6                            ; Sprite mappings - invisible solid blocks
00011BF6                            ; ---------------------------------------------------------------------------
00011BF6 0000                       		dc.w byte_114BC-Map_obj71
00011BF8 0000                       		dc.w byte_114D1-Map_obj71
00011BFA 0000                       		dc.w byte_114E6-Map_obj71
00011BFC 04                         byte_114BC:	dc.b 4
00011BFD F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011C02 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011C07 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011C0C 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011C11 04                         byte_114D1:	dc.b 4
00011C12 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011C17 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011C1C 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011C21 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011C26 04                         byte_114E6:	dc.b 4
00011C27 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011C2C E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011C31 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011C36 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011C3C 00                         		even
00011C3C 00                         		even
00011C3C                            
00011C3C                            ; ===========================================================================
00011C3C                            ; ---------------------------------------------------------------------------
00011C3C                            ; Object 5D - fans (SLZ)
00011C3C                            ; ---------------------------------------------------------------------------
00011C3C                            
00011C3C                            Obj5D:					; XREF: Obj_Index
00011C3C 7000                       		moveq	#0,d0
00011C3E 1028 0024                  		move.b	$24(a0),d0
00011C42 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011C46 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011C4A                            ; ===========================================================================
00011C4A 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011C4C 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011C4E                            ; ===========================================================================
00011C4E                            
00011C4E                            Obj5D_Main:				; XREF: Obj5D_Index
00011C4E 5428 0024                  		addq.b	#2,$24(a0)
00011C52 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011C5A 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011C60 0028 0004 0001             		ori.b	#4,1(a0)
00011C66 117C 0010 0019             		move.b	#$10,$19(a0)
00011C6C 117C 0004 0018             		move.b	#4,$18(a0)
00011C72                            
00011C72                            Obj5D_Delay:				; XREF: Obj5D_Index
00011C72 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011C78 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011C7A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011C7E 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011C80 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011C86 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011C8C 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011C8E 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011C94                            
00011C94                            Obj5D_Blow:
00011C94 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011C98 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011C9C 43F8 D000                  		lea	($FFFFD000).w,a1
00011CA0 3029 0008                  		move.w	8(a1),d0
00011CA4 9068 0008                  		sub.w	8(a0),d0
00011CA8 0828 0000 0022             		btst	#0,$22(a0)
00011CAE 6600                       		bne.s	Obj5D_ChkSonic
00011CB0 4440                       		neg.w	d0
00011CB2                            
00011CB2                            Obj5D_ChkSonic:
00011CB2 0640 0050                  		addi.w	#$50,d0
00011CB6 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011CBA 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011CBC 3229 000C                  		move.w	$C(a1),d1
00011CC0 0641 0060                  		addi.w	#$60,d1
00011CC4 9268 000C                  		sub.w	$C(a0),d1
00011CC8 6500                       		bcs.s	Obj5D_Animate
00011CCA 0C41 0070                  		cmpi.w	#$70,d1
00011CCE 6400                       		bcc.s	Obj5D_Animate
00011CD0 0440 0050                  		subi.w	#$50,d0
00011CD4 6400                       		bcc.s	loc_1159A
00011CD6 4640                       		not.w	d0
00011CD8 D040                       		add.w	d0,d0
00011CDA                            
00011CDA                            loc_1159A:
00011CDA 0640 0060                  		addi.w	#$60,d0
00011CDE 0828 0000 0022             		btst	#0,$22(a0)
00011CE4 6600                       		bne.s	loc_115A8
00011CE6 4440                       		neg.w	d0
00011CE8                            
00011CE8                            loc_115A8:
00011CE8 4400                       		neg.b	d0
00011CEA E840                       		asr.w	#4,d0
00011CEC 0828 0000 0028             		btst	#0,$28(a0)
00011CF2 6700                       		beq.s	Obj5D_MoveSonic
00011CF4 4440                       		neg.w	d0
00011CF6                            
00011CF6                            Obj5D_MoveSonic:
00011CF6 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011CFA                            
00011CFA                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011CFA 5328 001E                  		subq.b	#1,$1E(a0)
00011CFE 6A00                       		bpl.s	Obj5D_ChkDel
00011D00 117C 0000 001E             		move.b	#0,$1E(a0)
00011D06 5228 001B                  		addq.b	#1,$1B(a0)
00011D0A 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011D10 6500                       		bcs.s	loc_115D8
00011D12 117C 0000 001B             		move.b	#0,$1B(a0)
00011D18                            
00011D18                            loc_115D8:
00011D18 7000                       		moveq	#0,d0
00011D1A 0828 0000 0028             		btst	#0,$28(a0)
00011D20 6700                       		beq.s	loc_115E4
00011D22 7002                       		moveq	#2,d0
00011D24                            
00011D24                            loc_115E4:
00011D24 D028 001B                  		add.b	$1B(a0),d0
00011D28 1140 001A                  		move.b	d0,$1A(a0)
00011D2C                            
00011D2C                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011D2C 6100 C030                  		bsr.w	DisplaySprite
00011D30 3028 0008                  		move.w	8(a0),d0
00011D34 0240 FF80                  		andi.w	#$FF80,d0
00011D38 3238 F700                  		move.w	($FFFFF700).w,d1
00011D3C 0441 0080                  		subi.w	#$80,d1
00011D40 0241 FF80                  		andi.w	#$FF80,d1
00011D44 9041                       		sub.w	d1,d0
00011D46 0C40 0280                  		cmpi.w	#$280,d0
00011D4A 6200 C04E                  		bhi.w	DeleteObject
00011D4E 4E75                       		rts	
00011D50                            ; ===========================================================================
00011D50                            ; ---------------------------------------------------------------------------
00011D50                            ; Sprite mappings - fans (SLZ)
00011D50                            ; ---------------------------------------------------------------------------
00011D50                            Map_obj5D:
00011D50                            	include "_maps\obj5D.asm"
00011D50                            ; ---------------------------------------------------------------------------
00011D50                            ; Sprite mappings - fans (SLZ)
00011D50                            ; ---------------------------------------------------------------------------
00011D50 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011D54 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011D58 0000                       		dc.w byte_1161A-Map_obj5D
00011D5A 02                         byte_1161A:	dc.b 2
00011D5B F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011D60 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011D65 02                         byte_11625:	dc.b 2
00011D66 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011D6B 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011D70 02                         byte_11630:	dc.b 2
00011D71 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011D76 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011D7C 00                         		even
00011D7C 00                         		even
00011D7C                            
00011D7C                            ; ===========================================================================
00011D7C                            ; ---------------------------------------------------------------------------
00011D7C                            ; Object 5E - seesaws (SLZ)
00011D7C                            ; ---------------------------------------------------------------------------
00011D7C                            
00011D7C                            Obj5E:					; XREF: Obj_Index
00011D7C 7000                       		moveq	#0,d0
00011D7E 1028 0024                  		move.b	$24(a0),d0
00011D82 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011D86 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011D8A 3028 0030                  		move.w	$30(a0),d0
00011D8E 0240 FF80                  		andi.w	#$FF80,d0
00011D92 3238 F700                  		move.w	($FFFFF700).w,d1
00011D96 0441 0080                  		subi.w	#$80,d1
00011D9A 0241 FF80                  		andi.w	#$FF80,d1
00011D9E 9041                       		sub.w	d1,d0
00011DA0 6B00 BFF8                  		bmi.w	DeleteObject
00011DA4 0C40 0280                  		cmpi.w	#$280,d0
00011DA8 6200 BFF0                  		bhi.w	DeleteObject
00011DAC 6000 BFB0                  		bra.w	DisplaySprite
00011DB0                            ; ===========================================================================
00011DB0 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011DB2 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011DB4 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011DB6 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011DB8 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011DBA 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011DBC                            ; ===========================================================================
00011DBC                            
00011DBC                            Obj5E_Main:				; XREF: Obj5E_Index
00011DBC 5428 0024                  		addq.b	#2,$24(a0)
00011DC0 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011DC8 317C 0374 0002             		move.w	#$374,2(a0)
00011DCE 0028 0004 0001             		ori.b	#4,1(a0)
00011DD4 117C 0004 0018             		move.b	#4,$18(a0)
00011DDA 117C 0030 0019             		move.b	#$30,$19(a0)
00011DE0 3168 0008 0030             		move.w	8(a0),$30(a0)
00011DE6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011DEA 6600                       		bne.s	loc_116D2	; if not, branch
00011DEC 6100 C40C                  		bsr.w	SingleObjLoad2
00011DF0 6600                       		bne.s	loc_116D2
00011DF2 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011DF6 5C29 0024                  		addq.b	#6,$24(a1)
00011DFA 3368 0008 0008             		move.w	8(a0),8(a1)
00011E00 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011E06 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011E0C 2348 003C                  		move.l	a0,$3C(a1)
00011E10                            
00011E10                            loc_116D2:
00011E10 0828 0000 0022             		btst	#0,$22(a0)
00011E16 6700                       		beq.s	loc_116E0
00011E18 117C 0002 001A             		move.b	#2,$1A(a0)
00011E1E                            
00011E1E                            loc_116E0:
00011E1E 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011E24                            
00011E24                            Obj5E_Slope:				; XREF: Obj5E_Index
00011E24 1228 003A                  		move.b	$3A(a0),d1
00011E28 6100 0000                  		bsr.w	loc_11766
00011E2C 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011E32 0828 0000 001A             		btst	#0,$1A(a0)
00011E38 6700                       		beq.s	loc_11702
00011E3A 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011E40                            
00011E40                            loc_11702:
00011E40 43F8 D000                  		lea	($FFFFD000).w,a1
00011E44 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011E4A 323C 0030                  		move.w	#$30,d1
00011E4E 4EB9 0000 7ABC             		jsr	(SlopeObject).l
00011E54 4E75                       		rts	
00011E56                            ; ===========================================================================
00011E56                            
00011E56                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011E56 6100 0000                  		bsr.w	loc_1174A
00011E5A 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011E60 0828 0000 001A             		btst	#0,$1A(a0)
00011E66 6700                       		beq.s	loc_11730
00011E68 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011E6E                            
00011E6E                            loc_11730:
00011E6E 323C 0030                  		move.w	#$30,d1
00011E72 4EB9 0000 7B5C             		jsr	(ExitPlatform).l
00011E78 323C 0030                  		move.w	#$30,d1
00011E7C 3428 0008                  		move.w	8(a0),d2
00011E80 4EB9 0000 8B4C             		jsr	SlopeObject2
00011E86 4E75                       		rts	
00011E88                            ; ===========================================================================
00011E88                            
00011E88                            loc_1174A:				; XREF: Obj5E_Slope2
00011E88 7202                       		moveq	#2,d1
00011E8A 43F8 D000                  		lea	($FFFFD000).w,a1
00011E8E 3028 0008                  		move.w	8(a0),d0
00011E92 9069 0008                  		sub.w	8(a1),d0
00011E96 6400                       		bcc.s	loc_1175E
00011E98 4440                       		neg.w	d0
00011E9A 7200                       		moveq	#0,d1
00011E9C                            
00011E9C                            loc_1175E:
00011E9C 0C40 0008                  		cmpi.w	#8,d0
00011EA0 6400                       		bcc.s	loc_11766
00011EA2 7201                       		moveq	#1,d1
00011EA4                            
00011EA4                            loc_11766:
00011EA4 1028 001A                  		move.b	$1A(a0),d0
00011EA8 B001                       		cmp.b	d1,d0
00011EAA 6700                       		beq.s	locret_11790
00011EAC 6400                       		bcc.s	loc_11772
00011EAE 5400                       		addq.b	#2,d0
00011EB0                            
00011EB0                            loc_11772:
00011EB0 5300                       		subq.b	#1,d0
00011EB2 1140 001A                  		move.b	d0,$1A(a0)
00011EB6 1141 003A                  		move.b	d1,$3A(a0)
00011EBA 08A8 0000 0001             		bclr	#0,1(a0)
00011EC0 0828 0001 001A             		btst	#1,$1A(a0)
00011EC6 6700                       		beq.s	locret_11790
00011EC8 08E8 0000 0001             		bset	#0,1(a0)
00011ECE                            
00011ECE                            locret_11790:
00011ECE 4E75                       		rts	
00011ED0                            ; ===========================================================================
00011ED0                            
00011ED0                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011ED0 5428 0024                  		addq.b	#2,$24(a0)
00011ED4 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011EDC 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011EE2 0028 0004 0001             		ori.b	#4,1(a0)
00011EE8 117C 0004 0018             		move.b	#4,$18(a0)
00011EEE 117C 008B 0020             		move.b	#$8B,$20(a0)
00011EF4 117C 000C 0019             		move.b	#$C,$19(a0)
00011EFA 3168 0008 0030             		move.w	8(a0),$30(a0)
00011F00 0668 0028 0008             		addi.w	#$28,8(a0)
00011F06 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011F0C 117C 0001 001A             		move.b	#1,$1A(a0)
00011F12 0828 0000 0022             		btst	#0,$22(a0)
00011F18 6700                       		beq.s	Obj5E_MoveSpike
00011F1A 0468 0050 0008             		subi.w	#$50,8(a0)
00011F20 117C 0002 003A             		move.b	#2,$3A(a0)
00011F26                            
00011F26                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011F26 2268 003C                  		movea.l	$3C(a0),a1
00011F2A 7000                       		moveq	#0,d0
00011F2C 1028 003A                  		move.b	$3A(a0),d0
00011F30 9029 003A                  		sub.b	$3A(a1),d0
00011F34 6700                       		beq.s	loc_1183E
00011F36 6400                       		bcc.s	loc_117FC
00011F38 4400                       		neg.b	d0
00011F3A                            
00011F3A                            loc_117FC:
00011F3A 323C F7E8                  		move.w	#-$818,d1
00011F3E 343C FEEC                  		move.w	#-$114,d2
00011F42 0C00 0001                  		cmpi.b	#1,d0
00011F46 6700                       		beq.s	loc_11822
00011F48 323C F510                  		move.w	#-$AF0,d1
00011F4C 343C FF34                  		move.w	#-$CC,d2
00011F50 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011F56 6D00                       		blt.s	loc_11822
00011F58 323C F200                  		move.w	#-$E00,d1
00011F5C 343C FF60                  		move.w	#-$A0,d2
00011F60                            
00011F60                            loc_11822:
00011F60 3141 0012                  		move.w	d1,$12(a0)
00011F64 3142 0010                  		move.w	d2,$10(a0)
00011F68 3028 0008                  		move.w	8(a0),d0
00011F6C 9068 0030                  		sub.w	$30(a0),d0
00011F70 6400                       		bcc.s	loc_11838
00011F72 4468 0010                  		neg.w	$10(a0)
00011F76                            
00011F76                            loc_11838:
00011F76 5428 0024                  		addq.b	#2,$24(a0)
00011F7A 6000                       		bra.s	Obj5E_SpikeFall
00011F7C                            ; ===========================================================================
00011F7C                            
00011F7C                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011F7C 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011F82 7000                       		moveq	#0,d0
00011F84 1029 001A                  		move.b	$1A(a1),d0
00011F88 343C 0028                  		move.w	#$28,d2
00011F8C 3228 0008                  		move.w	8(a0),d1
00011F90 9268 0030                  		sub.w	$30(a0),d1
00011F94 6400                       		bcc.s	loc_1185C
00011F96 4442                       		neg.w	d2
00011F98 5440                       		addq.w	#2,d0
00011F9A                            
00011F9A                            loc_1185C:
00011F9A D040                       		add.w	d0,d0
00011F9C 3228 0034                  		move.w	$34(a0),d1
00011FA0 D272 0000                  		add.w	(a2,d0.w),d1
00011FA4 3141 000C                  		move.w	d1,$C(a0)
00011FA8 D468 0030                  		add.w	$30(a0),d2
00011FAC 3142 0008                  		move.w	d2,8(a0)
00011FB0 4268 000E                  		clr.w	$E(a0)
00011FB4 4268 000A                  		clr.w	$A(a0)
00011FB8 4E75                       		rts	
00011FBA                            ; ===========================================================================
00011FBA                            
00011FBA                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011FBA 4A68 0012                  		tst.w	$12(a0)
00011FBE 6A00                       		bpl.s	loc_1189A
00011FC0 6100 BD4A                  		bsr.w	ObjectFall
00011FC4 3028 0034                  		move.w	$34(a0),d0
00011FC8 0440 002F                  		subi.w	#$2F,d0
00011FCC B068 000C                  		cmp.w	$C(a0),d0
00011FD0 6E00                       		bgt.s	locret_11898
00011FD2 6100 BD38                  		bsr.w	ObjectFall
00011FD6                            
00011FD6                            locret_11898:
00011FD6 4E75                       		rts	
00011FD8                            ; ===========================================================================
00011FD8                            
00011FD8                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011FD8 6100 BD32                  		bsr.w	ObjectFall
00011FDC 2268 003C                  		movea.l	$3C(a0),a1
00011FE0 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011FE6 7000                       		moveq	#0,d0
00011FE8 1029 001A                  		move.b	$1A(a1),d0
00011FEC 3228 0008                  		move.w	8(a0),d1
00011FF0 9268 0030                  		sub.w	$30(a0),d1
00011FF4 6400                       		bcc.s	loc_118BA
00011FF6 5440                       		addq.w	#2,d0
00011FF8                            
00011FF8                            loc_118BA:
00011FF8 D040                       		add.w	d0,d0
00011FFA 3228 0034                  		move.w	$34(a0),d1
00011FFE D272 0000                  		add.w	(a2,d0.w),d1
00012002 B268 000C                  		cmp.w	$C(a0),d1
00012006 6E00                       		bgt.s	locret_11938
00012008 2268 003C                  		movea.l	$3C(a0),a1
0001200C 7202                       		moveq	#2,d1
0001200E 4A68 0010                  		tst.w	$10(a0)
00012012 6B00                       		bmi.s	Obj5E_Spring
00012014 7200                       		moveq	#0,d1
00012016                            
00012016                            Obj5E_Spring:
00012016 1341 003A                  		move.b	d1,$3A(a1)
0001201A 1141 003A                  		move.b	d1,$3A(a0)
0001201E B229 001A                  		cmp.b	$1A(a1),d1
00012022 6700                       		beq.s	loc_1192C
00012024 08A9 0003 0022             		bclr	#3,$22(a1)
0001202A 6700                       		beq.s	loc_1192C
0001202C 4229 0025                  		clr.b	$25(a1)
00012030 137C 0002 0024             		move.b	#2,$24(a1)
00012036 45F8 D000                  		lea	($FFFFD000).w,a2
0001203A 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012040 446A 0012                  		neg.w	$12(a2)
00012044 08EA 0001 0022             		bset	#1,$22(a2)
0001204A 08AA 0003 0022             		bclr	#3,$22(a2)
00012050 422A 003C                  		clr.b	$3C(a2)
00012054 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001205A 157C 0002 0024             		move.b	#2,$24(a2)
00012060 303C 00CC                  		move.w	#$CC,d0
00012064 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0001206A                            
0001206A                            loc_1192C:
0001206A 4268 0010                  		clr.w	$10(a0)
0001206E 4268 0012                  		clr.w	$12(a0)
00012072 5528 0024                  		subq.b	#2,$24(a0)
00012076                            
00012076                            locret_11938:
00012076 4E75                       		rts	
00012078                            ; ===========================================================================
00012078 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012082                            
00012082                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000120B2                            		even
000120B2                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000120E2                            		even
000120E2                            ; ---------------------------------------------------------------------------
000120E2                            ; Sprite mappings - seesaws (SLZ)
000120E2                            ; ---------------------------------------------------------------------------
000120E2                            Map_obj5E:
000120E2                            	include "_maps\obj5E.asm"
000120E2                            ; ---------------------------------------------------------------------------
000120E2                            ; Sprite mappings - seesaws (SLZ)
000120E2                            ; ---------------------------------------------------------------------------
000120E2 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000120E6 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000120EA 07                         byte_119AC:	dc.b 7
000120EB D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000120F0 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000120F5 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000120FA EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000120FF FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012104 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012109 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
0001210E 04                         byte_119D0:	dc.b 4
0001210F E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012114 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012119 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
0001211E E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012124 00                         		even
00012124 00                         		even
00012124                            
00012124                            ; ---------------------------------------------------------------------------
00012124                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012124                            ; ---------------------------------------------------------------------------
00012124                            Map_obj5Ea:
00012124                            	include "_maps\obj5Eballs.asm"
00012124                            ; ---------------------------------------------------------------------------
00012124                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012124                            ; ---------------------------------------------------------------------------
00012124 0000                       		dc.w byte_119EA-Map_obj5Ea
00012126 0000                       		dc.w byte_119F0-Map_obj5Ea
00012128 01                         byte_119EA:	dc.b 1
00012129 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001212E 01                         byte_119F0:	dc.b 1
0001212F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012134                            		even
00012134                            		even
00012134                            
00012134                            ; ===========================================================================
00012134                            ; ---------------------------------------------------------------------------
00012134                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012134                            ; ---------------------------------------------------------------------------
00012134                            
00012134                            Obj5F:					; XREF: Obj_Index
00012134 7000                       		moveq	#0,d0
00012136 1028 0024                  		move.b	$24(a0),d0
0001213A 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
0001213E 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012142                            ; ===========================================================================
00012142 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012144 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012146 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012148 0000                       		dc.w Obj5F_End-Obj5F_Index
0001214A                            ; ===========================================================================
0001214A                            
0001214A                            Obj5F_Main:				; XREF: Obj5F_Index
0001214A 5428 0024                  		addq.b	#2,$24(a0)
0001214E 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012156 317C 0400 0002             		move.w	#$400,2(a0)
0001215C 0028 0004 0001             		ori.b	#4,1(a0)
00012162 117C 0003 0018             		move.b	#3,$18(a0)
00012168 117C 000C 0019             		move.b	#$C,$19(a0)
0001216E 1028 0028                  		move.b	$28(a0),d0
00012172 6700                       		beq.s	loc_11A3C
00012174 1140 0024                  		move.b	d0,$24(a0)
00012178 4E75                       		rts	
0001217A                            ; ===========================================================================
0001217A                            
0001217A                            loc_11A3C:
0001217A 117C 009A 0020             		move.b	#$9A,$20(a0)
00012180 0868 0000 0022             		bchg	#0,$22(a0)
00012186                            
00012186                            Obj5F_Action:				; XREF: Obj5F_Index
00012186 7000                       		moveq	#0,d0
00012188 1028 0025                  		move.b	$25(a0),d0
0001218C 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012190 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012194 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001219A 6100 8C82                  		bsr.w	AnimateSprite
0001219E 6000 DC66                  		bra.w	MarkObjGone
000121A2                            ; ===========================================================================
000121A2 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000121A4 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000121A6 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000121A8                            ; ===========================================================================
000121A8                            
000121A8                            Obj5F_Walk:				; XREF: Obj5F_Index2
000121A8 6100 0000                  		bsr.w	Obj5F_ChkSonic
000121AC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000121B0 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000121B2 5428 0025                  		addq.b	#2,$25(a0)
000121B6 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000121BC 317C 0010 0010             		move.w	#$10,$10(a0)
000121C2 117C 0001 001C             		move.b	#1,$1C(a0)
000121C8 0868 0000 0022             		bchg	#0,$22(a0)
000121CE 6700                       		beq.s	locret_11A96
000121D0 4468 0010                  		neg.w	$10(a0)		; change direction
000121D4                            
000121D4                            locret_11A96:
000121D4 4E75                       		rts	
000121D6                            ; ===========================================================================
000121D6                            
000121D6                            Obj5F_Wait:				; XREF: Obj5F_Index2
000121D6 6100 0000                  		bsr.w	Obj5F_ChkSonic
000121DA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000121DE 6B00                       		bmi.s	loc_11AA8
000121E0 6100 BB56                  		bsr.w	SpeedToPos
000121E4 4E75                       		rts	
000121E6                            ; ===========================================================================
000121E6                            
000121E6                            loc_11AA8:
000121E6 5528 0025                  		subq.b	#2,$25(a0)
000121EA 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000121F0 4268 0010                  		clr.w	$10(a0)		; stop walking
000121F4 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000121FA 4E75                       		rts	
000121FC                            ; ===========================================================================
000121FC                            
000121FC                            Obj5F_Explode:				; XREF: Obj5F_Index2
000121FC 5368 0030                  		subq.w	#1,$30(a0)
00012200 6A00                       		bpl.s	locret_11AD0
00012202 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012206 117C 0000 0024             		move.b	#0,$24(a0)
0001220C                            
0001220C                            locret_11AD0:
0001220C 4E75                       		rts	
0001220E                            ; ===========================================================================
0001220E                            
0001220E                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0001220E 3038 D008                  		move.w	($FFFFD008).w,d0
00012212 9068 0008                  		sub.w	8(a0),d0
00012216 6400                       		bcc.s	loc_11ADE
00012218 4440                       		neg.w	d0
0001221A                            
0001221A                            loc_11ADE:
0001221A 0C40 0060                  		cmpi.w	#$60,d0
0001221E 6400                       		bcc.s	locret_11B5E
00012220 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012224 9068 000C                  		sub.w	$C(a0),d0
00012228 6400                       		bcc.s	Obj5F_MakeFuse
0001222A 4440                       		neg.w	d0
0001222C                            
0001222C                            Obj5F_MakeFuse:
0001222C 0C40 0060                  		cmpi.w	#$60,d0
00012230 6400                       		bcc.s	locret_11B5E
00012232 4A78 FE08                  		tst.w	($FFFFFE08).w
00012236 6600                       		bne.s	locret_11B5E
00012238 117C 0004 0025             		move.b	#4,$25(a0)
0001223E 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012244 4268 0010                  		clr.w	$10(a0)
00012248 117C 0002 001C             		move.b	#2,$1C(a0)
0001224E 6100 BFAA                  		bsr.w	SingleObjLoad2
00012252 6600                       		bne.s	locret_11B5E
00012254 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012258 3368 0008 0008             		move.w	8(a0),8(a1)
0001225E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012264 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001226A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012270 137C 0004 0028             		move.b	#4,$28(a1)
00012276 137C 0003 001C             		move.b	#3,$1C(a1)
0001227C 337C 0010 0012             		move.w	#$10,$12(a1)
00012282 0828 0001 0022             		btst	#1,$22(a0)
00012288 6700                       		beq.s	loc_11B54
0001228A 4469 0012                  		neg.w	$12(a1)
0001228E                            
0001228E                            loc_11B54:
0001228E 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012294 2348 003C                  		move.l	a0,$3C(a1)
00012298                            
00012298                            locret_11B5E:
00012298 4E75                       		rts	
0001229A                            ; ===========================================================================
0001229A                            
0001229A                            Obj5F_Display:				; XREF: Obj5F_Index
0001229A 6100                       		bsr.s	loc_11B70
0001229C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000122A2 6100 8B7A                  		bsr.w	AnimateSprite
000122A6 6000 DB5E                  		bra.w	MarkObjGone
000122AA                            ; ===========================================================================
000122AA                            
000122AA                            loc_11B70:
000122AA 5368 0030                  		subq.w	#1,$30(a0)
000122AE 6B00                       		bmi.s	loc_11B7C
000122B0 6100 BA86                  		bsr.w	SpeedToPos
000122B4 4E75                       		rts	
000122B6                            ; ===========================================================================
000122B6                            
000122B6                            loc_11B7C:
000122B6 4268 0030                  		clr.w	$30(a0)
000122BA 4228 0024                  		clr.b	$24(a0)
000122BE 3168 0034 000C             		move.w	$34(a0),$C(a0)
000122C4 7203                       		moveq	#3,d1
000122C6 2248                       		movea.l	a0,a1
000122C8 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000122CE 6000                       		bra.s	Obj5F_MakeShrap
000122D0                            ; ===========================================================================
000122D0                            
000122D0                            Obj5F_Loop:
000122D0 6100 BF28                  		bsr.w	SingleObjLoad2
000122D4 6600                       		bne.s	loc_11BCE
000122D6                            
000122D6                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000122D6 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000122DA 3368 0008 0008             		move.w	8(a0),8(a1)
000122E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000122E6 137C 0006 0028             		move.b	#6,$28(a1)
000122EC 137C 0004 001C             		move.b	#4,$1C(a1)
000122F2 335A 0010                  		move.w	(a2)+,$10(a1)
000122F6 335A 0012                  		move.w	(a2)+,$12(a1)
000122FA 137C 0098 0020             		move.b	#$98,$20(a1)
00012300 08E9 0007 0001             		bset	#7,1(a1)
00012306                            
00012306                            loc_11BCE:
00012306 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001230A                            
0001230A 117C 0006 0024             		move.b	#6,$24(a0)
00012310                            
00012310                            Obj5F_End:				; XREF: Obj5F_Index
00012310 6100 BA26                  		bsr.w	SpeedToPos
00012314 0668 0018 0012             		addi.w	#$18,$12(a0)
0001231A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012320 6100 8AFC                  		bsr.w	AnimateSprite
00012324 4A28 0001                  		tst.b	1(a0)
00012328 6A00 BA70                  		bpl.w	DeleteObject
0001232C 6000 BA30                  		bra.w	DisplaySprite
00012330                            ; ===========================================================================
00012330 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012340                            
00012340                            Ani_obj5F:
00012340                            	include "_anim\obj5F.asm"
00012340                            ; ---------------------------------------------------------------------------
00012340                            ; Animation script - Bomb enemy
00012340                            ; ---------------------------------------------------------------------------
00012340 0000                       		dc.w byte_11C12-Ani_obj5F
00012342 0000                       		dc.w byte_11C16-Ani_obj5F
00012344 0000                       		dc.w byte_11C1C-Ani_obj5F
00012346 0000                       		dc.w byte_11C20-Ani_obj5F
00012348 0000                       		dc.w byte_11C24-Ani_obj5F
0001234A 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001234E 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012354 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012358 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001235C 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012360                            		even
00012360                            		even
00012360                            
00012360                            ; ---------------------------------------------------------------------------
00012360                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012360                            ; ---------------------------------------------------------------------------
00012360                            Map_obj5F:
00012360                            	include "_maps\obj5F.asm"
00012360                            ; ---------------------------------------------------------------------------
00012360                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012360                            ; ---------------------------------------------------------------------------
00012360 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012364 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012368 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001236C 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012370 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012374 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012378 03                         byte_11C40:	dc.b 3
00012379 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001237E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012383 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012388 03                         byte_11C50:	dc.b 3
00012389 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001238E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012393 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012398 03                         byte_11C60:	dc.b 3
00012399 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001239E 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000123A3 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000123A8 03                         byte_11C70:	dc.b 3
000123A9 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123AE 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000123B3 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000123B8 03                         byte_11C80:	dc.b 3
000123B9 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000123BE 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000123C3 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000123C8 03                         byte_11C90:	dc.b 3
000123C9 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123CE 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000123D3 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000123D8 02                         byte_11CA0:	dc.b 2
000123D9 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000123DE 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000123E3 02                         byte_11CAB:	dc.b 2
000123E4 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123E9 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000123EE 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000123EF E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000123F4 01                         byte_11CBC:	dc.b 1			; fuse
000123F5 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000123FA 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000123FB FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012400 01                         byte_11CC8:	dc.b 1			; fireball
00012401 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012406                            		even
00012406                            		even
00012406                            
00012406                            ; ===========================================================================
00012406                            ; ---------------------------------------------------------------------------
00012406                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012406                            ; ---------------------------------------------------------------------------
00012406                            
00012406                            Obj60:					; XREF: Obj_Index
00012406 7000                       		moveq	#0,d0
00012408 1028 0024                  		move.b	$24(a0),d0
0001240C 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012410 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012414                            ; ===========================================================================
00012414 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012416 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012418 0000                       		dc.w Obj60_Display-Obj60_Index
0001241A 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001241C 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001241E                            ; ===========================================================================
0001241E                            
0001241E                            Obj60_Main:				; XREF: Obj60_Index
0001241E 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012426 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001242C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012432 6700                       		beq.s	loc_11D02
00012434 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001243A                            
0001243A                            loc_11D02:
0001243A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012440 6600                       		bne.s	loc_11D10
00012442 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012448                            
00012448                            loc_11D10:
00012448 0028 0004 0001             		ori.b	#4,1(a0)
0001244E 117C 0004 0018             		move.b	#4,$18(a0)
00012454 117C 000B 0020             		move.b	#$B,$20(a0)
0001245A 117C 000C 0019             		move.b	#$C,$19(a0)
00012460 7400                       		moveq	#0,d2
00012462 45E8 0037                  		lea	$37(a0),a2
00012466 264A                       		movea.l	a2,a3
00012468 524A                       		addq.w	#1,a2
0001246A 7203                       		moveq	#3,d1
0001246C                            
0001246C                            Obj60_MakeOrbs:
0001246C 6100 BD8C                  		bsr.w	SingleObjLoad2
00012470 6600                       		bne.s	loc_11D90
00012472 5213                       		addq.b	#1,(a3)
00012474 3A09                       		move.w	a1,d5
00012476 0445 D000                  		subi.w	#-$3000,d5
0001247A EC4D                       		lsr.w	#6,d5
0001247C 0245 007F                  		andi.w	#$7F,d5
00012480 14C5                       		move.b	d5,(a2)+
00012482 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012484 137C 0006 0024             		move.b	#6,$24(a1)
0001248A 2368 0004 0004             		move.l	4(a0),4(a1)
00012490 3368 0002 0002             		move.w	2(a0),2(a1)
00012496 0029 0004 0001             		ori.b	#4,1(a1)
0001249C 137C 0004 0018             		move.b	#4,$18(a1)
000124A2 137C 0008 0019             		move.b	#8,$19(a1)
000124A8 137C 0003 001A             		move.b	#3,$1A(a1)
000124AE 137C 0098 0020             		move.b	#$98,$20(a1)
000124B4 1342 0026                  		move.b	d2,$26(a1)
000124B8 0602 0040                  		addi.b	#$40,d2
000124BC 2348 003C                  		move.l	a0,$3C(a1)
000124C0 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000124C4                            
000124C4                            loc_11D90:
000124C4 7001                       		moveq	#1,d0
000124C6 0828 0000 0022             		btst	#0,$22(a0)
000124CC 6700                       		beq.s	Obj60_Move
000124CE 4440                       		neg.w	d0
000124D0                            
000124D0                            Obj60_Move:
000124D0 1140 0036                  		move.b	d0,$36(a0)
000124D4 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000124DA 5428 0024                  		addq.b	#2,$24(a0)
000124DE 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000124E4 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000124EA 6700                       		beq.s	locret_11DBC	; if not, branch
000124EC 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000124F0                            
000124F0                            locret_11DBC:
000124F0 4E75                       		rts	
000124F2                            ; ===========================================================================
000124F2                            
000124F2                            Obj60_ChkSonic:				; XREF: Obj60_Index
000124F2 3038 D008                  		move.w	($FFFFD008).w,d0
000124F6 9068 0008                  		sub.w	8(a0),d0
000124FA 6400                       		bcc.s	loc_11DCA
000124FC 4440                       		neg.w	d0
000124FE                            
000124FE                            loc_11DCA:
000124FE 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012502 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012504 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012508 9068 000C                  		sub.w	$C(a0),d0
0001250C 6400                       		bcc.s	loc_11DDC
0001250E 4440                       		neg.w	d0
00012510                            
00012510                            loc_11DDC:
00012510 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012514 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012516 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001251A 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001251C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012522                            
00012522                            Obj60_Animate:
00012522 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012528 6100 88F4                  		bsr.w	AnimateSprite
0001252C 6000 0000                  		bra.w	Obj60_ChkDel
00012530                            ; ===========================================================================
00012530                            
00012530                            Obj60_Display:				; XREF: Obj60_Index
00012530 6100 B806                  		bsr.w	SpeedToPos
00012534                            
00012534                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012534 3028 0008                  		move.w	8(a0),d0
00012538 0240 FF80                  		andi.w	#$FF80,d0
0001253C 3238 F700                  		move.w	($FFFFF700).w,d1
00012540 0441 0080                  		subi.w	#$80,d1
00012544 0241 FF80                  		andi.w	#$FF80,d1
00012548 9041                       		sub.w	d1,d0
0001254A 0C40 0280                  		cmpi.w	#$280,d0
0001254E 6200 0000                  		bhi.w	Obj60_ChkGone
00012552 6000 B80A                  		bra.w	DisplaySprite
00012556                            ; ===========================================================================
00012556                            
00012556                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012556 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001255A 7000                       		moveq	#0,d0
0001255C 1028 0023                  		move.b	$23(a0),d0
00012560 6700                       		beq.s	loc_11E34
00012562 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012568                            
00012568                            loc_11E34:
00012568 45E8 0037                  		lea	$37(a0),a2
0001256C 7400                       		moveq	#0,d2
0001256E 141A                       		move.b	(a2)+,d2
00012570 5342                       		subq.w	#1,d2
00012572 6500                       		bcs.s	Obj60_Delete
00012574                            
00012574                            loc_11E40:
00012574 7000                       		moveq	#0,d0
00012576 101A                       		move.b	(a2)+,d0
00012578 ED48                       		lsl.w	#6,d0
0001257A 0680 00FF D000             		addi.l	#$FFD000,d0
00012580 2240                       		movea.l	d0,a1
00012582 6100 B818                  		bsr.w	DeleteObject2
00012586 51CA FFEC                  		dbf	d2,loc_11E40
0001258A                            
0001258A                            Obj60_Delete:
0001258A 6000 B80E                  		bra.w	DeleteObject
0001258E                            ; ===========================================================================
0001258E                            
0001258E                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001258E 2268 003C                  		movea.l	$3C(a0),a1
00012592 0C11 0060                  		cmpi.b	#$60,0(a1)
00012596 6600 B802                  		bne.w	DeleteObject
0001259A 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000125A0 6600                       		bne.s	Obj60_Circle
000125A2 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000125A8 6600                       		bne.s	Obj60_Circle
000125AA 5428 0024                  		addq.b	#2,$24(a0)
000125AE 5329 0037                  		subq.b	#1,$37(a1)
000125B2 6600                       		bne.s	Obj60_FireOrb
000125B4 5429 0024                  		addq.b	#2,$24(a1)
000125B8                            
000125B8                            Obj60_FireOrb:
000125B8 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000125BE 0829 0000 0022             		btst	#0,$22(a1)
000125C4 6700                       		beq.s	Obj60_Display2
000125C6 4468 0010                  		neg.w	$10(a0)
000125CA                            
000125CA                            Obj60_Display2:
000125CA 6000 B792                  		bra.w	DisplaySprite
000125CE                            ; ===========================================================================
000125CE                            
000125CE                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000125CE 1028 0026                  		move.b	$26(a0),d0
000125D2 4EB9 0000 2C64             		jsr	(CalcSine).l
000125D8 E841                       		asr.w	#4,d1
000125DA D269 0008                  		add.w	8(a1),d1
000125DE 3141 0008                  		move.w	d1,8(a0)
000125E2 E840                       		asr.w	#4,d0
000125E4 D069 000C                  		add.w	$C(a1),d0
000125E8 3140 000C                  		move.w	d0,$C(a0)
000125EC 1029 0036                  		move.b	$36(a1),d0
000125F0 D128 0026                  		add.b	d0,$26(a0)
000125F4 6000 B768                  		bra.w	DisplaySprite
000125F8                            ; ===========================================================================
000125F8                            
000125F8                            Obj60_ChkDel2:				; XREF: Obj60_Index
000125F8 6100 B73E                  		bsr.w	SpeedToPos
000125FC 4A28 0001                  		tst.b	1(a0)
00012600 6A00 B798                  		bpl.w	DeleteObject
00012604 6000 B758                  		bra.w	DisplaySprite
00012608                            ; ===========================================================================
00012608                            Ani_obj60:
00012608                            	include "_anim\obj60.asm"
00012608                            ; ---------------------------------------------------------------------------
00012608                            ; Animation script - Orbinaut enemy
00012608                            ; ---------------------------------------------------------------------------
00012608 0000                       		dc.w byte_11EDA-Ani_obj60
0001260A 0000                       		dc.w byte_11EDE-Ani_obj60
0001260C 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012610 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012616                            		even
00012616                            		even
00012616                            
00012616                            ; ---------------------------------------------------------------------------
00012616                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012616                            ; ---------------------------------------------------------------------------
00012616                            Map_obj60:
00012616                            	include "_maps\obj60.asm"
00012616                            ; ---------------------------------------------------------------------------
00012616                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012616                            ; ---------------------------------------------------------------------------
00012616 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001261A 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001261E 01                         byte_11EEC:	dc.b 1
0001261F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012624 01                         byte_11EF2:	dc.b 1
00012625 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001262A 01                         byte_11EF8:	dc.b 1
0001262B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012630 01                         byte_11EFE:	dc.b 1
00012631 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012636                            		even
00012636                            		even
00012636                            
00012636                            ; ===========================================================================
00012636                            ; ---------------------------------------------------------------------------
00012636                            ; Object 16 - harpoon (LZ)
00012636                            ; ---------------------------------------------------------------------------
00012636                            
00012636                            Obj16:					; XREF: Obj_Index
00012636 7000                       		moveq	#0,d0
00012638 1028 0024                  		move.b	$24(a0),d0
0001263C 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012640 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012644                            ; ===========================================================================
00012644 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012646 0000                       		dc.w Obj16_Move-Obj16_Index
00012648 0000                       		dc.w Obj16_Wait-Obj16_Index
0001264A                            ; ===========================================================================
0001264A                            
0001264A                            Obj16_Main:				; XREF: Obj16_Index
0001264A 5428 0024                  		addq.b	#2,$24(a0)
0001264E 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012656 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001265C 0028 0004 0001             		ori.b	#4,1(a0)
00012662 117C 0004 0018             		move.b	#4,$18(a0)
00012668 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001266E 117C 0014 0019             		move.b	#$14,$19(a0)
00012674 317C 003C 0030             		move.w	#60,$30(a0)
0001267A                            
0001267A                            Obj16_Move:				; XREF: Obj16_Index
0001267A 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012680 6100 879C                  		bsr.w	AnimateSprite
00012684 7000                       		moveq	#0,d0
00012686 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001268A 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012690 6000 D774                  		bra.w	MarkObjGone
00012694                            ; ===========================================================================
00012694 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001269A                            ; ===========================================================================
0001269A                            
0001269A                            Obj16_Wait:				; XREF: Obj16_Index
0001269A 5368 0030                  		subq.w	#1,$30(a0)
0001269E 6A00                       		bpl.s	Obj16_ChkDel
000126A0 317C 003C 0030             		move.w	#60,$30(a0)
000126A6 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000126AA 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000126B0                            
000126B0                            Obj16_ChkDel:
000126B0 6000 D754                  		bra.w	MarkObjGone
000126B4                            ; ===========================================================================
000126B4                            Ani_obj16:
000126B4                            	include "_anim\obj16.asm"
000126B4                            ; ---------------------------------------------------------------------------
000126B4                            ; Animation script - harpoon (LZ)
000126B4                            ; ---------------------------------------------------------------------------
000126B4 0000                       		dc.w byte_11F8A-Ani_obj16
000126B6 0000                       		dc.w byte_11F8E-Ani_obj16
000126B8 0000                       		dc.w byte_11F92-Ani_obj16
000126BA 0000                       		dc.w byte_11F96-Ani_obj16
000126BC 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000126C0 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000126C4 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000126C8 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000126CC                            		even
000126CC                            		even
000126CC                            
000126CC                            ; ---------------------------------------------------------------------------
000126CC                            ; Sprite mappings - harpoon (LZ)
000126CC                            ; ---------------------------------------------------------------------------
000126CC                            Map_obj16:
000126CC                            	include "_maps\obj16.asm"
000126CC                            ; ---------------------------------------------------------------------------
000126CC                            ; Sprite mappings - harpoon (LZ)
000126CC                            ; ---------------------------------------------------------------------------
000126CC 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000126D0 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000126D4 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000126D8 01                         byte_11FA6:	dc.b 1
000126D9 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000126DE 01                         byte_11FAC:	dc.b 1
000126DF FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000126E4 02                         byte_11FB2:	dc.b 2
000126E5 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000126EA FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000126EF 01                         byte_11FBD:	dc.b 1
000126F0 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000126F5 01                         byte_11FC3:	dc.b 1
000126F6 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000126FB 02                         byte_11FC9:	dc.b 2
000126FC D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012701 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012706                            		even
00012706                            		even
00012706                            
00012706                            ; ===========================================================================
00012706                            ; ---------------------------------------------------------------------------
00012706                            ; Object 61 - blocks (LZ)
00012706                            ; ---------------------------------------------------------------------------
00012706                            
00012706                            Obj61:					; XREF: Obj_Index
00012706 7000                       		moveq	#0,d0
00012708 1028 0024                  		move.b	$24(a0),d0
0001270C 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012710 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012714                            ; ===========================================================================
00012714 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012716 0000                       		dc.w Obj61_Action-Obj61_Index
00012718                            
00012718 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001271A 200C                       		dc.b $20, $C
0001271C 1010                       		dc.b $10, $10
0001271E 1010                       		dc.b $10, $10
00012720                            ; ===========================================================================
00012720                            
00012720                            Obj61_Main:				; XREF: Obj61_Index
00012720 5428 0024                  		addq.b	#2,$24(a0)
00012724 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001272C 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012732 117C 0004 0001             		move.b	#4,1(a0)
00012738 117C 0003 0018             		move.b	#3,$18(a0)
0001273E 7000                       		moveq	#0,d0
00012740 1028 0028                  		move.b	$28(a0),d0
00012744 E648                       		lsr.w	#3,d0
00012746 0240 000E                  		andi.w	#$E,d0
0001274A 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001274E 115A 0019                  		move.b	(a2)+,$19(a0)
00012752 1152 0016                  		move.b	(a2),$16(a0)
00012756 E248                       		lsr.w	#1,d0
00012758 1140 001A                  		move.b	d0,$1A(a0)
0001275C 3168 0008 0034             		move.w	8(a0),$34(a0)
00012762 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012768 1028 0028                  		move.b	$28(a0),d0
0001276C 0200 000F                  		andi.b	#$F,d0
00012770 6700                       		beq.s	Obj61_Action
00012772 0C00 0007                  		cmpi.b	#7,d0
00012776 6700                       		beq.s	Obj61_Action
00012778 117C 0001 0038             		move.b	#1,$38(a0)
0001277E                            
0001277E                            Obj61_Action:				; XREF: Obj61_Index
0001277E 3F28 0008                  		move.w	8(a0),-(sp)
00012782 7000                       		moveq	#0,d0
00012784 1028 0028                  		move.b	$28(a0),d0
00012788 0240 000F                  		andi.w	#$F,d0
0001278C D040                       		add.w	d0,d0
0001278E 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012792 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012796 381F                       		move.w	(sp)+,d4
00012798 4A28 0001                  		tst.b	1(a0)
0001279C 6A00                       		bpl.s	Obj61_ChkDel
0001279E 7200                       		moveq	#0,d1
000127A0 1228 0019                  		move.b	$19(a0),d1
000127A4 0641 000B                  		addi.w	#$B,d1
000127A8 7400                       		moveq	#0,d2
000127AA 1428 0016                  		move.b	$16(a0),d2
000127AE 3602                       		move.w	d2,d3
000127B0 5243                       		addq.w	#1,d3
000127B2 6100 D97A                  		bsr.w	SolidObject
000127B6 1144 003F                  		move.b	d4,$3F(a0)
000127BA 6100 0000                  		bsr.w	loc_12180
000127BE                            
000127BE                            Obj61_ChkDel:
000127BE 3028 0034                  		move.w	$34(a0),d0
000127C2 0240 FF80                  		andi.w	#$FF80,d0
000127C6 3238 F700                  		move.w	($FFFFF700).w,d1
000127CA 0441 0080                  		subi.w	#$80,d1
000127CE 0241 FF80                  		andi.w	#$FF80,d1
000127D2 9041                       		sub.w	d1,d0
000127D4 0C40 0280                  		cmpi.w	#$280,d0
000127D8 6200 B5C0                  		bhi.w	DeleteObject
000127DC 6000 B580                  		bra.w	DisplaySprite
000127E0                            ; ===========================================================================
000127E0 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000127E4 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000127E8 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000127EC 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000127F0                            ; ===========================================================================
000127F0                            
000127F0                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000127F0 4E75                       		rts	
000127F2                            ; ===========================================================================
000127F2                            
000127F2                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000127F2 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000127F6 6600                       		bne.s	loc_120D6	; if yes, branch
000127F8 0828 0003 0022             		btst	#3,$22(a0)
000127FE 6700                       		beq.s	locret_120D4
00012800 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012806                            
00012806                            locret_120D4:
00012806 4E75                       		rts	
00012808                            ; ===========================================================================
00012808                            
00012808                            loc_120D6:
00012808 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001280C 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001280E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012812 4228 0038                  		clr.b	$38(a0)
00012816 4E75                       		rts	
00012818                            ; ===========================================================================
00012818                            
00012818                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012818 6100 B51E                  		bsr.w	SpeedToPos
0001281C 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012820 6100 0000                  		bsr.w	ObjHitFloor
00012824 4A41                       		tst.w	d1
00012826 6A00 0000                  		bpl.w	locret_12106
0001282A 5241                       		addq.w	#1,d1
0001282C D368 000C                  		add.w	d1,$C(a0)
00012830 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012834 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012838                            
00012838                            locret_12106:
00012838 4E75                       		rts	
0001283A                            ; ===========================================================================
0001283A                            
0001283A                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001283A 6100 B4FC                  		bsr.w	SpeedToPos
0001283E 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012842 6100 0000                  		bsr.w	ObjHitCeiling
00012846 4A41                       		tst.w	d1
00012848 6A00 0000                  		bpl.w	locret_12126
0001284C 9368 000C                  		sub.w	d1,$C(a0)
00012850 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012854 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012858                            
00012858                            locret_12126:
00012858 4E75                       		rts	
0001285A                            ; ===========================================================================
0001285A                            
0001285A                            Obj61_Type05:				; XREF: Obj61_TypeIndex
0001285A 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012860 6600                       		bne.s	locret_12138	; if not, branch
00012862 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012866 4228 0038                  		clr.b	$38(a0)
0001286A                            
0001286A                            locret_12138:
0001286A 4E75                       		rts	
0001286C                            ; ===========================================================================
0001286C                            
0001286C                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001286C 3038 F646                  		move.w	($FFFFF646).w,d0
00012870 9068 000C                  		sub.w	$C(a0),d0
00012874 6700                       		beq.s	locret_1217E
00012876 6400                       		bcc.s	loc_12162
00012878 0C40 FFFE                  		cmpi.w	#-2,d0
0001287C 6C00                       		bge.s	loc_1214E
0001287E 70FE                       		moveq	#-2,d0
00012880                            
00012880                            loc_1214E:
00012880 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012884 6100 0000                  		bsr.w	ObjHitCeiling
00012888 4A41                       		tst.w	d1
0001288A 6A00 0000                  		bpl.w	locret_12160
0001288E 9368 000C                  		sub.w	d1,$C(a0)
00012892                            
00012892                            locret_12160:
00012892 4E75                       		rts	
00012894                            ; ===========================================================================
00012894                            
00012894                            loc_12162:				; XREF: Obj61_Type07
00012894 0C40 0002                  		cmpi.w	#2,d0
00012898 6F00                       		ble.s	loc_1216A
0001289A 7002                       		moveq	#2,d0
0001289C                            
0001289C                            loc_1216A:
0001289C D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000128A0 6100 0000                  		bsr.w	ObjHitFloor
000128A4 4A41                       		tst.w	d1
000128A6 6A00 0000                  		bpl.w	locret_1217E
000128AA 5241                       		addq.w	#1,d1
000128AC D368 000C                  		add.w	d1,$C(a0)
000128B0                            
000128B0                            locret_1217E:
000128B0 4E75                       		rts	
000128B2                            ; ===========================================================================
000128B2                            
000128B2                            loc_12180:				; XREF: Obj61_Action
000128B2 4A28 0038                  		tst.b	$38(a0)
000128B6 6700                       		beq.s	locret_121C0
000128B8 0828 0003 0022             		btst	#3,$22(a0)
000128BE 6600                       		bne.s	loc_1219A
000128C0 4A28 003E                  		tst.b	$3E(a0)
000128C4 6700                       		beq.s	locret_121C0
000128C6 5928 003E                  		subq.b	#4,$3E(a0)
000128CA 6000                       		bra.s	loc_121A6
000128CC                            ; ===========================================================================
000128CC                            
000128CC                            loc_1219A:
000128CC 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000128D2 6700                       		beq.s	locret_121C0
000128D4 5828 003E                  		addq.b	#4,$3E(a0)
000128D8                            
000128D8                            loc_121A6:
000128D8 1028 003E                  		move.b	$3E(a0),d0
000128DC 4EB9 0000 2C64             		jsr	(CalcSine).l
000128E2 323C 0400                  		move.w	#$400,d1
000128E6 C1C1                       		muls.w	d1,d0
000128E8 4840                       		swap	d0
000128EA D068 0030                  		add.w	$30(a0),d0
000128EE 3140 000C                  		move.w	d0,$C(a0)
000128F2                            
000128F2                            locret_121C0:
000128F2 4E75                       		rts	
000128F4                            ; ===========================================================================
000128F4                            ; ---------------------------------------------------------------------------
000128F4                            ; Sprite mappings - blocks (LZ)
000128F4                            ; ---------------------------------------------------------------------------
000128F4                            Map_obj61:
000128F4                            	include "_maps\obj61.asm"
000128F4                            ; ---------------------------------------------------------------------------
000128F4                            ; Sprite mappings - blocks (LZ)
000128F4                            ; ---------------------------------------------------------------------------
000128F4 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000128F8 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000128FC 01                         byte_121CA:	dc.b 1
000128FD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012902 02                         byte_121D0:	dc.b 2
00012903 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012908 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
0001290D 01                         byte_121DB:	dc.b 1
0001290E F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012913 01                         byte_121E1:	dc.b 1
00012914 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001291A 00                         		even
0001291A 00                         		even
0001291A                            
0001291A                            ; ===========================================================================
0001291A                            ; ---------------------------------------------------------------------------
0001291A                            ; Object 62 - gargoyle head (LZ)
0001291A                            ; ---------------------------------------------------------------------------
0001291A                            
0001291A                            Obj62:					; XREF: Obj_Index
0001291A 7000                       		moveq	#0,d0
0001291C 1028 0024                  		move.b	$24(a0),d0
00012920 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012924 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012928 6000 D4DC                  		bra.w	MarkObjGone
0001292C                            ; ===========================================================================
0001292C 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
0001292E 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012930 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012932 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012934                            
00012934 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001293C                            ; ===========================================================================
0001293C                            
0001293C                            Obj62_Main:				; XREF: Obj62_Index
0001293C 5428 0024                  		addq.b	#2,$24(a0)
00012940 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012948 317C 42E9 0002             		move.w	#$42E9,2(a0)
0001294E 0028 0004 0001             		ori.b	#4,1(a0)
00012954 117C 0003 0018             		move.b	#3,$18(a0)
0001295A 117C 0010 0019             		move.b	#$10,$19(a0)
00012960 1028 0028                  		move.b	$28(a0),d0	; get object type
00012964 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012968 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
0001296E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012974 0228 000F 0028             		andi.b	#$F,$28(a0)
0001297A                            
0001297A                            Obj62_MakeFire:				; XREF: Obj62_Index
0001297A 5328 001E                  		subq.b	#1,$1E(a0)
0001297E 6600                       		bne.s	Obj62_NoFire
00012980 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012986 6100 B650                  		bsr.w	ChkObjOnScreen
0001298A 6600                       		bne.s	Obj62_NoFire
0001298C 6100 B856                  		bsr.w	SingleObjLoad
00012990 6600                       		bne.s	Obj62_NoFire
00012992 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012996 5829 0024                  		addq.b	#4,$24(a1)
0001299A 3368 0008 0008             		move.w	8(a0),8(a1)
000129A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000129A6 1368 0001 0001             		move.b	1(a0),1(a1)
000129AC 1368 0022 0022             		move.b	$22(a0),$22(a1)
000129B2                            
000129B2                            Obj62_NoFire:
000129B2 4E75                       		rts	
000129B4                            ; ===========================================================================
000129B4                            
000129B4                            Obj62_FireBall:				; XREF: Obj62_Index
000129B4 5428 0024                  		addq.b	#2,$24(a0)
000129B8 117C 0008 0016             		move.b	#8,$16(a0)
000129BE 117C 0008 0017             		move.b	#8,$17(a0)
000129C4 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000129CC 317C 02E9 0002             		move.w	#$2E9,2(a0)
000129D2 0028 0004 0001             		ori.b	#4,1(a0)
000129D8 117C 0004 0018             		move.b	#4,$18(a0)
000129DE 117C 0098 0020             		move.b	#$98,$20(a0)
000129E4 117C 0008 0019             		move.b	#8,$19(a0)
000129EA 117C 0002 001A             		move.b	#2,$1A(a0)
000129F0 5068 000C                  		addq.w	#8,$C(a0)
000129F4 317C 0200 0010             		move.w	#$200,$10(a0)
000129FA 0828 0000 0022             		btst	#0,$22(a0)
00012A00 6600                       		bne.s	Obj62_Sound
00012A02 4468 0010                  		neg.w	$10(a0)
00012A06                            
00012A06                            Obj62_Sound:
00012A06 303C 00AE                  		move.w	#$AE,d0
00012A0A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012A10                            
00012A10                            Obj62_AniFire:				; XREF: Obj62_Index
00012A10 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012A14 0200 0007                  		andi.b	#7,d0
00012A18 6600                       		bne.s	Obj62_StopFire
00012A1A 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012A20                            
00012A20                            Obj62_StopFire:
00012A20 6100 B316                  		bsr.w	SpeedToPos
00012A24 0828 0000 0022             		btst	#0,$22(a0)
00012A2A 6600                       		bne.s	Obj62_StopFire2
00012A2C 76F8                       		moveq	#-8,d3
00012A2E 6100 0000                  		bsr.w	ObjHitWallLeft
00012A32 4A41                       		tst.w	d1
00012A34 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012A38 4E75                       		rts	
00012A3A                            ; ===========================================================================
00012A3A                            
00012A3A                            Obj62_StopFire2:
00012A3A 7608                       		moveq	#8,d3
00012A3C 6100 0000                  		bsr.w	ObjHitWallRight
00012A40 4A41                       		tst.w	d1
00012A42 6B00 B356                  		bmi.w	DeleteObject
00012A46 4E75                       		rts	
00012A48                            ; ===========================================================================
00012A48                            ; ---------------------------------------------------------------------------
00012A48                            ; Sprite mappings - gargoyle head (LZ)
00012A48                            ; ---------------------------------------------------------------------------
00012A48                            Map_obj62:
00012A48                            	include "_maps\obj62.asm"
00012A48                            ; ---------------------------------------------------------------------------
00012A48                            ; Sprite mappings - gargoyle head (LZ)
00012A48                            ; ---------------------------------------------------------------------------
00012A48 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012A4C 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012A50 03                         byte_12320:	dc.b 3
00012A51 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012A56 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012A5B 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012A60 01                         byte_12330:	dc.b 1
00012A61 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012A66 01                         byte_12336:	dc.b 1
00012A67 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012A6C                            		even
00012A6C                            		even
00012A6C                            
00012A6C                            ; ===========================================================================
00012A6C                            ; ---------------------------------------------------------------------------
00012A6C                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012A6C                            ; ---------------------------------------------------------------------------
00012A6C                            
00012A6C                            Obj63:					; XREF: Obj_Index
00012A6C 7000                       		moveq	#0,d0
00012A6E 1028 0024                  		move.b	$24(a0),d0
00012A72 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012A76 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012A7A 3028 0030                  		move.w	$30(a0),d0
00012A7E 0240 FF80                  		andi.w	#$FF80,d0
00012A82 3238 F700                  		move.w	($FFFFF700).w,d1
00012A86 0441 0080                  		subi.w	#$80,d1
00012A8A 0241 FF80                  		andi.w	#$FF80,d1
00012A8E 9041                       		sub.w	d1,d0
00012A90 0C40 0280                  		cmpi.w	#$280,d0
00012A94 6200                       		bhi.s	loc_1236A
00012A96                            
00012A96                            Obj63_Display:				; XREF: loc_1236A
00012A96 6000 B2C6                  		bra.w	DisplaySprite
00012A9A                            ; ===========================================================================
00012A9A                            
00012A9A                            loc_1236A:				; XREF: Obj63
00012A9A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012AA0 6600                       		bne.s	loc_12378
00012AA2 0C40 FF80                  		cmpi.w	#-$80,d0
00012AA6 64EE                       		bcc.s	Obj63_Display
00012AA8                            
00012AA8                            loc_12378:
00012AA8 1028 002F                  		move.b	$2F(a0),d0
00012AAC 6A00 B2EC                  		bpl.w	DeleteObject
00012AB0 0240 007F                  		andi.w	#$7F,d0
00012AB4 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012AB8 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012ABE 6000 B2DA                  		bra.w	DeleteObject
00012AC2                            ; ===========================================================================
00012AC2 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012AC4 0000                       		dc.w loc_124B2-Obj63_Index
00012AC6 0000                       		dc.w loc_124C2-Obj63_Index
00012AC8 0000                       		dc.w loc_124DE-Obj63_Index
00012ACA                            ; ===========================================================================
00012ACA                            
00012ACA                            Obj63_Main:				; XREF: Obj63_Index
00012ACA 1028 0028                  		move.b	$28(a0),d0
00012ACE 6B00 0000                  		bmi.w	loc_12460
00012AD2 5428 0024                  		addq.b	#2,$24(a0)
00012AD6 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012ADE 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012AE4 0028 0004 0001             		ori.b	#4,1(a0)
00012AEA 117C 0010 0019             		move.b	#$10,$19(a0)
00012AF0 117C 0004 0018             		move.b	#4,$18(a0)
00012AF6 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012AFC 6600                       		bne.s	loc_123E2
00012AFE 5828 0024                  		addq.b	#4,$24(a0)
00012B02 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012B08 117C 0001 0018             		move.b	#1,$18(a0)
00012B0E 6000 0000                  		bra.w	loc_124DE
00012B12                            ; ===========================================================================
00012B12                            
00012B12                            loc_123E2:
00012B12 117C 0004 001A             		move.b	#4,$1A(a0)
00012B18 7000                       		moveq	#0,d0
00012B1A 1028 0028                  		move.b	$28(a0),d0
00012B1E 3200                       		move.w	d0,d1
00012B20 E648                       		lsr.w	#3,d0
00012B22 0240 001E                  		andi.w	#$1E,d0
00012B26 45FA 0000                  		lea	Obj63_Data(pc),a2
00012B2A D4F2 0000                  		adda.w	(a2,d0.w),a2
00012B2E 315A 0038                  		move.w	(a2)+,$38(a0)
00012B32 315A 0030                  		move.w	(a2)+,$30(a0)
00012B36 214A 003C                  		move.l	a2,$3C(a0)
00012B3A 0241 000F                  		andi.w	#$F,d1
00012B3E E549                       		lsl.w	#2,d1
00012B40 1141 0038                  		move.b	d1,$38(a0)
00012B44 117C 0004 003A             		move.b	#4,$3A(a0)
00012B4A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012B4E 6700                       		beq.s	loc_1244C
00012B50 117C 0001 003B             		move.b	#1,$3B(a0)
00012B56 4428 003A                  		neg.b	$3A(a0)
00012B5A 7200                       		moveq	#0,d1
00012B5C 1228 0038                  		move.b	$38(a0),d1
00012B60 D228 003A                  		add.b	$3A(a0),d1
00012B64 B228 0039                  		cmp.b	$39(a0),d1
00012B68 6500                       		bcs.s	loc_12448
00012B6A 1001                       		move.b	d1,d0
00012B6C 7200                       		moveq	#0,d1
00012B6E 4A00                       		tst.b	d0
00012B70 6A00                       		bpl.s	loc_12448
00012B72 1228 0039                  		move.b	$39(a0),d1
00012B76 5901                       		subq.b	#4,d1
00012B78                            
00012B78                            loc_12448:
00012B78 1141 0038                  		move.b	d1,$38(a0)
00012B7C                            
00012B7C                            loc_1244C:
00012B7C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012B82 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012B88 6100 0000                  		bsr.w	Obj63_ChangeDir
00012B8C 6000 0000                  		bra.w	loc_124B2
00012B90                            ; ===========================================================================
00012B90                            
00012B90                            loc_12460:				; XREF: Obj63_Main
00012B90 1140 002F                  		move.b	d0,$2F(a0)
00012B94 0240 007F                  		andi.w	#$7F,d0
00012B98 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012B9C 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012BA2 6600 B1F6                  		bne.w	DeleteObject
00012BA6 D040                       		add.w	d0,d0
00012BA8 0240 001E                  		andi.w	#$1E,d0
00012BAC 0640 0070                  		addi.w	#$70,d0
00012BB0 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012BB6 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012BBA 321A                       		move.w	(a2)+,d1
00012BBC 2248                       		movea.l	a0,a1
00012BBE 6000                       		bra.s	Obj63_MakePtfms
00012BC0                            ; ===========================================================================
00012BC0                            
00012BC0                            Obj63_Loop:
00012BC0 6100 B622                  		bsr.w	SingleObjLoad
00012BC4 6600                       		bne.s	loc_124AA
00012BC6                            
00012BC6                            Obj63_MakePtfms:			; XREF: loc_12460
00012BC6 12BC 0063                  		move.b	#$63,0(a1)
00012BCA 335A 0008                  		move.w	(a2)+,8(a1)
00012BCE 335A 000C                  		move.w	(a2)+,$C(a1)
00012BD2 301A                       		move.w	(a2)+,d0
00012BD4 1340 0028                  		move.b	d0,$28(a1)
00012BD8                            
00012BD8                            loc_124AA:
00012BD8 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012BDC                            
00012BDC 588F                       		addq.l	#4,sp
00012BDE 4E75                       		rts	
00012BE0                            ; ===========================================================================
00012BE0                            
00012BE0                            loc_124B2:				; XREF: Obj63_Index
00012BE0 7200                       		moveq	#0,d1
00012BE2 1228 0019                  		move.b	$19(a0),d1
00012BE6 4EB9 0000 79E8             		jsr	(PlatformObject).l
00012BEC 6000 0000                  		bra.w	sub_12502
00012BF0                            ; ===========================================================================
00012BF0                            
00012BF0                            loc_124C2:				; XREF: Obj63_Index
00012BF0 7200                       		moveq	#0,d1
00012BF2 1228 0019                  		move.b	$19(a0),d1
00012BF6 4EB9 0000 7B5C             		jsr	(ExitPlatform).l
00012BFC 3F28 0008                  		move.w	8(a0),-(sp)
00012C00 6100 0000                  		bsr.w	sub_12502
00012C04 341F                       		move.w	(sp)+,d2
00012C06 4EF9 0000 80C6             		jmp	(MvSonicOnPtfm2).l
00012C0C                            ; ===========================================================================
00012C0C                            
00012C0C                            loc_124DE:				; XREF: Obj63_Index
00012C0C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012C10 0240 0003                  		andi.w	#3,d0
00012C14 6600                       		bne.s	loc_124FC
00012C16 7201                       		moveq	#1,d1
00012C18 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012C1C 6700                       		beq.s	loc_124F2
00012C1E 4401                       		neg.b	d1
00012C20                            
00012C20                            loc_124F2:
00012C20 D328 001A                  		add.b	d1,$1A(a0)
00012C24 0228 0003 001A             		andi.b	#3,$1A(a0)
00012C2A                            
00012C2A                            loc_124FC:
00012C2A 588F                       		addq.l	#4,sp
00012C2C 6000 D1D8                  		bra.w	MarkObjGone
00012C30                            
00012C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012C30                            
00012C30                            
00012C30                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012C30 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012C34 6700                       		beq.s	loc_12520
00012C36 4A28 003B                  		tst.b	$3B(a0)
00012C3A 6600                       		bne.s	loc_12520
00012C3C 117C 0001 003B             		move.b	#1,$3B(a0)
00012C42 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012C48 4428 003A                  		neg.b	$3A(a0)
00012C4C 6000                       		bra.s	loc_12534
00012C4E                            ; ===========================================================================
00012C4E                            
00012C4E                            loc_12520:
00012C4E 3028 0008                  		move.w	8(a0),d0
00012C52 B068 0034                  		cmp.w	$34(a0),d0
00012C56 6600                       		bne.s	loc_1256A
00012C58 3028 000C                  		move.w	$C(a0),d0
00012C5C B068 0036                  		cmp.w	$36(a0),d0
00012C60 6600                       		bne.s	loc_1256A
00012C62                            
00012C62                            loc_12534:
00012C62 7200                       		moveq	#0,d1
00012C64 1228 0038                  		move.b	$38(a0),d1
00012C68 D228 003A                  		add.b	$3A(a0),d1
00012C6C B228 0039                  		cmp.b	$39(a0),d1
00012C70 6500                       		bcs.s	loc_12552
00012C72 1001                       		move.b	d1,d0
00012C74 7200                       		moveq	#0,d1
00012C76 4A00                       		tst.b	d0
00012C78 6A00                       		bpl.s	loc_12552
00012C7A 1228 0039                  		move.b	$39(a0),d1
00012C7E 5901                       		subq.b	#4,d1
00012C80                            
00012C80                            loc_12552:
00012C80 1141 0038                  		move.b	d1,$38(a0)
00012C84 2268 003C                  		movea.l	$3C(a0),a1
00012C88 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012C8E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012C94 6100 0000                  		bsr.w	Obj63_ChangeDir
00012C98                            
00012C98                            loc_1256A:
00012C98 6100 B09E                  		bsr.w	SpeedToPos
00012C9C 4E75                       		rts	
00012C9E                            ; End of function sub_12502
00012C9E                            
00012C9E                            
00012C9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012C9E                            
00012C9E                            
00012C9E                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012C9E 7000                       		moveq	#0,d0
00012CA0 343C FF00                  		move.w	#-$100,d2
00012CA4 3028 0008                  		move.w	8(a0),d0
00012CA8 9068 0034                  		sub.w	$34(a0),d0
00012CAC 6400                       		bcc.s	loc_12584
00012CAE 4440                       		neg.w	d0
00012CB0 4442                       		neg.w	d2
00012CB2                            
00012CB2                            loc_12584:
00012CB2 7200                       		moveq	#0,d1
00012CB4 363C FF00                  		move.w	#-$100,d3
00012CB8 3228 000C                  		move.w	$C(a0),d1
00012CBC 9268 0036                  		sub.w	$36(a0),d1
00012CC0 6400                       		bcc.s	loc_12598
00012CC2 4441                       		neg.w	d1
00012CC4 4443                       		neg.w	d3
00012CC6                            
00012CC6                            loc_12598:
00012CC6 B240                       		cmp.w	d0,d1
00012CC8 6500                       		bcs.s	loc_125C2
00012CCA 3028 0008                  		move.w	8(a0),d0
00012CCE 9068 0034                  		sub.w	$34(a0),d0
00012CD2 6700                       		beq.s	loc_125AE
00012CD4 48C0                       		ext.l	d0
00012CD6 E180                       		asl.l	#8,d0
00012CD8 81C1                       		divs.w	d1,d0
00012CDA 4440                       		neg.w	d0
00012CDC                            
00012CDC                            loc_125AE:
00012CDC 3140 0010                  		move.w	d0,$10(a0)
00012CE0 3143 0012                  		move.w	d3,$12(a0)
00012CE4 4840                       		swap	d0
00012CE6 3140 000A                  		move.w	d0,$A(a0)
00012CEA 4268 000E                  		clr.w	$E(a0)
00012CEE 4E75                       		rts	
00012CF0                            ; ===========================================================================
00012CF0                            
00012CF0                            loc_125C2:				; XREF: Obj63_ChangeDir
00012CF0 3228 000C                  		move.w	$C(a0),d1
00012CF4 9268 0036                  		sub.w	$36(a0),d1
00012CF8 6700                       		beq.s	loc_125D4
00012CFA 48C1                       		ext.l	d1
00012CFC E181                       		asl.l	#8,d1
00012CFE 83C0                       		divs.w	d0,d1
00012D00 4441                       		neg.w	d1
00012D02                            
00012D02                            loc_125D4:
00012D02 3141 0012                  		move.w	d1,$12(a0)
00012D06 3142 0010                  		move.w	d2,$10(a0)
00012D0A 4841                       		swap	d1
00012D0C 3141 000E                  		move.w	d1,$E(a0)
00012D10 4268 000A                  		clr.w	$A(a0)
00012D14 4E75                       		rts	
00012D16                            ; End of function Obj63_ChangeDir
00012D16                            
00012D16                            ; ===========================================================================
00012D16 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012D18 0000                       		dc.w word_12610-Obj63_Data
00012D1A 0000                       		dc.w word_12628-Obj63_Data
00012D1C 0000                       		dc.w word_1263C-Obj63_Data
00012D1E 0000                       		dc.w word_12650-Obj63_Data
00012D20 0000                       		dc.w word_12668-Obj63_Data
00012D22 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012D32 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012D3E 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012D4E 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012D56 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012D6A 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012D7E 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012D96 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012DAA                            
00012DAA                            ; ---------------------------------------------------------------------------
00012DAA                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012DAA                            ; ---------------------------------------------------------------------------
00012DAA                            Map_obj63:
00012DAA                            	include "_maps\obj63.asm"
00012DAA                            ; ---------------------------------------------------------------------------
00012DAA                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012DAA                            ; ---------------------------------------------------------------------------
00012DAA 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012DAE 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012DB2 0000                       		dc.w byte_1269E-Map_obj63
00012DB4 01                         byte_12686:	dc.b 1
00012DB5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012DBA 01                         byte_1268C:	dc.b 1
00012DBB F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012DC0 01                         byte_12692:	dc.b 1
00012DC1 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012DC6 01                         byte_12698:	dc.b 1
00012DC7 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012DCC 01                         byte_1269E:	dc.b 1
00012DCD F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012DD2                            		even
00012DD2                            		even
00012DD2                            
00012DD2                            ; ===========================================================================
00012DD2                            ; ---------------------------------------------------------------------------
00012DD2                            ; Object 64 - bubbles (LZ)
00012DD2                            ; ---------------------------------------------------------------------------
00012DD2                            
00012DD2                            Obj64:					; XREF: Obj_Index
00012DD2 7000                       		moveq	#0,d0
00012DD4 1028 0024                  		move.b	$24(a0),d0
00012DD8 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012DDC 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012DE0                            ; ===========================================================================
00012DE0 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012DE2 0000                       		dc.w Obj64_Animate-Obj64_Index
00012DE4 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012DE6 0000                       		dc.w Obj64_Display2-Obj64_Index
00012DE8 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012DEA 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012DEC                            ; ===========================================================================
00012DEC                            
00012DEC                            Obj64_Main:				; XREF: Obj64_Index
00012DEC 5428 0024                  		addq.b	#2,$24(a0)
00012DF0 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012DF8 317C 8348 0002             		move.w	#$8348,2(a0)
00012DFE 117C 0084 0001             		move.b	#$84,1(a0)
00012E04 117C 0010 0019             		move.b	#$10,$19(a0)
00012E0A 117C 0001 0018             		move.b	#1,$18(a0)
00012E10 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E14 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012E16 5028 0024                  		addq.b	#8,$24(a0)
00012E1A 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012E1E 1140 0032                  		move.b	d0,$32(a0)
00012E22 1140 0033                  		move.b	d0,$33(a0)
00012E26 117C 0006 001C             		move.b	#6,$1C(a0)
00012E2C 6000 0000                  		bra.w	Obj64_BblMaker
00012E30                            ; ===========================================================================
00012E30                            
00012E30                            Obj64_Bubble:				; XREF: Obj64_Main
00012E30 1140 001C                  		move.b	d0,$1C(a0)
00012E34 3168 0008 0030             		move.w	8(a0),$30(a0)
00012E3A 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012E40 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012E46 1140 0026                  		move.b	d0,$26(a0)
00012E4A                            
00012E4A                            Obj64_Animate:				; XREF: Obj64_Index
00012E4A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012E50 4EB9 0000 AE1E             		jsr	AnimateSprite
00012E56 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012E5C 6600                       		bne.s	Obj64_ChkWater
00012E5E 117C 0001 002E             		move.b	#1,$2E(a0)
00012E64                            
00012E64                            Obj64_ChkWater:				; XREF: Obj64_Index
00012E64 3038 F646                  		move.w	($FFFFF646).w,d0
00012E68 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012E6C 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012E6E                            
00012E6E                            Obj64_Burst:				; XREF: Obj64_Wobble
00012E6E 117C 0006 0024             		move.b	#6,$24(a0)
00012E74 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012E78 6000 0000                  		bra.w	Obj64_Display2
00012E7C                            ; ===========================================================================
00012E7C                            
00012E7C                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012E7C 1028 0026                  		move.b	$26(a0),d0
00012E80 5228 0026                  		addq.b	#1,$26(a0)
00012E84 0240 007F                  		andi.w	#$7F,d0
00012E88 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012E8E 1031 0000                  		move.b	(a1,d0.w),d0
00012E92 4880                       		ext.w	d0
00012E94 D068 0030                  		add.w	$30(a0),d0
00012E98 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012E9C 4A28 002E                  		tst.b	$2E(a0)
00012EA0 6700                       		beq.s	Obj64_Display
00012EA2 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012EA6 6700                       		beq.s	Obj64_Display	; if not, branch
00012EA8                            
00012EA8 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012EAC 303C 00AD                  		move.w	#$AD,d0
00012EB0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012EB6 43F8 D000                  		lea	($FFFFD000).w,a1
00012EBA 4269 0010                  		clr.w	$10(a1)
00012EBE 4269 0012                  		clr.w	$12(a1)
00012EC2 4269 0014                  		clr.w	$14(a1)
00012EC6 137C 0015 001C             		move.b	#$15,$1C(a1)
00012ECC 337C 0023 003E             		move.w	#$23,$3E(a1)
00012ED2 137C 0000 003C             		move.b	#0,$3C(a1)
00012ED8 08A9 0005 0022             		bclr	#5,$22(a1)
00012EDE 08A9 0004 0022             		bclr	#4,$22(a1)
00012EE4 0829 0002 0022             		btst	#2,$22(a1)
00012EEA 6700 FF82                  		beq.w	Obj64_Burst
00012EEE 08A9 0002 0022             		bclr	#2,$22(a1)
00012EF4 137C 0013 0016             		move.b	#$13,$16(a1)
00012EFA 137C 0009 0017             		move.b	#9,$17(a1)
00012F00 5B69 000C                  		subq.w	#5,$C(a1)
00012F04 6000 FF68                  		bra.w	Obj64_Burst
00012F08                            ; ===========================================================================
00012F08                            
00012F08                            Obj64_Display:				; XREF: Obj64_Wobble
00012F08 6100 AE2E                  		bsr.w	SpeedToPos
00012F0C 4A28 0001                  		tst.b	1(a0)
00012F10 6A00                       		bpl.s	Obj64_Delete
00012F12 4EFA AE4A                  		jmp	DisplaySprite
00012F16                            ; ===========================================================================
00012F16                            
00012F16                            Obj64_Delete:
00012F16 4EFA AE82                  		jmp	DeleteObject
00012F1A                            ; ===========================================================================
00012F1A                            
00012F1A                            Obj64_Display2:				; XREF: Obj64_Index
00012F1A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012F20 4EB9 0000 AE1E             		jsr	AnimateSprite
00012F26 4A28 0001                  		tst.b	1(a0)
00012F2A 6A00                       		bpl.s	Obj64_Delete2
00012F2C 4EFA AE30                  		jmp	DisplaySprite
00012F30                            ; ===========================================================================
00012F30                            
00012F30                            Obj64_Delete2:
00012F30 4EFA AE68                  		jmp	DeleteObject
00012F34                            ; ===========================================================================
00012F34                            
00012F34                            Obj64_Delete3:				; XREF: Obj64_Index
00012F34 6000 AE64                  		bra.w	DeleteObject
00012F38                            ; ===========================================================================
00012F38                            
00012F38                            Obj64_BblMaker:				; XREF: Obj64_Index
00012F38 4A68 0036                  		tst.w	$36(a0)
00012F3C 6600                       		bne.s	loc_12874
00012F3E 3038 F646                  		move.w	($FFFFF646).w,d0
00012F42 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012F46 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012F4A 4A28 0001                  		tst.b	1(a0)
00012F4E 6A00 0000                  		bpl.w	Obj64_ChkDel
00012F52 5368 0038                  		subq.w	#1,$38(a0)
00012F56 6A00 0000                  		bpl.w	loc_12914
00012F5A 317C 0001 0036             		move.w	#1,$36(a0)
00012F60                            
00012F60                            loc_1283A:
00012F60 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012F66 3200                       		move.w	d0,d1
00012F68 0240 0007                  		andi.w	#7,d0
00012F6C 0C40 0006                  		cmpi.w	#6,d0
00012F70 64EE                       		bcc.s	loc_1283A
00012F72                            
00012F72 1140 0034                  		move.b	d0,$34(a0)
00012F76 0241 000C                  		andi.w	#$C,d1
00012F7A 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012F80 D2C1                       		adda.w	d1,a1
00012F82 2149 003C                  		move.l	a1,$3C(a0)
00012F86 5328 0032                  		subq.b	#1,$32(a0)
00012F8A 6A00                       		bpl.s	loc_12872
00012F8C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012F92 08E8 0007 0036             		bset	#7,$36(a0)
00012F98                            
00012F98                            loc_12872:
00012F98 6000                       		bra.s	loc_1287C
00012F9A                            ; ===========================================================================
00012F9A                            
00012F9A                            loc_12874:				; XREF: Obj64_BblMaker
00012F9A 5368 0038                  		subq.w	#1,$38(a0)
00012F9E 6A00 0000                  		bpl.w	loc_12914
00012FA2                            
00012FA2                            loc_1287C:
00012FA2 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012FA8 0240 001F                  		andi.w	#$1F,d0
00012FAC 3140 0038                  		move.w	d0,$38(a0)
00012FB0 6100 B232                  		bsr.w	SingleObjLoad
00012FB4 6600                       		bne.s	loc_128F8
00012FB6 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012FBA 3368 0008 0008             		move.w	8(a0),8(a1)
00012FC0 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012FC6 0240 000F                  		andi.w	#$F,d0
00012FCA 5140                       		subq.w	#8,d0
00012FCC D169 0008                  		add.w	d0,8(a1)
00012FD0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012FD6 7000                       		moveq	#0,d0
00012FD8 1028 0034                  		move.b	$34(a0),d0
00012FDC 2468 003C                  		movea.l	$3C(a0),a2
00012FE0 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012FE6 0828 0007 0036             		btst	#7,$36(a0)
00012FEC 6700                       		beq.s	loc_128F8
00012FEE 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012FF4 0240 0003                  		andi.w	#3,d0
00012FF8 6600                       		bne.s	loc_128E4
00012FFA 08E8 0006 0036             		bset	#6,$36(a0)
00013000 6600                       		bne.s	loc_128F8
00013002 137C 0002 0028             		move.b	#2,$28(a1)
00013008                            
00013008                            loc_128E4:
00013008 4A28 0034                  		tst.b	$34(a0)
0001300C 6600                       		bne.s	loc_128F8
0001300E 08E8 0006 0036             		bset	#6,$36(a0)
00013014 6600                       		bne.s	loc_128F8
00013016 137C 0002 0028             		move.b	#2,$28(a1)
0001301C                            
0001301C                            loc_128F8:
0001301C 5328 0034                  		subq.b	#1,$34(a0)
00013020 6A00                       		bpl.s	loc_12914
00013022 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00013028 0240 007F                  		andi.w	#$7F,d0
0001302C 0640 0080                  		addi.w	#$80,d0
00013030 D168 0038                  		add.w	d0,$38(a0)
00013034 4268 0036                  		clr.w	$36(a0)
00013038                            
00013038                            loc_12914:
00013038 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001303E 4EB9 0000 AE1E             		jsr	AnimateSprite
00013044                            
00013044                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013044 3028 0008                  		move.w	8(a0),d0
00013048 0240 FF80                  		andi.w	#$FF80,d0
0001304C 3238 F700                  		move.w	($FFFFF700).w,d1
00013050 0441 0080                  		subi.w	#$80,d1
00013054 0241 FF80                  		andi.w	#$FF80,d1
00013058 9041                       		sub.w	d1,d0
0001305A 0C40 0280                  		cmpi.w	#$280,d0
0001305E 6200 AD3A                  		bhi.w	DeleteObject
00013062 3038 F646                  		move.w	($FFFFF646).w,d0
00013066 B068 000C                  		cmp.w	$C(a0),d0
0001306A 6500 ACF2                  		bcs.w	DisplaySprite
0001306E 4E75                       		rts	
00013070                            ; ===========================================================================
00013070                            ; bubble production sequence
00013070                            
00013070                            ; 0 = small bubble, 1 =	large bubble
00013070                            
00013070 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013082                            
00013082                            ; ===========================================================================
00013082                            
00013082                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013082 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013086 6B00                       		bmi.s	loc_12998
00013088 43F8 D000                  		lea	($FFFFD000).w,a1
0001308C 3029 0008                  		move.w	8(a1),d0
00013090 3228 0008                  		move.w	8(a0),d1
00013094 0441 0010                  		subi.w	#$10,d1
00013098 B240                       		cmp.w	d0,d1
0001309A 6400                       		bcc.s	loc_12998
0001309C 0641 0020                  		addi.w	#$20,d1
000130A0 B240                       		cmp.w	d0,d1
000130A2 6500                       		bcs.s	loc_12998
000130A4 3029 000C                  		move.w	$C(a1),d0
000130A8 3228 000C                  		move.w	$C(a0),d1
000130AC B240                       		cmp.w	d0,d1
000130AE 6400                       		bcc.s	loc_12998
000130B0 0641 0010                  		addi.w	#$10,d1
000130B4 B240                       		cmp.w	d0,d1
000130B6 6500                       		bcs.s	loc_12998
000130B8 7001                       		moveq	#1,d0
000130BA 4E75                       		rts	
000130BC                            ; ===========================================================================
000130BC                            
000130BC                            loc_12998:
000130BC 7000                       		moveq	#0,d0
000130BE 4E75                       		rts	
000130C0                            ; ===========================================================================
000130C0                            Ani_obj64:
000130C0                            	include "_anim\obj64.asm"
000130C0                            ; ---------------------------------------------------------------------------
000130C0                            ; Animation script - bubbles (LZ)
000130C0                            ; ---------------------------------------------------------------------------
000130C0 0000                       		dc.w byte_129AA-Ani_obj64
000130C2 0000                       		dc.w byte_129B0-Ani_obj64
000130C4 0000                       		dc.w byte_129B6-Ani_obj64
000130C6 0000                       		dc.w byte_129BE-Ani_obj64
000130C8 0000                       		dc.w byte_129BE-Ani_obj64
000130CA 0000                       		dc.w byte_129C0-Ani_obj64
000130CC 0000                       		dc.w byte_129C6-Ani_obj64
000130CE 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000130D4 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000130DA 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000130E2 04FC                       byte_129BE:	dc.b 4,	$FC
000130E4 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000130EA 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000130F0 00                         		even
000130F0 00                         		even
000130F0                            
000130F0                            ; ---------------------------------------------------------------------------
000130F0                            ; Sprite mappings - bubbles (LZ)
000130F0                            ; ---------------------------------------------------------------------------
000130F0                            Map_obj64:
000130F0                            	include "_maps\obj64.asm"
000130F0                            ; ---------------------------------------------------------------------------
000130F0                            ; Sprite mappings - bubbles (LZ)
000130F0                            ; ---------------------------------------------------------------------------
000130F0 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000130F4 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000130F8 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000130FC 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013100 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013104 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013108 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
0001310C 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013110 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013114 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013118 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
0001311C 0000                       		dc.w byte_12A9C-Map_obj64
0001311E 01                         byte_129FA:	dc.b 1
0001311F FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013124 01                         byte_12A00:	dc.b 1
00013125 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001312A 01                         byte_12A06:	dc.b 1
0001312B FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013130 01                         byte_12A0C:	dc.b 1
00013131 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013136 01                         byte_12A12:	dc.b 1
00013137 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
0001313C 01                         byte_12A18:	dc.b 1
0001313D F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013142 01                         byte_12A1E:	dc.b 1
00013143 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013148 04                         byte_12A24:	dc.b 4
00013149 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
0001314E F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013153 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013158 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
0001315D 04                         byte_12A39:	dc.b 4
0001315E F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013163 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013168 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001316D 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013172 01                         byte_12A4E:	dc.b 1
00013173 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013178 01                         byte_12A54:	dc.b 1
00013179 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001317E 01                         byte_12A5A:	dc.b 1
0001317F F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013184 01                         byte_12A60:	dc.b 1
00013185 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001318A 01                         byte_12A66:	dc.b 1
0001318B F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013190 01                         byte_12A6C:	dc.b 1
00013191 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013196 01                         byte_12A72:	dc.b 1
00013197 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001319C 01                         byte_12A78:	dc.b 1
0001319D F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000131A2 01                         byte_12A7E:	dc.b 1
000131A3 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000131A8 01                         byte_12A84:	dc.b 1
000131A9 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000131AE 01                         byte_12A8A:	dc.b 1
000131AF F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000131B4 01                         byte_12A90:	dc.b 1
000131B5 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000131BA 01                         byte_12A96:	dc.b 1
000131BB F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000131C0 00                         byte_12A9C:	dc.b 0
000131C2 00                         		even
000131C2 00                         		even
000131C2                            
000131C2                            ; ===========================================================================
000131C2                            ; ---------------------------------------------------------------------------
000131C2                            ; Object 65 - waterfalls (LZ)
000131C2                            ; ---------------------------------------------------------------------------
000131C2                            
000131C2                            Obj65:					; XREF: Obj_Index
000131C2 7000                       		moveq	#0,d0
000131C4 1028 0024                  		move.b	$24(a0),d0
000131C8 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000131CC 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000131D0                            ; ===========================================================================
000131D0 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000131D2 0000                       		dc.w Obj65_Animate-Obj65_Index
000131D4 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000131D6 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000131D8 0000                       		dc.w loc_12B36-Obj65_Index
000131DA                            ; ===========================================================================
000131DA                            
000131DA                            Obj65_Main:				; XREF: Obj65_Index
000131DA 5828 0024                  		addq.b	#4,$24(a0)
000131DE 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000131E6 317C 4259 0002             		move.w	#$4259,2(a0)
000131EC 0028 0004 0001             		ori.b	#4,1(a0)
000131F2 117C 0018 0019             		move.b	#$18,$19(a0)
000131F8 117C 0001 0018             		move.b	#1,$18(a0)
000131FE 1028 0028                  		move.b	$28(a0),d0	; get object type
00013202 6A00                       		bpl.s	loc_12AE6
00013204 08E8 0007 0002             		bset	#7,2(a0)
0001320A                            
0001320A                            loc_12AE6:
0001320A 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001320E 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013212 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013216 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013218 4228 0018                  		clr.b	$18(a0)
0001321C 5528 0024                  		subq.b	#2,$24(a0)
00013220 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013226 6700                       		beq.s	loc_12B0A	; if not, branch
00013228 117C 0006 0024             		move.b	#6,$24(a0)
0001322E                            
0001322E                            loc_12B0A:
0001322E 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013234 6700                       		beq.s	Obj65_Animate	; if not, branch
00013236 117C 0008 0024             		move.b	#8,$24(a0)
0001323C                            
0001323C                            Obj65_Animate:				; XREF: Obj65_Index
0001323C 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013242 4EB9 0000 AE1E             		jsr	AnimateSprite
00013248                            
00013248                            Obj65_ChkDel:				; XREF: Obj65_Index
00013248 6000 CBBC                  		bra.w	MarkObjGone
0001324C                            ; ===========================================================================
0001324C                            
0001324C                            Obj65_FixHeight:			; XREF: Obj65_Index
0001324C 3038 F646                  		move.w	($FFFFF646).w,d0
00013250 0440 0010                  		subi.w	#$10,d0
00013254 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013258 60E2                       		bra.s	Obj65_Animate
0001325A                            ; ===========================================================================
0001325A                            
0001325A                            loc_12B36:				; XREF: Obj65_Index
0001325A 08A8 0007 0002             		bclr	#7,2(a0)
00013260 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013266 6600                       		bne.s	Obj65_Animate2
00013268 08E8 0007 0002             		bset	#7,2(a0)
0001326E                            
0001326E                            Obj65_Animate2:
0001326E 60CC                       		bra.s	Obj65_Animate
00013270                            ; ===========================================================================
00013270                            Ani_obj65:
00013270                            	include "_anim\obj65.asm"
00013270                            ; ---------------------------------------------------------------------------
00013270                            ; Animation script - waterfall (LZ)
00013270                            ; ---------------------------------------------------------------------------
00013270 0000                       		dc.w byte_12B4E-Ani_obj65
00013272 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013278 00                         		even
00013278 00                         		even
00013278                            
00013278                            ; ---------------------------------------------------------------------------
00013278                            ; Sprite mappings - waterfalls (LZ)
00013278                            ; ---------------------------------------------------------------------------
00013278                            Map_obj65:
00013278                            	include "_maps\obj65.asm"
00013278                            ; ---------------------------------------------------------------------------
00013278                            ; Sprite mappings - waterfalls (LZ)
00013278                            ; ---------------------------------------------------------------------------
00013278 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001327C 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013280 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013284 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013288 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001328C 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013290 01                         byte_12B6C:	dc.b 1
00013291 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013296 02                         byte_12B72:	dc.b 2
00013297 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001329C 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000132A1 02                         byte_12B7D:	dc.b 2
000132A2 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000132A7 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000132AC 01                         byte_12B88:	dc.b 1
000132AD F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000132B2 02                         byte_12B8E:	dc.b 2
000132B3 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000132B8 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000132BD 01                         byte_12B99:	dc.b 1
000132BE F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000132C3 01                         byte_12B9F:	dc.b 1
000132C4 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000132C9 01                         byte_12BA5:	dc.b 1
000132CA F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000132CF 02                         byte_12BAB:	dc.b 2
000132D0 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000132D5 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000132DA 02                         byte_12BB6:	dc.b 2
000132DB F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000132E0 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000132E5 02                         byte_12BC1:	dc.b 2
000132E6 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000132EB F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000132F0 02                         byte_12BCC:	dc.b 2
000132F1 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000132F6 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000132FC 00                         		even
000132FC 00                         		even
000132FC                            
000132FC                            ; ===========================================================================
000132FC                            ; ---------------------------------------------------------------------------
000132FC                            ; Object 01 - Sonic
000132FC                            ; ---------------------------------------------------------------------------
000132FC                            
000132FC                            Obj01:					; XREF: Obj_Index
000132FC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013300 6700                       		beq.s	Obj01_Normal	; if not, branch
00013302 4EF9 0000 0000             		jmp	DebugMode
00013308                            ; ===========================================================================
00013308                            
00013308                            Obj01_Normal:
00013308 7000                       		moveq	#0,d0
0001330A 1028 0024                  		move.b	$24(a0),d0
0001330E 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013312 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013316                            ; ===========================================================================
00013316 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013318 0000                       		dc.w Obj01_Control-Obj01_Index
0001331A 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001331C 0000                       		dc.w Obj01_Death-Obj01_Index
0001331E 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013320                            ; ===========================================================================
00013320                            
00013320                            Player_Maps:
00013320 0000 0000                  	dc.l	Map_Sonic
00013324 0000 0000                  	dc.l	Map_Sonic ; gronic
00013328                            	; insert player mapping here
00013328                            	
00013328                            Obj01_Main:				; XREF: Obj01_Index
00013328 5428 0024                  		addq.b	#2,$24(a0)
0001332C 117C 0013 0016             		move.b	#$13,$16(a0)
00013332 117C 0009 0017             		move.b	#9,$17(a0)
00013338                            		
00013338 7000                       		moveq	#0,d0
0001333A 1038 FFE8                  		move.b	(v_character),d0
0001333E E548                       		lsl.w	#2,d0
00013340 43FA FFDE                  		lea 	Player_Maps(pc),a1
00013344 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
0001334A                            		
0001334A 317C 0780 0002             		move.w	#$780,2(a0)
00013350 117C 0002 0018             		move.b	#2,$18(a0)
00013356 117C 0018 0019             		move.b	#$18,$19(a0)
0001335C 117C 0004 0001             		move.b	#4,1(a0)
00013362 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013368 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001336E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013374                            
00013374                            Obj01_Control:				; XREF: Obj01_Index
00013374 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013378 6700                       		beq.s	loc_12C58	; if not, branch
0001337A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013380 6700                       		beq.s	loc_12C58	; if not, branch
00013382 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013388 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001338C 4E75                       		rts	
0001338E                            ; ===========================================================================
0001338E                            
0001338E                            loc_12C58:
0001338E 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013392 6600                       		bne.s	loc_12C64	; if yes, branch
00013394 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
0001339A                            
0001339A                            loc_12C64:
0001339A 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000133A0 6600                       		bne.s	loc_12C7E	; if yes, branch
000133A2 7000                       		moveq	#0,d0
000133A4 1028 0022                  		move.b	$22(a0),d0
000133A8 0240 0006                  		andi.w	#6,d0
000133AC 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000133B0 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000133B4                            
000133B4                            loc_12C7E:
000133B4 6100                       		bsr.s	Sonic_Display
000133B6 6100 0000                  		bsr.w	Sonic_RecordPos
000133BA 6100 0000                  		bsr.w	Sonic_Water
000133BE 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000133C4 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000133CA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000133CE 6700                       		beq.s	loc_12CA6
000133D0 4A28 001C                  		tst.b	$1C(a0)
000133D4 6600                       		bne.s	loc_12CA6
000133D6 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000133DC                            
000133DC                            loc_12CA6:
000133DC 6100 0000                  		bsr.w	Sonic_Animate
000133E0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000133E4 6B00                       		bmi.s	loc_12CB6
000133E6 4EB9 0000 0000             		jsr	TouchResponse
000133EC                            
000133EC                            loc_12CB6:
000133EC 6100 0000                  		bsr.w	Sonic_Loops
000133F0 6100 0000                  		bsr.w	LoadSonicDynPLC
000133F4 4E75                       		rts	
000133F6                            ; ===========================================================================
000133F6 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000133F8 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000133FA 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000133FC 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000133FE                            ; ---------------------------------------------------------------------------
000133FE                            ; Music	to play	after invincibility wears off
000133FE                            ; ---------------------------------------------------------------------------
000133FE                            ; ===========================================================================
000133FE                            
000133FE                            Sonic_Display:				; XREF: loc_12C7E
000133FE 3028 0030                  		move.w	$30(a0),d0
00013402 6700                       		beq.s	Obj01_Display
00013404 5368 0030                  		subq.w	#1,$30(a0)
00013408 E648                       		lsr.w	#3,d0
0001340A 6400                       		bcc.s	Obj01_ChkInvin
0001340C                            
0001340C                            Obj01_Display:
0001340C 4EBA A950                  		jsr	DisplaySprite
00013410                            
00013410                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013410                             
00013410                            Obj01_ChkInvin:
00013410 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013414 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013418 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001341C 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013420 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013424 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013428 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001342C 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013430 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013436 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001343A 7000                       		moveq	#0,d0
0001343C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013440                             
00013440 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013446 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013448 43F9 0000 3BDA             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001344E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013450                             
00013450                            Obj01_GetBgm2:
00013450 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013456 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013458 43F9 0000 3BE2             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001345E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013460                             
00013460                            Obj01_GetBgm3:
00013460 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013466 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013468 43F9 0000 3BE8             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001346E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013470                             
00013470                            Obj01_GetBgm4:
00013470 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013476 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013478 43F9 0000 3BEE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001347E                             
0001347E                            Obj01_PlayMusic:
0001347E 1031 0000                  		move.b	(a1,d0.w),d0
00013482 4EB9 0000 15BA             		jsr	(PlaySound).l	; play normal music
00013488                             
00013488                            ; NineKode ends here.
00013488                            
00013488                            Obj01_RmvInvin:
00013488 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001348E                            
0001348E                            Obj01_ChkShoes:
0001348E 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013492 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013494 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013498 6700                       		beq.s	Obj01_ExitChk
0001349A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001349E 6600                       		bne.s	Obj01_ExitChk
000134A0 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000134A6 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000134AC 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000134B2 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000134B8 303C 00E3                  		move.w	#$E3,d0
000134BC 4EF9 0000 15BA             		jmp	(PlaySound).l	; run music at normal speed
000134C2                            ; ===========================================================================
000134C2                            
000134C2                            Obj01_ExitChk:
000134C2 4E75                       		rts	
000134C4                            
000134C4                            ; ---------------------------------------------------------------------------
000134C4                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000134C4                            ; ---------------------------------------------------------------------------
000134C4                            
000134C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134C4                            
000134C4                            
000134C4                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000134C4 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000134C8 43F8 CB00                  		lea	($FFFFCB00).w,a1
000134CC 43F1 0000                  		lea	(a1,d0.w),a1
000134D0 32E8 0008                  		move.w	8(a0),(a1)+
000134D4 32E8 000C                  		move.w	$C(a0),(a1)+
000134D8 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000134DC 4E75                       		rts	
000134DE                            ; End of function Sonic_RecordPos
000134DE                            
000134DE                            ; ---------------------------------------------------------------------------
000134DE                            ; Subroutine for Sonic when he's underwater
000134DE                            ; ---------------------------------------------------------------------------
000134DE                            
000134DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134DE                            
000134DE                            
000134DE                            Sonic_Water:				; XREF: loc_12C7E
000134DE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000134E4 6700                       		beq.s	Obj01_InWater	; if yes, branch
000134E6                            
000134E6                            locret_12D80:
000134E6 4E75                       		rts	
000134E8                            ; ===========================================================================
000134E8                            
000134E8                            Obj01_InWater:
000134E8 3038 F646                  		move.w	($FFFFF646).w,d0
000134EC B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000134F0 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000134F2 08E8 0006 0022             		bset	#6,$22(a0)
000134F8 66EC                       		bne.s	locret_12D80
000134FA 6100 0000                  		bsr.w	ResumeMusic
000134FE 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013504 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001350A 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013510 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013516 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001351C E0E8 0010                  		asr	$10(a0)
00013520 E0E8 0012                  		asr	$12(a0)
00013524 E0E8 0012                  		asr	$12(a0)
00013528 67BC                       		beq.s	locret_12D80
0001352A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013530 303C 00AA                  		move.w	#$AA,d0
00013534 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
0001353A                            ; ===========================================================================
0001353A                            
0001353A                            Obj01_OutWater:
0001353A 08A8 0006 0022             		bclr	#6,$22(a0)
00013540 67A4                       		beq.s	locret_12D80
00013542 6100 0000                  		bsr.w	ResumeMusic
00013546 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001354C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013552 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013558 E1E8 0012                  		asl	$12(a0)
0001355C 6700 FF88                  		beq.w	locret_12D80
00013560 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013566 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001356C 6E00                       		bgt.s	loc_12E0E
0001356E 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013574                            
00013574                            loc_12E0E:
00013574 303C 00AA                  		move.w	#$AA,d0
00013578 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
0001357E                            ; End of function Sonic_Water
0001357E                            
0001357E                            ; ===========================================================================
0001357E                            ; ---------------------------------------------------------------------------
0001357E                            ; Modes	for controlling	Sonic
0001357E                            ; ---------------------------------------------------------------------------
0001357E                            
0001357E                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001357E 6100 0000                  		bsr.w	Sonic_Jump
00013582 6100 0000                  		bsr.w	Sonic_SlopeResist
00013586 6100 0000                  		bsr.w	Sonic_Move
0001358A 6100 0000                  		bsr.w	Sonic_Roll
0001358E 6100 0000                  		bsr.w	Sonic_LevelBound
00013592 4EBA A7A4                  		jsr	SpeedToPos
00013596 6100 0000                  		bsr.w	Sonic_AnglePos
0001359A 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001359E 4E75                       		rts	
000135A0                            ; ===========================================================================
000135A0                            
000135A0                            Obj01_MdJump:				; XREF: Obj01_Modes
000135A0 6100 0000                  		bsr.w	Sonic_JumpHeight
000135A4 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000135A8 6100 0000                  		bsr.w	Sonic_LevelBound
000135AC 4EBA A75E                  		jsr	ObjectFall
000135B0 0828 0006 0022             		btst	#6,$22(a0)
000135B6 6700                       		beq.s	loc_12E5C
000135B8 0468 0028 0012             		subi.w	#$28,$12(a0)
000135BE                            
000135BE                            loc_12E5C:
000135BE 6100 0000                  		bsr.w	Sonic_JumpAngle
000135C2 6100 0000                  		bsr.w	Sonic_Floor
000135C6 4E75                       		rts	
000135C8                            ; ===========================================================================
000135C8                            
000135C8                            Obj01_MdRoll:				; XREF: Obj01_Modes
000135C8 6100 0000                  		bsr.w	Sonic_Jump
000135CC 6100 0000                  		bsr.w	Sonic_RollRepel
000135D0 6100 0000                  		bsr.w	Sonic_RollSpeed
000135D4 6100 0000                  		bsr.w	Sonic_LevelBound
000135D8 4EBA A75E                  		jsr	SpeedToPos
000135DC 6100 0000                  		bsr.w	Sonic_AnglePos
000135E0 6100 0000                  		bsr.w	Sonic_SlopeRepel
000135E4 4E75                       		rts	
000135E6                            ; ===========================================================================
000135E6                            
000135E6                            Obj01_MdJump2:				; XREF: Obj01_Modes
000135E6 6100 0000                  		bsr.w	Sonic_JumpHeight
000135EA 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000135EE 6100 0000                  		bsr.w	Sonic_LevelBound
000135F2 6100 0000                  		bsr.w	Sonic_AirUnroll
000135F6 4EBA A714                  		jsr	ObjectFall
000135FA 0828 0006 0022             		btst	#6,$22(a0)
00013600 6700                       		beq.s	loc_12EA6
00013602 0468 0028 0012             		subi.w	#$28,$12(a0)
00013608                            
00013608                            loc_12EA6:
00013608 6100 0000                  		bsr.w	Sonic_JumpAngle
0001360C 6100 0000                  		bsr.w	Sonic_Floor
00013610 4E75                       		rts	
00013612                            ; ---------------------------------------------------------------------------
00013612                            ; Subroutine to	make Sonic walk/run
00013612                            ; ---------------------------------------------------------------------------
00013612                            
00013612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013612                            
00013612                            
00013612                            Sonic_Move:				; XREF: Obj01_MdNormal
00013612 3C38 F760                  		move.w	($FFFFF760).w,d6
00013616 3A38 F762                  		move.w	($FFFFF762).w,d5
0001361A 3838 F764                  		move.w	($FFFFF764).w,d4
0001361E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013622 6600 0000                  		bne.w	loc_12FEE
00013626 4A68 003E                  		tst.w	$3E(a0)
0001362A 6600 0000                  		bne.w	Obj01_ResetScr
0001362E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013634 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013636 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001363C 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
0001363E 6100 0000                  		bsr.w	Sonic_MoveLeft
00013642                            
00013642                            Obj01_NotLeft:
00013642 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013648 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001364A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013650 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013652 6100 0000                  		bsr.w	Sonic_MoveLeft
00013656 6000                       		bra.s	Obj01_NotRight
00013658                            
00013658                            Obj01_MoveRight:
00013658 6100 0000                  		bsr.w	Sonic_MoveRight
0001365C                            
0001365C                            Obj01_NotRight:
0001365C 1028 0026                  		move.b	$26(a0),d0
00013660 0600 0020                  		addi.b	#$20,d0
00013664 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013668 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001366C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013670 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013674 08A8 0005 0022             		bclr	#5,$22(a0)
0001367A 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013680 0828 0003 0022             		btst	#3,$22(a0)
00013686 6700                       		beq.s	Sonic_Balance
00013688 7000                       		moveq	#0,d0
0001368A 1028 003D                  		move.b	$3D(a0),d0
0001368E ED48                       		lsl.w	#6,d0
00013690 43F8 D000                  		lea	($FFFFD000).w,a1
00013694 43F1 0000                  		lea	(a1,d0.w),a1
00013698 4A29 0022                  		tst.b	$22(a1)
0001369C 6B00                       		bmi.s	Sonic_LookUp
0001369E 7200                       		moveq	#0,d1
000136A0 1229 0019                  		move.b	$19(a1),d1
000136A4 3401                       		move.w	d1,d2
000136A6 D442                       		add.w	d2,d2
000136A8 5942                       		subq.w	#4,d2
000136AA D268 0008                  		add.w	8(a0),d1
000136AE 9269 0008                  		sub.w	8(a1),d1
000136B2 0C41 0004                  		cmpi.w	#4,d1
000136B6 6D00                       		blt.s	loc_12F6A
000136B8 B242                       		cmp.w	d2,d1
000136BA 6C00                       		bge.s	loc_12F5A
000136BC 6000                       		bra.s	Sonic_LookUp
000136BE                            ; ===========================================================================
000136BE                            
000136BE                            Sonic_Balance:
000136BE 4EB9 0000 0000             		jsr	ObjHitFloor
000136C4 0C41 000C                  		cmpi.w	#$C,d1
000136C8 6D00                       		blt.s	Sonic_LookUp
000136CA 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000136D0 6600                       		bne.s	loc_12F62
000136D2                            
000136D2                            loc_12F5A:
000136D2 08A8 0000 0022             		bclr	#0,$22(a0)
000136D8 6000                       		bra.s	loc_12F70
000136DA                            ; ===========================================================================
000136DA                            
000136DA                            loc_12F62:
000136DA 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000136E0 6600                       		bne.s	Sonic_LookUp
000136E2                            
000136E2                            loc_12F6A:
000136E2 08E8 0000 0022             		bset	#0,$22(a0)
000136E8                            
000136E8                            loc_12F70:
000136E8 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000136EE 6000                       		bra.s	Obj01_ResetScr
000136F0                            ; ===========================================================================
000136F0                            
000136F0                            Sonic_LookUp:
000136F0 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000136F6 6700                       		beq.s	Sonic_Duck	; if not, branch
000136F8 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000136FE 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013704 6700                       		beq.s	loc_12FC2
00013706 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001370A 6000                       		bra.s	loc_12FC2
0001370C                            ; ===========================================================================
0001370C                            
0001370C                            Sonic_Duck:
0001370C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013712 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013714 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001371A 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013720 6700                       		beq.s	loc_12FC2
00013722 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013726 6000                       		bra.s	loc_12FC2
00013728                            ; ===========================================================================
00013728                            
00013728                            Obj01_ResetScr:
00013728 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001372E 6700                       		beq.s	loc_12FC2	; if yes, branch
00013730 6400                       		bcc.s	loc_12FBE
00013732 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013736                            
00013736                            loc_12FBE:
00013736 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001373A                            
0001373A                            loc_12FC2:
0001373A 1038 F602                  		move.b	($FFFFF602).w,d0
0001373E 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013742 6600                       		bne.s	loc_12FEE	; if yes, branch
00013744 3028 0014                  		move.w	$14(a0),d0
00013748 6700                       		beq.s	loc_12FEE
0001374A 6B00                       		bmi.s	loc_12FE2
0001374C 9045                       		sub.w	d5,d0
0001374E 6400                       		bcc.s	loc_12FDC
00013750 303C 0000                  		move.w	#0,d0
00013754                            
00013754                            loc_12FDC:
00013754 3140 0014                  		move.w	d0,$14(a0)
00013758 6000                       		bra.s	loc_12FEE
0001375A                            ; ===========================================================================
0001375A                            
0001375A                            loc_12FE2:
0001375A D045                       		add.w	d5,d0
0001375C 6400                       		bcc.s	loc_12FEA
0001375E 303C 0000                  		move.w	#0,d0
00013762                            
00013762                            loc_12FEA:
00013762 3140 0014                  		move.w	d0,$14(a0)
00013766                            
00013766                            loc_12FEE:
00013766 1028 0026                  		move.b	$26(a0),d0
0001376A 4EB9 0000 2C64             		jsr	(CalcSine).l
00013770 C3E8 0014                  		muls.w	$14(a0),d1
00013774 E081                       		asr.l	#8,d1
00013776 3141 0010                  		move.w	d1,$10(a0)
0001377A C1E8 0014                  		muls.w	$14(a0),d0
0001377E E080                       		asr.l	#8,d0
00013780 3140 0012                  		move.w	d0,$12(a0)
00013784                            
00013784                            loc_1300C:
00013784 1028 0026                  		move.b	$26(a0),d0
00013788 0600 0040                  		addi.b	#$40,d0
0001378C 6B00                       		bmi.s	locret_1307C
0001378E 123C 0040                  		move.b	#$40,d1
00013792 4A68 0014                  		tst.w	$14(a0)
00013796 6700                       		beq.s	locret_1307C
00013798 6B00                       		bmi.s	loc_13024
0001379A 4441                       		neg.w	d1
0001379C                            
0001379C                            loc_13024:
0001379C 1028 0026                  		move.b	$26(a0),d0
000137A0 D001                       		add.b	d1,d0
000137A2 3F00                       		move.w	d0,-(sp)
000137A4 6100 0000                  		bsr.w	Sonic_WalkSpeed
000137A8 301F                       		move.w	(sp)+,d0
000137AA 4A41                       		tst.w	d1
000137AC 6A00                       		bpl.s	locret_1307C
000137AE E141                       		asl.w	#8,d1
000137B0 0600 0020                  		addi.b	#$20,d0
000137B4 0200 00C0                  		andi.b	#$C0,d0
000137B8 6700                       		beq.s	loc_13078
000137BA 0C00 0040                  		cmpi.b	#$40,d0
000137BE 6700                       		beq.s	loc_13066
000137C0 0C00 0080                  		cmpi.b	#$80,d0
000137C4 6700                       		beq.s	loc_13060
000137C6 D368 0010                  		add.w	d1,$10(a0)
000137CA 08E8 0005 0022             		bset	#5,$22(a0)
000137D0 317C 0000 0014             		move.w	#0,$14(a0)
000137D6 4E75                       		rts	
000137D8                            ; ===========================================================================
000137D8                            
000137D8                            loc_13060:
000137D8 9368 0012                  		sub.w	d1,$12(a0)
000137DC 4E75                       		rts	
000137DE                            ; ===========================================================================
000137DE                            
000137DE                            loc_13066:
000137DE 9368 0010                  		sub.w	d1,$10(a0)
000137E2 08E8 0005 0022             		bset	#5,$22(a0)
000137E8 317C 0000 0014             		move.w	#0,$14(a0)
000137EE 4E75                       		rts	
000137F0                            ; ===========================================================================
000137F0                            
000137F0                            loc_13078:
000137F0 D368 0012                  		add.w	d1,$12(a0)
000137F4                            
000137F4                            locret_1307C:
000137F4 4E75                       		rts	
000137F6                            ; End of function Sonic_Move
000137F6                            
000137F6                            
000137F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137F6                            
000137F6                            
000137F6                            Sonic_MoveLeft:				; XREF: Sonic_Move
000137F6 3028 0014                  		move.w	$14(a0),d0
000137FA 6700                       		beq.s	loc_13086
000137FC 6A00                       		bpl.s	loc_130B2
000137FE                            
000137FE                            loc_13086:
000137FE 08E8 0000 0022             		bset	#0,$22(a0)
00013804 6600                       		bne.s	loc_1309A
00013806 08A8 0005 0022             		bclr	#5,$22(a0)
0001380C 117C 0001 001D             		move.b	#1,$1D(a0)
00013812                            
00013812                            loc_1309A:
00013812 9045                       		sub.w	d5,d0
00013814 3206                       		move.w	d6,d1
00013816 4441                       		neg.w	d1
00013818 B041                       		cmp.w	d1,d0
0001381A 6E00                       		bgt.s	loc_130A6
0001381C 3001                       		move.w	d1,d0
0001381E                            
0001381E                            loc_130A6:
0001381E 3140 0014                  		move.w	d0,$14(a0)
00013822 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013828 4E75                       		rts	
0001382A                            ; ===========================================================================
0001382A                            
0001382A                            loc_130B2:				; XREF: Sonic_MoveLeft
0001382A 9044                       		sub.w	d4,d0
0001382C 6400                       		bcc.s	loc_130BA
0001382E 303C FF80                  		move.w	#-$80,d0
00013832                            
00013832                            loc_130BA:
00013832 3140 0014                  		move.w	d0,$14(a0)
00013836 1028 0026                  		move.b	$26(a0),d0
0001383A 0600 0020                  		addi.b	#$20,d0
0001383E 0200 00C0                  		andi.b	#$C0,d0
00013842 6600                       		bne.s	locret_130E8
00013844 0C40 0400                  		cmpi.w	#$400,d0
00013848 6D00                       		blt.s	locret_130E8
0001384A 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013850 08A8 0000 0022             		bclr	#0,$22(a0)
00013856 303C 00A4                  		move.w	#$A4,d0
0001385A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
00013860                            
00013860                            locret_130E8:
00013860 4E75                       		rts	
00013862                            ; End of function Sonic_MoveLeft
00013862                            
00013862                            
00013862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013862                            
00013862                            
00013862                            Sonic_MoveRight:			; XREF: Sonic_Move
00013862 3028 0014                  		move.w	$14(a0),d0
00013866 6B00                       		bmi.s	loc_13118
00013868 08A8 0000 0022             		bclr	#0,$22(a0)
0001386E 6700                       		beq.s	loc_13104
00013870 08A8 0005 0022             		bclr	#5,$22(a0)
00013876 117C 0001 001D             		move.b	#1,$1D(a0)
0001387C                            
0001387C                            loc_13104:
0001387C D045                       		add.w	d5,d0
0001387E B046                       		cmp.w	d6,d0
00013880 6D00                       		blt.s	loc_1310C
00013882 3006                       		move.w	d6,d0
00013884                            
00013884                            loc_1310C:
00013884 3140 0014                  		move.w	d0,$14(a0)
00013888 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001388E 4E75                       		rts	
00013890                            ; ===========================================================================
00013890                            
00013890                            loc_13118:				; XREF: Sonic_MoveRight
00013890 D044                       		add.w	d4,d0
00013892 6400                       		bcc.s	loc_13120
00013894 303C 0080                  		move.w	#$80,d0
00013898                            
00013898                            loc_13120:
00013898 3140 0014                  		move.w	d0,$14(a0)
0001389C 1028 0026                  		move.b	$26(a0),d0
000138A0 0600 0020                  		addi.b	#$20,d0
000138A4 0200 00C0                  		andi.b	#$C0,d0
000138A8 6600                       		bne.s	locret_1314E
000138AA 0C40 FC00                  		cmpi.w	#-$400,d0
000138AE 6E00                       		bgt.s	locret_1314E
000138B0 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000138B6 08E8 0000 0022             		bset	#0,$22(a0)
000138BC 303C 00A4                  		move.w	#$A4,d0
000138C0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
000138C6                            
000138C6                            locret_1314E:
000138C6 4E75                       		rts	
000138C8                            ; End of function Sonic_MoveRight
000138C8                            
000138C8                            ; ---------------------------------------------------------------------------
000138C8                            ; Subroutine to	change Sonic's speed as he rolls
000138C8                            ; ---------------------------------------------------------------------------
000138C8                            
000138C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138C8                            
000138C8                            
000138C8                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000138C8 3C38 F760                  		move.w	($FFFFF760).w,d6
000138CC E346                       		asl.w	#1,d6
000138CE 3A38 F762                  		move.w	($FFFFF762).w,d5
000138D2 E245                       		asr.w	#1,d5
000138D4 3838 F764                  		move.w	($FFFFF764).w,d4
000138D8 E444                       		asr.w	#2,d4
000138DA 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000138DE 6600 0000                  		bne.w	loc_131CC
000138E2 4A68 003E                  		tst.w	$3E(a0)
000138E6 6600                       		bne.s	loc_13188
000138E8 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000138EE 6700                       		beq.s	loc_1317C	; if not, branch
000138F0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138F6 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000138F8 6100 0000                  		bsr.w	Sonic_RollLeft
000138FC                            
000138FC                            loc_1317C:
000138FC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013902 6700                       		beq.s	loc_13188	; if not, branch
00013904 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001390A 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
0001390C 6100 0000                  		bsr.w	Sonic_RollLeft
00013910 6000                       		bra.s	loc_13188
00013912                            
00013912                            SonicRS_RollRight:
00013912 6100 0000                  		bsr.w	Sonic_RollRight
00013916                            
00013916                            loc_13188:
00013916 3028 0014                  		move.w	$14(a0),d0
0001391A 6700                       		beq.s	loc_131AA
0001391C 6B00                       		bmi.s	loc_1319E
0001391E 9045                       		sub.w	d5,d0
00013920 6400                       		bcc.s	loc_13198
00013922 303C 0000                  		move.w	#0,d0
00013926                            
00013926                            loc_13198:
00013926 3140 0014                  		move.w	d0,$14(a0)
0001392A 6000                       		bra.s	loc_131AA
0001392C                            ; ===========================================================================
0001392C                            
0001392C                            loc_1319E:				; XREF: Sonic_RollSpeed
0001392C D045                       		add.w	d5,d0
0001392E 6400                       		bcc.s	loc_131A6
00013930 303C 0000                  		move.w	#0,d0
00013934                            
00013934                            loc_131A6:
00013934 3140 0014                  		move.w	d0,$14(a0)
00013938                            
00013938                            loc_131AA:
00013938 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001393C 6600                       		bne.s	loc_131CC	; if yes, branch
0001393E 08A8 0002 0022             		bclr	#2,$22(a0)
00013944 117C 0013 0016             		move.b	#$13,$16(a0)
0001394A 117C 0009 0017             		move.b	#9,$17(a0)
00013950 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013956 5B68 000C                  		subq.w	#5,$C(a0)
0001395A                            
0001395A                            loc_131CC:
0001395A 1028 0026                  		move.b	$26(a0),d0
0001395E 4EB9 0000 2C64             		jsr	(CalcSine).l
00013964 C1E8 0014                  		muls.w	$14(a0),d0
00013968 E080                       		asr.l	#8,d0
0001396A 3140 0012                  		move.w	d0,$12(a0)
0001396E C3E8 0014                  		muls.w	$14(a0),d1
00013972 E081                       		asr.l	#8,d1
00013974 0C41 1000                  		cmpi.w	#$1000,d1
00013978 6F00                       		ble.s	loc_131F0
0001397A 323C 1000                  		move.w	#$1000,d1
0001397E                            
0001397E                            loc_131F0:
0001397E 0C41 F000                  		cmpi.w	#-$1000,d1
00013982 6C00                       		bge.s	loc_131FA
00013984 323C F000                  		move.w	#-$1000,d1
00013988                            
00013988                            loc_131FA:
00013988 3141 0010                  		move.w	d1,$10(a0)
0001398C 6000 FDF6                  		bra.w	loc_1300C
00013990                            ; End of function Sonic_RollSpeed
00013990                            
00013990                            
00013990                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013990                            
00013990                            
00013990                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013990 3028 0014                  		move.w	$14(a0),d0
00013994 6700                       		beq.s	loc_1320A
00013996 6A00                       		bpl.s	loc_13218
00013998                            
00013998                            loc_1320A:
00013998 08E8 0000 0022             		bset	#0,$22(a0)
0001399E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139A4 4E75                       		rts	
000139A6                            ; ===========================================================================
000139A6                            
000139A6                            loc_13218:
000139A6 9044                       		sub.w	d4,d0
000139A8 6400                       		bcc.s	loc_13220
000139AA 303C FF80                  		move.w	#-$80,d0
000139AE                            
000139AE                            loc_13220:
000139AE 3140 0014                  		move.w	d0,$14(a0)
000139B2 4E75                       		rts	
000139B4                            ; End of function Sonic_RollLeft
000139B4                            
000139B4                            
000139B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139B4                            
000139B4                            
000139B4                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000139B4 3028 0014                  		move.w	$14(a0),d0
000139B8 6B00                       		bmi.s	loc_1323A
000139BA 08A8 0000 0022             		bclr	#0,$22(a0)
000139C0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139C6 4E75                       		rts	
000139C8                            ; ===========================================================================
000139C8                            
000139C8                            loc_1323A:
000139C8 D044                       		add.w	d4,d0
000139CA 6400                       		bcc.s	loc_13242
000139CC 303C 0080                  		move.w	#$80,d0
000139D0                            
000139D0                            loc_13242:
000139D0 3140 0014                  		move.w	d0,$14(a0)
000139D4 4E75                       		rts	
000139D6                            ; End of function Sonic_RollRight
000139D6                            
000139D6                            Sonic_AirUnroll:
000139D6                            		
000139D6 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
000139DA 6600                       		bne.s	@timer
000139DC 1038 F605                  		move.b	($FFFFF605).w,d0
000139E0 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
000139E4 6700                       		beq.s	@end	; if not, branch
000139E6 08A8 0002 0022             		bclr	#2,$22(a0)
000139EC 117C 0013 0016             		move.b	#$13,$16(a0)
000139F2 117C 0009 0017             		move.b	#9,$17(a0)
000139F8 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
000139FE 303C 00A5                  		move.w	#$A5,d0
00013A02 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play fart sound
00013A08 2028 0010                  		move.l	$10(a0),d0
00013A0C D080                       		add.l	d0,d0
00013A0E 2140 0010                  		move.l	d0,$10(a0)
00013A12 5B68 000C                  		subq.w	#5,$C(a0)
00013A16                            	@end:
00013A16 4E75                       		rts
00013A18                            	@timer:
00013A18 5328 003A                  		subq.b	#1,$3A(a0)
00013A1C 4E75                       		rts
00013A1E                            
00013A1E                            ; ---------------------------------------------------------------------------
00013A1E                            ; Subroutine to	change Sonic's direction while jumping
00013A1E                            ; ---------------------------------------------------------------------------
00013A1E                            
00013A1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A1E                            
00013A1E                            
00013A1E                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A1E 3C38 F760                  		move.w	($FFFFF760).w,d6
00013A22 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A26 E345                       		asl.w	#1,d5
00013A28 0828 0004 0022             		btst	#4,$22(a0)
00013A2E 6600                       		bne.s	Obj01_ResetScr2
00013A30 3028 0010                  		move.w	$10(a0),d0
00013A34 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A3A 6700                       		beq.s	loc_13278	; if not, branch
00013A3C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A42 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013A44 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013A48 6E00                       		bgt.s	loc_13278
00013A4A 3001                       		move.w	d1,d0
00013A4C                            
00013A4C                            loc_13278:
00013A4C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A52 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013A54 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A5A 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013A5C 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013A60 6E00                       		bgt.s	Obj01_JumpMove
00013A62 3001                       		move.w	d1,d0
00013A64 6000                       		bra.s	Obj01_JumpMove
00013A66                            
00013A66                            SonicCJD_JumpLeft:
00013A66 08E8 0000 0022             		bset	#0,$22(a0)
00013A6C 9045                       		sub.w	d5,d0
00013A6E 3206                       		move.w	d6,d1
00013A70 4441                       		neg.w	d1
00013A72 B041                       		cmp.w	d1,d0
00013A74                            		; bgt.s	loc_13278
00013A74                            		; move.w	d1,d0
00013A74 4E75                       		rts
00013A76                            
00013A76                            SonicCJD_JumpRight:
00013A76 08A8 0000 0022             		bclr	#0,$22(a0)
00013A7C D045                       		add.w	d5,d0
00013A7E B046                       		cmp.w	d6,d0
00013A80 6D00                       		blt.s	Obj01_JumpMove
00013A82 3006                       		move.w	d6,d0
00013A84                            
00013A84                            Obj01_JumpMove:
00013A84 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013A88                            
00013A88                            Obj01_ResetScr2:
00013A88 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013A8E 6700                       		beq.s	loc_132A4	; if yes, branch
00013A90 6400                       		bcc.s	loc_132A0
00013A92 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013A96                            
00013A96                            loc_132A0:
00013A96 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013A9A                            
00013A9A                            loc_132A4:
00013A9A 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013AA0 6500                       		bcs.s	locret_132D2	; if yes, branch
00013AA2 3028 0010                  		move.w	$10(a0),d0
00013AA6 3200                       		move.w	d0,d1
00013AA8 EA41                       		asr.w	#5,d1
00013AAA 6700                       		beq.s	locret_132D2
00013AAC 6B00                       		bmi.s	loc_132C6
00013AAE 9041                       		sub.w	d1,d0
00013AB0 6400                       		bcc.s	loc_132C0
00013AB2 303C 0000                  		move.w	#0,d0
00013AB6                            
00013AB6                            loc_132C0:
00013AB6 3140 0010                  		move.w	d0,$10(a0)
00013ABA 4E75                       		rts	
00013ABC                            ; ===========================================================================
00013ABC                            
00013ABC                            loc_132C6:
00013ABC 9041                       		sub.w	d1,d0
00013ABE 6500                       		bcs.s	loc_132CE
00013AC0 303C 0000                  		move.w	#0,d0
00013AC4                            
00013AC4                            loc_132CE:
00013AC4 3140 0010                  		move.w	d0,$10(a0)
00013AC8                            
00013AC8                            locret_132D2:
00013AC8 4E75                       		rts	
00013ACA                            ; End of function Sonic_ChgJumpDir
00013ACA                            
00013ACA                            ; ===========================================================================
00013ACA                            ; ---------------------------------------------------------------------------
00013ACA                            ; Unused subroutine to squash Sonic
00013ACA                            ; ---------------------------------------------------------------------------
00013ACA 1028 0026                  		move.b	$26(a0),d0
00013ACE 0600 0020                  		addi.b	#$20,d0
00013AD2 0200 00C0                  		andi.b	#$C0,d0
00013AD6 6600                       		bne.s	locret_13302
00013AD8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013ADC 4A41                       		tst.w	d1
00013ADE 6A00                       		bpl.s	locret_13302
00013AE0 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013AE6 317C 0000 0010             		move.w	#0,$10(a0)
00013AEC 317C 0000 0012             		move.w	#0,$12(a0)
00013AF2 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013AF8                            
00013AF8                            locret_13302:
00013AF8 4E75                       		rts	
00013AFA                            ; ---------------------------------------------------------------------------
00013AFA                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013AFA                            ; ---------------------------------------------------------------------------
00013AFA                            
00013AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AFA                            
00013AFA                            
00013AFA                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013AFA 2228 0008                  		move.l	8(a0),d1
00013AFE 3028 0010                  		move.w	$10(a0),d0
00013B02 48C0                       		ext.l	d0
00013B04 E180                       		asl.l	#8,d0
00013B06 D280                       		add.l	d0,d1
00013B08 4841                       		swap	d1
00013B0A 3038 F728                  		move.w	($FFFFF728).w,d0
00013B0E 0640 0010                  		addi.w	#$10,d0
00013B12 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013B14 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013B16 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013B1A 0640 0128                  		addi.w	#$128,d0
00013B1E 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013B22 6600                       		bne.s	loc_13332
00013B24 0640 0040                  		addi.w	#$40,d0
00013B28                            
00013B28                            loc_13332:
00013B28 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013B2A 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013B2C                            
00013B2C                            loc_13336:
00013B2C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013B30 0640 00E0                  		addi.w	#$E0,d0
00013B34 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013B38 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013B3A 4E75                       		rts	
00013B3C                            ; ===========================================================================
00013B3C                            
00013B3C                            Boundary_Bottom:
00013B3C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013B42 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013B46 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013B4C 6500 0000                  		bcs.w	KillSonic
00013B50 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013B54 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013B5A 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013B60 4E75                       		rts	
00013B62                            ; ===========================================================================
00013B62                            
00013B62                            Boundary_Sides:
00013B62 3140 0008                  		move.w	d0,8(a0)
00013B66 317C 0000 000A             		move.w	#0,$A(a0)
00013B6C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013B72 317C 0000 0014             		move.w	#0,$14(a0)
00013B78 60B2                       		bra.s	loc_13336
00013B7A                            ; End of function Sonic_LevelBound
00013B7A                            
00013B7A                            ; ---------------------------------------------------------------------------
00013B7A                            ; Subroutine allowing Sonic to roll when he's moving
00013B7A                            ; ---------------------------------------------------------------------------
00013B7A                            
00013B7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B7A                            
00013B7A                            
00013B7A                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013B7A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013B7E 6600                       		bne.s	Obj01_NoRoll
00013B80 3028 0014                  		move.w	$14(a0),d0
00013B84 6A00                       		bpl.s	loc_13392
00013B86 4440                       		neg.w	d0
00013B88                            
00013B88                            loc_13392:
00013B88 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013B8C 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013B8E 1038 F602                  		move.b	($FFFFF602).w,d0
00013B92 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013B96 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013B98 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013B9E 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013BA0                            
00013BA0                            Obj01_NoRoll:
00013BA0 4E75                       		rts	
00013BA2                            ; ===========================================================================
00013BA2                            
00013BA2                            Obj01_ChkRoll:
00013BA2 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013BA8 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013BAA 4E75                       		rts	
00013BAC                            ; ===========================================================================
00013BAC                            
00013BAC                            Obj01_DoRoll:
00013BAC 08E8 0002 0022             		bset	#2,$22(a0)
00013BB2 117C 000E 0016             		move.b	#$E,$16(a0)
00013BB8 117C 0007 0017             		move.b	#7,$17(a0)
00013BBE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013BC4 5A68 000C                  		addq.w	#5,$C(a0)
00013BC8 303C 00BE                  		move.w	#$BE,d0
00013BCC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rolling sound
00013BD2 4A68 0014                  		tst.w	$14(a0)
00013BD6 6600                       		bne.s	locret_133E8
00013BD8 317C 0200 0014             		move.w	#$200,$14(a0)
00013BDE                            
00013BDE                            locret_133E8:
00013BDE 4E75                       		rts	
00013BE0                            ; End of function Sonic_Roll
00013BE0                            
00013BE0                            ; ---------------------------------------------------------------------------
00013BE0                            ; Subroutine allowing Sonic to jump
00013BE0                            ; ---------------------------------------------------------------------------
00013BE0                            
00013BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BE0                            
00013BE0                            
00013BE0                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013BE0 1038 F603                  		move.b	($FFFFF603).w,d0
00013BE4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013BE8 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013BEC 7000                       		moveq	#0,d0
00013BEE 1028 0026                  		move.b	$26(a0),d0
00013BF2 0600 0080                  		addi.b	#$80,d0
00013BF6 6100 0000                  		bsr.w	sub_14D48
00013BFA 0C41 0006                  		cmpi.w	#6,d1
00013BFE 6D00 0000                  		blt.w	locret_1348E
00013C02 343C 0680                  		move.w	#$680,d2
00013C06 0828 0006 0022             		btst	#6,$22(a0)
00013C0C 6700                       		beq.s	loc_1341C
00013C0E 343C 0380                  		move.w	#$380,d2
00013C12                            
00013C12                            loc_1341C:
00013C12 7000                       		moveq	#0,d0
00013C14 1028 0026                  		move.b	$26(a0),d0
00013C18 0400 0040                  		subi.b	#$40,d0
00013C1C 4EB9 0000 2C64             		jsr	(CalcSine).l
00013C22 C3C2                       		muls.w	d2,d1
00013C24 E081                       		asr.l	#8,d1
00013C26 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013C2A C1C2                       		muls.w	d2,d0
00013C2C E080                       		asr.l	#8,d0
00013C2E D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013C32 08E8 0001 0022             		bset	#1,$22(a0)
00013C38 08A8 0005 0022             		bclr	#5,$22(a0)
00013C3E 588F                       		addq.l	#4,sp
00013C40 117C 0001 003C             		move.b	#1,$3C(a0)
00013C46 4228 0038                  		clr.b	$38(a0)
00013C4A 303C 00A0                  		move.w	#$A0,d0
00013C4E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
00013C54 117C 0013 0016             		move.b	#$13,$16(a0)
00013C5A 117C 0009 0017             		move.b	#9,$17(a0)
00013C60 0828 0002 0022             		btst	#2,$22(a0)
00013C66 6600                       		bne.s	loc_13490
00013C68 117C 000E 0016             		move.b	#$E,$16(a0)
00013C6E 117C 0007 0017             		move.b	#7,$17(a0)
00013C74 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013C7A 08E8 0002 0022             		bset	#2,$22(a0)
00013C80 5A68 000C                  		addq.w	#5,$C(a0)
00013C84 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013C8A                            
00013C8A                            locret_1348E:
00013C8A 4E75                       		rts	
00013C8C                            ; ===========================================================================
00013C8C                            
00013C8C                            loc_13490:
00013C8C 08E8 0004 0022             		bset	#4,$22(a0)
00013C92 4E75                       		rts	
00013C94                            ; End of function Sonic_Jump
00013C94                            
00013C94                            
00013C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C94                            
00013C94                            
00013C94                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013C94 4A28 003C                  		tst.b	$3C(a0)
00013C98 6700                       		beq.s	loc_134C4
00013C9A 323C FC00                  		move.w	#-$400,d1
00013C9E 0828 0006 0022             		btst	#6,$22(a0)
00013CA4 6700                       		beq.s	loc_134AE
00013CA6 323C FE00                  		move.w	#-$200,d1
00013CAA                            
00013CAA                            loc_134AE:
00013CAA B268 0012                  		cmp.w	$12(a0),d1
00013CAE 6F00                       		ble.s	locret_134C2
00013CB0 1038 F602                  		move.b	($FFFFF602).w,d0
00013CB4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013CB8 6600                       		bne.s	locret_134C2	; if yes, branch
00013CBA 3141 0012                  		move.w	d1,$12(a0)
00013CBE                            
00013CBE                            locret_134C2:
00013CBE 4E75                       		rts	
00013CC0                            ; ===========================================================================
00013CC0                            
00013CC0                            loc_134C4:
00013CC0 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013CC6 6C00                       		bge.s	locret_134D2
00013CC8 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013CCE                            
00013CCE                            locret_134D2:
00013CCE 4E75                       		rts	
00013CD0                            ; End of function Sonic_JumpHeight
00013CD0                            
00013CD0                            ; ---------------------------------------------------------------------------
00013CD0                            ; Subroutine to	slow Sonic walking up a	slope
00013CD0                            ; ---------------------------------------------------------------------------
00013CD0                            
00013CD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CD0                            
00013CD0                            
00013CD0                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013CD0 1028 0026                  		move.b	$26(a0),d0
00013CD4 0600 0060                  		addi.b	#$60,d0
00013CD8 0C00 00C0                  		cmpi.b	#$C0,d0
00013CDC 6400                       		bcc.s	locret_13508
00013CDE 1028 0026                  		move.b	$26(a0),d0
00013CE2 4EB9 0000 2C64             		jsr	(CalcSine).l
00013CE8 C1FC 0020                  		muls.w	#$20,d0
00013CEC E080                       		asr.l	#8,d0
00013CEE 4A68 0014                  		tst.w	$14(a0)
00013CF2 6700                       		beq.s	locret_13508
00013CF4 6B00                       		bmi.s	loc_13504
00013CF6 4A40                       		tst.w	d0
00013CF8 6700                       		beq.s	locret_13502
00013CFA D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013CFE                            
00013CFE                            locret_13502:
00013CFE 4E75                       		rts	
00013D00                            ; ===========================================================================
00013D00                            
00013D00                            loc_13504:
00013D00 D168 0014                  		add.w	d0,$14(a0)
00013D04                            
00013D04                            locret_13508:
00013D04 4E75                       		rts	
00013D06                            ; End of function Sonic_SlopeResist
00013D06                            
00013D06                            ; ---------------------------------------------------------------------------
00013D06                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013D06                            ; ---------------------------------------------------------------------------
00013D06                            
00013D06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D06                            
00013D06                            
00013D06                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013D06 1028 0026                  		move.b	$26(a0),d0
00013D0A 0600 0060                  		addi.b	#$60,d0
00013D0E 0C00 00C0                  		cmpi.b	#-$40,d0
00013D12 6400                       		bcc.s	locret_13544
00013D14 1028 0026                  		move.b	$26(a0),d0
00013D18 4EB9 0000 2C64             		jsr	(CalcSine).l
00013D1E C1FC 0050                  		muls.w	#$50,d0
00013D22 E080                       		asr.l	#8,d0
00013D24 4A68 0014                  		tst.w	$14(a0)
00013D28 6B00                       		bmi.s	loc_1353A
00013D2A 4A40                       		tst.w	d0
00013D2C 6A00                       		bpl.s	loc_13534
00013D2E E480                       		asr.l	#2,d0
00013D30                            
00013D30                            loc_13534:
00013D30 D168 0014                  		add.w	d0,$14(a0)
00013D34 4E75                       		rts	
00013D36                            ; ===========================================================================
00013D36                            
00013D36                            loc_1353A:
00013D36 4A40                       		tst.w	d0
00013D38 6B00                       		bmi.s	loc_13540
00013D3A E480                       		asr.l	#2,d0
00013D3C                            
00013D3C                            loc_13540:
00013D3C D168 0014                  		add.w	d0,$14(a0)
00013D40                            
00013D40                            locret_13544:
00013D40 4E75                       		rts	
00013D42                            ; End of function Sonic_RollRepel
00013D42                            
00013D42                            ; ---------------------------------------------------------------------------
00013D42                            ; Subroutine to	push Sonic down	a slope
00013D42                            ; ---------------------------------------------------------------------------
00013D42                            
00013D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D42                            
00013D42                            
00013D42                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013D42 4E71                       		nop	
00013D44 4A28 0038                  		tst.b	$38(a0)
00013D48 6600                       		bne.s	locret_13580
00013D4A 4A68 003E                  		tst.w	$3E(a0)
00013D4E 6600                       		bne.s	loc_13582
00013D50 1028 0026                  		move.b	$26(a0),d0
00013D54 0600 0020                  		addi.b	#$20,d0
00013D58 0200 00C0                  		andi.b	#$C0,d0
00013D5C 6700                       		beq.s	locret_13580
00013D5E 3028 0014                  		move.w	$14(a0),d0
00013D62 6A00                       		bpl.s	loc_1356A
00013D64 4440                       		neg.w	d0
00013D66                            
00013D66                            loc_1356A:
00013D66 0C40 0280                  		cmpi.w	#$280,d0
00013D6A 6400                       		bcc.s	locret_13580
00013D6C 4268 0014                  		clr.w	$14(a0)
00013D70 08E8 0001 0022             		bset	#1,$22(a0)
00013D76 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013D7C                            
00013D7C                            locret_13580:
00013D7C 4E75                       		rts	
00013D7E                            ; ===========================================================================
00013D7E                            
00013D7E                            loc_13582:
00013D7E 5368 003E                  		subq.w	#1,$3E(a0)
00013D82 4E75                       		rts	
00013D84                            ; End of function Sonic_SlopeRepel
00013D84                            
00013D84                            ; ---------------------------------------------------------------------------
00013D84                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013D84                            ; ---------------------------------------------------------------------------
00013D84                            
00013D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D84                            
00013D84                            
00013D84                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013D84 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013D88 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013D8A 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013D8C                            
00013D8C 5400                       		addq.b	#2,d0		; increase angle
00013D8E 6400                       		bcc.s	loc_13596
00013D90 7000                       		moveq	#0,d0
00013D92                            
00013D92                            loc_13596:
00013D92 6000                       		bra.s	loc_1359E
00013D94                            ; ===========================================================================
00013D94                            
00013D94                            loc_13598:
00013D94 5500                       		subq.b	#2,d0		; decrease angle
00013D96 6400                       		bcc.s	loc_1359E
00013D98 7000                       		moveq	#0,d0
00013D9A                            
00013D9A                            loc_1359E:
00013D9A 1140 0026                  		move.b	d0,$26(a0)
00013D9E                            
00013D9E                            locret_135A2:
00013D9E 4E75                       		rts	
00013DA0                            ; End of function Sonic_JumpAngle
00013DA0                            
00013DA0                            ; ---------------------------------------------------------------------------
00013DA0                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013DA0                            ; ---------------------------------------------------------------------------
00013DA0                            
00013DA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DA0                            
00013DA0                            
00013DA0                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013DA0 3228 0010                  		move.w	$10(a0),d1
00013DA4 3428 0012                  		move.w	$12(a0),d2
00013DA8 4EB9 0000 2F32             		jsr	(CalcAngle).l
00013DAE 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013DB2 0400 0020                  		subi.b	#$20,d0
00013DB6 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013DBA 0200 00C0                  		andi.b	#$C0,d0
00013DBE 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013DC2 0C00 0040                  		cmpi.b	#$40,d0
00013DC6 6700 0000                  		beq.w	loc_13680
00013DCA 0C00 0080                  		cmpi.b	#$80,d0
00013DCE 6700 0000                  		beq.w	loc_136E2
00013DD2 0C00 00C0                  		cmpi.b	#-$40,d0
00013DD6 6700 0000                  		beq.w	loc_1373E
00013DDA 6100 0000                  		bsr.w	Sonic_HitWall
00013DDE 4A41                       		tst.w	d1
00013DE0 6A00                       		bpl.s	loc_135F0
00013DE2 9368 0008                  		sub.w	d1,8(a0)
00013DE6 317C 0000 0010             		move.w	#0,$10(a0)
00013DEC                            
00013DEC                            loc_135F0:
00013DEC 6100 0000                  		bsr.w	sub_14EB4
00013DF0 4A41                       		tst.w	d1
00013DF2 6A00                       		bpl.s	loc_13602
00013DF4 D368 0008                  		add.w	d1,8(a0)
00013DF8 317C 0000 0010             		move.w	#0,$10(a0)
00013DFE                            
00013DFE                            loc_13602:
00013DFE 6100 0000                  		bsr.w	Sonic_HitFloor
00013E02 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013E06 4A41                       		tst.w	d1
00013E08 6A00                       		bpl.s	locret_1367E
00013E0A 1428 0012                  		move.b	$12(a0),d2
00013E0E 5002                       		addq.b	#8,d2
00013E10 4402                       		neg.b	d2
00013E12 B202                       		cmp.b	d2,d1
00013E14 6C00                       		bge.s	loc_1361E
00013E16 B002                       		cmp.b	d2,d0
00013E18 6D00                       		blt.s	locret_1367E
00013E1A                            
00013E1A                            loc_1361E:
00013E1A D368 000C                  		add.w	d1,$C(a0)
00013E1E 1143 0026                  		move.b	d3,$26(a0)
00013E22 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013E26 117C 0000 001C             		move.b	#0,$1C(a0)
00013E2C 1003                       		move.b	d3,d0
00013E2E 0600 0020                  		addi.b	#$20,d0
00013E32 0200 0040                  		andi.b	#$40,d0
00013E36 6600                       		bne.s	loc_1365C
00013E38 1003                       		move.b	d3,d0
00013E3A 0600 0010                  		addi.b	#$10,d0
00013E3E 0200 0020                  		andi.b	#$20,d0
00013E42 6700                       		beq.s	loc_1364E
00013E44 E0E8 0012                  		asr	$12(a0)
00013E48 6000                       		bra.s	loc_13670
00013E4A                            ; ===========================================================================
00013E4A                            
00013E4A                            loc_1364E:
00013E4A 317C 0000 0012             		move.w	#0,$12(a0)
00013E50 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013E56 4E75                       		rts	
00013E58                            ; ===========================================================================
00013E58                            
00013E58                            loc_1365C:
00013E58 317C 0000 0010             		move.w	#0,$10(a0)
00013E5E 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013E64 6F00                       		ble.s	loc_13670
00013E66 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013E6C                            
00013E6C                            loc_13670:
00013E6C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013E72 4A03                       		tst.b	d3
00013E74 6A00                       		bpl.s	locret_1367E
00013E76 4468 0014                  		neg.w	$14(a0)
00013E7A                            
00013E7A                            locret_1367E:
00013E7A 4E75                       		rts	
00013E7C                            ; ===========================================================================
00013E7C                            
00013E7C                            loc_13680:
00013E7C 6100 0000                  		bsr.w	Sonic_HitWall
00013E80 4A41                       		tst.w	d1
00013E82 6A00                       		bpl.s	loc_1369A
00013E84 9368 0008                  		sub.w	d1,8(a0)
00013E88 317C 0000 0010             		move.w	#0,$10(a0)
00013E8E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013E94 4E75                       		rts	
00013E96                            ; ===========================================================================
00013E96                            
00013E96                            loc_1369A:
00013E96 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013E9A 4A41                       		tst.w	d1
00013E9C 6A00                       		bpl.s	loc_136B4
00013E9E 9368 000C                  		sub.w	d1,$C(a0)
00013EA2 4A68 0012                  		tst.w	$12(a0)
00013EA6 6A00                       		bpl.s	locret_136B2
00013EA8 317C 0000 0012             		move.w	#0,$12(a0)
00013EAE                            
00013EAE                            locret_136B2:
00013EAE 4E75                       		rts	
00013EB0                            ; ===========================================================================
00013EB0                            
00013EB0                            loc_136B4:
00013EB0 4A68 0012                  		tst.w	$12(a0)
00013EB4 6B00                       		bmi.s	locret_136E0
00013EB6 6100 0000                  		bsr.w	Sonic_HitFloor
00013EBA 4A41                       		tst.w	d1
00013EBC 6A00                       		bpl.s	locret_136E0
00013EBE D368 000C                  		add.w	d1,$C(a0)
00013EC2 1143 0026                  		move.b	d3,$26(a0)
00013EC6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013ECA 117C 0000 001C             		move.b	#0,$1C(a0)
00013ED0 317C 0000 0012             		move.w	#0,$12(a0)
00013ED6 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013EDC                            
00013EDC                            locret_136E0:
00013EDC 4E75                       		rts	
00013EDE                            ; ===========================================================================
00013EDE                            
00013EDE                            loc_136E2:
00013EDE 6100 0000                  		bsr.w	Sonic_HitWall
00013EE2 4A41                       		tst.w	d1
00013EE4 6A00                       		bpl.s	loc_136F4
00013EE6 9368 0008                  		sub.w	d1,8(a0)
00013EEA 317C 0000 0010             		move.w	#0,$10(a0)
00013EF0                            
00013EF0                            loc_136F4:
00013EF0 6100 0000                  		bsr.w	sub_14EB4
00013EF4 4A41                       		tst.w	d1
00013EF6 6A00                       		bpl.s	loc_13706
00013EF8 D368 0008                  		add.w	d1,8(a0)
00013EFC 317C 0000 0010             		move.w	#0,$10(a0)
00013F02                            
00013F02                            loc_13706:
00013F02 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013F06 4A41                       		tst.w	d1
00013F08 6A00                       		bpl.s	locret_1373C
00013F0A 9368 000C                  		sub.w	d1,$C(a0)
00013F0E 1003                       		move.b	d3,d0
00013F10 0600 0020                  		addi.b	#$20,d0
00013F14 0200 0040                  		andi.b	#$40,d0
00013F18 6600                       		bne.s	loc_13726
00013F1A 317C 0000 0012             		move.w	#0,$12(a0)
00013F20 4E75                       		rts	
00013F22                            ; ===========================================================================
00013F22                            
00013F22                            loc_13726:
00013F22 1143 0026                  		move.b	d3,$26(a0)
00013F26 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F2A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F30 4A03                       		tst.b	d3
00013F32 6A00                       		bpl.s	locret_1373C
00013F34 4468 0014                  		neg.w	$14(a0)
00013F38                            
00013F38                            locret_1373C:
00013F38 4E75                       		rts	
00013F3A                            ; ===========================================================================
00013F3A                            
00013F3A                            loc_1373E:
00013F3A 6100 0000                  		bsr.w	sub_14EB4
00013F3E 4A41                       		tst.w	d1
00013F40 6A00                       		bpl.s	loc_13758
00013F42 D368 0008                  		add.w	d1,8(a0)
00013F46 317C 0000 0010             		move.w	#0,$10(a0)
00013F4C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F52 4E75                       		rts	
00013F54                            ; ===========================================================================
00013F54                            
00013F54                            loc_13758:
00013F54 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013F58 4A41                       		tst.w	d1
00013F5A 6A00                       		bpl.s	loc_13772
00013F5C 9368 000C                  		sub.w	d1,$C(a0)
00013F60 4A68 0012                  		tst.w	$12(a0)
00013F64 6A00                       		bpl.s	locret_13770
00013F66 317C 0000 0012             		move.w	#0,$12(a0)
00013F6C                            
00013F6C                            locret_13770:
00013F6C 4E75                       		rts	
00013F6E                            ; ===========================================================================
00013F6E                            
00013F6E                            loc_13772:
00013F6E 4A68 0012                  		tst.w	$12(a0)
00013F72 6B00                       		bmi.s	locret_1379E
00013F74 6100 0000                  		bsr.w	Sonic_HitFloor
00013F78 4A41                       		tst.w	d1
00013F7A 6A00                       		bpl.s	locret_1379E
00013F7C D368 000C                  		add.w	d1,$C(a0)
00013F80 1143 0026                  		move.b	d3,$26(a0)
00013F84 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F88 117C 0000 001C             		move.b	#0,$1C(a0)
00013F8E 317C 0000 0012             		move.w	#0,$12(a0)
00013F94 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F9A                            
00013F9A                            locret_1379E:
00013F9A 4E75                       		rts	
00013F9C                            ; End of function Sonic_Floor
00013F9C                            
00013F9C                            ; ---------------------------------------------------------------------------
00013F9C                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013F9C                            ; ---------------------------------------------------------------------------
00013F9C                            
00013F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F9C                            
00013F9C                            
00013F9C                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013F9C 0828 0004 0022             		btst	#4,$22(a0)
00013FA2 6700                       		beq.s	loc_137AE
00013FA4 4E71                       		nop	
00013FA6 4E71                       		nop	
00013FA8 4E71                       		nop	
00013FAA                            
00013FAA                            loc_137AE:
00013FAA 08A8 0005 0022             		bclr	#5,$22(a0)
00013FB0 08A8 0001 0022             		bclr	#1,$22(a0)
00013FB6 08A8 0004 0022             		bclr	#4,$22(a0)
00013FBC 0828 0002 0022             		btst	#2,$22(a0)
00013FC2 6700                       		beq.s	loc_137E4
00013FC4 08A8 0002 0022             		bclr	#2,$22(a0)
00013FCA 117C 0013 0016             		move.b	#$13,$16(a0)
00013FD0 117C 0009 0017             		move.b	#9,$17(a0)
00013FD6 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013FDC 5B68 000C                  		subq.w	#5,$C(a0)
00013FE0                            
00013FE0                            loc_137E4:
00013FE0 117C 0000 003C             		move.b	#0,$3C(a0)
00013FE6 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013FEC 4E75                       		rts	
00013FEE                            ; End of function Sonic_ResetOnFloor
00013FEE                            
00013FEE                            ; ===========================================================================
00013FEE                            ; ---------------------------------------------------------------------------
00013FEE                            ; Sonic	when he	gets hurt
00013FEE                            ; ---------------------------------------------------------------------------
00013FEE                            
00013FEE                            Obj01_Hurt:				; XREF: Obj01_Index
00013FEE 4EBA 9D48                  		jsr	SpeedToPos
00013FF2 0668 0030 0012             		addi.w	#$30,$12(a0)
00013FF8 0828 0006 0022             		btst	#6,$22(a0)
00013FFE 6700                       		beq.s	loc_1380C
00014000 0468 0020 0012             		subi.w	#$20,$12(a0)
00014006                            
00014006                            loc_1380C:
00014006 6100 0000                  		bsr.w	Sonic_HurtStop
0001400A 6100 FAEE                  		bsr.w	Sonic_LevelBound
0001400E 6100 F4B4                  		bsr.w	Sonic_RecordPos
00014012 6100 0000                  		bsr.w	Sonic_Animate
00014016 6100 0000                  		bsr.w	LoadSonicDynPLC
0001401A 4EFA 9D42                  		jmp	DisplaySprite
0001401E                            
0001401E                            ; ---------------------------------------------------------------------------
0001401E                            ; Subroutine to	stop Sonic falling after he's been hurt
0001401E                            ; ---------------------------------------------------------------------------
0001401E                            
0001401E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001401E                            
0001401E                            
0001401E                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001401E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014022 0640 00E0                  		addi.w	#$E0,d0
00014026 B068 000C                  		cmp.w	$C(a0),d0
0001402A 6500 0000                  		bcs.w	KillSonic
0001402E 6100 FD70                  		bsr.w	Sonic_Floor
00014032 0828 0001 0022             		btst	#1,$22(a0)
00014038 6600                       		bne.s	locret_13860
0001403A 7000                       		moveq	#0,d0
0001403C 3140 0012                  		move.w	d0,$12(a0)
00014040 3140 0010                  		move.w	d0,$10(a0)
00014044 3140 0014                  		move.w	d0,$14(a0)
00014048 117C 0000 001C             		move.b	#0,$1C(a0)
0001404E 5528 0024                  		subq.b	#2,$24(a0)
00014052 317C 0078 0030             		move.w	#$78,$30(a0)
00014058                            
00014058                            locret_13860:
00014058 4E75                       		rts	
0001405A                            ; End of function Sonic_HurtStop
0001405A                            
0001405A                            ; ===========================================================================
0001405A                            ; ---------------------------------------------------------------------------
0001405A                            ; Sonic	when he	dies
0001405A                            ; ---------------------------------------------------------------------------
0001405A                            
0001405A                            Obj01_Death:				; XREF: Obj01_Index
0001405A 6100 0000                  		bsr.w	GameOver
0001405E 4EBA 9CAC                  		jsr	ObjectFall
00014062 6100 F460                  		bsr.w	Sonic_RecordPos
00014066 6100 0000                  		bsr.w	Sonic_Animate
0001406A 6100 0000                  		bsr.w	LoadSonicDynPLC
0001406E 4EFA 9CEE                  		jmp	DisplaySprite
00014072                            
00014072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014072                            
00014072                            
00014072                            GameOver:				; XREF: Obj01_Death
00014072 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014076 0640 0100                  		addi.w	#$100,d0
0001407A B068 000C                  		cmp.w	$C(a0),d0
0001407E 6400 0000                  		bcc.w	locret_13900
00014082 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014088 5428 0024                  		addq.b	#2,$24(a0)
0001408C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014090 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014094 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014098 6600                       		bne.s	loc_138D4
0001409A 317C 0000 003A             		move.w	#0,$3A(a0)
000140A0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000140A6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000140AC 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000140B2 4238 FE1A                  		clr.b	($FFFFFE1A).w
000140B6                            
000140B6                            loc_138C2:
000140B6 303C 008F                  		move.w	#$8F,d0
000140BA 4EB9 0000 15BA             		jsr	(PlaySound).l	; play game over music
000140C0 7003                       		moveq	#3,d0
000140C2 4EF9 0000 17A4             		jmp	(LoadPLC).l	; load game over patterns
000140C8                            ; ===========================================================================
000140C8                            
000140C8                            loc_138D4:
000140C8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000140CE 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000140D2 6700                       		beq.s	locret_13900	; if not, branch
000140D4 317C 0000 003A             		move.w	#0,$3A(a0)
000140DA 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000140E0 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000140E6 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
000140EC 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000140F2 60C2                       		bra.s	loc_138C2
000140F4                            ; ===========================================================================
000140F4                            
000140F4                            locret_13900:
000140F4 4E75                       		rts	
000140F6                            ; End of function GameOver
000140F6                            
000140F6                            ; ===========================================================================
000140F6                            ; ---------------------------------------------------------------------------
000140F6                            ; Sonic	when the level is restarted
000140F6                            ; ---------------------------------------------------------------------------
000140F6                            
000140F6                            Obj01_ResetLevel:			; XREF: Obj01_Index
000140F6 4A68 003A                  		tst.w	$3A(a0)
000140FA 6700                       		beq.s	locret_13914
000140FC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014100 6600                       		bne.s	locret_13914
00014102 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014108                            
00014108                            locret_13914:
00014108 4E75                       		rts	
0001410A                            
0001410A                            ; ---------------------------------------------------------------------------
0001410A                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001410A                            ; ---------------------------------------------------------------------------
0001410A                            
0001410A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001410A                            
0001410A                            
0001410A                            Sonic_Loops:				; XREF: Obj01_Control
0001410A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014110 6700                       		beq.s	loc_13926	; if yes, branch
00014112 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00014116 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001411A                            
0001411A                            loc_13926:
0001411A 3028 000C                  		move.w	$C(a0),d0
0001411E E248                       		lsr.w	#1,d0
00014120 0240 0380                  		andi.w	#$380,d0
00014124 1228 0008                  		move.b	8(a0),d1
00014128 0241 007F                  		andi.w	#$7F,d1
0001412C D041                       		add.w	d1,d0
0001412E 43F8 A400                  		lea	($FFFFA400).w,a1
00014132 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014136 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001413A 6700 FA66                  		beq.w	Obj01_ChkRoll
0001413E B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014142 6700 FA5E                  		beq.w	Obj01_ChkRoll
00014146 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
0001414A 6700                       		beq.s	loc_13976
0001414C B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014150 6700                       		beq.s	loc_13966
00014152 08A8 0006 0001             		bclr	#6,1(a0)
00014158 4E75                       		rts	
0001415A                            ; ===========================================================================
0001415A                            
0001415A                            loc_13966:
0001415A 0828 0001 0022             		btst	#1,$22(a0)
00014160 6700                       		beq.s	loc_13976
00014162 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014168 4E75                       		rts	
0001416A                            ; ===========================================================================
0001416A                            
0001416A                            loc_13976:
0001416A 3428 0008                  		move.w	8(a0),d2
0001416E 0C02 002C                  		cmpi.b	#$2C,d2
00014172 6400                       		bcc.s	loc_13988
00014174 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001417A 4E75                       		rts	
0001417C                            ; ===========================================================================
0001417C                            
0001417C                            loc_13988:
0001417C 0C02 00E0                  		cmpi.b	#-$20,d2
00014180 6500                       		bcs.s	loc_13996
00014182 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014188 4E75                       		rts	
0001418A                            ; ===========================================================================
0001418A                            
0001418A                            loc_13996:
0001418A 0828 0006 0001             		btst	#6,1(a0)
00014190 6600                       		bne.s	loc_139B2
00014192 1228 0026                  		move.b	$26(a0),d1
00014196 6700                       		beq.s	locret_139C2
00014198 0C01 0080                  		cmpi.b	#-$80,d1
0001419C 6200                       		bhi.s	locret_139C2
0001419E 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000141A4 4E75                       		rts	
000141A6                            ; ===========================================================================
000141A6                            
000141A6                            loc_139B2:
000141A6 1228 0026                  		move.b	$26(a0),d1
000141AA 0C01 0080                  		cmpi.b	#-$80,d1
000141AE 6300                       		bls.s	locret_139C2
000141B0 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000141B6                            
000141B6                            locret_139C2:
000141B6 4E75                       		rts	
000141B8                            ; End of function Sonic_Loops
000141B8                            
000141B8                            ; ---------------------------------------------------------------------------
000141B8                            ; Subroutine to	animate	Sonic's sprites
000141B8                            ; ---------------------------------------------------------------------------
000141B8                            
000141B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141B8                            
000141B8                            Player_Anim:
000141B8 0000 0000                  	dc.l	SonicAniData
000141BC 0000 0000                  	dc.l	SonicAniData ; gronic
000141C0                            	; Insert more animation data for other characters here
000141C0                            	
000141C0                            Sonic_Animate:				; XREF: Obj01_Control; et al
000141C0 7000                       			moveq	#0,d0
000141C2 1038 FFE8                  		move.b	(v_character),d0
000141C6 E548                       		lsl.w	#2,d0
000141C8 43FA FFEE                  		lea 	Player_Anim(pc),a1
000141CC                            		
000141CC 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000141D0                            	
000141D0 7000                       		moveq	#0,d0
000141D2 1028 001C                  		move.b	$1C(a0),d0
000141D6 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000141DA 6700                       		beq.s	SAnim_Do	; if not, branch
000141DC 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000141E0 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000141E6 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000141EC                            
000141EC                            SAnim_Do:
000141EC D040                       		add.w	d0,d0
000141EE D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000141F2 1011                       		move.b	(a1),d0
000141F4 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000141F6 1228 0022                  		move.b	$22(a0),d1
000141FA 0201 0001                  		andi.b	#1,d1
000141FE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014204 8328 0001                  		or.b	d1,1(a0)
00014208 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001420C 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
0001420E 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014212                            
00014212                            SAnim_Do2:
00014212 7200                       		moveq	#0,d1
00014214 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014218 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001421C 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
0001421E                            
0001421E                            SAnim_Next:
0001421E 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014222 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014226                            
00014226                            SAnim_Delay:
00014226 4E75                       		rts	
00014228                            ; ===========================================================================
00014228                            
00014228                            SAnim_End_FF:
00014228 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001422A 6600                       		bne.s	SAnim_End_FE	; if not, branch
0001422C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014232 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014236 60E6                       		bra.s	SAnim_Next
00014238                            ; ===========================================================================
00014238                            
00014238                            SAnim_End_FE:
00014238 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001423A 6600                       		bne.s	SAnim_End_FD	; if not, branch
0001423C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014240 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014244 9200                       		sub.b	d0,d1
00014246 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001424A 60D2                       		bra.s	SAnim_Next
0001424C                            ; ===========================================================================
0001424C                            
0001424C                            SAnim_End_FD:
0001424C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001424E 6600                       		bne.s	SAnim_End	; if not, branch
00014250 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014256                            
00014256                            SAnim_End:
00014256 4E75                       		rts	
00014258                            ; ===========================================================================
00014258                            
00014258                            SAnim_WalkRun:				; XREF: SAnim_Do
00014258 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001425C 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
0001425E 5200                       		addq.b	#1,d0		; is animation walking/running?
00014260 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014264 7200                       		moveq	#0,d1
00014266 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001426A 1428 0022                  		move.b	$22(a0),d2
0001426E 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014272 6600                       		bne.s	loc_13A70	; if yes, branch
00014274 4600                       		not.b	d0		; reverse angle
00014276                            
00014276                            loc_13A70:
00014276 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001427A 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001427C 7203                       		moveq	#3,d1
0001427E                            
0001427E                            loc_13A78:
0001427E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014284 B302                       		eor.b	d1,d2
00014286 8528 0001                  		or.b	d2,1(a0)
0001428A 0828 0005 0022             		btst	#5,$22(a0)
00014290 6600 0000                  		bne.w	SAnim_Push
00014294 E808                       		lsr.b	#4,d0		; divide angle by $10
00014296 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001429A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001429E 6A00                       		bpl.s	loc_13A9C
000142A0 4442                       		neg.w	d2
000142A2                            
000142A2                            loc_13A9C:
000142A2 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000142A8 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000142AC 6400                       		bcc.s	loc_13AB4	; if yes, branch
000142AE 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000142B4 1200                       		move.b	d0,d1
000142B6 E209                       		lsr.b	#1,d1
000142B8 D001                       		add.b	d1,d0
000142BA                            
000142BA                            loc_13AB4:
000142BA D000                       		add.b	d0,d0
000142BC 1600                       		move.b	d0,d3
000142BE 4442                       		neg.w	d2
000142C0 0642 0800                  		addi.w	#$800,d2
000142C4 6A00                       		bpl.s	loc_13AC2
000142C6 7400                       		moveq	#0,d2
000142C8                            
000142C8                            loc_13AC2:
000142C8 E04A                       		lsr.w	#8,d2
000142CA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000142CE 6100 FF42                  		bsr.w	SAnim_Do2
000142D2 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000142D6 4E75                       		rts	
000142D8                            ; ===========================================================================
000142D8                            
000142D8                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000142D8 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000142DA 6600                       		bne.s	SAnim_Push	; if not, branch
000142DC 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000142E0 6A00                       		bpl.s	loc_13ADE
000142E2 4442                       		neg.w	d2
000142E4                            
000142E4                            loc_13ADE:
000142E4 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000142EA 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000142EE 6400                       		bcc.s	loc_13AF0	; if yes, branch
000142F0 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000142F6                            
000142F6                            loc_13AF0:
000142F6 4442                       		neg.w	d2
000142F8 0642 0400                  		addi.w	#$400,d2
000142FC 6A00                       		bpl.s	loc_13AFA
000142FE 7400                       		moveq	#0,d2
00014300                            
00014300                            loc_13AFA:
00014300 E04A                       		lsr.w	#8,d2
00014302 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014306 1228 0022                  		move.b	$22(a0),d1
0001430A 0201 0001                  		andi.b	#1,d1
0001430E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014314 8328 0001                  		or.b	d1,1(a0)
00014318 6000 FEF8                  		bra.w	SAnim_Do2
0001431C                            ; ===========================================================================
0001431C                            
0001431C                            SAnim_Push:				; XREF: SAnim_RollJump
0001431C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014320 6B00                       		bmi.s	loc_13B1E
00014322 4442                       		neg.w	d2
00014324                            
00014324                            loc_13B1E:
00014324 0642 0800                  		addi.w	#$800,d2
00014328 6A00                       		bpl.s	loc_13B26
0001432A 7400                       		moveq	#0,d2
0001432C                            
0001432C                            loc_13B26:
0001432C EC4A                       		lsr.w	#6,d2
0001432E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014332 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014338 1228 0022                  		move.b	$22(a0),d1
0001433C 0201 0001                  		andi.b	#1,d1
00014340 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014346 8328 0001                  		or.b	d1,1(a0)
0001434A 6000 FEC6                  		bra.w	SAnim_Do2
0001434E                            ; End of function Sonic_Animate
0001434E                            
0001434E                            ; ===========================================================================
0001434E                            SonicAniData:
0001434E                            	include "_anim\Sonic.asm"
0001434E                            ; ---------------------------------------------------------------------------
0001434E                            ; Animation script - Sonic
0001434E                            ; ---------------------------------------------------------------------------
0001434E 0000                       		dc.w SonAni_Walk-SonicAniData
00014350 0000                       		dc.w SonAni_Run-SonicAniData
00014352 0000                       		dc.w SonAni_Roll-SonicAniData
00014354 0000                       		dc.w SonAni_Roll2-SonicAniData
00014356 0000                       		dc.w SonAni_Push-SonicAniData
00014358 0000                       		dc.w SonAni_Wait-SonicAniData
0001435A 0000                       		dc.w SonAni_Balance-SonicAniData
0001435C 0000                       		dc.w SonAni_LookUp-SonicAniData
0001435E 0000                       		dc.w SonAni_Duck-SonicAniData
00014360 0000                       		dc.w SonAni_Warp1-SonicAniData
00014362 0000                       		dc.w SonAni_Warp2-SonicAniData
00014364 0000                       		dc.w SonAni_Warp3-SonicAniData
00014366 0000                       		dc.w SonAni_Warp4-SonicAniData
00014368 0000                       		dc.w SonAni_Stop-SonicAniData
0001436A 0000                       		dc.w SonAni_Float1-SonicAniData
0001436C 0000                       		dc.w SonAni_Float2-SonicAniData
0001436E 0000                       		dc.w SonAni_Spring-SonicAniData
00014370 0000                       		dc.w SonAni_LZHang-SonicAniData
00014372 0000                       		dc.w SonAni_Leap1-SonicAniData
00014374 0000                       		dc.w SonAni_Leap2-SonicAniData
00014376 0000                       		dc.w SonAni_Surf-SonicAniData
00014378 0000                       		dc.w SonAni_Bubble-SonicAniData
0001437A 0000                       		dc.w SonAni_Death1-SonicAniData
0001437C 0000                       		dc.w SonAni_Drown-SonicAniData
0001437E 0000                       		dc.w SonAni_Death2-SonicAniData
00014380 0000                       		dc.w SonAni_Shrink-SonicAniData
00014382 0000                       		dc.w SonAni_Hurt-SonicAniData
00014384 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014386 0000                       		dc.w SonAni_Blank-SonicAniData
00014388 0000                       		dc.w SonAni_Float3-SonicAniData
0001438A 0000                       		dc.w SonAni_Float4-SonicAniData
0001438C FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014396 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001439E FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000143A6 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000143AE FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000143B6 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000143CC 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000143D0 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000143D4 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000143D8 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000143DC 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000143E0 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000143E4 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000143E8 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000143EC 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000143F0 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000143F8 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000143FC 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014400 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014406 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001440C 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014410 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014418 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
0001441C 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014420 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014424 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
0001442E 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014432 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014436 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001443A 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014442 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014446                            		even
00014446                            		even
00014446                            
00014446                            ; ---------------------------------------------------------------------------
00014446                            ; Sonic	pattern	loading	subroutine
00014446                            ; ---------------------------------------------------------------------------
00014446                            
00014446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014446                            Player_DPLC:
00014446 0000 0000                  	dc.l	SonicDynPLC
0001444A 0000 0000                  	dc.l	SonicDynPLC ; gronic
0001444E                            	; add pointers for player dplc here
0001444E                            Player_Art:
0001444E 0000 0000                  	dc.l	Art_Sonic
00014452 0000 0000                  	dc.l	Art_Sonic ; gronic
00014456                            	; add pointers for player art here
00014456                            
00014456                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014456 7000                       		moveq	#0,d0
00014458 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001445C B038 F766                  		cmp.b	($FFFFF766).w,d0
00014460 6700                       		beq.s	locret_13C96
00014462 11C0 F766                  		move.b	d0,($FFFFF766).w
00014466                            		
00014466 323C 0000                  		move.w	#0,d1
0001446A 1238 FFE8                  		move.b	(v_character),d1
0001446E E549                       		lsl.w	#2,d1
00014470 45FA FFD4                  		lea 	Player_DPLC(pc),a2
00014474                            
00014474 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014478                            		
00014478 D040                       		add.w	d0,d0
0001447A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001447E 7200                       		moveq	#0,d1
00014480 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014482 5301                       		subq.b	#1,d1
00014484 6B00                       		bmi.s	locret_13C96
00014486 47F8 C800                  		lea	($FFFFC800).w,a3
0001448A 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014490                            
00014490                            SPLC_ReadEntry:
00014490 303C 0000                  		move.w	#0,d0
00014494 1038 FFE8                  		move.b	(v_character),d0
00014498 E548                       		lsl.w	#2,d0
0001449A 43FA FFB2                  		lea 	Player_Art(pc),a1
0001449E                            
0001449E 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
000144A2                            
000144A2 7400                       		moveq	#0,d2
000144A4 141A                       		move.b	(a2)+,d2
000144A6 3002                       		move.w	d2,d0
000144A8 E808                       		lsr.b	#4,d0
000144AA E14A                       		lsl.w	#8,d2
000144AC 141A                       		move.b	(a2)+,d2
000144AE EB4A                       		lsl.w	#5,d2
000144B0 D3C2                       		adda.l	d2,a1
000144B2                            
000144B2                            SPLC_LoadTile:
000144B2 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000144B6 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000144BA 47EB 0020                  		lea	$20(a3),a3	; next tile
000144BE 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000144C2                            
000144C2 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000144C6                            
000144C6                            locret_13C96:
000144C6 4E75                       		rts	
000144C8                            ; End of function LoadSonicDynPLC
000144C8                            
000144C8                            ; ===========================================================================
000144C8                            ; ---------------------------------------------------------------------------
000144C8                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000144C8                            ; ---------------------------------------------------------------------------
000144C8                            
000144C8                            Obj0A:					; XREF: Obj_Index
000144C8 7000                       		moveq	#0,d0
000144CA 1028 0024                  		move.b	$24(a0),d0
000144CE 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000144D2 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000144D6                            ; ===========================================================================
000144D6 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000144DA 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000144DE 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000144E2 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000144E6 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000144E8                            ; ===========================================================================
000144E8                            
000144E8                            Obj0A_Main:				; XREF: Obj0A_Index
000144E8 5428 0024                  		addq.b	#2,$24(a0)
000144EC 217C 0001 30F0 0004        		move.l	#Map_obj64,4(a0)
000144F4 317C 8348 0002             		move.w	#$8348,2(a0)
000144FA 117C 0084 0001             		move.b	#$84,1(a0)
00014500 117C 0010 0019             		move.b	#$10,$19(a0)
00014506 117C 0001 0018             		move.b	#1,$18(a0)
0001450C 1028 0028                  		move.b	$28(a0),d0
00014510 6A00                       		bpl.s	loc_13D00
00014512 5028 0024                  		addq.b	#8,$24(a0)
00014516 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
0001451E 317C 0440 0002             		move.w	#$440,2(a0)
00014524 0240 007F                  		andi.w	#$7F,d0
00014528 1140 0033                  		move.b	d0,$33(a0)
0001452C 6000 0000                  		bra.w	Obj0A_Countdown
00014530                            ; ===========================================================================
00014530                            
00014530                            loc_13D00:
00014530 1140 001C                  		move.b	d0,$1C(a0)
00014534 3168 0008 0030             		move.w	8(a0),$30(a0)
0001453A 317C FF78 0012             		move.w	#-$88,$12(a0)
00014540                            
00014540                            Obj0A_Animate:				; XREF: Obj0A_Index
00014540 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014546 4EB9 0000 AE1E             		jsr	AnimateSprite
0001454C                            
0001454C                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001454C 3038 F646                  		move.w	($FFFFF646).w,d0
00014550 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014554 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014556 117C 0006 0024             		move.b	#6,$24(a0)
0001455C 5E28 001C                  		addq.b	#7,$1C(a0)
00014560 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014566 6700                       		beq.s	Obj0A_Display
00014568 6000                       		bra.s	Obj0A_Display
0001456A                            ; ===========================================================================
0001456A                            
0001456A                            Obj0A_Wobble:
0001456A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001456E 6700                       		beq.s	loc_13D44
00014570 5868 0030                  		addq.w	#4,$30(a0)
00014574                            
00014574                            loc_13D44:
00014574 1028 0026                  		move.b	$26(a0),d0
00014578 5228 0026                  		addq.b	#1,$26(a0)
0001457C 0240 007F                  		andi.w	#$7F,d0
00014580 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014586 1031 0000                  		move.b	(a1,d0.w),d0
0001458A 4880                       		ext.w	d0
0001458C D068 0030                  		add.w	$30(a0),d0
00014590 3140 0008                  		move.w	d0,8(a0)
00014594 6100                       		bsr.s	Obj0A_ShowNumber
00014596 4EBA 97A0                  		jsr	SpeedToPos
0001459A 4A28 0001                  		tst.b	1(a0)
0001459E 6A00                       		bpl.s	Obj0A_Delete
000145A0 4EFA 97BC                  		jmp	DisplaySprite
000145A4                            ; ===========================================================================
000145A4                            
000145A4                            Obj0A_Delete:
000145A4 4EFA 97F4                  		jmp	DeleteObject
000145A8                            ; ===========================================================================
000145A8                            
000145A8                            Obj0A_Display:				; XREF: Obj0A_Index
000145A8 6100                       		bsr.s	Obj0A_ShowNumber
000145AA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000145B0 4EB9 0000 AE1E             		jsr	AnimateSprite
000145B6 4EFA 97A6                  		jmp	DisplaySprite
000145BA                            ; ===========================================================================
000145BA                            
000145BA                            Obj0A_Delete2:				; XREF: Obj0A_Index
000145BA 4EFA 97DE                  		jmp	DeleteObject
000145BE                            ; ===========================================================================
000145BE                            
000145BE                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000145BE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000145C4 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000145C6 5368 0038                  		subq.w	#1,$38(a0)
000145CA 6600                       		bne.s	Obj0A_Display2
000145CC 117C 000E 0024             		move.b	#$E,$24(a0)
000145D2 5E28 001C                  		addq.b	#7,$1C(a0)
000145D6 60D0                       		bra.s	Obj0A_Display
000145D8                            ; ===========================================================================
000145D8                            
000145D8                            Obj0A_Display2:
000145D8 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000145DE 4EB9 0000 AE1E             		jsr	AnimateSprite
000145E4 4A28 0001                  		tst.b	1(a0)
000145E8 6A00                       		bpl.s	Obj0A_Delete3
000145EA 4EFA 9772                  		jmp	DisplaySprite
000145EE                            ; ===========================================================================
000145EE                            
000145EE                            Obj0A_Delete3:
000145EE 4EFA 97AA                  		jmp	DeleteObject
000145F2                            ; ===========================================================================
000145F2                            
000145F2                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000145F2 4A68 0038                  		tst.w	$38(a0)
000145F6 6700                       		beq.s	locret_13E1A
000145F8 5368 0038                  		subq.w	#1,$38(a0)
000145FC 6600                       		bne.s	locret_13E1A
000145FE 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014604 6400                       		bcc.s	locret_13E1A
00014606 317C 000F 0038             		move.w	#$F,$38(a0)
0001460C 4268 0012                  		clr.w	$12(a0)
00014610 117C 0080 0001             		move.b	#$80,1(a0)
00014616 3028 0008                  		move.w	8(a0),d0
0001461A 9078 F700                  		sub.w	($FFFFF700).w,d0
0001461E 0640 0080                  		addi.w	#$80,d0
00014622 3140 0008                  		move.w	d0,8(a0)
00014626 3028 000C                  		move.w	$C(a0),d0
0001462A 9078 F704                  		sub.w	($FFFFF704).w,d0
0001462E 0640 0080                  		addi.w	#$80,d0
00014632 3140 000A                  		move.w	d0,$A(a0)
00014636 117C 000C 0024             		move.b	#$C,$24(a0)
0001463C                            
0001463C                            locret_13E1A:
0001463C 4E75                       		rts	
0001463E                            ; ===========================================================================
0001463E                            Obj0A_WobbleData:
0001463E 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001464F 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014660 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014671 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014681 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001468E FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001469B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000146A8 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000146B5 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000146BE                            ; ===========================================================================
000146BE                            
000146BE                            Obj0A_Countdown:			; XREF: Obj0A_Index
000146BE 4A68 002C                  		tst.w	$2C(a0)
000146C2 6600 0000                  		bne.w	loc_13F86
000146C6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000146CC 6400 0000                  		bcc.w	locret_1408C
000146D0 0838 0006 D022             		btst	#6,($FFFFD022).w
000146D6 6700 0000                  		beq.w	locret_1408C
000146DA 5368 0038                  		subq.w	#1,$38(a0)
000146DE 6A00 0000                  		bpl.w	loc_13FAC
000146E2 317C 003B 0038             		move.w	#59,$38(a0)
000146E8 317C 0001 0036             		move.w	#1,$36(a0)
000146EE 4EB9 0000 2C3E             		jsr	(RandomNumber).l
000146F4 0240 0001                  		andi.w	#1,d0
000146F8 1140 0034                  		move.b	d0,$34(a0)
000146FC 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014700 0C40 0019                  		cmpi.w	#$19,d0
00014704 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014706 0C40 0014                  		cmpi.w	#$14,d0
0001470A 6700                       		beq.s	Obj0A_WarnSound
0001470C 0C40 000F                  		cmpi.w	#$F,d0
00014710 6700                       		beq.s	Obj0A_WarnSound
00014712 0C40 000C                  		cmpi.w	#$C,d0
00014716 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014718 6600                       		bne.s	loc_13F02
0001471A 303C 0092                  		move.w	#$92,d0
0001471E 4EB9 0000 15BA             		jsr	(PlaySound).l	; play countdown music
00014724                            
00014724                            loc_13F02:
00014724 5328 0032                  		subq.b	#1,$32(a0)
00014728 6A00                       		bpl.s	Obj0A_ReduceAir
0001472A 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014730 08E8 0007 0036             		bset	#7,$36(a0)
00014736 6000                       		bra.s	Obj0A_ReduceAir
00014738                            ; ===========================================================================
00014738                            
00014738                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014738 303C 00C2                  		move.w	#$C2,d0
0001473C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014742                            
00014742                            Obj0A_ReduceAir:
00014742 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014746 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
0001474A 6100 0000                  		bsr.w	ResumeMusic
0001474E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014754 303C 00B2                  		move.w	#$B2,d0
00014758 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play drowning sound
0001475E 117C 000A 0034             		move.b	#$A,$34(a0)
00014764 317C 0001 0036             		move.w	#1,$36(a0)
0001476A 317C 0078 002C             		move.w	#$78,$2C(a0)
00014770 2F08                       		move.l	a0,-(sp)
00014772 41F8 D000                  		lea	($FFFFD000).w,a0
00014776 6100 F824                  		bsr.w	Sonic_ResetOnFloor
0001477A 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014780 08E8 0001 0022             		bset	#1,$22(a0)
00014786 08E8 0007 0002             		bset	#7,2(a0)
0001478C 317C 0000 0012             		move.w	#0,$12(a0)
00014792 317C 0000 0010             		move.w	#0,$10(a0)
00014798 317C 0000 0014             		move.w	#0,$14(a0)
0001479E 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000147A4 205F                       		movea.l	(sp)+,a0
000147A6 4E75                       		rts	
000147A8                            ; ===========================================================================
000147A8                            
000147A8                            loc_13F86:
000147A8 5368 002C                  		subq.w	#1,$2C(a0)
000147AC 6600                       		bne.s	loc_13F94
000147AE 11FC 0006 D024             		move.b	#6,($FFFFD024).w
000147B4 4E75                       		rts	
000147B6                            ; ===========================================================================
000147B6                            
000147B6                            loc_13F94:
000147B6 2F08                       		move.l	a0,-(sp)
000147B8 41F8 D000                  		lea	($FFFFD000).w,a0
000147BC 4EBA 957A                  		jsr	SpeedToPos
000147C0 0668 0010 0012             		addi.w	#$10,$12(a0)
000147C6 205F                       		movea.l	(sp)+,a0
000147C8 6000                       		bra.s	loc_13FAC
000147CA                            ; ===========================================================================
000147CA                            
000147CA                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
000147CA 6000                       		bra.s	Obj0A_MakeItem
000147CC                            ; ===========================================================================
000147CC                            
000147CC                            loc_13FAC:
000147CC 4A68 0036                  		tst.w	$36(a0)
000147D0 6700 0000                  		beq.w	locret_1408C
000147D4 5368 003A                  		subq.w	#1,$3A(a0)
000147D8 6A00 0000                  		bpl.w	locret_1408C
000147DC                            
000147DC                            Obj0A_MakeItem:
000147DC 4EB9 0000 2C3E             		jsr	(RandomNumber).l
000147E2 0240 000F                  		andi.w	#$F,d0
000147E6 3140 003A                  		move.w	d0,$3A(a0)
000147EA 4EBA 99F8                  		jsr	SingleObjLoad
000147EE 6600 0000                  		bne.w	locret_1408C
000147F2 12BC 000A                  		move.b	#$A,0(a1)	; load object
000147F6 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
000147FC 7006                       		moveq	#6,d0
000147FE 0838 0000 D022             		btst	#0,($FFFFD022).w
00014804 6700                       		beq.s	loc_13FF2
00014806 4440                       		neg.w	d0
00014808 137C 0040 0026             		move.b	#$40,$26(a1)
0001480E                            
0001480E                            loc_13FF2:
0001480E D169 0008                  		add.w	d0,8(a1)
00014812 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014818 137C 0006 0028             		move.b	#6,$28(a1)
0001481E 4A68 002C                  		tst.w	$2C(a0)
00014822 6700 0000                  		beq.w	loc_1403E
00014826 0268 0007 003A             		andi.w	#7,$3A(a0)
0001482C 0668 0000 003A             		addi.w	#0,$3A(a0)
00014832 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014836 0440 000C                  		subi.w	#$C,d0
0001483A 3340 000C                  		move.w	d0,$C(a1)
0001483E 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00014844 1340 0026                  		move.b	d0,$26(a1)
00014848 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001484C 0200 0003                  		andi.b	#3,d0
00014850 6600                       		bne.s	loc_14082
00014852 137C 000E 0028             		move.b	#$E,$28(a1)
00014858 6000                       		bra.s	loc_14082
0001485A                            ; ===========================================================================
0001485A                            
0001485A                            loc_1403E:
0001485A 0828 0007 0036             		btst	#7,$36(a0)
00014860 6700                       		beq.s	loc_14082
00014862 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014866 E24A                       		lsr.w	#1,d2
00014868 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001486E 0240 0003                  		andi.w	#3,d0
00014872 6600                       		bne.s	loc_1406A
00014874 08E8 0006 0036             		bset	#6,$36(a0)
0001487A 6600                       		bne.s	loc_14082
0001487C 1342 0028                  		move.b	d2,$28(a1)
00014880 337C 001C 0038             		move.w	#$1C,$38(a1)
00014886                            
00014886                            loc_1406A:
00014886 4A28 0034                  		tst.b	$34(a0)
0001488A 6600                       		bne.s	loc_14082
0001488C 08E8 0006 0036             		bset	#6,$36(a0)
00014892 6600                       		bne.s	loc_14082
00014894 1342 0028                  		move.b	d2,$28(a1)
00014898 337C 001C 0038             		move.w	#$1C,$38(a1)
0001489E                            
0001489E                            loc_14082:
0001489E 5328 0034                  		subq.b	#1,$34(a0)
000148A2 6A00                       		bpl.s	locret_1408C
000148A4 4268 0036                  		clr.w	$36(a0)
000148A8                            
000148A8                            locret_1408C:
000148A8 4E75                       		rts	
000148AA                            
000148AA                            ; ---------------------------------------------------------------------------
000148AA                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000148AA                            ; ---------------------------------------------------------------------------
000148AA                            
000148AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148AA                            
000148AA                            
000148AA                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000148AA 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000148B0                             
000148B0                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
000148B0                             
000148B0 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
000148B4                             
000148B4 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000148BA 6600                       		bne.s	Air_GetBgm2	; if not, branch
000148BC 43F9 0000 3BDA             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000148C2 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000148C4                             
000148C4                            Air_GetBgm2:
000148C4 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000148CA 6600                       		bne.s	Air_GetBgm3	; if not, branch
000148CC 43F9 0000 3BE2             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000148D2 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000148D4                             
000148D4                            Air_GetBgm3:
000148D4 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000148DA 6600                       		bne.s	Air_GetBgm4	; if not, branch
000148DC 43F9 0000 3BE8             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
000148E2 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000148E4                             
000148E4                            Air_GetBgm4:
000148E4 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000148EA 6600                       		bne.s	Air_PlayMusic	; if not, branch
000148EC 43F9 0000 3BEE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000148F2                             
000148F2                            Air_PlayMusic:
000148F2 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
000148F6                             
000148F6                            loc_140A6:
000148F6 4EB9 0000 15BA             		jsr	(PlaySound).l
000148FC                             
000148FC                            ; NineKode ends here
000148FC                            
000148FC                            loc_140AC:
000148FC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014902 4238 D372                  		clr.b	($FFFFD372).w
00014906 4E75                       		rts	
00014908                            ; End of function ResumeMusic
00014908                            
00014908                            ; ===========================================================================
00014908                            Ani_obj0A:
00014908                            	include "_anim\obj0A.asm"
00014908                            ; ---------------------------------------------------------------------------
00014908                            ; Animation script - countdown numbers and bubbles (LZ)
00014908                            ; ---------------------------------------------------------------------------
00014908 0000                       		dc.w byte_140D6-Ani_obj0A
0001490A 0000                       		dc.w byte_140E0-Ani_obj0A
0001490C 0000                       		dc.w byte_140EA-Ani_obj0A
0001490E 0000                       		dc.w byte_140F4-Ani_obj0A
00014910 0000                       		dc.w byte_140FE-Ani_obj0A
00014912 0000                       		dc.w byte_14108-Ani_obj0A
00014914 0000                       		dc.w byte_14112-Ani_obj0A
00014916 0000                       		dc.w byte_14118-Ani_obj0A
00014918 0000                       		dc.w byte_14120-Ani_obj0A
0001491A 0000                       		dc.w byte_14128-Ani_obj0A
0001491C 0000                       		dc.w byte_14130-Ani_obj0A
0001491E 0000                       		dc.w byte_14138-Ani_obj0A
00014920 0000                       		dc.w byte_14140-Ani_obj0A
00014922 0000                       		dc.w byte_14148-Ani_obj0A
00014924 0000                       		dc.w byte_1414A-Ani_obj0A
00014926 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014930 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001493A 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014944 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001494E 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014958 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014962 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014968 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014970 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014978 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014980 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014988 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014990 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014998 0EFC                       byte_14148:	dc.b $E, $FC
0001499A 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000149A0                            		even
000149A0                            		even
000149A0                            
000149A0                            ; ---------------------------------------------------------------------------
000149A0                            ; Sprite mappings - drowning countdown numbers (LZ)
000149A0                            ; ---------------------------------------------------------------------------
000149A0                            Map_obj0A:
000149A0                            	include "_maps\obj0A.asm"
000149A0                            ; ---------------------------------------------------------------------------
000149A0                            ; Sprite mappings - drowning countdown numbers (LZ)
000149A0                            ; ---------------------------------------------------------------------------
000149A0 0000                       		dc.w byte_14152-Map_obj0A
000149A2 01                         byte_14152:	dc.b 1
000149A3 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000149A8                            		even
000149A8                            		even
000149A8                            
000149A8                            ; ===========================================================================
000149A8                            ; ---------------------------------------------------------------------------
000149A8                            ; Object 38 - shield and invincibility stars
000149A8                            ; ---------------------------------------------------------------------------
000149A8                            
000149A8                            Obj38:					; XREF: Obj_Index
000149A8 7000                       		moveq	#0,d0
000149AA 1028 0024                  		move.b	$24(a0),d0
000149AE 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
000149B2 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
000149B6                            ; ===========================================================================
000149B6 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
000149B8 0000                       		dc.w Obj38_Shield-Obj38_Index
000149BA 0000                       		dc.w Obj38_Stars-Obj38_Index
000149BC                            ; ===========================================================================
000149BC                            
000149BC                            Obj38_Main:				; XREF: Obj38_Index
000149BC 5428 0024                  		addq.b	#2,$24(a0)
000149C0 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
000149C8 117C 0004 0001             		move.b	#4,1(a0)
000149CE 117C 0001 0018             		move.b	#1,$18(a0)
000149D4 117C 0010 0019             		move.b	#$10,$19(a0)
000149DA 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
000149DE 6600                       		bne.s	Obj38_DoStars	; if not, branch
000149E0 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
000149E6 4E75                       		rts	
000149E8                            ; ===========================================================================
000149E8                            
000149E8                            Obj38_DoStars:
000149E8 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
000149EC 317C 055C 0002             		move.w	#$55C,2(a0)
000149F2 4E75                       		rts	
000149F4                            ; ===========================================================================
000149F4                            
000149F4                            Obj38_Shield:				; XREF: Obj38_Index
000149F4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000149F8 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
000149FA 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
000149FE 6700                       		beq.s	Obj38_Delete	; if not, branch
00014A00 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014A06 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014A0C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014A12 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014A18 4EB9 0000 AE1E             		jsr	AnimateSprite
00014A1E 4EFA 933E                  		jmp	DisplaySprite
00014A22                            ; ===========================================================================
00014A22                            
00014A22                            Obj38_RmvShield:
00014A22 4E75                       		rts	
00014A24                            ; ===========================================================================
00014A24                            
00014A24                            Obj38_Delete:
00014A24 4EFA 9374                  		jmp	DeleteObject
00014A28                            ; ===========================================================================
00014A28                            
00014A28                            Obj38_Stars:				; XREF: Obj38_Index
00014A28 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014A2C 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014A2E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014A32 1228 001C                  		move.b	$1C(a0),d1
00014A36 5301                       		subq.b	#1,d1
00014A38 6000                       		bra.s	Obj38_StarTrail
00014A3A                            ; ===========================================================================
00014A3A E909                       		lsl.b	#4,d1
00014A3C 5801                       		addq.b	#4,d1
00014A3E 9001                       		sub.b	d1,d0
00014A40 1228 0030                  		move.b	$30(a0),d1
00014A44 9001                       		sub.b	d1,d0
00014A46 5801                       		addq.b	#4,d1
00014A48 0201 000F                  		andi.b	#$F,d1
00014A4C 1141 0030                  		move.b	d1,$30(a0)
00014A50 6000                       		bra.s	Obj38_StarTrail2a
00014A52                            ; ===========================================================================
00014A52                            
00014A52                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014A52 E709                       		lsl.b	#3,d1
00014A54 1401                       		move.b	d1,d2
00014A56 D201                       		add.b	d1,d1
00014A58 D202                       		add.b	d2,d1
00014A5A 5801                       		addq.b	#4,d1
00014A5C 9001                       		sub.b	d1,d0
00014A5E 1228 0030                  		move.b	$30(a0),d1
00014A62 9001                       		sub.b	d1,d0
00014A64 5801                       		addq.b	#4,d1
00014A66 0C01 0018                  		cmpi.b	#$18,d1
00014A6A 6500                       		bcs.s	Obj38_StarTrail2
00014A6C 7200                       		moveq	#0,d1
00014A6E                            
00014A6E                            Obj38_StarTrail2:
00014A6E 1141 0030                  		move.b	d1,$30(a0)
00014A72                            
00014A72                            Obj38_StarTrail2a:
00014A72 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014A76 43F1 0000                  		lea	(a1,d0.w),a1
00014A7A 3159 0008                  		move.w	(a1)+,8(a0)
00014A7E 3159 000C                  		move.w	(a1)+,$C(a0)
00014A82 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014A88 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014A8E 4EB9 0000 AE1E             		jsr	AnimateSprite
00014A94 4EFA 92C8                  		jmp	DisplaySprite
00014A98                            ; ===========================================================================
00014A98                            
00014A98                            Obj38_Delete2:				; XREF: Obj38_Stars
00014A98 4EFA 9300                  		jmp	DeleteObject
00014A9C                            ; ===========================================================================
00014A9C                            ; ---------------------------------------------------------------------------
00014A9C                            ; Object 4A - special stage entry from beta
00014A9C                            ; ---------------------------------------------------------------------------
00014A9C                            
00014A9C                            Obj4A:					; XREF: Obj_Index
00014A9C 7000                       		moveq	#0,d0
00014A9E 1028 0024                  		move.b	$24(a0),d0
00014AA2 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014AA6 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014AAA                            ; ===========================================================================
00014AAA 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014AAC 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014AAE 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014AB0                            ; ===========================================================================
00014AB0                            
00014AB0                            Obj4A_Main:				; XREF: Obj4A_Index
00014AB0 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014AB4 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014AB6 4E75                       		rts	
00014AB8                            ; ===========================================================================
00014AB8                            
00014AB8                            Obj4A_Main2:
00014AB8 5428 0024                  		addq.b	#2,$24(a0)
00014ABC 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014AC4 117C 0004 0001             		move.b	#4,1(a0)
00014ACA 117C 0001 0018             		move.b	#1,$18(a0)
00014AD0 117C 0038 0019             		move.b	#$38,$19(a0)
00014AD6 317C 0541 0002             		move.w	#$541,2(a0)
00014ADC 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014AE2                            
00014AE2                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014AE2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014AE8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014AEE 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014AF4 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014AFA 4EB9 0000 AE1E             		jsr	AnimateSprite
00014B00 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014B06 6600                       		bne.s	Obj4A_Display
00014B08 4A38 D000                  		tst.b	($FFFFD000).w
00014B0C 6700                       		beq.s	Obj4A_Display
00014B0E 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014B14 303C 00A8                  		move.w	#$A8,d0
00014B18 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014B1E                            
00014B1E                            Obj4A_Display:
00014B1E 4EFA 923E                  		jmp	DisplaySprite
00014B22                            ; ===========================================================================
00014B22                            
00014B22                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014B22 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014B26 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014B28 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014B2E 4EFA 926A                  		jmp	DeleteObject
00014B32                            ; ===========================================================================
00014B32                            
00014B32                            Obj4A_Wait:
00014B32 4E75                       		rts	
00014B34                            ; ===========================================================================
00014B34                            ; ---------------------------------------------------------------------------
00014B34                            ; Object 08 - water splash (LZ)
00014B34                            ; ---------------------------------------------------------------------------
00014B34                            
00014B34                            Obj08:					; XREF: Obj_Index
00014B34 7000                       		moveq	#0,d0
00014B36 1028 0024                  		move.b	$24(a0),d0
00014B3A 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014B3E 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014B42                            ; ===========================================================================
00014B42 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014B44 0000                       		dc.w Obj08_Display-Obj08_Index
00014B46 0000                       		dc.w Obj08_Delete-Obj08_Index
00014B48                            ; ===========================================================================
00014B48                            
00014B48                            Obj08_Main:				; XREF: Obj08_Index
00014B48 5428 0024                  		addq.b	#2,$24(a0)
00014B4C 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014B54 0028 0004 0001             		ori.b	#4,1(a0)
00014B5A 117C 0001 0018             		move.b	#1,$18(a0)
00014B60 117C 0010 0019             		move.b	#$10,$19(a0)
00014B66 317C 4259 0002             		move.w	#$4259,2(a0)
00014B6C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014B72                            
00014B72                            Obj08_Display:				; XREF: Obj08_Index
00014B72 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014B78 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014B7E 4EB9 0000 AE1E             		jsr	AnimateSprite
00014B84 4EFA 91D8                  		jmp	DisplaySprite
00014B88                            ; ===========================================================================
00014B88                            
00014B88                            Obj08_Delete:				; XREF: Obj08_Index
00014B88 4EFA 9210                  		jmp	DeleteObject	; delete when animation	is complete
00014B8C                            ; ===========================================================================
00014B8C                            Ani_obj38:
00014B8C                            	include "_anim\obj38.asm"
00014B8C                            ; ---------------------------------------------------------------------------
00014B8C                            ; Animation script - shield and invincibility stars
00014B8C                            ; ---------------------------------------------------------------------------
00014B8C 0000                       		dc.w byte_14356-Ani_obj38
00014B8E 0000                       		dc.w byte_1435E-Ani_obj38
00014B90 0000                       		dc.w byte_14364-Ani_obj38
00014B92 0000                       		dc.w byte_1437E-Ani_obj38
00014B94 0000                       		dc.w byte_14398-Ani_obj38
00014B96 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014B9E 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014BA4 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014BB5 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014BBE 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014BCF 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014BD8 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014BE9 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014BF2                            		even
00014BF2                            		even
00014BF2                            
00014BF2                            ; ---------------------------------------------------------------------------
00014BF2                            ; Sprite mappings - shield and invincibility stars
00014BF2                            ; ---------------------------------------------------------------------------
00014BF2                            Map_obj38:
00014BF2                            	include "_maps\obj38.asm"
00014BF2                            ; ---------------------------------------------------------------------------
00014BF2                            ; Sprite mappings - shield and invincibility stars
00014BF2                            ; ---------------------------------------------------------------------------
00014BF2 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014BF6 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014BFA 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014BFE 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014C02 04                         byte_143C2:	dc.b 4
00014C03 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014C08 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014C0D 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014C12 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014C17 04                         byte_143D7:	dc.b 4
00014C18 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014C1D E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014C22 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014C27 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014C2C 04                         byte_143EC:	dc.b 4
00014C2D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014C32 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014C37 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014C3C 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014C41 04                         byte_14401:	dc.b 4
00014C42 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014C47 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014C4C 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014C51 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014C56 04                         byte_14416:	dc.b 4
00014C57 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014C5C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014C61 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014C66 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014C6B 04                         byte_1442B:	dc.b 4
00014C6C E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014C71 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014C76 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014C7B 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014C80 04                         byte_14440:	dc.b 4
00014C81 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014C86 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014C8B 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014C90 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014C96 00                         		even
00014C96 00                         		even
00014C96                            
00014C96                            Ani_obj4A:
00014C96                            	include "_anim\obj4A.asm"
00014C96                            ; ---------------------------------------------------------------------------
00014C96                            ; Animation script - special stage entry effect from beta
00014C96                            ; ---------------------------------------------------------------------------
00014C96 0000                       		dc.w byte_14458-Ani_obj4A
00014C98 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014CAC                            		even
00014CAC                            		even
00014CAC                            
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC                            ; Sprite mappings - special stage entry	from beta
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC                            Map_obj4A:
00014CAC                            	include "_maps\obj4A.asm"
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC                            ; Sprite mappings - special stage entry	from beta
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014CB0 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014CB4 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014CB8 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014CBC 03                         byte_1447C:	dc.b 3
00014CBD F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014CC2 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014CC7 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014CCC 03                         byte_1448C:	dc.b 3
00014CCD F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014CD2 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014CD7 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014CDC 05                         byte_1449C:	dc.b 5
00014CDD E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014CE2 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014CE7 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014CEC 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014CF1 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014CF6 09                         byte_144B6:	dc.b 9
00014CF7 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014CFC F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014D01 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014D06 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014D0B F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014D10 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014D15 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014D1A 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014D1F F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014D24 12                         byte_144E4:	dc.b $12
00014D25 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014D2A F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014D2F F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014D34 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014D39 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014D3E 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014D43 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014D48 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014D4D 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014D52 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014D57 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014D5C 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014D61 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014D66 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014D6B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014D70 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014D75 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014D7A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014D7F 11                         byte_1453F:	dc.b $11
00014D80 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014D85 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014D8A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014D8F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014D94 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014D99 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014D9E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014DA3 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014DA8 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014DAD 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014DB2 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014DB7 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014DBC F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014DC1 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014DC6 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014DCB 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014DD0 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014DD5 09                         byte_14595:	dc.b 9
00014DD6 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014DDB 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014DE0 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014DE5 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014DEA FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014DEF FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014DF4 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014DF9 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014DFE 04                         		dc.b 4
00014DFF 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014E04                            		even
00014E04                            		even
00014E04                            
00014E04                            Ani_obj08:
00014E04                            	include "_anim\obj08.asm"
00014E04                            ; ---------------------------------------------------------------------------
00014E04                            ; Animation script - water splash (LZ)
00014E04                            ; ---------------------------------------------------------------------------
00014E04 0000                       		dc.w byte_145C6-Ani_obj08
00014E06 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014E0C                            		even
00014E0C                            		even
00014E0C                            
00014E0C                            ; ---------------------------------------------------------------------------
00014E0C                            ; Sprite mappings - water splash (LZ)
00014E0C                            ; ---------------------------------------------------------------------------
00014E0C                            Map_obj08:
00014E0C                            	include "_maps\obj08.asm"
00014E0C                            ; ---------------------------------------------------------------------------
00014E0C                            ; Sprite mappings - water splash (LZ)
00014E0C                            ; ---------------------------------------------------------------------------
00014E0C 0000                       		dc.w byte_145D2-Map_obj08
00014E0E 0000                       		dc.w byte_145DD-Map_obj08
00014E10 0000                       		dc.w byte_145E8-Map_obj08
00014E12 02                         byte_145D2:	dc.b 2
00014E13 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014E18 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014E1D 02                         byte_145DD:	dc.b 2
00014E1E E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014E23 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014E28 01                         byte_145E8:	dc.b 1
00014E29 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014E2E                            		even
00014E2E                            		even
00014E2E                            
00014E2E                            ; ---------------------------------------------------------------------------
00014E2E                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014E2E                            ; ---------------------------------------------------------------------------
00014E2E                            
00014E2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E2E                            
00014E2E                            
00014E2E                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014E2E 0828 0003 0022             		btst	#3,$22(a0)
00014E34 6700                       		beq.s	loc_14602
00014E36 7000                       		moveq	#0,d0
00014E38 11C0 F768                  		move.b	d0,($FFFFF768).w
00014E3C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014E40 4E75                       		rts	
00014E42                            ; ===========================================================================
00014E42                            
00014E42                            loc_14602:
00014E42 7003                       		moveq	#3,d0
00014E44 11C0 F768                  		move.b	d0,($FFFFF768).w
00014E48 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014E4C 1028 0026                  		move.b	$26(a0),d0
00014E50 0600 0020                  		addi.b	#$20,d0
00014E54 6A00                       		bpl.s	loc_14624
00014E56 1028 0026                  		move.b	$26(a0),d0
00014E5A 6A00                       		bpl.s	loc_1461E
00014E5C 5300                       		subq.b	#1,d0
00014E5E                            
00014E5E                            loc_1461E:
00014E5E 0600 0020                  		addi.b	#$20,d0
00014E62 6000                       		bra.s	loc_14630
00014E64                            ; ===========================================================================
00014E64                            
00014E64                            loc_14624:
00014E64 1028 0026                  		move.b	$26(a0),d0
00014E68 6A00                       		bpl.s	loc_1462C
00014E6A 5200                       		addq.b	#1,d0
00014E6C                            
00014E6C                            loc_1462C:
00014E6C 0600 001F                  		addi.b	#$1F,d0
00014E70                            
00014E70                            loc_14630:
00014E70 0200 00C0                  		andi.b	#$C0,d0
00014E74 0C00 0040                  		cmpi.b	#$40,d0
00014E78 6700 0000                  		beq.w	Sonic_WalkVertL
00014E7C 0C00 0080                  		cmpi.b	#$80,d0
00014E80 6700 0000                  		beq.w	Sonic_WalkCeiling
00014E84 0C00 00C0                  		cmpi.b	#$C0,d0
00014E88 6700 0000                  		beq.w	Sonic_WalkVertR
00014E8C 3428 000C                  		move.w	$C(a0),d2
00014E90 3628 0008                  		move.w	8(a0),d3
00014E94 7000                       		moveq	#0,d0
00014E96 1028 0016                  		move.b	$16(a0),d0
00014E9A 4880                       		ext.w	d0
00014E9C D440                       		add.w	d0,d2
00014E9E 1028 0017                  		move.b	$17(a0),d0
00014EA2 4880                       		ext.w	d0
00014EA4 D640                       		add.w	d0,d3
00014EA6 49F8 F768                  		lea	($FFFFF768).w,a4
00014EAA 367C 0010                  		movea.w	#$10,a3
00014EAE 3C3C 0000                  		move.w	#0,d6
00014EB2 7A0D                       		moveq	#$D,d5
00014EB4 6100 0000                  		bsr.w	FindFloor
00014EB8 3F01                       		move.w	d1,-(sp)
00014EBA 3428 000C                  		move.w	$C(a0),d2
00014EBE 3628 0008                  		move.w	8(a0),d3
00014EC2 7000                       		moveq	#0,d0
00014EC4 1028 0016                  		move.b	$16(a0),d0
00014EC8 4880                       		ext.w	d0
00014ECA D440                       		add.w	d0,d2
00014ECC 1028 0017                  		move.b	$17(a0),d0
00014ED0 4880                       		ext.w	d0
00014ED2 4440                       		neg.w	d0
00014ED4 D640                       		add.w	d0,d3
00014ED6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014EDA 367C 0010                  		movea.w	#$10,a3
00014EDE 3C3C 0000                  		move.w	#0,d6
00014EE2 7A0D                       		moveq	#$D,d5
00014EE4 6100 0000                  		bsr.w	FindFloor
00014EE8 301F                       		move.w	(sp)+,d0
00014EEA 6100 0000                  		bsr.w	Sonic_Angle
00014EEE 4A41                       		tst.w	d1
00014EF0 6700                       		beq.s	locret_146BE
00014EF2 6A00                       		bpl.s	loc_146C0
00014EF4 0C41 FFF2                  		cmpi.w	#-$E,d1
00014EF8 6D00                       		blt.s	locret_146E6
00014EFA D368 000C                  		add.w	d1,$C(a0)
00014EFE                            
00014EFE                            locret_146BE:
00014EFE 4E75                       		rts	
00014F00                            ; ===========================================================================
00014F00                            
00014F00                            loc_146C0:
00014F00 0C41 000E                  		cmpi.w	#$E,d1
00014F04 6E00                       		bgt.s	loc_146CC
00014F06                            
00014F06                            loc_146C6:
00014F06 D368 000C                  		add.w	d1,$C(a0)
00014F0A 4E75                       		rts	
00014F0C                            ; ===========================================================================
00014F0C                            
00014F0C                            loc_146CC:
00014F0C 4A28 0038                  		tst.b	$38(a0)
00014F10 66F4                       		bne.s	loc_146C6
00014F12 08E8 0001 0022             		bset	#1,$22(a0)
00014F18 08A8 0005 0022             		bclr	#5,$22(a0)
00014F1E 117C 0001 001D             		move.b	#1,$1D(a0)
00014F24 4E75                       		rts	
00014F26                            ; ===========================================================================
00014F26                            
00014F26                            locret_146E6:
00014F26 4E75                       		rts	
00014F28                            ; End of function Sonic_AnglePos
00014F28                            
00014F28                            ; ===========================================================================
00014F28 2428 0008                  		move.l	8(a0),d2
00014F2C 3028 0010                  		move.w	$10(a0),d0
00014F30 48C0                       		ext.l	d0
00014F32 E180                       		asl.l	#8,d0
00014F34 9480                       		sub.l	d0,d2
00014F36 2142 0008                  		move.l	d2,8(a0)
00014F3A 303C 0038                  		move.w	#$38,d0
00014F3E 48C0                       		ext.l	d0
00014F40 E180                       		asl.l	#8,d0
00014F42 9680                       		sub.l	d0,d3
00014F44 2143 000C                  		move.l	d3,$C(a0)
00014F48 4E75                       		rts	
00014F4A                            ; ===========================================================================
00014F4A                            
00014F4A                            locret_1470A:
00014F4A 4E75                       		rts	
00014F4C                            ; ===========================================================================
00014F4C 2628 000C                  		move.l	$C(a0),d3
00014F50 3028 0012                  		move.w	$12(a0),d0
00014F54 0440 0038                  		subi.w	#$38,d0
00014F58 3140 0012                  		move.w	d0,$12(a0)
00014F5C 48C0                       		ext.l	d0
00014F5E E180                       		asl.l	#8,d0
00014F60 9680                       		sub.l	d0,d3
00014F62 2143 000C                  		move.l	d3,$C(a0)
00014F66 4E75                       		rts	
00014F68 4E75                       		rts	
00014F6A                            ; ===========================================================================
00014F6A 2428 0008                  		move.l	8(a0),d2
00014F6E 2628 000C                  		move.l	$C(a0),d3
00014F72 3028 0010                  		move.w	$10(a0),d0
00014F76 48C0                       		ext.l	d0
00014F78 E180                       		asl.l	#8,d0
00014F7A 9480                       		sub.l	d0,d2
00014F7C 3028 0012                  		move.w	$12(a0),d0
00014F80 48C0                       		ext.l	d0
00014F82 E180                       		asl.l	#8,d0
00014F84 9680                       		sub.l	d0,d3
00014F86 2142 0008                  		move.l	d2,8(a0)
00014F8A 2143 000C                  		move.l	d3,$C(a0)
00014F8E 4E75                       		rts	
00014F90                            
00014F90                            ; ---------------------------------------------------------------------------
00014F90                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014F90                            ; ---------------------------------------------------------------------------
00014F90                            
00014F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F90                            
00014F90                            
00014F90                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014F90 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014F94 B240                       		cmp.w	d0,d1
00014F96 6F00                       		ble.s	loc_1475E
00014F98 1438 F768                  		move.b	($FFFFF768).w,d2
00014F9C 3200                       		move.w	d0,d1
00014F9E                            
00014F9E                            loc_1475E:
00014F9E 0802 0000                  		btst	#0,d2
00014FA2 6600                       		bne.s	loc_1476A
00014FA4 1142 0026                  		move.b	d2,$26(a0)
00014FA8 4E75                       		rts	
00014FAA                            ; ===========================================================================
00014FAA                            
00014FAA                            loc_1476A:
00014FAA 1428 0026                  		move.b	$26(a0),d2
00014FAE 0602 0020                  		addi.b	#$20,d2
00014FB2 0202 00C0                  		andi.b	#$C0,d2
00014FB6 1142 0026                  		move.b	d2,$26(a0)
00014FBA 4E75                       		rts	
00014FBC                            ; End of function Sonic_Angle
00014FBC                            
00014FBC                            ; ---------------------------------------------------------------------------
00014FBC                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014FBC                            ; ---------------------------------------------------------------------------
00014FBC                            
00014FBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FBC                            
00014FBC                            
00014FBC                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014FBC 3428 000C                  		move.w	$C(a0),d2
00014FC0 3628 0008                  		move.w	8(a0),d3
00014FC4 7000                       		moveq	#0,d0
00014FC6 1028 0017                  		move.b	$17(a0),d0
00014FCA 4880                       		ext.w	d0
00014FCC 4440                       		neg.w	d0
00014FCE D440                       		add.w	d0,d2
00014FD0 1028 0016                  		move.b	$16(a0),d0
00014FD4 4880                       		ext.w	d0
00014FD6 D640                       		add.w	d0,d3
00014FD8 49F8 F768                  		lea	($FFFFF768).w,a4
00014FDC 367C 0010                  		movea.w	#$10,a3
00014FE0 3C3C 0000                  		move.w	#0,d6
00014FE4 7A0D                       		moveq	#$D,d5
00014FE6 6100 0000                  		bsr.w	FindWall
00014FEA 3F01                       		move.w	d1,-(sp)
00014FEC 3428 000C                  		move.w	$C(a0),d2
00014FF0 3628 0008                  		move.w	8(a0),d3
00014FF4 7000                       		moveq	#0,d0
00014FF6 1028 0017                  		move.b	$17(a0),d0
00014FFA 4880                       		ext.w	d0
00014FFC D440                       		add.w	d0,d2
00014FFE 1028 0016                  		move.b	$16(a0),d0
00015002 4880                       		ext.w	d0
00015004 D640                       		add.w	d0,d3
00015006 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001500A 367C 0010                  		movea.w	#$10,a3
0001500E 3C3C 0000                  		move.w	#0,d6
00015012 7A0D                       		moveq	#$D,d5
00015014 6100 0000                  		bsr.w	FindWall
00015018 301F                       		move.w	(sp)+,d0
0001501A 6100 FF74                  		bsr.w	Sonic_Angle
0001501E 4A41                       		tst.w	d1
00015020 6700                       		beq.s	locret_147F0
00015022 6A00                       		bpl.s	loc_147F2
00015024 0C41 FFF2                  		cmpi.w	#-$E,d1
00015028 6D00 FF20                  		blt.w	locret_1470A
0001502C D368 0008                  		add.w	d1,8(a0)
00015030                            
00015030                            locret_147F0:
00015030 4E75                       		rts	
00015032                            ; ===========================================================================
00015032                            
00015032                            loc_147F2:
00015032 0C41 000E                  		cmpi.w	#$E,d1
00015036 6E00                       		bgt.s	loc_147FE
00015038                            
00015038                            loc_147F8:
00015038 D368 0008                  		add.w	d1,8(a0)
0001503C 4E75                       		rts	
0001503E                            ; ===========================================================================
0001503E                            
0001503E                            loc_147FE:
0001503E 4A28 0038                  		tst.b	$38(a0)
00015042 66F4                       		bne.s	loc_147F8
00015044 08E8 0001 0022             		bset	#1,$22(a0)
0001504A 08A8 0005 0022             		bclr	#5,$22(a0)
00015050 117C 0001 001D             		move.b	#1,$1D(a0)
00015056 4E75                       		rts	
00015058                            ; End of function Sonic_WalkVertR
00015058                            
00015058                            ; ---------------------------------------------------------------------------
00015058                            ; Subroutine allowing Sonic to walk upside-down
00015058                            ; ---------------------------------------------------------------------------
00015058                            
00015058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015058                            
00015058                            
00015058                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015058 3428 000C                  		move.w	$C(a0),d2
0001505C 3628 0008                  		move.w	8(a0),d3
00015060 7000                       		moveq	#0,d0
00015062 1028 0016                  		move.b	$16(a0),d0
00015066 4880                       		ext.w	d0
00015068 9440                       		sub.w	d0,d2
0001506A 0A42 000F                  		eori.w	#$F,d2
0001506E 1028 0017                  		move.b	$17(a0),d0
00015072 4880                       		ext.w	d0
00015074 D640                       		add.w	d0,d3
00015076 49F8 F768                  		lea	($FFFFF768).w,a4
0001507A 367C FFF0                  		movea.w	#-$10,a3
0001507E 3C3C 1000                  		move.w	#$1000,d6
00015082 7A0D                       		moveq	#$D,d5
00015084 6100 0000                  		bsr.w	FindFloor
00015088 3F01                       		move.w	d1,-(sp)
0001508A 3428 000C                  		move.w	$C(a0),d2
0001508E 3628 0008                  		move.w	8(a0),d3
00015092 7000                       		moveq	#0,d0
00015094 1028 0016                  		move.b	$16(a0),d0
00015098 4880                       		ext.w	d0
0001509A 9440                       		sub.w	d0,d2
0001509C 0A42 000F                  		eori.w	#$F,d2
000150A0 1028 0017                  		move.b	$17(a0),d0
000150A4 4880                       		ext.w	d0
000150A6 9640                       		sub.w	d0,d3
000150A8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000150AC 367C FFF0                  		movea.w	#-$10,a3
000150B0 3C3C 1000                  		move.w	#$1000,d6
000150B4 7A0D                       		moveq	#$D,d5
000150B6 6100 0000                  		bsr.w	FindFloor
000150BA 301F                       		move.w	(sp)+,d0
000150BC 6100 FED2                  		bsr.w	Sonic_Angle
000150C0 4A41                       		tst.w	d1
000150C2 6700                       		beq.s	locret_14892
000150C4 6A00                       		bpl.s	loc_14894
000150C6 0C41 FFF2                  		cmpi.w	#-$E,d1
000150CA 6D00 FE5A                  		blt.w	locret_146E6
000150CE 9368 000C                  		sub.w	d1,$C(a0)
000150D2                            
000150D2                            locret_14892:
000150D2 4E75                       		rts	
000150D4                            ; ===========================================================================
000150D4                            
000150D4                            loc_14894:
000150D4 0C41 000E                  		cmpi.w	#$E,d1
000150D8 6E00                       		bgt.s	loc_148A0
000150DA                            
000150DA                            loc_1489A:
000150DA 9368 000C                  		sub.w	d1,$C(a0)
000150DE 4E75                       		rts	
000150E0                            ; ===========================================================================
000150E0                            
000150E0                            loc_148A0:
000150E0 4A28 0038                  		tst.b	$38(a0)
000150E4 66F4                       		bne.s	loc_1489A
000150E6 08E8 0001 0022             		bset	#1,$22(a0)
000150EC 08A8 0005 0022             		bclr	#5,$22(a0)
000150F2 117C 0001 001D             		move.b	#1,$1D(a0)
000150F8 4E75                       		rts	
000150FA                            ; End of function Sonic_WalkCeiling
000150FA                            
000150FA                            ; ---------------------------------------------------------------------------
000150FA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000150FA                            ; ---------------------------------------------------------------------------
000150FA                            
000150FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150FA                            
000150FA                            
000150FA                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000150FA 3428 000C                  		move.w	$C(a0),d2
000150FE 3628 0008                  		move.w	8(a0),d3
00015102 7000                       		moveq	#0,d0
00015104 1028 0017                  		move.b	$17(a0),d0
00015108 4880                       		ext.w	d0
0001510A 9440                       		sub.w	d0,d2
0001510C 1028 0016                  		move.b	$16(a0),d0
00015110 4880                       		ext.w	d0
00015112 9640                       		sub.w	d0,d3
00015114 0A43 000F                  		eori.w	#$F,d3
00015118 49F8 F768                  		lea	($FFFFF768).w,a4
0001511C 367C FFF0                  		movea.w	#-$10,a3
00015120 3C3C 0800                  		move.w	#$800,d6
00015124 7A0D                       		moveq	#$D,d5
00015126 6100 0000                  		bsr.w	FindWall
0001512A 3F01                       		move.w	d1,-(sp)
0001512C 3428 000C                  		move.w	$C(a0),d2
00015130 3628 0008                  		move.w	8(a0),d3
00015134 7000                       		moveq	#0,d0
00015136 1028 0017                  		move.b	$17(a0),d0
0001513A 4880                       		ext.w	d0
0001513C D440                       		add.w	d0,d2
0001513E 1028 0016                  		move.b	$16(a0),d0
00015142 4880                       		ext.w	d0
00015144 9640                       		sub.w	d0,d3
00015146 0A43 000F                  		eori.w	#$F,d3
0001514A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001514E 367C FFF0                  		movea.w	#-$10,a3
00015152 3C3C 0800                  		move.w	#$800,d6
00015156 7A0D                       		moveq	#$D,d5
00015158 6100 0000                  		bsr.w	FindWall
0001515C 301F                       		move.w	(sp)+,d0
0001515E 6100 FE30                  		bsr.w	Sonic_Angle
00015162 4A41                       		tst.w	d1
00015164 6700                       		beq.s	locret_14934
00015166 6A00                       		bpl.s	loc_14936
00015168 0C41 FFF2                  		cmpi.w	#-$E,d1
0001516C 6D00 FDDC                  		blt.w	locret_1470A
00015170 9368 0008                  		sub.w	d1,8(a0)
00015174                            
00015174                            locret_14934:
00015174 4E75                       		rts	
00015176                            ; ===========================================================================
00015176                            
00015176                            loc_14936:
00015176 0C41 000E                  		cmpi.w	#$E,d1
0001517A 6E00                       		bgt.s	loc_14942
0001517C                            
0001517C                            loc_1493C:
0001517C 9368 0008                  		sub.w	d1,8(a0)
00015180 4E75                       		rts	
00015182                            ; ===========================================================================
00015182                            
00015182                            loc_14942:
00015182 4A28 0038                  		tst.b	$38(a0)
00015186 66F4                       		bne.s	loc_1493C
00015188 08E8 0001 0022             		bset	#1,$22(a0)
0001518E 08A8 0005 0022             		bclr	#5,$22(a0)
00015194 117C 0001 001D             		move.b	#1,$1D(a0)
0001519A 4E75                       		rts	
0001519C                            ; End of function Sonic_WalkVertL
0001519C                            
0001519C                            ; ---------------------------------------------------------------------------
0001519C                            ; Subroutine to	find which tile	the object is standing on
0001519C                            ; ---------------------------------------------------------------------------
0001519C                            
0001519C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001519C                            
0001519C                            
0001519C                            Floor_ChkTile:				; XREF: FindFloor; et al
0001519C 3002                       		move.w	d2,d0
0001519E E248                       		lsr.w	#1,d0
000151A0 0240 0380                  		andi.w	#$380,d0
000151A4 3203                       		move.w	d3,d1
000151A6 E049                       		lsr.w	#8,d1
000151A8 0241 007F                  		andi.w	#$7F,d1
000151AC D041                       		add.w	d1,d0
000151AE 72FF                       		moveq	#-1,d1
000151B0 43F8 A400                  		lea	($FFFFA400).w,a1
000151B4 1231 0000                  		move.b	(a1,d0.w),d1
000151B8 6700                       		beq.s	loc_14996
000151BA 6B00                       		bmi.s	loc_1499A
000151BC 5301                       		subq.b	#1,d1
000151BE 4881                       		ext.w	d1
000151C0 EE59                       		ror.w	#7,d1
000151C2 3002                       		move.w	d2,d0
000151C4 D040                       		add.w	d0,d0
000151C6 0240 01E0                  		andi.w	#$1E0,d0
000151CA D240                       		add.w	d0,d1
000151CC 3003                       		move.w	d3,d0
000151CE E648                       		lsr.w	#3,d0
000151D0 0240 001E                  		andi.w	#$1E,d0
000151D4 D240                       		add.w	d0,d1
000151D6                            
000151D6                            loc_14996:
000151D6 2241                       		movea.l	d1,a1
000151D8 4E75                       		rts	
000151DA                            ; ===========================================================================
000151DA                            
000151DA                            loc_1499A:
000151DA 0241 007F                  		andi.w	#$7F,d1
000151DE 0828 0006 0001             		btst	#6,1(a0)
000151E4 6700                       		beq.s	loc_149B2
000151E6 5241                       		addq.w	#1,d1
000151E8 0C41 0029                  		cmpi.w	#$29,d1
000151EC 6600                       		bne.s	loc_149B2
000151EE 323C 0051                  		move.w	#$51,d1
000151F2                            
000151F2                            loc_149B2:
000151F2 5301                       		subq.b	#1,d1
000151F4 EE59                       		ror.w	#7,d1
000151F6 3002                       		move.w	d2,d0
000151F8 D040                       		add.w	d0,d0
000151FA 0240 01E0                  		andi.w	#$1E0,d0
000151FE D240                       		add.w	d0,d1
00015200 3003                       		move.w	d3,d0
00015202 E648                       		lsr.w	#3,d0
00015204 0240 001E                  		andi.w	#$1E,d0
00015208 D240                       		add.w	d0,d1
0001520A 2241                       		movea.l	d1,a1
0001520C 4E75                       		rts	
0001520E                            ; End of function Floor_ChkTile
0001520E                            
0001520E                            
0001520E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001520E                            
0001520E                            
0001520E                            FindFloor:				; XREF: Sonic_AnglePos; et al
0001520E 618C                       		bsr.s	Floor_ChkTile
00015210 3011                       		move.w	(a1),d0
00015212 3800                       		move.w	d0,d4
00015214 0240 07FF                  		andi.w	#$7FF,d0
00015218 6700                       		beq.s	loc_149DE
0001521A 0B04                       		btst	d5,d4
0001521C 6600                       		bne.s	loc_149EC
0001521E                            
0001521E                            loc_149DE:
0001521E D44B                       		add.w	a3,d2
00015220 6100 0000                  		bsr.w	FindFloor2
00015224 944B                       		sub.w	a3,d2
00015226 0641 0010                  		addi.w	#$10,d1
0001522A 4E75                       		rts	
0001522C                            ; ===========================================================================
0001522C                            
0001522C                            loc_149EC:
0001522C 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015230 1032 0000                  		move.b	(a2,d0.w),d0
00015234 0240 00FF                  		andi.w	#$FF,d0
00015238 67E4                       		beq.s	loc_149DE
0001523A 45F9 0000 0000             		lea	(AngleMap).l,a2
00015240 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015244 E948                       		lsl.w	#4,d0
00015246 3203                       		move.w	d3,d1
00015248 0804 000B                  		btst	#$B,d4
0001524C 6700                       		beq.s	loc_14A12
0001524E 4641                       		not.w	d1
00015250 4414                       		neg.b	(a4)
00015252                            
00015252                            loc_14A12:
00015252 0804 000C                  		btst	#$C,d4
00015256 6700                       		beq.s	loc_14A22
00015258 0614 0040                  		addi.b	#$40,(a4)
0001525C 4414                       		neg.b	(a4)
0001525E 0414 0040                  		subi.b	#$40,(a4)
00015262                            
00015262                            loc_14A22:
00015262 0241 000F                  		andi.w	#$F,d1
00015266 D240                       		add.w	d0,d1
00015268 45F9 0000 0000             		lea	(CollArray1).l,a2
0001526E 1032 1000                  		move.b	(a2,d1.w),d0
00015272 4880                       		ext.w	d0
00015274 BD44                       		eor.w	d6,d4
00015276 0804 000C                  		btst	#$C,d4
0001527A 6700                       		beq.s	loc_14A3E
0001527C 4440                       		neg.w	d0
0001527E                            
0001527E                            loc_14A3E:
0001527E 4A40                       		tst.w	d0
00015280 679C                       		beq.s	loc_149DE
00015282 6B00                       		bmi.s	loc_14A5A
00015284 0C00 0010                  		cmpi.b	#$10,d0
00015288 6700                       		beq.s	loc_14A66
0001528A 3202                       		move.w	d2,d1
0001528C 0241 000F                  		andi.w	#$F,d1
00015290 D041                       		add.w	d1,d0
00015292 323C 000F                  		move.w	#$F,d1
00015296 9240                       		sub.w	d0,d1
00015298 4E75                       		rts	
0001529A                            ; ===========================================================================
0001529A                            
0001529A                            loc_14A5A:
0001529A 3202                       		move.w	d2,d1
0001529C 0241 000F                  		andi.w	#$F,d1
000152A0 D041                       		add.w	d1,d0
000152A2 6A00 FF7A                  		bpl.w	loc_149DE
000152A6                            
000152A6                            loc_14A66:
000152A6 944B                       		sub.w	a3,d2
000152A8 6100 0000                  		bsr.w	FindFloor2
000152AC D44B                       		add.w	a3,d2
000152AE 0441 0010                  		subi.w	#$10,d1
000152B2 4E75                       		rts	
000152B4                            ; End of function FindFloor
000152B4                            
000152B4                            
000152B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152B4                            
000152B4                            
000152B4                            FindFloor2:				; XREF: FindFloor
000152B4 6100 FEE6                  		bsr.w	Floor_ChkTile
000152B8 3011                       		move.w	(a1),d0
000152BA 3800                       		move.w	d0,d4
000152BC 0240 07FF                  		andi.w	#$7FF,d0
000152C0 6700                       		beq.s	loc_14A86
000152C2 0B04                       		btst	d5,d4
000152C4 6600                       		bne.s	loc_14A94
000152C6                            
000152C6                            loc_14A86:
000152C6 323C 000F                  		move.w	#$F,d1
000152CA 3002                       		move.w	d2,d0
000152CC 0240 000F                  		andi.w	#$F,d0
000152D0 9240                       		sub.w	d0,d1
000152D2 4E75                       		rts	
000152D4                            ; ===========================================================================
000152D4                            
000152D4                            loc_14A94:
000152D4 2478 F796                  		movea.l	($FFFFF796).w,a2
000152D8 1032 0000                  		move.b	(a2,d0.w),d0
000152DC 0240 00FF                  		andi.w	#$FF,d0
000152E0 67E4                       		beq.s	loc_14A86
000152E2 45F9 0000 0000             		lea	(AngleMap).l,a2
000152E8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000152EC E948                       		lsl.w	#4,d0
000152EE 3203                       		move.w	d3,d1
000152F0 0804 000B                  		btst	#$B,d4
000152F4 6700                       		beq.s	loc_14ABA
000152F6 4641                       		not.w	d1
000152F8 4414                       		neg.b	(a4)
000152FA                            
000152FA                            loc_14ABA:
000152FA 0804 000C                  		btst	#$C,d4
000152FE 6700                       		beq.s	loc_14ACA
00015300 0614 0040                  		addi.b	#$40,(a4)
00015304 4414                       		neg.b	(a4)
00015306 0414 0040                  		subi.b	#$40,(a4)
0001530A                            
0001530A                            loc_14ACA:
0001530A 0241 000F                  		andi.w	#$F,d1
0001530E D240                       		add.w	d0,d1
00015310 45F9 0000 0000             		lea	(CollArray1).l,a2
00015316 1032 1000                  		move.b	(a2,d1.w),d0
0001531A 4880                       		ext.w	d0
0001531C BD44                       		eor.w	d6,d4
0001531E 0804 000C                  		btst	#$C,d4
00015322 6700                       		beq.s	loc_14AE6
00015324 4440                       		neg.w	d0
00015326                            
00015326                            loc_14AE6:
00015326 4A40                       		tst.w	d0
00015328 679C                       		beq.s	loc_14A86
0001532A 6B00                       		bmi.s	loc_14AFC
0001532C 3202                       		move.w	d2,d1
0001532E 0241 000F                  		andi.w	#$F,d1
00015332 D041                       		add.w	d1,d0
00015334 323C 000F                  		move.w	#$F,d1
00015338 9240                       		sub.w	d0,d1
0001533A 4E75                       		rts	
0001533C                            ; ===========================================================================
0001533C                            
0001533C                            loc_14AFC:
0001533C 3202                       		move.w	d2,d1
0001533E 0241 000F                  		andi.w	#$F,d1
00015342 D041                       		add.w	d1,d0
00015344 6A00 FF80                  		bpl.w	loc_14A86
00015348 4641                       		not.w	d1
0001534A 4E75                       		rts	
0001534C                            ; End of function FindFloor2
0001534C                            
0001534C                            
0001534C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001534C                            
0001534C                            
0001534C                            FindWall:				; XREF: Sonic_WalkVertR; et al
0001534C 6100 FE4E                  		bsr.w	Floor_ChkTile
00015350 3011                       		move.w	(a1),d0
00015352 3800                       		move.w	d0,d4
00015354 0240 07FF                  		andi.w	#$7FF,d0
00015358 6700                       		beq.s	loc_14B1E
0001535A 0B04                       		btst	d5,d4
0001535C 6600                       		bne.s	loc_14B2C
0001535E                            
0001535E                            loc_14B1E:
0001535E D64B                       		add.w	a3,d3
00015360 6100 0000                  		bsr.w	FindWall2
00015364 964B                       		sub.w	a3,d3
00015366 0641 0010                  		addi.w	#$10,d1
0001536A 4E75                       		rts	
0001536C                            ; ===========================================================================
0001536C                            
0001536C                            loc_14B2C:
0001536C 2478 F796                  		movea.l	($FFFFF796).w,a2
00015370 1032 0000                  		move.b	(a2,d0.w),d0
00015374 0240 00FF                  		andi.w	#$FF,d0
00015378 67E4                       		beq.s	loc_14B1E
0001537A 45F9 0000 0000             		lea	(AngleMap).l,a2
00015380 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015384 E948                       		lsl.w	#4,d0
00015386 3202                       		move.w	d2,d1
00015388 0804 000C                  		btst	#$C,d4
0001538C 6700                       		beq.s	loc_14B5A
0001538E 4641                       		not.w	d1
00015390 0614 0040                  		addi.b	#$40,(a4)
00015394 4414                       		neg.b	(a4)
00015396 0414 0040                  		subi.b	#$40,(a4)
0001539A                            
0001539A                            loc_14B5A:
0001539A 0804 000B                  		btst	#$B,d4
0001539E 6700                       		beq.s	loc_14B62
000153A0 4414                       		neg.b	(a4)
000153A2                            
000153A2                            loc_14B62:
000153A2 0241 000F                  		andi.w	#$F,d1
000153A6 D240                       		add.w	d0,d1
000153A8 45F9 0000 0000             		lea	(CollArray2).l,a2
000153AE 1032 1000                  		move.b	(a2,d1.w),d0
000153B2 4880                       		ext.w	d0
000153B4 BD44                       		eor.w	d6,d4
000153B6 0804 000B                  		btst	#$B,d4
000153BA 6700                       		beq.s	loc_14B7E
000153BC 4440                       		neg.w	d0
000153BE                            
000153BE                            loc_14B7E:
000153BE 4A40                       		tst.w	d0
000153C0 679C                       		beq.s	loc_14B1E
000153C2 6B00                       		bmi.s	loc_14B9A
000153C4 0C00 0010                  		cmpi.b	#$10,d0
000153C8 6700                       		beq.s	loc_14BA6
000153CA 3203                       		move.w	d3,d1
000153CC 0241 000F                  		andi.w	#$F,d1
000153D0 D041                       		add.w	d1,d0
000153D2 323C 000F                  		move.w	#$F,d1
000153D6 9240                       		sub.w	d0,d1
000153D8 4E75                       		rts	
000153DA                            ; ===========================================================================
000153DA                            
000153DA                            loc_14B9A:
000153DA 3203                       		move.w	d3,d1
000153DC 0241 000F                  		andi.w	#$F,d1
000153E0 D041                       		add.w	d1,d0
000153E2 6A00 FF7A                  		bpl.w	loc_14B1E
000153E6                            
000153E6                            loc_14BA6:
000153E6 964B                       		sub.w	a3,d3
000153E8 6100 0000                  		bsr.w	FindWall2
000153EC D64B                       		add.w	a3,d3
000153EE 0441 0010                  		subi.w	#$10,d1
000153F2 4E75                       		rts	
000153F4                            ; End of function FindWall
000153F4                            
000153F4                            
000153F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153F4                            
000153F4                            
000153F4                            FindWall2:				; XREF: FindWall
000153F4 6100 FDA6                  		bsr.w	Floor_ChkTile
000153F8 3011                       		move.w	(a1),d0
000153FA 3800                       		move.w	d0,d4
000153FC 0240 07FF                  		andi.w	#$7FF,d0
00015400 6700                       		beq.s	loc_14BC6
00015402 0B04                       		btst	d5,d4
00015404 6600                       		bne.s	loc_14BD4
00015406                            
00015406                            loc_14BC6:
00015406 323C 000F                  		move.w	#$F,d1
0001540A 3003                       		move.w	d3,d0
0001540C 0240 000F                  		andi.w	#$F,d0
00015410 9240                       		sub.w	d0,d1
00015412 4E75                       		rts	
00015414                            ; ===========================================================================
00015414                            
00015414                            loc_14BD4:
00015414 2478 F796                  		movea.l	($FFFFF796).w,a2
00015418 1032 0000                  		move.b	(a2,d0.w),d0
0001541C 0240 00FF                  		andi.w	#$FF,d0
00015420 67E4                       		beq.s	loc_14BC6
00015422 45F9 0000 0000             		lea	(AngleMap).l,a2
00015428 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001542C E948                       		lsl.w	#4,d0
0001542E 3202                       		move.w	d2,d1
00015430 0804 000C                  		btst	#$C,d4
00015434 6700                       		beq.s	loc_14C02
00015436 4641                       		not.w	d1
00015438 0614 0040                  		addi.b	#$40,(a4)
0001543C 4414                       		neg.b	(a4)
0001543E 0414 0040                  		subi.b	#$40,(a4)
00015442                            
00015442                            loc_14C02:
00015442 0804 000B                  		btst	#$B,d4
00015446 6700                       		beq.s	loc_14C0A
00015448 4414                       		neg.b	(a4)
0001544A                            
0001544A                            loc_14C0A:
0001544A 0241 000F                  		andi.w	#$F,d1
0001544E D240                       		add.w	d0,d1
00015450 45F9 0000 0000             		lea	(CollArray2).l,a2
00015456 1032 1000                  		move.b	(a2,d1.w),d0
0001545A 4880                       		ext.w	d0
0001545C BD44                       		eor.w	d6,d4
0001545E 0804 000B                  		btst	#$B,d4
00015462 6700                       		beq.s	loc_14C26
00015464 4440                       		neg.w	d0
00015466                            
00015466                            loc_14C26:
00015466 4A40                       		tst.w	d0
00015468 679C                       		beq.s	loc_14BC6
0001546A 6B00                       		bmi.s	loc_14C3C
0001546C 3203                       		move.w	d3,d1
0001546E 0241 000F                  		andi.w	#$F,d1
00015472 D041                       		add.w	d1,d0
00015474 323C 000F                  		move.w	#$F,d1
00015478 9240                       		sub.w	d0,d1
0001547A 4E75                       		rts	
0001547C                            ; ===========================================================================
0001547C                            
0001547C                            loc_14C3C:
0001547C 3203                       		move.w	d3,d1
0001547E 0241 000F                  		andi.w	#$F,d1
00015482 D041                       		add.w	d1,d0
00015484 6A00 FF80                  		bpl.w	loc_14BC6
00015488 4641                       		not.w	d1
0001548A 4E75                       		rts	
0001548C                            ; End of function FindWall2
0001548C                            
0001548C                            ; ---------------------------------------------------------------------------
0001548C                            ; Unused floor/wall subroutine - logs something	to do with collision
0001548C                            ; ---------------------------------------------------------------------------
0001548C                            
0001548C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001548C                            
0001548C                            
0001548C                            FloorLog_Unk:				; XREF: Level
0001548C 4E75                       		rts	
0001548E                            
0001548E 43F9 0000 0000             		lea	(CollArray1).l,a1
00015494 45F9 0000 0000             		lea	(CollArray1).l,a2
0001549A 363C 00FF                  		move.w	#$FF,d3
0001549E                            
0001549E                            loc_14C5E:
0001549E 7A10                       		moveq	#$10,d5
000154A0 343C 000F                  		move.w	#$F,d2
000154A4                            
000154A4                            loc_14C64:
000154A4 7800                       		moveq	#0,d4
000154A6 323C 000F                  		move.w	#$F,d1
000154AA                            
000154AA                            loc_14C6A:
000154AA 3019                       		move.w	(a1)+,d0
000154AC EAA8                       		lsr.l	d5,d0
000154AE D944                       		addx.w	d4,d4
000154B0 51C9 FFF8                  		dbf	d1,loc_14C6A
000154B4                            
000154B4 34C4                       		move.w	d4,(a2)+
000154B6 92FC 0020                  		suba.w	#$20,a1
000154BA 5345                       		subq.w	#1,d5
000154BC 51CA FFE6                  		dbf	d2,loc_14C64
000154C0                            
000154C0 D2FC 0020                  		adda.w	#$20,a1
000154C4 51CB FFD8                  		dbf	d3,loc_14C5E
000154C8                            
000154C8 43F9 0000 0000             		lea	(CollArray1).l,a1
000154CE 45F9 0000 0000             		lea	(CollArray2).l,a2
000154D4 6100                       		bsr.s	FloorLog_Unk2
000154D6 43F9 0000 0000             		lea	(CollArray1).l,a1
000154DC 45F9 0000 0000             		lea	(CollArray1).l,a2
000154E2                            
000154E2                            ; End of function FloorLog_Unk
000154E2                            
000154E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154E2                            
000154E2                            
000154E2                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000154E2 363C 0FFF                  		move.w	#$FFF,d3
000154E6                            
000154E6                            loc_14CA6:
000154E6 7400                       		moveq	#0,d2
000154E8 323C 000F                  		move.w	#$F,d1
000154EC 3019                       		move.w	(a1)+,d0
000154EE 6700                       		beq.s	loc_14CD4
000154F0 6B00                       		bmi.s	loc_14CBE
000154F2                            
000154F2                            loc_14CB2:
000154F2 E248                       		lsr.w	#1,d0
000154F4 6400                       		bcc.s	loc_14CB8
000154F6 5202                       		addq.b	#1,d2
000154F8                            
000154F8                            loc_14CB8:
000154F8 51C9 FFF8                  		dbf	d1,loc_14CB2
000154FC                            
000154FC 6000                       		bra.s	loc_14CD6
000154FE                            ; ===========================================================================
000154FE                            
000154FE                            loc_14CBE:
000154FE 0C40 FFFF                  		cmpi.w	#-1,d0
00015502 6700                       		beq.s	loc_14CD0
00015504                            
00015504                            loc_14CC4:
00015504 E348                       		lsl.w	#1,d0
00015506 6400                       		bcc.s	loc_14CCA
00015508 5302                       		subq.b	#1,d2
0001550A                            
0001550A                            loc_14CCA:
0001550A 51C9 FFF8                  		dbf	d1,loc_14CC4
0001550E                            
0001550E 6000                       		bra.s	loc_14CD6
00015510                            ; ===========================================================================
00015510                            
00015510                            loc_14CD0:
00015510 303C 0010                  		move.w	#$10,d0
00015514                            
00015514                            loc_14CD4:
00015514 3400                       		move.w	d0,d2
00015516                            
00015516                            loc_14CD6:
00015516 14C2                       		move.b	d2,(a2)+
00015518 51CB FFCC                  		dbf	d3,loc_14CA6
0001551C                            
0001551C 4E75                       		rts	
0001551E                            
0001551E                            ; End of function FloorLog_Unk2
0001551E                            
0001551E                            
0001551E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001551E                            
0001551E                            
0001551E                            Sonic_WalkSpeed:			; XREF: Sonic_Move
0001551E 2628 0008                  		move.l	8(a0),d3
00015522 2428 000C                  		move.l	$C(a0),d2
00015526 3228 0010                  		move.w	$10(a0),d1
0001552A 48C1                       		ext.l	d1
0001552C E181                       		asl.l	#8,d1
0001552E D681                       		add.l	d1,d3
00015530 3228 0012                  		move.w	$12(a0),d1
00015534 48C1                       		ext.l	d1
00015536 E181                       		asl.l	#8,d1
00015538 D481                       		add.l	d1,d2
0001553A 4842                       		swap	d2
0001553C 4843                       		swap	d3
0001553E 11C0 F768                  		move.b	d0,($FFFFF768).w
00015542 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015546 1200                       		move.b	d0,d1
00015548 0600 0020                  		addi.b	#$20,d0
0001554C 6A00                       		bpl.s	loc_14D1A
0001554E 1001                       		move.b	d1,d0
00015550 6A00                       		bpl.s	loc_14D14
00015552 5300                       		subq.b	#1,d0
00015554                            
00015554                            loc_14D14:
00015554 0600 0020                  		addi.b	#$20,d0
00015558 6000                       		bra.s	loc_14D24
0001555A                            ; ===========================================================================
0001555A                            
0001555A                            loc_14D1A:
0001555A 1001                       		move.b	d1,d0
0001555C 6A00                       		bpl.s	loc_14D20
0001555E 5200                       		addq.b	#1,d0
00015560                            
00015560                            loc_14D20:
00015560 0600 001F                  		addi.b	#$1F,d0
00015564                            
00015564                            loc_14D24:
00015564 0200 00C0                  		andi.b	#$C0,d0
00015568 6700 0000                  		beq.w	loc_14DF0
0001556C 0C00 0080                  		cmpi.b	#$80,d0
00015570 6700 0000                  		beq.w	loc_14F7C
00015574 0201 0038                  		andi.b	#$38,d1
00015578 6600                       		bne.s	loc_14D3C
0001557A 5042                       		addq.w	#8,d2
0001557C                            
0001557C                            loc_14D3C:
0001557C 0C00 0040                  		cmpi.b	#$40,d0
00015580 6700 0000                  		beq.w	loc_1504A
00015584 6000 0000                  		bra.w	loc_14EBC
00015588                            
00015588                            ; End of function Sonic_WalkSpeed
00015588                            
00015588                            
00015588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015588                            
00015588                            
00015588                            sub_14D48:				; XREF: Sonic_Jump
00015588 11C0 F768                  		move.b	d0,($FFFFF768).w
0001558C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015590 0600 0020                  		addi.b	#$20,d0
00015594 0200 00C0                  		andi.b	#$C0,d0
00015598 0C00 0040                  		cmpi.b	#$40,d0
0001559C 6700 0000                  		beq.w	loc_14FD6
000155A0 0C00 0080                  		cmpi.b	#$80,d0
000155A4 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000155A8 0C00 00C0                  		cmpi.b	#$C0,d0
000155AC 6700 0000                  		beq.w	sub_14E50
000155B0                            
000155B0                            ; End of function sub_14D48
000155B0                            
000155B0                            ; ---------------------------------------------------------------------------
000155B0                            ; Subroutine to	make Sonic land	on the floor after jumping
000155B0                            ; ---------------------------------------------------------------------------
000155B0                            
000155B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155B0                            
000155B0                            
000155B0                            Sonic_HitFloor:				; XREF: Sonic_Floor
000155B0 3428 000C                  		move.w	$C(a0),d2
000155B4 3628 0008                  		move.w	8(a0),d3
000155B8 7000                       		moveq	#0,d0
000155BA 1028 0016                  		move.b	$16(a0),d0
000155BE 4880                       		ext.w	d0
000155C0 D440                       		add.w	d0,d2
000155C2 1028 0017                  		move.b	$17(a0),d0
000155C6 4880                       		ext.w	d0
000155C8 D640                       		add.w	d0,d3
000155CA 49F8 F768                  		lea	($FFFFF768).w,a4
000155CE 367C 0010                  		movea.w	#$10,a3
000155D2 3C3C 0000                  		move.w	#0,d6
000155D6 7A0D                       		moveq	#$D,d5
000155D8 6100 FC34                  		bsr.w	FindFloor
000155DC 3F01                       		move.w	d1,-(sp)
000155DE 3428 000C                  		move.w	$C(a0),d2
000155E2 3628 0008                  		move.w	8(a0),d3
000155E6 7000                       		moveq	#0,d0
000155E8 1028 0016                  		move.b	$16(a0),d0
000155EC 4880                       		ext.w	d0
000155EE D440                       		add.w	d0,d2
000155F0 1028 0017                  		move.b	$17(a0),d0
000155F4 4880                       		ext.w	d0
000155F6 9640                       		sub.w	d0,d3
000155F8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000155FC 367C 0010                  		movea.w	#$10,a3
00015600 3C3C 0000                  		move.w	#0,d6
00015604 7A0D                       		moveq	#$D,d5
00015606 6100 FC06                  		bsr.w	FindFloor
0001560A 301F                       		move.w	(sp)+,d0
0001560C 143C 0000                  		move.b	#0,d2
00015610                            
00015610                            loc_14DD0:
00015610 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015614 B240                       		cmp.w	d0,d1
00015616 6F00                       		ble.s	loc_14DDE
00015618 1638 F768                  		move.b	($FFFFF768).w,d3
0001561C C141                       		exg	d0,d1
0001561E                            
0001561E                            loc_14DDE:
0001561E 0803 0000                  		btst	#0,d3
00015622 6700                       		beq.s	locret_14DE6
00015624 1602                       		move.b	d2,d3
00015626                            
00015626                            locret_14DE6:
00015626 4E75                       		rts	
00015628                            
00015628                            ; End of function Sonic_HitFloor
00015628                            
00015628                            ; ===========================================================================
00015628 3428 000C                  		move.w	$C(a0),d2
0001562C 3628 0008                  		move.w	8(a0),d3
00015630                            
00015630                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015630 0642 000A                  		addi.w	#$A,d2
00015634 49F8 F768                  		lea	($FFFFF768).w,a4
00015638 367C 0010                  		movea.w	#$10,a3
0001563C 3C3C 0000                  		move.w	#0,d6
00015640 7A0E                       		moveq	#$E,d5
00015642 6100 FBCA                  		bsr.w	FindFloor
00015646 143C 0000                  		move.b	#0,d2
0001564A                            
0001564A                            loc_14E0A:				; XREF: sub_14EB4
0001564A 1638 F768                  		move.b	($FFFFF768).w,d3
0001564E 0803 0000                  		btst	#0,d3
00015652 6700                       		beq.s	locret_14E16
00015654 1602                       		move.b	d2,d3
00015656                            
00015656                            locret_14E16:
00015656 4E75                       		rts	
00015658                            
00015658                            ; ---------------------------------------------------------------------------
00015658                            ; Subroutine allowing objects to interact with the floor
00015658                            ; ---------------------------------------------------------------------------
00015658                            
00015658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015658                            
00015658                            
00015658                            ObjHitFloor:
00015658 3628 0008                  		move.w	8(a0),d3
0001565C                            
0001565C                            ; End of function ObjHitFloor
0001565C                            
0001565C                            
0001565C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001565C                            
0001565C                            
0001565C                            ObjHitFloor2:
0001565C 3428 000C                  		move.w	$C(a0),d2
00015660 7000                       		moveq	#0,d0
00015662 1028 0016                  		move.b	$16(a0),d0
00015666 4880                       		ext.w	d0
00015668 D440                       		add.w	d0,d2
0001566A 49F8 F768                  		lea	($FFFFF768).w,a4
0001566E 18BC 0000                  		move.b	#0,(a4)
00015672 367C 0010                  		movea.w	#$10,a3
00015676 3C3C 0000                  		move.w	#0,d6
0001567A 7A0D                       		moveq	#$D,d5
0001567C 6100 FB90                  		bsr.w	FindFloor
00015680 1638 F768                  		move.b	($FFFFF768).w,d3
00015684 0803 0000                  		btst	#0,d3
00015688 6700                       		beq.s	locret_14E4E
0001568A 163C 0000                  		move.b	#0,d3
0001568E                            
0001568E                            locret_14E4E:
0001568E 4E75                       		rts	
00015690                            ; End of function ObjHitFloor2
00015690                            
00015690                            
00015690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015690                            
00015690                            
00015690                            sub_14E50:				; XREF: sub_14D48
00015690 3428 000C                  		move.w	$C(a0),d2
00015694 3628 0008                  		move.w	8(a0),d3
00015698 7000                       		moveq	#0,d0
0001569A 1028 0017                  		move.b	$17(a0),d0
0001569E 4880                       		ext.w	d0
000156A0 9440                       		sub.w	d0,d2
000156A2 1028 0016                  		move.b	$16(a0),d0
000156A6 4880                       		ext.w	d0
000156A8 D640                       		add.w	d0,d3
000156AA 49F8 F768                  		lea	($FFFFF768).w,a4
000156AE 367C 0010                  		movea.w	#$10,a3
000156B2 3C3C 0000                  		move.w	#0,d6
000156B6 7A0E                       		moveq	#$E,d5
000156B8 6100 FC92                  		bsr.w	FindWall
000156BC 3F01                       		move.w	d1,-(sp)
000156BE 3428 000C                  		move.w	$C(a0),d2
000156C2 3628 0008                  		move.w	8(a0),d3
000156C6 7000                       		moveq	#0,d0
000156C8 1028 0017                  		move.b	$17(a0),d0
000156CC 4880                       		ext.w	d0
000156CE D440                       		add.w	d0,d2
000156D0 1028 0016                  		move.b	$16(a0),d0
000156D4 4880                       		ext.w	d0
000156D6 D640                       		add.w	d0,d3
000156D8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000156DC 367C 0010                  		movea.w	#$10,a3
000156E0 3C3C 0000                  		move.w	#0,d6
000156E4 7A0E                       		moveq	#$E,d5
000156E6 6100 FC64                  		bsr.w	FindWall
000156EA 301F                       		move.w	(sp)+,d0
000156EC 143C 00C0                  		move.b	#-$40,d2
000156F0 6000 FF1E                  		bra.w	loc_14DD0
000156F4                            
000156F4                            ; End of function sub_14E50
000156F4                            
000156F4                            
000156F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156F4                            
000156F4                            
000156F4                            sub_14EB4:				; XREF: Sonic_Floor
000156F4 3428 000C                  		move.w	$C(a0),d2
000156F8 3628 0008                  		move.w	8(a0),d3
000156FC                            
000156FC                            loc_14EBC:
000156FC 0643 000A                  		addi.w	#$A,d3
00015700 49F8 F768                  		lea	($FFFFF768).w,a4
00015704 367C 0010                  		movea.w	#$10,a3
00015708 3C3C 0000                  		move.w	#0,d6
0001570C 7A0E                       		moveq	#$E,d5
0001570E 6100 FC3C                  		bsr.w	FindWall
00015712 143C 00C0                  		move.b	#-$40,d2
00015716 6000 FF32                  		bra.w	loc_14E0A
0001571A                            
0001571A                            ; End of function sub_14EB4
0001571A                            
0001571A                            ; ---------------------------------------------------------------------------
0001571A                            ; Subroutine to	detect when an object hits a wall to its right
0001571A                            ; ---------------------------------------------------------------------------
0001571A                            
0001571A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001571A                            
0001571A                            
0001571A                            ObjHitWallRight:
0001571A D668 0008                  		add.w	8(a0),d3
0001571E 3428 000C                  		move.w	$C(a0),d2
00015722 49F8 F768                  		lea	($FFFFF768).w,a4
00015726 18BC 0000                  		move.b	#0,(a4)
0001572A 367C 0010                  		movea.w	#$10,a3
0001572E 3C3C 0000                  		move.w	#0,d6
00015732 7A0E                       		moveq	#$E,d5
00015734 6100 FC16                  		bsr.w	FindWall
00015738 1638 F768                  		move.b	($FFFFF768).w,d3
0001573C 0803 0000                  		btst	#0,d3
00015740 6700                       		beq.s	locret_14F06
00015742 163C 00C0                  		move.b	#-$40,d3
00015746                            
00015746                            locret_14F06:
00015746 4E75                       		rts	
00015748                            
00015748                            ; End of function ObjHitWallRight
00015748                            
00015748                            ; ---------------------------------------------------------------------------
00015748                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015748                            ; touches them
00015748                            ; ---------------------------------------------------------------------------
00015748                            
00015748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015748                            
00015748                            
00015748                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015748 3428 000C                  		move.w	$C(a0),d2
0001574C 3628 0008                  		move.w	8(a0),d3
00015750 7000                       		moveq	#0,d0
00015752 1028 0016                  		move.b	$16(a0),d0
00015756 4880                       		ext.w	d0
00015758 9440                       		sub.w	d0,d2
0001575A 0A42 000F                  		eori.w	#$F,d2
0001575E 1028 0017                  		move.b	$17(a0),d0
00015762 4880                       		ext.w	d0
00015764 D640                       		add.w	d0,d3
00015766 49F8 F768                  		lea	($FFFFF768).w,a4
0001576A 367C FFF0                  		movea.w	#-$10,a3
0001576E 3C3C 1000                  		move.w	#$1000,d6
00015772 7A0E                       		moveq	#$E,d5
00015774 6100 FA98                  		bsr.w	FindFloor
00015778 3F01                       		move.w	d1,-(sp)
0001577A 3428 000C                  		move.w	$C(a0),d2
0001577E 3628 0008                  		move.w	8(a0),d3
00015782 7000                       		moveq	#0,d0
00015784 1028 0016                  		move.b	$16(a0),d0
00015788 4880                       		ext.w	d0
0001578A 9440                       		sub.w	d0,d2
0001578C 0A42 000F                  		eori.w	#$F,d2
00015790 1028 0017                  		move.b	$17(a0),d0
00015794 4880                       		ext.w	d0
00015796 9640                       		sub.w	d0,d3
00015798 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001579C 367C FFF0                  		movea.w	#-$10,a3
000157A0 3C3C 1000                  		move.w	#$1000,d6
000157A4 7A0E                       		moveq	#$E,d5
000157A6 6100 FA66                  		bsr.w	FindFloor
000157AA 301F                       		move.w	(sp)+,d0
000157AC 143C 0080                  		move.b	#-$80,d2
000157B0 6000 FE5E                  		bra.w	loc_14DD0
000157B4                            ; End of function Sonic_DontRunOnWalls
000157B4                            
000157B4                            ; ===========================================================================
000157B4 3428 000C                  		move.w	$C(a0),d2
000157B8 3628 0008                  		move.w	8(a0),d3
000157BC                            
000157BC                            loc_14F7C:
000157BC 0442 000A                  		subi.w	#$A,d2
000157C0 0A42 000F                  		eori.w	#$F,d2
000157C4 49F8 F768                  		lea	($FFFFF768).w,a4
000157C8 367C FFF0                  		movea.w	#-$10,a3
000157CC 3C3C 1000                  		move.w	#$1000,d6
000157D0 7A0E                       		moveq	#$E,d5
000157D2 6100 FA3A                  		bsr.w	FindFloor
000157D6 143C 0080                  		move.b	#-$80,d2
000157DA 6000 FE6E                  		bra.w	loc_14E0A
000157DE                            
000157DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157DE                            
000157DE                            
000157DE                            ObjHitCeiling:
000157DE 3428 000C                  		move.w	$C(a0),d2
000157E2 3628 0008                  		move.w	8(a0),d3
000157E6 7000                       		moveq	#0,d0
000157E8 1028 0016                  		move.b	$16(a0),d0
000157EC 4880                       		ext.w	d0
000157EE 9440                       		sub.w	d0,d2
000157F0 0A42 000F                  		eori.w	#$F,d2
000157F4 49F8 F768                  		lea	($FFFFF768).w,a4
000157F8 367C FFF0                  		movea.w	#-$10,a3
000157FC 3C3C 1000                  		move.w	#$1000,d6
00015800 7A0E                       		moveq	#$E,d5
00015802 6100 FA0A                  		bsr.w	FindFloor
00015806 1638 F768                  		move.b	($FFFFF768).w,d3
0001580A 0803 0000                  		btst	#0,d3
0001580E 6700                       		beq.s	locret_14FD4
00015810 163C 0080                  		move.b	#-$80,d3
00015814                            
00015814                            locret_14FD4:
00015814 4E75                       		rts	
00015816                            ; End of function ObjHitCeiling
00015816                            
00015816                            ; ===========================================================================
00015816                            
00015816                            loc_14FD6:				; XREF: sub_14D48
00015816 3428 000C                  		move.w	$C(a0),d2
0001581A 3628 0008                  		move.w	8(a0),d3
0001581E 7000                       		moveq	#0,d0
00015820 1028 0017                  		move.b	$17(a0),d0
00015824 4880                       		ext.w	d0
00015826 9440                       		sub.w	d0,d2
00015828 1028 0016                  		move.b	$16(a0),d0
0001582C 4880                       		ext.w	d0
0001582E 9640                       		sub.w	d0,d3
00015830 0A43 000F                  		eori.w	#$F,d3
00015834 49F8 F768                  		lea	($FFFFF768).w,a4
00015838 367C FFF0                  		movea.w	#-$10,a3
0001583C 3C3C 0800                  		move.w	#$800,d6
00015840 7A0E                       		moveq	#$E,d5
00015842 6100 FB08                  		bsr.w	FindWall
00015846 3F01                       		move.w	d1,-(sp)
00015848 3428 000C                  		move.w	$C(a0),d2
0001584C 3628 0008                  		move.w	8(a0),d3
00015850 7000                       		moveq	#0,d0
00015852 1028 0017                  		move.b	$17(a0),d0
00015856 4880                       		ext.w	d0
00015858 D440                       		add.w	d0,d2
0001585A 1028 0016                  		move.b	$16(a0),d0
0001585E 4880                       		ext.w	d0
00015860 9640                       		sub.w	d0,d3
00015862 0A43 000F                  		eori.w	#$F,d3
00015866 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001586A 367C FFF0                  		movea.w	#-$10,a3
0001586E 3C3C 0800                  		move.w	#$800,d6
00015872 7A0E                       		moveq	#$E,d5
00015874 6100 FAD6                  		bsr.w	FindWall
00015878 301F                       		move.w	(sp)+,d0
0001587A 143C 0040                  		move.b	#$40,d2
0001587E 6000 FD90                  		bra.w	loc_14DD0
00015882                            
00015882                            ; ---------------------------------------------------------------------------
00015882                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015882                            ; ---------------------------------------------------------------------------
00015882                            
00015882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015882                            
00015882                            
00015882                            Sonic_HitWall:				; XREF: Sonic_Floor
00015882 3428 000C                  		move.w	$C(a0),d2
00015886 3628 0008                  		move.w	8(a0),d3
0001588A                            
0001588A                            loc_1504A:
0001588A 0443 000A                  		subi.w	#$A,d3
0001588E 0A43 000F                  		eori.w	#$F,d3
00015892 49F8 F768                  		lea	($FFFFF768).w,a4
00015896 367C FFF0                  		movea.w	#-$10,a3
0001589A 3C3C 0800                  		move.w	#$800,d6
0001589E 7A0E                       		moveq	#$E,d5
000158A0 6100 FAAA                  		bsr.w	FindWall
000158A4 143C 0040                  		move.b	#$40,d2
000158A8 6000 FDA0                  		bra.w	loc_14E0A
000158AC                            ; End of function Sonic_HitWall
000158AC                            
000158AC                            ; ---------------------------------------------------------------------------
000158AC                            ; Subroutine to	detect when an object hits a wall to its left
000158AC                            ; ---------------------------------------------------------------------------
000158AC                            
000158AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158AC                            
000158AC                            
000158AC                            ObjHitWallLeft:
000158AC D668 0008                  		add.w	8(a0),d3
000158B0 3428 000C                  		move.w	$C(a0),d2
000158B4 49F8 F768                  		lea	($FFFFF768).w,a4
000158B8 18BC 0000                  		move.b	#0,(a4)
000158BC 367C FFF0                  		movea.w	#-$10,a3
000158C0 3C3C 0800                  		move.w	#$800,d6
000158C4 7A0E                       		moveq	#$E,d5
000158C6 6100 FA84                  		bsr.w	FindWall
000158CA 1638 F768                  		move.b	($FFFFF768).w,d3
000158CE 0803 0000                  		btst	#0,d3
000158D2 6700                       		beq.s	locret_15098
000158D4 163C 0040                  		move.b	#$40,d3
000158D8                            
000158D8                            locret_15098:
000158D8 4E75                       		rts	
000158DA                            ; End of function ObjHitWallLeft
000158DA                            
000158DA                            ; ===========================================================================
000158DA                            ; ---------------------------------------------------------------------------
000158DA                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000158DA                            ; ---------------------------------------------------------------------------
000158DA                            
000158DA                            Obj66:					; XREF: Obj_Index
000158DA 7000                       		moveq	#0,d0
000158DC 1028 0024                  		move.b	$24(a0),d0
000158E0 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000158E4 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000158E8                            ; ===========================================================================
000158E8 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000158EA 0000                       		dc.w Obj66_Action-Obj66_Index
000158EC 0000                       		dc.w Obj66_Display-Obj66_Index
000158EE 0000                       		dc.w Obj66_Release-Obj66_Index
000158F0                            ; ===========================================================================
000158F0                            
000158F0                            Obj66_Main:				; XREF: Obj66_Index
000158F0 5428 0024                  		addq.b	#2,$24(a0)
000158F4 323C 0001                  		move.w	#1,d1
000158F8 2248                       		movea.l	a0,a1
000158FA 6000                       		bra.s	Obj66_MakeItem
000158FC                            ; ===========================================================================
000158FC                            
000158FC                            Obj66_Loop:
000158FC 6100 88E6                  		bsr.w	SingleObjLoad
00015900 6600                       		bne.s	loc_150FE
00015902 12BC 0066                  		move.b	#$66,0(a1)
00015906 5829 0024                  		addq.b	#4,$24(a1)
0001590A 3368 0008 0008             		move.w	8(a0),8(a1)
00015910 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015916 137C 0003 0018             		move.b	#3,$18(a1)
0001591C 137C 0010 001A             		move.b	#$10,$1A(a1)
00015922                            
00015922                            Obj66_MakeItem:				; XREF: Obj66_Main
00015922 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
0001592A 337C 4348 0002             		move.w	#$4348,2(a1)
00015930 0029 0004 0001             		ori.b	#4,1(a1)
00015936 137C 0038 0019             		move.b	#$38,$19(a1)
0001593C                            
0001593C                            loc_150FE:
0001593C 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015940                            
00015940 117C 0030 0019             		move.b	#$30,$19(a0)
00015946 117C 0004 0018             		move.b	#4,$18(a0)
0001594C 317C 003C 0030             		move.w	#$3C,$30(a0)
00015952 117C 0001 0034             		move.b	#1,$34(a0)
00015958 1168 0028 0038             		move.b	$28(a0),$38(a0)
0001595E                            
0001595E                            Obj66_Action:				; XREF: Obj66_Index
0001595E 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015962 4A28 0001                  		tst.b	1(a0)
00015966 6A00 0000                  		bpl.w	Obj66_Display
0001596A 323C 0030                  		move.w	#$30,d1
0001596E 3401                       		move.w	d1,d2
00015970 3602                       		move.w	d2,d3
00015972 5243                       		addq.w	#1,d3
00015974 3828 0008                  		move.w	8(a0),d4
00015978 6100 A7B4                  		bsr.w	SolidObject
0001597C 0828 0005 0022             		btst	#5,$22(a0)
00015982 6700 0000                  		beq.w	Obj66_Display
00015986 43F8 D000                  		lea	($FFFFD000).w,a1
0001598A 720E                       		moveq	#$E,d1
0001598C 3029 0008                  		move.w	8(a1),d0
00015990 B068 0008                  		cmp.w	8(a0),d0
00015994 6500                       		bcs.s	Obj66_GrabSonic
00015996 7207                       		moveq	#7,d1
00015998                            
00015998                            Obj66_GrabSonic:
00015998 B228 001A                  		cmp.b	$1A(a0),d1
0001599C 6600                       		bne.s	Obj66_Display
0001599E 1141 0032                  		move.b	d1,$32(a0)
000159A2 5828 0024                  		addq.b	#4,$24(a0)
000159A6 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000159AC 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000159B2 337C 0800 0014             		move.w	#$800,$14(a1)
000159B8 337C 0000 0010             		move.w	#0,$10(a1)
000159BE 337C 0000 0012             		move.w	#0,$12(a1)
000159C4 08A8 0005 0022             		bclr	#5,$22(a0)
000159CA 08A9 0005 0022             		bclr	#5,$22(a1)
000159D0 08E9 0001 0022             		bset	#1,$22(a1)
000159D6 3429 0008                  		move.w	8(a1),d2
000159DA 3629 000C                  		move.w	$C(a1),d3
000159DE 6100 0000                  		bsr.w	Obj66_ChgPos
000159E2 D569 0008                  		add.w	d2,8(a1)
000159E6 D769 000C                  		add.w	d3,$C(a1)
000159EA E0E9 0008                  		asr	8(a1)
000159EE E0E9 000C                  		asr	$C(a1)
000159F2                            
000159F2                            Obj66_Display:				; XREF: Obj66_Index
000159F2 6000 A412                  		bra.w	MarkObjGone
000159F6                            ; ===========================================================================
000159F6                            
000159F6                            Obj66_Release:				; XREF: Obj66_Index
000159F6 1028 001A                  		move.b	$1A(a0),d0
000159FA 0C00 0004                  		cmpi.b	#4,d0
000159FE 6700                       		beq.s	loc_151C8
00015A00 0C00 0007                  		cmpi.b	#7,d0
00015A04 6600                       		bne.s	loc_151F8
00015A06                            
00015A06                            loc_151C8:
00015A06 B028 0032                  		cmp.b	$32(a0),d0
00015A0A 6700                       		beq.s	loc_151F8
00015A0C 43F8 D000                  		lea	($FFFFD000).w,a1
00015A10 337C 0000 0010             		move.w	#0,$10(a1)
00015A16 337C 0800 0012             		move.w	#$800,$12(a1)
00015A1C 0C00 0004                  		cmpi.b	#4,d0
00015A20 6700                       		beq.s	loc_151F0
00015A22 337C 0800 0010             		move.w	#$800,$10(a1)
00015A28 337C 0800 0012             		move.w	#$800,$12(a1)
00015A2E                            
00015A2E                            loc_151F0:
00015A2E 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015A32 5928 0024                  		subq.b	#4,$24(a0)
00015A36                            
00015A36                            loc_151F8:
00015A36 6100                       		bsr.s	Obj66_ChkSwitch
00015A38 6100                       		bsr.s	Obj66_ChgPos
00015A3A 6000 A3CA                  		bra.w	MarkObjGone
00015A3E                            
00015A3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A3E                            
00015A3E                            
00015A3E                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015A3E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015A42 7000                       		moveq	#0,d0
00015A44 1028 0038                  		move.b	$38(a0),d0
00015A48 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015A4E 6700                       		beq.s	loc_15224	; if not, branch
00015A50 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015A54 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015A56 4428 0034                  		neg.b	$34(a0)
00015A5A 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015A60 6000                       		bra.s	Obj66_Animate
00015A62                            ; ===========================================================================
00015A62                            
00015A62                            loc_15224:
00015A62 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015A66                            
00015A66                            Obj66_Animate:
00015A66 5328 001E                  		subq.b	#1,$1E(a0)
00015A6A 6A00                       		bpl.s	locret_15246
00015A6C 117C 0007 001E             		move.b	#7,$1E(a0)
00015A72 1228 0034                  		move.b	$34(a0),d1
00015A76 1028 001A                  		move.b	$1A(a0),d0
00015A7A D001                       		add.b	d1,d0
00015A7C 0200 000F                  		andi.b	#$F,d0
00015A80 1140 001A                  		move.b	d0,$1A(a0)
00015A84                            
00015A84                            locret_15246:
00015A84 4E75                       		rts	
00015A86                            ; End of function Obj66_ChkSwitch
00015A86                            
00015A86                            
00015A86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A86                            
00015A86                            
00015A86                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015A86 43F8 D000                  		lea	($FFFFD000).w,a1
00015A8A 7000                       		moveq	#0,d0
00015A8C 1028 001A                  		move.b	$1A(a0),d0
00015A90 D040                       		add.w	d0,d0
00015A92 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015A96 101A                       		move.b	(a2)+,d0
00015A98 4880                       		ext.w	d0
00015A9A D068 0008                  		add.w	8(a0),d0
00015A9E 3340 0008                  		move.w	d0,8(a1)
00015AA2 101A                       		move.b	(a2)+,d0
00015AA4 4880                       		ext.w	d0
00015AA6 D068 000C                  		add.w	$C(a0),d0
00015AAA 3340 000C                  		move.w	d0,$C(a1)
00015AAE 4E75                       		rts	
00015AB0                            ; End of function Obj66_ChgPos
00015AB0                            
00015AB0                            ; ===========================================================================
00015AB0 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015AB4 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015AB8 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015ABC 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015AC0 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015AC4 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015AC8 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015ACC E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015AD0                            ; ---------------------------------------------------------------------------
00015AD0                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015AD0                            ; ---------------------------------------------------------------------------
00015AD0                            Map_obj66:
00015AD0                            	include "_maps\obj66.asm"
00015AD0                            ; ---------------------------------------------------------------------------
00015AD0                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015AD0                            ; ---------------------------------------------------------------------------
00015AD0 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015AD4 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015AD8 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015ADC 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015AE0 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015AE4 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015AE8 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015AEC 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015AF0 0000                       		dc.w byte_154A4-Map_obj66
00015AF2 06                         byte_152B4:	dc.b 6
00015AF3 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015AF8 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015AFD E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015B02 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015B07 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015B0C 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015B11 06                         byte_152D3:	dc.b 6
00015B12 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015B17 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015B1C F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015B21 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015B26 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015B2B 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015B30 06                         byte_152F2:	dc.b 6
00015B31 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015B36 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015B3B 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015B40 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015B45 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015B4A 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015B4F 06                         byte_15311:	dc.b 6
00015B50 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015B55 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015B5A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015B5F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015B64 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015B69 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015B6E 06                         byte_15330:	dc.b 6
00015B6F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015B74 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015B79 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015B7E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015B83 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015B88 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015B8D 06                         byte_1534F:	dc.b 6
00015B8E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015B93 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015B98 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015B9D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015BA2 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015BA7 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015BAC 06                         byte_1536E:	dc.b 6
00015BAD 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015BB2 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015BB7 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015BBC 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015BC1 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015BC6 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015BCB 06                         byte_1538D:	dc.b 6
00015BCC 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015BD1 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015BD6 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015BDB F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015BE0 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015BE5 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015BEA 06                         byte_153AC:	dc.b 6
00015BEB E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015BF0 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015BF5 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015BFA E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015BFF 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015C04 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015C09 06                         byte_153CB:	dc.b 6
00015C0A D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015C0F E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015C14 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015C19 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015C1E F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015C23 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015C28 06                         byte_153EA:	dc.b 6
00015C29 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015C2E E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015C33 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015C38 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015C3D E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015C42 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015C47 06                         byte_15409:	dc.b 6
00015C48 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015C4D D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015C52 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015C57 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015C5C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015C61 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015C66 06                         byte_15428:	dc.b 6
00015C67 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015C6C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015C71 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015C76 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015C7B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015C80 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015C85 06                         byte_15447:	dc.b 6
00015C86 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015C8B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015C90 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015C95 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015C9A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015C9F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015CA4 06                         byte_15466:	dc.b 6
00015CA5 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015CAA D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015CAF D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015CB4 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015CB9 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015CBE E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015CC3 06                         byte_15485:	dc.b 6
00015CC4 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015CC9 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015CCE DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015CD3 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015CD8 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015CDD F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015CE2 0C                         byte_154A4:	dc.b $C
00015CE3 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015CE8 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015CED E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015CF2 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015CF7 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015CFC E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015D01 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015D06 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015D0B 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015D10 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015D15 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015D1A 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015D20 00                         		even
00015D20 00                         		even
00015D20                            
00015D20                            ; ===========================================================================
00015D20                            ; ---------------------------------------------------------------------------
00015D20                            ; Object 67 - disc that	you run	around (SBZ)
00015D20                            ; ---------------------------------------------------------------------------
00015D20                            
00015D20                            Obj67:					; XREF: Obj_Index
00015D20 7000                       		moveq	#0,d0
00015D22 1028 0024                  		move.b	$24(a0),d0
00015D26 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015D2A 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015D2E                            ; ===========================================================================
00015D2E 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015D30 0000                       		dc.w Obj67_Action-Obj67_Index
00015D32                            ; ===========================================================================
00015D32                            
00015D32                            Obj67_Main:				; XREF: Obj67_Index
00015D32 5428 0024                  		addq.b	#2,$24(a0)
00015D36 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015D3E 317C C344 0002             		move.w	#$C344,2(a0)
00015D44 117C 0004 0001             		move.b	#4,1(a0)
00015D4A 117C 0004 0018             		move.b	#4,$18(a0)
00015D50 117C 0008 0019             		move.b	#8,$19(a0)
00015D56 3168 0008 0032             		move.w	8(a0),$32(a0)
00015D5C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015D62 117C 0018 0034             		move.b	#$18,$34(a0)
00015D68 117C 0048 0038             		move.b	#$48,$38(a0)
00015D6E 1228 0028                  		move.b	$28(a0),d1	; get object type
00015D72 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015D76 6700                       		beq.s	loc_15546
00015D78 117C 0010 0034             		move.b	#$10,$34(a0)
00015D7E 117C 0038 0038             		move.b	#$38,$38(a0)
00015D84                            
00015D84                            loc_15546:
00015D84 1228 0028                  		move.b	$28(a0),d1	; get object type
00015D88 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015D8C 4881                       		ext.w	d1
00015D8E E741                       		asl.w	#3,d1
00015D90 3141 0036                  		move.w	d1,$36(a0)
00015D94 1028 0022                  		move.b	$22(a0),d0
00015D98 E418                       		ror.b	#2,d0
00015D9A 0200 00C0                  		andi.b	#-$40,d0
00015D9E 1140 0026                  		move.b	d0,$26(a0)
00015DA2                            
00015DA2                            Obj67_Action:				; XREF: Obj67_Index
00015DA2 6100 0000                  		bsr.w	Obj67_MoveSonic
00015DA6 6100 0000                  		bsr.w	Obj67_MoveSpot
00015DAA 6000 0000                  		bra.w	Obj67_ChkDel
00015DAE                            ; ===========================================================================
00015DAE                            
00015DAE                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015DAE 7400                       		moveq	#0,d2
00015DB0 1428 0038                  		move.b	$38(a0),d2
00015DB4 3602                       		move.w	d2,d3
00015DB6 D643                       		add.w	d3,d3
00015DB8 43F8 D000                  		lea	($FFFFD000).w,a1
00015DBC 3029 0008                  		move.w	8(a1),d0
00015DC0 9068 0032                  		sub.w	$32(a0),d0
00015DC4 D042                       		add.w	d2,d0
00015DC6 B043                       		cmp.w	d3,d0
00015DC8 6400                       		bcc.s	loc_155A8
00015DCA 3229 000C                  		move.w	$C(a1),d1
00015DCE 9268 0030                  		sub.w	$30(a0),d1
00015DD2 D242                       		add.w	d2,d1
00015DD4 B243                       		cmp.w	d3,d1
00015DD6 6400                       		bcc.s	loc_155A8
00015DD8 0829 0001 0022             		btst	#1,$22(a1)
00015DDE 6700                       		beq.s	loc_155B8
00015DE0 4228 003A                  		clr.b	$3A(a0)
00015DE4 4E75                       		rts	
00015DE6                            ; ===========================================================================
00015DE6                            
00015DE6                            loc_155A8:
00015DE6 4A28 003A                  		tst.b	$3A(a0)
00015DEA 6700                       		beq.s	locret_155B6
00015DEC 4229 0038                  		clr.b	$38(a1)
00015DF0 4228 003A                  		clr.b	$3A(a0)
00015DF4                            
00015DF4                            locret_155B6:
00015DF4 4E75                       		rts	
00015DF6                            ; ===========================================================================
00015DF6                            
00015DF6                            loc_155B8:
00015DF6 4A28 003A                  		tst.b	$3A(a0)
00015DFA 6600                       		bne.s	loc_155E2
00015DFC 117C 0001 003A             		move.b	#1,$3A(a0)
00015E02 0829 0002 0022             		btst	#2,$22(a1)
00015E08 6600                       		bne.s	loc_155D0
00015E0A 4229 001C                  		clr.b	$1C(a1)
00015E0E                            
00015E0E                            loc_155D0:
00015E0E 08A9 0005 0022             		bclr	#5,$22(a1)
00015E14 137C 0001 001D             		move.b	#1,$1D(a1)
00015E1A 137C 0001 0038             		move.b	#1,$38(a1)
00015E20                            
00015E20                            loc_155E2:
00015E20 3029 0014                  		move.w	$14(a1),d0
00015E24 4A68 0036                  		tst.w	$36(a0)
00015E28 6A00                       		bpl.s	loc_15608
00015E2A 0C40 FC00                  		cmpi.w	#-$400,d0
00015E2E 6F00                       		ble.s	loc_155FA
00015E30 337C FC00 0014             		move.w	#-$400,$14(a1)
00015E36 4E75                       		rts	
00015E38                            ; ===========================================================================
00015E38                            
00015E38                            loc_155FA:
00015E38 0C40 F100                  		cmpi.w	#-$F00,d0
00015E3C 6C00                       		bge.s	locret_15606
00015E3E 337C F100 0014             		move.w	#-$F00,$14(a1)
00015E44                            
00015E44                            locret_15606:
00015E44 4E75                       		rts	
00015E46                            ; ===========================================================================
00015E46                            
00015E46                            loc_15608:
00015E46 0C40 0400                  		cmpi.w	#$400,d0
00015E4A 6C00                       		bge.s	loc_15616
00015E4C 337C 0400 0014             		move.w	#$400,$14(a1)
00015E52 4E75                       		rts	
00015E54                            ; ===========================================================================
00015E54                            
00015E54                            loc_15616:
00015E54 0C40 0F00                  		cmpi.w	#$F00,d0
00015E58 6F00                       		ble.s	locret_15622
00015E5A 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015E60                            
00015E60                            locret_15622:
00015E60 4E75                       		rts	
00015E62                            ; ===========================================================================
00015E62                            
00015E62                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015E62 3028 0036                  		move.w	$36(a0),d0
00015E66 D168 0026                  		add.w	d0,$26(a0)
00015E6A 1028 0026                  		move.b	$26(a0),d0
00015E6E 4EB9 0000 2C64             		jsr	(CalcSine).l
00015E74 3428 0030                  		move.w	$30(a0),d2
00015E78 3628 0032                  		move.w	$32(a0),d3
00015E7C 7800                       		moveq	#0,d4
00015E7E 1828 0034                  		move.b	$34(a0),d4
00015E82 E14C                       		lsl.w	#8,d4
00015E84 2A04                       		move.l	d4,d5
00015E86 C9C0                       		muls.w	d0,d4
00015E88 4844                       		swap	d4
00015E8A CBC1                       		muls.w	d1,d5
00015E8C 4845                       		swap	d5
00015E8E D842                       		add.w	d2,d4
00015E90 DA43                       		add.w	d3,d5
00015E92 3144 000C                  		move.w	d4,$C(a0)
00015E96 3145 0008                  		move.w	d5,8(a0)
00015E9A 4E75                       		rts	
00015E9C                            ; ===========================================================================
00015E9C                            
00015E9C                            Obj67_ChkDel:				; XREF: Obj67_Action
00015E9C 3028 0032                  		move.w	$32(a0),d0
00015EA0 0240 FF80                  		andi.w	#-$80,d0
00015EA4 3238 F700                  		move.w	($FFFFF700).w,d1
00015EA8 0441 0080                  		subi.w	#$80,d1
00015EAC 0241 FF80                  		andi.w	#-$80,d1
00015EB0 9041                       		sub.w	d1,d0
00015EB2 0C40 0280                  		cmpi.w	#$280,d0
00015EB6 6200                       		bhi.s	Obj67_Delete
00015EB8 4EF9 0000 DD5E             		jmp	DisplaySprite
00015EBE                            ; ===========================================================================
00015EBE                            
00015EBE                            Obj67_Delete:
00015EBE 4EF9 0000 DD9A             		jmp	DeleteObject
00015EC4                            ; ===========================================================================
00015EC4                            ; ---------------------------------------------------------------------------
00015EC4                            ; Sprite mappings - disc that you run around (SBZ)
00015EC4                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015EC4                            ; part of the level tiles.)
00015EC4                            ; ---------------------------------------------------------------------------
00015EC4                            Map_obj67:
00015EC4                            	include "_maps\obj67.asm"
00015EC4                            ; ---------------------------------------------------------------------------
00015EC4                            ; Sprite mappings - disc that you run around (SBZ)
00015EC4                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015EC4                            ; part of the level tiles.)
00015EC4                            ; ---------------------------------------------------------------------------
00015EC4 0000                       		dc.w byte_15688-Map_obj67
00015EC6 01                         byte_15688:	dc.b 1
00015EC7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015ECC                            		even
00015ECC                            		even
00015ECC                            
00015ECC                            ; ===========================================================================
00015ECC                            ; ---------------------------------------------------------------------------
00015ECC                            ; Object 68 - conveyor belts (SBZ)
00015ECC                            ; ---------------------------------------------------------------------------
00015ECC                            
00015ECC                            Obj68:					; XREF: Obj_Index
00015ECC 7000                       		moveq	#0,d0
00015ECE 1028 0024                  		move.b	$24(a0),d0
00015ED2 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015ED6 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015EDA                            ; ===========================================================================
00015EDA 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015EDC 0000                       		dc.w Obj68_Action-Obj68_Index
00015EDE                            ; ===========================================================================
00015EDE                            
00015EDE                            Obj68_Main:				; XREF: Obj68_Index
00015EDE 5428 0024                  		addq.b	#2,$24(a0)
00015EE2 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015EE8 1228 0028                  		move.b	$28(a0),d1	; get object type
00015EEC 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015EF0 6700                       		beq.s	loc_156BA	; if zero, branch
00015EF2 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015EF8                            
00015EF8                            loc_156BA:
00015EF8 1228 0028                  		move.b	$28(a0),d1	; get object type
00015EFC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015F00 4881                       		ext.w	d1
00015F02 E841                       		asr.w	#4,d1
00015F04 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015F08                            
00015F08                            Obj68_Action:				; XREF: Obj68_Index
00015F08 6100                       		bsr.s	Obj68_MoveSonic
00015F0A 3028 0008                  		move.w	8(a0),d0
00015F0E 0240 FF80                  		andi.w	#$FF80,d0
00015F12 3238 F700                  		move.w	($FFFFF700).w,d1
00015F16 0441 0080                  		subi.w	#$80,d1
00015F1A 0241 FF80                  		andi.w	#$FF80,d1
00015F1E 9041                       		sub.w	d1,d0
00015F20 0C40 0280                  		cmpi.w	#$280,d0
00015F24 6200                       		bhi.s	Obj68_Delete
00015F26 4E75                       		rts	
00015F28                            ; ===========================================================================
00015F28                            
00015F28                            Obj68_Delete:
00015F28 4EF9 0000 DD9A             		jmp	DeleteObject
00015F2E                            ; ===========================================================================
00015F2E                            
00015F2E                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015F2E 7400                       		moveq	#0,d2
00015F30 1428 0038                  		move.b	$38(a0),d2
00015F34 3602                       		move.w	d2,d3
00015F36 D643                       		add.w	d3,d3
00015F38 43F8 D000                  		lea	($FFFFD000).w,a1
00015F3C 3029 0008                  		move.w	8(a1),d0
00015F40 9068 0008                  		sub.w	8(a0),d0
00015F44 D042                       		add.w	d2,d0
00015F46 B043                       		cmp.w	d3,d0
00015F48 6400                       		bcc.s	locret_1572E
00015F4A 3229 000C                  		move.w	$C(a1),d1
00015F4E 9268 000C                  		sub.w	$C(a0),d1
00015F52 0641 0030                  		addi.w	#$30,d1
00015F56 0C41 0030                  		cmpi.w	#$30,d1
00015F5A 6400                       		bcc.s	locret_1572E
00015F5C 0829 0001 0022             		btst	#1,$22(a1)
00015F62 6600                       		bne.s	locret_1572E
00015F64 3028 0036                  		move.w	$36(a0),d0
00015F68 D169 0008                  		add.w	d0,8(a1)
00015F6C                            
00015F6C                            locret_1572E:
00015F6C 4E75                       		rts	
00015F6E                            
00015F6E                            ; ===========================================================================
00015F6E                            ; ---------------------------------------------------------------------------
00015F6E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015F6E                            ; ---------------------------------------------------------------------------
00015F6E                            
00015F6E                            Obj69:					; XREF: Obj_Index
00015F6E 7000                       		moveq	#0,d0
00015F70 1028 0024                  		move.b	$24(a0),d0
00015F74 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015F78 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015F7C                            ; ===========================================================================
00015F7C 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015F7E 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015F80 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015F82                            ; ===========================================================================
00015F82                            
00015F82                            Obj69_Main:				; XREF: Obj69_Index
00015F82 5428 0024                  		addq.b	#2,$24(a0)
00015F86 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015F8E 317C 4492 0002             		move.w	#$4492,2(a0)
00015F94 0028 0004 0001             		ori.b	#4,1(a0)
00015F9A 117C 0080 0019             		move.b	#$80,$19(a0)
00015FA0 7000                       		moveq	#0,d0
00015FA2 1028 0028                  		move.b	$28(a0),d0
00015FA6 0240 000F                  		andi.w	#$F,d0
00015FAA C0FC 003C                  		mulu.w	#$3C,d0
00015FAE 3140 0032                  		move.w	d0,$32(a0)
00015FB2 4A28 0028                  		tst.b	$28(a0)
00015FB6 6A00                       		bpl.s	Obj69_Trapdoor
00015FB8 5428 0024                  		addq.b	#2,$24(a0)
00015FBC 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015FC4 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015FCA 117C 0010 0019             		move.b	#$10,$19(a0)
00015FD0 117C 0002 001C             		move.b	#2,$1C(a0)
00015FD6 7000                       		moveq	#0,d0
00015FD8 1028 0028                  		move.b	$28(a0),d0	; get object type
00015FDC 3200                       		move.w	d0,d1
00015FDE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015FE2 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015FE6 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015FEA 3140 0032                  		move.w	d0,$32(a0)
00015FEE 0241 0070                  		andi.w	#$70,d1
00015FF2 0641 0010                  		addi.w	#$10,d1
00015FF6 E549                       		lsl.w	#2,d1
00015FF8 5341                       		subq.w	#1,d1
00015FFA 3141 0036                  		move.w	d1,$36(a0)
00015FFE 6000                       		bra.s	Obj69_Spinner
00016000                            ; ===========================================================================
00016000                            
00016000                            Obj69_Trapdoor:				; XREF: Obj69_Index
00016000 5368 0030                  		subq.w	#1,$30(a0)
00016004 6A00                       		bpl.s	Obj69_Animate
00016006 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001600C 0868 0000 001C             		bchg	#0,$1C(a0)
00016012 4A28 0001                  		tst.b	1(a0)
00016016 6A00                       		bpl.s	Obj69_Animate
00016018 303C 00BB                  		move.w	#$BB,d0
0001601C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00016022                            
00016022                            Obj69_Animate:
00016022 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016028 4EB9 0000 AE1E             		jsr	AnimateSprite
0001602E 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016032 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016034 323C 004B                  		move.w	#$4B,d1
00016038 343C 000C                  		move.w	#$C,d2
0001603C 3602                       		move.w	d2,d3
0001603E 5243                       		addq.w	#1,d3
00016040 3828 0008                  		move.w	8(a0),d4
00016044 6100 A0E8                  		bsr.w	SolidObject
00016048 6000 9DBC                  		bra.w	MarkObjGone
0001604C                            ; ===========================================================================
0001604C                            
0001604C                            Obj69_NotSolid:
0001604C 0828 0003 0022             		btst	#3,$22(a0)
00016052 6700                       		beq.s	Obj69_Display
00016054 43F8 D000                  		lea	($FFFFD000).w,a1
00016058 08A9 0003 0022             		bclr	#3,$22(a1)
0001605E 08A8 0003 0022             		bclr	#3,$22(a0)
00016064 4228 0025                  		clr.b	$25(a0)
00016068                            
00016068                            Obj69_Display:
00016068 6000 9D9C                  		bra.w	MarkObjGone
0001606C                            ; ===========================================================================
0001606C                            
0001606C                            Obj69_Spinner:				; XREF: Obj69_Index
0001606C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016070 C068 0036                  		and.w	$36(a0),d0
00016074 6600                       		bne.s	Obj69_Delay
00016076 117C 0001 0034             		move.b	#1,$34(a0)
0001607C                            
0001607C                            Obj69_Delay:
0001607C 4A28 0034                  		tst.b	$34(a0)
00016080 6700                       		beq.s	Obj69_Animate2
00016082 5368 0030                  		subq.w	#1,$30(a0)
00016086 6A00                       		bpl.s	Obj69_Animate2
00016088 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001608E 4228 0034                  		clr.b	$34(a0)
00016092 0868 0000 001C             		bchg	#0,$1C(a0)
00016098                            
00016098                            Obj69_Animate2:
00016098 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001609E 4EB9 0000 AE1E             		jsr	AnimateSprite
000160A4 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000160A8 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000160AA 323C 001B                  		move.w	#$1B,d1
000160AE 343C 0007                  		move.w	#7,d2
000160B2 3602                       		move.w	d2,d3
000160B4 5243                       		addq.w	#1,d3
000160B6 3828 0008                  		move.w	8(a0),d4
000160BA 6100 A072                  		bsr.w	SolidObject
000160BE 6000 9D46                  		bra.w	MarkObjGone
000160C2                            ; ===========================================================================
000160C2                            
000160C2                            Obj69_NotSolid2:
000160C2 0828 0003 0022             		btst	#3,$22(a0)
000160C8 6700                       		beq.s	Obj69_Display2
000160CA 43F8 D000                  		lea	($FFFFD000).w,a1
000160CE 08A9 0003 0022             		bclr	#3,$22(a1)
000160D4 08A8 0003 0022             		bclr	#3,$22(a0)
000160DA 4228 0025                  		clr.b	$25(a0)
000160DE                            
000160DE                            Obj69_Display2:
000160DE 6000 9D26                  		bra.w	MarkObjGone
000160E2                            ; ===========================================================================
000160E2                            Ani_obj69:
000160E2                            	include "_anim\obj69.asm"
000160E2                            ; ---------------------------------------------------------------------------
000160E2                            ; Animation script - trapdoor (SBZ)
000160E2                            ; ---------------------------------------------------------------------------
000160E2 0000                       		dc.w byte_158AC-Ani_obj69
000160E4 0000                       		dc.w byte_158B2-Ani_obj69
000160E6 0000                       		dc.w byte_158B8-Ani_obj69
000160E8 0000                       		dc.w byte_158CC-Ani_obj69
000160EA 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000160F0 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000160F6 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016103 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001610A 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016117 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001611E                            		even
0001611E                            		even
0001611E                            
0001611E                            ; ---------------------------------------------------------------------------
0001611E                            ; Sprite mappings - trapdoor (SBZ)
0001611E                            ; ---------------------------------------------------------------------------
0001611E                            Map_obj69:
0001611E                            	include "_maps\obj69.asm"
0001611E                            ; ---------------------------------------------------------------------------
0001611E                            ; Sprite mappings - trapdoor (SBZ)
0001611E                            ; ---------------------------------------------------------------------------
0001611E 0000                       		dc.w byte_158E6-Map_obj69
00016120 0000                       		dc.w byte_158FB-Map_obj69
00016122 0000                       		dc.w byte_15924-Map_obj69
00016124 04                         byte_158E6:	dc.b 4
00016125 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001612A F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001612F F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016134 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00016139 08                         byte_158FB:	dc.b 8
0001613A F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
0001613F 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016144 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016149 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001614E F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016153 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016158 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001615D 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016162 04                         byte_15924:	dc.b 4
00016163 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016168 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001616D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016172 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016178 00                         		even
00016178 00                         		even
00016178                            
00016178                            ; ---------------------------------------------------------------------------
00016178                            ; Sprite mappings - spinning platforms (SBZ)
00016178                            ; ---------------------------------------------------------------------------
00016178                            Map_obj69a:
00016178                            	include "_maps\obj69a.asm"
00016178                            ; ---------------------------------------------------------------------------
00016178                            ; Sprite mappings - spinning platforms (SBZ)
00016178                            ; ---------------------------------------------------------------------------
00016178 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001617C 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016180 0000                       		dc.w byte_15970-Map_obj69a
00016182 02                         byte_15944:	dc.b 2
00016183 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016188 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001618D 02                         byte_1594F:	dc.b 2
0001618E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016193 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016198 02                         byte_1595A:	dc.b 2
00016199 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001619E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000161A3 02                         byte_15965:	dc.b 2
000161A4 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000161A9 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000161AE 02                         byte_15970:	dc.b 2
000161AF F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000161B4 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000161BA 00                         		even
000161BA 00                         		even
000161BA                            
000161BA                            ; ===========================================================================
000161BA                            ; ---------------------------------------------------------------------------
000161BA                            ; Object 6A - ground saws and pizza cutters (SBZ)
000161BA                            ; ---------------------------------------------------------------------------
000161BA                            
000161BA                            Obj6A:					; XREF: Obj_Index
000161BA 7000                       		moveq	#0,d0
000161BC 1028 0024                  		move.b	$24(a0),d0
000161C0 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000161C4 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000161C8                            ; ===========================================================================
000161C8 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000161CA 0000                       		dc.w Obj6A_Action-Obj6A_Index
000161CC                            ; ===========================================================================
000161CC                            
000161CC                            Obj6A_Main:				; XREF: Obj6A_Index
000161CC 5428 0024                  		addq.b	#2,$24(a0)
000161D0 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000161D8 317C 43B5 0002             		move.w	#$43B5,2(a0)
000161DE 117C 0004 0001             		move.b	#4,1(a0)
000161E4 117C 0004 0018             		move.b	#4,$18(a0)
000161EA 117C 0020 0019             		move.b	#$20,$19(a0)
000161F0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000161F6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000161FC 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016202 6400                       		bcc.s	Obj6A_Action
00016204 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001620A                            
0001620A                            Obj6A_Action:				; XREF: Obj6A_Index
0001620A 7000                       		moveq	#0,d0
0001620C 1028 0028                  		move.b	$28(a0),d0
00016210 0240 0007                  		andi.w	#7,d0
00016214 D040                       		add.w	d0,d0
00016216 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001621A 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
0001621E 3028 003A                  		move.w	$3A(a0),d0
00016222 0240 FF80                  		andi.w	#$FF80,d0
00016226 3238 F700                  		move.w	($FFFFF700).w,d1
0001622A 0441 0080                  		subi.w	#$80,d1
0001622E 0241 FF80                  		andi.w	#$FF80,d1
00016232 9041                       		sub.w	d1,d0
00016234 0C40 0280                  		cmpi.w	#$280,d0
00016238 6200                       		bhi.s	Obj6A_Delete
0001623A 4EF9 0000 DD5E             		jmp	DisplaySprite
00016240                            ; ===========================================================================
00016240                            
00016240                            Obj6A_Delete:
00016240 4EF9 0000 DD9A             		jmp	DeleteObject
00016246                            ; ===========================================================================
00016246 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001624A 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
0001624E 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016250                            ; ===========================================================================
00016250                            
00016250                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016250 4E75                       		rts	
00016252                            ; ===========================================================================
00016252                            
00016252                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016252 323C 0060                  		move.w	#$60,d1
00016256 7000                       		moveq	#0,d0
00016258 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001625C 0828 0000 0022             		btst	#0,$22(a0)
00016262 6700                       		beq.s	Obj6A_Animate01
00016264 4440                       		neg.w	d0
00016266 D041                       		add.w	d1,d0
00016268                            
00016268                            Obj6A_Animate01:
00016268 3228 003A                  		move.w	$3A(a0),d1
0001626C 9240                       		sub.w	d0,d1
0001626E 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016272 5328 001E                  		subq.b	#1,$1E(a0)
00016276 6A00                       		bpl.s	loc_15A46
00016278 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001627E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016284                            
00016284                            loc_15A46:
00016284 4A28 0001                  		tst.b	1(a0)
00016288 6A00                       		bpl.s	locret_15A60
0001628A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001628E 0240 000F                  		andi.w	#$F,d0
00016292 6600                       		bne.s	locret_15A60
00016294 303C 00B0                  		move.w	#$B0,d0
00016298 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
0001629E                            
0001629E                            locret_15A60:
0001629E 4E75                       		rts	
000162A0                            ; ===========================================================================
000162A0                            
000162A0                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000162A0 323C 0030                  		move.w	#$30,d1
000162A4 7000                       		moveq	#0,d0
000162A6 1038 FE64                  		move.b	($FFFFFE64).w,d0
000162AA 0828 0000 0022             		btst	#0,$22(a0)
000162B0 6700                       		beq.s	Obj6A_Animate02
000162B2 4440                       		neg.w	d0
000162B4 0640 0080                  		addi.w	#$80,d0
000162B8                            
000162B8                            Obj6A_Animate02:
000162B8 3228 0038                  		move.w	$38(a0),d1
000162BC 9240                       		sub.w	d0,d1
000162BE 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000162C2 5328 001E                  		subq.b	#1,$1E(a0)
000162C6 6A00                       		bpl.s	loc_15A96
000162C8 117C 0002 001E             		move.b	#2,$1E(a0)
000162CE 0868 0000 001A             		bchg	#0,$1A(a0)
000162D4                            
000162D4                            loc_15A96:
000162D4 4A28 0001                  		tst.b	1(a0)
000162D8 6A00                       		bpl.s	locret_15AB0
000162DA 1038 FE64                  		move.b	($FFFFFE64).w,d0
000162DE 0C00 0018                  		cmpi.b	#$18,d0
000162E2 6600                       		bne.s	locret_15AB0
000162E4 303C 00B0                  		move.w	#$B0,d0
000162E8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000162EE                            
000162EE                            locret_15AB0:
000162EE 4E75                       		rts	
000162F0                            ; ===========================================================================
000162F0                            
000162F0                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000162F0 4A28 003D                  		tst.b	$3D(a0)
000162F4 6600                       		bne.s	Obj6A_Animate03
000162F6 3038 D008                  		move.w	($FFFFD008).w,d0
000162FA 0440 00C0                  		subi.w	#$C0,d0
000162FE 6500                       		bcs.s	loc_15B02
00016300 9068 0008                  		sub.w	8(a0),d0
00016304 6500                       		bcs.s	loc_15B02
00016306 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001630A 0440 0080                  		subi.w	#$80,d0
0001630E B068 000C                  		cmp.w	$C(a0),d0
00016312 6400                       		bcc.s	locret_15B04
00016314 0640 0100                  		addi.w	#$100,d0
00016318 B068 000C                  		cmp.w	$C(a0),d0
0001631C 6500                       		bcs.s	locret_15B04
0001631E 117C 0001 003D             		move.b	#1,$3D(a0)
00016324 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001632A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016330 117C 0002 001A             		move.b	#2,$1A(a0)
00016336 303C 00B0                  		move.w	#$B0,d0
0001633A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016340                            
00016340                            loc_15B02:
00016340 588F                       		addq.l	#4,sp
00016342                            
00016342                            locret_15B04:
00016342 4E75                       		rts	
00016344                            ; ===========================================================================
00016344                            
00016344                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016344 4EB9 0000 DD38             		jsr	SpeedToPos
0001634A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016350 5328 001E                  		subq.b	#1,$1E(a0)
00016354 6A00                       		bpl.s	locret_15B24
00016356 117C 0002 001E             		move.b	#2,$1E(a0)
0001635C 0868 0000 001A             		bchg	#0,$1A(a0)
00016362                            
00016362                            locret_15B24:
00016362 4E75                       		rts	
00016364                            ; ===========================================================================
00016364                            
00016364                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016364 4A28 003D                  		tst.b	$3D(a0)
00016368 6600                       		bne.s	Obj6A_Animate04
0001636A 3038 D008                  		move.w	($FFFFD008).w,d0
0001636E 0640 00E0                  		addi.w	#$E0,d0
00016372 9068 0008                  		sub.w	8(a0),d0
00016376 6400                       		bcc.s	loc_15B74
00016378 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001637C 0440 0080                  		subi.w	#$80,d0
00016380 B068 000C                  		cmp.w	$C(a0),d0
00016384 6400                       		bcc.s	locret_15B76
00016386 0640 0100                  		addi.w	#$100,d0
0001638A B068 000C                  		cmp.w	$C(a0),d0
0001638E 6500                       		bcs.s	locret_15B76
00016390 117C 0001 003D             		move.b	#1,$3D(a0)
00016396 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001639C 117C 00A2 0020             		move.b	#$A2,$20(a0)
000163A2 117C 0002 001A             		move.b	#2,$1A(a0)
000163A8 303C 00B0                  		move.w	#$B0,d0
000163AC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000163B2                            
000163B2                            loc_15B74:
000163B2 588F                       		addq.l	#4,sp
000163B4                            
000163B4                            locret_15B76:
000163B4 4E75                       		rts	
000163B6                            ; ===========================================================================
000163B6                            
000163B6                            Obj6A_Animate04:
000163B6 4EB9 0000 DD38             		jsr	SpeedToPos
000163BC 3168 0008 003A             		move.w	8(a0),$3A(a0)
000163C2 5328 001E                  		subq.b	#1,$1E(a0)
000163C6 6A00                       		bpl.s	locret_15B96
000163C8 117C 0002 001E             		move.b	#2,$1E(a0)
000163CE 0868 0000 001A             		bchg	#0,$1A(a0)
000163D4                            
000163D4                            locret_15B96:
000163D4 4E75                       		rts	
000163D6                            ; ===========================================================================
000163D6                            ; ---------------------------------------------------------------------------
000163D6                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000163D6                            ; ---------------------------------------------------------------------------
000163D6                            Map_obj6A:
000163D6                            	include "_maps\obj6A.asm"
000163D6                            ; ---------------------------------------------------------------------------
000163D6                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000163D6                            ; ---------------------------------------------------------------------------
000163D6 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000163DA 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000163DE 07                         byte_15BA0:	dc.b 7
000163DF C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000163E4 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000163E9 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000163EE E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000163F3 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000163F8 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000163FD 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016402 07                         byte_15BC4:	dc.b 7
00016403 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016408 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001640D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016412 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016417 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001641C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016421 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016426 04                         byte_15BE8:	dc.b 4
00016427 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001642C E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016431 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016436 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001643B 04                         byte_15BFD:	dc.b 4
0001643C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016441 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016446 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001644B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016450                            		even
00016450                            		even
00016450                            
00016450                            ; ===========================================================================
00016450                            ; ---------------------------------------------------------------------------
00016450                            ; Object 6B - stomper (SBZ)
00016450                            ; ---------------------------------------------------------------------------
00016450                            
00016450                            Obj6B:					; XREF: Obj_Index
00016450 7000                       		moveq	#0,d0
00016452 1028 0024                  		move.b	$24(a0),d0
00016456 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001645A 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
0001645E                            ; ===========================================================================
0001645E 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016460 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016462                            
00016462 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016466 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001646A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001646E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016472 8040 0005                  		dc.b  $80, $40,	  0,   5
00016476                            ; ===========================================================================
00016476                            
00016476                            Obj6B_Main:				; XREF: Obj6B_Index
00016476 5428 0024                  		addq.b	#2,$24(a0)
0001647A 7000                       		moveq	#0,d0
0001647C 1028 0028                  		move.b	$28(a0),d0
00016480 E448                       		lsr.w	#2,d0
00016482 0240 001C                  		andi.w	#$1C,d0
00016486 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001648A 115B 0019                  		move.b	(a3)+,$19(a0)
0001648E 115B 0016                  		move.b	(a3)+,$16(a0)
00016492 E448                       		lsr.w	#2,d0
00016494 1140 001A                  		move.b	d0,$1A(a0)
00016498 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000164A0 317C 22C0 0002             		move.w	#$22C0,2(a0)
000164A6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000164AC 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000164AE 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000164B4 6700                       		beq.s	Obj6B_SBZ3
000164B6                            
000164B6                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000164B6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000164BA 7000                       		moveq	#0,d0
000164BC 1028 0023                  		move.b	$23(a0),d0
000164C0 6700                       		beq.s	Obj6B_Delete
000164C2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000164C8                            
000164C8                            Obj6B_Delete:
000164C8 4EF9 0000 DD9A             		jmp	DeleteObject
000164CE                            ; ===========================================================================
000164CE                            
000164CE                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000164CE 317C 41F0 0002             		move.w	#$41F0,2(a0)
000164D4 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000164DA 6600                       		bne.s	Obj6B_SBZ12
000164DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000164E0 7000                       		moveq	#0,d0
000164E2 1028 0023                  		move.b	$23(a0),d0
000164E6 6700                       		beq.s	Obj6B_SBZ12
000164E8 0832 0000 0002             		btst	#0,2(a2,d0.w)
000164EE 6700                       		beq.s	Obj6B_SBZ12
000164F0 4238 F7CB                  		clr.b	($FFFFF7CB).w
000164F4 60C0                       		bra.s	Obj6B_ChkGone
000164F6                            ; ===========================================================================
000164F6                            
000164F6                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000164F6 0028 0004 0001             		ori.b	#4,1(a0)
000164FC 117C 0004 0018             		move.b	#4,$18(a0)
00016502 3168 0008 0034             		move.w	8(a0),$34(a0)
00016508 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001650E 7000                       		moveq	#0,d0
00016510 101B                       		move.b	(a3)+,d0
00016512 3140 003C                  		move.w	d0,$3C(a0)
00016516 7000                       		moveq	#0,d0
00016518 1028 0028                  		move.b	$28(a0),d0
0001651C 6A00                       		bpl.s	Obj6B_Action
0001651E 0200 000F                  		andi.b	#$F,d0
00016522 1140 003E                  		move.b	d0,$3E(a0)
00016526 1153 0028                  		move.b	(a3),$28(a0)
0001652A 0C13 0005                  		cmpi.b	#5,(a3)
0001652E 6600                       		bne.s	Obj6B_ChkGone2
00016530 08E8 0004 0001             		bset	#4,1(a0)
00016536                            
00016536                            Obj6B_ChkGone2:
00016536 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001653A 7000                       		moveq	#0,d0
0001653C 1028 0023                  		move.b	$23(a0),d0
00016540 6700                       		beq.s	Obj6B_Action
00016542 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016548                            
00016548                            Obj6B_Action:				; XREF: Obj6B_Index
00016548 3F28 0008                  		move.w	8(a0),-(sp)
0001654C 7000                       		moveq	#0,d0
0001654E 1028 0028                  		move.b	$28(a0),d0
00016552 0240 000F                  		andi.w	#$F,d0
00016556 D040                       		add.w	d0,d0
00016558 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
0001655C 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016560 381F                       		move.w	(sp)+,d4
00016562 4A28 0001                  		tst.b	1(a0)
00016566 6A00                       		bpl.s	Obj6B_ChkDel
00016568 7200                       		moveq	#0,d1
0001656A 1228 0019                  		move.b	$19(a0),d1
0001656E 0641 000B                  		addi.w	#$B,d1
00016572 7400                       		moveq	#0,d2
00016574 1428 0016                  		move.b	$16(a0),d2
00016578 3602                       		move.w	d2,d3
0001657A 5243                       		addq.w	#1,d3
0001657C 6100 9BB0                  		bsr.w	SolidObject
00016580                            
00016580                            Obj6B_ChkDel:
00016580 3028 0034                  		move.w	$34(a0),d0
00016584 0240 FF80                  		andi.w	#$FF80,d0
00016588 3238 F700                  		move.w	($FFFFF700).w,d1
0001658C 0441 0080                  		subi.w	#$80,d1
00016590 0241 FF80                  		andi.w	#$FF80,d1
00016594 9041                       		sub.w	d1,d0
00016596 0C40 0280                  		cmpi.w	#$280,d0
0001659A 6200                       		bhi.s	loc_15D64
0001659C 4EF9 0000 DD5E             		jmp	DisplaySprite
000165A2                            ; ===========================================================================
000165A2                            
000165A2                            loc_15D64:
000165A2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000165A8 6600                       		bne.s	Obj6B_Delete2
000165AA 4238 F7CB                  		clr.b	($FFFFF7CB).w
000165AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165B2 7000                       		moveq	#0,d0
000165B4 1028 0023                  		move.b	$23(a0),d0
000165B8 6700                       		beq.s	Obj6B_Delete2
000165BA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000165C0                            
000165C0                            Obj6B_Delete2:
000165C0 4EF9 0000 DD9A             		jmp	DeleteObject
000165C6                            ; ===========================================================================
000165C6 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000165CA 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000165CE 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000165D2                            ; ===========================================================================
000165D2                            
000165D2                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000165D2 4E75                       		rts	
000165D4                            ; ===========================================================================
000165D4                            
000165D4                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000165D4 4A28 0038                  		tst.b	$38(a0)
000165D8 6600                       		bne.s	loc_15DB4
000165DA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000165DE 7000                       		moveq	#0,d0
000165E0 1028 003E                  		move.b	$3E(a0),d0
000165E4 0832 0000 0000             		btst	#0,(a2,d0.w)
000165EA 6700                       		beq.s	loc_15DC2
000165EC 117C 0001 0038             		move.b	#1,$38(a0)
000165F2                            
000165F2                            loc_15DB4:
000165F2 3028 003C                  		move.w	$3C(a0),d0
000165F6 B068 003A                  		cmp.w	$3A(a0),d0
000165FA 6700                       		beq.s	loc_15DE0
000165FC 5468 003A                  		addq.w	#2,$3A(a0)
00016600                            
00016600                            loc_15DC2:
00016600 3028 003A                  		move.w	$3A(a0),d0
00016604 0828 0000 0022             		btst	#0,$22(a0)
0001660A 6700                       		beq.s	loc_15DD4
0001660C 4440                       		neg.w	d0
0001660E 0640 0080                  		addi.w	#$80,d0
00016612                            
00016612                            loc_15DD4:
00016612 3228 0034                  		move.w	$34(a0),d1
00016616 9240                       		sub.w	d0,d1
00016618 3141 0008                  		move.w	d1,8(a0)
0001661C 4E75                       		rts	
0001661E                            ; ===========================================================================
0001661E                            
0001661E                            loc_15DE0:
0001661E 5228 0028                  		addq.b	#1,$28(a0)
00016622 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016628 4228 0038                  		clr.b	$38(a0)
0001662C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016630 7000                       		moveq	#0,d0
00016632 1028 0023                  		move.b	$23(a0),d0
00016636 67C8                       		beq.s	loc_15DC2
00016638 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001663E 60C0                       		bra.s	loc_15DC2
00016640                            ; ===========================================================================
00016640                            
00016640                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016640 4A28 0038                  		tst.b	$38(a0)
00016644 6600                       		bne.s	loc_15E14
00016646 5368 0036                  		subq.w	#1,$36(a0)
0001664A 6600                       		bne.s	loc_15E1E
0001664C 117C 0001 0038             		move.b	#1,$38(a0)
00016652                            
00016652                            loc_15E14:
00016652 4A68 003A                  		tst.w	$3A(a0)
00016656 6700                       		beq.s	loc_15E3C
00016658 5568 003A                  		subq.w	#2,$3A(a0)
0001665C                            
0001665C                            loc_15E1E:
0001665C 3028 003A                  		move.w	$3A(a0),d0
00016660 0828 0000 0022             		btst	#0,$22(a0)
00016666 6700                       		beq.s	loc_15E30
00016668 4440                       		neg.w	d0
0001666A 0640 0080                  		addi.w	#$80,d0
0001666E                            
0001666E                            loc_15E30:
0001666E 3228 0034                  		move.w	$34(a0),d1
00016672 9240                       		sub.w	d0,d1
00016674 3141 0008                  		move.w	d1,8(a0)
00016678 4E75                       		rts	
0001667A                            ; ===========================================================================
0001667A                            
0001667A                            loc_15E3C:
0001667A 5328 0028                  		subq.b	#1,$28(a0)
0001667E 4228 0038                  		clr.b	$38(a0)
00016682 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016686 7000                       		moveq	#0,d0
00016688 1028 0023                  		move.b	$23(a0),d0
0001668C 67CE                       		beq.s	loc_15E1E
0001668E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016694 60C6                       		bra.s	loc_15E1E
00016696                            ; ===========================================================================
00016696                            
00016696                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016696 4A28 0038                  		tst.b	$38(a0)
0001669A 6600                       		bne.s	loc_15E7C
0001669C 4A68 003A                  		tst.w	$3A(a0)
000166A0 6700                       		beq.s	loc_15E6A
000166A2 5368 003A                  		subq.w	#1,$3A(a0)
000166A6 6000                       		bra.s	loc_15E8E
000166A8                            ; ===========================================================================
000166A8                            
000166A8                            loc_15E6A:
000166A8 5368 0036                  		subq.w	#1,$36(a0)
000166AC 6A00                       		bpl.s	loc_15E8E
000166AE 317C 003C 0036             		move.w	#$3C,$36(a0)
000166B4 117C 0001 0038             		move.b	#1,$38(a0)
000166BA                            
000166BA                            loc_15E7C:
000166BA 5068 003A                  		addq.w	#8,$3A(a0)
000166BE 3028 003A                  		move.w	$3A(a0),d0
000166C2 B068 003C                  		cmp.w	$3C(a0),d0
000166C6 6600                       		bne.s	loc_15E8E
000166C8 4228 0038                  		clr.b	$38(a0)
000166CC                            
000166CC                            loc_15E8E:
000166CC 3028 003A                  		move.w	$3A(a0),d0
000166D0 0828 0000 0022             		btst	#0,$22(a0)
000166D6 6700                       		beq.s	loc_15EA0
000166D8 4440                       		neg.w	d0
000166DA 0640 0038                  		addi.w	#$38,d0
000166DE                            
000166DE                            loc_15EA0:
000166DE 3228 0030                  		move.w	$30(a0),d1
000166E2 D240                       		add.w	d0,d1
000166E4 3141 000C                  		move.w	d1,$C(a0)
000166E8 4E75                       		rts	
000166EA                            ; ===========================================================================
000166EA                            
000166EA                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000166EA 4A28 0038                  		tst.b	$38(a0)
000166EE 6600                       		bne.s	loc_15ED0
000166F0 4A68 003A                  		tst.w	$3A(a0)
000166F4 6700                       		beq.s	loc_15EBE
000166F6 5168 003A                  		subq.w	#8,$3A(a0)
000166FA 6000                       		bra.s	loc_15EF0
000166FC                            ; ===========================================================================
000166FC                            
000166FC                            loc_15EBE:
000166FC 5368 0036                  		subq.w	#1,$36(a0)
00016700 6A00                       		bpl.s	loc_15EF0
00016702 317C 003C 0036             		move.w	#$3C,$36(a0)
00016708 117C 0001 0038             		move.b	#1,$38(a0)
0001670E                            
0001670E                            loc_15ED0:
0001670E 3028 003A                  		move.w	$3A(a0),d0
00016712 B068 003C                  		cmp.w	$3C(a0),d0
00016716 6700                       		beq.s	loc_15EE0
00016718 5068 003A                  		addq.w	#8,$3A(a0)
0001671C 6000                       		bra.s	loc_15EF0
0001671E                            ; ===========================================================================
0001671E                            
0001671E                            loc_15EE0:
0001671E 5368 0036                  		subq.w	#1,$36(a0)
00016722 6A00                       		bpl.s	loc_15EF0
00016724 317C 003C 0036             		move.w	#$3C,$36(a0)
0001672A 4228 0038                  		clr.b	$38(a0)
0001672E                            
0001672E                            loc_15EF0:
0001672E 3028 003A                  		move.w	$3A(a0),d0
00016732 0828 0000 0022             		btst	#0,$22(a0)
00016738 6700                       		beq.s	loc_15F02
0001673A 4440                       		neg.w	d0
0001673C 0640 0038                  		addi.w	#$38,d0
00016740                            
00016740                            loc_15F02:
00016740 3228 0030                  		move.w	$30(a0),d1
00016744 D240                       		add.w	d0,d1
00016746 3141 000C                  		move.w	d1,$C(a0)
0001674A 4E75                       		rts	
0001674C                            ; ===========================================================================
0001674C                            
0001674C                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
0001674C 4A28 0038                  		tst.b	$38(a0)
00016750 6600                       		bne.s	loc_15F3E
00016752 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016756 7000                       		moveq	#0,d0
00016758 1028 003E                  		move.b	$3E(a0),d0
0001675C 0832 0000 0000             		btst	#0,(a2,d0.w)
00016762 6700                       		beq.s	locret_15F5C
00016764 117C 0001 0038             		move.b	#1,$38(a0)
0001676A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001676E 7000                       		moveq	#0,d0
00016770 1028 0023                  		move.b	$23(a0),d0
00016774 6700                       		beq.s	loc_15F3E
00016776 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001677C                            
0001677C                            loc_15F3E:
0001677C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016784 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001678C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016792 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016798 6700                       		beq.s	loc_15F5E
0001679A                            
0001679A                            locret_15F5C:
0001679A 4E75                       		rts	
0001679C                            ; ===========================================================================
0001679C                            
0001679C                            loc_15F5E:
0001679C 4228 0028                  		clr.b	$28(a0)
000167A0 4228 0038                  		clr.b	$38(a0)
000167A4 4E75                       		rts	
000167A6                            ; ===========================================================================
000167A6                            ; ---------------------------------------------------------------------------
000167A6                            ; Sprite mappings - stomper and	platforms (SBZ)
000167A6                            ; ---------------------------------------------------------------------------
000167A6                            Map_obj6B:
000167A6                            	include "_maps\obj6B.asm"
000167A6                            ; ---------------------------------------------------------------------------
000167A6                            ; Sprite mappings - stomper and	platforms (SBZ)
000167A6                            ; ---------------------------------------------------------------------------
000167A6 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000167AA 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000167AE 0000                       		dc.w byte_15FB0-Map_obj6B
000167B0 04                         byte_15F72:	dc.b 4
000167B1 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000167B6 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000167BB F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000167C0 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000167C5 08                         byte_15F87:	dc.b 8
000167C6 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000167CB E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000167D0 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000167D5 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000167DA 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000167DF 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000167E4 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000167E9 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000167EE 0E                         byte_15FB0:	dc.b $E
000167EF C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000167F4 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000167F9 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000167FE C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016803 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016808 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001680D C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016812 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016817 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
0001681C E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016821 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016826 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
0001682B 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016830 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016836 00                         		even
00016836 00                         		even
00016836                            
00016836                            ; ===========================================================================
00016836                            ; ---------------------------------------------------------------------------
00016836                            ; Object 6C - vanishing	platforms (SBZ)
00016836                            ; ---------------------------------------------------------------------------
00016836                            
00016836                            Obj6C:					; XREF: Obj_Index
00016836 7000                       		moveq	#0,d0
00016838 1028 0024                  		move.b	$24(a0),d0
0001683C 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016840 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016844                            ; ===========================================================================
00016844 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016846 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016848 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001684A 0000                       		dc.w loc_16068-Obj6C_Index
0001684C                            ; ===========================================================================
0001684C                            
0001684C                            Obj6C_Main:				; XREF: Obj6C_Index
0001684C 5C28 0024                  		addq.b	#6,$24(a0)
00016850 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016858 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001685E 0028 0004 0001             		ori.b	#4,1(a0)
00016864 117C 0010 0019             		move.b	#$10,$19(a0)
0001686A 117C 0004 0018             		move.b	#4,$18(a0)
00016870 7000                       		moveq	#0,d0
00016872 1028 0028                  		move.b	$28(a0),d0	; get object type
00016876 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001687A 5240                       		addq.w	#1,d0		; add 1
0001687C EF48                       		lsl.w	#7,d0		; multiply by $80
0001687E 3200                       		move.w	d0,d1
00016880 5340                       		subq.w	#1,d0
00016882 3140 0030                  		move.w	d0,$30(a0)
00016886 3140 0032                  		move.w	d0,$32(a0)
0001688A 7000                       		moveq	#0,d0
0001688C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016890 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016894 0641 0080                  		addi.w	#$80,d1
00016898 C0C1                       		mulu.w	d1,d0
0001689A E088                       		lsr.l	#8,d0
0001689C 3140 0036                  		move.w	d0,$36(a0)
000168A0 5341                       		subq.w	#1,d1
000168A2 3141 0038                  		move.w	d1,$38(a0)
000168A6                            
000168A6                            loc_16068:				; XREF: Obj6C_Index
000168A6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000168AA 9068 0036                  		sub.w	$36(a0),d0
000168AE C068 0038                  		and.w	$38(a0),d0
000168B2 6600                       		bne.s	Obj6C_Animate
000168B4 5928 0024                  		subq.b	#4,$24(a0)
000168B8 6000                       		bra.s	Obj6C_Vanish
000168BA                            ; ===========================================================================
000168BA                            
000168BA                            Obj6C_Animate:
000168BA 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000168C0 4EB9 0000 AE1E             		jsr	AnimateSprite
000168C6 6000 953E                  		bra.w	MarkObjGone
000168CA                            ; ===========================================================================
000168CA                            
000168CA                            Obj6C_Vanish:				; XREF: Obj6C_Index
000168CA 5368 0030                  		subq.w	#1,$30(a0)
000168CE 6A00                       		bpl.s	loc_160AA
000168D0 317C 007F 0030             		move.w	#127,$30(a0)
000168D6 4A28 001C                  		tst.b	$1C(a0)
000168DA 6700                       		beq.s	loc_160A4
000168DC 3168 0032 0030             		move.w	$32(a0),$30(a0)
000168E2                            
000168E2                            loc_160A4:
000168E2 0868 0000 001C             		bchg	#0,$1C(a0)
000168E8                            
000168E8                            loc_160AA:
000168E8 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000168EE 4EB9 0000 AE1E             		jsr	AnimateSprite
000168F4 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000168FA 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000168FC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016902 6600                       		bne.s	loc_160D6
00016904 7200                       		moveq	#0,d1
00016906 1228 0019                  		move.b	$19(a0),d1
0001690A 4EB9 0000 79E8             		jsr	(PlatformObject).l
00016910 6000 94F4                  		bra.w	MarkObjGone
00016914                            ; ===========================================================================
00016914                            
00016914                            loc_160D6:
00016914 7200                       		moveq	#0,d1
00016916 1228 0019                  		move.b	$19(a0),d1
0001691A 4EB9 0000 7B5C             		jsr	(ExitPlatform).l
00016920 3428 0008                  		move.w	8(a0),d2
00016924 4EB9 0000 80C6             		jsr	(MvSonicOnPtfm2).l
0001692A 6000 94DA                  		bra.w	MarkObjGone
0001692E                            ; ===========================================================================
0001692E                            
0001692E                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
0001692E 0828 0003 0022             		btst	#3,$22(a0)
00016934 6700                       		beq.s	Obj6C_Display
00016936 43F8 D000                  		lea	($FFFFD000).w,a1
0001693A 08A9 0003 0022             		bclr	#3,$22(a1)
00016940 08A8 0003 0022             		bclr	#3,$22(a0)
00016946 117C 0002 0024             		move.b	#2,$24(a0)
0001694C 4228 0025                  		clr.b	$25(a0)
00016950                            
00016950                            Obj6C_Display:
00016950 6000 94B4                  		bra.w	MarkObjGone
00016954                            ; ===========================================================================
00016954                            Ani_obj6C:
00016954                            	include "_anim\obj6C.asm"
00016954                            ; ---------------------------------------------------------------------------
00016954                            ; Animation script - vanishing platforms (SBZ)
00016954                            ; ---------------------------------------------------------------------------
00016954 0000                       		dc.w byte_1611A-Ani_obj6C
00016956 0000                       		dc.w byte_16122-Ani_obj6C
00016958 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016960 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016968                            		even
00016968                            		even
00016968                            
00016968                            ; ---------------------------------------------------------------------------
00016968                            ; Sprite mappings - vanishing platforms	(SBZ)
00016968                            ; ---------------------------------------------------------------------------
00016968                            Map_obj6C:
00016968                            	include "_maps\obj6C.asm"
00016968                            ; ---------------------------------------------------------------------------
00016968                            ; Sprite mappings - vanishing platforms	(SBZ)
00016968                            ; ---------------------------------------------------------------------------
00016968 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
0001696C 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016970 01                         byte_16132:	dc.b 1
00016971 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016976 01                         byte_16138:	dc.b 1
00016977 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001697C 01                         byte_1613E:	dc.b 1
0001697D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016982 00                         byte_16144:	dc.b 0
00016984 00                         		even
00016984 00                         		even
00016984                            
00016984                            ; ===========================================================================
00016984                            ; ---------------------------------------------------------------------------
00016984                            ; Object 6E - electrocution orbs (SBZ)
00016984                            ; ---------------------------------------------------------------------------
00016984                            
00016984                            Obj6E:					; XREF: Obj_Index
00016984 7000                       		moveq	#0,d0
00016986 1028 0024                  		move.b	$24(a0),d0
0001698A 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001698E 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016992                            ; ===========================================================================
00016992 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016994 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016996                            ; ===========================================================================
00016996                            
00016996                            Obj6E_Main:				; XREF: Obj6E_Index
00016996 5428 0024                  		addq.b	#2,$24(a0)
0001699A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000169A2 317C 047E 0002             		move.w	#$47E,2(a0)
000169A8 0028 0004 0001             		ori.b	#4,1(a0)
000169AE 117C 0028 0019             		move.b	#$28,$19(a0)
000169B4 7000                       		moveq	#0,d0
000169B6 1028 0028                  		move.b	$28(a0),d0	; read object type
000169BA E948                       		lsl.w	#4,d0		; multiply by $10
000169BC 5340                       		subq.w	#1,d0
000169BE 3140 0034                  		move.w	d0,$34(a0)
000169C2                            
000169C2                            Obj6E_Shock:				; XREF: Obj6E_Index
000169C2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000169C6 C068 0034                  		and.w	$34(a0),d0
000169CA 6600                       		bne.s	Obj6E_Animate
000169CC 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000169D2 4A28 0001                  		tst.b	1(a0)
000169D6 6A00                       		bpl.s	Obj6E_Animate
000169D8 303C 00B1                  		move.w	#$B1,d0
000169DC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play electricity sound
000169E2                            
000169E2                            Obj6E_Animate:
000169E2 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000169E8 4EB9 0000 AE1E             		jsr	AnimateSprite
000169EE 117C 0000 0020             		move.b	#0,$20(a0)
000169F4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000169FA 6600                       		bne.s	Obj6E_Display	; if not, branch
000169FC 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016A02                            
00016A02                            Obj6E_Display:
00016A02 6000 9402                  		bra.w	MarkObjGone
00016A06                            ; ===========================================================================
00016A06                            Ani_obj6E:
00016A06                            	include "_anim\obj6E.asm"
00016A06                            ; ---------------------------------------------------------------------------
00016A06                            ; Animation script - electrocution orbs (SBZ)
00016A06                            ; ---------------------------------------------------------------------------
00016A06 0000                       		dc.w byte_161CC-Ani_obj6E
00016A08 0000                       		dc.w byte_161D0-Ani_obj6E
00016A0A 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016A0E 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016A1E                            		even
00016A1E                            		even
00016A1E                            
00016A1E                            ; ---------------------------------------------------------------------------
00016A1E                            ; Sprite mappings - electrocution orbs (SBZ)
00016A1E                            ; ---------------------------------------------------------------------------
00016A1E                            Map_obj6E:
00016A1E                            	include "_maps\obj6E.asm"
00016A1E                            Map_26ed:
00016A1E 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016A20 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016A22 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016A24 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016A26 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016A28 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016A2A 01                         Map_26ed_C: 	dc.b $1
00016A2B 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016A30 02                         Map_26ed_12: 	dc.b $2
00016A31 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A36 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A3B 06                         Map_26ed_1D: 	dc.b $6
00016A3C F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A41 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A46 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016A4B F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016A50 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016A55 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016A5A 08                         Map_26ed_3C: 	dc.b $8
00016A5B F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A60 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A65 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016A6A F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016A6F F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016A74 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016A79 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016A7E F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016A83 06                         Map_26ed_65: 	dc.b $6
00016A84 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A89 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A8E F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016A93 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016A98 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016A9D F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016AA2 04                         Map_26ed_84: 	dc.b $4
00016AA3 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016AA8 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AAD F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016AB2 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016AB8 00                         	even
00016AB8 00                         	even
00016AB8                            
00016AB8                            ; ===========================================================================
00016AB8                            ; ---------------------------------------------------------------------------
00016AB8                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016AB8                            ; ---------------------------------------------------------------------------
00016AB8                            
00016AB8                            Obj6F:					; XREF: Obj_Index
00016AB8 7000                       		moveq	#0,d0
00016ABA 1028 0024                  		move.b	$24(a0),d0
00016ABE 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016AC2 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016AC6 3028 0030                  		move.w	$30(a0),d0
00016ACA 0240 FF80                  		andi.w	#$FF80,d0
00016ACE 3238 F700                  		move.w	($FFFFF700).w,d1
00016AD2 0441 0080                  		subi.w	#$80,d1
00016AD6 0241 FF80                  		andi.w	#$FF80,d1
00016ADA 9041                       		sub.w	d1,d0
00016ADC 0C40 0280                  		cmpi.w	#$280,d0
00016AE0 6200                       		bhi.s	loc_1629A
00016AE2                            
00016AE2                            Obj6F_Display:
00016AE2 4EF9 0000 DD5E             		jmp	DisplaySprite
00016AE8                            ; ===========================================================================
00016AE8                            
00016AE8                            loc_1629A:
00016AE8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016AEE 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016AF0 0C40 FF80                  		cmpi.w	#-$80,d0
00016AF4 64EC                       		bcc.s	Obj6F_Display
00016AF6                            
00016AF6                            Obj6F_Act1or2:
00016AF6 1028 002F                  		move.b	$2F(a0),d0
00016AFA 6A00                       		bpl.s	Obj6F_Delete
00016AFC 0240 007F                  		andi.w	#$7F,d0
00016B00 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016B04 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016B0A                            
00016B0A                            Obj6F_Delete:
00016B0A 4EF9 0000 DD9A             		jmp	DeleteObject
00016B10                            ; ===========================================================================
00016B10 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016B12 0000                       		dc.w loc_163D8-Obj6F_Index
00016B14                            ; ===========================================================================
00016B14                            
00016B14                            Obj6F_Main:				; XREF: Obj6F_Index
00016B14 1028 0028                  		move.b	$28(a0),d0
00016B18 6B00 0000                  		bmi.w	loc_16380
00016B1C 5428 0024                  		addq.b	#2,$24(a0)
00016B20 217C 0001 6178 0004        		move.l	#Map_obj69a,4(a0)
00016B28 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016B2E 117C 0010 0019             		move.b	#$10,$19(a0)
00016B34 0028 0004 0001             		ori.b	#4,1(a0)
00016B3A 117C 0004 0018             		move.b	#4,$18(a0)
00016B40 7000                       		moveq	#0,d0
00016B42 1028 0028                  		move.b	$28(a0),d0
00016B46 3200                       		move.w	d0,d1
00016B48 E648                       		lsr.w	#3,d0
00016B4A 0240 001E                  		andi.w	#$1E,d0
00016B4E 45FA 0000                  		lea	off_164A6(pc),a2
00016B52 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016B56 315A 0038                  		move.w	(a2)+,$38(a0)
00016B5A 315A 0030                  		move.w	(a2)+,$30(a0)
00016B5E 214A 003C                  		move.l	a2,$3C(a0)
00016B62 0241 000F                  		andi.w	#$F,d1
00016B66 E549                       		lsl.w	#2,d1
00016B68 1141 0038                  		move.b	d1,$38(a0)
00016B6C 117C 0004 003A             		move.b	#4,$3A(a0)
00016B72 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016B76 6700                       		beq.s	loc_16356
00016B78 117C 0001 003B             		move.b	#1,$3B(a0)
00016B7E 4428 003A                  		neg.b	$3A(a0)
00016B82 7200                       		moveq	#0,d1
00016B84 1228 0038                  		move.b	$38(a0),d1
00016B88 D228 003A                  		add.b	$3A(a0),d1
00016B8C B228 0039                  		cmp.b	$39(a0),d1
00016B90 6500                       		bcs.s	loc_16352
00016B92 1001                       		move.b	d1,d0
00016B94 7200                       		moveq	#0,d1
00016B96 4A00                       		tst.b	d0
00016B98 6A00                       		bpl.s	loc_16352
00016B9A 1228 0039                  		move.b	$39(a0),d1
00016B9E 5901                       		subq.b	#4,d1
00016BA0                            
00016BA0                            loc_16352:
00016BA0 1141 0038                  		move.b	d1,$38(a0)
00016BA4                            
00016BA4                            loc_16356:
00016BA4 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016BAA 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016BB0 4A41                       		tst.w	d1
00016BB2 6600                       		bne.s	loc_1636C
00016BB4 117C 0001 001C             		move.b	#1,$1C(a0)
00016BBA                            
00016BBA                            loc_1636C:
00016BBA 0C41 0008                  		cmpi.w	#8,d1
00016BBE 6600                       		bne.s	loc_16378
00016BC0 117C 0000 001C             		move.b	#0,$1C(a0)
00016BC6                            
00016BC6                            loc_16378:
00016BC6 6100 C0D6                  		bsr.w	Obj63_ChangeDir
00016BCA 6000 0000                  		bra.w	loc_163D8
00016BCE                            ; ===========================================================================
00016BCE                            
00016BCE                            loc_16380:				; XREF: Obj6F_Main
00016BCE 1140 002F                  		move.b	d0,$2F(a0)
00016BD2 0240 007F                  		andi.w	#$7F,d0
00016BD6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016BDA 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016BE0 6700                       		beq.s	loc_1639A
00016BE2 4EF9 0000 DD9A             		jmp	DeleteObject
00016BE8                            ; ===========================================================================
00016BE8                            
00016BE8                            loc_1639A:
00016BE8 D040                       		add.w	d0,d0
00016BEA 0240 001E                  		andi.w	#$1E,d0
00016BEE 0640 0080                  		addi.w	#$80,d0
00016BF2 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016BF8 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016BFC 321A                       		move.w	(a2)+,d1
00016BFE 2248                       		movea.l	a0,a1
00016C00 6000                       		bra.s	Obj6F_LoadPform
00016C02                            ; ===========================================================================
00016C02                            
00016C02                            Obj6F_Loop:
00016C02 4EB9 0000 E1E4             		jsr	SingleObjLoad
00016C08 6600                       		bne.s	loc_163D0
00016C0A                            
00016C0A                            Obj6F_LoadPform:			; XREF: loc_1639A
00016C0A 12BC 006F                  		move.b	#$6F,0(a1)
00016C0E 335A 0008                  		move.w	(a2)+,8(a1)
00016C12 335A 000C                  		move.w	(a2)+,$C(a1)
00016C16 301A                       		move.w	(a2)+,d0
00016C18 1340 0028                  		move.b	d0,$28(a1)
00016C1C                            
00016C1C                            loc_163D0:
00016C1C 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016C20                            
00016C20 588F                       		addq.l	#4,sp
00016C22 4E75                       		rts	
00016C24                            ; ===========================================================================
00016C24                            
00016C24                            loc_163D8:				; XREF: Obj6F_Index
00016C24 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016C2A 4EB9 0000 AE1E             		jsr	AnimateSprite
00016C30 4A28 001A                  		tst.b	$1A(a0)
00016C34 6600                       		bne.s	loc_16404
00016C36 3F28 0008                  		move.w	8(a0),-(sp)
00016C3A 6100 0000                  		bsr.w	loc_16424
00016C3E 323C 001B                  		move.w	#$1B,d1
00016C42 343C 0007                  		move.w	#7,d2
00016C46 3602                       		move.w	d2,d3
00016C48 5243                       		addq.w	#1,d3
00016C4A 381F                       		move.w	(sp)+,d4
00016C4C 6000 94E0                  		bra.w	SolidObject
00016C50                            ; ===========================================================================
00016C50                            
00016C50                            loc_16404:
00016C50 0828 0003 0022             		btst	#3,$22(a0)
00016C56 6700                       		beq.s	loc_16420
00016C58 43F8 D000                  		lea	($FFFFD000).w,a1
00016C5C 08A9 0003 0022             		bclr	#3,$22(a1)
00016C62 08A8 0003 0022             		bclr	#3,$22(a0)
00016C68 4228 0025                  		clr.b	$25(a0)
00016C6C                            
00016C6C                            loc_16420:
00016C6C 6000 0002                  		bra.w	*+4
00016C70                            
00016C70                            loc_16424:
00016C70 3028 0008                  		move.w	8(a0),d0
00016C74 B068 0034                  		cmp.w	$34(a0),d0
00016C78 6600                       		bne.s	loc_16484
00016C7A 3028 000C                  		move.w	$C(a0),d0
00016C7E B068 0036                  		cmp.w	$36(a0),d0
00016C82 6600                       		bne.s	loc_16484
00016C84 7200                       		moveq	#0,d1
00016C86 1228 0038                  		move.b	$38(a0),d1
00016C8A D228 003A                  		add.b	$3A(a0),d1
00016C8E B228 0039                  		cmp.b	$39(a0),d1
00016C92 6500                       		bcs.s	loc_16456
00016C94 1001                       		move.b	d1,d0
00016C96 7200                       		moveq	#0,d1
00016C98 4A00                       		tst.b	d0
00016C9A 6A00                       		bpl.s	loc_16456
00016C9C 1228 0039                  		move.b	$39(a0),d1
00016CA0 5901                       		subq.b	#4,d1
00016CA2                            
00016CA2                            loc_16456:
00016CA2 1141 0038                  		move.b	d1,$38(a0)
00016CA6 2268 003C                  		movea.l	$3C(a0),a1
00016CAA 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016CB0 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016CB6 4A41                       		tst.w	d1
00016CB8 6600                       		bne.s	loc_16474
00016CBA 117C 0001 001C             		move.b	#1,$1C(a0)
00016CC0                            
00016CC0                            loc_16474:
00016CC0 0C41 0008                  		cmpi.w	#8,d1
00016CC4 6600                       		bne.s	loc_16480
00016CC6 117C 0000 001C             		move.b	#0,$1C(a0)
00016CCC                            
00016CCC                            loc_16480:
00016CCC 6100 BFD0                  		bsr.w	Obj63_ChangeDir
00016CD0                            
00016CD0                            loc_16484:
00016CD0 4EF9 0000 DD38             		jmp	SpeedToPos
00016CD6                            ; ===========================================================================
00016CD6                            Ani_obj6F:
00016CD6                            	include "_anim\obj6F.asm"
00016CD6                            ; ---------------------------------------------------------------------------
00016CD6                            ; Animation script - platform on conveyor belt (SBZ)
00016CD6                            ; ---------------------------------------------------------------------------
00016CD6 0000                       		dc.w byte_1648E-Ani_obj6F
00016CD8 0000                       		dc.w byte_164A2-Ani_obj6F
00016CDA 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016CE7 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016CEE 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016CF2 00                         		even
00016CF2 00                         		even
00016CF2                            
00016CF2 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016CF8 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016CFE 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016D12 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016D26 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016D3A 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016D4E 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016D62 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016D76                            ; ===========================================================================
00016D76                            ; ---------------------------------------------------------------------------
00016D76                            ; Object 70 - large girder block (SBZ)
00016D76                            ; ---------------------------------------------------------------------------
00016D76                            
00016D76                            Obj70:					; XREF: Obj_Index
00016D76 7000                       		moveq	#0,d0
00016D78 1028 0024                  		move.b	$24(a0),d0
00016D7C 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016D80 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016D84                            ; ===========================================================================
00016D84 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016D86 0000                       		dc.w Obj70_Action-Obj70_Index
00016D88                            ; ===========================================================================
00016D88                            
00016D88                            Obj70_Main:				; XREF: Obj70_Index
00016D88 5428 0024                  		addq.b	#2,$24(a0)
00016D8C 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016D94 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016D9A 0028 0004 0001             		ori.b	#4,1(a0)
00016DA0 117C 0004 0018             		move.b	#4,$18(a0)
00016DA6 117C 0060 0019             		move.b	#$60,$19(a0)
00016DAC 117C 0018 0016             		move.b	#$18,$16(a0)
00016DB2 3168 0008 0032             		move.w	8(a0),$32(a0)
00016DB8 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016DBE 6100 0000                  		bsr.w	Obj70_Move2
00016DC2                            
00016DC2                            Obj70_Action:				; XREF: Obj70_Index
00016DC2 3F28 0008                  		move.w	8(a0),-(sp)
00016DC6 4A68 003A                  		tst.w	$3A(a0)
00016DCA 6700                       		beq.s	Obj70_Move
00016DCC 5368 003A                  		subq.w	#1,$3A(a0)
00016DD0 6600                       		bne.s	Obj70_Solid
00016DD2                            
00016DD2                            Obj70_Move:
00016DD2 4EB9 0000 DD38             		jsr	SpeedToPos
00016DD8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016DDC 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016DDE 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016DE2                            
00016DE2                            Obj70_Solid:
00016DE2 381F                       		move.w	(sp)+,d4
00016DE4 4A28 0001                  		tst.b	1(a0)
00016DE8 6A00                       		bpl.s	Obj70_ChkDel
00016DEA 7200                       		moveq	#0,d1
00016DEC 1228 0019                  		move.b	$19(a0),d1
00016DF0 0641 000B                  		addi.w	#$B,d1
00016DF4 7400                       		moveq	#0,d2
00016DF6 1428 0016                  		move.b	$16(a0),d2
00016DFA 3602                       		move.w	d2,d3
00016DFC 5243                       		addq.w	#1,d3
00016DFE 6100 932E                  		bsr.w	SolidObject
00016E02                            
00016E02                            Obj70_ChkDel:
00016E02 3028 0032                  		move.w	$32(a0),d0
00016E06 0240 FF80                  		andi.w	#$FF80,d0
00016E0A 3238 F700                  		move.w	($FFFFF700).w,d1
00016E0E 0441 0080                  		subi.w	#$80,d1
00016E12 0241 FF80                  		andi.w	#$FF80,d1
00016E16 9041                       		sub.w	d1,d0
00016E18 0C40 0280                  		cmpi.w	#$280,d0
00016E1C 6200                       		bhi.s	Obj70_Delete
00016E1E 4EF9 0000 DD5E             		jmp	DisplaySprite
00016E24                            ; ===========================================================================
00016E24                            
00016E24                            Obj70_Delete:
00016E24 4EF9 0000 DD9A             		jmp	DeleteObject
00016E2A                            ; ===========================================================================
00016E2A                            
00016E2A                            Obj70_Move2:				; XREF: Obj70_Main
00016E2A 1028 0038                  		move.b	$38(a0),d0
00016E2E 0240 0018                  		andi.w	#$18,d0
00016E32 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016E38 43F1 0000                  		lea	(a1,d0.w),a1
00016E3C 3159 0010                  		move.w	(a1)+,$10(a0)
00016E40 3159 0012                  		move.w	(a1)+,$12(a0)
00016E44 3159 0034                  		move.w	(a1)+,$34(a0)
00016E48 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016E4C 317C 0007 003A             		move.w	#7,$3A(a0)
00016E52 4E75                       		rts	
00016E54                            ; ===========================================================================
00016E54 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016E5C 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016E64 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016E6C 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016E74                            ; ---------------------------------------------------------------------------
00016E74                            ; Sprite mappings - large girder block (SBZ)
00016E74                            ; ---------------------------------------------------------------------------
00016E74                            Map_obj70:
00016E74                            	include "_maps\obj70.asm"
00016E74                            ; ---------------------------------------------------------------------------
00016E74                            ; Sprite mappings - large girder block (SBZ)
00016E74                            ; ---------------------------------------------------------------------------
00016E74 0000                       		dc.w byte_1662A-Map_obj70
00016E76 0C                         byte_1662A:	dc.b $C
00016E77 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016E7C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016E81 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016E86 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016E8B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016E90 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016E95 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016E9A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016E9F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016EA4 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016EA9 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016EAE 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016EB4 00                         		even
00016EB4 00                         		even
00016EB4                            
00016EB4                            ; ===========================================================================
00016EB4                            ; ---------------------------------------------------------------------------
00016EB4                            ; Object 72 - teleporter (SBZ)
00016EB4                            ; ---------------------------------------------------------------------------
00016EB4                            
00016EB4                            Obj72:					; XREF: Obj_Index
00016EB4 7000                       		moveq	#0,d0
00016EB6 1028 0024                  		move.b	$24(a0),d0
00016EBA 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016EBE 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016EC2 3028 0008                  		move.w	8(a0),d0
00016EC6 0240 FF80                  		andi.w	#$FF80,d0
00016ECA 3238 F700                  		move.w	($FFFFF700).w,d1
00016ECE 0441 0080                  		subi.w	#$80,d1
00016ED2 0241 FF80                  		andi.w	#$FF80,d1
00016ED6 9041                       		sub.w	d1,d0
00016ED8 0C40 0280                  		cmpi.w	#$280,d0
00016EDC 6200                       		bhi.s	Obj72_Delete
00016EDE 4E75                       		rts	
00016EE0                            ; ===========================================================================
00016EE0                            
00016EE0                            Obj72_Delete:
00016EE0 4EF9 0000 DD9A             		jmp	DeleteObject
00016EE6                            ; ===========================================================================
00016EE6 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016EE8 0000                       		dc.w loc_166C8-Obj72_Index
00016EEA 0000                       		dc.w loc_1675E-Obj72_Index
00016EEC 0000                       		dc.w loc_16798-Obj72_Index
00016EEE                            ; ===========================================================================
00016EEE                            
00016EEE                            Obj72_Main:				; XREF: Obj72_Index
00016EEE 5428 0024                  		addq.b	#2,$24(a0)
00016EF2 1028 0028                  		move.b	$28(a0),d0
00016EF6 D040                       		add.w	d0,d0
00016EF8 0240 001E                  		andi.w	#$1E,d0
00016EFC 45FA 0000                  		lea	Obj72_Data(pc),a2
00016F00 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016F04 315A 003A                  		move.w	(a2)+,$3A(a0)
00016F08 214A 003C                  		move.l	a2,$3C(a0)
00016F0C 315A 0036                  		move.w	(a2)+,$36(a0)
00016F10 315A 0038                  		move.w	(a2)+,$38(a0)
00016F14                            
00016F14                            loc_166C8:				; XREF: Obj72_Index
00016F14 43F8 D000                  		lea	($FFFFD000).w,a1
00016F18 3029 0008                  		move.w	8(a1),d0
00016F1C 9068 0008                  		sub.w	8(a0),d0
00016F20 0828 0000 0022             		btst	#0,$22(a0)
00016F26 6700                       		beq.s	loc_166E0
00016F28 0640 000F                  		addi.w	#$F,d0
00016F2C                            
00016F2C                            loc_166E0:
00016F2C 0C40 0010                  		cmpi.w	#$10,d0
00016F30 6400                       		bcc.s	locret_1675C
00016F32 3229 000C                  		move.w	$C(a1),d1
00016F36 9268 000C                  		sub.w	$C(a0),d1
00016F3A 0641 0020                  		addi.w	#$20,d1
00016F3E 0C41 0040                  		cmpi.w	#$40,d1
00016F42 6400                       		bcc.s	locret_1675C
00016F44 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016F48 6600                       		bne.s	locret_1675C
00016F4A 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016F50 6600                       		bne.s	loc_1670E
00016F52 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016F58 6500                       		bcs.s	locret_1675C
00016F5A                            
00016F5A                            loc_1670E:
00016F5A 5428 0024                  		addq.b	#2,$24(a0)
00016F5E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016F64 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016F6A 337C 0800 0014             		move.w	#$800,$14(a1)
00016F70 337C 0000 0010             		move.w	#0,$10(a1)
00016F76 337C 0000 0012             		move.w	#0,$12(a1)
00016F7C 08A8 0005 0022             		bclr	#5,$22(a0)
00016F82 08A9 0005 0022             		bclr	#5,$22(a1)
00016F88 08E9 0001 0022             		bset	#1,$22(a1)
00016F8E 3368 0008 0008             		move.w	8(a0),8(a1)
00016F94 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016F9A 4228 0032                  		clr.b	$32(a0)
00016F9E 303C 00BE                  		move.w	#$BE,d0
00016FA2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016FA8                            
00016FA8                            locret_1675C:
00016FA8 4E75                       		rts	
00016FAA                            ; ===========================================================================
00016FAA                            
00016FAA                            loc_1675E:				; XREF: Obj72_Index
00016FAA 43F8 D000                  		lea	($FFFFD000).w,a1
00016FAE 1028 0032                  		move.b	$32(a0),d0
00016FB2 5428 0032                  		addq.b	#2,$32(a0)
00016FB6 4EB9 0000 2C64             		jsr	(CalcSine).l
00016FBC EA40                       		asr.w	#5,d0
00016FBE 3428 000C                  		move.w	$C(a0),d2
00016FC2 9440                       		sub.w	d0,d2
00016FC4 3342 000C                  		move.w	d2,$C(a1)
00016FC8 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016FCE 6600                       		bne.s	locret_16796
00016FD0 6100 0000                  		bsr.w	sub_1681C
00016FD4 5428 0024                  		addq.b	#2,$24(a0)
00016FD8 303C 00BC                  		move.w	#$BC,d0
00016FDC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play teleport sound
00016FE2                            
00016FE2                            locret_16796:
00016FE2 4E75                       		rts	
00016FE4                            ; ===========================================================================
00016FE4                            
00016FE4                            loc_16798:				; XREF: Obj72_Index
00016FE4 588F                       		addq.l	#4,sp
00016FE6 43F8 D000                  		lea	($FFFFD000).w,a1
00016FEA 5328 002E                  		subq.b	#1,$2E(a0)
00016FEE 6A00                       		bpl.s	loc_167DA
00016FF0 3368 0036 0008             		move.w	$36(a0),8(a1)
00016FF6 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016FFC 7200                       		moveq	#0,d1
00016FFE 1228 003A                  		move.b	$3A(a0),d1
00017002 5801                       		addq.b	#4,d1
00017004 B228 003B                  		cmp.b	$3B(a0),d1
00017008 6500                       		bcs.s	loc_167C2
0001700A 7200                       		moveq	#0,d1
0001700C 6000                       		bra.s	loc_16800
0001700E                            ; ===========================================================================
0001700E                            
0001700E                            loc_167C2:
0001700E 1141 003A                  		move.b	d1,$3A(a0)
00017012 2468 003C                  		movea.l	$3C(a0),a2
00017016 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001701C 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017022 6000 0000                  		bra.w	sub_1681C
00017026                            ; ===========================================================================
00017026                            
00017026                            loc_167DA:
00017026 2429 0008                  		move.l	8(a1),d2
0001702A 2629 000C                  		move.l	$C(a1),d3
0001702E 3029 0010                  		move.w	$10(a1),d0
00017032 48C0                       		ext.l	d0
00017034 E180                       		asl.l	#8,d0
00017036 D480                       		add.l	d0,d2
00017038 3029 0012                  		move.w	$12(a1),d0
0001703C 48C0                       		ext.l	d0
0001703E E180                       		asl.l	#8,d0
00017040 D680                       		add.l	d0,d3
00017042 2342 0008                  		move.l	d2,8(a1)
00017046 2343 000C                  		move.l	d3,$C(a1)
0001704A 4E75                       		rts	
0001704C                            ; ===========================================================================
0001704C                            
0001704C                            loc_16800:
0001704C 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017052 4228 0024                  		clr.b	$24(a0)
00017056 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001705A 337C 0000 0010             		move.w	#0,$10(a1)
00017060 337C 0200 0012             		move.w	#$200,$12(a1)
00017066 4E75                       		rts	
00017068                            
00017068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017068                            
00017068                            
00017068                            sub_1681C:
00017068 7000                       		moveq	#0,d0
0001706A 343C 1000                  		move.w	#$1000,d2
0001706E 3028 0036                  		move.w	$36(a0),d0
00017072 9069 0008                  		sub.w	8(a1),d0
00017076 6C00                       		bge.s	loc_16830
00017078 4440                       		neg.w	d0
0001707A 4442                       		neg.w	d2
0001707C                            
0001707C                            loc_16830:
0001707C 7200                       		moveq	#0,d1
0001707E 363C 1000                  		move.w	#$1000,d3
00017082 3228 0038                  		move.w	$38(a0),d1
00017086 9269 000C                  		sub.w	$C(a1),d1
0001708A 6C00                       		bge.s	loc_16844
0001708C 4441                       		neg.w	d1
0001708E 4443                       		neg.w	d3
00017090                            
00017090                            loc_16844:
00017090 B240                       		cmp.w	d0,d1
00017092 6500                       		bcs.s	loc_1687A
00017094 7200                       		moveq	#0,d1
00017096 3228 0038                  		move.w	$38(a0),d1
0001709A 9269 000C                  		sub.w	$C(a1),d1
0001709E 4841                       		swap	d1
000170A0 83C3                       		divs.w	d3,d1
000170A2 7000                       		moveq	#0,d0
000170A4 3028 0036                  		move.w	$36(a0),d0
000170A8 9069 0008                  		sub.w	8(a1),d0
000170AC 6700                       		beq.s	loc_16866
000170AE 4840                       		swap	d0
000170B0 81C1                       		divs.w	d1,d0
000170B2                            
000170B2                            loc_16866:
000170B2 3340 0010                  		move.w	d0,$10(a1)
000170B6 3343 0012                  		move.w	d3,$12(a1)
000170BA 4A41                       		tst.w	d1
000170BC 6A00                       		bpl.s	loc_16874
000170BE 4441                       		neg.w	d1
000170C0                            
000170C0                            loc_16874:
000170C0 3141 002E                  		move.w	d1,$2E(a0)
000170C4 4E75                       		rts	
000170C6                            ; ===========================================================================
000170C6                            
000170C6                            loc_1687A:
000170C6 7000                       		moveq	#0,d0
000170C8 3028 0036                  		move.w	$36(a0),d0
000170CC 9069 0008                  		sub.w	8(a1),d0
000170D0 4840                       		swap	d0
000170D2 81C2                       		divs.w	d2,d0
000170D4 7200                       		moveq	#0,d1
000170D6 3228 0038                  		move.w	$38(a0),d1
000170DA 9269 000C                  		sub.w	$C(a1),d1
000170DE 6700                       		beq.s	loc_16898
000170E0 4841                       		swap	d1
000170E2 83C0                       		divs.w	d0,d1
000170E4                            
000170E4                            loc_16898:
000170E4 3341 0012                  		move.w	d1,$12(a1)
000170E8 3342 0010                  		move.w	d2,$10(a1)
000170EC 4A40                       		tst.w	d0
000170EE 6A00                       		bpl.s	loc_168A6
000170F0 4440                       		neg.w	d0
000170F2                            
000170F2                            loc_168A6:
000170F2 3140 002E                  		move.w	d0,$2E(a0)
000170F6 4E75                       		rts	
000170F8                            ; End of function sub_1681C
000170F8                            
000170F8                            ; ===========================================================================
000170F8 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000170FE 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017104 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017108 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
0001710E 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017114 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001711A 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017120 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017126 0884 0298 0894             		dc.w $884, $298, $894
0001712C 0270 0894 0190             		dc.w $270, $894, $190
00017132 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00017138 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
0001713E 1184 0498 1158             		dc.w $1184, $498, $1158
00017144 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001714A 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017150 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017156 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001715C 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017162 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017168 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001716E 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017174 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001717A 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017180                            ; ===========================================================================
00017180                            ; ---------------------------------------------------------------------------
00017180                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017180                            ; ---------------------------------------------------------------------------
00017180                            
00017180                            Obj78:					; XREF: Obj_Index
00017180 7000                       		moveq	#0,d0
00017182 1028 0024                  		move.b	$24(a0),d0
00017186 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001718A 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001718E                            ; ===========================================================================
0001718E 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017190 0000                       		dc.w Obj78_Action-Obj78_Index
00017192 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017194 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017196 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017198 0000                       		dc.w Obj78_Delete-Obj78_Index
0001719A 0000                       		dc.w loc_16CC0-Obj78_Index
0001719C                            ; ===========================================================================
0001719C                            
0001719C                            locret_16950:
0001719C 4E75                       		rts	
0001719E                            ; ===========================================================================
0001719E                            
0001719E                            Obj78_Main:				; XREF: Obj78_Index
0001719E 117C 0007 0016             		move.b	#7,$16(a0)
000171A4 117C 0008 0017             		move.b	#8,$17(a0)
000171AA 4EB9 0000 DD0C             		jsr	ObjectFall
000171B0 4EBA E4A6                  		jsr	ObjHitFloor
000171B4 4A41                       		tst.w	d1
000171B6 6AE4                       		bpl.s	locret_16950
000171B8 D368 000C                  		add.w	d1,$C(a0)
000171BC 4268 0012                  		clr.w	$12(a0)
000171C0 5428 0024                  		addq.b	#2,$24(a0)
000171C4 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000171CC 317C 22B0 0002             		move.w	#$22B0,2(a0)
000171D2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000171D8 6700                       		beq.s	loc_16996
000171DA 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000171E0                            
000171E0                            loc_16996:
000171E0 0228 0003 0001             		andi.b	#3,1(a0)
000171E6 0028 0004 0001             		ori.b	#4,1(a0)
000171EC 1168 0001 0022             		move.b	1(a0),$22(a0)
000171F2 117C 0004 0018             		move.b	#4,$18(a0)
000171F8 117C 0008 0019             		move.b	#8,$19(a0)
000171FE 117C 000B 0020             		move.b	#$B,$20(a0)
00017204 3428 0008                  		move.w	8(a0),d2
00017208 7A0C                       		moveq	#$C,d5
0001720A 0828 0000 0022             		btst	#0,$22(a0)
00017210 6700                       		beq.s	loc_169CA
00017212 4445                       		neg.w	d5
00017214                            
00017214                            loc_169CA:
00017214 1C3C 0004                  		move.b	#4,d6
00017218 7600                       		moveq	#0,d3
0001721A 7804                       		moveq	#4,d4
0001721C 2448                       		movea.l	a0,a2
0001721E 7202                       		moveq	#2,d1
00017220                            
00017220                            Obj78_LoadBody:
00017220 4EB9 0000 E1FA             		jsr	SingleObjLoad2
00017226 6600                       		bne.s	Obj78_QuitLoad
00017228 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
0001722C 1346 0024                  		move.b	d6,$24(a1)
00017230 5406                       		addq.b	#2,d6
00017232 2368 0004 0004             		move.l	4(a0),4(a1)
00017238 3368 0002 0002             		move.w	2(a0),2(a1)
0001723E 137C 0005 0018             		move.b	#5,$18(a1)
00017244 137C 0008 0019             		move.b	#8,$19(a1)
0001724A 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017250 D445                       		add.w	d5,d2
00017252 3342 0008                  		move.w	d2,8(a1)
00017256 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001725C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017262 1368 0022 0001             		move.b	$22(a0),1(a1)
00017268 137C 0008 001A             		move.b	#8,$1A(a1)
0001726E 234A 003C                  		move.l	a2,$3C(a1)
00017272 1344 003C                  		move.b	d4,$3C(a1)
00017276 5804                       		addq.b	#4,d4
00017278 2449                       		movea.l	a1,a2
0001727A                            
0001727A                            Obj78_QuitLoad:
0001727A 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001727E                            
0001727E 117C 0007 002A             		move.b	#7,$2A(a0)
00017284 4228 003C                  		clr.b	$3C(a0)
00017288                            
00017288                            Obj78_Action:				; XREF: Obj78_Index
00017288 4A28 0022                  		tst.b	$22(a0)
0001728C 6B00 0000                  		bmi.w	loc_16C96
00017290 7000                       		moveq	#0,d0
00017292 1028 0025                  		move.b	$25(a0),d0
00017296 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001729A 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001729E 1228 002B                  		move.b	$2B(a0),d1
000172A2 6A00                       		bpl.s	Obj78_Display
000172A4 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000172AA 1028 0026                  		move.b	$26(a0),d0
000172AE 0240 007F                  		andi.w	#$7F,d0
000172B2 5828 0026                  		addq.b	#4,$26(a0)
000172B6 1031 0000                  		move.b	(a1,d0.w),d0
000172BA 6A00                       		bpl.s	Obj78_AniHead
000172BC 08A8 0007 002B             		bclr	#7,$2B(a0)
000172C2 6000                       		bra.s	Obj78_Display
000172C4                            ; ===========================================================================
000172C4                            
000172C4                            Obj78_AniHead:
000172C4 0201 0010                  		andi.b	#$10,d1
000172C8 D001                       		add.b	d1,d0
000172CA 1140 001A                  		move.b	d0,$1A(a0)
000172CE                            
000172CE                            Obj78_Display:
000172CE 3028 0008                  		move.w	8(a0),d0
000172D2 0240 FF80                  		andi.w	#$FF80,d0
000172D6 3238 F700                  		move.w	($FFFFF700).w,d1
000172DA 0441 0080                  		subi.w	#$80,d1
000172DE 0241 FF80                  		andi.w	#$FF80,d1
000172E2 9041                       		sub.w	d1,d0
000172E4 0C40 0280                  		cmpi.w	#$280,d0
000172E8 6200 0000                  		bhi.w	Obj78_ChkGone
000172EC 4EF9 0000 DD5E             		jmp	DisplaySprite
000172F2                            ; ===========================================================================
000172F2                            
000172F2                            Obj78_ChkGone:
000172F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000172F6 7000                       		moveq	#0,d0
000172F8 1028 0023                  		move.b	$23(a0),d0
000172FC 6700                       		beq.s	loc_16ABC
000172FE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017304                            
00017304                            loc_16ABC:
00017304 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001730A 4E75                       		rts	
0001730C                            ; ===========================================================================
0001730C                            
0001730C                            Obj78_Delete:				; XREF: Obj78_Index
0001730C 4EF9 0000 DD9A             		jmp	DeleteObject
00017312                            ; ===========================================================================
00017312 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017314 0000                       		dc.w loc_16B02-Obj78_Index2
00017316                            ; ===========================================================================
00017316                            
00017316                            Obj78_Move:				; XREF: Obj78_Index2
00017316 5328 002A                  		subq.b	#1,$2A(a0)
0001731A 6B00                       		bmi.s	Obj78_Move2
0001731C 4E75                       		rts	
0001731E                            ; ===========================================================================
0001731E                            
0001731E                            Obj78_Move2:
0001731E 5428 0025                  		addq.b	#2,$25(a0)
00017322 117C 0010 002A             		move.b	#$10,$2A(a0)
00017328 317C FF40 0010             		move.w	#-$C0,$10(a0)
0001732E 317C 0040 0014             		move.w	#$40,$14(a0)
00017334 0868 0004 002B             		bchg	#4,$2B(a0)
0001733A 6600                       		bne.s	loc_16AFC
0001733C 4268 0010                  		clr.w	$10(a0)
00017340 4468 0014                  		neg.w	$14(a0)
00017344                            
00017344                            loc_16AFC:
00017344 08E8 0007 002B             		bset	#7,$2B(a0)
0001734A                            
0001734A                            loc_16B02:				; XREF: Obj78_Index2
0001734A 5328 002A                  		subq.b	#1,$2A(a0)
0001734E 6B00                       		bmi.s	loc_16B5E
00017350 2F28 0008                  		move.l	8(a0),-(sp)
00017354 2428 0008                  		move.l	8(a0),d2
00017358 3028 0010                  		move.w	$10(a0),d0
0001735C 0828 0000 0022             		btst	#0,$22(a0)
00017362 6700                       		beq.s	loc_16B1E
00017364 4440                       		neg.w	d0
00017366                            
00017366                            loc_16B1E:
00017366 48C0                       		ext.l	d0
00017368 E180                       		asl.l	#8,d0
0001736A D480                       		add.l	d0,d2
0001736C 2142 0008                  		move.l	d2,8(a0)
00017370 4EBA E2E6                  		jsr	ObjHitFloor
00017374 241F                       		move.l	(sp)+,d2
00017376 0C41 FFF8                  		cmpi.w	#-8,d1
0001737A 6D00                       		blt.s	loc_16B70
0001737C 0C41 000C                  		cmpi.w	#$C,d1
00017380 6C00                       		bge.s	loc_16B70
00017382 D368 000C                  		add.w	d1,$C(a0)
00017386 4842                       		swap	d2
00017388 B468 0008                  		cmp.w	8(a0),d2
0001738C 6700                       		beq.s	locret_16B5C
0001738E 7000                       		moveq	#0,d0
00017390 1028 003C                  		move.b	$3C(a0),d0
00017394 5228 003C                  		addq.b	#1,$3C(a0)
00017398 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001739E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000173A2                            
000173A2                            locret_16B5C:
000173A2 4E75                       		rts	
000173A4                            ; ===========================================================================
000173A4                            
000173A4                            loc_16B5E:
000173A4 5528 0025                  		subq.b	#2,$25(a0)
000173A8 117C 0007 002A             		move.b	#7,$2A(a0)
000173AE 317C 0000 0010             		move.w	#0,$10(a0)
000173B4 4E75                       		rts	
000173B6                            ; ===========================================================================
000173B6                            
000173B6                            loc_16B70:
000173B6 2142 0008                  		move.l	d2,8(a0)
000173BA 0868 0000 0022             		bchg	#0,$22(a0)
000173C0 1168 0022 0001             		move.b	$22(a0),1(a0)
000173C6 7000                       		moveq	#0,d0
000173C8 1028 003C                  		move.b	$3C(a0),d0
000173CC 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000173D2 5228 003C                  		addq.b	#1,$3C(a0)
000173D6 0228 000F 003C             		andi.b	#$F,$3C(a0)
000173DC 4E75                       		rts	
000173DE                            ; ===========================================================================
000173DE                            
000173DE                            Obj78_BodySeg2:				; XREF: Obj78_Index
000173DE 2268 003C                  		movea.l	$3C(a0),a1
000173E2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000173E8 6A00                       		bpl.s	Obj78_BodySeg1
000173EA 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000173F0 1028 0026                  		move.b	$26(a0),d0
000173F4 0240 007F                  		andi.w	#$7F,d0
000173F8 5828 0026                  		addq.b	#4,$26(a0)
000173FC 4A31 0004                  		tst.b	4(a1,d0.w)
00017400 6A00                       		bpl.s	Obj78_AniBody
00017402 5828 0026                  		addq.b	#4,$26(a0)
00017406                            
00017406                            Obj78_AniBody:
00017406 1031 0000                  		move.b	(a1,d0.w),d0
0001740A 5000                       		addq.b	#8,d0
0001740C 1140 001A                  		move.b	d0,$1A(a0)
00017410                            
00017410                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017410 2268 003C                  		movea.l	$3C(a0),a1
00017414 4A28 0022                  		tst.b	$22(a0)
00017418 6B00 0000                  		bmi.w	loc_16C90
0001741C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017422 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017428 6700 0000                  		beq.w	loc_16C64
0001742C 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017432 3029 0010                  		move.w	$10(a1),d0
00017436 D069 0014                  		add.w	$14(a1),d0
0001743A 3140 0010                  		move.w	d0,$10(a0)
0001743E 2428 0008                  		move.l	8(a0),d2
00017442 2602                       		move.l	d2,d3
00017444 3028 0010                  		move.w	$10(a0),d0
00017448 0828 0000 0022             		btst	#0,$22(a0)
0001744E 6700                       		beq.s	loc_16C0C
00017450 4440                       		neg.w	d0
00017452                            
00017452                            loc_16C0C:
00017452 48C0                       		ext.l	d0
00017454 E180                       		asl.l	#8,d0
00017456 D480                       		add.l	d0,d2
00017458 2142 0008                  		move.l	d2,8(a0)
0001745C 4843                       		swap	d3
0001745E B668 0008                  		cmp.w	8(a0),d3
00017462 6700                       		beq.s	loc_16C64
00017464 7000                       		moveq	#0,d0
00017466 1028 003C                  		move.b	$3C(a0),d0
0001746A 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001746E 0C01 0080                  		cmpi.b	#-$80,d1
00017472 6600                       		bne.s	loc_16C50
00017474 4843                       		swap	d3
00017476 2143 0008                  		move.l	d3,8(a0)
0001747A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001747E 0868 0000 0022             		bchg	#0,$22(a0)
00017484 1168 0022 0001             		move.b	$22(a0),1(a0)
0001748A 5228 003C                  		addq.b	#1,$3C(a0)
0001748E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017494 6000                       		bra.s	loc_16C64
00017496                            ; ===========================================================================
00017496                            
00017496                            loc_16C50:
00017496 4881                       		ext.w	d1
00017498 D368 000C                  		add.w	d1,$C(a0)
0001749C 5228 003C                  		addq.b	#1,$3C(a0)
000174A0 0228 000F 003C             		andi.b	#$F,$3C(a0)
000174A6 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000174AA                            
000174AA                            loc_16C64:
000174AA 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000174B0 6700                       		beq.s	loc_16C90
000174B2 0C11 0027                  		cmpi.b	#$27,0(a1)
000174B6 6700                       		beq.s	loc_16C7C
000174B8 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000174BE 6600                       		bne.s	loc_16C82
000174C0                            
000174C0                            loc_16C7C:
000174C0 117C 000A 0024             		move.b	#$A,$24(a0)
000174C6                            
000174C6                            loc_16C82:
000174C6 4EF9 0000 DD5E             		jmp	DisplaySprite
000174CC                            
000174CC                            ; ===========================================================================
000174CC FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000174D4                            ; ===========================================================================
000174D4                            
000174D4                            loc_16C90:
000174D4 08E9 0007 0022             		bset	#7,$22(a1)
000174DA                            
000174DA                            loc_16C96:
000174DA 7000                       		moveq	#0,d0
000174DC 1028 0024                  		move.b	$24(a0),d0
000174E0 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000174E4 0828 0000 0022             		btst	#0,$22(a0)
000174EA 6700                       		beq.s	loc_16CAA
000174EC 4440                       		neg.w	d0
000174EE                            
000174EE                            loc_16CAA:
000174EE 3140 0010                  		move.w	d0,$10(a0)
000174F2 317C FC00 0012             		move.w	#-$400,$12(a0)
000174F8 117C 000C 0024             		move.b	#$C,$24(a0)
000174FE 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017504                            
00017504                            loc_16CC0:				; XREF: Obj78_Index
00017504 4EB9 0000 DD0C             		jsr	ObjectFall
0001750A 4A68 0012                  		tst.w	$12(a0)
0001750E 6B00                       		bmi.s	loc_16CE0
00017510 4EBA E146                  		jsr	ObjHitFloor
00017514 4A41                       		tst.w	d1
00017516 6A00                       		bpl.s	loc_16CE0
00017518 D368 000C                  		add.w	d1,$C(a0)
0001751C 317C FC00 0012             		move.w	#-$400,$12(a0)
00017522                            
00017522                            loc_16CE0:
00017522 4A28 0001                  		tst.b	1(a0)
00017526 6A00 FDCA                  		bpl.w	Obj78_ChkGone
0001752A 4EF9 0000 DD5E             		jmp	DisplaySprite
00017530                            ; ===========================================================================
00017530                            Ani_obj78:
00017530                            	include "_anim\obj78.asm"
00017530                            ; ---------------------------------------------------------------------------
00017530                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017530                            ; ---------------------------------------------------------------------------
00017530 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017540 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017550 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017560 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017570 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017580 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017590 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000175A0 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000175B0                            	even
000175B0                            	even
000175B0                            
000175B0                            ; ---------------------------------------------------------------------------
000175B0                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000175B0                            ; ---------------------------------------------------------------------------
000175B0                            Map_obj78:
000175B0                            	include "_maps\obj78.asm"
000175B0                            ; ---------------------------------------------------------------------------
000175B0                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000175B0                            ; ---------------------------------------------------------------------------
000175B0 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000175B4 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000175B8 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000175BC 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000175C0 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000175C4 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000175C8 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000175CC 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000175D0 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000175D4 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000175D8 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000175DC 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000175E0 01                         byte_16D9E:	dc.b 1
000175E1 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000175E6 01                         byte_16DA4:	dc.b 1
000175E7 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000175EC 01                         byte_16DAA:	dc.b 1
000175ED F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000175F2 01                         byte_16DB0:	dc.b 1
000175F3 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000175F8 01                         byte_16DB6:	dc.b 1
000175F9 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000175FE 01                         byte_16DBC:	dc.b 1
000175FF ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017604 01                         byte_16DC2:	dc.b 1
00017605 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001760A 01                         byte_16DC8:	dc.b 1
0001760B EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017610 01                         byte_16DCE:	dc.b 1
00017611 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017616 01                         byte_16DD4:	dc.b 1
00017617 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001761C 01                         byte_16DDA:	dc.b 1
0001761D F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017622 01                         byte_16DE0:	dc.b 1
00017623 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017628 01                         byte_16DE6:	dc.b 1
00017629 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001762E 01                         byte_16DEC:	dc.b 1
0001762F F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017634 01                         byte_16DF2:	dc.b 1
00017635 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001763A 01                         byte_16DF8:	dc.b 1
0001763B F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017640 01                         byte_16DFE:	dc.b 1
00017641 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017646 01                         byte_16E04:	dc.b 1
00017647 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001764C 01                         byte_16E0A:	dc.b 1
0001764D F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017652 01                         byte_16E10:	dc.b 1
00017653 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017658 01                         byte_16E16:	dc.b 1
00017659 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001765E 01                         byte_16E1C:	dc.b 1
0001765F ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017664 01                         byte_16E22:	dc.b 1
00017665 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001766A 01                         byte_16E28:	dc.b 1
0001766B EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017670                            		even
00017670                            		even
00017670                            
00017670                            ; ===========================================================================
00017670                            ; ---------------------------------------------------------------------------
00017670                            ; Object 79 - lamppost
00017670                            ; ---------------------------------------------------------------------------
00017670                            
00017670                            Obj79:					; XREF: Obj_Index
00017670 7000                       		moveq	#0,d0
00017672 1028 0024                  		move.b	$24(a0),d0
00017676 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001767A 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001767E 4EFA 8786                  		jmp	MarkObjGone
00017682                            ; ===========================================================================
00017682 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017684 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017686 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017688 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001768A                            ; ===========================================================================
0001768A                            
0001768A                            Obj79_Main:				; XREF: Obj79_Index
0001768A 5428 0024                  		addq.b	#2,$24(a0)
0001768E 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017696 317C 07A0 0002             		move.w	#$7A0,2(a0)
0001769C 117C 0004 0001             		move.b	#4,1(a0)
000176A2 117C 0008 0019             		move.b	#8,$19(a0)
000176A8 117C 0005 0018             		move.b	#5,$18(a0)
000176AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000176B2 7000                       		moveq	#0,d0
000176B4 1028 0023                  		move.b	$23(a0),d0
000176B8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000176BE 0832 0000 0002             		btst	#0,2(a2,d0.w)
000176C4 6600                       		bne.s	Obj79_RedLamp
000176C6 1238 FE30                  		move.b	($FFFFFE30).w,d1
000176CA 0201 007F                  		andi.b	#$7F,d1
000176CE 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000176D2 0202 007F                  		andi.b	#$7F,d2
000176D6 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000176D8 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000176DA                            
000176DA                            Obj79_RedLamp:
000176DA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000176E0 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000176E6 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000176EC 4E75                       		rts	
000176EE                            ; ===========================================================================
000176EE                            
000176EE                            Obj79_BlueLamp:				; XREF: Obj79_Index
000176EE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000176F2 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000176F6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000176FA 6B00 0000                  		bmi.w	locret_16F90
000176FE 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017702 0201 007F                  		andi.b	#$7F,d1
00017706 1428 0028                  		move.b	$28(a0),d2
0001770A 0202 007F                  		andi.b	#$7F,d2
0001770E B202                       		cmp.b	d2,d1
00017710 6500                       		bcs.s	Obj79_HitLamp
00017712 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017716 7000                       		moveq	#0,d0
00017718 1028 0023                  		move.b	$23(a0),d0
0001771C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017722 117C 0004 0024             		move.b	#4,$24(a0)
00017728 117C 0003 001A             		move.b	#3,$1A(a0)
0001772E 6000 0000                  		bra.w	locret_16F90
00017732                            ; ===========================================================================
00017732                            
00017732                            Obj79_HitLamp:
00017732 3038 D008                  		move.w	($FFFFD008).w,d0
00017736 9068 0008                  		sub.w	8(a0),d0
0001773A 5040                       		addq.w	#8,d0
0001773C 0C40 0010                  		cmpi.w	#$10,d0
00017740 6400 0000                  		bcc.w	locret_16F90
00017744 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017748 9068 000C                  		sub.w	$C(a0),d0
0001774C 0640 0040                  		addi.w	#$40,d0
00017750 0C40 0068                  		cmpi.w	#$68,d0
00017754 6400                       		bcc.s	locret_16F90
00017756 303C 00A1                  		move.w	#$A1,d0
0001775A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017760 5428 0024                  		addq.b	#2,$24(a0)
00017764 4EB9 0000 E1E4             		jsr	SingleObjLoad
0001776A 6600                       		bne.s	loc_16F76
0001776C 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017770 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017776 3368 0008 0030             		move.w	8(a0),$30(a1)
0001777C 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017782 0469 0018 0032             		subi.w	#$18,$32(a1)
00017788 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017790 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017796 137C 0004 0001             		move.b	#4,1(a1)
0001779C 137C 0008 0019             		move.b	#8,$19(a1)
000177A2 137C 0004 0018             		move.b	#4,$18(a1)
000177A8 137C 0002 001A             		move.b	#2,$1A(a1)
000177AE 337C 0020 0036             		move.w	#$20,$36(a1)
000177B4                            
000177B4                            loc_16F76:
000177B4 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000177BA 6100 0000                  		bsr.w	Obj79_StoreInfo
000177BE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177C2 7000                       		moveq	#0,d0
000177C4 1028 0023                  		move.b	$23(a0),d0
000177C8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177CE                            
000177CE                            locret_16F90:
000177CE 4E75                       		rts	
000177D0                            ; ===========================================================================
000177D0                            
000177D0                            Obj79_AfterHit:				; XREF: Obj79_Index
000177D0 4E75                       		rts	
000177D2                            ; ===========================================================================
000177D2                            
000177D2                            Obj79_Twirl:				; XREF: Obj79_Index
000177D2 5368 0036                  		subq.w	#1,$36(a0)
000177D6 6A00                       		bpl.s	loc_16FA0
000177D8 117C 0004 0024             		move.b	#4,$24(a0)
000177DE                            
000177DE                            loc_16FA0:
000177DE 1028 0026                  		move.b	$26(a0),d0
000177E2 0428 0010 0026             		subi.b	#$10,$26(a0)
000177E8 0400 0040                  		subi.b	#$40,d0
000177EC 4EB9 0000 2C64             		jsr	(CalcSine).l
000177F2 C3FC 0C00                  		muls.w	#$C00,d1
000177F6 4841                       		swap	d1
000177F8 D268 0030                  		add.w	$30(a0),d1
000177FC 3141 0008                  		move.w	d1,8(a0)
00017800 C1FC 0C00                  		muls.w	#$C00,d0
00017804 4840                       		swap	d0
00017806 D068 0032                  		add.w	$32(a0),d0
0001780A 3140 000C                  		move.w	d0,$C(a0)
0001780E 4E75                       		rts	
00017810                            ; ===========================================================================
00017810                            ; ---------------------------------------------------------------------------
00017810                            ; Subroutine to	store information when you hit a lamppost
00017810                            ; ---------------------------------------------------------------------------
00017810                            
00017810                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017810 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017816 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
0001781C 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017822 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017828 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0001782E 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017834 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001783A 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017840 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017846 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0001784C 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017852 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017858 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001785E 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017864 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001786A 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017870 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017876 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001787C 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017882 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017888 4E75                       		rts	
0001788A                            
0001788A                            ; ---------------------------------------------------------------------------
0001788A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001788A                            ; ---------------------------------------------------------------------------
0001788A                            
0001788A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001788A                            
0001788A                            
0001788A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001788A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017890 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017896 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001789C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000178A2 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000178A8 4278 FE20                  		clr.w	($FFFFFE20).w
000178AC 4238 FE1B                  		clr.b	($FFFFFE1B).w
000178B0 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000178B6 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000178BC 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000178C0 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000178C6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000178CC 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000178D2 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000178D8 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000178DE 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000178E4 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000178EA 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000178F0 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000178F6 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000178FC 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017902 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017908 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001790E 6600                       		bne.s	loc_170E4
00017910 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017916 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001791C 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017922                            
00017922                            loc_170E4:
00017922 4A38 FE30                  		tst.b	($FFFFFE30).w
00017926 6A00                       		bpl.s	locret_170F6
00017928 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001792C 0440 00A0                  		subi.w	#$A0,d0
00017930 31C0 F728                  		move.w	d0,($FFFFF728).w
00017934                            
00017934                            locret_170F6:
00017934 4E75                       		rts	
00017936                            ; End of function Obj79_LoadInfo
00017936                            
00017936                            ; ===========================================================================
00017936                            ; ---------------------------------------------------------------------------
00017936                            ; Sprite mappings - lamppost
00017936                            ; ---------------------------------------------------------------------------
00017936                            Map_obj79:
00017936                            	include "_maps\obj79.asm"
00017936                            ; ---------------------------------------------------------------------------
00017936                            ; Sprite mappings - lamppost
00017936                            ; ---------------------------------------------------------------------------
00017936 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001793A 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
0001793E 06                         byte_17100:	dc.b 6
0001793F E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017944 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017949 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001794E F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017953 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017958 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
0001795D 04                         byte_1711F:	dc.b 4
0001795E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017963 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017968 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001796D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017972 02                         byte_17134:	dc.b 2
00017973 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017978 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001797D 06                         byte_1713F:	dc.b 6
0001797E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017983 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017988 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001798D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017992 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017997 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001799C                            		even
0001799C                            		even
0001799C                            
0001799C                            ; ===========================================================================
0001799C                            ; ---------------------------------------------------------------------------
0001799C                            ; Object 7D - hidden points at the end of a level
0001799C                            ; ---------------------------------------------------------------------------
0001799C                            
0001799C                            Obj7D:					; XREF: Obj_Index
0001799C 7000                       		moveq	#0,d0
0001799E 1028 0024                  		move.b	$24(a0),d0
000179A2 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000179A6 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000179AA                            ; ===========================================================================
000179AA 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000179AC 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000179AE                            ; ===========================================================================
000179AE                            
000179AE                            Obj7D_Main:				; XREF: Obj7D_Index
000179AE 7410                       		moveq	#$10,d2
000179B0 3602                       		move.w	d2,d3
000179B2 D643                       		add.w	d3,d3
000179B4 43F8 D000                  		lea	($FFFFD000).w,a1
000179B8 3029 0008                  		move.w	8(a1),d0
000179BC 9068 0008                  		sub.w	8(a0),d0
000179C0 D042                       		add.w	d2,d0
000179C2 B043                       		cmp.w	d3,d0
000179C4 6400                       		bcc.s	Obj7D_ChkDel
000179C6 3229 000C                  		move.w	$C(a1),d1
000179CA 9268 000C                  		sub.w	$C(a0),d1
000179CE D242                       		add.w	d2,d1
000179D0 B243                       		cmp.w	d3,d1
000179D2 6400                       		bcc.s	Obj7D_ChkDel
000179D4 4A78 FE08                  		tst.w	($FFFFFE08).w
000179D8 6600                       		bne.s	Obj7D_ChkDel
000179DA 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000179DE 6600                       		bne.s	Obj7D_ChkDel
000179E0 5428 0024                  		addq.b	#2,$24(a0)
000179E4 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000179EC 317C 84B6 0002             		move.w	#$84B6,2(a0)
000179F2 0028 0004 0001             		ori.b	#4,1(a0)
000179F8 117C 0000 0018             		move.b	#0,$18(a0)
000179FE 117C 0010 0019             		move.b	#$10,$19(a0)
00017A04 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017A0A 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017A10 303C 00C9                  		move.w	#$C9,d0
00017A14 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bonus sound
00017A1A 7000                       		moveq	#0,d0
00017A1C 1028 0028                  		move.b	$28(a0),d0
00017A20 D040                       		add.w	d0,d0
00017A22 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017A26 4EB9 0000 0000             		jsr	AddPoints
00017A2C                            
00017A2C                            Obj7D_ChkDel:
00017A2C 3028 0008                  		move.w	8(a0),d0
00017A30 0240 FF80                  		andi.w	#$FF80,d0
00017A34 3238 F700                  		move.w	($FFFFF700).w,d1
00017A38 0441 0080                  		subi.w	#$80,d1
00017A3C 0241 FF80                  		andi.w	#$FF80,d1
00017A40 9041                       		sub.w	d1,d0
00017A42 0C40 0280                  		cmpi.w	#$280,d0
00017A46 6200                       		bhi.s	Obj7D_Delete
00017A48 4E75                       		rts	
00017A4A                            ; ===========================================================================
00017A4A                            
00017A4A                            Obj7D_Delete:
00017A4A 4EF9 0000 DD9A             		jmp	DeleteObject
00017A50                            ; ===========================================================================
00017A50 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017A52 03E8                       		dc.w 1000
00017A54 0064                       		dc.w 100
00017A56 0001                       		dc.w 1
00017A58                            ; ===========================================================================
00017A58                            
00017A58                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017A58 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017A5C 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017A5E 3028 0008                  		move.w	8(a0),d0
00017A62 0240 FF80                  		andi.w	#-$80,d0
00017A66 3238 F700                  		move.w	($FFFFF700).w,d1
00017A6A 0441 0080                  		subi.w	#$80,d1
00017A6E 0241 FF80                  		andi.w	#-$80,d1
00017A72 9041                       		sub.w	d1,d0
00017A74 0C40 0280                  		cmpi.w	#$280,d0
00017A78 6200                       		bhi.s	Obj7D_Delete2
00017A7A 4EF9 0000 DD5E             		jmp	DisplaySprite
00017A80                            ; ===========================================================================
00017A80                            
00017A80                            Obj7D_Delete2:
00017A80 4EF9 0000 DD9A             		jmp	DeleteObject
00017A86                            ; ===========================================================================
00017A86                            ; ---------------------------------------------------------------------------
00017A86                            ; Sprite mappings - hidden points at the end of	a level
00017A86                            ; ---------------------------------------------------------------------------
00017A86                            Map_obj7D:
00017A86                            	include "_maps\obj7D.asm"
00017A86                            ; ---------------------------------------------------------------------------
00017A86                            ; Sprite mappings - hidden points at the end of	a level
00017A86                            ; ---------------------------------------------------------------------------
00017A86 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017A8A 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017A8E 00                         byte_17250:	dc.b 0
00017A8F 01                         byte_17251:	dc.b 1
00017A90 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017A95 01                         byte_17257:	dc.b 1
00017A96 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017A9B 01                         byte_1725D:	dc.b 1
00017A9C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017AA2 00                         		even
00017AA2 00                         		even
00017AA2                            
00017AA2                            ; ===========================================================================
00017AA2                            ; ---------------------------------------------------------------------------
00017AA2                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017AA2                            ; ---------------------------------------------------------------------------
00017AA2                            
00017AA2                            Obj8A:					; XREF: Obj_Index
00017AA2 7000                       		moveq	#0,d0
00017AA4 1028 0024                  		move.b	$24(a0),d0
00017AA8 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017AAC 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017AB0                            ; ===========================================================================
00017AB0 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017AB2 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017AB4                            ; ===========================================================================
00017AB4                            
00017AB4                            Obj8A_Main:				; XREF: Obj8A_Index
00017AB4 5428 0024                  		addq.b	#2,$24(a0)
00017AB8 317C 0120 0008             		move.w	#$120,8(a0)
00017ABE 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017AC4 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017ACC 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017AD2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017AD6 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017ADA 117C 0000 0001             		move.b	#0,1(a0)
00017AE0 117C 0000 0018             		move.b	#0,$18(a0)
00017AE6 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017AEC 6600                       		bne.s	Obj8A_Display	; if not, branch
00017AEE 317C 00A6 0002             		move.w	#$A6,2(a0)
00017AF4 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017AFA 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017AFE 6700                       		beq.s	Obj8A_Display	; if not, branch
00017B00 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017B06 6600                       		bne.s	Obj8A_Display	; if not, branch
00017B08 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017B0E 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017B14 4EF9 0000 DD9A             		jmp	DeleteObject
00017B1A                            ; ===========================================================================
00017B1A                            
00017B1A                            Obj8A_Display:				; XREF: Obj8A_Index
00017B1A 4EF9 0000 DD5E             		jmp	DisplaySprite
00017B20                            ; ===========================================================================
00017B20                            ; ---------------------------------------------------------------------------
00017B20                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017B20                            ; ---------------------------------------------------------------------------
00017B20                            Map_obj8A:
00017B20                            	include "_maps\obj8A.asm"
00017B20                            ; ================================================================================
00017B20                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 20:55:17 GMT-0500 (Central Daylight Time)
00017B20                            ; ================================================================================
00017B20                            
00017B20                            DATAV02AM357W0A:
00017B20 0000 0000                  	dc.w DATAV02AM357W0A_0-DATAV02AM357W0A, DATAV02AM357W0A_1-DATAV02AM357W0A
00017B24 0000 0000                  	dc.w DATAV02AM357W0A_2-DATAV02AM357W0A, DATAV02AM357W0A_3-DATAV02AM357W0A
00017B28 0000 0000                  	dc.w DATAV02AM357W0A_4-DATAV02AM357W0A, DATAV02AM357W0A_5-DATAV02AM357W0A
00017B2C 0000 0000                  	dc.w DATAV02AM357W0A_6-DATAV02AM357W0A, DATAV02AM357W0A_7-DATAV02AM357W0A
00017B30 0000 0000                  	dc.w DATAV02AM357W0A_8-DATAV02AM357W0A, DATAV02AM357W0A_9-DATAV02AM357W0A
00017B34 0000                       	dc.w DATAV02AM357W0A_A-DATAV02AM357W0A
00017B36 0E                         DATAV02AM357W0A_0: dc.b $E
00017B37 F805 802E 88               	dc.b $F8, $5, $80, $2E, $88
00017B3C F805 8026 98               	dc.b $F8, $5, $80, $26, $98
00017B41 F805 801A A8               	dc.b $F8, $5, $80, $1A, $A8
00017B46 F801 8046 B8               	dc.b $F8, $1, $80, $46, $B8
00017B4B F805 801E C0               	dc.b $F8, $5, $80, $1E, $C0
00017B50 F805 803E D8               	dc.b $F8, $5, $80, $3E, $D8
00017B55 F805 800E E8               	dc.b $F8, $5, $80, $E, $E8
00017B5A F805 8004 F8               	dc.b $F8, $5, $80, $4, $F8
00017B5F F809 8008 08               	dc.b $F8, $9, $80, $8, $8
00017B64 F805 802E 28               	dc.b $F8, $5, $80, $2E, $28
00017B69 F805 803E 38               	dc.b $F8, $5, $80, $3E, $38
00017B6E F805 8004 48               	dc.b $F8, $5, $80, $4, $48
00017B73 F805 805C 58               	dc.b $F8, $5, $80, $5C, $58
00017B78 F805 805C 68               	dc.b $F8, $5, $80, $5C, $68
00017B7D 10                         DATAV02AM357W0A_1: dc.b $10
00017B7E D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017B83 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017B88 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017B8D D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017B92 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017B97 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017B9C D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017BA1 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017BA6 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017BAB 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017BB0 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017BB5 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017BBA 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017BBF 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017BC4 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017BC9 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017BCE 0A                         DATAV02AM357W0A_2: dc.b $A
00017BCF D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017BD4 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017BD9 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017BDE D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017BE3 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017BE8 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017BED D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017BF2 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017BF7 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017BFC 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017C01 18                         DATAV02AM357W0A_3: dc.b $18
00017C02 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017C07 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017C0C D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017C11 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017C16 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017C1B D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017C20 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017C25 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017C2A D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017C2F D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017C34 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017C39 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017C3E D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017C43 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017C48 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017C4D 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017C52 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017C57 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017C5C 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017C61 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017C66 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017C6B 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017C70 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017C75 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017C7A 14                         DATAV02AM357W0A_4: dc.b $14
00017C7B D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017C80 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017C85 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017C8A D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017C8F D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017C94 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017C99 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017C9E 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017CA3 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017CA8 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017CAD 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017CB2 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017CB7 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017CBC 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017CC1 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017CC6 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017CCB 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017CD0 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017CD5 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017CDA 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017CDF 1A                         DATAV02AM357W0A_5: dc.b $1A
00017CE0 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017CE5 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017CEA D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017CEF D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017CF4 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017CF9 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017CFE D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017D03 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017D08 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017D0D D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017D12 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017D17 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017D1C 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017D21 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017D26 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017D2B 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017D30 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017D35 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017D3A 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017D3F 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017D44 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017D49 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017D4E 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017D53 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017D58 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017D5D 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017D62 17                         DATAV02AM357W0A_6: dc.b $17
00017D63 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017D68 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017D6D D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017D72 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017D77 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017D7C D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017D81 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017D86 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017D8B D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017D90 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017D95 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017D9A D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017D9F 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017DA4 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017DA9 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017DAE 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017DB3 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017DB8 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017DBD 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017DC2 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017DC7 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017DCC 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017DD1 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017DD6 1F                         DATAV02AM357W0A_7: dc.b $1F
00017DD7 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017DDC D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017DE1 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017DE6 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017DEB D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017DF0 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017DF5 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017DFA D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017DFF D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017E04 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017E09 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017E0E D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017E13 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017E18 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017E1D 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017E22 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017E27 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017E2C 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017E31 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017E36 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017E3B 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017E40 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017E45 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017E4A 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017E4F 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017E54 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017E59 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017E5E 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017E63 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017E68 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017E6D 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017E72 0F                         DATAV02AM357W0A_8: dc.b $F
00017E73 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017E78 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017E7D F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017E82 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017E87 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017E8C F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017E91 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017E96 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017E9B F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017EA0 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017EA5 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017EAA F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017EAF F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017EB4 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017EB9 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017EBE 08                         DATAV02AM357W0A_9: dc.b $8
00017EBF 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017EC4 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017EC9 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017ECE 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017ED3 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017ED8 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017EDD 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017EE2 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017EE7 20                         DATAV02AM357W0A_A: dc.b $20
00017EE8 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017EED ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017EF2 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00017EF7 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00017EFC ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00017F01 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00017F06 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00017F0B FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00017F10 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00017F15 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00017F1A FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00017F1F FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00017F24 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00017F29 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00017F2E 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00017F33 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00017F38 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00017F3D 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00017F42 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00017F47 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00017F4C 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00017F51 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00017F56 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00017F5B 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00017F60 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00017F65 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00017F6A 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00017F6F 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00017F74 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00017F79 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00017F7E 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00017F83 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00017F88                            	even
00017F88                            	even
00017F88                            
00017F88                            ; ===========================================================================
00017F88                            ; ---------------------------------------------------------------------------
00017F88                            ; Object 3D - matthew boss - modified by GK89
00017F88                            ; ---------------------------------------------------------------------------
00017F88                            
00017F88                            Obj3D:					; XREF: Obj_Index
00017F88 7000                       		moveq	#0,d0
00017F8A 1028 0024                  		move.b	$24(a0),d0
00017F8E 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017F92 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017F96                            ; ===========================================================================
00017F96 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017F98 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017F9A 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017F9C 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017F9E                            
00017F9E 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017FA0 0401                       		dc.b 4,	1
00017FA2 0607                       		dc.b 6,	7
00017FA4                            ; ===========================================================================
00017FA4                            
00017FA4                            Obj3D_Main:				; XREF: Obj3D_Index
00017FA4 45F9 0001 7F9E             		lea	(Obj3D_ObjData).l,a2
00017FAA 2248                       		movea.l	a0,a1
00017FAC 7202                       		moveq	#2,d1
00017FAE 6000                       		bra.s	Obj3D_LoadBoss
00017FB0                            ; ===========================================================================
00017FB0                            
00017FB0                            Obj3D_Loop:
00017FB0 4EB9 0000 E1FA             		jsr	SingleObjLoad2
00017FB6 6600                       		bne.s	loc_17772
00017FB8                            
00017FB8                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017FB8 135A 0024                  		move.b	(a2)+,$24(a1)
00017FBC 12BC 003D                  		move.b	#$3D,0(a1)
00017FC0 3368 0008 0008             		move.w	8(a0),8(a1)
00017FC6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017FCC 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017FD4 337C 0400 0002             		move.w	#$400,2(a1)
00017FDA 137C 0004 0001             		move.b	#4,1(a1)
00017FE0 137C 0020 0019             		move.b	#$20,$19(a1)
00017FE6 137C 0003 0018             		move.b	#3,$18(a1)
00017FEC 135A 001C                  		move.b	(a2)+,$1C(a1)
00017FF0 2348 0034                  		move.l	a0,$34(a1)
00017FF4 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017FF8                            
00017FF8                            loc_17772:
00017FF8 3168 0008 0030             		move.w	8(a0),$30(a0)
00017FFE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018004 117C 000F 0020             		move.b	#$F,$20(a0)
0001800A 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00018010                            
00018010                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00018010 7000                       		moveq	#0,d0
00018012 1028 0025                  		move.b	$25(a0),d0
00018016 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001801A 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
0001801E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018024 4EB9 0000 AE1E             		jsr	AnimateSprite
0001802A 1028 0022                  		move.b	$22(a0),d0
0001802E 0200 0003                  		andi.b	#3,d0
00018032 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018038 8128 0001                  		or.b	d0,1(a0)
0001803C 4EF9 0000 DD5E             		jmp	DisplaySprite
00018042                            ; ===========================================================================
00018042 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00018044 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00018046 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00018048 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001804A 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
0001804C 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
0001804E 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00018050                            ; ===========================================================================
00018050                            
00018050                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00018050 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00018056 6100 0000                  		bsr.w	BossMove
0001805A 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00018060 6600                       		bne.s	loc_177E6
00018062 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018068 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001806C                            
0001806C                            loc_177E6:
0001806C 1028 003F                  		move.b	$3F(a0),d0
00018070 4EB9 0000 2C64             		jsr	(CalcSine).l
00018076 EC40                       		asr.w	#6,d0
00018078 D068 0038                  		add.w	$38(a0),d0
0001807C 3140 000C                  		move.w	d0,$C(a0)
00018080 3168 0030 0008             		move.w	$30(a0),8(a0)
00018086 5428 003F                  		addq.b	#2,$3F(a0)
0001808A 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018090 6400                       		bcc.s	locret_1784A
00018092 4A28 0022                  		tst.b	$22(a0)
00018096 6B00                       		bmi.s	loc_1784C
00018098 4A28 0020                  		tst.b	$20(a0)
0001809C 6600                       		bne.s	locret_1784A
0001809E 4A28 003E                  		tst.b	$3E(a0)
000180A2 6600                       		bne.s	Obj3D_ShipFlash
000180A4 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000180AA 303C 00AC                  		move.w	#$AC,d0
000180AE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
000180B4                            
000180B4                            Obj3D_ShipFlash:
000180B4 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000180B8 7000                       		moveq	#0,d0		; move 0 (black) to d0
000180BA 4A51                       		tst.w	(a1)
000180BC 6600                       		bne.s	loc_1783C
000180BE 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000180C2                            
000180C2                            loc_1783C:
000180C2 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000180C4 5328 003E                  		subq.b	#1,$3E(a0)
000180C8 6600                       		bne.s	locret_1784A
000180CA 117C 000F 0020             		move.b	#$F,$20(a0)
000180D0                            
000180D0                            locret_1784A:
000180D0 4E75                       		rts	
000180D2                            ; ===========================================================================
000180D2                            
000180D2                            loc_1784C:				; XREF: loc_177E6
000180D2 7064                       		moveq	#100,d0
000180D4 6100 0000                  		bsr.w	AddPoints
000180D8 117C 0008 0025             		move.b	#8,$25(a0)
000180DE 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000180E4 4E75                       		rts	
000180E6                            
000180E6                            ; ---------------------------------------------------------------------------
000180E6                            ; Defeated boss	subroutine
000180E6                            ; ---------------------------------------------------------------------------
000180E6                            
000180E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000180E6                            
000180E6                            
000180E6                            BossDefeated:
000180E6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000180EA 0200 0007                  		andi.b	#7,d0
000180EE 6600                       		bne.s	locret_178A2
000180F0 4EB9 0000 E1E4             		jsr	SingleObjLoad
000180F6 6600                       		bne.s	locret_178A2
000180F8 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000180FC 3368 0008 0008             		move.w	8(a0),8(a1)
00018102 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018108 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001810E 3200                       		move.w	d0,d1
00018110 7200                       		moveq	#0,d1
00018112 1200                       		move.b	d0,d1
00018114 E409                       		lsr.b	#2,d1
00018116 0441 0020                  		subi.w	#$20,d1
0001811A D369 0008                  		add.w	d1,8(a1)
0001811E E048                       		lsr.w	#8,d0
00018120 E608                       		lsr.b	#3,d0
00018122 D169 000C                  		add.w	d0,$C(a1)
00018126                            
00018126                            locret_178A2:
00018126 4E75                       		rts	
00018128                            ; End of function BossDefeated
00018128                            
00018128                            ; ---------------------------------------------------------------------------
00018128                            ; Subroutine to	move a boss
00018128                            ; ---------------------------------------------------------------------------
00018128                            
00018128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018128                            
00018128                            
00018128                            BossMove:
00018128 2428 0030                  		move.l	$30(a0),d2
0001812C 2628 0038                  		move.l	$38(a0),d3
00018130 3028 0010                  		move.w	$10(a0),d0
00018134 48C0                       		ext.l	d0
00018136 E180                       		asl.l	#8,d0
00018138 D480                       		add.l	d0,d2
0001813A 3028 0012                  		move.w	$12(a0),d0
0001813E 48C0                       		ext.l	d0
00018140 E180                       		asl.l	#8,d0
00018142 D680                       		add.l	d0,d3
00018144 2142 0030                  		move.l	d2,$30(a0)
00018148 2143 0038                  		move.l	d3,$38(a0)
0001814C 4E75                       		rts	
0001814E                            ; End of function BossMove
0001814E                            
0001814E                            ; ===========================================================================
0001814E                            
0001814E                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
0001814E 6100 FFD8                  		bsr.w	BossMove
00018152 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00018158 6600                       		bne.s	loc_17916
0001815A 317C 0000 0010             		move.w	#0,$10(a0)
00018160 317C 0000 0012             		move.w	#0,$12(a0)
00018166 5428 0025                  		addq.b	#2,$25(a0)
0001816A 4EB9 0000 E1FA             		jsr	SingleObjLoad2
00018170 6600                       		bne.s	loc_17910
00018172 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018176 3368 0030 0008             		move.w	$30(a0),8(a1)
0001817C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018182 2348 0034                  		move.l	a0,$34(a1)
00018186                            
00018186                            loc_17910:
00018186 317C 0077 003C             		move.w	#$77,$3C(a0)
0001818C                            
0001818C                            loc_17916:
0001818C 6000 FEDE                  		bra.w	loc_177E6
00018190                            ; ===========================================================================
00018190                            
00018190                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018190 5368 003C                  		subq.w	#1,$3C(a0)
00018194 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
0001819A 5428 0025                  		addq.b	#2,$25(a0)
0001819E 317C 003F 003C             		move.w	#$3F,$3C(a0)
000181A4 3038 D008                  		move.w	($FFFFD008).w,d0	 
000181A8 9068 0008                  		sub.w	8(a0),d0		 
000181AC 6A00                       		bpl.s	Obj3D_left			 
000181AE 08A8 0000 0022             		bclr	#0,$22(a0)		 
000181B4 6000                       		bra.s	Obj3D_right		 
000181B6 08A8 0005 0022             		bclr	#5,$22(a0)
000181BC 4EB9 0000 0000              		jsr     loc_17950
000181C2 4E75                       		rts
000181C4                            ; ===========================================================================
000181C4                            
000181C4                            Obj3D_right:
000181C4 317C FF00 0010             		move.w	#-$100,$10(a0)	
000181CA 4E75                       		Rts
000181CC                            
000181CC                            Obj3D_left:
000181CC 317C 0100 0010             		move.w	#$100,$10(a0)	 
000181D2 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
000181D8 6600                       		bne.s	RTSboss  	; if not, branch
000181DA 0868 0000 0022              		bchg	#0,$22(a0)
000181E0                            
000181E0                            RTSboss:	    
000181E0 4E75                       		rts
000181E2                             ; ===========================================================================
000181E2                            
000181E2                            Obj3D_UpStuff:
000181E2 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
000181E6 9068 000C                  		sub.w	$C(a0),d0		 
000181EA 6A00                       		bpl.s	Obj3D_down			 
000181EC 6000                        		bra.s	Obj3D_up		 
000181EE 08A8 0005 0022             		bclr	#5,$22(a0)
000181F4                             
000181F4                            Obj3D_up:		
000181F4 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
000181FA 4E75                        	    rts
000181FC                            
000181FC                            Obj3D_down:
000181FC 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018202                            
00018202                            loc_17950:
00018202 6000 FE68                  		bra.w	loc_177E6
00018206                            ; ===========================================================================
00018206                            
00018206                            loc_17954:				; XREF: Obj3D_ShipIndex
00018206 5368 003C                  		subq.w	#1,$3C(a0)
0001820A 6B00                       		bmi.s	loc_17960
0001820C 6100 FF1A                  		bsr.w	BossMove
00018210 6000                       		bra.s	loc_17976
00018212                            ; ===========================================================================
00018212                            
00018212                            loc_17960:
00018212 0868 0000 0022             		bchg	#0,$22(a0)
00018218 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001821E 5528 0025                  		subq.b	#2,$25(a0)
00018222 317C 0000 0010             		move.w	#0,$10(a0)
00018228                            
00018228                            loc_17976:
00018228 6000 FE42                  		bra.w	loc_177E6
0001822C                            ; ===========================================================================
0001822C                            
0001822C                            loc_1797A:				; XREF: Obj3D_ShipIndex
0001822C 5368 003C                  		subq.w	#1,$3C(a0)
00018230 6B00                       		bmi.s	loc_17984
00018232 6000 FEB2                  		bra.w	BossDefeated
00018236                            ; ===========================================================================
00018236                            
00018236                            loc_17984:
00018236 08E8 0000 0022             		bset	#0,$22(a0)
0001823C 08A8 0007 0022             		bclr	#7,$22(a0)
00018242 4268 0010                  		clr.w	$10(a0)
00018246 5428 0025                  		addq.b	#2,$25(a0)
0001824A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018250 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018254 6600                       		bne.s	locret_179AA
00018256 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001825C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00018262 6000 FE82                  		bra.w	BossDefeated
00018266                            
00018266                            locret_179AA:
00018266 4E75                       		rts	
00018268                            ; ===========================================================================
00018268                            
00018268                            loc_179AC:				; XREF: Obj3D_ShipIndex
00018268 4EB9 0000 DD0C             		jsr ObjectFall		
0001826E 5268 003C                  		addq.w	#1,$3C(a0)
00018272 6700                       		beq.s	loc_179BC
00018274 6A00                       		bpl.s	loc_179C2
00018276 6000                       		bra.s	loc_179EE
00018278                            ; ===========================================================================
00018278                            
00018278                            loc_179BC:
00018278 4268 0012                  		clr.w	$12(a0)
0001827C 6000                       		bra.s	loc_179EE
0001827E                            ; ===========================================================================
0001827E                            
0001827E                            loc_179C2:
0001827E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018284 6500                       		bcs.s	loc_179DA
00018286 6700                       		beq.s	loc_179E0
00018288 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001828E 6500                       		bcs.s	loc_179EE
00018290 5428 0025                  		addq.b	#2,$25(a0)
00018294 6000                       		bra.s	loc_179EE
00018296                            ; ===========================================================================
00018296                            
00018296                            loc_179DA:
00018296 5168 0012                  		subq.w	#8,$12(a0)
0001829A 6000                       		bra.s	loc_179EE
0001829C 6000 FE48                  		bra.w	BossDefeated
000182A0                            ; ===========================================================================
000182A0                            
000182A0                            loc_179E0:
000182A0 4268 0012                  		clr.w	$12(a0)
000182A4 303C 0081                  		move.w	#$81,d0
000182A8 4EB9 0000 15BA             		jsr	(PlaySound).l	; play GHZ music
000182AE                            
000182AE                            loc_179EE:
000182AE 6100 FE78                  		bsr.w	BossMove
000182B2 6000 FDB8                  		bra.w	loc_177E6
000182B6                            ; ===========================================================================
000182B6                            
000182B6                            loc_179F6:				; XREF: Obj3D_ShipIndex
000182B6 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000182BC 6700                       		beq.s	loc_17A10
000182BE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000182C2 6000                       		bra.s	loc_17A16
000182C4                            ; ===========================================================================
000182C4                            
000182C4                            loc_17A10:
000182C4 4A28 0001                  		tst.b	1(a0)
000182C8 6A00                       		bpl.s	Obj3D_ShipDel
000182CA                            
000182CA                            loc_17A16:
000182CA 6100 FE5C                  		bsr.w	BossMove
000182CE 6000 FD9C                  		bra.w	loc_177E6
000182D2                            ; ===========================================================================
000182D2                            
000182D2                            Obj3D_ShipDel:
000182D2 4EF9 0000 DD9A             		jmp	DeleteObject
000182D8                            ; ===========================================================================
000182D8                            
000182D8                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000182D8 7000                       		moveq	#0,d0
000182DA 7201                       		moveq	#1,d1
000182DC 2268 0034                  		movea.l	$34(a0),a1
000182E0 1029 0025                  		move.b	$25(a1),d0
000182E4 5900                       		subq.b	#4,d0
000182E6 6600                       		bne.s	loc_17A3E
000182E8 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000182EE 6600                       		bne.s	loc_17A46
000182F0 7204                       		moveq	#4,d1
000182F2                            
000182F2                            loc_17A3E:
000182F2 5D00                       		subq.b	#6,d0
000182F4 6B00                       		bmi.s	loc_17A46
000182F6 720A                       		moveq	#$A,d1
000182F8 6000                       		bra.s	loc_17A5A
000182FA                            ; ===========================================================================
000182FA                            
000182FA                            loc_17A46:
000182FA 4A29 0020                  		tst.b	$20(a1)
000182FE 6600                       		bne.s	loc_17A50
00018300 7205                       		moveq	#5,d1
00018302 6000                       		bra.s	loc_17A5A
00018304                            ; ===========================================================================
00018304                            
00018304                            loc_17A50:
00018304 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001830A 6500                       		bcs.s	loc_17A5A
0001830C 7204                       		moveq	#4,d1
0001830E                            
0001830E                            loc_17A5A:
0001830E 1141 001C                  		move.b	d1,$1C(a0)
00018312 5500                       		subq.b	#2,d0
00018314 6600                       		bne.s	Obj3D_FaceDisp
00018316 117C 0006 001C             		move.b	#6,$1C(a0)
0001831C 4A28 0001                  		tst.b	1(a0)
00018320 6A00                       		bpl.s	Obj3D_FaceDel
00018322                            
00018322                            Obj3D_FaceDisp:
00018322 6000                       		bra.s	Obj3D_Display
00018324                            ; ===========================================================================
00018324                            
00018324                            Obj3D_FaceDel:
00018324 4EF9 0000 DD9A             		jmp	DeleteObject
0001832A                            ; ===========================================================================
0001832A                            
0001832A                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001832A 117C 0007 001C             		move.b	#7,$1C(a0)
00018330 2268 0034                  		movea.l	$34(a0),a1
00018334 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001833A 6600                       		bne.s	loc_17A96
0001833C 117C 000B 001C             		move.b	#$B,$1C(a0)
00018342 4A28 0001                  		tst.b	1(a0)
00018346 6A00                       		bpl.s	Obj3D_FlameDel
00018348 6000                       		bra.s	Obj3D_FlameDisp
0001834A                            ; ===========================================================================
0001834A                            
0001834A                            loc_17A96:
0001834A 3029 0010                  		move.w	$10(a1),d0
0001834E 6700                       		beq.s	Obj3D_FlameDisp
00018350 117C 0008 001C             		move.b	#8,$1C(a0)
00018356                            
00018356                            Obj3D_FlameDisp:
00018356 6000                       		bra.s	Obj3D_Display
00018358                            ; ===========================================================================
00018358                            
00018358                            Obj3D_FlameDel:
00018358 4EF9 0000 DD9A             		jmp	DeleteObject
0001835E                            ; ===========================================================================
0001835E                            
0001835E                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
0001835E 2268 0034                  		movea.l	$34(a0),a1
00018362 3169 0008 0008             		move.w	8(a1),8(a0)
00018368 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001836E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018374 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001837A 4EB9 0000 AE1E             		jsr	AnimateSprite
00018380 1028 0022                  		move.b	$22(a0),d0
00018384 0200 0003                  		andi.b	#3,d0
00018388 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001838E 8128 0001                  		or.b	d0,1(a0)
00018392 4EF9 0000 DD5E             		jmp	DisplaySprite
00018398                            ; ===========================================================================
00018398                            ; ---------------------------------------------------------------------------
00018398                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018398                            ; ---------------------------------------------------------------------------
00018398                            
00018398                            Obj48:					; XREF: Obj_Index
00018398 7000                       		moveq	#0,d0
0001839A 1028 0024                  		move.b	$24(a0),d0
0001839E 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000183A2 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000183A6                            ; ===========================================================================
000183A6 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000183A8 0000                       		dc.w Obj48_Base-Obj48_Index
000183AA 0000                       		dc.w Obj48_Display2-Obj48_Index
000183AC 0000                       		dc.w loc_17C68-Obj48_Index
000183AE 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000183B0                            ; ===========================================================================
000183B0                            
000183B0                            Obj48_Main:				; XREF: Obj48_Index
000183B0 5428 0024                  		addq.b	#2,$24(a0)
000183B4 317C 4080 0026             		move.w	#$4080,$26(a0)
000183BA 317C FE00 003E             		move.w	#-$200,$3E(a0)
000183C0 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000183C8 317C 046C 0002             		move.w	#$46C,2(a0)
000183CE 45E8 0028                  		lea	$28(a0),a2
000183D2 14FC 0000                  		move.b	#0,(a2)+
000183D6 7205                       		moveq	#5,d1
000183D8 2248                       		movea.l	a0,a1
000183DA 6000                       		bra.s	loc_17B60
000183DC                            ; ===========================================================================
000183DC                            
000183DC                            Obj48_MakeLinks:
000183DC 4EB9 0000 E1FA             		jsr	SingleObjLoad2
000183E2 6600                       		bne.s	Obj48_MakeBall
000183E4 3368 0008 0008             		move.w	8(a0),8(a1)
000183EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183F0 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000183F4 137C 0006 0024             		move.b	#6,$24(a1)
000183FA 237C 0000 81E0 0004        		move.l	#Map_obj15,4(a1)
00018402 337C 0380 0002             		move.w	#$380,2(a1)
00018408 137C 0001 001A             		move.b	#1,$1A(a1)
0001840E 5228 0028                  		addq.b	#1,$28(a0)
00018412                            
00018412                            loc_17B60:				; XREF: Obj48_Main
00018412 3A09                       		move.w	a1,d5
00018414 0445 D000                  		subi.w	#$D000,d5
00018418 EC4D                       		lsr.w	#6,d5
0001841A 0245 007F                  		andi.w	#$7F,d5
0001841E 14C5                       		move.b	d5,(a2)+
00018420 137C 0004 0001             		move.b	#4,1(a1)
00018426 137C 0008 0019             		move.b	#8,$19(a1)
0001842C 137C 0006 0018             		move.b	#6,$18(a1)
00018432 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018438 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
0001843C                            
0001843C                            Obj48_MakeBall:
0001843C 137C 0008 0024             		move.b	#8,$24(a1)
00018442 237C 0000 87D0 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
0001844A 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018450 137C 0001 001A             		move.b	#1,$1A(a1)
00018456 137C 0005 0018             		move.b	#5,$18(a1)
0001845C 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018462 4E75                       		rts	
00018464                            ; ===========================================================================
00018464                            
00018464 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001846A                            
0001846A                            ; ===========================================================================
0001846A                            
0001846A                            Obj48_Base:				; XREF: Obj48_Index
0001846A 47F9 0001 8464             		lea	(Obj48_PosData).l,a3
00018470 45E8 0028                  		lea	$28(a0),a2
00018474 7C00                       		moveq	#0,d6
00018476 1C1A                       		move.b	(a2)+,d6
00018478                            
00018478                            loc_17BC6:
00018478 7800                       		moveq	#0,d4
0001847A 181A                       		move.b	(a2)+,d4
0001847C ED4C                       		lsl.w	#6,d4
0001847E 0684 00FF D000             		addi.l	#$FFD000,d4
00018484 2244                       		movea.l	d4,a1
00018486 101B                       		move.b	(a3)+,d0
00018488 B029 003C                  		cmp.b	$3C(a1),d0
0001848C 6700                       		beq.s	loc_17BE0
0001848E 5229 003C                  		addq.b	#1,$3C(a1)
00018492                            
00018492                            loc_17BE0:
00018492 51CE FFE4                  		dbf	d6,loc_17BC6
00018496                            
00018496 B029 003C                  		cmp.b	$3C(a1),d0
0001849A 6600                       		bne.s	loc_17BFA
0001849C 2268 0034                  		movea.l	$34(a0),a1
000184A0 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000184A6 6600                       		bne.s	loc_17BFA
000184A8 5428 0024                  		addq.b	#2,$24(a0)
000184AC                            
000184AC                            loc_17BFA:
000184AC 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000184B2 6700                       		beq.s	Obj48_Display
000184B4 5268 0032                  		addq.w	#1,$32(a0)
000184B8                            
000184B8                            Obj48_Display:
000184B8 6100 0000                  		bsr.w	sub_17C2A
000184BC 1028 0026                  		move.b	$26(a0),d0
000184C0 4EB9 0000 8152             		jsr	(Obj15_Move2).l
000184C6 4EF9 0000 DD5E             		jmp	DisplaySprite
000184CC                            ; ===========================================================================
000184CC                            
000184CC                            Obj48_Display2:				; XREF: Obj48_Index
000184CC 6100 0000                  		bsr.w	sub_17C2A
000184D0 4EB9 0000 8112             		jsr	(Obj48_Move).l
000184D6 4EF9 0000 DD5E             		jmp	DisplaySprite
000184DC                            
000184DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184DC                            
000184DC                            
000184DC                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000184DC 2268 0034                  		movea.l	$34(a0),a1
000184E0 0628 0020 001B             		addi.b	#$20,$1B(a0)
000184E6 6400                       		bcc.s	loc_17C3C
000184E8 0868 0000 001A             		bchg	#0,$1A(a0)
000184EE                            
000184EE                            loc_17C3C:
000184EE 3169 0008 003A             		move.w	8(a1),$3A(a0)
000184F4 3029 000C                  		move.w	$C(a1),d0
000184F8 D068 0032                  		add.w	$32(a0),d0
000184FC 3140 0038                  		move.w	d0,$38(a0)
00018500 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018506 4A29 0022                  		tst.b	$22(a1)
0001850A 6A00                       		bpl.s	locret_17C66
0001850C 10BC 003F                  		move.b	#$3F,0(a0)
00018510 117C 0000 0024             		move.b	#0,$24(a0)
00018516                            
00018516                            locret_17C66:
00018516 4E75                       		rts	
00018518                            ; End of function sub_17C2A
00018518                            
00018518                            ; ===========================================================================
00018518                            
00018518                            loc_17C68:				; XREF: Obj48_Index
00018518 2268 0034                  		movea.l	$34(a0),a1
0001851C 4A29 0022                  		tst.b	$22(a1)
00018520 6A00                       		bpl.s	Obj48_Display3
00018522 10BC 003F                  		move.b	#$3F,0(a0)
00018526 117C 0000 0024             		move.b	#0,$24(a0)
0001852C                            
0001852C                            Obj48_Display3:
0001852C 4EF9 0000 DD5E             		jmp	DisplaySprite
00018532                            ; ===========================================================================
00018532                            
00018532                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018532 7000                       		moveq	#0,d0
00018534 4A28 001A                  		tst.b	$1A(a0)
00018538 6600                       		bne.s	Obj48_Vanish
0001853A 5200                       		addq.b	#1,d0
0001853C                            
0001853C                            Obj48_Vanish:
0001853C 1140 001A                  		move.b	d0,$1A(a0)
00018540 2268 0034                  		movea.l	$34(a0),a1
00018544 4A29 0022                  		tst.b	$22(a1)
00018548 6A00                       		bpl.s	Obj48_Display4
0001854A 117C 0000 0020             		move.b	#0,$20(a0)
00018550 6100 FB94                  		bsr.w	BossDefeated
00018554 5328 003C                  		subq.b	#1,$3C(a0)
00018558 6A00                       		bpl.s	Obj48_Display4
0001855A 10BC 003F                  		move.b	#$3F,(a0)
0001855E 117C 0000 0024             		move.b	#0,$24(a0)
00018564                            
00018564                            Obj48_Display4:
00018564 4EF9 0000 DD5E             		jmp	DisplaySprite
0001856A                            ; ===========================================================================
0001856A                            Ani_Eggman:
0001856A                            	include "_anim\Eggman.asm"
0001856A                            ; ---------------------------------------------------------------------------
0001856A                            ; Animation script - Eggman (bosses)
0001856A                            ; ---------------------------------------------------------------------------
0001856A 0000                       		dc.w byte_17CD4-Ani_Eggman
0001856C 0000                       		dc.w byte_17CD8-Ani_Eggman
0001856E 0000                       		dc.w byte_17CDC-Ani_Eggman
00018570 0000                       		dc.w byte_17CE0-Ani_Eggman
00018572 0000                       		dc.w byte_17CE4-Ani_Eggman
00018574 0000                       		dc.w byte_17CE8-Ani_Eggman
00018576 0000                       		dc.w byte_17CEC-Ani_Eggman
00018578 0000                       		dc.w byte_17CF0-Ani_Eggman
0001857A 0000                       		dc.w byte_17CF4-Ani_Eggman
0001857C 0000                       		dc.w byte_17CF8-Ani_Eggman
0001857E 0000                       		dc.w byte_17CFC-Ani_Eggman
00018580 0000                       		dc.w byte_17D00-Ani_Eggman
00018582 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018586 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001858A 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001858E 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018592 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018596 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001859A 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001859E 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000185A2 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000185A6 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000185AA 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000185AE 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000185BA                            		even
000185BA                            		even
000185BA                            Ani_TetoB:
000185BA                            	include "_anim\TetoB.asm"
000185BA                            ; ---------------------------------------------------------------------------
000185BA                            ; Animation script - Eggman (bosses)
000185BA                            ; ---------------------------------------------------------------------------
000185BA 0000                       		dc.w spin-Ani_TetoB
000185BC 0000                       		dc.w static-Ani_TetoB
000185BE 0000                       		dc.w static2-Ani_TetoB
000185C0 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
000185C7 0500 FF                    static:	dc.b 5,	0, $FF
000185CA 0501 FF                    static2:	dc.b 5,	1, $FF
000185CE 00                         		even
000185CE 00                         		even
000185CE                            ; ---------------------------------------------------------------------------
000185CE                            ; Sprite mappings - Eggman (boss levels)
000185CE                            ; ---------------------------------------------------------------------------
000185CE                            Map_Eggman:
000185CE                            	include "_maps\Eggman.asm"
000185CE                            Map_dc7e:
000185CE 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
000185D0 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
000185D2 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
000185D4 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
000185D6 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
000185D8 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000185DA 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000185DC 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000185DE 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000185E0 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000185E2 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000185E4 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000185E6 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000185E8 06                         Map_dc7e_1A: 	dc.b $6
000185E9 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
000185EE EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
000185F3 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
000185F8 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
000185FD 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018602 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018607 02                         Map_dc7e_39: 	dc.b $2
00018608 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001860D EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018612 02                         Map_dc7e_44: 	dc.b $2
00018613 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018618 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001861D 03                         Map_dc7e_4F: 	dc.b $3
0001861E E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018623 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018628 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
0001862D 03                         Map_dc7e_5F: 	dc.b $3
0001862E E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018633 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00018638 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
0001863D 03                         Map_dc7e_6F: 	dc.b $3
0001863E E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018643 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018648 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
0001864D 03                         Map_dc7e_7F: 	dc.b $3
0001864E E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018653 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018658 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001865D 04                         Map_dc7e_8F: 	dc.b $4
0001865E E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018663 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018668 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001866D EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018672 01                         Map_dc7e_A4: 	dc.b $1
00018673 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018678 01                         Map_dc7e_AA: 	dc.b $1
00018679 0405 0031 22               	dc.b $4, $5, $0, $31, $22
0001867E 00                         Map_dc7e_B0: 	dc.b $0
0001867F 02                         Map_dc7e_B1: 	dc.b $2
00018680 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018685 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
0001868A 02                         Map_dc7e_BC: 	dc.b $2
0001868B F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018690 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018696 00                         	even
00018696 00                         	even
00018696                            
00018696                            ; ---------------------------------------------------------------------------
00018696                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018696                            ; ---------------------------------------------------------------------------
00018696                            Map_BossItems:
00018696                            	include "_maps\Boss items.asm"
00018696                            ; ---------------------------------------------------------------------------
00018696                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018696                            ; ---------------------------------------------------------------------------
00018696 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001869A 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001869E 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000186A2 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000186A6 01                         byte_17DE4:	dc.b 1
000186A7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000186AC 02                         byte_17DEA:	dc.b 2
000186AD FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000186B2 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000186B7 00                         		dc.b 0
000186B8 01                         byte_17DF6:	dc.b 1
000186B9 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000186BE 01                         byte_17DFC:	dc.b 1
000186BF 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000186C4 01                         byte_17E02:	dc.b 1
000186C5 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000186CA 04                         byte_17E08:	dc.b 4
000186CB F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000186D0 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000186D5 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000186DA 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000186DF 00                         		dc.b 0
000186E0 02                         byte_17E1E:	dc.b 2
000186E1 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000186E6 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000186EB 00                         		dc.b 0
000186EC 02                         byte_17E2A:	dc.b 2
000186ED 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000186F2 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000186F8 00                         		even
000186F8 00                         		even
000186F8                            
000186F8                            ; ===========================================================================
000186F8                            ; ---------------------------------------------------------------------------
000186F8                            ; Object 77 - Fatass teto boss fight in LZ -STDH
000186F8                            ; ---------------------------------------------------------------------------
000186F8                            
000186F8                            
000186F8                            obj77:					; XREF: Obj_Index
000186F8 7000                       		moveq	#0,d0
000186FA 1028 0024                  		move.b	$24(a0),d0
000186FE 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018702 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00018706                            ; ===========================================================================
00018706 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00018708 0000                       		dc.w obj77_ShipMain-obj77_Index
0001870A 0000                       		dc.w obj77_FaceMain-obj77_Index
0001870C 0000                       		dc.w obj77_FlameMain-obj77_Index
0001870E                            
0001870E 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
00018710 0401                       		dc.b 4,	1
00018712 0607                       		dc.b 6,	7
00018714                            ; ===========================================================================
00018714                            
00018714                            obj77_Main:				; XREF: obj77_Index
00018714 45F9 0001 870E             		lea	(obj77_ObjData).l,a2
0001871A 2248                       		movea.l	a0,a1
0001871C 7202                       		moveq	#2,d1
0001871E 6000                       		bra.s	obj77_LoadBoss
00018720                            ; ===========================================================================
00018720                            
00018720                            obj77_Loop:
00018720 4EB9 0000 E1FA             		jsr	SingleObjLoad2
00018726 6600                       		bne.s	loc2_17772
00018728                            
00018728                            obj77_LoadBoss:				; XREF: obj77_Main
00018728 135A 0024                  		move.b	(a2)+,$24(a1)
0001872C 12BC 0077                  		move.b	#$77,0(a1)
00018730 3368 0008 0008             		move.w	8(a0),8(a1)
00018736 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001873C 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00018744 337C 0400 0002             		move.w	#$400,2(a1)
0001874A 137C 0004 0001             		move.b	#4,1(a1)
00018750 137C 0020 0019             		move.b	#$20,$19(a1)
00018756 137C 0003 0018             		move.b	#3,$18(a1)
0001875C 135A 001C                  		move.b	(a2)+,$1C(a1)
00018760 2348 0034                  		move.l	a0,$34(a1)
00018764 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
00018768                            
00018768                            loc2_17772:
00018768 3168 0008 0030             		move.w	8(a0),$30(a0)
0001876E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018774 117C 000F 0020             		move.b	#$F,$20(a0)
0001877A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018780                            
00018780                            obj77_ShipMain:				; XREF: obj77_Index
00018780 7000                       		moveq	#0,d0
00018782 1028 0025                  		move.b	$25(a0),d0
00018786 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
0001878A 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
0001878E 43F9 0001 85BA             		lea	(Ani_TetoB).l,a1
00018794 4EB9 0000 AE1E             		jsr	AnimateSprite
0001879A 1028 0022                  		move.b	$22(a0),d0
0001879E 0200 0003                  		andi.b	#3,d0
000187A2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000187A8 8128 0001                  		or.b	d0,1(a0)
000187AC 4EF9 0000 DD5E             		jmp	DisplaySprite
000187B2                            ; ===========================================================================
000187B2 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
000187B4 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
000187B6 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
000187B8 0000                       		dc.w loc2_17954-obj77_ShipIndex
000187BA 0000                       		dc.w fatassruns-obj77_ShipIndex		
000187BC 0000                       		dc.w loc2_1797A-obj77_ShipIndex
000187BE 0000                       		dc.w loc2_179AC-obj77_ShipIndex
000187C0 0000                       		dc.w loc2_179F6-obj77_ShipIndex
000187C2                            ; ===========================================================================
000187C2                            
000187C2                            obj77_ShipStart:			; XREF: obj77_ShipIndex
000187C2                            	;	move.w	#$100,$12(a0)	; move ship down
000187C2 6100 F964                  		bsr.w	BossMove
000187C6 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
000187CC 6600                       		bne.s	loc2_177E6
000187CE 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000187D4 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000187D8                            
000187D8                            loc2_177E6:
000187D8                            ;		move.b	$3F(a0),d0
000187D8                            ;		jsr	(CalcSine).l
000187D8 EC40                       		asr.w	#6,d0
000187DA D068 0038                  		add.w	$38(a0),d0
000187DE 3140 000C                  		move.w	d0,$C(a0)
000187E2 3168 0030 0008             		move.w	$30(a0),8(a0)
000187E8 5428 003F                  		addq.b	#2,$3F(a0)
000187EC 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
000187F2 6400                       		bcc.s	locret_1784A2
000187F4 4A28 0022                  		tst.b	$22(a0)
000187F8 6B00                       		bmi.s	loc2_1784C
000187FA 4A28 0020                  		tst.b	$20(a0)
000187FE 6600                       		bne.s	locret_1784A2
00018800 4A28 003E                  		tst.b	$3E(a0)
00018804 6600                       		bne.s	obj77_ShipFlash
00018806 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
0001880C 303C 00AC                  		move.w	#$AC,d0
00018810 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018816                            
00018816                            obj77_ShipFlash:
00018816 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001881A 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001881C 4A51                       		tst.w	(a1)
0001881E 6600                       		bne.s	loc2_1783C
00018820 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018824                            
00018824                            loc2_1783C:
00018824 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018826 5328 003E                  		subq.b	#1,$3E(a0)
0001882A 6600                       		bne.s	locret_1784A2
0001882C 117C 000F 0020             		move.b	#$F,$20(a0)
00018832                            
00018832                            locret_1784A2:
00018832 4E75                       		rts	
00018834                            ; ===========================================================================
00018834                            
00018834                            loc2_1784C:				; XREF: loc2_177E6
00018834 7064                       		moveq	#100,d0
00018836 6100 0000                  		bsr.w	AddPoints
0001883A 117C 000A 0025             		move.b	#$A,$25(a0)
00018840 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018846 4E75                       		rts	
00018848                            ; ===========================================================================
00018848                            
00018848                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018848 317C FF00 0010             		move.w	#-$100,$10(a0)
0001884E 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018854 6100 F8D2                  		bsr.w	BossMove
00018858 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
0001885E 6600                       		bne.s	loc2_17916
00018860 317C 0000 0010             		move.w	#0,$10(a0)
00018866 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
0001886C 317C 0000 0012             		move.w	#0,$12(a0)
00018872 5428 0025                  		addq.b	#2,$25(a0)
00018876                            
00018876                            loc2_17910:
00018876 317C 0077 003C             		move.w	#$77,$3C(a0)
0001887C                            
0001887C                            loc2_17916:
0001887C 6000 FF5A                  		bra.w	loc2_177E6
00018880                            ; ===========================================================================
00018880                            
00018880                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018880 6100 F8A6                  		bsr.w	BossMove
00018884 5368 003C                  		subq.w	#1,$3C(a0)
00018888 6A00                       		bpl.s	loc2_17950 ; if time remains go here
0001888A 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018890 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018896 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
0001889C 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
000188A2 6600                       		bne.s	loc2_17950 ; if not branch
000188A4                            
000188A4                            fatass_attack:
000188A4 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
000188AA 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
000188B0 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
000188B6 6600                       		bne.s	loc2_17950    ; if not you know the drill
000188B8 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
000188BC 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
000188C2                            
000188C2                            loc2_17950:
000188C2 6000 FF14                  		bra.w	loc2_177E6
000188C6                            ; ===========================================================================
000188C6                            
000188C6                            loc2_17954:				; XREF: obj77_ShipIndex
000188C6 6100 F860                  		bsr.w	BossMove
000188CA 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
000188D0                            		; i suck at programming
000188D0 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
000188D6 6600                       		bne.s	loc2_17976    ; if not blah blah
000188D8 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
000188DE 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
000188E2 303C 00B9                  		move.w	#$B9,d0
000188E6 4EB9 0000 15BA             		jsr	(PlaySound).l	; play the earthquake sound
000188EC                            
000188EC                            Peartobombs:	
000188EC 4EB9 0000 E1FA                		jsr	SingleObjLoad2
000188F2 6600                       		bne.s	secondone
000188F4 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
000188F8 337C 1D70 0008             		move.w	#$1D70,8(a1)
000188FE 337C 0670 000C             		move.w	#$670,$C(a1)
00018904                            secondone:		
00018904 4EB9 0000 E1FA                		jsr	SingleObjLoad2
0001890A 6600                       		bne.s	loc2_17976		
0001890C 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018910 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018916 337C 0670 000C             		move.w	#$670,$C(a1)
0001891C                            lastone:
0001891C 4EB9 0000 E1FA                		jsr	SingleObjLoad2
00018922 6600                       		bne.s	loc2_17976		
00018924 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018928 337C 1E00 0008             		move.w	#$1E00,8(a1)
0001892E 337C 0670 000C             		move.w	#$670,$C(a1)
00018934                            		
00018934                            loc2_17976:
00018934 6000 FEA2                  		bra.w	loc2_177E6
00018938                            		
00018938                            ; ===========================================================================
00018938                            Fatassruns:
00018938 6100 F7EE                   		bsr.w	BossMove
0001893C 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018942 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018948 6600                       		bne.s	processstuff ; is not go here
0001894A 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018950 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018956 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
0001895A 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018960 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018966                            		
00018966                            		
00018966                            processstuff:
00018966 6000 FE70                  		bra.w	loc2_177E6
0001896A                            ; ===========================================================================
0001896A                            
0001896A                            loc2_1797A:				; XREF: obj77_ShipIndex
0001896A 5368 003C                  		subq.w	#1,$3C(a0)
0001896E 6B00                       		bmi.s	loc2_17984
00018970 6000 F774                  		bra.w	BossDefeated
00018974                            ; ===========================================================================
00018974                            
00018974                            loc2_17984:
00018974 08E8 0000 0022             		bset	#0,$22(a0)
0001897A 08A8 0007 0022             		bclr	#7,$22(a0)
00018980 4268 0010                  		clr.w	$10(a0)
00018984 5428 0025                  		addq.b	#2,$25(a0)
00018988 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001898E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018992 6600                       		bne.s	locret_179AA2
00018994 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001899A                            
0001899A                            locret_179AA2:
0001899A 4E75                       		rts	
0001899C                            ; ===========================================================================
0001899C                            
0001899C                            loc2_179AC:				; XREF: obj77_ShipIndex
0001899C 5268 003C                  		addq.w	#1,$3C(a0)
000189A0 6700                       		beq.s	loc2_179BC
000189A2 6A00                       		bpl.s	loc2_179C2
000189A4 0668 0018 0012             		addi.w	#$18,$12(a0)
000189AA 6000                       		bra.s	loc2_179EE
000189AC                            ; ===========================================================================
000189AC                            
000189AC                            loc2_179BC:
000189AC 4268 0012                  		clr.w	$12(a0)
000189B0 6000                       		bra.s	loc2_179EE
000189B2                            ; ===========================================================================
000189B2                            
000189B2                            loc2_179C2:
000189B2 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000189B8 6500                       		bcs.s	loc2_179DA
000189BA 6700                       		beq.s	loc2_179E0
000189BC 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000189C2 6500                       		bcs.s	loc2_179EE
000189C4 5428 0025                  		addq.b	#2,$25(a0)
000189C8 6000                       		bra.s	loc2_179EE
000189CA                            ; ===========================================================================
000189CA                            
000189CA                            loc2_179DA:
000189CA 5168 0012                  		subq.w	#8,$12(a0)
000189CE 6000                       		bra.s	loc2_179EE
000189D0                            ; ===========================================================================
000189D0                            
000189D0                            loc2_179E0:
000189D0 4268 0012                  		clr.w	$12(a0)
000189D4 303C 0097                  		move.w	#$97,d0
000189D8 4EB9 0000 15BA             		jsr	(PlaySound).l	; play lz3 music
000189DE                            
000189DE                            loc2_179EE:
000189DE 6100 F748                  		bsr.w	BossMove
000189E2 6000 FDF4                  		bra.w	loc2_177E6
000189E6                            ; ===========================================================================
000189E6                            
000189E6                            loc2_179F6:				; XREF: obj77_ShipIndex
000189E6 317C 0400 0010             		move.w	#$400,$10(a0)
000189EC 317C FFC0 0012             		move.w	#-$40,$12(a0)
000189F2 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
000189F8 6700                       		beq.s	loc2_17A10
000189FA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000189FE 6000                       		bra.s	loc2_17A16
00018A00                            ; ===========================================================================
00018A00                            
00018A00                            loc2_17A10:
00018A00 4A28 0001                  		tst.b	1(a0)
00018A04 6A00                       		bpl.s	obj77_ShipDel
00018A06                            
00018A06                            loc2_17A16:
00018A06 6100 F720                  		bsr.w	BossMove
00018A0A 6000 FDCC                  		bra.w	loc2_177E6
00018A0E                            ; ===========================================================================
00018A0E                            
00018A0E                            obj77_ShipDel:
00018A0E 4EF9 0000 DD9A             		jmp	DeleteObject
00018A14                            ; ===========================================================================
00018A14                            
00018A14                            obj77_FaceMain:				; XREF: obj77_Index
00018A14 4E75                       		rts
00018A16                            ; ===========================================================================
00018A16                            
00018A16                            obj77_FlameMain:			; XREF: obj77_Index
00018A16 4E75                       		rts
00018A18                            ; ===========================================================================
00018A18                            
00018A18                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018A18 43F9 0001 85BA             		lea	(Ani_TetoB).l,a1
00018A1E 4EB9 0000 AE1E             		jsr	AnimateSprite
00018A24 4EF9 0000 DD5E             		jmp	DisplaySprite
00018A2A                            ; ---------------------------------------------------------------------------
00018A2A                            ; Sprite mappings - Fatass teto boss
00018A2A                            ; ---------------------------------------------------------------------------
00018A2A                            Map_TetoBoss:
00018A2A                            	include "_maps\tetoboss.asm"
00018A2A                            Map_f09a:
00018A2A 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018A2C 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018A2E 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018A30 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018A32 03                         Map_f09a_8: 	dc.b $3
00018A33 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018A38 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018A3D DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018A42 06                         Map_f09a_18: 	dc.b $6
00018A43 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018A48 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018A4D E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018A52 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018A57 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018A5C 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018A61 03                         Map_f09a_37: 	dc.b $3
00018A62 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018A67 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018A6C DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018A71 06                         Map_f09a_47: 	dc.b $6
00018A72 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018A77 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018A7C E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018A81 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018A86 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018A8B 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018A90                            	even
00018A90                            	even
00018A90                            ; ===========================================================================
00018A90                            ; ---------------------------------------------------------------------------
00018A90                            ; Object 73 - Eggman (MZ)
00018A90                            ; ---------------------------------------------------------------------------
00018A90                            
00018A90                            Obj73:					; XREF: Obj_Index
00018A90 7000                       		moveq	#0,d0
00018A92 1028 0024                  		move.b	$24(a0),d0
00018A96 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018A9A 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018A9E                            ; ===========================================================================
00018A9E 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018AA0 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018AA2 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018AA4 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018AA6 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018AA8                            
00018AA8 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018AAB 0401 04                    		dc.b 4,	1, 4
00018AAE 0607 04                    		dc.b 6,	7, 4
00018AB1 0800 03                    		dc.b 8,	0, 3
00018AB4                            ; ===========================================================================
00018AB4                            
00018AB4                            Obj73_Main:				; XREF: Obj73_Index
00018AB4 3168 0008 0030             		move.w	8(a0),$30(a0)
00018ABA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018AC0 117C 000F 0020             		move.b	#$F,$20(a0)
00018AC6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018ACC 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018AD0 2248                       		movea.l	a0,a1
00018AD2 7203                       		moveq	#3,d1
00018AD4 6000                       		bra.s	Obj73_LoadBoss
00018AD6                            ; ===========================================================================
00018AD6                            
00018AD6                            Obj73_Loop:
00018AD6 4EB9 0000 E1FA             		jsr	SingleObjLoad2
00018ADC 6600                       		bne.s	Obj73_ShipMain
00018ADE 12BC 0073                  		move.b	#$73,0(a1)
00018AE2 3368 0008 0008             		move.w	8(a0),8(a1)
00018AE8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018AEE                            
00018AEE                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018AEE 08A8 0000 0022             		bclr	#0,$22(a0)
00018AF4 4229 0025                  		clr.b	$25(a1)
00018AF8 135A 0024                  		move.b	(a2)+,$24(a1)
00018AFC 135A 001C                  		move.b	(a2)+,$1C(a1)
00018B00 135A 0018                  		move.b	(a2)+,$18(a1)
00018B04 237C 0001 85CE 0004        		move.l	#Map_Eggman,4(a1)
00018B0C 337C 0400 0002             		move.w	#$400,2(a1)
00018B12 137C 0004 0001             		move.b	#4,1(a1)
00018B18 137C 0020 0019             		move.b	#$20,$19(a1)
00018B1E 2348 0034                  		move.l	a0,$34(a1)
00018B22 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018B26                            
00018B26                            Obj73_ShipMain:
00018B26 7000                       		moveq	#0,d0
00018B28 1028 0025                  		move.b	$25(a0),d0
00018B2C 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018B30 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018B34 43F9 0001 856A             		lea	(Ani_Eggman).l,a1
00018B3A 4EB9 0000 AE1E             		jsr	AnimateSprite
00018B40 7003                       		moveq	#3,d0
00018B42 C028 0022                  		and.b	$22(a0),d0
00018B46 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018B4C 8128 0001                  		or.b	d0,1(a0)
00018B50 4EF9 0000 DD5E             		jmp	DisplaySprite
00018B56                            ; ===========================================================================
00018B56 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018B58 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018B5A 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018B5C 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018B5E 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018B60                            ; ===========================================================================
00018B60                            
00018B60                            loc_18302:				; XREF: Obj73_ShipIndex
00018B60 1028 003F                  		move.b	$3F(a0),d0
00018B64 5428 003F                  		addq.b	#2,$3F(a0)
00018B68 4EB9 0000 2C64             		jsr	(CalcSine).l
00018B6E E440                       		asr.w	#2,d0
00018B70 3140 0012                  		move.w	d0,$12(a0)
00018B74 317C FF00 0010             		move.w	#-$100,$10(a0)
00018B7A 6100 F5AC                  		bsr.w	BossMove
00018B7E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018B84 6600                       		bne.s	loc_18334
00018B86 5428 0025                  		addq.b	#2,$25(a0)
00018B8A 4228 0028                  		clr.b	$28(a0)
00018B8E 42A8 0010                  		clr.l	$10(a0)
00018B92                            
00018B92                            loc_18334:
00018B92 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018B98 1140 0034                  		move.b	d0,$34(a0)
00018B9C                            
00018B9C                            loc_1833E:
00018B9C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018BA2 3168 0030 0008             		move.w	$30(a0),8(a0)
00018BA8 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018BAE 6400                       		bcc.s	locret_18390
00018BB0 4A28 0022                  		tst.b	$22(a0)
00018BB4 6B00                       		bmi.s	loc_18392
00018BB6 4A28 0020                  		tst.b	$20(a0)
00018BBA 6600                       		bne.s	locret_18390
00018BBC 4A28 003E                  		tst.b	$3E(a0)
00018BC0 6600                       		bne.s	loc_18374
00018BC2 117C 0028 003E             		move.b	#$28,$3E(a0)
00018BC8 303C 00AC                  		move.w	#$AC,d0
00018BCC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018BD2                            
00018BD2                            loc_18374:
00018BD2 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018BD6 7000                       		moveq	#0,d0
00018BD8 4A51                       		tst.w	(a1)
00018BDA 6600                       		bne.s	loc_18382
00018BDC 303C 0EEE                  		move.w	#$EEE,d0
00018BE0                            
00018BE0                            loc_18382:
00018BE0 3280                       		move.w	d0,(a1)
00018BE2 5328 003E                  		subq.b	#1,$3E(a0)
00018BE6 6600                       		bne.s	locret_18390
00018BE8 117C 000F 0020             		move.b	#$F,$20(a0)
00018BEE                            
00018BEE                            locret_18390:
00018BEE 4E75                       		rts	
00018BF0                            ; ===========================================================================
00018BF0                            
00018BF0                            loc_18392:				; XREF: loc_1833E
00018BF0 7064                       		moveq	#100,d0
00018BF2 6100 0000                  		bsr.w	AddPoints
00018BF6 117C 0004 0025             		move.b	#4,$25(a0)
00018BFC 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018C02 4268 0010                  		clr.w	$10(a0)
00018C06 4E75                       		rts	
00018C08                            ; ===========================================================================
00018C08                            
00018C08                            loc_183AA:				; XREF: Obj73_ShipIndex
00018C08 7000                       		moveq	#0,d0
00018C0A 1028 0028                  		move.b	$28(a0),d0
00018C0E 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018C12 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018C16 0228 0006 0028             		andi.b	#6,$28(a0)
00018C1C 6000 FF7E                  		bra.w	loc_1833E
00018C20                            ; ===========================================================================
00018C20 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018C22 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018C24 0000                       		dc.w loc_183CA-off_183C2
00018C26 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018C28                            ; ===========================================================================
00018C28                            
00018C28                            loc_183CA:				; XREF: off_183C2
00018C28 4A68 0010                  		tst.w	$10(a0)
00018C2C 6600                       		bne.s	loc_183FE
00018C2E 7040                       		moveq	#$40,d0
00018C30 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018C36 6700                       		beq.s	loc_183E6
00018C38 6500                       		bcs.s	loc_183DE
00018C3A 4440                       		neg.w	d0
00018C3C                            
00018C3C                            loc_183DE:
00018C3C 3140 0012                  		move.w	d0,$12(a0)
00018C40 6000 F4E6                  		bra.w	BossMove
00018C44                            ; ===========================================================================
00018C44                            
00018C44                            loc_183E6:
00018C44 317C 0200 0010             		move.w	#$200,$10(a0)
00018C4A 317C 0100 0012             		move.w	#$100,$12(a0)
00018C50 0828 0000 0022             		btst	#0,$22(a0)
00018C56 6600                       		bne.s	loc_183FE
00018C58 4468 0010                  		neg.w	$10(a0)
00018C5C                            
00018C5C                            loc_183FE:
00018C5C 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018C62 6400                       		bcc.s	Obj73_MakeLava
00018C64 6100 F4C2                  		bsr.w	BossMove
00018C68 5968 0012                  		subq.w	#4,$12(a0)
00018C6C                            
00018C6C                            Obj73_MakeLava:
00018C6C 5328 0034                  		subq.b	#1,$34(a0)
00018C70 6400                       		bcc.s	loc_1845C
00018C72 4EB9 0000 E1E4             		jsr	SingleObjLoad
00018C78 6600                       		bne.s	loc_1844A
00018C7A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018C7E 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018C84 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018C8A 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018C90 80FC 0050                  		divu.w	#$50,d0
00018C94 4840                       		swap	d0
00018C96 0640 1878                  		addi.w	#$1878,d0
00018C9A 3340 0008                  		move.w	d0,8(a1)
00018C9E EE09                       		lsr.b	#7,d1
00018CA0 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018CA6                            
00018CA6                            loc_1844A:
00018CA6 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018CAC 0200 001F                  		andi.b	#$1F,d0
00018CB0 0600 0040                  		addi.b	#$40,d0
00018CB4 1140 0034                  		move.b	d0,$34(a0)
00018CB8                            
00018CB8                            loc_1845C:
00018CB8 0828 0000 0022             		btst	#0,$22(a0)
00018CBE 6700                       		beq.s	loc_18474
00018CC0 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018CC6 6D00                       		blt.s	locret_1849C
00018CC8 317C 1910 0030             		move.w	#$1910,$30(a0)
00018CCE 6000                       		bra.s	loc_18482
00018CD0                            ; ===========================================================================
00018CD0                            
00018CD0                            loc_18474:
00018CD0 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018CD6 6E00                       		bgt.s	locret_1849C
00018CD8 317C 1830 0030             		move.w	#$1830,$30(a0)
00018CDE                            
00018CDE                            loc_18482:
00018CDE 4268 0010                  		clr.w	$10(a0)
00018CE2 317C FE80 0012             		move.w	#-$180,$12(a0)
00018CE8 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018CEE 6400                       		bcc.s	loc_18498
00018CF0 4468 0012                  		neg.w	$12(a0)
00018CF4                            
00018CF4                            loc_18498:
00018CF4 5428 0028                  		addq.b	#2,$28(a0)
00018CF8                            
00018CF8                            locret_1849C:
00018CF8 4E75                       		rts	
00018CFA                            ; ===========================================================================
00018CFA                            
00018CFA                            Obj73_MakeLava2:			; XREF: off_183C2
00018CFA 6100 F42C                  		bsr.w	BossMove
00018CFE 3028 0038                  		move.w	$38(a0),d0
00018D02 0440 022C                  		subi.w	#$22C,d0
00018D06 6E00                       		bgt.s	locret_184F4
00018D08 303C 022C                  		move.w	#$22C,d0
00018D0C 4A68 0012                  		tst.w	$12(a0)
00018D10 6700                       		beq.s	loc_184EA
00018D12 4268 0012                  		clr.w	$12(a0)
00018D16 317C 0050 003C             		move.w	#$50,$3C(a0)
00018D1C 0868 0000 0022             		bchg	#0,$22(a0)
00018D22 4EB9 0000 E1E4             		jsr	SingleObjLoad
00018D28 6600                       		bne.s	loc_184EA
00018D2A 3368 0030 0008             		move.w	$30(a0),8(a1)
00018D30 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018D36 0669 0018 000C             		addi.w	#$18,$C(a1)
00018D3C 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018D40 137C 0001 0028             		move.b	#1,$28(a1)
00018D46                            
00018D46                            loc_184EA:
00018D46 5368 003C                  		subq.w	#1,$3C(a0)
00018D4A 6600                       		bne.s	locret_184F4
00018D4C 5428 0028                  		addq.b	#2,$28(a0)
00018D50                            
00018D50                            locret_184F4:
00018D50 4E75                       		rts	
00018D52                            ; ===========================================================================
00018D52                            
00018D52                            loc_184F6:				; XREF: Obj73_ShipIndex
00018D52 5368 003C                  		subq.w	#1,$3C(a0)
00018D56 6B00                       		bmi.s	loc_18500
00018D58 6000 F38C                  		bra.w	BossDefeated
00018D5C                            ; ===========================================================================
00018D5C                            
00018D5C                            loc_18500:
00018D5C 08E8 0000 0022             		bset	#0,$22(a0)
00018D62 08A8 0007 0022             		bclr	#7,$22(a0)
00018D68 4268 0010                  		clr.w	$10(a0)
00018D6C 5428 0025                  		addq.b	#2,$25(a0)
00018D70 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018D76 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018D7A 6600                       		bne.s	locret_1852A
00018D7C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018D82 4268 0012                  		clr.w	$12(a0)
00018D86                            
00018D86                            locret_1852A:
00018D86 4E75                       		rts	
00018D88                            ; ===========================================================================
00018D88                            
00018D88                            loc_1852C:				; XREF: Obj73_ShipIndex
00018D88 5268 003C                  		addq.w	#1,$3C(a0)
00018D8C 6700                       		beq.s	loc_18544
00018D8E 6A00                       		bpl.s	loc_1854E
00018D90 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018D96 6400                       		bcc.s	loc_18544
00018D98 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D9E 6000                       		bra.s	loc_1857A
00018DA0                            ; ===========================================================================
00018DA0                            
00018DA0                            loc_18544:
00018DA0 4268 0012                  		clr.w	$12(a0)
00018DA4 4268 003C                  		clr.w	$3C(a0)
00018DA8 6000                       		bra.s	loc_1857A
00018DAA                            ; ===========================================================================
00018DAA                            
00018DAA                            loc_1854E:
00018DAA 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018DB0 6500                       		bcs.s	loc_18566
00018DB2 6700                       		beq.s	loc_1856C
00018DB4 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018DBA 6500                       		bcs.s	loc_1857A
00018DBC 5428 0025                  		addq.b	#2,$25(a0)
00018DC0 6000                       		bra.s	loc_1857A
00018DC2                            ; ===========================================================================
00018DC2                            
00018DC2                            loc_18566:
00018DC2 5168 0012                  		subq.w	#8,$12(a0)
00018DC6 6000                       		bra.s	loc_1857A
00018DC8                            ; ===========================================================================
00018DC8                            
00018DC8                            loc_1856C:
00018DC8 4268 0012                  		clr.w	$12(a0)
00018DCC 303C 0083                  		move.w	#$83,d0
00018DD0 4EB9 0000 15BA             		jsr	(PlaySound).l	; play MZ music
00018DD6                            
00018DD6                            loc_1857A:
00018DD6 6100 F350                  		bsr.w	BossMove
00018DDA 6000 FDC0                  		bra.w	loc_1833E
00018DDE                            ; ===========================================================================
00018DDE                            
00018DDE                            loc_18582:				; XREF: Obj73_ShipIndex
00018DDE 317C 0500 0010             		move.w	#$500,$10(a0)
00018DE4 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018DEA 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018DF0 6400                       		bcc.s	loc_1859C
00018DF2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018DF6 6000                       		bra.s	loc_185A2
00018DF8                            ; ===========================================================================
00018DF8                            
00018DF8                            loc_1859C:
00018DF8 4A28 0001                  		tst.b	1(a0)
00018DFC 6A00                       		bpl.s	Obj73_ShipDel
00018DFE                            
00018DFE                            loc_185A2:
00018DFE 6100 F328                  		bsr.w	BossMove
00018E02 6000 FD98                  		bra.w	loc_1833E
00018E06                            ; ===========================================================================
00018E06                            
00018E06                            Obj73_ShipDel:
00018E06 4EF9 0000 DD9A             		jmp	DeleteObject
00018E0C                            ; ===========================================================================
00018E0C                            
00018E0C                            Obj73_FaceMain:				; XREF: Obj73_Index
00018E0C 7000                       		moveq	#0,d0
00018E0E 7201                       		moveq	#1,d1
00018E10 2268 0034                  		movea.l	$34(a0),a1
00018E14 1029 0025                  		move.b	$25(a1),d0
00018E18 5540                       		subq.w	#2,d0
00018E1A 6600                       		bne.s	loc_185D2
00018E1C 0829 0001 0028             		btst	#1,$28(a1)
00018E22 6700                       		beq.s	loc_185DA
00018E24 4A69 0012                  		tst.w	$12(a1)
00018E28 6600                       		bne.s	loc_185DA
00018E2A 7204                       		moveq	#4,d1
00018E2C 6000                       		bra.s	loc_185EE
00018E2E                            ; ===========================================================================
00018E2E                            
00018E2E                            loc_185D2:
00018E2E 5500                       		subq.b	#2,d0
00018E30 6B00                       		bmi.s	loc_185DA
00018E32 720A                       		moveq	#$A,d1
00018E34 6000                       		bra.s	loc_185EE
00018E36                            ; ===========================================================================
00018E36                            
00018E36                            loc_185DA:
00018E36 4A29 0020                  		tst.b	$20(a1)
00018E3A 6600                       		bne.s	loc_185E4
00018E3C 7205                       		moveq	#5,d1
00018E3E 6000                       		bra.s	loc_185EE
00018E40                            ; ===========================================================================
00018E40                            
00018E40                            loc_185E4:
00018E40 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018E46 6500                       		bcs.s	loc_185EE
00018E48 7204                       		moveq	#4,d1
00018E4A                            
00018E4A                            loc_185EE:
00018E4A 1141 001C                  		move.b	d1,$1C(a0)
00018E4E 5900                       		subq.b	#4,d0
00018E50 6600                       		bne.s	loc_18602
00018E52 117C 0006 001C             		move.b	#6,$1C(a0)
00018E58 4A28 0001                  		tst.b	1(a0)
00018E5C 6A00                       		bpl.s	Obj73_FaceDel
00018E5E                            
00018E5E                            loc_18602:
00018E5E 6000                       		bra.s	Obj73_Display
00018E60                            ; ===========================================================================
00018E60                            
00018E60                            Obj73_FaceDel:
00018E60 4EF9 0000 DD9A             		jmp	DeleteObject
00018E66                            ; ===========================================================================
00018E66                            
00018E66                            Obj73_FlameMain:			; XREF: Obj73_Index
00018E66 117C 0007 001C             		move.b	#7,$1C(a0)
00018E6C 2268 0034                  		movea.l	$34(a0),a1
00018E70 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018E76 6D00                       		blt.s	loc_1862A
00018E78 117C 000B 001C             		move.b	#$B,$1C(a0)
00018E7E 4A28 0001                  		tst.b	1(a0)
00018E82 6A00                       		bpl.s	Obj73_FlameDel
00018E84 6000                       		bra.s	loc_18636
00018E86                            ; ===========================================================================
00018E86                            
00018E86                            loc_1862A:
00018E86 4A69 0010                  		tst.w	$10(a1)
00018E8A 6700                       		beq.s	loc_18636
00018E8C 117C 0008 001C             		move.b	#8,$1C(a0)
00018E92                            
00018E92                            loc_18636:
00018E92 6000                       		bra.s	Obj73_Display
00018E94                            ; ===========================================================================
00018E94                            
00018E94                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018E94 4EF9 0000 DD9A             		jmp	DeleteObject
00018E9A                            ; ===========================================================================
00018E9A                            
00018E9A                            Obj73_Display:
00018E9A 43F9 0001 856A             		lea	(Ani_Eggman).l,a1
00018EA0 4EB9 0000 AE1E             		jsr	AnimateSprite
00018EA6                            
00018EA6                            loc_1864A:
00018EA6 2268 0034                  		movea.l	$34(a0),a1
00018EAA 3169 0008 0008             		move.w	8(a1),8(a0)
00018EB0 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018EB6 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018EBC 7003                       		moveq	#3,d0
00018EBE C028 0022                  		and.b	$22(a0),d0
00018EC2 0228 00FC 0001             		andi.b	#-4,1(a0)
00018EC8 8128 0001                  		or.b	d0,1(a0)
00018ECC 4EF9 0000 DD5E             		jmp	DisplaySprite
00018ED2                            ; ===========================================================================
00018ED2                            
00018ED2                            Obj73_TubeMain:				; XREF: Obj73_Index
00018ED2 2268 0034                  		movea.l	$34(a0),a1
00018ED6 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018EDC 6600                       		bne.s	loc_18688
00018EDE 4A28 0001                  		tst.b	1(a0)
00018EE2 6A00                       		bpl.s	Obj73_TubeDel
00018EE4                            
00018EE4                            loc_18688:
00018EE4 217C 0001 8696 0004        		move.l	#Map_BossItems,4(a0)
00018EEC 317C 246C 0002             		move.w	#$246C,2(a0)
00018EF2 117C 0004 001A             		move.b	#4,$1A(a0)
00018EF8 60AC                       		bra.s	loc_1864A
00018EFA                            ; ===========================================================================
00018EFA                            
00018EFA                            Obj73_TubeDel:
00018EFA 4EF9 0000 DD9A             		jmp	DeleteObject
00018F00                            ; ===========================================================================
00018F00                            ; ---------------------------------------------------------------------------
00018F00                            ; Object 74 - lava that	Eggman drops (MZ)
00018F00                            ; ---------------------------------------------------------------------------
00018F00                            
00018F00                            Obj74:					; XREF: Obj_Index
00018F00 7000                       		moveq	#0,d0
00018F02 1028 0024                  		move.b	$24(a0),d0
00018F06 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018F0A 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018F0E 4EF9 0000 DD5E             		jmp	DisplaySprite
00018F14                            ; ===========================================================================
00018F14 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018F16 0000                       		dc.w Obj74_Action-Obj74_Index
00018F18 0000                       		dc.w loc_18886-Obj74_Index
00018F1A 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018F1C                            ; ===========================================================================
00018F1C                            
00018F1C                            Obj74_Main:				; XREF: Obj74_Index
00018F1C 117C 0008 0016             		move.b	#8,$16(a0)
00018F22 117C 0008 0017             		move.b	#8,$17(a0)
00018F28 217C 0000 BA1C 0004        		move.l	#Map_obj14,4(a0)
00018F30 317C 0345 0002             		move.w	#$345,2(a0)
00018F36 117C 0004 0001             		move.b	#4,1(a0)
00018F3C 117C 0005 0018             		move.b	#5,$18(a0)
00018F42 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018F48 117C 0008 0019             		move.b	#8,$19(a0)
00018F4E 5428 0024                  		addq.b	#2,$24(a0)
00018F52 4A28 0028                  		tst.b	$28(a0)
00018F56 6600                       		bne.s	loc_1870A
00018F58 117C 008B 0020             		move.b	#$8B,$20(a0)
00018F5E 5428 0024                  		addq.b	#2,$24(a0)
00018F62 6000 0000                  		bra.w	loc_18886
00018F66                            ; ===========================================================================
00018F66                            
00018F66                            loc_1870A:
00018F66 117C 001E 0029             		move.b	#$1E,$29(a0)
00018F6C 303C 00AE                  		move.w	#$AE,d0
00018F70 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava sound
00018F76                            
00018F76                            Obj74_Action:				; XREF: Obj74_Index
00018F76 7000                       		moveq	#0,d0
00018F78 1028 0025                  		move.b	$25(a0),d0
00018F7C 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018F80 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018F84 4EB9 0000 DD38             		jsr	SpeedToPos
00018F8A 43F9 0000 EC18             		lea	(Ani_obj14).l,a1
00018F90 4EB9 0000 AE1E             		jsr	AnimateSprite
00018F96 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018F9C 6200                       		bhi.s	Obj74_Delete
00018F9E 4E75                       		rts	
00018FA0                            ; ===========================================================================
00018FA0                            
00018FA0                            Obj74_Delete:
00018FA0 4EF9 0000 DD9A             		jmp	DeleteObject
00018FA6                            ; ===========================================================================
00018FA6 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018FA8 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018FAA 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018FAC 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018FAE                            ; ===========================================================================
00018FAE                            
00018FAE                            Obj74_Drop:				; XREF: Obj74_Index2
00018FAE 08E8 0001 0022             		bset	#1,$22(a0)
00018FB4 5328 0029                  		subq.b	#1,$29(a0)
00018FB8 6A00                       		bpl.s	locret_18780
00018FBA 117C 008B 0020             		move.b	#$8B,$20(a0)
00018FC0 4228 0028                  		clr.b	$28(a0)
00018FC4 0668 0018 0012             		addi.w	#$18,$12(a0)
00018FCA 08A8 0001 0022             		bclr	#1,$22(a0)
00018FD0 6100 C686                  		bsr.w	ObjHitFloor
00018FD4 4A41                       		tst.w	d1
00018FD6 6A00                       		bpl.s	locret_18780
00018FD8 5428 0025                  		addq.b	#2,$25(a0)
00018FDC                            
00018FDC                            locret_18780:
00018FDC 4E75                       		rts	
00018FDE                            ; ===========================================================================
00018FDE                            
00018FDE                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018FDE 5568 000C                  		subq.w	#2,$C(a0)
00018FE2 08E8 0007 0002             		bset	#7,2(a0)
00018FE8 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018FEE 4268 0012                  		clr.w	$12(a0)
00018FF2 3168 0008 0030             		move.w	8(a0),$30(a0)
00018FF8 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018FFE 117C 0003 0029             		move.b	#3,$29(a0)
00019004 4EB9 0000 E1FA             		jsr	SingleObjLoad2
0001900A 6600                       		bne.s	loc_187CA
0001900C 47D1                       		lea	(a1),a3
0001900E 45D0                       		lea	(a0),a2
00019010 7003                       		moveq	#3,d0
00019012                            
00019012                            Obj74_Loop:
00019012 26DA                       		move.l	(a2)+,(a3)+
00019014 26DA                       		move.l	(a2)+,(a3)+
00019016 26DA                       		move.l	(a2)+,(a3)+
00019018 26DA                       		move.l	(a2)+,(a3)+
0001901A 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001901E                            
0001901E 4469 0010                  		neg.w	$10(a1)
00019022 5429 0025                  		addq.b	#2,$25(a1)
00019026                            
00019026                            loc_187CA:
00019026 5428 0025                  		addq.b	#2,$25(a0)
0001902A 4E75                       		rts	
0001902C                            
0001902C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001902C                            
0001902C                            
0001902C                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001902C 4EB9 0000 E1FA             		jsr	SingleObjLoad2
00019032 6600                       		bne.s	locret_187EE
00019034 3368 0008 0008             		move.w	8(a0),8(a1)
0001903A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019040 12BC 0074                  		move.b	#$74,(a1)
00019044 337C 0067 0028             		move.w	#$67,$28(a1)
0001904A                            
0001904A                            locret_187EE:
0001904A 4E75                       		rts	
0001904C                            ; End of function Obj74_Duplicate2
0001904C                            
0001904C                            ; ===========================================================================
0001904C                            
0001904C                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001904C 6100 C60A                  		bsr.w	ObjHitFloor
00019050 4A41                       		tst.w	d1
00019052 6A00                       		bpl.s	loc_18826
00019054 3028 0008                  		move.w	8(a0),d0
00019058 0C40 1940                  		cmpi.w	#$1940,d0
0001905C 6E00                       		bgt.s	loc_1882C
0001905E 3228 0030                  		move.w	$30(a0),d1
00019062 B240                       		cmp.w	d0,d1
00019064 6700                       		beq.s	loc_1881E
00019066 0240 0010                  		andi.w	#$10,d0
0001906A 0241 0010                  		andi.w	#$10,d1
0001906E B240                       		cmp.w	d0,d1
00019070 6700                       		beq.s	loc_1881E
00019072 61B8                       		bsr.s	Obj74_Duplicate2
00019074 3168 0008 0032             		move.w	8(a0),$32(a0)
0001907A                            
0001907A                            loc_1881E:
0001907A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019080 4E75                       		rts	
00019082                            ; ===========================================================================
00019082                            
00019082                            loc_18826:
00019082 5428 0025                  		addq.b	#2,$25(a0)
00019086 4E75                       		rts	
00019088                            ; ===========================================================================
00019088                            
00019088                            loc_1882C:
00019088 5428 0024                  		addq.b	#2,$24(a0)
0001908C 4E75                       		rts	
0001908E                            ; ===========================================================================
0001908E                            
0001908E                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001908E 08A8 0001 0022             		bclr	#1,$22(a0)
00019094 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001909A 3028 0008                  		move.w	8(a0),d0
0001909E 9068 0032                  		sub.w	$32(a0),d0
000190A2 6A00                       		bpl.s	loc_1884A
000190A4 4440                       		neg.w	d0
000190A6                            
000190A6                            loc_1884A:
000190A6 0C40 0012                  		cmpi.w	#$12,d0
000190AA 6600                       		bne.s	loc_18856
000190AC 08A8 0007 0002             		bclr	#7,2(a0)
000190B2                            
000190B2                            loc_18856:
000190B2 6100 C5A4                  		bsr.w	ObjHitFloor
000190B6 4A41                       		tst.w	d1
000190B8 6A00                       		bpl.s	locret_1887E
000190BA 5328 0029                  		subq.b	#1,$29(a0)
000190BE 6700                       		beq.s	Obj74_Delete2
000190C0 4268 0012                  		clr.w	$12(a0)
000190C4 3168 0032 0008             		move.w	$32(a0),8(a0)
000190CA 3168 0038 000C             		move.w	$38(a0),$C(a0)
000190D0 08E8 0007 0002             		bset	#7,2(a0)
000190D6 5528 0025                  		subq.b	#2,$25(a0)
000190DA                            
000190DA                            locret_1887E:
000190DA 4E75                       		rts	
000190DC                            ; ===========================================================================
000190DC                            
000190DC                            Obj74_Delete2:
000190DC 4EF9 0000 DD9A             		jmp	DeleteObject
000190E2                            ; ===========================================================================
000190E2                            
000190E2                            loc_18886:				; XREF: Obj74_Index
000190E2 08E8 0007 0002             		bset	#7,2(a0)
000190E8 5328 0029                  		subq.b	#1,$29(a0)
000190EC 6600                       		bne.s	Obj74_Animate
000190EE 117C 0001 001C             		move.b	#1,$1C(a0)
000190F4 5968 000C                  		subq.w	#4,$C(a0)
000190F8 4228 0020                  		clr.b	$20(a0)
000190FC                            
000190FC                            Obj74_Animate:
000190FC 43F9 0000 EC18             		lea	(Ani_obj14).l,a1
00019102 4EF9 0000 AE1E             		jmp	AnimateSprite
00019108                            ; ===========================================================================
00019108                            
00019108                            Obj74_Delete3:				; XREF: Obj74_Index
00019108 4EF9 0000 DD9A             		jmp	DeleteObject
0001910E                            ; ===========================================================================
0001910E                            
0001910E                            Obj7A_Delete:
0001910E 4EF9 0000 DD9A             		jmp	DeleteObject
00019114                            ; ===========================================================================
00019114                            ; ---------------------------------------------------------------------------
00019114                            ; Object 7A - Eggman (SLZ)
00019114                            ; ---------------------------------------------------------------------------
00019114                            
00019114                            Obj7A:					; XREF: Obj_Index
00019114 7000                       		moveq	#0,d0
00019116 1028 0024                  		move.b	$24(a0),d0
0001911A 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001911E 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019122                            ; ===========================================================================
00019122 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019124 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00019126 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00019128 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001912A 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001912C                            
0001912C 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001912F 0401 04                    		dc.b 4,	1, 4
00019132 0607 04                    		dc.b 6,	7, 4
00019135 0800 03                    		dc.b 8,	0, 3
00019138                            ; ===========================================================================
00019138                            
00019138                            Obj7A_Main:				; XREF: Obj7A_Index
00019138 317C 2188 0008             		move.w	#$2188,8(a0)
0001913E 317C 0228 000C             		move.w	#$228,$C(a0)
00019144 3168 0008 0030             		move.w	8(a0),$30(a0)
0001914A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019150 117C 000F 0020             		move.b	#$F,$20(a0)
00019156 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001915C 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019160 2248                       		movea.l	a0,a1
00019162 7203                       		moveq	#3,d1
00019164 6000                       		bra.s	Obj7A_LoadBoss
00019166                            ; ===========================================================================
00019166                            
00019166                            Obj7A_Loop:
00019166 4EB9 0000 E1FA             		jsr	SingleObjLoad2
0001916C 6600                       		bne.s	loc_1895C
0001916E 12BC 007A                  		move.b	#$7A,0(a1)
00019172 3368 0008 0008             		move.w	8(a0),8(a1)
00019178 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001917E                            
0001917E                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001917E 08A8 0000 0022             		bclr	#0,$22(a0)
00019184 4229 0025                  		clr.b	$25(a1)
00019188 135A 0024                  		move.b	(a2)+,$24(a1)
0001918C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019190 135A 0018                  		move.b	(a2)+,$18(a1)
00019194 237C 0001 85CE 0004        		move.l	#Map_Eggman,4(a1)
0001919C 337C 0400 0002             		move.w	#$400,2(a1)
000191A2 137C 0004 0001             		move.b	#4,1(a1)
000191A8 137C 0020 0019             		move.b	#$20,$19(a1)
000191AE 2348 0034                  		move.l	a0,$34(a1)
000191B2 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
000191B6                            
000191B6                            loc_1895C:
000191B6 43F8 D040                  		lea	($FFFFD040).w,a1
000191BA 45E8 002A                  		lea	$2A(a0),a2
000191BE 705E                       		moveq	#$5E,d0
000191C0 723E                       		moveq	#$3E,d1
000191C2                            
000191C2                            loc_18968:
000191C2 B011                       		cmp.b	(a1),d0
000191C4 6600                       		bne.s	loc_18974
000191C6 4A29 0028                  		tst.b	$28(a1)
000191CA 6700                       		beq.s	loc_18974
000191CC 34C9                       		move.w	a1,(a2)+
000191CE                            
000191CE                            loc_18974:
000191CE D2FC 0040                  		adda.w	#$40,a1
000191D2 51C9 FFEE                  		dbf	d1,loc_18968
000191D6                            
000191D6                            Obj7A_ShipMain:				; XREF: Obj7A_Index
000191D6 7000                       		moveq	#0,d0
000191D8 1028 0025                  		move.b	$25(a0),d0
000191DC 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
000191E0 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000191E4 43F9 0001 856A             		lea	(Ani_Eggman).l,a1
000191EA 4EB9 0000 AE1E             		jsr	AnimateSprite
000191F0 7003                       		moveq	#3,d0
000191F2 C028 0022                  		and.b	$22(a0),d0
000191F6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000191FC 8128 0001                  		or.b	d0,1(a0)
00019200 4EF9 0000 DD5E             		jmp	DisplaySprite
00019206                            ; ===========================================================================
00019206 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00019208 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001920A 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001920C 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001920E 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019210 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019212                            ; ===========================================================================
00019212                            
00019212                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019212 317C FF00 0010             		move.w	#-$100,$10(a0)
00019218 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001921E 6400                       		bcc.s	loc_189CA
00019220 5428 0025                  		addq.b	#2,$25(a0)
00019224                            
00019224                            loc_189CA:
00019224 6100 EF02                  		bsr.w	BossMove
00019228 1028 003F                  		move.b	$3F(a0),d0
0001922C 5428 003F                  		addq.b	#2,$3F(a0)
00019230 4EB9 0000 2C64             		jsr	(CalcSine).l
00019236 EC40                       		asr.w	#6,d0
00019238 D068 0038                  		add.w	$38(a0),d0
0001923C 3140 000C                  		move.w	d0,$C(a0)
00019240 3168 0030 0008             		move.w	$30(a0),8(a0)
00019246 6000                       		bra.s	loc_189FE
00019248                            ; ===========================================================================
00019248                            
00019248                            loc_189EE:
00019248 6100 EEDE                  		bsr.w	BossMove
0001924C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019252 3168 0030 0008             		move.w	$30(a0),8(a0)
00019258                            
00019258                            loc_189FE:
00019258 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001925E 6400                       		bcc.s	locret_18A44
00019260 4A28 0022                  		tst.b	$22(a0)
00019264 6B00                       		bmi.s	loc_18A46
00019266 4A28 0020                  		tst.b	$20(a0)
0001926A 6600                       		bne.s	locret_18A44
0001926C 4A28 003E                  		tst.b	$3E(a0)
00019270 6600                       		bne.s	loc_18A28
00019272 117C 0020 003E             		move.b	#$20,$3E(a0)
00019278 303C 00AC                  		move.w	#$AC,d0
0001927C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019282                            
00019282                            loc_18A28:
00019282 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019286 7000                       		moveq	#0,d0
00019288 4A51                       		tst.w	(a1)
0001928A 6600                       		bne.s	loc_18A36
0001928C 303C 0EEE                  		move.w	#$EEE,d0
00019290                            
00019290                            loc_18A36:
00019290 3280                       		move.w	d0,(a1)
00019292 5328 003E                  		subq.b	#1,$3E(a0)
00019296 6600                       		bne.s	locret_18A44
00019298 117C 000F 0020             		move.b	#$F,$20(a0)
0001929E                            
0001929E                            locret_18A44:
0001929E 4E75                       		rts	
000192A0                            ; ===========================================================================
000192A0                            
000192A0                            loc_18A46:
000192A0 7064                       		moveq	#100,d0
000192A2 6100 0000                  		bsr.w	AddPoints
000192A6 117C 0006 0025             		move.b	#6,$25(a0)
000192AC 117C 0078 003C             		move.b	#$78,$3C(a0)
000192B2 4268 0010                  		clr.w	$10(a0)
000192B6 4E75                       		rts	
000192B8                            ; ===========================================================================
000192B8                            
000192B8                            loc_18A5E:				; XREF: Obj7A_ShipIndex
000192B8 3028 0030                  		move.w	$30(a0),d0
000192BC 317C 0200 0010             		move.w	#$200,$10(a0)
000192C2 0828 0000 0022             		btst	#0,$22(a0)
000192C8 6600                       		bne.s	loc_18A7C
000192CA 4468 0010                  		neg.w	$10(a0)
000192CE 0C40 2008                  		cmpi.w	#$2008,d0
000192D2 6E00                       		bgt.s	loc_18A88
000192D4 6000                       		bra.s	loc_18A82
000192D6                            ; ===========================================================================
000192D6                            
000192D6                            loc_18A7C:
000192D6 0C40 2138                  		cmpi.w	#$2138,d0
000192DA 6D00                       		blt.s	loc_18A88
000192DC                            
000192DC                            loc_18A82:
000192DC 0868 0000 0022             		bchg	#0,$22(a0)
000192E2                            
000192E2                            loc_18A88:
000192E2 3028 0008                  		move.w	8(a0),d0
000192E6 72FF                       		moveq	#-1,d1
000192E8 7402                       		moveq	#2,d2
000192EA 45E8 002A                  		lea	$2A(a0),a2
000192EE 7828                       		moveq	#$28,d4
000192F0 4A68 0010                  		tst.w	$10(a0)
000192F4 6A00                       		bpl.s	loc_18A9E
000192F6 4444                       		neg.w	d4
000192F8                            
000192F8                            loc_18A9E:
000192F8 321A                       		move.w	(a2)+,d1
000192FA 2641                       		movea.l	d1,a3
000192FC 082B 0003 0022             		btst	#3,$22(a3)
00019302 6600                       		bne.s	loc_18AB4
00019304 362B 0008                  		move.w	8(a3),d3
00019308 D644                       		add.w	d4,d3
0001930A 9640                       		sub.w	d0,d3
0001930C 6700                       		beq.s	loc_18AC0
0001930E                            
0001930E                            loc_18AB4:
0001930E 51CA FFE8                  		dbf	d2,loc_18A9E
00019312                            
00019312 1142 0028                  		move.b	d2,$28(a0)
00019316 6000 FF0C                  		bra.w	loc_189CA
0001931A                            ; ===========================================================================
0001931A                            
0001931A                            loc_18AC0:
0001931A 1142 0028                  		move.b	d2,$28(a0)
0001931E 5428 0025                  		addq.b	#2,$25(a0)
00019322 117C 0028 003C             		move.b	#$28,$3C(a0)
00019328 6000 FEFA                  		bra.w	loc_189CA
0001932C                            ; ===========================================================================
0001932C                            
0001932C                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001932C 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019332 6600                       		bne.s	loc_18B36
00019334 70FF                       		moveq	#-1,d0
00019336 1028 0028                  		move.b	$28(a0),d0
0001933A 4880                       		ext.w	d0
0001933C 6B00                       		bmi.s	loc_18B40
0001933E 5540                       		subq.w	#2,d0
00019340 4440                       		neg.w	d0
00019342 D040                       		add.w	d0,d0
00019344 43E8 002A                  		lea	$2A(a0),a1
00019348 3031 0000                  		move.w	(a1,d0.w),d0
0001934C 2440                       		movea.l	d0,a2
0001934E 43F8 D040                  		lea	($FFFFD040).w,a1
00019352 723E                       		moveq	#$3E,d1
00019354                            
00019354                            loc_18AFA:
00019354 B0A9 003C                  		cmp.l	$3C(a1),d0
00019358 6700                       		beq.s	loc_18B40
0001935A D2FC 0040                  		adda.w	#$40,a1
0001935E 51C9 FFF4                  		dbf	d1,loc_18AFA
00019362                            
00019362 2F08                       		move.l	a0,-(sp)
00019364 41D2                       		lea	(a2),a0
00019366 4EB9 0000 E1FA             		jsr	SingleObjLoad2
0001936C 205F                       		movea.l	(sp)+,a0
0001936E 6600                       		bne.s	loc_18B40
00019370 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019374 3368 0008 0008             		move.w	8(a0),8(a1)
0001937A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019380 0669 0020 000C             		addi.w	#$20,$C(a1)
00019386 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001938C 234A 003C                  		move.l	a2,$3C(a1)
00019390                            
00019390                            loc_18B36:
00019390 5328 003C                  		subq.b	#1,$3C(a0)
00019394 6700                       		beq.s	loc_18B40
00019396 6000 FEC0                  		bra.w	loc_189FE
0001939A                            ; ===========================================================================
0001939A                            
0001939A                            loc_18B40:
0001939A 5528 0025                  		subq.b	#2,$25(a0)
0001939E 6000 FE84                  		bra.w	loc_189CA
000193A2                            ; ===========================================================================
000193A2                            
000193A2                            loc_18B48:				; XREF: Obj7A_ShipIndex
000193A2 5328 003C                  		subq.b	#1,$3C(a0)
000193A6 6B00                       		bmi.s	loc_18B52
000193A8 6000 ED3C                  		bra.w	BossDefeated
000193AC                            ; ===========================================================================
000193AC                            
000193AC                            loc_18B52:
000193AC 5428 0025                  		addq.b	#2,$25(a0)
000193B0 4268 0012                  		clr.w	$12(a0)
000193B4 08E8 0000 0022             		bset	#0,$22(a0)
000193BA 08A8 0007 0022             		bclr	#7,$22(a0)
000193C0 4268 0010                  		clr.w	$10(a0)
000193C4 117C 00E8 003C             		move.b	#-$18,$3C(a0)
000193CA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000193CE 6600                       		bne.s	loc_18B7C
000193D0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000193D6                            
000193D6                            loc_18B7C:
000193D6 6000 FE80                  		bra.w	loc_189FE
000193DA                            ; ===========================================================================
000193DA                            
000193DA                            loc_18B80:				; XREF: Obj7A_ShipIndex
000193DA 5228 003C                  		addq.b	#1,$3C(a0)
000193DE 6700                       		beq.s	loc_18B90
000193E0 6A00                       		bpl.s	loc_18B96
000193E2 0668 0018 0012             		addi.w	#$18,$12(a0)
000193E8 6000                       		bra.s	loc_18BC2
000193EA                            ; ===========================================================================
000193EA                            
000193EA                            loc_18B90:
000193EA 4268 0012                  		clr.w	$12(a0)
000193EE 6000                       		bra.s	loc_18BC2
000193F0                            ; ===========================================================================
000193F0                            
000193F0                            loc_18B96:
000193F0 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000193F6 6500                       		bcs.s	loc_18BAE
000193F8 6700                       		beq.s	loc_18BB4
000193FA 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019400 6500                       		bcs.s	loc_18BC2
00019402 5428 0025                  		addq.b	#2,$25(a0)
00019406 6000                       		bra.s	loc_18BC2
00019408                            ; ===========================================================================
00019408                            
00019408                            loc_18BAE:
00019408 5168 0012                  		subq.w	#8,$12(a0)
0001940C 6000                       		bra.s	loc_18BC2
0001940E                            ; ===========================================================================
0001940E                            
0001940E                            loc_18BB4:
0001940E 4268 0012                  		clr.w	$12(a0)
00019412 303C 0084                  		move.w	#$84,d0
00019416 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SLZ music
0001941C                            
0001941C                            loc_18BC2:
0001941C 6000 FE2A                  		bra.w	loc_189EE
00019420                            ; ===========================================================================
00019420                            
00019420                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019420 317C 0400 0010             		move.w	#$400,$10(a0)
00019426 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001942C 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019432 6400                       		bcc.s	loc_18BE0
00019434 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019438 6000                       		bra.s	loc_18BE8
0001943A                            ; ===========================================================================
0001943A                            
0001943A                            loc_18BE0:
0001943A 4A28 0001                  		tst.b	1(a0)
0001943E 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019442                            
00019442                            loc_18BE8:
00019442 6100 ECE4                  		bsr.w	BossMove
00019446 6000 FDDC                  		bra.w	loc_189CA
0001944A                            ; ===========================================================================
0001944A                            
0001944A                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001944A 7000                       		moveq	#0,d0
0001944C 7201                       		moveq	#1,d1
0001944E 2268 0034                  		movea.l	$34(a0),a1
00019452 1029 0025                  		move.b	$25(a1),d0
00019456 0C00 0006                  		cmpi.b	#6,d0
0001945A 6B00                       		bmi.s	loc_18C06
0001945C 720A                       		moveq	#$A,d1
0001945E 6000                       		bra.s	loc_18C1A
00019460                            ; ===========================================================================
00019460                            
00019460                            loc_18C06:
00019460 4A29 0020                  		tst.b	$20(a1)
00019464 6600                       		bne.s	loc_18C10
00019466 7205                       		moveq	#5,d1
00019468 6000                       		bra.s	loc_18C1A
0001946A                            ; ===========================================================================
0001946A                            
0001946A                            loc_18C10:
0001946A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019470 6500                       		bcs.s	loc_18C1A
00019472 7204                       		moveq	#4,d1
00019474                            
00019474                            loc_18C1A:
00019474 1141 001C                  		move.b	d1,$1C(a0)
00019478 0C00 000A                  		cmpi.b	#$A,d0
0001947C 6600                       		bne.s	loc_18C32
0001947E 117C 0006 001C             		move.b	#6,$1C(a0)
00019484 4A28 0001                  		tst.b	1(a0)
00019488 6A00 FC84                  		bpl.w	Obj7A_Delete
0001948C                            
0001948C                            loc_18C32:
0001948C 6000                       		bra.s	loc_18C6C
0001948E                            ; ===========================================================================
0001948E                            
0001948E                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001948E 117C 0008 001C             		move.b	#8,$1C(a0)
00019494 2268 0034                  		movea.l	$34(a0),a1
00019498 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001949E 6600                       		bne.s	loc_18C56
000194A0 4A28 0001                  		tst.b	1(a0)
000194A4 6A00 FC68                  		bpl.w	Obj7A_Delete
000194A8 117C 000B 001C             		move.b	#$B,$1C(a0)
000194AE 6000                       		bra.s	loc_18C6C
000194B0                            ; ===========================================================================
000194B0                            
000194B0                            loc_18C56:
000194B0 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000194B6 6E00                       		bgt.s	loc_18C6C
000194B8 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000194BE 6D00                       		blt.s	loc_18C6C
000194C0 117C 0007 001C             		move.b	#7,$1C(a0)
000194C6                            
000194C6                            loc_18C6C:
000194C6 43F9 0001 856A             		lea	(Ani_Eggman).l,a1
000194CC 4EB9 0000 AE1E             		jsr	AnimateSprite
000194D2                            
000194D2                            loc_18C78:
000194D2 2268 0034                  		movea.l	$34(a0),a1
000194D6 3169 0008 0008             		move.w	8(a1),8(a0)
000194DC 3169 000C 000C             		move.w	$C(a1),$C(a0)
000194E2 1169 0022 0022             		move.b	$22(a1),$22(a0)
000194E8 7003                       		moveq	#3,d0
000194EA C028 0022                  		and.b	$22(a0),d0
000194EE 0228 00FC 0001             		andi.b	#-4,1(a0)
000194F4 8128 0001                  		or.b	d0,1(a0)
000194F8 4EF9 0000 DD5E             		jmp	DisplaySprite
000194FE                            ; ===========================================================================
000194FE                            
000194FE                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000194FE 2268 0034                  		movea.l	$34(a0),a1
00019502 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019508 6600                       		bne.s	loc_18CB8
0001950A 4A28 0001                  		tst.b	1(a0)
0001950E 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019512                            
00019512                            loc_18CB8:
00019512 217C 0001 8696 0004        		move.l	#Map_BossItems,4(a0)
0001951A 317C 246C 0002             		move.w	#$246C,2(a0)
00019520 117C 0003 001A             		move.b	#3,$1A(a0)
00019526 60AA                       		bra.s	loc_18C78
00019528                            ; ===========================================================================
00019528                            ; ---------------------------------------------------------------------------
00019528                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019528                            ; ---------------------------------------------------------------------------
00019528                            
00019528                            Obj7B:					; XREF: Obj_Index
00019528 7000                       		moveq	#0,d0
0001952A 1028 0024                  		move.b	$24(a0),d0
0001952E 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019532 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019536 3028 0030                  		move.w	$30(a0),d0
0001953A 0240 FF80                  		andi.w	#$FF80,d0
0001953E 3238 F700                  		move.w	($FFFFF700).w,d1
00019542 0441 0080                  		subi.w	#$80,d1
00019546 0241 FF80                  		andi.w	#$FF80,d1
0001954A 9041                       		sub.w	d1,d0
0001954C 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019550 0C40 0280                  		cmpi.w	#$280,d0
00019554 6200 FBB8                  		bhi.w	Obj7A_Delete
00019558 4EF9 0000 DD5E             		jmp	DisplaySprite
0001955E                            ; ===========================================================================
0001955E 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019560 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019562 0000                       		dc.w loc_18DC6-Obj7B_Index
00019564 0000                       		dc.w loc_18EAA-Obj7B_Index
00019566 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019568 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001956A                            ; ===========================================================================
0001956A                            
0001956A                            Obj7B_Main:				; XREF: Obj7B_Index
0001956A 217C 0001 2124 0004        		move.l	#Map_obj5Ea,4(a0)
00019572 317C 0518 0002             		move.w	#$518,2(a0)
00019578 117C 0001 001A             		move.b	#1,$1A(a0)
0001957E 0028 0004 0001             		ori.b	#4,1(a0)
00019584 117C 0004 0018             		move.b	#4,$18(a0)
0001958A 117C 008B 0020             		move.b	#$8B,$20(a0)
00019590 117C 000C 0019             		move.b	#$C,$19(a0)
00019596 2268 003C                  		movea.l	$3C(a0),a1
0001959A 3169 0008 0030             		move.w	8(a1),$30(a0)
000195A0 3169 000C 0034             		move.w	$C(a1),$34(a0)
000195A6 08E8 0000 0022             		bset	#0,$22(a0)
000195AC 3028 0008                  		move.w	8(a0),d0
000195B0 B069 0008                  		cmp.w	8(a1),d0
000195B4 6E00                       		bgt.s	loc_18D68
000195B6 08A8 0000 0022             		bclr	#0,$22(a0)
000195BC 117C 0002 003A             		move.b	#2,$3A(a0)
000195C2                            
000195C2                            loc_18D68:
000195C2 5428 0024                  		addq.b	#2,$24(a0)
000195C6                            
000195C6                            Obj7B_Fall:				; XREF: Obj7B_Index
000195C6 4EB9 0000 DD0C             		jsr	ObjectFall
000195CC 2268 003C                  		movea.l	$3C(a0),a1
000195D0 45F9 0000 0000             		lea	(word_19018).l,a2
000195D6 7000                       		moveq	#0,d0
000195D8 1029 001A                  		move.b	$1A(a1),d0
000195DC 3228 0008                  		move.w	8(a0),d1
000195E0 9268 0030                  		sub.w	$30(a0),d1
000195E4 6400                       		bcc.s	loc_18D8E
000195E6 5440                       		addq.w	#2,d0
000195E8                            
000195E8                            loc_18D8E:
000195E8 D040                       		add.w	d0,d0
000195EA 3228 0034                  		move.w	$34(a0),d1
000195EE D272 0000                  		add.w	(a2,d0.w),d1
000195F2 B268 000C                  		cmp.w	$C(a0),d1
000195F6 6E00                       		bgt.s	locret_18DC4
000195F8 2268 003C                  		movea.l	$3C(a0),a1
000195FC 7202                       		moveq	#2,d1
000195FE 0828 0000 0022             		btst	#0,$22(a0)
00019604 6700                       		beq.s	loc_18DAE
00019606 7200                       		moveq	#0,d1
00019608                            
00019608                            loc_18DAE:
00019608 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001960E 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019614 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001961A 6000 0000                  		bra.w	loc_18FA2
0001961E                            ; ===========================================================================
0001961E                            
0001961E                            locret_18DC4:
0001961E 4E75                       		rts	
00019620                            ; ===========================================================================
00019620                            
00019620                            loc_18DC6:				; XREF: Obj7B_Index
00019620 2268 003C                  		movea.l	$3C(a0),a1
00019624 7000                       		moveq	#0,d0
00019626 1028 003A                  		move.b	$3A(a0),d0
0001962A 9029 003A                  		sub.b	$3A(a1),d0
0001962E 6700                       		beq.s	loc_18E2A
00019630 6400                       		bcc.s	loc_18DDA
00019632 4400                       		neg.b	d0
00019634                            
00019634                            loc_18DDA:
00019634 323C F7E8                  		move.w	#-$818,d1
00019638 343C FEEC                  		move.w	#-$114,d2
0001963C 0C00 0001                  		cmpi.b	#1,d0
00019640 6700                       		beq.s	loc_18E00
00019642 323C F6A0                  		move.w	#-$960,d1
00019646 343C FF0C                  		move.w	#-$F4,d2
0001964A 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019650 6D00                       		blt.s	loc_18E00
00019652 323C F5E0                  		move.w	#-$A20,d1
00019656 343C FF80                  		move.w	#-$80,d2
0001965A                            
0001965A                            loc_18E00:
0001965A 3141 0012                  		move.w	d1,$12(a0)
0001965E 3142 0010                  		move.w	d2,$10(a0)
00019662 3028 0008                  		move.w	8(a0),d0
00019666 9068 0030                  		sub.w	$30(a0),d0
0001966A 6400                       		bcc.s	loc_18E16
0001966C 4468 0010                  		neg.w	$10(a0)
00019670                            
00019670                            loc_18E16:
00019670 117C 0001 001A             		move.b	#1,$1A(a0)
00019676 317C 0020 0028             		move.w	#$20,$28(a0)
0001967C 5428 0024                  		addq.b	#2,$24(a0)
00019680 6000 0000                  		bra.w	loc_18EAA
00019684                            ; ===========================================================================
00019684                            
00019684                            loc_18E2A:				; XREF: loc_18DC6
00019684 45F9 0000 0000             		lea	(word_19018).l,a2
0001968A 7000                       		moveq	#0,d0
0001968C 1029 001A                  		move.b	$1A(a1),d0
00019690 343C 0028                  		move.w	#$28,d2
00019694 3228 0008                  		move.w	8(a0),d1
00019698 9268 0030                  		sub.w	$30(a0),d1
0001969C 6400                       		bcc.s	loc_18E48
0001969E 4442                       		neg.w	d2
000196A0 5440                       		addq.w	#2,d0
000196A2                            
000196A2                            loc_18E48:
000196A2 D040                       		add.w	d0,d0
000196A4 3228 0034                  		move.w	$34(a0),d1
000196A8 D272 0000                  		add.w	(a2,d0.w),d1
000196AC 3141 000C                  		move.w	d1,$C(a0)
000196B0 D468 0030                  		add.w	$30(a0),d2
000196B4 3142 0008                  		move.w	d2,8(a0)
000196B8 4268 000E                  		clr.w	$E(a0)
000196BC 4268 000A                  		clr.w	$A(a0)
000196C0 5368 0028                  		subq.w	#1,$28(a0)
000196C4 6600                       		bne.s	loc_18E7A
000196C6 317C 0020 0028             		move.w	#$20,$28(a0)
000196CC 117C 0008 0024             		move.b	#8,$24(a0)
000196D2 4E75                       		rts	
000196D4                            ; ===========================================================================
000196D4                            
000196D4                            loc_18E7A:
000196D4 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
000196DA 6600                       		bne.s	loc_18E88
000196DC 117C 0005 001F             		move.b	#5,$1F(a0)
000196E2                            
000196E2                            loc_18E88:
000196E2 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
000196E8 6600                       		bne.s	loc_18E96
000196EA 117C 0002 001F             		move.b	#2,$1F(a0)
000196F0                            
000196F0                            loc_18E96:
000196F0 5328 001E                  		subq.b	#1,$1E(a0)
000196F4 6E00                       		bgt.s	locret_18EA8
000196F6 0868 0000 001A             		bchg	#0,$1A(a0)
000196FC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019702                            
00019702                            locret_18EA8:
00019702 4E75                       		rts	
00019704                            ; ===========================================================================
00019704                            
00019704                            loc_18EAA:				; XREF: Obj7B_Index
00019704 43F8 D040                  		lea	($FFFFD040).w,a1
00019708 707A                       		moveq	#$7A,d0
0001970A 7240                       		moveq	#$40,d1
0001970C 743E                       		moveq	#$3E,d2
0001970E                            
0001970E                            loc_18EB4:
0001970E B011                       		cmp.b	(a1),d0
00019710 6700                       		beq.s	loc_18EC0
00019712 D2C1                       		adda.w	d1,a1
00019714 51CA FFF8                  		dbf	d2,loc_18EB4
00019718                            
00019718 6000                       		bra.s	loc_18F38
0001971A                            ; ===========================================================================
0001971A                            
0001971A                            loc_18EC0:
0001971A 3029 0008                  		move.w	8(a1),d0
0001971E 3229 000C                  		move.w	$C(a1),d1
00019722 3428 0008                  		move.w	8(a0),d2
00019726 3628 000C                  		move.w	$C(a0),d3
0001972A 45FA 0000                  		lea	byte_19022(pc),a2
0001972E 47FA 0000                  		lea	byte_19026(pc),a3
00019732 181A                       		move.b	(a2)+,d4
00019734 4884                       		ext.w	d4
00019736 D044                       		add.w	d4,d0
00019738 181B                       		move.b	(a3)+,d4
0001973A 4884                       		ext.w	d4
0001973C D444                       		add.w	d4,d2
0001973E B440                       		cmp.w	d0,d2
00019740 6500                       		bcs.s	loc_18F38
00019742 181A                       		move.b	(a2)+,d4
00019744 4884                       		ext.w	d4
00019746 D044                       		add.w	d4,d0
00019748 181B                       		move.b	(a3)+,d4
0001974A 4884                       		ext.w	d4
0001974C D444                       		add.w	d4,d2
0001974E B042                       		cmp.w	d2,d0
00019750 6500                       		bcs.s	loc_18F38
00019752 181A                       		move.b	(a2)+,d4
00019754 4884                       		ext.w	d4
00019756 D244                       		add.w	d4,d1
00019758 181B                       		move.b	(a3)+,d4
0001975A 4884                       		ext.w	d4
0001975C D644                       		add.w	d4,d3
0001975E B641                       		cmp.w	d1,d3
00019760 6500                       		bcs.s	loc_18F38
00019762 181A                       		move.b	(a2)+,d4
00019764 4884                       		ext.w	d4
00019766 D244                       		add.w	d4,d1
00019768 181B                       		move.b	(a3)+,d4
0001976A 4884                       		ext.w	d4
0001976C D644                       		add.w	d4,d3
0001976E B243                       		cmp.w	d3,d1
00019770 6500                       		bcs.s	loc_18F38
00019772 5428 0024                  		addq.b	#2,$24(a0)
00019776 4268 0028                  		clr.w	$28(a0)
0001977A 4229 0020                  		clr.b	$20(a1)
0001977E 5329 0021                  		subq.b	#1,$21(a1)
00019782 6600                       		bne.s	loc_18F38
00019784 08E9 0007 0022             		bset	#7,$22(a1)
0001978A 4268 0010                  		clr.w	$10(a0)
0001978E 4268 0012                  		clr.w	$12(a0)
00019792                            
00019792                            loc_18F38:
00019792 4A68 0012                  		tst.w	$12(a0)
00019796 6A00                       		bpl.s	loc_18F5C
00019798 4EB9 0000 DD0C             		jsr	ObjectFall
0001979E 3028 0034                  		move.w	$34(a0),d0
000197A2 0440 002F                  		subi.w	#$2F,d0
000197A6 B068 000C                  		cmp.w	$C(a0),d0
000197AA 6E00                       		bgt.s	loc_18F58
000197AC 4EB9 0000 DD0C             		jsr	ObjectFall
000197B2                            
000197B2                            loc_18F58:
000197B2 6000 FF20                  		bra.w	loc_18E7A
000197B6                            ; ===========================================================================
000197B6                            
000197B6                            loc_18F5C:
000197B6 4EB9 0000 DD0C             		jsr	ObjectFall
000197BC 2268 003C                  		movea.l	$3C(a0),a1
000197C0 45F9 0000 0000             		lea	(word_19018).l,a2
000197C6 7000                       		moveq	#0,d0
000197C8 1029 001A                  		move.b	$1A(a1),d0
000197CC 3228 0008                  		move.w	8(a0),d1
000197D0 9268 0030                  		sub.w	$30(a0),d1
000197D4 6400                       		bcc.s	loc_18F7E
000197D6 5440                       		addq.w	#2,d0
000197D8                            
000197D8                            loc_18F7E:
000197D8 D040                       		add.w	d0,d0
000197DA 3228 0034                  		move.w	$34(a0),d1
000197DE D272 0000                  		add.w	(a2,d0.w),d1
000197E2 B268 000C                  		cmp.w	$C(a0),d1
000197E6 6ECA                       		bgt.s	loc_18F58
000197E8 2268 003C                  		movea.l	$3C(a0),a1
000197EC 7202                       		moveq	#2,d1
000197EE 4A68 0010                  		tst.w	$10(a0)
000197F2 6B00                       		bmi.s	loc_18F9C
000197F4 7200                       		moveq	#0,d1
000197F6                            
000197F6                            loc_18F9C:
000197F6 317C 0000 0028             		move.w	#0,$28(a0)
000197FC                            
000197FC                            loc_18FA2:
000197FC 1341 003A                  		move.b	d1,$3A(a1)
00019800 1141 003A                  		move.b	d1,$3A(a0)
00019804 B229 001A                  		cmp.b	$1A(a1),d1
00019808 6700                       		beq.s	loc_19008
0001980A 08A9 0003 0022             		bclr	#3,$22(a1)
00019810 6700                       		beq.s	loc_19008
00019812 4229 0025                  		clr.b	$25(a1)
00019816 137C 0002 0024             		move.b	#2,$24(a1)
0001981C 45F8 D000                  		lea	($FFFFD000).w,a2
00019820 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019826 446A 0012                  		neg.w	$12(a2)
0001982A 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019830 6600                       		bne.s	loc_18FDC
00019832 E0EA 0012                  		asr	$12(a2)
00019836                            
00019836                            loc_18FDC:
00019836 08EA 0001 0022             		bset	#1,$22(a2)
0001983C 08AA 0003 0022             		bclr	#3,$22(a2)
00019842 422A 003C                  		clr.b	$3C(a2)
00019846 2F08                       		move.l	a0,-(sp)
00019848 41D2                       		lea	(a2),a0
0001984A 4EBA A356                  		jsr	Obj01_ChkRoll
0001984E 205F                       		movea.l	(sp)+,a0
00019850 157C 0002 0024             		move.b	#2,$24(a2)
00019856 303C 00CC                  		move.w	#$CC,d0
0001985A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019860                            
00019860                            loc_19008:
00019860 4268 0010                  		clr.w	$10(a0)
00019864 4268 0012                  		clr.w	$12(a0)
00019868 5428 0024                  		addq.b	#2,$24(a0)
0001986C 6000 FE66                  		bra.w	loc_18E7A
00019870                            ; ===========================================================================
00019870 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001987A                            		even
0001987A E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001987E                            		even
0001987E 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019882                            		even
00019882                            ; ===========================================================================
00019882                            
00019882                            Obj7B_Explode:				; XREF: Obj7B_Index
00019882 10BC 003F                  		move.b	#$3F,(a0)
00019886 4228 0024                  		clr.b	$24(a0)
0001988A 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019890 6700                       		beq.s	Obj7B_MakeFrag
00019892 4E75                       		rts	
00019894                            ; ===========================================================================
00019894                            
00019894                            Obj7B_MakeFrag:
00019894 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001989A 7203                       		moveq	#3,d1
0001989C 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
000198A0                            
000198A0                            Obj7B_Loop:
000198A0 4EB9 0000 E1E4             		jsr	SingleObjLoad
000198A6 6600                       		bne.s	loc_1909A
000198A8 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
000198AC 137C 000A 0024             		move.b	#$A,$24(a1)
000198B2 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
000198BA 137C 0003 0018             		move.b	#3,$18(a1)
000198C0 337C 0518 0002             		move.w	#$518,2(a1)
000198C6 3368 0008 0008             		move.w	8(a0),8(a1)
000198CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000198D2 335A 0010                  		move.w	(a2)+,$10(a1)
000198D6 335A 0012                  		move.w	(a2)+,$12(a1)
000198DA 137C 0098 0020             		move.b	#$98,$20(a1)
000198E0 0029 0004 0001             		ori.b	#4,1(a1)
000198E6 08E9 0007 0001             		bset	#7,1(a1)
000198EC 137C 000C 0019             		move.b	#$C,$19(a1)
000198F2                            
000198F2                            loc_1909A:
000198F2 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000198F6                            
000198F6 4E75                       		rts	
000198F8                            ; ===========================================================================
000198F8 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000198FC FF60 FDC0                  		dc.w $FF60, $FDC0
00019900 0100 FCC0                  		dc.w $100, $FCC0
00019904 00A0 FDC0                  		dc.w $A0, $FDC0
00019908                            ; ===========================================================================
00019908                            
00019908                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019908 4EB9 0000 DD38             		jsr	SpeedToPos
0001990E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019914 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001991A 0668 0018 0012             		addi.w	#$18,$12(a0)
00019920 7004                       		moveq	#4,d0
00019922 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019926 E448                       		lsr.w	#2,d0
00019928 1140 001A                  		move.b	d0,$1A(a0)
0001992C 4A28 0001                  		tst.b	1(a0)
00019930 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019934 4E75                       		rts	
00019936                            ; ===========================================================================
00019936                            ; ---------------------------------------------------------------------------
00019936                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019936                            ; ---------------------------------------------------------------------------
00019936                            Map_obj7B:
00019936                            	include "_maps\obj7B.asm"
00019936                            ; ---------------------------------------------------------------------------
00019936                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019936                            ; ---------------------------------------------------------------------------
00019936 0000                       		dc.w byte_190E2-Map_obj7B
00019938 0000                       		dc.w byte_190E8-Map_obj7B
0001993A 01                         byte_190E2:	dc.b 1
0001993B FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019940 01                         byte_190E8:	dc.b 1
00019941 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019946                            		even
00019946                            		even
00019946                            
00019946                            ; ===========================================================================
00019946                            ; ---------------------------------------------------------------------------
00019946                            ; Object 75 - Eggman (SYZ)
00019946                            ; ---------------------------------------------------------------------------
00019946                            
00019946                            Obj75:					; XREF: Obj_Index
00019946 7000                       		moveq	#0,d0
00019948 1028 0024                  		move.b	$24(a0),d0
0001994C 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019950 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019954                            ; ===========================================================================
00019954 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019956 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019958 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001995A 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001995C 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001995E                            
0001995E 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019961 0401 05                    		dc.b 4,	1, 5
00019964 0607 05                    		dc.b 6,	7, 5
00019967 0800 05                    		dc.b 8,	0, 5
0001996A                            ; ===========================================================================
0001996A                            
0001996A                            Obj75_Main:				; XREF: Obj75_Index
0001996A 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019970 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019976 3168 0008 0030             		move.w	8(a0),$30(a0)
0001997C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019982 117C 000F 0020             		move.b	#$F,$20(a0)
00019988 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001998E 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019992 2248                       		movea.l	a0,a1
00019994 7203                       		moveq	#3,d1
00019996 6000                       		bra.s	Obj75_LoadBoss
00019998                            ; ===========================================================================
00019998                            
00019998                            Obj75_Loop:
00019998 4EB9 0000 E1FA             		jsr	SingleObjLoad2
0001999E 6600                       		bne.s	Obj75_ShipMain
000199A0 12BC 0075                  		move.b	#$75,(a1)
000199A4 3368 0008 0008             		move.w	8(a0),8(a1)
000199AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000199B0                            
000199B0                            Obj75_LoadBoss:				; XREF: Obj75_Main
000199B0 08A8 0000 0022             		bclr	#0,$22(a0)
000199B6 4229 0025                  		clr.b	$25(a1)
000199BA 135A 0024                  		move.b	(a2)+,$24(a1)
000199BE 135A 001C                  		move.b	(a2)+,$1C(a1)
000199C2 135A 0018                  		move.b	(a2)+,$18(a1)
000199C6 237C 0001 85CE 0004        		move.l	#Map_Eggman,4(a1)
000199CE 337C 0400 0002             		move.w	#$400,2(a1)
000199D4 137C 0004 0001             		move.b	#4,1(a1)
000199DA 137C 0020 0019             		move.b	#$20,$19(a1)
000199E0 2348 0034                  		move.l	a0,$34(a1)
000199E4 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
000199E8                            
000199E8                            Obj75_ShipMain:				; XREF: Obj75_Index
000199E8 7000                       		moveq	#0,d0
000199EA 1028 0025                  		move.b	$25(a0),d0
000199EE 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000199F2 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000199F6 43F9 0001 856A             		lea	(Ani_Eggman).l,a1
000199FC 4EB9 0000 AE1E             		jsr	AnimateSprite
00019A02 7003                       		moveq	#3,d0
00019A04 C028 0022                  		and.b	$22(a0),d0
00019A08 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019A0E 8128 0001                  		or.b	d0,1(a0)
00019A12 4EF9 0000 DD5E             		jmp	DisplaySprite
00019A18                            ; ===========================================================================
00019A18 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019A1C 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019A20 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019A24                            ; ===========================================================================
00019A24                            
00019A24                            loc_191CC:				; XREF: Obj75_ShipIndex
00019A24 317C FF00 0010             		move.w	#-$100,$10(a0)
00019A2A 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019A30 6400                       		bcc.s	loc_191DE
00019A32 5428 0025                  		addq.b	#2,$25(a0)
00019A36                            
00019A36                            loc_191DE:
00019A36 1028 003F                  		move.b	$3F(a0),d0
00019A3A 5428 003F                  		addq.b	#2,$3F(a0)
00019A3E 4EB9 0000 2C64             		jsr	(CalcSine).l
00019A44 E440                       		asr.w	#2,d0
00019A46 3140 0012                  		move.w	d0,$12(a0)
00019A4A                            
00019A4A                            loc_191F2:
00019A4A 6100 E6DC                  		bsr.w	BossMove
00019A4E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019A54 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A5A                            
00019A5A                            loc_19202:
00019A5A 3028 0008                  		move.w	8(a0),d0
00019A5E 0440 2C00                  		subi.w	#$2C00,d0
00019A62 EA48                       		lsr.w	#5,d0
00019A64 1140 0034                  		move.b	d0,$34(a0)
00019A68 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019A6E 6400                       		bcc.s	locret_19256
00019A70 4A28 0022                  		tst.b	$22(a0)
00019A74 6B00                       		bmi.s	loc_19258
00019A76 4A28 0020                  		tst.b	$20(a0)
00019A7A 6600                       		bne.s	locret_19256
00019A7C 4A28 003E                  		tst.b	$3E(a0)
00019A80 6600                       		bne.s	loc_1923A
00019A82 117C 0020 003E             		move.b	#$20,$3E(a0)
00019A88 303C 00AC                  		move.w	#$AC,d0
00019A8C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019A92                            
00019A92                            loc_1923A:
00019A92 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019A96 7000                       		moveq	#0,d0
00019A98 4A51                       		tst.w	(a1)
00019A9A 6600                       		bne.s	loc_19248
00019A9C 303C 0EEE                  		move.w	#$EEE,d0
00019AA0                            
00019AA0                            loc_19248:
00019AA0 3280                       		move.w	d0,(a1)
00019AA2 5328 003E                  		subq.b	#1,$3E(a0)
00019AA6 6600                       		bne.s	locret_19256
00019AA8 117C 000F 0020             		move.b	#$F,$20(a0)
00019AAE                            
00019AAE                            locret_19256:
00019AAE 4E75                       		rts	
00019AB0                            ; ===========================================================================
00019AB0                            
00019AB0                            loc_19258:				; XREF: loc_19202
00019AB0 7064                       		moveq	#100,d0
00019AB2 6100 0000                  		bsr.w	AddPoints
00019AB6 117C 0006 0025             		move.b	#6,$25(a0)
00019ABC 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019AC2 4268 0010                  		clr.w	$10(a0)
00019AC6 4E75                       		rts	
00019AC8                            ; ===========================================================================
00019AC8                            
00019AC8                            loc_19270:				; XREF: Obj75_ShipIndex
00019AC8 3028 0030                  		move.w	$30(a0),d0
00019ACC 317C 0140 0010             		move.w	#$140,$10(a0)
00019AD2 0828 0000 0022             		btst	#0,$22(a0)
00019AD8 6600                       		bne.s	loc_1928E
00019ADA 4468 0010                  		neg.w	$10(a0)
00019ADE 0C40 2C08                  		cmpi.w	#$2C08,d0
00019AE2 6E00                       		bgt.s	loc_1929E
00019AE4 6000                       		bra.s	loc_19294
00019AE6                            ; ===========================================================================
00019AE6                            
00019AE6                            loc_1928E:
00019AE6 0C40 2D38                  		cmpi.w	#$2D38,d0
00019AEA 6D00                       		blt.s	loc_1929E
00019AEC                            
00019AEC                            loc_19294:
00019AEC 0868 0000 0022             		bchg	#0,$22(a0)
00019AF2 4228 003D                  		clr.b	$3D(a0)
00019AF6                            
00019AF6                            loc_1929E:
00019AF6 0440 2C10                  		subi.w	#$2C10,d0
00019AFA 0240 001F                  		andi.w	#$1F,d0
00019AFE 0440 001F                  		subi.w	#$1F,d0
00019B02 6A00                       		bpl.s	loc_192AE
00019B04 4440                       		neg.w	d0
00019B06                            
00019B06                            loc_192AE:
00019B06 5340                       		subq.w	#1,d0
00019B08 6E00                       		bgt.s	loc_192E8
00019B0A 4A28 003D                  		tst.b	$3D(a0)
00019B0E 6600                       		bne.s	loc_192E8
00019B10 3238 D008                  		move.w	($FFFFD008).w,d1
00019B14 0441 2C00                  		subi.w	#$2C00,d1
00019B18 EA41                       		asr.w	#5,d1
00019B1A B228 0034                  		cmp.b	$34(a0),d1
00019B1E 6600                       		bne.s	loc_192E8
00019B20 7000                       		moveq	#0,d0
00019B22 1028 0034                  		move.b	$34(a0),d0
00019B26 EB40                       		asl.w	#5,d0
00019B28 0640 2C10                  		addi.w	#$2C10,d0
00019B2C 3140 0030                  		move.w	d0,$30(a0)
00019B30 6100 0000                  		bsr.w	Obj75_FindBlocks
00019B34 5428 0025                  		addq.b	#2,$25(a0)
00019B38 4268 0028                  		clr.w	$28(a0)
00019B3C 4268 0010                  		clr.w	$10(a0)
00019B40                            
00019B40                            loc_192E8:
00019B40 6000 FEF4                  		bra.w	loc_191DE
00019B44                            ; ===========================================================================
00019B44                            
00019B44                            loc_192EC:				; XREF: Obj75_ShipIndex
00019B44 7000                       		moveq	#0,d0
00019B46 1028 0028                  		move.b	$28(a0),d0
00019B4A 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019B4E 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019B52                            ; ===========================================================================
00019B52 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019B54 0000                       		dc.w loc_19348-off_192FA
00019B56 0000                       		dc.w loc_1938E-off_192FA
00019B58 0000                       		dc.w loc_193D0-off_192FA
00019B5A                            ; ===========================================================================
00019B5A                            
00019B5A                            loc_19302:				; XREF: off_192FA
00019B5A 317C 0180 0012             		move.w	#$180,$12(a0)
00019B60 3028 0038                  		move.w	$38(a0),d0
00019B64 0C40 0556                  		cmpi.w	#$556,d0
00019B68 6500                       		bcs.s	loc_19344
00019B6A 317C 0556 0038             		move.w	#$556,$38(a0)
00019B70 4268 003C                  		clr.w	$3C(a0)
00019B74 70FF                       		moveq	#-1,d0
00019B76 3028 0036                  		move.w	$36(a0),d0
00019B7A 6700                       		beq.s	loc_1933C
00019B7C 2240                       		movea.l	d0,a1
00019B7E 137C 00FF 0029             		move.b	#-1,$29(a1)
00019B84 117C 00FF 0029             		move.b	#-1,$29(a0)
00019B8A 2348 0034                  		move.l	a0,$34(a1)
00019B8E 317C 0032 003C             		move.w	#$32,$3C(a0)
00019B94                            
00019B94                            loc_1933C:
00019B94 4268 0012                  		clr.w	$12(a0)
00019B98 5428 0028                  		addq.b	#2,$28(a0)
00019B9C                            
00019B9C                            loc_19344:
00019B9C 6000 FEAC                  		bra.w	loc_191F2
00019BA0                            ; ===========================================================================
00019BA0                            
00019BA0                            loc_19348:				; XREF: off_192FA
00019BA0 5368 003C                  		subq.w	#1,$3C(a0)
00019BA4 6A00                       		bpl.s	loc_19366
00019BA6 5428 0028                  		addq.b	#2,$28(a0)
00019BAA 317C F800 0012             		move.w	#-$800,$12(a0)
00019BB0 4A68 0036                  		tst.w	$36(a0)
00019BB4 6600                       		bne.s	loc_19362
00019BB6 E0E8 0012                  		asr	$12(a0)
00019BBA                            
00019BBA                            loc_19362:
00019BBA 7000                       		moveq	#0,d0
00019BBC 6000                       		bra.s	loc_1937C
00019BBE                            ; ===========================================================================
00019BBE                            
00019BBE                            loc_19366:
00019BBE 7000                       		moveq	#0,d0
00019BC0 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019BC6 6E00                       		bgt.s	loc_1937C
00019BC8 7002                       		moveq	#2,d0
00019BCA 0828 0001 003D             		btst	#1,$3D(a0)
00019BD0 6700                       		beq.s	loc_1937C
00019BD2 4440                       		neg.w	d0
00019BD4                            
00019BD4                            loc_1937C:
00019BD4 D068 0038                  		add.w	$38(a0),d0
00019BD8 3140 000C                  		move.w	d0,$C(a0)
00019BDC 3168 0030 0008             		move.w	$30(a0),8(a0)
00019BE2 6000 FE76                  		bra.w	loc_19202
00019BE6                            ; ===========================================================================
00019BE6                            
00019BE6                            loc_1938E:				; XREF: off_192FA
00019BE6 303C 04DA                  		move.w	#$4DA,d0
00019BEA 4A68 0036                  		tst.w	$36(a0)
00019BEE 6700                       		beq.s	loc_1939C
00019BF0 0440 0018                  		subi.w	#$18,d0
00019BF4                            
00019BF4                            loc_1939C:
00019BF4 B068 0038                  		cmp.w	$38(a0),d0
00019BF8 6D00                       		blt.s	loc_193BE
00019BFA 317C 0008 003C             		move.w	#8,$3C(a0)
00019C00 4A68 0036                  		tst.w	$36(a0)
00019C04 6700                       		beq.s	loc_193B4
00019C06 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019C0C                            
00019C0C                            loc_193B4:
00019C0C 5428 0028                  		addq.b	#2,$28(a0)
00019C10 4268 0012                  		clr.w	$12(a0)
00019C14 6000                       		bra.s	loc_193CC
00019C16                            ; ===========================================================================
00019C16                            
00019C16                            loc_193BE:
00019C16 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019C1C 6C00                       		bge.s	loc_193CC
00019C1E 0668 000C 0012             		addi.w	#$C,$12(a0)
00019C24                            
00019C24                            loc_193CC:
00019C24 6000 FE24                  		bra.w	loc_191F2
00019C28                            ; ===========================================================================
00019C28                            
00019C28                            loc_193D0:				; XREF: off_192FA
00019C28 5368 003C                  		subq.w	#1,$3C(a0)
00019C2C 6E00                       		bgt.s	loc_19406
00019C2E 6B00                       		bmi.s	loc_193EE
00019C30 70FF                       		moveq	#-1,d0
00019C32 3028 0036                  		move.w	$36(a0),d0
00019C36 6700                       		beq.s	loc_193E8
00019C38 2240                       		movea.l	d0,a1
00019C3A 137C 000A 0029             		move.b	#$A,$29(a1)
00019C40                            
00019C40                            loc_193E8:
00019C40 4268 0036                  		clr.w	$36(a0)
00019C44 6000                       		bra.s	loc_19406
00019C46                            ; ===========================================================================
00019C46                            
00019C46                            loc_193EE:
00019C46 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019C4C 6600                       		bne.s	loc_19406
00019C4E 4228 0029                  		clr.b	$29(a0)
00019C52 5528 0025                  		subq.b	#2,$25(a0)
00019C56 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019C5C 6000                       		bra.s	loc_19446
00019C5E                            ; ===========================================================================
00019C5E                            
00019C5E                            loc_19406:
00019C5E 7001                       		moveq	#1,d0
00019C60 4A68 0036                  		tst.w	$36(a0)
00019C64 6700                       		beq.s	loc_19410
00019C66 7002                       		moveq	#2,d0
00019C68                            
00019C68                            loc_19410:
00019C68 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019C6E 6700                       		beq.s	loc_19424
00019C70 6D00                       		blt.s	loc_1941C
00019C72 4440                       		neg.w	d0
00019C74                            
00019C74                            loc_1941C:
00019C74 4A68 0036                  		tst.w	$36(a0)
00019C78 D168 0038                  		add.w	d0,$38(a0)
00019C7C                            
00019C7C                            loc_19424:
00019C7C 7000                       		moveq	#0,d0
00019C7E 4A68 0036                  		tst.w	$36(a0)
00019C82 6700                       		beq.s	loc_19438
00019C84 7002                       		moveq	#2,d0
00019C86 0828 0000 003D             		btst	#0,$3D(a0)
00019C8C 6700                       		beq.s	loc_19438
00019C8E 4440                       		neg.w	d0
00019C90                            
00019C90                            loc_19438:
00019C90 D068 0038                  		add.w	$38(a0),d0
00019C94 3140 000C                  		move.w	d0,$C(a0)
00019C98 3168 0030 0008             		move.w	$30(a0),8(a0)
00019C9E                            
00019C9E                            loc_19446:
00019C9E 6000 FDBA                  		bra.w	loc_19202
00019CA2                            
00019CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019CA2                            
00019CA2                            
00019CA2                            Obj75_FindBlocks:			; XREF: loc_192AE
00019CA2 4268 0036                  		clr.w	$36(a0)
00019CA6 43F8 D040                  		lea	($FFFFD040).w,a1
00019CAA 703E                       		moveq	#$3E,d0
00019CAC 7276                       		moveq	#$76,d1
00019CAE 1428 0034                  		move.b	$34(a0),d2
00019CB2                            
00019CB2                            Obj75_FindLoop:
00019CB2 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019CB4 6600                       		bne.s	loc_1946A	; if not, branch
00019CB6 B429 0028                  		cmp.b	$28(a1),d2
00019CBA 6600                       		bne.s	loc_1946A
00019CBC 3149 0036                  		move.w	a1,$36(a0)
00019CC0 6000                       		bra.s	locret_19472
00019CC2                            ; ===========================================================================
00019CC2                            
00019CC2                            loc_1946A:
00019CC2 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019CC6 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019CCA                            
00019CCA                            locret_19472:
00019CCA 4E75                       		rts	
00019CCC                            ; End of function Obj75_FindBlocks
00019CCC                            
00019CCC                            ; ===========================================================================
00019CCC                            
00019CCC                            loc_19474:				; XREF: Obj75_ShipIndex
00019CCC 5368 003C                  		subq.w	#1,$3C(a0)
00019CD0 6B00                       		bmi.s	loc_1947E
00019CD2 6000 E412                  		bra.w	BossDefeated
00019CD6                            ; ===========================================================================
00019CD6                            
00019CD6                            loc_1947E:
00019CD6 5428 0025                  		addq.b	#2,$25(a0)
00019CDA 4268 0012                  		clr.w	$12(a0)
00019CDE 08E8 0000 0022             		bset	#0,$22(a0)
00019CE4 08A8 0007 0022             		bclr	#7,$22(a0)
00019CEA 4268 0010                  		clr.w	$10(a0)
00019CEE 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019CF4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019CF8 6600                       		bne.s	loc_194A8
00019CFA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019D00                            
00019D00                            loc_194A8:
00019D00 6000 FD58                  		bra.w	loc_19202
00019D04                            ; ===========================================================================
00019D04                            
00019D04                            loc_194AC:				; XREF: Obj75_ShipIndex
00019D04 5268 003C                  		addq.w	#1,$3C(a0)
00019D08 6700                       		beq.s	loc_194BC
00019D0A 6A00                       		bpl.s	loc_194C2
00019D0C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019D12 6000                       		bra.s	loc_194EE
00019D14                            ; ===========================================================================
00019D14                            
00019D14                            loc_194BC:
00019D14 4268 0012                  		clr.w	$12(a0)
00019D18 6000                       		bra.s	loc_194EE
00019D1A                            ; ===========================================================================
00019D1A                            
00019D1A                            loc_194C2:
00019D1A 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019D20 6500                       		bcs.s	loc_194DA
00019D22 6700                       		beq.s	loc_194E0
00019D24 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019D2A 6500                       		bcs.s	loc_194EE
00019D2C 5428 0025                  		addq.b	#2,$25(a0)
00019D30 6000                       		bra.s	loc_194EE
00019D32                            ; ===========================================================================
00019D32                            
00019D32                            loc_194DA:
00019D32 5168 0012                  		subq.w	#8,$12(a0)
00019D36 6000                       		bra.s	loc_194EE
00019D38                            ; ===========================================================================
00019D38                            
00019D38                            loc_194E0:
00019D38 4268 0012                  		clr.w	$12(a0)
00019D3C 303C 0085                  		move.w	#$85,d0
00019D40 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SYZ music
00019D46                            
00019D46                            loc_194EE:
00019D46 6000 FD02                  		bra.w	loc_191F2
00019D4A                            ; ===========================================================================
00019D4A                            
00019D4A                            loc_194F2:				; XREF: Obj75_ShipIndex
00019D4A 317C 0400 0010             		move.w	#$400,$10(a0)
00019D50 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019D56 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019D5C 6400                       		bcc.s	loc_1950C
00019D5E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019D62 6000                       		bra.s	loc_19512
00019D64                            ; ===========================================================================
00019D64                            
00019D64                            loc_1950C:
00019D64 4A28 0001                  		tst.b	1(a0)
00019D68 6A00                       		bpl.s	Obj75_ShipDelete
00019D6A                            
00019D6A                            loc_19512:
00019D6A 6100 E3BC                  		bsr.w	BossMove
00019D6E 6000 FCC6                  		bra.w	loc_191DE
00019D72                            ; ===========================================================================
00019D72                            
00019D72                            Obj75_ShipDelete:
00019D72 4EF9 0000 DD9A             		jmp	DeleteObject
00019D78                            ; ===========================================================================
00019D78                            
00019D78                            Obj75_FaceMain:				; XREF: Obj75_Index
00019D78 7201                       		moveq	#1,d1
00019D7A 2268 0034                  		movea.l	$34(a0),a1
00019D7E 7000                       		moveq	#0,d0
00019D80 1029 0025                  		move.b	$25(a1),d0
00019D84 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019D88 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019D8C 1141 001C                  		move.b	d1,$1C(a0)
00019D90 1010                       		move.b	(a0),d0
00019D92 B011                       		cmp.b	(a1),d0
00019D94 6600                       		bne.s	Obj75_FaceDelete
00019D96 6000                       		bra.s	loc_195BE
00019D98                            ; ===========================================================================
00019D98                            
00019D98                            Obj75_FaceDelete:
00019D98 4EF9 0000 DD9A             		jmp	DeleteObject
00019D9E                            ; ===========================================================================
00019D9E 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019DA2 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019DA6 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019DAA                            ; ===========================================================================
00019DAA                            
00019DAA                            loc_19552:				; XREF: off_19546
00019DAA 720A                       		moveq	#$A,d1
00019DAC 4E75                       		rts	
00019DAE                            ; ===========================================================================
00019DAE                            
00019DAE                            loc_19556:				; XREF: off_19546
00019DAE 7206                       		moveq	#6,d1
00019DB0 4E75                       		rts	
00019DB2                            ; ===========================================================================
00019DB2                            
00019DB2                            loc_1955A:				; XREF: off_19546
00019DB2 7000                       		moveq	#0,d0
00019DB4 1029 0028                  		move.b	$28(a1),d0
00019DB8 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019DBC 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019DC0                            ; ===========================================================================
00019DC0 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019DC4 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019DC8                            ; ===========================================================================
00019DC8                            
00019DC8                            loc_19570:				; XREF: off_19568
00019DC8 6000                       		bra.s	loc_19574
00019DCA                            ; ===========================================================================
00019DCA                            
00019DCA                            loc_19572:				; XREF: off_19568
00019DCA 7206                       		moveq	#6,d1
00019DCC                            
00019DCC                            loc_19574:				; XREF: off_19546
00019DCC 4A29 0020                  		tst.b	$20(a1)
00019DD0 6600                       		bne.s	loc_1957E
00019DD2 7205                       		moveq	#5,d1
00019DD4 4E75                       		rts	
00019DD6                            ; ===========================================================================
00019DD6                            
00019DD6                            loc_1957E:
00019DD6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019DDC 6500                       		bcs.s	locret_19588
00019DDE 7204                       		moveq	#4,d1
00019DE0                            
00019DE0                            locret_19588:
00019DE0 4E75                       		rts	
00019DE2                            ; ===========================================================================
00019DE2                            
00019DE2                            Obj75_FlameMain:			; XREF: Obj75_Index
00019DE2 117C 0007 001C             		move.b	#7,$1C(a0)
00019DE8 2268 0034                  		movea.l	$34(a0),a1
00019DEC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019DF2 6600                       		bne.s	loc_195AA
00019DF4 117C 000B 001C             		move.b	#$B,$1C(a0)
00019DFA 4A28 0001                  		tst.b	1(a0)
00019DFE 6A00                       		bpl.s	Obj75_FlameDelete
00019E00 6000                       		bra.s	loc_195B6
00019E02                            ; ===========================================================================
00019E02                            
00019E02                            loc_195AA:
00019E02 4A69 0010                  		tst.w	$10(a1)
00019E06 6700                       		beq.s	loc_195B6
00019E08 117C 0008 001C             		move.b	#8,$1C(a0)
00019E0E                            
00019E0E                            loc_195B6:
00019E0E 6000                       		bra.s	loc_195BE
00019E10                            ; ===========================================================================
00019E10                            
00019E10                            Obj75_FlameDelete:
00019E10 4EF9 0000 DD9A             		jmp	DeleteObject
00019E16                            ; ===========================================================================
00019E16                            
00019E16                            loc_195BE:
00019E16 43F9 0001 856A             		lea	(Ani_Eggman).l,a1
00019E1C 4EB9 0000 AE1E             		jsr	AnimateSprite
00019E22 2268 0034                  		movea.l	$34(a0),a1
00019E26 3169 0008 0008             		move.w	8(a1),8(a0)
00019E2C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019E32                            
00019E32                            loc_195DA:
00019E32 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019E38 7003                       		moveq	#3,d0
00019E3A C028 0022                  		and.b	$22(a0),d0
00019E3E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019E44 8128 0001                  		or.b	d0,1(a0)
00019E48 4EF9 0000 DD5E             		jmp	DisplaySprite
00019E4E                            ; ===========================================================================
00019E4E                            
00019E4E                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019E4E 217C 0001 8696 0004        		move.l	#Map_BossItems,4(a0)
00019E56 317C 246C 0002             		move.w	#$246C,2(a0)
00019E5C 117C 0005 001A             		move.b	#5,$1A(a0)
00019E62 2268 0034                  		movea.l	$34(a0),a1
00019E66 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019E6C 6600                       		bne.s	loc_1961C
00019E6E 4A28 0001                  		tst.b	1(a0)
00019E72 6A00                       		bpl.s	Obj75_SpikeDelete
00019E74                            
00019E74                            loc_1961C:
00019E74 3169 0008 0008             		move.w	8(a1),8(a0)
00019E7A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019E80 3028 003C                  		move.w	$3C(a0),d0
00019E84 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019E8A 6600                       		bne.s	loc_19652
00019E8C 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019E92 6700                       		beq.s	loc_1964C
00019E94 4A29 0028                  		tst.b	$28(a1)
00019E98 6600                       		bne.s	loc_19658
00019E9A 0C40 0094                  		cmpi.w	#$94,d0
00019E9E 6C00                       		bge.s	loc_19658
00019EA0 5E40                       		addq.w	#7,d0
00019EA2 6000                       		bra.s	loc_19658
00019EA4                            ; ===========================================================================
00019EA4                            
00019EA4                            loc_1964C:
00019EA4 4A69 003C                  		tst.w	$3C(a1)
00019EA8 6A00                       		bpl.s	loc_19658
00019EAA                            
00019EAA                            loc_19652:
00019EAA 4A40                       		tst.w	d0
00019EAC 6F00                       		ble.s	loc_19658
00019EAE 5B40                       		subq.w	#5,d0
00019EB0                            
00019EB0                            loc_19658:
00019EB0 3140 003C                  		move.w	d0,$3C(a0)
00019EB4 E440                       		asr.w	#2,d0
00019EB6 D168 000C                  		add.w	d0,$C(a0)
00019EBA 117C 0008 0019             		move.b	#8,$19(a0)
00019EC0 117C 000C 0016             		move.b	#$C,$16(a0)
00019EC6 4228 0020                  		clr.b	$20(a0)
00019ECA 2268 0034                  		movea.l	$34(a0),a1
00019ECE 4A29 0020                  		tst.b	$20(a1)
00019ED2 6700                       		beq.s	loc_19688
00019ED4 4A29 0029                  		tst.b	$29(a1)
00019ED8 6600                       		bne.s	loc_19688
00019EDA 117C 0084 0020             		move.b	#$84,$20(a0)
00019EE0                            
00019EE0                            loc_19688:
00019EE0 6000 FF50                  		bra.w	loc_195DA
00019EE4                            ; ===========================================================================
00019EE4                            
00019EE4                            Obj75_SpikeDelete:
00019EE4 4EF9 0000 DD9A             		jmp	DeleteObject
00019EEA                            ; ===========================================================================
00019EEA                            ; ---------------------------------------------------------------------------
00019EEA                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019EEA                            ; ---------------------------------------------------------------------------
00019EEA                            
00019EEA                            Obj76:					; XREF: Obj_Index
00019EEA 7000                       		moveq	#0,d0
00019EEC 1028 0024                  		move.b	$24(a0),d0
00019EF0 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019EF4 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019EF8                            ; ===========================================================================
00019EF8 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019EFA 0000                       		dc.w Obj76_Action-Obj76_Index
00019EFC 0000                       		dc.w loc_19762-Obj76_Index
00019EFE                            ; ===========================================================================
00019EFE                            
00019EFE                            Obj76_Main:				; XREF: Obj76_Index
00019EFE 7800                       		moveq	#0,d4
00019F00 3A3C 2C10                  		move.w	#$2C10,d5
00019F04 7C09                       		moveq	#9,d6
00019F06 43D0                       		lea	(a0),a1
00019F08 6000                       		bra.s	Obj76_MakeBlock
00019F0A                            ; ===========================================================================
00019F0A                            
00019F0A                            Obj76_Loop:
00019F0A 4EB9 0000 E1E4             		jsr	SingleObjLoad
00019F10 6600                       		bne.s	Obj76_ExitLoop
00019F12                            
00019F12                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019F12 12BC 0076                  		move.b	#$76,(a1)
00019F16 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019F1E 337C 4000 0002             		move.w	#$4000,2(a1)
00019F24 137C 0004 0001             		move.b	#4,1(a1)
00019F2A 137C 0010 0019             		move.b	#$10,$19(a1)
00019F30 137C 0010 0016             		move.b	#$10,$16(a1)
00019F36 137C 0003 0018             		move.b	#3,$18(a1)
00019F3C 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019F40 337C 0582 000C             		move.w	#$582,$C(a1)
00019F46 3344 0028                  		move.w	d4,$28(a1)
00019F4A 0644 0101                  		addi.w	#$101,d4
00019F4E 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019F52 5429 0024                  		addq.b	#2,$24(a1)
00019F56 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019F5A                            
00019F5A                            Obj76_ExitLoop:
00019F5A 4E75                       		rts	
00019F5C                            ; ===========================================================================
00019F5C                            
00019F5C                            Obj76_Action:				; XREF: Obj76_Index
00019F5C 1028 0029                  		move.b	$29(a0),d0
00019F60 B028 0028                  		cmp.b	$28(a0),d0
00019F64 6700                       		beq.s	Obj76_Solid
00019F66 4A00                       		tst.b	d0
00019F68 6B00                       		bmi.s	loc_19718
00019F6A                            
00019F6A                            loc_19712:
00019F6A 6100 0000                  		bsr.w	Obj76_Break
00019F6E 6000                       		bra.s	Obj76_Display
00019F70                            ; ===========================================================================
00019F70                            
00019F70                            loc_19718:
00019F70 2268 0034                  		movea.l	$34(a0),a1
00019F74 4A29 0021                  		tst.b	$21(a1)
00019F78 67F0                       		beq.s	loc_19712
00019F7A 3169 0008 0008             		move.w	8(a1),8(a0)
00019F80 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F86 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019F8C B2C8                       		cmpa.w	a0,a1
00019F8E 6500                       		bcs.s	Obj76_Display
00019F90 3029 0012                  		move.w	$12(a1),d0
00019F94 48C0                       		ext.l	d0
00019F96 E080                       		asr.l	#8,d0
00019F98 D168 000C                  		add.w	d0,$C(a0)
00019F9C 6000                       		bra.s	Obj76_Display
00019F9E                            ; ===========================================================================
00019F9E                            
00019F9E                            Obj76_Solid:				; XREF: Obj76_Action
00019F9E 323C 001B                  		move.w	#$1B,d1
00019FA2 343C 0010                  		move.w	#$10,d2
00019FA6 363C 0011                  		move.w	#$11,d3
00019FAA 3828 0008                  		move.w	8(a0),d4
00019FAE 4EB9 0001 012E             		jsr	SolidObject
00019FB4                            
00019FB4                            Obj76_Display:				; XREF: Obj76_Action
00019FB4 4EF9 0000 DD5E             		jmp	DisplaySprite
00019FBA                            ; ===========================================================================
00019FBA                            
00019FBA                            loc_19762:				; XREF: Obj76_Index
00019FBA 4A28 0001                  		tst.b	1(a0)
00019FBE 6A00                       		bpl.s	Obj76_Delete
00019FC0 4EB9 0000 DD0C             		jsr	ObjectFall
00019FC6 4EF9 0000 DD5E             		jmp	DisplaySprite
00019FCC                            ; ===========================================================================
00019FCC                            
00019FCC                            Obj76_Delete:
00019FCC 4EF9 0000 DD9A             		jmp	DeleteObject
00019FD2                            
00019FD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019FD2                            
00019FD2                            
00019FD2                            Obj76_Break:				; XREF: Obj76_Action
00019FD2 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019FD6 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019FDA 7801                       		moveq	#1,d4
00019FDC 7203                       		moveq	#3,d1
00019FDE 7438                       		moveq	#$38,d2
00019FE0 5428 0024                  		addq.b	#2,$24(a0)
00019FE4 117C 0008 0019             		move.b	#8,$19(a0)
00019FEA 117C 0008 0016             		move.b	#8,$16(a0)
00019FF0 43D0                       		lea	(a0),a1
00019FF2 6000                       		bra.s	Obj76_MakeFrag
00019FF4                            ; ===========================================================================
00019FF4                            
00019FF4                            Obj76_LoopFrag:
00019FF4 4EB9 0000 E1FA             		jsr	SingleObjLoad2
00019FFA 6600                       		bne.s	loc_197D4
00019FFC                            
00019FFC                            Obj76_MakeFrag:
00019FFC 45D0                       		lea	(a0),a2
00019FFE 47D1                       		lea	(a1),a3
0001A000 7603                       		moveq	#3,d3
0001A002                            
0001A002                            loc_197AA:
0001A002 26DA                       		move.l	(a2)+,(a3)+
0001A004 26DA                       		move.l	(a2)+,(a3)+
0001A006 26DA                       		move.l	(a2)+,(a3)+
0001A008 26DA                       		move.l	(a2)+,(a3)+
0001A00A 51CB FFF6                  		dbf	d3,loc_197AA
0001A00E                            
0001A00E 335C 0010                  		move.w	(a4)+,$10(a1)
0001A012 335C 0012                  		move.w	(a4)+,$12(a1)
0001A016 361D                       		move.w	(a5)+,d3
0001A018 D769 0008                  		add.w	d3,8(a1)
0001A01C 361D                       		move.w	(a5)+,d3
0001A01E D769 000C                  		add.w	d3,$C(a1)
0001A022 1344 001A                  		move.b	d4,$1A(a1)
0001A026 5244                       		addq.w	#1,d4
0001A028 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A02C                            
0001A02C                            loc_197D4:
0001A02C 303C 00CB                  		move.w	#$CB,d0
0001A030 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A036                            ; End of function Obj76_Break
0001A036                            
0001A036                            ; ===========================================================================
0001A036 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A03A 0180 FE00                  		dc.w $180, $FE00
0001A03E FF00 FF00                  		dc.w $FF00, $FF00
0001A042 0100 FF00                  		dc.w $100, $FF00
0001A046 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A04A 0010 0000                  		dc.w $10, 0
0001A04E 0000 0010                  		dc.w 0,	$10
0001A052 0010 0010                  		dc.w $10, $10
0001A056                            ; ---------------------------------------------------------------------------
0001A056                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A056                            ; ---------------------------------------------------------------------------
0001A056                            Map_obj76:
0001A056                            	include "_maps\obj76.asm"
0001A056                            ; ---------------------------------------------------------------------------
0001A056                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A056                            ; ---------------------------------------------------------------------------
0001A056 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A05A 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A05E 0000                       		dc.w byte_19826-Map_obj76
0001A060 02                         byte_19808:	dc.b 2
0001A061 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A066 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A06B 00                         		dc.b 0
0001A06C 01                         byte_19814:	dc.b 1
0001A06D F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A072 01                         byte_1981A:	dc.b 1
0001A073 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A078 01                         byte_19820:	dc.b 1
0001A079 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A07E 01                         byte_19826:	dc.b 1
0001A07F F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A084                            		even
0001A084                            		even
0001A084                            
0001A084                            ; ===========================================================================
0001A084                            
0001A084                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A084 4EF9 0000 DD9A             		jmp	DeleteObject
0001A08A                            ; ===========================================================================
0001A08A                            ; ---------------------------------------------------------------------------
0001A08A                            ; Object 82 - Eggman (SBZ2)
0001A08A                            ; ---------------------------------------------------------------------------
0001A08A                            
0001A08A                            Obj82:					; XREF: Obj_Index
0001A08A 7000                       		moveq	#0,d0
0001A08C 1028 0024                  		move.b	$24(a0),d0
0001A090 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A094 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A098                            ; ===========================================================================
0001A098 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A09A 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A09C 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A09E                            
0001A09E 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A0A1 0400 03                    		dc.b 4,	0, 3
0001A0A4                            ; ===========================================================================
0001A0A4                            
0001A0A4                            Obj82_Main:				; XREF: Obj82_Index
0001A0A4 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A0A8 317C 2160 0008             		move.w	#$2160,8(a0)
0001A0AE 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A0B4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A0BA 117C 0010 0021             		move.b	#$10,$21(a0)
0001A0C0 08A8 0000 0022             		bclr	#0,$22(a0)
0001A0C6 4228 0025                  		clr.b	$25(a0)
0001A0CA 115A 0024                  		move.b	(a2)+,$24(a0)
0001A0CE 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A0D2 115A 0018                  		move.b	(a2)+,$18(a0)
0001A0D6 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A0DE 317C 0400 0002             		move.w	#$400,2(a0)
0001A0E4 117C 0004 0001             		move.b	#4,1(a0)
0001A0EA 08E8 0007 0001             		bset	#7,1(a0)
0001A0F0 117C 0020 0019             		move.b	#$20,$19(a0)
0001A0F6 4EB9 0000 E1FA             		jsr	SingleObjLoad2
0001A0FC 6600                       		bne.s	Obj82_Eggman
0001A0FE 2348 0034                  		move.l	a0,$34(a1)
0001A102 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A106 337C 2130 0008             		move.w	#$2130,8(a1)
0001A10C 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A112 4228 0025                  		clr.b	$25(a0)
0001A116 135A 0024                  		move.b	(a2)+,$24(a1)
0001A11A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A11E 135A 0018                  		move.b	(a2)+,$18(a1)
0001A122 237C 0000 C552 0004        		move.l	#Map_obj32,4(a1)
0001A12A 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A130 137C 0004 0001             		move.b	#4,1(a1)
0001A136 08E9 0007 0001             		bset	#7,1(a1)
0001A13C 137C 0010 0019             		move.b	#$10,$19(a1)
0001A142 137C 0000 001A             		move.b	#0,$1A(a1)
0001A148                            
0001A148                            Obj82_Eggman:				; XREF: Obj82_Index
0001A148 7000                       		moveq	#0,d0
0001A14A 1028 0025                  		move.b	$25(a0),d0
0001A14E 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A152 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A156 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A15A 4EB9 0000 AE1E             		jsr	AnimateSprite
0001A160 4EF9 0000 DD5E             		jmp	DisplaySprite
0001A166                            ; ===========================================================================
0001A166 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A168 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A16A 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A16C 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A16E                            ; ===========================================================================
0001A16E                            
0001A16E                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A16E 3028 0008                  		move.w	8(a0),d0
0001A172 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A176 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A17A 6400                       		bcc.s	loc_19934	; if not, branch
0001A17C 5428 0025                  		addq.b	#2,$25(a0)
0001A180 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A186 117C 0001 001C             		move.b	#1,$1C(a0)
0001A18C                            
0001A18C                            loc_19934:				; XREF: Obj82_EggIndex
0001A18C 4EF9 0000 DD38             		jmp	SpeedToPos
0001A192                            ; ===========================================================================
0001A192                            
0001A192                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A192 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A196 6600                       		bne.s	loc_19954	; if time remains, branch
0001A198 5428 0025                  		addq.b	#2,$25(a0)
0001A19C 117C 0002 001C             		move.b	#2,$1C(a0)
0001A1A2 5868 000C                  		addq.w	#4,$C(a0)
0001A1A6 317C 000F 003C             		move.w	#15,$3C(a0)
0001A1AC                            
0001A1AC                            loc_19954:
0001A1AC 60DE                       		bra.s	loc_19934
0001A1AE                            ; ===========================================================================
0001A1AE                            
0001A1AE                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A1AE 5368 003C                  		subq.w	#1,$3C(a0)
0001A1B2 6E00                       		bgt.s	loc_199D0
0001A1B4 6600                       		bne.s	loc_1996A
0001A1B6 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A1BC 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A1C2                            
0001A1C2                            loc_1996A:
0001A1C2 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A1C8 6E00                       		bgt.s	loc_19976
0001A1CA 4268 0010                  		clr.w	$10(a0)
0001A1CE                            
0001A1CE                            loc_19976:
0001A1CE 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A1D4 4A68 0012                  		tst.w	$12(a0)
0001A1D8 6B00                       		bmi.s	Obj82_FindBlocks
0001A1DA 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A1E0 6500                       		bcs.s	Obj82_FindBlocks
0001A1E2 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A1E8 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A1EE 6500                       		bcs.s	Obj82_FindBlocks
0001A1F0 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A1F6 4268 0012                  		clr.w	$12(a0)
0001A1FA                            
0001A1FA                            Obj82_FindBlocks:
0001A1FA 3028 0010                  		move.w	$10(a0),d0
0001A1FE 8068 0012                  		or.w	$12(a0),d0
0001A202 6600                       		bne.s	loc_199D0
0001A204 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A208 703E                       		moveq	#$3E,d0
0001A20A 7240                       		moveq	#$40,d1
0001A20C                            
0001A20C                            Obj82_FindLoop:	
0001A20C D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A20E 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A212 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A216                            
0001A216 6600                       		bne.s	loc_199D0
0001A218 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A21E 5428 0025                  		addq.b	#2,$25(a0)
0001A222 117C 0001 001C             		move.b	#1,$1C(a0)
0001A228                            
0001A228                            loc_199D0:
0001A228 6000 FF62                  		bra.w	loc_19934
0001A22C                            ; ===========================================================================
0001A22C                            
0001A22C                            Obj82_Switch:				; XREF: Obj82_Index
0001A22C 7000                       		moveq	#0,d0
0001A22E 1028 0025                  		move.b	$25(a0),d0
0001A232 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A236 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A23A                            ; ===========================================================================
0001A23A 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A23C 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A23E                            ; ===========================================================================
0001A23E                            
0001A23E                            loc_199E6:				; XREF: Obj82_SwIndex
0001A23E 2268 0034                  		movea.l	$34(a0),a1
0001A242 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A248 6600                       		bne.s	Obj82_SwDisplay
0001A24A 117C 0001 001A             		move.b	#1,$1A(a0)
0001A250 5428 0025                  		addq.b	#2,$25(a0)
0001A254                            
0001A254                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A254 4EF9 0000 DD5E             		jmp	DisplaySprite
0001A25A                            ; ===========================================================================
0001A25A                            Ani_obj82:
0001A25A                            	include "_anim\obj82.asm"
0001A25A                            ; ---------------------------------------------------------------------------
0001A25A                            ; Animation script - Eggman (SBZ2)
0001A25A                            ; ---------------------------------------------------------------------------
0001A25A 0000                       		dc.w byte_19A10-Ani_obj82
0001A25C 0000                       		dc.w byte_19A14-Ani_obj82
0001A25E 0000                       		dc.w byte_19A18-Ani_obj82
0001A260 0000                       		dc.w byte_19A20-Ani_obj82
0001A262 0000                       		dc.w byte_19A24-Ani_obj82
0001A264 0000                       		dc.w byte_19A2A-Ani_obj82
0001A266 0000                       		dc.w byte_19A30-Ani_obj82
0001A268 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A26C 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A270 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A278 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A27C 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A282 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A288 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A28C                            		even
0001A28C                            		even
0001A28C                            
0001A28C                            ; ---------------------------------------------------------------------------
0001A28C                            ; Sprite mappings - Eggman (SBZ2)
0001A28C                            ; ---------------------------------------------------------------------------
0001A28C                            Map_obj82:
0001A28C                            	include "_maps\obj82.asm"
0001A28C                            ; ================================================================================
0001A28C                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A28C                            ; ================================================================================
0001A28C                            
0001A28C                            DATAA16Z12RYSAF:
0001A28C 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A290 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A294 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A298 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A29C 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A2A0 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A2A2 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A2A3 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A2A8 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A2AD 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A2B2 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A2B3 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A2B8 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A2BD 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A2C2 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A2C7 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A2C8 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A2CD E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A2D2 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A2D7 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A2DC 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A2DD E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A2E2 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A2E7 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A2EC 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A2ED E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A2F2 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A2F7 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A2FC E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A301 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A302 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A307 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A30C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A311 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A316 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A317 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A31C E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A321 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A326 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A32B F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A330 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A335 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A33A 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A33B 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A340 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A345 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A34A F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A34F 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A350 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A355 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A35A 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A35F 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A364 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A369 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A36A E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A36F E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A374 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A379 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A37E E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A383 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A388 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A38D 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A392 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A393 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A398 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A39D EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A3A2                            	even
0001A3A2                            	even
0001A3A2                            
0001A3A2                            ; ===========================================================================
0001A3A2                            ; ---------------------------------------------------------------------------
0001A3A2                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A3A2                            ; ---------------------------------------------------------------------------
0001A3A2                            
0001A3A2                            Obj83:					; XREF: Obj_Index
0001A3A2 7000                       		moveq	#0,d0
0001A3A4 1028 0024                  		move.b	$24(a0),d0
0001A3A8 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A3AC 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A3B0                            ; ===========================================================================
0001A3B0 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A3B2 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A3B4 0000                       		dc.w loc_19C36-Obj83_Index
0001A3B6 0000                       		dc.w loc_19C62-Obj83_Index
0001A3B8 0000                       		dc.w loc_19C72-Obj83_Index
0001A3BA 0000                       		dc.w loc_19C80-Obj83_Index
0001A3BC                            ; ===========================================================================
0001A3BC                            
0001A3BC                            Obj83_Main:				; XREF: Obj83_Index
0001A3BC 317C 2080 0008             		move.w	#$2080,8(a0)
0001A3C2 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A3C8 117C 0080 0019             		move.b	#$80,$19(a0)
0001A3CE 117C 0010 0016             		move.b	#$10,$16(a0)
0001A3D4 117C 0004 0001             		move.b	#4,1(a0)
0001A3DA 08E8 0007 0001             		bset	#7,1(a0)
0001A3E0 7800                       		moveq	#0,d4
0001A3E2 3A3C 2010                  		move.w	#$2010,d5
0001A3E6 7C07                       		moveq	#7,d6
0001A3E8 45E8 0030                  		lea	$30(a0),a2
0001A3EC                            
0001A3EC                            Obj83_MakeBlock:
0001A3EC 4EB9 0000 E1E4             		jsr	SingleObjLoad
0001A3F2 6600                       		bne.s	Obj83_ExitMake
0001A3F4 34C9                       		move.w	a1,(a2)+
0001A3F6 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A3FA 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A402 337C 4518 0002             		move.w	#$4518,2(a1)
0001A408 137C 0004 0001             		move.b	#4,1(a1)
0001A40E 137C 0010 0019             		move.b	#$10,$19(a1)
0001A414 137C 0010 0016             		move.b	#$10,$16(a1)
0001A41A 137C 0003 0018             		move.b	#3,$18(a1)
0001A420 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A424 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A42A 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A42E 137C 0008 0024             		move.b	#8,$24(a1)
0001A434 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A438                            
0001A438                            Obj83_ExitMake:
0001A438 5428 0024                  		addq.b	#2,$24(a0)
0001A43C 4E75                       		rts	
0001A43E                            ; ===========================================================================
0001A43E                            
0001A43E                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A43E 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A444 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A446 4228 001A                  		clr.b	$1A(a0)
0001A44A 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A44E                            
0001A44E                            Obj83_Solid:
0001A44E 7000                       		moveq	#0,d0
0001A450 1028 001A                  		move.b	$1A(a0),d0
0001A454 4400                       		neg.b	d0
0001A456 4880                       		ext.w	d0
0001A458 5040                       		addq.w	#8,d0
0001A45A E940                       		asl.w	#4,d0
0001A45C 383C 2100                  		move.w	#$2100,d4
0001A460 9840                       		sub.w	d0,d4
0001A462 1140 0019                  		move.b	d0,$19(a0)
0001A466 3144 0008                  		move.w	d4,8(a0)
0001A46A 720B                       		moveq	#$B,d1
0001A46C D240                       		add.w	d0,d1
0001A46E 7410                       		moveq	#$10,d2
0001A470 7611                       		moveq	#$11,d3
0001A472 4EF9 0001 012E             		jmp	SolidObject
0001A478                            ; ===========================================================================
0001A478                            
0001A478                            loc_19C36:				; XREF: Obj83_Index
0001A478 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A47E 6400                       		bcc.s	Obj83_Solid2
0001A480 70FF                       		moveq	#-1,d0
0001A482 1028 001A                  		move.b	$1A(a0),d0
0001A486 4880                       		ext.w	d0
0001A488 D040                       		add.w	d0,d0
0001A48A 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A48E 2240                       		movea.l	d0,a1
0001A490 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A496 5228 001A                  		addq.b	#1,$1A(a0)
0001A49A 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A4A0 6700                       		beq.s	loc_19C62
0001A4A2                            
0001A4A2                            Obj83_Solid2:
0001A4A2 60AA                       		bra.s	Obj83_Solid
0001A4A4                            ; ===========================================================================
0001A4A4                            
0001A4A4                            loc_19C62:				; XREF: Obj83_Index
0001A4A4 08A8 0003 0022             		bclr	#3,$22(a0)
0001A4AA 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A4B0 6000 FBD2                  		bra.w	loc_1982C
0001A4B4                            ; ===========================================================================
0001A4B4                            
0001A4B4                            loc_19C72:				; XREF: Obj83_Index
0001A4B4 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A4BA 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A4BC 4EF9 0000 DD5E             		jmp	DisplaySprite
0001A4C2                            ; ===========================================================================
0001A4C2                            
0001A4C2                            loc_19C80:				; XREF: Obj83_Index
0001A4C2 4A28 0001                  		tst.b	1(a0)
0001A4C6 6A00 FBBC                  		bpl.w	loc_1982C
0001A4CA 4EB9 0000 DD0C             		jsr	ObjectFall
0001A4D0 4EF9 0000 DD5E             		jmp	DisplaySprite
0001A4D6                            ; ===========================================================================
0001A4D6                            
0001A4D6                            Obj83_Break:				; XREF: loc_19C72
0001A4D6 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A4DA 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A4DE 7801                       		moveq	#1,d4
0001A4E0 7203                       		moveq	#3,d1
0001A4E2 7438                       		moveq	#$38,d2
0001A4E4 5428 0024                  		addq.b	#2,$24(a0)
0001A4E8 117C 0008 0019             		move.b	#8,$19(a0)
0001A4EE 117C 0008 0016             		move.b	#8,$16(a0)
0001A4F4 43D0                       		lea	(a0),a1
0001A4F6 6000                       		bra.s	Obj83_MakeFrag
0001A4F8                            ; ===========================================================================
0001A4F8                            
0001A4F8                            Obj83_LoopFrag:
0001A4F8 4EB9 0000 E1FA             		jsr	SingleObjLoad2
0001A4FE 6600                       		bne.s	Obj83_BreakSnd
0001A500                            
0001A500                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A500 45D0                       		lea	(a0),a2
0001A502 47D1                       		lea	(a1),a3
0001A504 7603                       		moveq	#3,d3
0001A506                            
0001A506                            loc_19CC4:
0001A506 26DA                       		move.l	(a2)+,(a3)+
0001A508 26DA                       		move.l	(a2)+,(a3)+
0001A50A 26DA                       		move.l	(a2)+,(a3)+
0001A50C 26DA                       		move.l	(a2)+,(a3)+
0001A50E 51CB FFF6                  		dbf	d3,loc_19CC4
0001A512                            
0001A512 335C 0012                  		move.w	(a4)+,$12(a1)
0001A516 361D                       		move.w	(a5)+,d3
0001A518 D769 0008                  		add.w	d3,8(a1)
0001A51C 361D                       		move.w	(a5)+,d3
0001A51E D769 000C                  		add.w	d3,$C(a1)
0001A522 1344 001A                  		move.b	d4,$1A(a1)
0001A526 5244                       		addq.w	#1,d4
0001A528 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A52C                            
0001A52C                            Obj83_BreakSnd:
0001A52C 303C 00CB                  		move.w	#$CB,d0
0001A530 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A536 4EF9 0000 DD5E             		jmp	DisplaySprite
0001A53C                            ; ===========================================================================
0001A53C 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A540 0120 00C0                  		dc.w $120, $C0
0001A544 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A548 0010 0000                  		dc.w $10, 0
0001A54C 0000 0010                  		dc.w 0,	$10
0001A550 0010 0010                  		dc.w $10, $10
0001A554                            ; ---------------------------------------------------------------------------
0001A554                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A554                            ; ---------------------------------------------------------------------------
0001A554                            Map_obj83:
0001A554                            	include "_maps\obj83.asm"
0001A554                            ; ---------------------------------------------------------------------------
0001A554                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A554                            ; ---------------------------------------------------------------------------
0001A554 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A558 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A55C 0000                       		dc.w byte_19D46-Map_obj83
0001A55E 01                         byte_19D1C:	dc.b 1
0001A55F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A564 02                         byte_19D22:	dc.b 2
0001A565 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A56A F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A56F 00                         		dc.b 0
0001A570 02                         byte_19D2E:	dc.b 2
0001A571 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A576 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A57B 00                         		dc.b 0
0001A57C 02                         byte_19D3A:	dc.b 2
0001A57D F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A582 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A587 00                         		dc.b 0
0001A588 02                         byte_19D46:	dc.b 2
0001A589 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A58E F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A594 00                         		even
0001A594 00                         		even
0001A594                            
0001A594                            ; ===========================================================================
0001A594                            ; ---------------------------------------------------------------------------
0001A594                            ; Object 85 - Eggman (FZ)
0001A594                            ; ---------------------------------------------------------------------------
0001A594                            
0001A594                            Obj85_Delete:
0001A594 4EF9 0000 DD9A             		jmp	DeleteObject
0001A59A                            ; ===========================================================================
0001A59A                            
0001A59A                            Obj85:					; XREF: Obj_Index
0001A59A 7000                       		moveq	#0,d0
0001A59C 1028 0024                  		move.b	$24(a0),d0
0001A5A0 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A5A4 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A5A8                            ; ===========================================================================
0001A5A8 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A5AA 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A5AC 0000                       		dc.w loc_1A38E-Obj85_Index
0001A5AE 0000                       		dc.w loc_1A346-Obj85_Index
0001A5B0 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A5B2 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A5B4 0000                       		dc.w loc_1A264-Obj85_Index
0001A5B6                            
0001A5B6 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A5BC 0001 A28C                  		dc.l Map_obj82		; mappings pointer
0001A5C0 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A5C6 0000 0000                  		dc.l Map_obj84
0001A5CA 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A5D0 0000 0000                  		dc.l Map_FZBoss
0001A5D4 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A5DA 0001 A28C                  		dc.l Map_obj82
0001A5DE 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A5E4 0001 85CE                  		dc.l Map_Eggman
0001A5E8 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A5EE 0001 85CE                  		dc.l Map_Eggman
0001A5F2                            
0001A5F2 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A5F7 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A5FC 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A601 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A606 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A60B 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A610                            ; ===========================================================================
0001A610                            
0001A610                            Obj85_Main:				; XREF: Obj85_Index
0001A610 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A614 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A618 2248                       		movea.l	a0,a1
0001A61A 7205                       		moveq	#5,d1
0001A61C 6000                       		bra.s	Obj85_LoadBoss
0001A61E                            ; ===========================================================================
0001A61E                            
0001A61E                            Obj85_Loop:
0001A61E 4EB9 0000 E1FA             		jsr	SingleObjLoad2
0001A624 6600                       		bne.s	loc_19E20
0001A626                            
0001A626                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A626 12BC 0085                  		move.b	#$85,(a1)
0001A62A 335A 0008                  		move.w	(a2)+,8(a1)
0001A62E 335A 000C                  		move.w	(a2)+,$C(a1)
0001A632 335A 0002                  		move.w	(a2)+,2(a1)
0001A636 235A 0004                  		move.l	(a2)+,4(a1)
0001A63A 135B 0024                  		move.b	(a3)+,$24(a1)
0001A63E 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A642 135B 0018                  		move.b	(a3)+,$18(a1)
0001A646 135B 0017                  		move.b	(a3)+,$17(a1)
0001A64A 135B 0016                  		move.b	(a3)+,$16(a1)
0001A64E 137C 0004 0001             		move.b	#4,1(a1)
0001A654 08E8 0007 0001             		bset	#7,1(a0)
0001A65A 2348 0034                  		move.l	a0,$34(a1)
0001A65E 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A662                            
0001A662                            loc_19E20:
0001A662 45E8 0036                  		lea	$36(a0),a2
0001A666 4EB9 0000 E1E4             		jsr	SingleObjLoad
0001A66C 6600                       		bne.s	loc_19E5A
0001A66E 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A672 3489                       		move.w	a1,(a2)
0001A674 2348 0034                  		move.l	a0,$34(a1)
0001A678 45E8 0038                  		lea	$38(a0),a2
0001A67C 7400                       		moveq	#0,d2
0001A67E 7203                       		moveq	#3,d1
0001A680                            
0001A680                            loc_19E3E:
0001A680 4EB9 0000 E1FA             		jsr	SingleObjLoad2
0001A686 6600                       		bne.s	loc_19E5A
0001A688 34C9                       		move.w	a1,(a2)+
0001A68A 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A68E 2348 0034                  		move.l	a0,$34(a1)
0001A692 1342 0028                  		move.b	d2,$28(a1)
0001A696 5442                       		addq.w	#2,d2
0001A698 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A69C                            
0001A69C                            loc_19E5A:
0001A69C 317C 0000 0034             		move.w	#0,$34(a0)
0001A6A2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A6A8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A6AE                            
0001A6AE                            Obj85_Eggman:				; XREF: Obj85_Index
0001A6AE 7000                       		moveq	#0,d0
0001A6B0 1028 0034                  		move.b	$34(a0),d0
0001A6B4 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A6B8 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A6BC 4EF9 0000 DD5E             		jmp	DisplaySprite
0001A6C2                            ; ===========================================================================
0001A6C2 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A6C6 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A6CA 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A6CE 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A6D2                            ; ===========================================================================
0001A6D2                            
0001A6D2                            loc_19E90:				; XREF: off_19E80
0001A6D2 4AB8 F680                  		tst.l	($FFFFF680).w
0001A6D6 6600                       		bne.s	loc_19EA2
0001A6D8 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A6DE 6500                       		bcs.s	loc_19EA2
0001A6E0 5428 0034                  		addq.b	#2,$34(a0)
0001A6E4                            
0001A6E4                            loc_19EA2:
0001A6E4 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A6E8 4E75                       		rts	
0001A6EA                            ; ===========================================================================
0001A6EA                            
0001A6EA                            loc_19EA8:				; XREF: off_19E80
0001A6EA 4A68 0030                  		tst.w	$30(a0)
0001A6EE 6A00                       		bpl.s	loc_19F10
0001A6F0 4268 0030                  		clr.w	$30(a0)
0001A6F4 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001A6FA 0240 000C                  		andi.w	#$C,d0
0001A6FE 3200                       		move.w	d0,d1
0001A700 5441                       		addq.w	#2,d1
0001A702 4A80                       		tst.l	d0
0001A704 6A00                       		bpl.s	loc_19EC6
0001A706 C141                       		exg	d1,d0
0001A708                            
0001A708                            loc_19EC6:
0001A708 43FA 0000                  		lea	word_19FD6(pc),a1
0001A70C 3031 0000                  		move.w	(a1,d0.w),d0
0001A710 3231 1000                  		move.w	(a1,d1.w),d1
0001A714 3140 0030                  		move.w	d0,$30(a0)
0001A718 74FF                       		moveq	#-1,d2
0001A71A 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A71E 2242                       		movea.l	d2,a1
0001A720 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A726 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A72C 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A730 2242                       		movea.l	d2,a1
0001A732 137C 0001 0029             		move.b	#1,$29(a1)
0001A738 337C 0000 0030             		move.w	#0,$30(a1)
0001A73E 317C 0001 0032             		move.w	#1,$32(a0)
0001A744 4228 0035                  		clr.b	$35(a0)
0001A748 303C 00B7                  		move.w	#$B7,d0
0001A74C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A752                            
0001A752                            loc_19F10:
0001A752 4A68 0032                  		tst.w	$32(a0)
0001A756 6B00 0000                  		bmi.w	loc_19FA6
0001A75A 08A8 0000 0022             		bclr	#0,$22(a0)
0001A760 3038 D008                  		move.w	($FFFFD008).w,d0
0001A764 9068 0008                  		sub.w	8(a0),d0
0001A768 6500                       		bcs.s	loc_19F2E
0001A76A 08E8 0000 0022             		bset	#0,$22(a0)
0001A770                            
0001A770                            loc_19F2E:
0001A770 323C 002B                  		move.w	#$2B,d1
0001A774 343C 0014                  		move.w	#$14,d2
0001A778 363C 0014                  		move.w	#$14,d3
0001A77C 3828 0008                  		move.w	8(a0),d4
0001A780 4EB9 0001 012E             		jsr	SolidObject
0001A786 4A44                       		tst.w	d4
0001A788 6E00                       		bgt.s	loc_19F50
0001A78A                            
0001A78A                            loc_19F48:
0001A78A 4A28 0035                  		tst.b	$35(a0)
0001A78E 6600                       		bne.s	loc_19F88
0001A790 6000                       		bra.s	loc_19F96
0001A792                            ; ===========================================================================
0001A792                            
0001A792                            loc_19F50:
0001A792 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A796 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A79C 66EC                       		bne.s	loc_19F48
0001A79E 303C 0300                  		move.w	#$300,d0
0001A7A2 0828 0000 0022             		btst	#0,$22(a0)
0001A7A8 6600                       		bne.s	loc_19F6A
0001A7AA 4440                       		neg.w	d0
0001A7AC                            
0001A7AC                            loc_19F6A:
0001A7AC 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A7B0 4A28 0035                  		tst.b	$35(a0)
0001A7B4 6600                       		bne.s	loc_19F88
0001A7B6 5328 0021                  		subq.b	#1,$21(a0)
0001A7BA 117C 0064 0035             		move.b	#$64,$35(a0)
0001A7C0 303C 00AC                  		move.w	#$AC,d0
0001A7C4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A7CA                            
0001A7CA                            loc_19F88:
0001A7CA 5328 0035                  		subq.b	#1,$35(a0)
0001A7CE 6700                       		beq.s	loc_19F96
0001A7D0 117C 0003 001C             		move.b	#3,$1C(a0)
0001A7D6 6000                       		bra.s	loc_19F9C
0001A7D8                            ; ===========================================================================
0001A7D8                            
0001A7D8                            loc_19F96:
0001A7D8 117C 0001 001C             		move.b	#1,$1C(a0)
0001A7DE                            
0001A7DE                            loc_19F9C:
0001A7DE 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A7E2 4EF9 0000 AE1E             		jmp	AnimateSprite
0001A7E8                            ; ===========================================================================
0001A7E8                            
0001A7E8                            loc_19FA6:
0001A7E8 4A28 0021                  		tst.b	$21(a0)
0001A7EC 6700                       		beq.s	loc_19FBC
0001A7EE 5428 0034                  		addq.b	#2,$34(a0)
0001A7F2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A7F8 4268 0032                  		clr.w	$32(a0)
0001A7FC 4E75                       		rts	
0001A7FE                            ; ===========================================================================
0001A7FE                            
0001A7FE                            loc_19FBC:
0001A7FE 117C 0006 0034             		move.b	#6,$34(a0)
0001A804 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A80A 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A810 117C 0014 0016             		move.b	#$14,$16(a0)
0001A816 4E75                       		rts	
0001A818                            ; ===========================================================================
0001A818 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A828                            ; ===========================================================================
0001A828                            
0001A828                            loc_19FE6:				; XREF: off_19E80
0001A828 70FF                       		moveq	#-1,d0
0001A82A 3028 0036                  		move.w	$36(a0),d0
0001A82E 2240                       		movea.l	d0,a1
0001A830 4A68 0030                  		tst.w	$30(a0)
0001A834 6A00                       		bpl.s	loc_1A000
0001A836 4268 0030                  		clr.w	$30(a0)
0001A83A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A840 6100                       		bsr.s	loc_1A020
0001A842                            
0001A842                            loc_1A000:
0001A842 700F                       		moveq	#$F,d0
0001A844 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A848 6600                       		bne.s	loc_1A00A
0001A84A 6100                       		bsr.s	loc_1A020
0001A84C                            
0001A84C                            loc_1A00A:
0001A84C 4A68 0032                  		tst.w	$32(a0)
0001A850 6700                       		beq.s	locret_1A01E
0001A852 5528 0034                  		subq.b	#2,$34(a0)
0001A856 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A85C 4268 0032                  		clr.w	$32(a0)
0001A860                            
0001A860                            locret_1A01E:
0001A860 4E75                       		rts	
0001A862                            ; ===========================================================================
0001A862                            
0001A862                            loc_1A020:
0001A862 303C 00B1                  		move.w	#$B1,d0
0001A866 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A86C                            ; ===========================================================================
0001A86C                            
0001A86C                            loc_1A02A:				; XREF: off_19E80
0001A86C 117C 0030 0017             		move.b	#$30,$17(a0)
0001A872 08E8 0000 0022             		bset	#0,$22(a0)
0001A878 4EB9 0000 DD38             		jsr	SpeedToPos
0001A87E 117C 0006 001A             		move.b	#6,$1A(a0)
0001A884 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A88A 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A890 6500                       		bcs.s	loc_1A070
0001A892 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A898 5428 0034                  		addq.b	#2,$34(a0)
0001A89C 117C 0020 0017             		move.b	#$20,$17(a0)
0001A8A2 317C 0100 0010             		move.w	#$100,$10(a0)
0001A8A8 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A8AE 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A8B2                            
0001A8B2                            loc_1A070:
0001A8B2 6000 0000                  		bra.w	loc_1A166
0001A8B6                            ; ===========================================================================
0001A8B6                            
0001A8B6                            loc_1A074:				; XREF: off_19E80
0001A8B6 08E8 0000 0022             		bset	#0,$22(a0)
0001A8BC 117C 0004 001C             		move.b	#4,$1C(a0)
0001A8C2 4EB9 0000 DD38             		jsr	SpeedToPos
0001A8C8 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A8CE 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A8D4 6500                       		bcs.s	loc_1A09A
0001A8D6 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A8DC                            
0001A8DC                            loc_1A09A:
0001A8DC 317C 0400 0010             		move.w	#$400,$10(a0)
0001A8E2 3028 0008                  		move.w	8(a0),d0
0001A8E6 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A8EA 6A00                       		bpl.s	loc_1A0B4
0001A8EC 317C 0500 0010             		move.w	#$500,$10(a0)
0001A8F2 6000 0000                  		bra.w	loc_1A0F2
0001A8F6                            ; ===========================================================================
0001A8F6                            
0001A8F6                            loc_1A0B4:
0001A8F6 0440 0070                  		subi.w	#$70,d0
0001A8FA 6500                       		bcs.s	loc_1A0F2
0001A8FC 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A902 5140                       		subq.w	#8,d0
0001A904 6500                       		bcs.s	loc_1A0F2
0001A906 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A90C 5140                       		subq.w	#8,d0
0001A90E 6500                       		bcs.s	loc_1A0F2
0001A910 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A916 5140                       		subq.w	#8,d0
0001A918 6500                       		bcs.s	loc_1A0F2
0001A91A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A920 5140                       		subq.w	#8,d0
0001A922 6500                       		bcs.s	loc_1A0F2
0001A924 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A92A 0440 0038                  		subi.w	#$38,d0
0001A92E 6500                       		bcs.s	loc_1A0F2
0001A930 4268 0010                  		clr.w	$10(a0)
0001A934                            
0001A934                            loc_1A0F2:
0001A934 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A93A 6500                       		bcs.s	loc_1A110
0001A93C 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A942 317C 0240 0010             		move.w	#$240,$10(a0)
0001A948 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A94E 5428 0034                  		addq.b	#2,$34(a0)
0001A952                            
0001A952                            loc_1A110:
0001A952 6000                       		bra.s	loc_1A15C
0001A954                            ; ===========================================================================
0001A954                            
0001A954                            loc_1A112:				; XREF: off_19E80
0001A954 4EB9 0000 DD38             		jsr	SpeedToPos
0001A95A 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A960 6500                       		bcs.s	loc_1A124
0001A962 4268 0010                  		clr.w	$10(a0)
0001A966                            
0001A966                            loc_1A124:
0001A966 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A96C 4A68 0012                  		tst.w	$12(a0)
0001A970 6B00                       		bmi.s	loc_1A142
0001A972 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A978 6500                       		bcs.s	loc_1A142
0001A97A 317C 0592 000C             		move.w	#$592,$C(a0)
0001A980 4268 0012                  		clr.w	$12(a0)
0001A984                            
0001A984                            loc_1A142:
0001A984 3028 0010                  		move.w	$10(a0),d0
0001A988 8068 0012                  		or.w	$12(a0),d0
0001A98C 6600                       		bne.s	loc_1A15C
0001A98E 5428 0034                  		addq.b	#2,$34(a0)
0001A992 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A998 117C 0001 0021             		move.b	#1,$21(a0)
0001A99E                            
0001A99E                            loc_1A15C:
0001A99E 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A9A2 4EB9 0000 AE1E             		jsr	AnimateSprite
0001A9A8                            
0001A9A8                            loc_1A166:
0001A9A8 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A9AE 6C00                       		bge.s	loc_1A172
0001A9B0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A9B4                            
0001A9B4                            loc_1A172:
0001A9B4 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A9BA 6C00                       		bge.s	locret_1A190
0001A9BC 323C 001B                  		move.w	#$1B,d1
0001A9C0 343C 0070                  		move.w	#$70,d2
0001A9C4 363C 0071                  		move.w	#$71,d3
0001A9C8 3828 0008                  		move.w	8(a0),d4
0001A9CC 4EF9 0001 012E             		jmp	SolidObject
0001A9D2                            ; ===========================================================================
0001A9D2                            
0001A9D2                            locret_1A190:
0001A9D2 4E75                       		rts	
0001A9D4                            ; ===========================================================================
0001A9D4                            
0001A9D4                            loc_1A192:				; XREF: off_19E80
0001A9D4 217C 0001 85CE 0004        		move.l	#Map_Eggman,4(a0)
0001A9DC 317C 0400 0002             		move.w	#$400,2(a0)
0001A9E2 117C 0000 001C             		move.b	#0,$1C(a0)
0001A9E8 08E8 0000 0022             		bset	#0,$22(a0)
0001A9EE 4EB9 0000 DD38             		jsr	SpeedToPos
0001A9F4 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A9FA 6400                       		bcc.s	loc_1A1D0
0001A9FC 317C 0180 0010             		move.w	#$180,$10(a0)
0001AA02 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AA08 117C 000F 0020             		move.b	#$F,$20(a0)
0001AA0E 5428 0034                  		addq.b	#2,$34(a0)
0001AA12                            
0001AA12                            loc_1A1D0:
0001AA12 6000 FF8A                  		bra.w	loc_1A15C
0001AA16                            ; ===========================================================================
0001AA16                            
0001AA16                            loc_1A1D4:				; XREF: off_19E80
0001AA16 08E8 0000 0022             		bset	#0,$22(a0)
0001AA1C 4EB9 0000 DD38             		jsr	SpeedToPos
0001AA22 4A68 0030                  		tst.w	$30(a0)
0001AA26 6600                       		bne.s	loc_1A1FC
0001AA28 4A28 0020                  		tst.b	$20(a0)
0001AA2C 6600                       		bne.s	loc_1A216
0001AA2E 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AA34 303C 00AC                  		move.w	#$AC,d0
0001AA38 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AA3E                            
0001AA3E                            loc_1A1FC:
0001AA3E 5368 0030                  		subq.w	#1,$30(a0)
0001AA42 6600                       		bne.s	loc_1A216
0001AA44 4A28 0022                  		tst.b	$22(a0)
0001AA48 6A00                       		bpl.s	loc_1A210
0001AA4A 317C 0060 0012             		move.w	#$60,$12(a0)
0001AA50 6000                       		bra.s	loc_1A216
0001AA52                            ; ===========================================================================
0001AA52                            
0001AA52                            loc_1A210:
0001AA52 117C 000F 0020             		move.b	#$F,$20(a0)
0001AA58                            
0001AA58                            loc_1A216:
0001AA58 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AA5E 6D00                       		blt.s	loc_1A23A
0001AA60 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AA66 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AA6C 4278 D014                  		clr.w	($FFFFD014).w
0001AA70 4A68 0012                  		tst.w	$12(a0)
0001AA74 6A00                       		bpl.s	loc_1A248
0001AA76 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AA7C                            
0001AA7C                            loc_1A23A:
0001AA7C 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AA82 6D00                       		blt.s	loc_1A248
0001AA84 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AA8A                            
0001AA8A                            loc_1A248:
0001AA8A 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AA90 6500                       		bcs.s	loc_1A260
0001AA92 4A28 0001                  		tst.b	1(a0)
0001AA96 6B00                       		bmi.s	loc_1A260
0001AA98 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AA9E 6000 FAF4                  		bra.w	Obj85_Delete
0001AAA2                            ; ===========================================================================
0001AAA2                            
0001AAA2                            loc_1A260:
0001AAA2 6000 FEFA                  		bra.w	loc_1A15C
0001AAA6                            ; ===========================================================================
0001AAA6                            
0001AAA6                            loc_1A264:				; XREF: Obj85_Index
0001AAA6 2268 0034                  		movea.l	$34(a0),a1
0001AAAA 1011                       		move.b	(a1),d0
0001AAAC B010                       		cmp.b	(a0),d0
0001AAAE 6600 FAE4                  		bne.w	Obj85_Delete
0001AAB2 117C 0007 001C             		move.b	#7,$1C(a0)
0001AAB8 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AABE 6C00                       		bge.s	loc_1A280
0001AAC0 6000                       		bra.s	loc_1A2A6
0001AAC2                            ; ===========================================================================
0001AAC2                            
0001AAC2                            loc_1A280:
0001AAC2 4A69 0010                  		tst.w	$10(a1)
0001AAC6 6700                       		beq.s	loc_1A28C
0001AAC8 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AACE                            
0001AACE                            loc_1A28C:
0001AACE 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001AAD2 4EB9 0000 AE1E             		jsr	AnimateSprite
0001AAD8                            
0001AAD8                            loc_1A296:
0001AAD8 2268 0034                  		movea.l	$34(a0),a1
0001AADC 3169 0008 0008             		move.w	8(a1),8(a0)
0001AAE2 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AAE8                            
0001AAE8                            loc_1A2A6:
0001AAE8 2268 0034                  		movea.l	$34(a0),a1
0001AAEC 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AAF2 7003                       		moveq	#3,d0
0001AAF4 C028 0022                  		and.b	$22(a0),d0
0001AAF8 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AAFE 8128 0001                  		or.b	d0,1(a0)
0001AB02 4EF9 0000 DD5E             		jmp	DisplaySprite
0001AB08                            ; ===========================================================================
0001AB08                            
0001AB08                            loc_1A2C6:				; XREF: Obj85_Index
0001AB08 2268 0034                  		movea.l	$34(a0),a1
0001AB0C 1011                       		move.b	(a1),d0
0001AB0E B010                       		cmp.b	(a0),d0
0001AB10 6600 FA82                  		bne.w	Obj85_Delete
0001AB14 0CA9 0001 85CE 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AB1C 6700                       		beq.s	loc_1A2E4
0001AB1E 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AB24 60C2                       		bra.s	loc_1A2A6
0001AB26                            ; ===========================================================================
0001AB26                            
0001AB26                            loc_1A2E4:
0001AB26 117C 0001 001C             		move.b	#1,$1C(a0)
0001AB2C 4A29 0021                  		tst.b	$21(a1)
0001AB30 6F00                       		ble.s	loc_1A312
0001AB32 117C 0006 001C             		move.b	#6,$1C(a0)
0001AB38 217C 0001 85CE 0004        		move.l	#Map_Eggman,4(a0)
0001AB40 317C 0400 0002             		move.w	#$400,2(a0)
0001AB46 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001AB4A 4EB9 0000 AE1E             		jsr	AnimateSprite
0001AB50 6000 FF86                  		bra.w	loc_1A296
0001AB54                            ; ===========================================================================
0001AB54                            
0001AB54                            loc_1A312:
0001AB54 4A28 0001                  		tst.b	1(a0)
0001AB58 6A00 FA3A                  		bpl.w	Obj85_Delete
0001AB5C 6100 D588                  		bsr.w	BossDefeated
0001AB60 117C 0002 0018             		move.b	#2,$18(a0)
0001AB66 117C 0000 001C             		move.b	#0,$1C(a0)
0001AB6C 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AB74 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AB7A 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AB7E 4EB9 0000 AE1E             		jsr	AnimateSprite
0001AB84 6000 FF52                  		bra.w	loc_1A296
0001AB88                            ; ===========================================================================
0001AB88                            
0001AB88                            loc_1A346:				; XREF: Obj85_Index
0001AB88 08E8 0000 0022             		bset	#0,$22(a0)
0001AB8E 2268 0034                  		movea.l	$34(a0),a1
0001AB92 0CA9 0001 85CE 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AB9A 6700                       		beq.s	loc_1A35E
0001AB9C 6000 FF4A                  		bra.w	loc_1A2A6
0001ABA0                            ; ===========================================================================
0001ABA0                            
0001ABA0                            loc_1A35E:
0001ABA0 3169 0008 0008             		move.w	8(a1),8(a0)
0001ABA6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ABAC 4A28 001E                  		tst.b	$1E(a0)
0001ABB0 6600                       		bne.s	loc_1A376
0001ABB2 117C 0014 001E             		move.b	#$14,$1E(a0)
0001ABB8                            
0001ABB8                            loc_1A376:
0001ABB8 5328 001E                  		subq.b	#1,$1E(a0)
0001ABBC 6E00                       		bgt.s	loc_1A38A
0001ABBE 5228 001A                  		addq.b	#1,$1A(a0)
0001ABC2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001ABC8 6E00 F9CA                  		bgt.w	Obj85_Delete
0001ABCC                            
0001ABCC                            loc_1A38A:
0001ABCC 6000 FF0A                  		bra.w	loc_1A296
0001ABD0                            ; ===========================================================================
0001ABD0                            
0001ABD0                            loc_1A38E:				; XREF: Obj85_Index
0001ABD0 117C 000B 001A             		move.b	#$B,$1A(a0)
0001ABD6 3038 D008                  		move.w	($FFFFD008).w,d0
0001ABDA 9068 0008                  		sub.w	8(a0),d0
0001ABDE 6500                       		bcs.s	loc_1A3A6
0001ABE0 4A28 0001                  		tst.b	1(a0)
0001ABE4 6A00 F9AE                  		bpl.w	Obj85_Delete
0001ABE8                            
0001ABE8                            loc_1A3A6:
0001ABE8 4EF9 0000 DD5E             		jmp	DisplaySprite
0001ABEE                            ; ===========================================================================
0001ABEE                            
0001ABEE                            loc_1A3AC:				; XREF: Obj85_Index
0001ABEE 117C 0000 001A             		move.b	#0,$1A(a0)
0001ABF4 08E8 0000 0022             		bset	#0,$22(a0)
0001ABFA 2268 0034                  		movea.l	$34(a0),a1
0001ABFE 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AC04 6600                       		bne.s	loc_1A3D0
0001AC06 0CA9 0001 85CE 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AC0E 6700 F984                  		beq.w	Obj85_Delete
0001AC12                            
0001AC12                            loc_1A3D0:
0001AC12 6000 FED4                  		bra.w	loc_1A2A6
0001AC16                            ; ===========================================================================
0001AC16                            Ani_obj85:
0001AC16                            	include "_anim\obj85.asm"
0001AC16                            ; ---------------------------------------------------------------------------
0001AC16                            ; Animation script - Eggman (FZ)
0001AC16                            ; ---------------------------------------------------------------------------
0001AC16 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AC18 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AC1C                            		even
0001AC1C                            		even
0001AC1C                            
0001AC1C                            Map_Eggman2:
0001AC1C                            	include "_maps\Eggman2.asm"
0001AC1C                            ; ---------------------------------------------------------------------------
0001AC1C                            ; Sprite mappings - Eggman (FZ)
0001AC1C                            ; ---------------------------------------------------------------------------
0001AC1C 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AC1E 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AC20 06                         byte_1A3DE:	dc.b 6
0001AC21 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AC26 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AC2B EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AC30 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AC35 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AC3A 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AC3F 06                         byte_1A3FD:	dc.b 6
0001AC40 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AC45 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AC4A EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AC4F FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AC54 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AC59 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AC5E                            		even
0001AC5E                            		even
0001AC5E                            
0001AC5E                            Map_FZBoss:
0001AC5E                            	include "_maps\FZ boss.asm"
0001AC5E                            ; ---------------------------------------------------------------------------
0001AC5E                            ; Sprite mappings - boss (FZ)
0001AC5E                            ; ---------------------------------------------------------------------------
0001AC5E 0000                       		dc.w byte_1A422-Map_FZBoss
0001AC60 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AC62 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AC64 02                         byte_1A422:	dc.b 2
0001AC65 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AC6A 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AC6F 03                         byte_1A42D:	dc.b 3
0001AC70 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AC75 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AC7A 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AC7F 02                         byte_1A43D:	dc.b 2
0001AC80 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AC85 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AC8A                            		even
0001AC8A                            		even
0001AC8A                            
0001AC8A                            ; ===========================================================================
0001AC8A                            
0001AC8A                            Obj84_Delete:
0001AC8A 4EF9 0000 DD9A             		jmp	DeleteObject
0001AC90                            ; ===========================================================================
0001AC90                            ; ---------------------------------------------------------------------------
0001AC90                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AC90                            ; ---------------------------------------------------------------------------
0001AC90                            
0001AC90                            Obj84:					; XREF: Obj_Index
0001AC90 7000                       		moveq	#0,d0
0001AC92 1028 0024                  		move.b	$24(a0),d0
0001AC96 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AC9A 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AC9E                            ; ===========================================================================
0001AC9E 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001ACA0 0000                       		dc.w loc_1A4CE-Obj84_Index
0001ACA2 0000                       		dc.w loc_1A57E-Obj84_Index
0001ACA4                            
0001ACA4 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001ACA8 2550 0620                  		dc.w $2550, $620
0001ACAC 2490 04C0                  		dc.w $2490, $4C0
0001ACB0 2510 04C0                  		dc.w $2510, $4C0
0001ACB4                            ; ===========================================================================
0001ACB4                            
0001ACB4                            Obj84_Main:				; XREF: Obj84_Index
0001ACB4 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001ACB8 7000                       		moveq	#0,d0
0001ACBA 1028 0028                  		move.b	$28(a0),d0
0001ACBE D040                       		add.w	d0,d0
0001ACC0 D2C0                       		adda.w	d0,a1
0001ACC2 117C 0004 0001             		move.b	#4,1(a0)
0001ACC8 08E8 0007 0001             		bset	#7,1(a0)
0001ACCE 08E8 0004 0001             		bset	#4,1(a0)
0001ACD4 317C 0300 0002             		move.w	#$300,2(a0)
0001ACDA 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001ACE2 3159 0008                  		move.w	(a1)+,8(a0)
0001ACE6 3151 000C                  		move.w	(a1),$C(a0)
0001ACEA 3159 0038                  		move.w	(a1)+,$38(a0)
0001ACEE 117C 0020 0016             		move.b	#$20,$16(a0)
0001ACF4 117C 0060 0017             		move.b	#$60,$17(a0)
0001ACFA 117C 0020 0019             		move.b	#$20,$19(a0)
0001AD00 117C 0060 0016             		move.b	#$60,$16(a0)
0001AD06 117C 0003 0018             		move.b	#3,$18(a0)
0001AD0C 5428 0024                  		addq.b	#2,$24(a0)
0001AD10                            
0001AD10                            loc_1A4CE:				; XREF: Obj84_Index
0001AD10 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AD16 6F00                       		ble.s	loc_1A4DC
0001AD18 08E8 0001 0001             		bset	#1,1(a0)
0001AD1E                            
0001AD1E                            loc_1A4DC:
0001AD1E 42A8 003C                  		clr.l	$3C(a0)
0001AD22 4A28 0029                  		tst.b	$29(a0)
0001AD26 6700                       		beq.s	loc_1A4EA
0001AD28 5428 0024                  		addq.b	#2,$24(a0)
0001AD2C                            
0001AD2C                            loc_1A4EA:
0001AD2C 2028 003C                  		move.l	$3C(a0),d0
0001AD30 2228 0038                  		move.l	$38(a0),d1
0001AD34 D280                       		add.l	d0,d1
0001AD36 4841                       		swap	d1
0001AD38 3141 000C                  		move.w	d1,$C(a0)
0001AD3C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AD42 6600                       		bne.s	loc_1A524
0001AD44 4A68 0030                  		tst.w	$30(a0)
0001AD48 6A00                       		bpl.s	loc_1A524
0001AD4A 70F6                       		moveq	#-$A,d0
0001AD4C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AD52 6F00                       		ble.s	loc_1A514
0001AD54 700E                       		moveq	#$E,d0
0001AD56                            
0001AD56                            loc_1A514:
0001AD56 D240                       		add.w	d0,d1
0001AD58 2268 0034                  		movea.l	$34(a0),a1
0001AD5C 3341 000C                  		move.w	d1,$C(a1)
0001AD60 3368 0008 0008             		move.w	8(a0),8(a1)
0001AD66                            
0001AD66                            loc_1A524:
0001AD66 323C 002B                  		move.w	#$2B,d1
0001AD6A 343C 0060                  		move.w	#$60,d2
0001AD6E 363C 0061                  		move.w	#$61,d3
0001AD72 3828 0008                  		move.w	8(a0),d4
0001AD76 4EB9 0001 012E             		jsr	SolidObject
0001AD7C 7000                       		moveq	#0,d0
0001AD7E 3228 003C                  		move.w	$3C(a0),d1
0001AD82 6A00                       		bpl.s	loc_1A550
0001AD84 4441                       		neg.w	d1
0001AD86 5141                       		subq.w	#8,d1
0001AD88 6500                       		bcs.s	loc_1A55C
0001AD8A 5200                       		addq.b	#1,d0
0001AD8C E841                       		asr.w	#4,d1
0001AD8E D041                       		add.w	d1,d0
0001AD90 6000                       		bra.s	loc_1A55C
0001AD92                            ; ===========================================================================
0001AD92                            
0001AD92                            loc_1A550:
0001AD92 0441 0027                  		subi.w	#$27,d1
0001AD96 6500                       		bcs.s	loc_1A55C
0001AD98 5200                       		addq.b	#1,d0
0001AD9A E841                       		asr.w	#4,d1
0001AD9C D041                       		add.w	d1,d0
0001AD9E                            
0001AD9E                            loc_1A55C:
0001AD9E 1140 001A                  		move.b	d0,$1A(a0)
0001ADA2 3038 D008                  		move.w	($FFFFD008).w,d0
0001ADA6 9068 0008                  		sub.w	8(a0),d0
0001ADAA 6B00                       		bmi.s	loc_1A578
0001ADAC 0440 0140                  		subi.w	#$140,d0
0001ADB0 6B00                       		bmi.s	loc_1A578
0001ADB2 4A28 0001                  		tst.b	1(a0)
0001ADB6 6A00 FED2                  		bpl.w	Obj84_Delete
0001ADBA                            
0001ADBA                            loc_1A578:
0001ADBA 4EF9 0000 DD5E             		jmp	DisplaySprite
0001ADC0                            ; ===========================================================================
0001ADC0                            
0001ADC0                            loc_1A57E:				; XREF: Obj84_Index
0001ADC0 7000                       		moveq	#0,d0
0001ADC2 1028 0028                  		move.b	$28(a0),d0
0001ADC6 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001ADCA 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001ADCE 6000 FF5C                  		bra.w	loc_1A4EA
0001ADD2                            ; ===========================================================================
0001ADD2 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001ADD4 0000                       		dc.w loc_1A598-off_1A590
0001ADD6 0000                       		dc.w loc_1A604-off_1A590
0001ADD8 0000                       		dc.w loc_1A604-off_1A590
0001ADDA                            ; ===========================================================================
0001ADDA                            
0001ADDA                            loc_1A598:				; XREF: off_1A590
0001ADDA 4A28 0029                  		tst.b	$29(a0)
0001ADDE 6600                       		bne.s	loc_1A5D4
0001ADE0 2268 0034                  		movea.l	$34(a0),a1
0001ADE4 4A29 0021                  		tst.b	$21(a1)
0001ADE8 6600                       		bne.s	loc_1A5B4
0001ADEA 6100 D2FA                  		bsr.w	BossDefeated
0001ADEE 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001ADF6                            
0001ADF6                            loc_1A5B4:
0001ADF6 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001ADFE 6400                       		bcc.s	locret_1A602
0001AE00 42A8 003C                  		clr.l	$3C(a0)
0001AE04 2268 0034                  		movea.l	$34(a0),a1
0001AE08 5369 0032                  		subq.w	#1,$32(a1)
0001AE0C 4269 0030                  		clr.w	$30(a1)
0001AE10 5528 0024                  		subq.b	#2,$24(a0)
0001AE14 4E75                       		rts	
0001AE16                            ; ===========================================================================
0001AE16                            
0001AE16                            loc_1A5D4:
0001AE16 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AE1C 6C00                       		bge.s	loc_1A5E4
0001AE1E 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AE26                            
0001AE26                            loc_1A5E4:
0001AE26 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AE2E 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AE34 6E00                       		bgt.s	locret_1A602
0001AE36 4268 003E                  		clr.w	$3E(a0)
0001AE3A 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AE40 4228 0029                  		clr.b	$29(a0)
0001AE44                            
0001AE44                            locret_1A602:
0001AE44 4E75                       		rts	
0001AE46                            ; ===========================================================================
0001AE46                            
0001AE46                            loc_1A604:				; XREF: off_1A590
0001AE46 08E8 0001 0001             		bset	#1,1(a0)
0001AE4C 4A28 0029                  		tst.b	$29(a0)
0001AE50 6600                       		bne.s	loc_1A646
0001AE52 2268 0034                  		movea.l	$34(a0),a1
0001AE56 4A29 0021                  		tst.b	$21(a1)
0001AE5A 6600                       		bne.s	loc_1A626
0001AE5C 6100 D288                  		bsr.w	BossDefeated
0001AE60 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AE68                            
0001AE68                            loc_1A626:
0001AE68 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AE70 6400                       		bcc.s	locret_1A674
0001AE72 42A8 003C                  		clr.l	$3C(a0)
0001AE76 2268 0034                  		movea.l	$34(a0),a1
0001AE7A 5369 0032                  		subq.w	#1,$32(a1)
0001AE7E 4269 0030                  		clr.w	$30(a1)
0001AE82 5528 0024                  		subq.b	#2,$24(a0)
0001AE86 4E75                       		rts	
0001AE88                            ; ===========================================================================
0001AE88                            
0001AE88                            loc_1A646:
0001AE88 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AE8E 6D00                       		blt.s	loc_1A656
0001AE90 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AE98                            
0001AE98                            loc_1A656:
0001AE98 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AEA0 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AEA6 6D00                       		blt.s	locret_1A674
0001AEA8 4268 003E                  		clr.w	$3E(a0)
0001AEAC 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AEB2 4228 0029                  		clr.b	$29(a0)
0001AEB6                            
0001AEB6                            locret_1A674:
0001AEB6 4E75                       		rts	
0001AEB8                            ; ===========================================================================
0001AEB8                            ; ---------------------------------------------------------------------------
0001AEB8                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AEB8                            ; ---------------------------------------------------------------------------
0001AEB8                            Map_obj84:
0001AEB8                            	include "_maps\obj84.asm"
0001AEB8                            ; ---------------------------------------------------------------------------
0001AEB8                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AEB8                            ; ---------------------------------------------------------------------------
0001AEB8 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AEBC 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AEC0 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AEC4 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AEC8 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AECC 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AED0 06                         byte_1A68E:	dc.b 6
0001AED1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AED6 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AEDB B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AEE0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AEE5 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AEEA B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AEEF 08                         byte_1A6AD:	dc.b 8
0001AEF0 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AEF5 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AEFA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AEFF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF04 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF09 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF0E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF13 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF18 0A                         byte_1A6D6:	dc.b $A
0001AF19 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF1E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF23 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF28 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF2D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF32 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF37 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF3C D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF41 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AF46 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF4B 0C                         byte_1A709:	dc.b $C
0001AF4C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF51 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF56 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF5B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF60 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF65 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF6A D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF6F D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF74 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AF79 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF7E 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AF83 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AF88 0D                         byte_1A746:	dc.b $D
0001AF89 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF8E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF93 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF98 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF9D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFA2 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFA7 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFAC D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFB1 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AFB6 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AFBB 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AFC0 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AFC5 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AFCA 0E                         byte_1A788:	dc.b $E
0001AFCB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFD0 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFD5 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFDA B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFDF B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFE4 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFE9 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFEE D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFF3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AFF8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AFFD 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B002 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B007 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B00C 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B011 02                         byte_1A7CF:	dc.b 2
0001B012 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B017 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B01C                            		even
0001B01C                            		even
0001B01C                            
0001B01C                            ; ===========================================================================
0001B01C                            ; ---------------------------------------------------------------------------
0001B01C                            ; Object 86 - energy balls (FZ)
0001B01C                            ; ---------------------------------------------------------------------------
0001B01C                            
0001B01C                            Obj86:					; XREF: Obj_Index
0001B01C 7000                       		moveq	#0,d0
0001B01E 1028 0024                  		move.b	$24(a0),d0
0001B022 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B026 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B02A                            ; ===========================================================================
0001B02A 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B02C 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B02E 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B030 0000                       		dc.w loc_1A962-Obj86_Index
0001B032 0000                       		dc.w loc_1A982-Obj86_Index
0001B034                            ; ===========================================================================
0001B034                            
0001B034                            Obj86_Main:				; XREF: Obj86_Index
0001B034 317C 2588 0008             		move.w	#$2588,8(a0)
0001B03A 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B040 317C 0300 0002             		move.w	#$300,2(a0)
0001B046 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B04E 117C 0000 001C             		move.b	#0,$1C(a0)
0001B054 117C 0003 0018             		move.b	#3,$18(a0)
0001B05A 117C 0008 0017             		move.b	#8,$17(a0)
0001B060 117C 0008 0016             		move.b	#8,$16(a0)
0001B066 117C 0004 0001             		move.b	#4,1(a0)
0001B06C 08E8 0007 0001             		bset	#7,1(a0)
0001B072 5428 0024                  		addq.b	#2,$24(a0)
0001B076                            
0001B076                            Obj86_Generator:			; XREF: Obj86_Index
0001B076 2268 0034                  		movea.l	$34(a0),a1
0001B07A 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B080 6600                       		bne.s	loc_1A850
0001B082 10BC 003F                  		move.b	#$3F,(a0)
0001B086 117C 0000 0024             		move.b	#0,$24(a0)
0001B08C 4EF9 0000 DD5E             		jmp	DisplaySprite
0001B092                            ; ===========================================================================
0001B092                            
0001B092                            loc_1A850:
0001B092 117C 0000 001C             		move.b	#0,$1C(a0)
0001B098 4A28 0029                  		tst.b	$29(a0)
0001B09C 6700                       		beq.s	loc_1A86C
0001B09E 5428 0024                  		addq.b	#2,$24(a0)
0001B0A2 117C 0001 001C             		move.b	#1,$1C(a0)
0001B0A8 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B0AE                            
0001B0AE                            loc_1A86C:
0001B0AE 323C 0013                  		move.w	#$13,d1
0001B0B2 343C 0008                  		move.w	#8,d2
0001B0B6 363C 0011                  		move.w	#$11,d3
0001B0BA 3828 0008                  		move.w	8(a0),d4
0001B0BE 4EB9 0001 012E             		jsr	SolidObject
0001B0C4 3038 D008                  		move.w	($FFFFD008).w,d0
0001B0C8 9068 0008                  		sub.w	8(a0),d0
0001B0CC 6B00                       		bmi.s	loc_1A89A
0001B0CE 0440 0140                  		subi.w	#$140,d0
0001B0D2 6B00                       		bmi.s	loc_1A89A
0001B0D4 4A28 0001                  		tst.b	1(a0)
0001B0D8 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B0DC                            
0001B0DC                            loc_1A89A:
0001B0DC 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B0E0 4EB9 0000 AE1E             		jsr	AnimateSprite
0001B0E6 4EF9 0000 DD5E             		jmp	DisplaySprite
0001B0EC                            ; ===========================================================================
0001B0EC                            
0001B0EC                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B0EC 4A28 0029                  		tst.b	$29(a0)
0001B0F0 6700 0000                  		beq.w	loc_1A954
0001B0F4 4228 0029                  		clr.b	$29(a0)
0001B0F8 D068 0030                  		add.w	$30(a0),d0
0001B0FC 0240 001E                  		andi.w	#$1E,d0
0001B100 D4C0                       		adda.w	d0,a2
0001B102 5868 0030                  		addq.w	#4,$30(a0)
0001B106 4268 0032                  		clr.w	$32(a0)
0001B10A 7403                       		moveq	#3,d2
0001B10C                            
0001B10C                            Obj86_Loop:
0001B10C 4EB9 0000 E1FA             		jsr	SingleObjLoad2
0001B112 6600 0000                  		bne.w	loc_1A954
0001B116 12BC 0086                  		move.b	#$86,(a1)
0001B11A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B120 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B126 137C 0008 0024             		move.b	#8,$24(a1)
0001B12C 337C 2300 0002             		move.w	#$2300,2(a1)
0001B132 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B13A 137C 000C 0016             		move.b	#$C,$16(a1)
0001B140 137C 000C 0017             		move.b	#$C,$17(a1)
0001B146 137C 0000 0020             		move.b	#0,$20(a1)
0001B14C 137C 0003 0018             		move.b	#3,$18(a1)
0001B152 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B158 137C 0004 0001             		move.b	#4,1(a1)
0001B15E 08E9 0007 0001             		bset	#7,1(a1)
0001B164 2348 0034                  		move.l	a0,$34(a1)
0001B168 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B16E 3228 0032                  		move.w	$32(a0),d1
0001B172 C3FC FFB1                  		muls.w	#-$4F,d1
0001B176 0641 2578                  		addi.w	#$2578,d1
0001B17A 0240 001F                  		andi.w	#$1F,d0
0001B17E 0440 0010                  		subi.w	#$10,d0
0001B182 D041                       		add.w	d1,d0
0001B184 3340 0030                  		move.w	d0,$30(a1)
0001B188 5268 0032                  		addq.w	#1,$32(a0)
0001B18C 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B192 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B196                            
0001B196                            loc_1A954:
0001B196 4A68 0032                  		tst.w	$32(a0)
0001B19A 6600                       		bne.s	loc_1A95E
0001B19C 5428 0024                  		addq.b	#2,$24(a0)
0001B1A0                            
0001B1A0                            loc_1A95E:
0001B1A0 6000 FF0C                  		bra.w	loc_1A86C
0001B1A4                            ; ===========================================================================
0001B1A4                            
0001B1A4                            loc_1A962:				; XREF: Obj86_Index
0001B1A4 117C 0002 001C             		move.b	#2,$1C(a0)
0001B1AA 4A68 0038                  		tst.w	$38(a0)
0001B1AE 6600                       		bne.s	loc_1A97E
0001B1B0 117C 0002 0024             		move.b	#2,$24(a0)
0001B1B6 2268 0034                  		movea.l	$34(a0),a1
0001B1BA 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B1C0                            
0001B1C0                            loc_1A97E:
0001B1C0 6000 FEEC                  		bra.w	loc_1A86C
0001B1C4                            ; ===========================================================================
0001B1C4                            
0001B1C4                            loc_1A982:				; XREF: Obj86_Index
0001B1C4 7000                       		moveq	#0,d0
0001B1C6 1028 0025                  		move.b	$25(a0),d0
0001B1CA 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B1CE 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B1D2 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B1D6 4EB9 0000 AE1E             		jsr	AnimateSprite
0001B1DC 4EF9 0000 DD5E             		jmp	DisplaySprite
0001B1E2                            ; ===========================================================================
0001B1E2 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B1E4 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B1E6 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B1E8                            ; ===========================================================================
0001B1E8                            
0001B1E8                            loc_1A9A6:				; XREF: Obj86_Index2
0001B1E8 3028 0030                  		move.w	$30(a0),d0
0001B1EC 9068 0008                  		sub.w	8(a0),d0
0001B1F0 E940                       		asl.w	#4,d0
0001B1F2 3140 0010                  		move.w	d0,$10(a0)
0001B1F6 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B1FC 5428 0025                  		addq.b	#2,$25(a0)
0001B200 4E75                       		rts	
0001B202                            ; ===========================================================================
0001B202                            
0001B202                            loc_1A9C0:				; XREF: Obj86_Index2
0001B202 4A68 0010                  		tst.w	$10(a0)
0001B206 6700                       		beq.s	loc_1A9E6
0001B208 4EB9 0000 DD38             		jsr	SpeedToPos
0001B20E 3028 0008                  		move.w	8(a0),d0
0001B212 9068 0030                  		sub.w	$30(a0),d0
0001B216 6400                       		bcc.s	loc_1A9E6
0001B218 4268 0010                  		clr.w	$10(a0)
0001B21C D168 0008                  		add.w	d0,8(a0)
0001B220 2268 0034                  		movea.l	$34(a0),a1
0001B224 5369 0032                  		subq.w	#1,$32(a1)
0001B228                            
0001B228                            loc_1A9E6:
0001B228 117C 0000 001C             		move.b	#0,$1C(a0)
0001B22E 5368 0028                  		subq.w	#1,$28(a0)
0001B232 6600                       		bne.s	locret_1AA1C
0001B234 5428 0025                  		addq.b	#2,$25(a0)
0001B238 117C 0001 001C             		move.b	#1,$1C(a0)
0001B23E 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B244 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B24A 7000                       		moveq	#0,d0
0001B24C 3038 D008                  		move.w	($FFFFD008).w,d0
0001B250 9068 0008                  		sub.w	8(a0),d0
0001B254 3140 0010                  		move.w	d0,$10(a0)
0001B258 317C 0140 0012             		move.w	#$140,$12(a0)
0001B25E                            
0001B25E                            locret_1AA1C:
0001B25E 4E75                       		rts	
0001B260                            ; ===========================================================================
0001B260                            
0001B260                            loc_1AA1E:				; XREF: Obj86_Index2
0001B260 4EB9 0000 DD38             		jsr	SpeedToPos
0001B266 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B26C 6400                       		bcc.s	loc_1AA34
0001B26E 5368 0028                  		subq.w	#1,$28(a0)
0001B272 6700                       		beq.s	loc_1AA34
0001B274 4E75                       		rts	
0001B276                            ; ===========================================================================
0001B276                            
0001B276                            loc_1AA34:
0001B276 2268 0034                  		movea.l	$34(a0),a1
0001B27A 5369 0038                  		subq.w	#1,$38(a1)
0001B27E 6000 FA0A                  		bra.w	Obj84_Delete
0001B282                            ; ===========================================================================
0001B282                            Ani_obj86:
0001B282                            	include "_anim\obj86.asm"
0001B282                            ; ---------------------------------------------------------------------------
0001B282                            ; Animation script - energy ball launcher (FZ)
0001B282                            ; ---------------------------------------------------------------------------
0001B282 0000                       		dc.w byte_1AA46-Ani_obj86
0001B284 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B286 0000                       		dc.w byte_1AA50-Ani_obj86
0001B288 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B28C 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B292 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B298                            		even
0001B298                            		even
0001B298                            
0001B298                            ; ---------------------------------------------------------------------------
0001B298                            ; Sprite mappings - energy ball	launcher (FZ)
0001B298                            ; ---------------------------------------------------------------------------
0001B298                            Map_obj86:
0001B298                            	include "_maps\obj86.asm"
0001B298                            ; ---------------------------------------------------------------------------
0001B298                            ; Sprite mappings - energy ball	launcher (FZ)
0001B298                            ; ---------------------------------------------------------------------------
0001B298 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B29C 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B2A0 01                         byte_1AA5E:	dc.b 1
0001B2A1 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B2A6 01                         byte_1AA64:	dc.b 1
0001B2A7 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B2AC 01                         byte_1AA6A:	dc.b 1
0001B2AD F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B2B2 01                         byte_1AA70:	dc.b 1
0001B2B3 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B2B8                            		even
0001B2B8                            		even
0001B2B8                            
0001B2B8                            Ani_obj86a:
0001B2B8                            	include "_anim\obj86a.asm"
0001B2B8                            ; ---------------------------------------------------------------------------
0001B2B8                            ; Animation script - energy balls (FZ)
0001B2B8                            ; ---------------------------------------------------------------------------
0001B2B8 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B2BA 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B2BC 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B2CB 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B2DA 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B2DE 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B2E8                            		even
0001B2E8                            		even
0001B2E8                            
0001B2E8                            ; ---------------------------------------------------------------------------
0001B2E8                            ; Sprite mappings - energy balls (FZ)
0001B2E8                            ; ---------------------------------------------------------------------------
0001B2E8                            Map_obj86a:
0001B2E8                            	include "_maps\obj86a.asm"
0001B2E8                            ; ---------------------------------------------------------------------------
0001B2E8                            ; Sprite mappings - energy balls (FZ)
0001B2E8                            ; ---------------------------------------------------------------------------
0001B2E8 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B2EC 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B2F0 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B2F4 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B2F8 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B2FC 0000                       		dc.w byte_1AB20-Map_obj86a
0001B2FE 02                         byte_1AABC:	dc.b 2
0001B2FF F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B304 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B309 02                         byte_1AAC7:	dc.b 2
0001B30A F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B30F F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B314 02                         byte_1AAD2:	dc.b 2
0001B315 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B31A 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B31F 02                         byte_1AADD:	dc.b 2
0001B320 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B325 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B32A 02                         byte_1AAE8:	dc.b 2
0001B32B F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B330 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B335 02                         byte_1AAF3:	dc.b 2
0001B336 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B33B F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B340 01                         byte_1AAFE:	dc.b 1
0001B341 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B346 01                         byte_1AB04:	dc.b 1
0001B347 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B34C 02                         byte_1AB0A:	dc.b 2
0001B34D F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B352 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B357 02                         byte_1AB15:	dc.b 2
0001B358 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B35D F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B362 00                         byte_1AB20:	dc.b 0
0001B364 00                         		even
0001B364 00                         		even
0001B364                            
0001B364                            ; ===========================================================================
0001B364                            ; ---------------------------------------------------------------------------
0001B364                            ; Object 3E - prison capsule
0001B364                            ; ---------------------------------------------------------------------------
0001B364                            
0001B364                            Obj3E:					; XREF: Obj_Index
0001B364 7000                       		moveq	#0,d0
0001B366 1028 0024                  		move.b	$24(a0),d0
0001B36A 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B36E 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B372 3028 0008                  		move.w	8(a0),d0
0001B376 0240 FF80                  		andi.w	#$FF80,d0
0001B37A 3238 F700                  		move.w	($FFFFF700).w,d1
0001B37E 0441 0080                  		subi.w	#$80,d1
0001B382 0241 FF80                  		andi.w	#$FF80,d1
0001B386 9041                       		sub.w	d1,d0
0001B388 0C40 0280                  		cmpi.w	#$280,d0
0001B38C 6200                       		bhi.s	Obj3E_Delete
0001B38E 4EF9 0000 DD5E             		jmp	DisplaySprite
0001B394                            ; ===========================================================================
0001B394                            
0001B394                            Obj3E_Delete:
0001B394 4EF9 0000 DD9A             		jmp	DeleteObject
0001B39A                            ; ===========================================================================
0001B39A 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B39C 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B39E 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B3A0 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B3A2 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B3A4 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B3A6 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B3A8 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B3AA                            
0001B3AA 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B3AE 040C 0501                  		dc.b 4,	$C, 5, 1
0001B3B2 0610 0403                  		dc.b 6,	$10, 4,	3
0001B3B6 0810 0305                  		dc.b 8,	$10, 3,	5
0001B3BA                            ; ===========================================================================
0001B3BA                            
0001B3BA                            Obj3E_Main:				; XREF: Obj3E_Index
0001B3BA 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B3C2 317C 049D 0002             		move.w	#$49D,2(a0)
0001B3C8 117C 0004 0001             		move.b	#4,1(a0)
0001B3CE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B3D4 7000                       		moveq	#0,d0
0001B3D6 1028 0028                  		move.b	$28(a0),d0
0001B3DA E548                       		lsl.w	#2,d0
0001B3DC 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B3E0 1159 0024                  		move.b	(a1)+,$24(a0)
0001B3E4 1159 0019                  		move.b	(a1)+,$19(a0)
0001B3E8 1159 0018                  		move.b	(a1)+,$18(a0)
0001B3EC 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B3F0 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B3F4 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B3F6 117C 0006 0020             		move.b	#6,$20(a0)
0001B3FC 117C 0008 0021             		move.b	#8,$21(a0)
0001B402                            
0001B402                            Obj3E_Not02:
0001B402 4E75                       		rts	
0001B404                            ; ===========================================================================
0001B404                            
0001B404                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B404 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B40A 6700                       		beq.s	Obj3E_ChkOpened
0001B40C 323C 002B                  		move.w	#$2B,d1
0001B410 343C 0018                  		move.w	#$18,d2
0001B414 363C 0018                  		move.w	#$18,d3
0001B418 3828 0008                  		move.w	8(a0),d4
0001B41C 4EF9 0001 012E             		jmp	SolidObject
0001B422                            ; ===========================================================================
0001B422                            
0001B422                            Obj3E_ChkOpened:
0001B422 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B426 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B428 4228 0025                  		clr.b	$25(a0)
0001B42C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B432 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B438                            
0001B438                            Obj3E_DoOpen:
0001B438 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B43E 4E75                       		rts	
0001B440                            ; ===========================================================================
0001B440                            
0001B440                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B440 323C 0017                  		move.w	#$17,d1
0001B444 343C 0008                  		move.w	#8,d2
0001B448 363C 0008                  		move.w	#8,d3
0001B44C 3828 0008                  		move.w	8(a0),d4
0001B450 4EB9 0001 012E             		jsr	SolidObject
0001B456 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B45C 4EB9 0000 AE1E             		jsr	AnimateSprite
0001B462 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B468 4A28 0025                  		tst.b	$25(a0)
0001B46C 6700                       		beq.s	locret_1AC60
0001B46E 5068 000C                  		addq.w	#8,$C(a0)
0001B472 117C 000A 0024             		move.b	#$A,$24(a0)
0001B478 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B47E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B482 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B486 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B48C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B492 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B494 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B49A 6000                       		bra.s	Obj3E_ContinueCode
0001B49C                            
0001B49C                            Obj3E_MoveLeft:
0001B49C 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B4A2                            
0001B4A2                            Obj3E_ContinueCode:
0001B4A2 4228 0025                  		clr.b	$25(a0)
0001B4A6 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B4AC 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B4B2                            
0001B4B2                            locret_1AC60:
0001B4B2 4E75                       		rts	
0001B4B4                            ; ===========================================================================
0001B4B4                            
0001B4B4                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B4B4 7007                       		moveq	#7,d0
0001B4B6 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B4BA 6600                       		bne.s	loc_1ACA0
0001B4BC 4EB9 0000 E1E4             		jsr	SingleObjLoad
0001B4C2 6600                       		bne.s	loc_1ACA0
0001B4C4 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B4C8 3368 0008 0008             		move.w	8(a0),8(a1)
0001B4CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B4D4 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B4DA 7200                       		moveq	#0,d1
0001B4DC 1200                       		move.b	d0,d1
0001B4DE E409                       		lsr.b	#2,d1
0001B4E0 0441 0020                  		subi.w	#$20,d1
0001B4E4 D369 0008                  		add.w	d1,8(a1)
0001B4E8 E048                       		lsr.w	#8,d0
0001B4EA E608                       		lsr.b	#3,d0
0001B4EC D169 000C                  		add.w	d0,$C(a1)
0001B4F0                            
0001B4F0                            loc_1ACA0:
0001B4F0 5368 001E                  		subq.w	#1,$1E(a0)
0001B4F4 6700                       		beq.s	Obj3E_MakeAnimal
0001B4F6 4E75                       		rts	
0001B4F8                            ; ===========================================================================
0001B4F8                            
0001B4F8                            Obj3E_MakeAnimal:
0001B4F8 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B4FE 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B504 117C 0006 001A             		move.b	#6,$1A(a0)
0001B50A 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B510 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B516 7C07                       		moveq	#7,d6
0001B518 3A3C 009A                  		move.w	#$9A,d5
0001B51C 78E4                       		moveq	#-$1C,d4
0001B51E                            
0001B51E                            Obj3E_Loop:
0001B51E 4EB9 0000 E1E4             		jsr	SingleObjLoad
0001B524 6600                       		bne.s	locret_1ACF8
0001B526 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B52A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B530 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B536 D969 0008                  		add.w	d4,8(a1)
0001B53A 5E44                       		addq.w	#7,d4
0001B53C 3345 0036                  		move.w	d5,$36(a1)
0001B540 5145                       		subq.w	#8,d5
0001B542 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B546                            
0001B546                            locret_1ACF8:
0001B546 4E75                       		rts	
0001B548                            ; ===========================================================================
0001B548                            
0001B548                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B548 7007                       		moveq	#7,d0
0001B54A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B54E 6600                       		bne.s	loc_1AD38
0001B550 4EB9 0000 E1E4             		jsr	SingleObjLoad
0001B556 6600                       		bne.s	loc_1AD38
0001B558 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B55C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B562 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B568 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B56E 0240 001F                  		andi.w	#$1F,d0
0001B572 5D40                       		subq.w	#6,d0
0001B574 4A41                       		tst.w	d1
0001B576 6A00                       		bpl.s	loc_1AD2E
0001B578 4440                       		neg.w	d0
0001B57A                            
0001B57A                            loc_1AD2E:
0001B57A D169 0008                  		add.w	d0,8(a1)
0001B57E 337C 000C 0036             		move.w	#$C,$36(a1)
0001B584                            
0001B584                            loc_1AD38:
0001B584 5368 001E                  		subq.w	#1,$1E(a0)
0001B588 6600                       		bne.s	locret_1AD48
0001B58A 5428 0024                  		addq.b	#2,$24(a0)
0001B58E 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B594                            
0001B594                            locret_1AD48:
0001B594 4E75                       		rts	
0001B596                            ; ===========================================================================
0001B596                            
0001B596                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B596 703E                       		moveq	#$3E,d0
0001B598 7228                       		moveq	#$28,d1
0001B59A 7440                       		moveq	#$40,d2
0001B59C 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B5A0                            
0001B5A0                            Obj3E_FindObj28:
0001B5A0 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B5A2 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B5A4 D2C2                       		adda.w	d2,a1		; next object RAM
0001B5A6 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B5AA                            
0001B5AA 4EB9 0000 F3EA             		jsr	GotThroughAct
0001B5B0 4EF9 0000 DD9A             		jmp	DeleteObject
0001B5B6                            ; ===========================================================================
0001B5B6                            
0001B5B6                            Obj3E_Obj28Found:
0001B5B6 4E75                       		rts	
0001B5B8                            ; ===========================================================================
0001B5B8                            Ani_obj3E:
0001B5B8                            	include "_anim\obj3E.asm"
0001B5B8                            ; ---------------------------------------------------------------------------
0001B5B8                            ; Animation script - prison capsule
0001B5B8                            ; ---------------------------------------------------------------------------
0001B5B8 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B5BA 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B5BC 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B5C0                            		even
0001B5C0                            		even
0001B5C0                            
0001B5C0                            ; ---------------------------------------------------------------------------
0001B5C0                            ; Sprite mappings - prison capsule
0001B5C0                            ; ---------------------------------------------------------------------------
0001B5C0                            Map_obj3E:
0001B5C0                            	include "_maps\obj3E.asm"
0001B5C0                            ; ---------------------------------------------------------------------------
0001B5C0                            ; Sprite mappings - prison capsule
0001B5C0                            ; ---------------------------------------------------------------------------
0001B5C0 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B5C4 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B5C8 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B5CC 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B5CE 07                         byte_1AD82:	dc.b 7
0001B5CF E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B5D4 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B5D9 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B5DE F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B5E3 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B5E8 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B5ED 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B5F2 01                         byte_1ADA6:	dc.b 1
0001B5F3 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B5F8 06                         byte_1ADAC:	dc.b 6
0001B5F9 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B5FE 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B603 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B608 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B60D 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B612 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B617 01                         byte_1ADCB:	dc.b 1
0001B618 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B61D 02                         byte_1ADD1:	dc.b 2
0001B61E E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B623 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B628 01                         byte_1ADDC:	dc.b 1
0001B629 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B62E 00                         byte_1ADE2:	dc.b 0
0001B630 00                         		even
0001B630 00                         		even
0001B630                            
0001B630                            ; ---------------------------------------------------------------------------
0001B630                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B630                            ; ---------------------------------------------------------------------------
0001B630                            
0001B630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B630                            
0001B630                            
0001B630                            TouchResponse:				; XREF: Obj01
0001B630 4E71                       		nop	
0001B632 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B636 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B63A 5142                       		subq.w	#8,d2
0001B63C 7A00                       		moveq	#0,d5
0001B63E 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B642 5705                       		subq.b	#3,d5
0001B644 9645                       		sub.w	d5,d3
0001B646 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B64C 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B64E 0643 000C                  		addi.w	#$C,d3
0001B652 7A0A                       		moveq	#$A,d5
0001B654                            
0001B654                            Touch_NoDuck:
0001B654 383C 0010                  		move.w	#$10,d4
0001B658 DA45                       		add.w	d5,d5
0001B65A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B65E 3C3C 005F                  		move.w	#$5F,d6
0001B662                            
0001B662                            Touch_Loop:
0001B662 4A29 0001                  		tst.b	1(a1)
0001B666 6A00                       		bpl.s	Touch_NextObj
0001B668 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B66C 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B66E                            
0001B66E                            Touch_NextObj:
0001B66E 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B672 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B676                            
0001B676 7000                       		moveq	#0,d0
0001B678 4E75                       		rts	
0001B67A                            ; ===========================================================================
0001B67A 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B67C 0C14                       		dc.b   $C, $14
0001B67E 140C                       		dc.b  $14,  $C
0001B680 0410                       		dc.b	4, $10
0001B682 0C12                       		dc.b   $C, $12
0001B684 1010                       		dc.b  $10, $10
0001B686 0606                       		dc.b	6,   6
0001B688 180C                       		dc.b  $18,  $C
0001B68A 0C10                       		dc.b   $C, $10
0001B68C 100C                       		dc.b  $10,  $C
0001B68E 0808                       		dc.b	8,   8
0001B690 1410                       		dc.b  $14, $10
0001B692 1408                       		dc.b  $14,   8
0001B694 0E0E                       		dc.b   $E,  $E
0001B696 1818                       		dc.b  $18, $18
0001B698 2810                       		dc.b  $28, $10
0001B69A 1018                       		dc.b  $10, $18
0001B69C 0810                       		dc.b	8, $10
0001B69E 2070                       		dc.b  $20, $70
0001B6A0 4020                       		dc.b  $40, $20
0001B6A2 8020                       		dc.b  $80, $20
0001B6A4 2020                       		dc.b  $20, $20
0001B6A6 0808                       		dc.b	8,   8
0001B6A8 0404                       		dc.b	4,   4
0001B6AA 2008                       		dc.b  $20,   8
0001B6AC 0C0C                       		dc.b   $C,  $C
0001B6AE 0804                       		dc.b	8,   4
0001B6B0 1804                       		dc.b  $18,   4
0001B6B2 2804                       		dc.b  $28,   4
0001B6B4 0408                       		dc.b	4,   8
0001B6B6 0418                       		dc.b	4, $18
0001B6B8 0428                       		dc.b	4, $28
0001B6BA 0420                       		dc.b	4, $20
0001B6BC 1818                       		dc.b  $18, $18
0001B6BE 0C18                       		dc.b   $C, $18
0001B6C0 4808                       		dc.b  $48,   8
0001B6C2                            ; ===========================================================================
0001B6C2                            
0001B6C2                            Touch_Height:				; XREF: TouchResponse
0001B6C2 0240 003F                  		andi.w	#$3F,d0
0001B6C6 D040                       		add.w	d0,d0
0001B6C8 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B6CC 7200                       		moveq	#0,d1
0001B6CE 121A                       		move.b	(a2)+,d1
0001B6D0 3029 0008                  		move.w	8(a1),d0
0001B6D4 9041                       		sub.w	d1,d0
0001B6D6 9042                       		sub.w	d2,d0
0001B6D8 6400                       		bcc.s	loc_1AE98
0001B6DA D241                       		add.w	d1,d1
0001B6DC D041                       		add.w	d1,d0
0001B6DE 6500                       		bcs.s	Touch_Width
0001B6E0 6000 FF8C                  		bra.w	Touch_NextObj
0001B6E4                            ; ===========================================================================
0001B6E4                            
0001B6E4                            loc_1AE98:
0001B6E4 B044                       		cmp.w	d4,d0
0001B6E6 6200 FF86                  		bhi.w	Touch_NextObj
0001B6EA                            
0001B6EA                            Touch_Width:
0001B6EA 7200                       		moveq	#0,d1
0001B6EC 121A                       		move.b	(a2)+,d1
0001B6EE 3029 000C                  		move.w	$C(a1),d0
0001B6F2 9041                       		sub.w	d1,d0
0001B6F4 9043                       		sub.w	d3,d0
0001B6F6 6400                       		bcc.s	loc_1AEB6
0001B6F8 D241                       		add.w	d1,d1
0001B6FA D240                       		add.w	d0,d1
0001B6FC 6500                       		bcs.s	Touch_ChkValue
0001B6FE 6000 FF6E                  		bra.w	Touch_NextObj
0001B702                            ; ===========================================================================
0001B702                            
0001B702                            loc_1AEB6:
0001B702 B045                       		cmp.w	d5,d0
0001B704 6200 FF68                  		bhi.w	Touch_NextObj
0001B708                            
0001B708                            Touch_ChkValue:
0001B708 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B70C 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B710 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B714 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B718 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B71C 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B71E 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B722                            
0001B722                            ; touch	response is $40-$7F
0001B722                            
0001B722 1029 0020                  		move.b	$20(a1),d0
0001B726 0200 003F                  		andi.b	#$3F,d0
0001B72A 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B72E 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B730 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B736 6400 0000                  		bcc.w	locret_1AEF2
0001B73A 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B73E                            
0001B73E                            locret_1AEF2:
0001B73E 4E75                       		rts	
0001B740                            ; ===========================================================================
0001B740                            
0001B740                            Touch_Monitor:
0001B740 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B744 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B746 3028 000C                  		move.w	$C(a0),d0
0001B74A 0440 0010                  		subi.w	#$10,d0
0001B74E B069 000C                  		cmp.w	$C(a1),d0
0001B752 6500                       		bcs.s	locret_1AF2E
0001B754 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B758 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B75E 4A29 0025                  		tst.b	$25(a1)
0001B762 6600                       		bne.s	locret_1AF2E
0001B764 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B768 4E75                       		rts	
0001B76A                            ; ===========================================================================
0001B76A                            
0001B76A                            loc_1AF1E:
0001B76A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B770 6600                       		bne.s	locret_1AF2E
0001B772 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B776 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B77A                            
0001B77A                            locret_1AF2E:
0001B77A 4E75                       		rts	
0001B77C                            ; ===========================================================================
0001B77C                            
0001B77C                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B77C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B780 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B782 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B788 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B78C                            
0001B78C                            loc_1AF40:
0001B78C 4A29 0021                  		tst.b	$21(a1)
0001B790 6700                       		beq.s	Touch_KillEnemy
0001B792 4468 0010                  		neg.w	$10(a0)
0001B796 4468 0012                  		neg.w	$12(a0)
0001B79A E0E8 0010                  		asr	$10(a0)
0001B79E E0E8 0012                  		asr	$12(a0)
0001B7A2 137C 0000 0020             		move.b	#0,$20(a1)
0001B7A8 5329 0021                  		subq.b	#1,$21(a1)
0001B7AC 6600                       		bne.s	locret_1AF68
0001B7AE 08E9 0007 0022             		bset	#7,$22(a1)
0001B7B4                            
0001B7B4                            locret_1AF68:
0001B7B4 4E75                       		rts	
0001B7B6                            ; ===========================================================================
0001B7B6                            
0001B7B6                            Touch_KillEnemy:
0001B7B6 08E9 0007 0022             		bset	#7,$22(a1)
0001B7BC 7000                       		moveq	#0,d0
0001B7BE 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B7C2 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B7C6 0C40 0006                  		cmpi.w	#6,d0
0001B7CA 6500                       		bcs.s	loc_1AF82
0001B7CC 7006                       		moveq	#6,d0
0001B7CE                            
0001B7CE                            loc_1AF82:
0001B7CE 3340 003E                  		move.w	d0,$3E(a1)
0001B7D2 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B7D6 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B7DC 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B7DE 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B7E2 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B7E8                            
0001B7E8                            loc_1AF9C:
0001B7E8 6100 0000                  		bsr.w	AddPoints
0001B7EC 7400                       		moveq	#0,d2	; GMZ
0001B7EE 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B7F0 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B7F2                            
0001B7F2                            TouchKE_Explode:
0001B7F2 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B7F6 137C 0000 0024             		move.b	#0,$24(a1)
0001B7FC 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B800                            
0001B800                            TouchKE_NextExplosion:
0001B800 5802                       		addq.b	#4,d2
0001B802 4EB9 0000 E1E4             		jsr	SingleObjLoad
0001B808 6600                       		bne.s	TouchKE_NoExplosion
0001B80A 336A 0008 0008             		move.w	8(a2),8(a1)
0001B810 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B816 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B81A                            
0001B81A                            TouchKE_NoExplosion:
0001B81A 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B81C 4A68 0012                  		tst.w	$12(a0)
0001B820 6B00                       		bmi.s	loc_1AFC2
0001B822 3028 000C                  		move.w	$C(a0),d0
0001B826 B069 000C                  		cmp.w	$C(a1),d0
0001B82A 6400                       		bcc.s	loc_1AFCA
0001B82C 4468 0012                  		neg.w	$12(a0)
0001B830 4E75                       		rts	
0001B832                            ; ===========================================================================
0001B832                            
0001B832                            loc_1AFC2:
0001B832 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B838 4E75                       		rts	
0001B83A                            ; ===========================================================================
0001B83A                            
0001B83A                            loc_1AFCA:
0001B83A 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B840 4E75                       		rts	
0001B842                            ; ===========================================================================
0001B842 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B84A                            ; ===========================================================================
0001B84A                            
0001B84A                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B84A 08E9 0007 0022             		bset	#7,$22(a1)
0001B850                            
0001B850                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B850 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B854 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B856                            
0001B856                            loc_1AFE6:				; XREF: Touch_Hurt
0001B856 70FF                       		moveq	#-1,d0
0001B858 4E75                       		rts	
0001B85A                            ; ===========================================================================
0001B85A                            
0001B85A                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B85A 4E71                       		nop	
0001B85C 4A68 0030                  		tst.w	$30(a0)
0001B860 66F4                       		bne.s	loc_1AFE6
0001B862 2449                       		movea.l	a1,a2
0001B864                            
0001B864                            ; End of function TouchResponse
0001B864                            ; continue straight to HurtSonic
0001B864                            
0001B864                            ; ---------------------------------------------------------------------------
0001B864                            ; Hurting Sonic	subroutine
0001B864                            ; ---------------------------------------------------------------------------
0001B864                            
0001B864                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B864                            
0001B864                            
0001B864                            HurtSonic:
0001B864 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B868 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B86A 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B86E 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B872 4EB9 0000 E1E4             		jsr	SingleObjLoad
0001B878 6600                       		bne.s	Hurt_Shield
0001B87A 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B87E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B884 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B88A                            
0001B88A                            Hurt_Shield:
0001B88A 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B890 117C 0004 0024             		move.b	#4,$24(a0)
0001B896 6100 8704                  		bsr.w	Sonic_ResetOnFloor
0001B89A 08E8 0001 0022             		bset	#1,$22(a0)
0001B8A0 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B8A6 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B8AC 0828 0006 0022             		btst	#6,$22(a0)
0001B8B2 6700                       		beq.s	Hurt_Reverse
0001B8B4 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B8BA 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B8C0                            
0001B8C0                            Hurt_Reverse:
0001B8C0 3028 0008                  		move.w	8(a0),d0
0001B8C4 B06A 0008                  		cmp.w	8(a2),d0
0001B8C8 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B8CA 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B8CE                            
0001B8CE                            Hurt_ChkSpikes:
0001B8CE 317C 0000 0014             		move.w	#0,$14(a0)
0001B8D4 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B8DA 317C 0078 0030             		move.w	#$78,$30(a0)
0001B8E0 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B8E4 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B8E8 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B8EA 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B8EE 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B8F0 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B8F4                            
0001B8F4                            Hurt_Sound:
0001B8F4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B8FA 70FF                       		moveq	#-1,d0
0001B8FC 4E75                       		rts	
0001B8FE                            ; ===========================================================================
0001B8FE                            
0001B8FE                            Hurt_NoRings:
0001B8FE 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B902 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B906                            ; End of function HurtSonic
0001B906                            
0001B906                            ; ---------------------------------------------------------------------------
0001B906                            ; Subroutine to	kill Sonic
0001B906                            ; ---------------------------------------------------------------------------
0001B906                            
0001B906                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B906                            
0001B906                            
0001B906                            KillSonic:
0001B906 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B90A 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B90C 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B912 117C 0006 0024             		move.b	#6,$24(a0)
0001B918 6100 8682                  		bsr.w	Sonic_ResetOnFloor
0001B91C 08E8 0001 0022             		bset	#1,$22(a0)
0001B922 317C F900 0012             		move.w	#-$700,$12(a0)
0001B928 317C 0000 0010             		move.w	#0,$10(a0)
0001B92E 317C 0000 0014             		move.w	#0,$14(a0)
0001B934 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B93A 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B940 08E8 0007 0002             		bset	#7,2(a0)
0001B946 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B94A 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B94E 6600                       		bne.s	Kill_Sound
0001B950 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B954                            
0001B954                            Kill_Sound:
0001B954 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B95A                            
0001B95A                            Kill_NoDeath:
0001B95A 70FF                       		moveq	#-1,d0
0001B95C 4E75                       		rts	
0001B95E                            ; End of function KillSonic
0001B95E                            
0001B95E                            
0001B95E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B95E                            
0001B95E                            
0001B95E                            Touch_Special:				; XREF: Touch_ChkValue
0001B95E 1229 0020                  		move.b	$20(a1),d1
0001B962 0201 003F                  		andi.b	#$3F,d1
0001B966 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B96A 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B96C 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B970 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B972 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B976 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B978 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B97C 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B97E 4E75                       		rts	
0001B980                            ; ===========================================================================
0001B980                            
0001B980                            Touch_CatKiller:			; XREF: Touch_Special
0001B980 6000 FEC8                  		bra.w	loc_1AFDA
0001B984                            ; ===========================================================================
0001B984                            
0001B984                            Touch_Yadrin:				; XREF: Touch_Special
0001B984 9A40                       		sub.w	d0,d5
0001B986 0C45 0008                  		cmpi.w	#8,d5
0001B98A 6400                       		bcc.s	loc_1B144
0001B98C 3029 0008                  		move.w	8(a1),d0
0001B990 5940                       		subq.w	#4,d0
0001B992 0829 0000 0022             		btst	#0,$22(a1)
0001B998 6700                       		beq.s	loc_1B130
0001B99A 0440 0010                  		subi.w	#$10,d0
0001B99E                            
0001B99E                            loc_1B130:
0001B99E 9042                       		sub.w	d2,d0
0001B9A0 6400                       		bcc.s	loc_1B13C
0001B9A2 0640 0018                  		addi.w	#$18,d0
0001B9A6 6500                       		bcs.s	loc_1B140
0001B9A8 6000                       		bra.s	loc_1B144
0001B9AA                            ; ===========================================================================
0001B9AA                            
0001B9AA                            loc_1B13C:
0001B9AA B044                       		cmp.w	d4,d0
0001B9AC 6200                       		bhi.s	loc_1B144
0001B9AE                            
0001B9AE                            loc_1B140:
0001B9AE 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B9B2                            ; ===========================================================================
0001B9B2                            
0001B9B2                            loc_1B144:
0001B9B2 6000 FDC8                  		bra.w	Touch_Enemy
0001B9B6                            ; ===========================================================================
0001B9B6                            
0001B9B6                            Touch_D7orE1:				; XREF: Touch_Special
0001B9B6 5229 0021                  		addq.b	#1,$21(a1)
0001B9BA 4E75                       		rts	
0001B9BC                            ; End of function Touch_Special
0001B9BC                            
0001B9BC                            ; ---------------------------------------------------------------------------
0001B9BC                            ; Subroutine to	show the special stage layout
0001B9BC                            ; ---------------------------------------------------------------------------
0001B9BC                            
0001B9BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9BC                            
0001B9BC                            
0001B9BC                            SS_ShowLayout:				; XREF: SpecialStage
0001B9BC 6100 0000                  		bsr.w	SS_AniWallsRings
0001B9C0 6100 0000                  		bsr.w	SS_AniItems
0001B9C4 3F05                       		move.w	d5,-(sp)
0001B9C6 43F8 8000                  		lea	($FFFF8000).w,a1
0001B9CA 1038 F780                  		move.b	($FFFFF780).w,d0
0001B9CE 0200 00FC                  		andi.b	#$FC,d0
0001B9D2 4EB9 0000 2C64             		jsr	(CalcSine).l
0001B9D8 3800                       		move.w	d0,d4
0001B9DA 3A01                       		move.w	d1,d5
0001B9DC C9FC 0018                  		muls.w	#$18,d4
0001B9E0 CBFC 0018                  		muls.w	#$18,d5
0001B9E4 7400                       		moveq	#0,d2
0001B9E6 3438 F700                  		move.w	($FFFFF700).w,d2
0001B9EA 84FC 0018                  		divu.w	#$18,d2
0001B9EE 4842                       		swap	d2
0001B9F0 4442                       		neg.w	d2
0001B9F2 0642 FF4C                  		addi.w	#-$B4,d2
0001B9F6 7600                       		moveq	#0,d3
0001B9F8 3638 F704                  		move.w	($FFFFF704).w,d3
0001B9FC 86FC 0018                  		divu.w	#$18,d3
0001BA00 4843                       		swap	d3
0001BA02 4443                       		neg.w	d3
0001BA04 0643 FF4C                  		addi.w	#-$B4,d3
0001BA08 3E3C 000F                  		move.w	#$F,d7
0001BA0C                            
0001BA0C                            loc_1B19E:
0001BA0C 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BA10 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BA14 4440                       		neg.w	d0
0001BA16 C3C2                       		muls.w	d2,d1
0001BA18 C1C3                       		muls.w	d3,d0
0001BA1A 2C00                       		move.l	d0,d6
0001BA1C DC81                       		add.l	d1,d6
0001BA1E 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BA22 C1C2                       		muls.w	d2,d0
0001BA24 C3C3                       		muls.w	d3,d1
0001BA26 D280                       		add.l	d0,d1
0001BA28 2406                       		move.l	d6,d2
0001BA2A 3C3C 000F                  		move.w	#$F,d6
0001BA2E                            
0001BA2E                            loc_1B1C0:
0001BA2E 2002                       		move.l	d2,d0
0001BA30 E080                       		asr.l	#8,d0
0001BA32 32C0                       		move.w	d0,(a1)+
0001BA34 2001                       		move.l	d1,d0
0001BA36 E080                       		asr.l	#8,d0
0001BA38 32C0                       		move.w	d0,(a1)+
0001BA3A D485                       		add.l	d5,d2
0001BA3C D284                       		add.l	d4,d1
0001BA3E 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BA42                            
0001BA42 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BA46 0643 0018                  		addi.w	#$18,d3
0001BA4A 51CF FFC0                  		dbf	d7,loc_1B19E
0001BA4E                            
0001BA4E 3A1F                       		move.w	(sp)+,d5
0001BA50 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BA56 7000                       		moveq	#0,d0
0001BA58 3038 F704                  		move.w	($FFFFF704).w,d0
0001BA5C 80FC 0018                  		divu.w	#$18,d0
0001BA60 C0FC 0080                  		mulu.w	#$80,d0
0001BA64 D1C0                       		adda.l	d0,a0
0001BA66 7000                       		moveq	#0,d0
0001BA68 3038 F700                  		move.w	($FFFFF700).w,d0
0001BA6C 80FC 0018                  		divu.w	#$18,d0
0001BA70 D0C0                       		adda.w	d0,a0
0001BA72 49F8 8000                  		lea	($FFFF8000).w,a4
0001BA76 3E3C 000F                  		move.w	#$F,d7
0001BA7A                            
0001BA7A                            loc_1B20C:
0001BA7A 3C3C 000F                  		move.w	#$F,d6
0001BA7E                            
0001BA7E                            loc_1B210:
0001BA7E 7000                       		moveq	#0,d0
0001BA80 1018                       		move.b	(a0)+,d0
0001BA82 6700                       		beq.s	loc_1B268
0001BA84 0C00 004E                  		cmpi.b	#$4E,d0
0001BA88 6200                       		bhi.s	loc_1B268
0001BA8A 3614                       		move.w	(a4),d3
0001BA8C 0643 0120                  		addi.w	#$120,d3
0001BA90 0C43 0070                  		cmpi.w	#$70,d3
0001BA94 6500                       		bcs.s	loc_1B268
0001BA96 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BA9A 6400                       		bcc.s	loc_1B268
0001BA9C 342C 0002                  		move.w	2(a4),d2
0001BAA0 0642 00F0                  		addi.w	#$F0,d2
0001BAA4 0C42 0070                  		cmpi.w	#$70,d2
0001BAA8 6500                       		bcs.s	loc_1B268
0001BAAA 0C42 0170                  		cmpi.w	#$170,d2
0001BAAE 6400                       		bcc.s	loc_1B268
0001BAB0 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BAB6 E748                       		lsl.w	#3,d0
0001BAB8 4BF5 0000                  		lea	(a5,d0.w),a5
0001BABC 225D                       		movea.l	(a5)+,a1
0001BABE 321D                       		move.w	(a5)+,d1
0001BAC0 D241                       		add.w	d1,d1
0001BAC2 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BAC6 365D                       		movea.w	(a5)+,a3
0001BAC8 7200                       		moveq	#0,d1
0001BACA 1219                       		move.b	(a1)+,d1
0001BACC 5301                       		subq.b	#1,d1
0001BACE 6B00                       		bmi.s	loc_1B268
0001BAD0 4EB9 0000 DEBC             		jsr	sub_D762
0001BAD6                            
0001BAD6                            loc_1B268:
0001BAD6 584C                       		addq.w	#4,a4
0001BAD8 51CE FFA4                  		dbf	d6,loc_1B210
0001BADC                            
0001BADC 41E8 0070                  		lea	$70(a0),a0
0001BAE0 51CF FF98                  		dbf	d7,loc_1B20C
0001BAE4                            
0001BAE4 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BAE8 0C05 0050                  		cmpi.b	#$50,d5
0001BAEC 6700                       		beq.s	loc_1B288
0001BAEE 24BC 0000 0000             		move.l	#0,(a2)
0001BAF4 4E75                       		rts	
0001BAF6                            ; ===========================================================================
0001BAF6                            
0001BAF6                            loc_1B288:
0001BAF6 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BAFC 4E75                       		rts	
0001BAFE                            ; End of function SS_ShowLayout
0001BAFE                            
0001BAFE                            ; ---------------------------------------------------------------------------
0001BAFE                            ; Subroutine to	animate	walls and rings	in the special stage
0001BAFE                            ; ---------------------------------------------------------------------------
0001BAFE                            
0001BAFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAFE                            
0001BAFE                            
0001BAFE                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BAFE 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BB04 7000                       		moveq	#0,d0
0001BB06 1038 F780                  		move.b	($FFFFF780).w,d0
0001BB0A E408                       		lsr.b	#2,d0
0001BB0C 0240 000F                  		andi.w	#$F,d0
0001BB10 7223                       		moveq	#$23,d1
0001BB12                            
0001BB12                            loc_1B2A4:
0001BB12 3280                       		move.w	d0,(a1)
0001BB14 5049                       		addq.w	#8,a1
0001BB16 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BB1A                            
0001BB1A 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BB20 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BB24 6A00                       		bpl.s	loc_1B2C8
0001BB26 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BB2C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BB30 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BB36                            
0001BB36                            loc_1B2C8:
0001BB36 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BB3C 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BB40 6A00                       		bpl.s	loc_1B2E4
0001BB42 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BB48 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BB4C 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BB52                            
0001BB52                            loc_1B2E4:
0001BB52 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BB56 1340 0138                  		move.b	d0,$138(a1)
0001BB5A 1340 0160                  		move.b	d0,$160(a1)
0001BB5E 1340 0148                  		move.b	d0,$148(a1)
0001BB62 1340 0150                  		move.b	d0,$150(a1)
0001BB66 1340 01D8                  		move.b	d0,$1D8(a1)
0001BB6A 1340 01E0                  		move.b	d0,$1E0(a1)
0001BB6E 1340 01E8                  		move.b	d0,$1E8(a1)
0001BB72 1340 01F0                  		move.b	d0,$1F0(a1)
0001BB76 1340 01F8                  		move.b	d0,$1F8(a1)
0001BB7A 1340 0200                  		move.b	d0,$200(a1)
0001BB7E 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BB82 6A00                       		bpl.s	loc_1B326
0001BB84 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BB8A 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BB8E 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BB94                            
0001BB94                            loc_1B326:
0001BB94 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BB98 1340 0168                  		move.b	d0,$168(a1)
0001BB9C 1340 0170                  		move.b	d0,$170(a1)
0001BBA0 1340 0178                  		move.b	d0,$178(a1)
0001BBA4 1340 0180                  		move.b	d0,$180(a1)
0001BBA8 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BBAC 6A00                       		bpl.s	loc_1B350
0001BBAE 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BBB4 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BBB8 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BBBE                            
0001BBBE                            loc_1B350:
0001BBBE 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BBC4 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BBCA 7000                       		moveq	#0,d0
0001BBCC 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BBD0 D040                       		add.w	d0,d0
0001BBD2 41F0 0000                  		lea	(a0,d0.w),a0
0001BBD6 3290                       		move.w	(a0),(a1)
0001BBD8 3368 0002 0008             		move.w	2(a0),8(a1)
0001BBDE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BBE4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BBEA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BBF0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BBF6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BBFC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC02 D0FC 0020                  		adda.w	#$20,a0
0001BC06 D2FC 0048                  		adda.w	#$48,a1
0001BC0A 3290                       		move.w	(a0),(a1)
0001BC0C 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC12 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC18 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC1E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC24 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC2A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC30 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC36 D0FC 0020                  		adda.w	#$20,a0
0001BC3A D2FC 0048                  		adda.w	#$48,a1
0001BC3E 3290                       		move.w	(a0),(a1)
0001BC40 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC46 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC4C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC52 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC58 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC5E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC64 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC6A D0FC 0020                  		adda.w	#$20,a0
0001BC6E D2FC 0048                  		adda.w	#$48,a1
0001BC72 3290                       		move.w	(a0),(a1)
0001BC74 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC7A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC80 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC86 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC8C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC92 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC98 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC9E D0FC 0020                  		adda.w	#$20,a0
0001BCA2 D2FC 0048                  		adda.w	#$48,a1
0001BCA6 4E75                       		rts	
0001BCA8                            ; End of function SS_AniWallsRings
0001BCA8                            
0001BCA8                            ; ===========================================================================
0001BCA8 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BCB8 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BCC8 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BCD8 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BCE8 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BCF8 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BD08 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BD18 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BD28                            ; ---------------------------------------------------------------------------
0001BD28                            ; Subroutine to	remove items when you collect them in the special stage
0001BD28                            ; ---------------------------------------------------------------------------
0001BD28                            
0001BD28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD28                            
0001BD28                            
0001BD28                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BD28 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BD2E 303C 001F                  		move.w	#$1F,d0
0001BD32                            
0001BD32                            loc_1B4C4:
0001BD32 4A12                       		tst.b	(a2)
0001BD34 6700                       		beq.s	locret_1B4CE
0001BD36 504A                       		addq.w	#8,a2
0001BD38 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BD3C                            
0001BD3C                            locret_1B4CE:
0001BD3C 4E75                       		rts	
0001BD3E                            ; End of function SS_RemoveCollectedItem
0001BD3E                            
0001BD3E                            ; ---------------------------------------------------------------------------
0001BD3E                            ; Subroutine to	animate	special	stage items when you touch them
0001BD3E                            ; ---------------------------------------------------------------------------
0001BD3E                            
0001BD3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD3E                            
0001BD3E                            
0001BD3E                            SS_AniItems:				; XREF: SS_ShowLayout
0001BD3E 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BD44 3E3C 001F                  		move.w	#$1F,d7
0001BD48                            
0001BD48                            loc_1B4DA:
0001BD48 7000                       		moveq	#0,d0
0001BD4A 1010                       		move.b	(a0),d0
0001BD4C 6700                       		beq.s	loc_1B4E8
0001BD4E E548                       		lsl.w	#2,d0
0001BD50 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BD54 4E91                       		jsr	(a1)
0001BD56                            
0001BD56                            loc_1B4E8:
0001BD56 5048                       		addq.w	#8,a0
0001BD58                            
0001BD58                            loc_1B4EA:
0001BD58 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BD5C                            
0001BD5C 4E75                       		rts	
0001BD5E                            ; End of function SS_AniItems
0001BD5E                            
0001BD5E                            ; ===========================================================================
0001BD5E 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BD62 0000 0000                  		dc.l SS_AniBumper
0001BD66 0000 0000                  		dc.l SS_Ani1Up
0001BD6A 0000 0000                  		dc.l SS_AniReverse
0001BD6E 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BD72 0000 0000                  		dc.l SS_AniGlassBlock
0001BD76                            ; ===========================================================================
0001BD76                            
0001BD76                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BD76 5328 0002                  		subq.b	#1,2(a0)
0001BD7A 6A00                       		bpl.s	locret_1B530
0001BD7C 117C 0005 0002             		move.b	#5,2(a0)
0001BD82 7000                       		moveq	#0,d0
0001BD84 1028 0003                  		move.b	3(a0),d0
0001BD88 5228 0003                  		addq.b	#1,3(a0)
0001BD8C 2268 0004                  		movea.l	4(a0),a1
0001BD90 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BD94 1280                       		move.b	d0,(a1)
0001BD96 6600                       		bne.s	locret_1B530
0001BD98 4290                       		clr.l	(a0)
0001BD9A 42A8 0004                  		clr.l	4(a0)
0001BD9E                            
0001BD9E                            locret_1B530:
0001BD9E 4E75                       		rts	
0001BDA0                            ; ===========================================================================
0001BDA0 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BDA6                            ; ===========================================================================
0001BDA6                            
0001BDA6                            SS_AniBumper:				; XREF: SS_AniIndex
0001BDA6 5328 0002                  		subq.b	#1,2(a0)
0001BDAA 6A00                       		bpl.s	locret_1B566
0001BDAC 117C 0007 0002             		move.b	#7,2(a0)
0001BDB2 7000                       		moveq	#0,d0
0001BDB4 1028 0003                  		move.b	3(a0),d0
0001BDB8 5228 0003                  		addq.b	#1,3(a0)
0001BDBC 2268 0004                  		movea.l	4(a0),a1
0001BDC0 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BDC4 6600                       		bne.s	loc_1B564
0001BDC6 4290                       		clr.l	(a0)
0001BDC8 42A8 0004                  		clr.l	4(a0)
0001BDCC 12BC 0025                  		move.b	#$25,(a1)
0001BDD0 4E75                       		rts	
0001BDD2                            ; ===========================================================================
0001BDD2                            
0001BDD2                            loc_1B564:
0001BDD2 1280                       		move.b	d0,(a1)
0001BDD4                            
0001BDD4                            locret_1B566:
0001BDD4 4E75                       		rts	
0001BDD6                            ; ===========================================================================
0001BDD6 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BDDC                            ; ===========================================================================
0001BDDC                            
0001BDDC                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BDDC 5328 0002                  		subq.b	#1,2(a0)
0001BDE0 6A00                       		bpl.s	locret_1B596
0001BDE2 117C 0005 0002             		move.b	#5,2(a0)
0001BDE8 7000                       		moveq	#0,d0
0001BDEA 1028 0003                  		move.b	3(a0),d0
0001BDEE 5228 0003                  		addq.b	#1,3(a0)
0001BDF2 2268 0004                  		movea.l	4(a0),a1
0001BDF6 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BDFA 1280                       		move.b	d0,(a1)
0001BDFC 6600                       		bne.s	locret_1B596
0001BDFE 4290                       		clr.l	(a0)
0001BE00 42A8 0004                  		clr.l	4(a0)
0001BE04                            
0001BE04                            locret_1B596:
0001BE04 4E75                       		rts	
0001BE06                            ; ===========================================================================
0001BE06 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BE0C                            ; ===========================================================================
0001BE0C                            
0001BE0C                            SS_AniReverse:				; XREF: SS_AniIndex
0001BE0C 5328 0002                  		subq.b	#1,2(a0)
0001BE10 6A00                       		bpl.s	locret_1B5CC
0001BE12 117C 0007 0002             		move.b	#7,2(a0)
0001BE18 7000                       		moveq	#0,d0
0001BE1A 1028 0003                  		move.b	3(a0),d0
0001BE1E 5228 0003                  		addq.b	#1,3(a0)
0001BE22 2268 0004                  		movea.l	4(a0),a1
0001BE26 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BE2A 6600                       		bne.s	loc_1B5CA
0001BE2C 4290                       		clr.l	(a0)
0001BE2E 42A8 0004                  		clr.l	4(a0)
0001BE32 12BC 002B                  		move.b	#$2B,(a1)
0001BE36 4E75                       		rts	
0001BE38                            ; ===========================================================================
0001BE38                            
0001BE38                            loc_1B5CA:
0001BE38 1280                       		move.b	d0,(a1)
0001BE3A                            
0001BE3A                            locret_1B5CC:
0001BE3A 4E75                       		rts	
0001BE3C                            ; ===========================================================================
0001BE3C 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BE42                            ; ===========================================================================
0001BE42                            
0001BE42                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BE42 5328 0002                  		subq.b	#1,2(a0)
0001BE46 6A00                       		bpl.s	locret_1B60C
0001BE48 117C 0005 0002             		move.b	#5,2(a0)
0001BE4E 7000                       		moveq	#0,d0
0001BE50 1028 0003                  		move.b	3(a0),d0
0001BE54 5228 0003                  		addq.b	#1,3(a0)
0001BE58 2268 0004                  		movea.l	4(a0),a1
0001BE5C 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BE60 1280                       		move.b	d0,(a1)
0001BE62 6600                       		bne.s	locret_1B60C
0001BE64 4290                       		clr.l	(a0)
0001BE66 42A8 0004                  		clr.l	4(a0)
0001BE6A 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BE70 303C 00A8                  		move.w	#$A8,d0
0001BE74 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BE7A                            
0001BE7A                            locret_1B60C:
0001BE7A 4E75                       		rts	
0001BE7C                            ; ===========================================================================
0001BE7C 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BE82                            ; ===========================================================================
0001BE82                            
0001BE82                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BE82 5328 0002                  		subq.b	#1,2(a0)
0001BE86 6A00                       		bpl.s	locret_1B640
0001BE88 117C 0001 0002             		move.b	#1,2(a0)
0001BE8E 7000                       		moveq	#0,d0
0001BE90 1028 0003                  		move.b	3(a0),d0
0001BE94 5228 0003                  		addq.b	#1,3(a0)
0001BE98 2268 0004                  		movea.l	4(a0),a1
0001BE9C 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BEA0 1280                       		move.b	d0,(a1)
0001BEA2 6600                       		bne.s	locret_1B640
0001BEA4 12A8 0004                  		move.b	4(a0),(a1)
0001BEA8 4290                       		clr.l	(a0)
0001BEAA 42A8 0004                  		clr.l	4(a0)
0001BEAE                            
0001BEAE                            locret_1B640:
0001BEAE 4E75                       		rts	
0001BEB0                            ; ===========================================================================
0001BEB0 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BEBA                            ; ---------------------------------------------------------------------------
0001BEBA                            ; Special stage	layout pointers
0001BEBA                            ; ---------------------------------------------------------------------------
0001BEBA                            SS_LayoutIndex:
0001BEBA                            	include "_inc\Special stage layout pointers.asm"
0001BEBA                            ; ---------------------------------------------------------------------------
0001BEBA                            ; Special stage	layout pointers
0001BEBA                            ; ---------------------------------------------------------------------------
0001BEBA 0000 0000                  	dc.l SS_1
0001BEBE 0000 0000                  	dc.l SS_2
0001BEC2 0000 0000                  	dc.l SS_3
0001BEC6 0000 0000                  	dc.l SS_4
0001BECA 0000 0000                  	dc.l SS_5
0001BECE 0000 0000                  	dc.l SS_6
0001BED2                            	even
0001BED2                            	even
0001BED2                            
0001BED2                            ; ---------------------------------------------------------------------------
0001BED2                            ; Special stage	start locations
0001BED2                            ; ---------------------------------------------------------------------------
0001BED2                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BEEA                            		even
0001BEEA                            
0001BEEA                            ; ---------------------------------------------------------------------------
0001BEEA                            ; Subroutine to	load special stage layout
0001BEEA                            ; ---------------------------------------------------------------------------
0001BEEA                            
0001BEEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEEA                            
0001BEEA                            
0001BEEA                            SS_Load:				; XREF: SpecialStage
0001BEEA 7000                       		moveq	#0,d0
0001BEEC 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BEF0 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BEF4 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BEFA 6500                       		bcs.s	SS_ChkEmldNum
0001BEFC 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BF02                            
0001BF02                            SS_ChkEmldNum:
0001BF02 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BF08 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BF0A 7200                       		moveq	#0,d1
0001BF0C 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BF10 5301                       		subq.b	#1,d1
0001BF12 6500                       		bcs.s	SS_LoadData
0001BF14 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BF18                            
0001BF18                            SS_ChkEmldLoop:	
0001BF18 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BF1C 6600                       		bne.s	SS_ChkEmldRepeat
0001BF1E 60CA                       		bra.s	SS_Load
0001BF20                            ; ===========================================================================
0001BF20                            
0001BF20                            SS_ChkEmldRepeat:
0001BF20 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BF24                            
0001BF24                            SS_LoadData:
0001BF24 E548                       		lsl.w	#2,d0
0001BF26 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BF2A 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BF2E 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BF32 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BF36 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BF3C 303C 0000                  		move.w	#0,d0
0001BF40 4EB9 0000 1942             		jsr	(EniDec).l
0001BF46 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BF4C 303C 0FFF                  		move.w	#$FFF,d0
0001BF50                            
0001BF50                            SS_ClrRAM3:
0001BF50 4299                       		clr.l	(a1)+
0001BF52 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BF56                            
0001BF56 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BF5C 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BF62 723F                       		moveq	#$3F,d1
0001BF64                            
0001BF64                            loc_1B6F6:
0001BF64 743F                       		moveq	#$3F,d2
0001BF66                            
0001BF66                            loc_1B6F8:
0001BF66 12D8                       		move.b	(a0)+,(a1)+
0001BF68 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BF6C                            
0001BF6C 43E9 0040                  		lea	$40(a1),a1
0001BF70 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BF74                            
0001BF74 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BF7A 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BF80 724D                       		moveq	#$4D,d1
0001BF82                            
0001BF82                            loc_1B714:
0001BF82 22D8                       		move.l	(a0)+,(a1)+
0001BF84 32FC 0000                  		move.w	#0,(a1)+
0001BF88 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BF8E 32D8                       		move.w	(a0)+,(a1)+
0001BF90 51C9 FFF0                  		dbf	d1,loc_1B714
0001BF94                            
0001BF94 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BF9A 323C 003F                  		move.w	#$3F,d1
0001BF9E                            
0001BF9E                            loc_1B730:
0001BF9E                            
0001BF9E 4299                       		clr.l	(a1)+
0001BFA0 51C9 FFFC                  		dbf	d1,loc_1B730
0001BFA4                            
0001BFA4 4E75                       		rts	
0001BFA6                            ; End of function SS_Load
0001BFA6                            
0001BFA6                            ; ===========================================================================
0001BFA6                            ; ---------------------------------------------------------------------------
0001BFA6                            ; Special stage	mappings and VRAM pointers
0001BFA6                            ; ---------------------------------------------------------------------------
0001BFA6                            SS_MapIndex:
0001BFA6                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BFA6                            ; ---------------------------------------------------------------------------
0001BFA6                            ; Special stage	mappings and VRAM pointers
0001BFA6                            ; ---------------------------------------------------------------------------
0001BFA6 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BFAA 0142                       	dc.w $142		; VRAM setting
0001BFAC 0000 0000                  	dc.l Map_SSWalls
0001BFB0 0142                       	dc.w $142
0001BFB2 0000 0000                  	dc.l Map_SSWalls
0001BFB6 0142                       	dc.w $142
0001BFB8 0000 0000                  	dc.l Map_SSWalls
0001BFBC 0142                       	dc.w $142
0001BFBE 0000 0000                  	dc.l Map_SSWalls
0001BFC2 0142                       	dc.w $142
0001BFC4 0000 0000                  	dc.l Map_SSWalls
0001BFC8 0142                       	dc.w $142
0001BFCA 0000 0000                  	dc.l Map_SSWalls
0001BFCE 0142                       	dc.w $142
0001BFD0 0000 0000                  	dc.l Map_SSWalls
0001BFD4 0142                       	dc.w $142
0001BFD6 0000 0000                  	dc.l Map_SSWalls
0001BFDA 0142                       	dc.w $142
0001BFDC 0000 0000                  	dc.l Map_SSWalls
0001BFE0 2142                       	dc.w $2142
0001BFE2 0000 0000                  	dc.l Map_SSWalls
0001BFE6 2142                       	dc.w $2142
0001BFE8 0000 0000                  	dc.l Map_SSWalls
0001BFEC 2142                       	dc.w $2142
0001BFEE 0000 0000                  	dc.l Map_SSWalls
0001BFF2 2142                       	dc.w $2142
0001BFF4 0000 0000                  	dc.l Map_SSWalls
0001BFF8 2142                       	dc.w $2142
0001BFFA 0000 0000                  	dc.l Map_SSWalls
0001BFFE 2142                       	dc.w $2142
0001C000 0000 0000                  	dc.l Map_SSWalls
0001C004 2142                       	dc.w $2142
0001C006 0000 0000                  	dc.l Map_SSWalls
0001C00A 2142                       	dc.w $2142
0001C00C 0000 0000                  	dc.l Map_SSWalls
0001C010 2142                       	dc.w $2142
0001C012 0000 0000                  	dc.l Map_SSWalls
0001C016 4142                       	dc.w $4142
0001C018 0000 0000                  	dc.l Map_SSWalls
0001C01C 4142                       	dc.w $4142
0001C01E 0000 0000                  	dc.l Map_SSWalls
0001C022 4142                       	dc.w $4142
0001C024 0000 0000                  	dc.l Map_SSWalls
0001C028 4142                       	dc.w $4142
0001C02A 0000 0000                  	dc.l Map_SSWalls
0001C02E 4142                       	dc.w $4142
0001C030 0000 0000                  	dc.l Map_SSWalls
0001C034 4142                       	dc.w $4142
0001C036 0000 0000                  	dc.l Map_SSWalls
0001C03A 4142                       	dc.w $4142
0001C03C 0000 0000                  	dc.l Map_SSWalls
0001C040 4142                       	dc.w $4142
0001C042 0000 0000                  	dc.l Map_SSWalls
0001C046 4142                       	dc.w $4142
0001C048 0000 0000                  	dc.l Map_SSWalls
0001C04C 6142                       	dc.w $6142
0001C04E 0000 0000                  	dc.l Map_SSWalls
0001C052 6142                       	dc.w $6142
0001C054 0000 0000                  	dc.l Map_SSWalls
0001C058 6142                       	dc.w $6142
0001C05A 0000 0000                  	dc.l Map_SSWalls
0001C05E 6142                       	dc.w $6142
0001C060 0000 0000                  	dc.l Map_SSWalls
0001C064 6142                       	dc.w $6142
0001C066 0000 0000                  	dc.l Map_SSWalls
0001C06A 6142                       	dc.w $6142
0001C06C 0000 0000                  	dc.l Map_SSWalls
0001C070 6142                       	dc.w $6142
0001C072 0000 0000                  	dc.l Map_SSWalls
0001C076 6142                       	dc.w $6142
0001C078 0000 0000                  	dc.l Map_SSWalls
0001C07C 6142                       	dc.w $6142
0001C07E 0000 F252                  	dc.l Map_obj47
0001C082 023B                       	dc.w $23B
0001C084 0000 0000                  	dc.l Map_SS_R
0001C088 0570                       	dc.w $570
0001C08A 0000 0000                  	dc.l Map_SS_R
0001C08E 0251                       	dc.w $251
0001C090 0000 0000                  	dc.l Map_SS_R
0001C094 0370                       	dc.w $370
0001C096 0000 0000                  	dc.l Map_SS_Up
0001C09A 0263                       	dc.w $263
0001C09C 0000 0000                  	dc.l Map_SS_Down
0001C0A0 0263                       	dc.w $263
0001C0A2 0000 0000                  	dc.l Map_SS_R
0001C0A6 22F0                       	dc.w $22F0
0001C0A8 0000 0000                  	dc.l Map_SS_Glass
0001C0AC 0470                       	dc.w $470
0001C0AE 0000 0000                  	dc.l Map_SS_Glass
0001C0B2 05F0                       	dc.w $5F0
0001C0B4 0000 0000                  	dc.l Map_SS_Glass
0001C0B8 65F0                       	dc.w $65F0
0001C0BA 0000 0000                  	dc.l Map_SS_Glass
0001C0BE 25F0                       	dc.w $25F0
0001C0C0 0000 0000                  	dc.l Map_SS_Glass
0001C0C4 45F0                       	dc.w $45F0
0001C0C6 0000 0000                  	dc.l Map_SS_R
0001C0CA 02F0                       	dc.w $2F0
0001C0CC 0100 F252                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C0D0 023B                       	dc.w $23B
0001C0D2 0200 F252                  	dc.l Map_obj47+$2000000
0001C0D6 023B                       	dc.w $23B
0001C0D8 0000 0000                  	dc.l Map_SS_R
0001C0DC 0797                       	dc.w $797
0001C0DE 0000 0000                  	dc.l Map_SS_R
0001C0E2 07A0                       	dc.w $7A0
0001C0E4 0000 0000                  	dc.l Map_SS_R
0001C0E8 07A9                       	dc.w $7A9
0001C0EA 0000 0000                  	dc.l Map_SS_R
0001C0EE 0797                       	dc.w $797
0001C0F0 0000 0000                  	dc.l Map_SS_R
0001C0F4 07A0                       	dc.w $7A0
0001C0F6 0000 0000                  	dc.l Map_SS_R
0001C0FA 07A9                       	dc.w $7A9
0001C0FC 0000 A5BC                  	dc.l Map_obj25
0001C100 27B2                       	dc.w $27B2
0001C102 0000 0000                  	dc.l Map_SS_Chaos3
0001C106 0770                       	dc.w $770
0001C108 0000 0000                  	dc.l Map_SS_Chaos3
0001C10C 2770                       	dc.w $2770
0001C10E 0000 0000                  	dc.l Map_SS_Chaos3
0001C112 4770                       	dc.w $4770
0001C114 0000 0000                  	dc.l Map_SS_Chaos3
0001C118 6770                       	dc.w $6770
0001C11A 0000 0000                  	dc.l Map_SS_Chaos1
0001C11E 0770                       	dc.w $770
0001C120 0000 0000                  	dc.l Map_SS_Chaos2
0001C124 0770                       	dc.w $770
0001C126 0000 0000                  	dc.l Map_SS_R
0001C12A 04F0                       	dc.w $4F0
0001C12C 0400 A5BC                  	dc.l Map_obj25+$4000000
0001C130 27B2                       	dc.w $27B2
0001C132 0500 A5BC                  	dc.l Map_obj25+$5000000
0001C136 27B2                       	dc.w $27B2
0001C138 0600 A5BC                  	dc.l Map_obj25+$6000000
0001C13C 27B2                       	dc.w $27B2
0001C13E 0700 A5BC                  	dc.l Map_obj25+$7000000
0001C142 27B2                       	dc.w $27B2
0001C144 0000 0000                  	dc.l Map_SS_Glass
0001C148 23F0                       	dc.w $23F0
0001C14A 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C14E 23F0                       	dc.w $23F0
0001C150 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C154 23F0                       	dc.w $23F0
0001C156 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C15A 23F0                       	dc.w $23F0
0001C15C 0000 0000                  	dc.l Map_SS_R+$2000000
0001C160 04F0                       	dc.w $4F0
0001C162 0000 0000                  	dc.l Map_SS_Glass
0001C166 05F0                       	dc.w $5F0
0001C168 0000 0000                  	dc.l Map_SS_Glass
0001C16C 65F0                       	dc.w $65F0
0001C16E 0000 0000                  	dc.l Map_SS_Glass
0001C172 25F0                       	dc.w $25F0
0001C174 0000 0000                  	dc.l Map_SS_Glass
0001C178 45F0                       	dc.w $45F0
0001C178 45F0                       	dc.w $45F0
0001C17A                            
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A                            ; Sprite mappings - special stage "R" block
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A                            Map_SS_R:
0001C17A                            	include "_maps\SSRblock.asm"
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A                            ; Sprite mappings - special stage "R" block
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C17E 0000                       		dc.w byte_1B91E-Map_SS_R
0001C180 01                         byte_1B912:	dc.b 1
0001C181 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C186 01                         byte_1B918:	dc.b 1
0001C187 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C18C 00                         byte_1B91E:	dc.b 0
0001C18E 00                         		even
0001C18E 00                         		even
0001C18E                            
0001C18E                            ; ---------------------------------------------------------------------------
0001C18E                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C18E                            ; ---------------------------------------------------------------------------
0001C18E                            Map_SS_Glass:
0001C18E                            	include "_maps\SSglassblock.asm"
0001C18E                            ; ---------------------------------------------------------------------------
0001C18E                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C18E                            ; ---------------------------------------------------------------------------
0001C18E 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C192 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C196 01                         byte_1B928:	dc.b 1
0001C197 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C19C 01                         byte_1B92E:	dc.b 1
0001C19D F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C1A2 01                         byte_1B934:	dc.b 1
0001C1A3 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C1A8 01                         byte_1B93A:	dc.b 1
0001C1A9 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C1AE                            		even
0001C1AE                            		even
0001C1AE                            
0001C1AE                            ; ---------------------------------------------------------------------------
0001C1AE                            ; Sprite mappings - special stage "UP" block
0001C1AE                            ; ---------------------------------------------------------------------------
0001C1AE                            Map_SS_Up:
0001C1AE                            	include "_maps\SSUPblock.asm"
0001C1AE                            ; ---------------------------------------------------------------------------
0001C1AE                            ; Sprite mappings - special stage "UP" block
0001C1AE                            ; ---------------------------------------------------------------------------
0001C1AE 0000                       		dc.w byte_1B944-Map_SS_Up
0001C1B0 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C1B2 01                         byte_1B944:	dc.b 1
0001C1B3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C1B8 01                         byte_1B94A:	dc.b 1
0001C1B9 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C1BE                            		even
0001C1BE                            		even
0001C1BE                            
0001C1BE                            ; ---------------------------------------------------------------------------
0001C1BE                            ; Sprite mappings - special stage "DOWN" block
0001C1BE                            ; ---------------------------------------------------------------------------
0001C1BE                            Map_SS_Down:
0001C1BE                            	include "_maps\SSDOWNblock.asm"
0001C1BE                            ; ---------------------------------------------------------------------------
0001C1BE                            ; Sprite mappings - special stage "DOWN" block
0001C1BE                            ; ---------------------------------------------------------------------------
0001C1BE 0000                       		dc.w byte_1B954-Map_SS_Down
0001C1C0 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C1C2 01                         byte_1B954:	dc.b 1
0001C1C3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C1C8 01                         byte_1B95A:	dc.b 1
0001C1C9 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C1CE                            		even
0001C1CE                            		even
0001C1CE                            
0001C1CE                            ; ---------------------------------------------------------------------------
0001C1CE                            ; Sprite mappings - special stage chaos	emeralds
0001C1CE                            ; ---------------------------------------------------------------------------
0001C1CE 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C1D0 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C1D2 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C1D4 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C1D6 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C1D8 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C1DA 01                         byte_1B96C:	dc.b 1
0001C1DB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C1E0 01                         byte_1B972:	dc.b 1
0001C1E1 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C1E6 01                         byte_1B978:	dc.b 1
0001C1E7 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C1EC 01                         byte_1B97E:	dc.b 1
0001C1ED F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C1F2                            		even
0001C1F2                            ; ===========================================================================
0001C1F2                            ; ---------------------------------------------------------------------------
0001C1F2                            ; Object 09 - Sonic (special stage)
0001C1F2                            ; ---------------------------------------------------------------------------
0001C1F2                            
0001C1F2                            Obj09:					; XREF: Obj_Index
0001C1F2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C1F6 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C1F8 6100 0000                  		bsr.w	SS_FixCamera
0001C1FC 6000 0000                  		bra.w	DebugMode
0001C200                            ; ===========================================================================
0001C200                            
0001C200                            Obj09_Normal:
0001C200 7000                       		moveq	#0,d0
0001C202 1028 0024                  		move.b	$24(a0),d0
0001C206 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C20A 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C20E                            ; ===========================================================================
0001C20E 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C210 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C212 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C214 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C216                            ; ===========================================================================
0001C216                            
0001C216                            Obj09_Main:				; XREF: Obj09_Index
0001C216 5428 0024                  		addq.b	#2,$24(a0)
0001C21A 117C 000E 0016             		move.b	#$E,$16(a0)
0001C220 117C 0007 0017             		move.b	#7,$17(a0)
0001C226 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C22E 317C 0780 0002             		move.w	#$780,2(a0)
0001C234 117C 0004 0001             		move.b	#4,1(a0)
0001C23A 117C 0000 0018             		move.b	#0,$18(a0)
0001C240 117C 0002 001C             		move.b	#2,$1C(a0)
0001C246 08E8 0002 0022             		bset	#2,$22(a0)
0001C24C 08E8 0001 0022             		bset	#1,$22(a0)
0001C252                            
0001C252                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C252 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C256 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C258 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C25E 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C260 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C266                            
0001C266                            Obj09_NoDebug:
0001C266 117C 0000 0030             		move.b	#0,$30(a0)
0001C26C 7000                       		moveq	#0,d0
0001C26E 1028 0022                  		move.b	$22(a0),d0
0001C272 0240 0002                  		andi.w	#2,d0
0001C276 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C27A 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C27E 4EBA 81D6                  		jsr	LoadSonicDynPLC
0001C282 4EF9 0000 DD5E             		jmp	DisplaySprite
0001C288                            ; ===========================================================================
0001C288 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C28A 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C28C                            ; ===========================================================================
0001C28C                            
0001C28C                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C28C 6100 0000                  		bsr.w	Obj09_Jump
0001C290 6100 0000                  		bsr.w	Obj09_Move
0001C294 6100 0000                  		bsr.w	Obj09_Fall
0001C298 6000                       		bra.s	Obj09_Display
0001C29A                            ; ===========================================================================
0001C29A                            
0001C29A                            Obj09_InAir:				; XREF: Obj09_Modes
0001C29A 6100 0000                  		bsr.w	nullsub_2
0001C29E 6100 0000                  		bsr.w	Obj09_Move
0001C2A2 6100 0000                  		bsr.w	Obj09_Fall
0001C2A6                            
0001C2A6                            Obj09_Display:				; XREF: Obj09_OnWall
0001C2A6 6100 0000                  		bsr.w	Obj09_ChkItems
0001C2AA 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C2AE 4EB9 0000 DD38             		jsr	SpeedToPos
0001C2B4 6100 0000                  		bsr.w	SS_FixCamera
0001C2B8 3038 F780                  		move.w	($FFFFF780).w,d0
0001C2BC D078 F782                  		add.w	($FFFFF782).w,d0
0001C2C0 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C2C4 4EB9 0001 41C0             		jsr	Sonic_Animate
0001C2CA 4E75                       		rts	
0001C2CC                            
0001C2CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2CC                            
0001C2CC                            
0001C2CC                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C2CC 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C2D2 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C2D4 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C2D8                            
0001C2D8                            Obj09_ChkRight:
0001C2D8 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C2DE 6700                       		beq.s	loc_1BA78	; if not, branch
0001C2E0 6100 0000                  		bsr.w	Obj09_MoveRight
0001C2E4                            
0001C2E4                            loc_1BA78:
0001C2E4 1038 F602                  		move.b	($FFFFF602).w,d0
0001C2E8 0200 000C                  		andi.b	#$C,d0
0001C2EC 6600                       		bne.s	loc_1BAA8
0001C2EE 3028 0014                  		move.w	$14(a0),d0
0001C2F2 6700                       		beq.s	loc_1BAA8
0001C2F4 6B00                       		bmi.s	loc_1BA9A
0001C2F6 0440 000C                  		subi.w	#$C,d0
0001C2FA 6400                       		bcc.s	loc_1BA94
0001C2FC 303C 0000                  		move.w	#0,d0
0001C300                            
0001C300                            loc_1BA94:
0001C300 3140 0014                  		move.w	d0,$14(a0)
0001C304 6000                       		bra.s	loc_1BAA8
0001C306                            ; ===========================================================================
0001C306                            
0001C306                            loc_1BA9A:
0001C306 0640 000C                  		addi.w	#$C,d0
0001C30A 6400                       		bcc.s	loc_1BAA4
0001C30C 303C 0000                  		move.w	#0,d0
0001C310                            
0001C310                            loc_1BAA4:
0001C310 3140 0014                  		move.w	d0,$14(a0)
0001C314                            
0001C314                            loc_1BAA8:
0001C314 1038 F780                  		move.b	($FFFFF780).w,d0
0001C318 0600 0020                  		addi.b	#$20,d0
0001C31C 0200 00C0                  		andi.b	#$C0,d0
0001C320 4400                       		neg.b	d0
0001C322 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C328 C3E8 0014                  		muls.w	$14(a0),d1
0001C32C D3A8 0008                  		add.l	d1,8(a0)
0001C330 C1E8 0014                  		muls.w	$14(a0),d0
0001C334 D1A8 000C                  		add.l	d0,$C(a0)
0001C338 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C33C 2428 000C                  		move.l	$C(a0),d2
0001C340 2628 0008                  		move.l	8(a0),d3
0001C344 6100 0000                  		bsr.w	sub_1BCE8
0001C348 6700                       		beq.s	loc_1BAF2
0001C34A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C34E 93A8 0008                  		sub.l	d1,8(a0)
0001C352 91A8 000C                  		sub.l	d0,$C(a0)
0001C356 317C 0000 0014             		move.w	#0,$14(a0)
0001C35C 4E75                       		rts	
0001C35E                            ; ===========================================================================
0001C35E                            
0001C35E                            loc_1BAF2:
0001C35E 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C362 4E75                       		rts	
0001C364                            ; End of function Obj09_Move
0001C364                            
0001C364                            
0001C364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C364                            
0001C364                            
0001C364                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C364 08E8 0000 0022             		bset	#0,$22(a0)
0001C36A 3028 0014                  		move.w	$14(a0),d0
0001C36E 6700                       		beq.s	loc_1BB06
0001C370 6A00                       		bpl.s	loc_1BB1A
0001C372                            
0001C372                            loc_1BB06:
0001C372 0440 000C                  		subi.w	#$C,d0
0001C376 0C40 F800                  		cmpi.w	#-$800,d0
0001C37A 6E00                       		bgt.s	loc_1BB14
0001C37C 303C F800                  		move.w	#-$800,d0
0001C380                            
0001C380                            loc_1BB14:
0001C380 3140 0014                  		move.w	d0,$14(a0)
0001C384 4E75                       		rts	
0001C386                            ; ===========================================================================
0001C386                            
0001C386                            loc_1BB1A:
0001C386 0440 0040                  		subi.w	#$40,d0
0001C38A 6400                       		bcc.s	loc_1BB22
0001C38C 4E71                       		nop	
0001C38E                            
0001C38E                            loc_1BB22:
0001C38E 3140 0014                  		move.w	d0,$14(a0)
0001C392 4E75                       		rts	
0001C394                            ; End of function Obj09_MoveLeft
0001C394                            
0001C394                            
0001C394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C394                            
0001C394                            
0001C394                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C394 08A8 0000 0022             		bclr	#0,$22(a0)
0001C39A 3028 0014                  		move.w	$14(a0),d0
0001C39E 6B00                       		bmi.s	loc_1BB48
0001C3A0 0640 000C                  		addi.w	#$C,d0
0001C3A4 0C40 0800                  		cmpi.w	#$800,d0
0001C3A8 6D00                       		blt.s	loc_1BB42
0001C3AA 303C 0800                  		move.w	#$800,d0
0001C3AE                            
0001C3AE                            loc_1BB42:
0001C3AE 3140 0014                  		move.w	d0,$14(a0)
0001C3B2 6000                       		bra.s	locret_1BB54
0001C3B4                            ; ===========================================================================
0001C3B4                            
0001C3B4                            loc_1BB48:
0001C3B4 0640 0040                  		addi.w	#$40,d0
0001C3B8 6400                       		bcc.s	loc_1BB50
0001C3BA 4E71                       		nop	
0001C3BC                            
0001C3BC                            loc_1BB50:
0001C3BC 3140 0014                  		move.w	d0,$14(a0)
0001C3C0                            
0001C3C0                            locret_1BB54:
0001C3C0 4E75                       		rts	
0001C3C2                            ; End of function Obj09_MoveRight
0001C3C2                            
0001C3C2                            
0001C3C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3C2                            
0001C3C2                            
0001C3C2                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C3C2 1038 F603                  		move.b	($FFFFF603).w,d0
0001C3C6 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C3CA 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C3CC 1038 F780                  		move.b	($FFFFF780).w,d0
0001C3D0 0200 00FC                  		andi.b	#$FC,d0
0001C3D4 4400                       		neg.b	d0
0001C3D6 0400 0040                  		subi.b	#$40,d0
0001C3DA 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C3E0 C3FC 0680                  		muls.w	#$680,d1
0001C3E4 E081                       		asr.l	#8,d1
0001C3E6 3141 0010                  		move.w	d1,$10(a0)
0001C3EA C1FC 0680                  		muls.w	#$680,d0
0001C3EE E080                       		asr.l	#8,d0
0001C3F0 3140 0012                  		move.w	d0,$12(a0)
0001C3F4 08E8 0001 0022             		bset	#1,$22(a0)
0001C3FA 303C 00A0                  		move.w	#$A0,d0
0001C3FE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C404                            
0001C404                            Obj09_NoJump:
0001C404 4E75                       		rts	
0001C406                            ; End of function Obj09_Jump
0001C406                            
0001C406                            
0001C406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C406                            
0001C406                            
0001C406                            nullsub_2:				; XREF: Obj09_InAir
0001C406 4E75                       		rts	
0001C408                            ; End of function nullsub_2
0001C408                            
0001C408                            ; ===========================================================================
0001C408                            ; ---------------------------------------------------------------------------
0001C408                            ; unused subroutine to limit Sonic's upward vertical speed
0001C408                            ; ---------------------------------------------------------------------------
0001C408 323C FC00                  		move.w	#-$400,d1
0001C40C B268 0012                  		cmp.w	$12(a0),d1
0001C410 6F00                       		ble.s	locret_1BBB4
0001C412 1038 F602                  		move.b	($FFFFF602).w,d0
0001C416 0200 0070                  		andi.b	#$70,d0
0001C41A 6600                       		bne.s	locret_1BBB4
0001C41C 3141 0012                  		move.w	d1,$12(a0)
0001C420                            
0001C420                            locret_1BBB4:
0001C420 4E75                       		rts	
0001C422                            ; ---------------------------------------------------------------------------
0001C422                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C422                            ; ---------------------------------------------------------------------------
0001C422                            
0001C422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C422                            
0001C422                            
0001C422                            SS_FixCamera:				; XREF: Obj09
0001C422 3428 000C                  		move.w	$C(a0),d2
0001C426 3628 0008                  		move.w	8(a0),d3
0001C42A 3038 F700                  		move.w	($FFFFF700).w,d0
0001C42E 0443 00A0                  		subi.w	#$A0,d3
0001C432 6500                       		bcs.s	loc_1BBCE
0001C434 9043                       		sub.w	d3,d0
0001C436 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C43A                            
0001C43A                            loc_1BBCE:
0001C43A 3038 F704                  		move.w	($FFFFF704).w,d0
0001C43E 0442 0070                  		subi.w	#$70,d2
0001C442 6500                       		bcs.s	locret_1BBDE
0001C444 9042                       		sub.w	d2,d0
0001C446 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C44A                            
0001C44A                            locret_1BBDE:
0001C44A 4E75                       		rts	
0001C44C                            ; End of function SS_FixCamera
0001C44C                            
0001C44C                            ; ===========================================================================
0001C44C                            
0001C44C                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C44C 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C452 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C458 6600                       		bne.s	loc_1BBF4
0001C45A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C460                            
0001C460                            loc_1BBF4:
0001C460 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C466 6D00                       		blt.s	loc_1BC12
0001C468 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C46E 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C474 5428 0024                  		addq.b	#2,$24(a0)
0001C478 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C47E                            
0001C47E                            loc_1BC12:
0001C47E 3038 F780                  		move.w	($FFFFF780).w,d0
0001C482 D078 F782                  		add.w	($FFFFF782).w,d0
0001C486 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C48A 4EB9 0001 41C0             		jsr	Sonic_Animate
0001C490 4EB9 0001 4456             		jsr	LoadSonicDynPLC
0001C496 6100 FF8A                  		bsr.w	SS_FixCamera
0001C49A 4EF9 0000 DD5E             		jmp	DisplaySprite
0001C4A0                            ; ===========================================================================
0001C4A0                            
0001C4A0                            Obj09_Exit2:				; XREF: Obj09_Index
0001C4A0 5368 0038                  		subq.w	#1,$38(a0)
0001C4A4 6600                       		bne.s	loc_1BC40
0001C4A6 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C4AC                            
0001C4AC                            loc_1BC40:
0001C4AC 4EB9 0001 41C0             		jsr	Sonic_Animate
0001C4B2 4EB9 0001 4456             		jsr	LoadSonicDynPLC
0001C4B8 6100 FF68                  		bsr.w	SS_FixCamera
0001C4BC 4EF9 0000 DD5E             		jmp	DisplaySprite
0001C4C2                            
0001C4C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4C2                            
0001C4C2                            
0001C4C2                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C4C2 2428 000C                  		move.l	$C(a0),d2
0001C4C6 2628 0008                  		move.l	8(a0),d3
0001C4CA 1038 F780                  		move.b	($FFFFF780).w,d0
0001C4CE 0200 00FC                  		andi.b	#$FC,d0
0001C4D2 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C4D8 3828 0010                  		move.w	$10(a0),d4
0001C4DC 48C4                       		ext.l	d4
0001C4DE E184                       		asl.l	#8,d4
0001C4E0 C1FC 002A                  		muls.w	#$2A,d0
0001C4E4 D084                       		add.l	d4,d0
0001C4E6 3828 0012                  		move.w	$12(a0),d4
0001C4EA 48C4                       		ext.l	d4
0001C4EC E184                       		asl.l	#8,d4
0001C4EE C3FC 002A                  		muls.w	#$2A,d1
0001C4F2 D284                       		add.l	d4,d1
0001C4F4 D680                       		add.l	d0,d3
0001C4F6 6100 0000                  		bsr.w	sub_1BCE8
0001C4FA 6700                       		beq.s	loc_1BCB0
0001C4FC 9680                       		sub.l	d0,d3
0001C4FE 7000                       		moveq	#0,d0
0001C500 3140 0010                  		move.w	d0,$10(a0)
0001C504 08A8 0001 0022             		bclr	#1,$22(a0)
0001C50A D481                       		add.l	d1,d2
0001C50C 6100 0000                  		bsr.w	sub_1BCE8
0001C510 6700                       		beq.s	loc_1BCC6
0001C512 9481                       		sub.l	d1,d2
0001C514 7200                       		moveq	#0,d1
0001C516 3141 0012                  		move.w	d1,$12(a0)
0001C51A 4E75                       		rts	
0001C51C                            ; ===========================================================================
0001C51C                            
0001C51C                            loc_1BCB0:
0001C51C D481                       		add.l	d1,d2
0001C51E 6100 0000                  		bsr.w	sub_1BCE8
0001C522 6700                       		beq.s	loc_1BCD4
0001C524 9481                       		sub.l	d1,d2
0001C526 7200                       		moveq	#0,d1
0001C528 3141 0012                  		move.w	d1,$12(a0)
0001C52C 08A8 0001 0022             		bclr	#1,$22(a0)
0001C532                            
0001C532                            loc_1BCC6:
0001C532 E080                       		asr.l	#8,d0
0001C534 E081                       		asr.l	#8,d1
0001C536 3140 0010                  		move.w	d0,$10(a0)
0001C53A 3141 0012                  		move.w	d1,$12(a0)
0001C53E 4E75                       		rts	
0001C540                            ; ===========================================================================
0001C540                            
0001C540                            loc_1BCD4:
0001C540 E080                       		asr.l	#8,d0
0001C542 E081                       		asr.l	#8,d1
0001C544 3140 0010                  		move.w	d0,$10(a0)
0001C548 3141 0012                  		move.w	d1,$12(a0)
0001C54C 08E8 0001 0022             		bset	#1,$22(a0)
0001C552 4E75                       		rts	
0001C554                            ; End of function Obj09_Fall
0001C554                            
0001C554                            
0001C554                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C554                            
0001C554                            
0001C554                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C554 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C55A 7800                       		moveq	#0,d4
0001C55C 4842                       		swap	d2
0001C55E 3802                       		move.w	d2,d4
0001C560 4842                       		swap	d2
0001C562 0644 0044                  		addi.w	#$44,d4
0001C566 88FC 0018                  		divu.w	#$18,d4
0001C56A C8FC 0080                  		mulu.w	#$80,d4
0001C56E D3C4                       		adda.l	d4,a1
0001C570 7800                       		moveq	#0,d4
0001C572 4843                       		swap	d3
0001C574 3803                       		move.w	d3,d4
0001C576 4843                       		swap	d3
0001C578 0644 0014                  		addi.w	#$14,d4
0001C57C 88FC 0018                  		divu.w	#$18,d4
0001C580 D2C4                       		adda.w	d4,a1
0001C582 7A00                       		moveq	#0,d5
0001C584 1819                       		move.b	(a1)+,d4
0001C586 6100                       		bsr.s	sub_1BD30
0001C588 1819                       		move.b	(a1)+,d4
0001C58A 6100                       		bsr.s	sub_1BD30
0001C58C D2FC 007E                  		adda.w	#$7E,a1
0001C590 1819                       		move.b	(a1)+,d4
0001C592 6100                       		bsr.s	sub_1BD30
0001C594 1819                       		move.b	(a1)+,d4
0001C596 6100                       		bsr.s	sub_1BD30
0001C598 4A05                       		tst.b	d5
0001C59A 4E75                       		rts	
0001C59C                            ; End of function sub_1BCE8
0001C59C                            
0001C59C                            
0001C59C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C59C                            
0001C59C                            
0001C59C                            sub_1BD30:				; XREF: sub_1BCE8
0001C59C 6700                       		beq.s	locret_1BD44
0001C59E 0C04 0028                  		cmpi.b	#$28,d4
0001C5A2 6700                       		beq.s	locret_1BD44
0001C5A4 0C04 003A                  		cmpi.b	#$3A,d4
0001C5A8 6500                       		bcs.s	loc_1BD46
0001C5AA 0C04 004B                  		cmpi.b	#$4B,d4
0001C5AE 6400                       		bcc.s	loc_1BD46
0001C5B0                            
0001C5B0                            locret_1BD44:
0001C5B0 4E75                       		rts	
0001C5B2                            ; ===========================================================================
0001C5B2                            
0001C5B2                            loc_1BD46:
0001C5B2 1144 0030                  		move.b	d4,$30(a0)
0001C5B6 2149 0032                  		move.l	a1,$32(a0)
0001C5BA 7AFF                       		moveq	#-1,d5
0001C5BC 4E75                       		rts	
0001C5BE                            ; End of function sub_1BD30
0001C5BE                            
0001C5BE                            
0001C5BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5BE                            
0001C5BE                            
0001C5BE                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C5BE 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C5C4 7800                       		moveq	#0,d4
0001C5C6 3828 000C                  		move.w	$C(a0),d4
0001C5CA 0644 0050                  		addi.w	#$50,d4
0001C5CE 88FC 0018                  		divu.w	#$18,d4
0001C5D2 C8FC 0080                  		mulu.w	#$80,d4
0001C5D6 D3C4                       		adda.l	d4,a1
0001C5D8 7800                       		moveq	#0,d4
0001C5DA 3828 0008                  		move.w	8(a0),d4
0001C5DE 0644 0020                  		addi.w	#$20,d4
0001C5E2 88FC 0018                  		divu.w	#$18,d4
0001C5E6 D2C4                       		adda.w	d4,a1
0001C5E8 1811                       		move.b	(a1),d4
0001C5EA 6600                       		bne.s	Obj09_ChkCont
0001C5EC 4A28 003A                  		tst.b	$3A(a0)
0001C5F0 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C5F4 7800                       		moveq	#0,d4
0001C5F6 4E75                       		rts	
0001C5F8                            ; ===========================================================================
0001C5F8                            
0001C5F8                            Obj09_ChkCont:
0001C5F8 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C5FC 6600                       		bne.s	Obj09_Chk1Up
0001C5FE 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C602 6600                       		bne.s	Obj09_GetCont
0001C604 14BC 0001                  		move.b	#1,(a2)
0001C608 2549 0004                  		move.l	a1,4(a2)
0001C60C                            
0001C60C                            Obj09_GetCont:
0001C60C 4EB9 0000 A2A4             		jsr	CollectRing
0001C612 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C618 6500                       		bcs.s	Obj09_NoCont
0001C61A 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C620 6600                       		bne.s	Obj09_NoCont
0001C622 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C626 303C 00BF                  		move.w	#$BF,d0
0001C62A 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra continue sound
0001C630                            
0001C630                            Obj09_NoCont:
0001C630 7800                       		moveq	#0,d4
0001C632 4E75                       		rts	
0001C634                            ; ===========================================================================
0001C634                            
0001C634                            Obj09_Chk1Up:
0001C634 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C638 6600                       		bne.s	Obj09_ChkEmer
0001C63A 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C63E 6600                       		bne.s	Obj09_Get1Up
0001C640 14BC 0003                  		move.b	#3,(a2)
0001C644 2549 0004                  		move.l	a1,4(a2)
0001C648                            
0001C648                            Obj09_Get1Up:
0001C648 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C64C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C650 303C 0088                  		move.w	#$88,d0
0001C654 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra life music
0001C65A 7800                       		moveq	#0,d4
0001C65C 4E75                       		rts	
0001C65E                            ; ===========================================================================
0001C65E                            
0001C65E                            Obj09_ChkEmer:
0001C65E 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C662 6500                       		bcs.s	Obj09_ChkGhost
0001C664 0C04 0040                  		cmpi.b	#$40,d4
0001C668 6200                       		bhi.s	Obj09_ChkGhost
0001C66A 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C66E 6600                       		bne.s	Obj09_GetEmer
0001C670 14BC 0005                  		move.b	#5,(a2)
0001C674 2549 0004                  		move.l	a1,4(a2)
0001C678                            
0001C678                            Obj09_GetEmer:
0001C678 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C67E 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C680 0404 003B                  		subi.b	#$3B,d4
0001C684 7000                       		moveq	#0,d0
0001C686 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C68A 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C68E 1584 0000                  		move.b	d4,(a2,d0.w)
0001C692 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C696                            
0001C696                            Obj09_NoEmer:
0001C696 303C 0093                  		move.w	#$93,d0
0001C69A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play emerald music
0001C6A0 7800                       		moveq	#0,d4
0001C6A2 4E75                       		rts	
0001C6A4                            ; ===========================================================================
0001C6A4                            
0001C6A4                            Obj09_ChkGhost:
0001C6A4 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C6A8 6600                       		bne.s	Obj09_ChkGhostTag
0001C6AA 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C6B0                            
0001C6B0                            Obj09_ChkGhostTag:
0001C6B0 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C6B4 6600                       		bne.s	Obj09_NoGhost
0001C6B6 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C6BC 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C6BE 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C6C4                            
0001C6C4                            Obj09_NoGhost:
0001C6C4 78FF                       		moveq	#-1,d4
0001C6C6 4E75                       		rts	
0001C6C8                            ; ===========================================================================
0001C6C8                            
0001C6C8                            Obj09_MakeGhostSolid:
0001C6C8 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C6CE 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C6D0 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C6D6 723F                       		moveq	#$3F,d1
0001C6D8                            
0001C6D8                            Obj09_GhostLoop2:
0001C6D8 743F                       		moveq	#$3F,d2
0001C6DA                            
0001C6DA                            Obj09_GhostLoop:
0001C6DA 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C6DE 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C6E0 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C6E4                            
0001C6E4                            Obj09_NoReplace:
0001C6E4 5249                       		addq.w	#1,a1
0001C6E6 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C6EA 43E9 0040                  		lea	$40(a1),a1
0001C6EE 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C6F2                            
0001C6F2                            Obj09_GhostNotSolid:
0001C6F2 4228 003A                  		clr.b	$3A(a0)
0001C6F6 7800                       		moveq	#0,d4
0001C6F8 4E75                       		rts	
0001C6FA                            ; End of function Obj09_ChkItems
0001C6FA                            
0001C6FA                            
0001C6FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6FA                            
0001C6FA                            
0001C6FA                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C6FA 1028 0030                  		move.b	$30(a0),d0
0001C6FE 6600                       		bne.s	Obj09_ChkBumper
0001C700 5328 0036                  		subq.b	#1,$36(a0)
0001C704 6A00                       		bpl.s	loc_1BEA0
0001C706 117C 0000 0036             		move.b	#0,$36(a0)
0001C70C                            
0001C70C                            loc_1BEA0:
0001C70C 5328 0037                  		subq.b	#1,$37(a0)
0001C710 6A00                       		bpl.s	locret_1BEAC
0001C712 117C 0000 0037             		move.b	#0,$37(a0)
0001C718                            
0001C718                            locret_1BEAC:
0001C718 4E75                       		rts	
0001C71A                            ; ===========================================================================
0001C71A                            
0001C71A                            Obj09_ChkBumper:
0001C71A 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C71E 6600                       		bne.s	Obj09_GOAL
0001C720 2228 0032                  		move.l	$32(a0),d1
0001C724 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C72A 3401                       		move.w	d1,d2
0001C72C 0241 007F                  		andi.w	#$7F,d1
0001C730 C2FC 0018                  		mulu.w	#$18,d1
0001C734 0441 0014                  		subi.w	#$14,d1
0001C738 EE4A                       		lsr.w	#7,d2
0001C73A 0242 007F                  		andi.w	#$7F,d2
0001C73E C4FC 0018                  		mulu.w	#$18,d2
0001C742 0442 0044                  		subi.w	#$44,d2
0001C746 9268 0008                  		sub.w	8(a0),d1
0001C74A 9468 000C                  		sub.w	$C(a0),d2
0001C74E 4EB9 0000 2F32             		jsr	(CalcAngle).l
0001C754 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C75A C3FC F900                  		muls.w	#-$700,d1
0001C75E E081                       		asr.l	#8,d1
0001C760 3141 0010                  		move.w	d1,$10(a0)
0001C764 C1FC F900                  		muls.w	#-$700,d0
0001C768 E080                       		asr.l	#8,d0
0001C76A 3140 0012                  		move.w	d0,$12(a0)
0001C76E 08E8 0001 0022             		bset	#1,$22(a0)
0001C774 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C778 6600                       		bne.s	Obj09_BumpSnd
0001C77A 14BC 0002                  		move.b	#2,(a2)
0001C77E 2028 0032                  		move.l	$32(a0),d0
0001C782 5380                       		subq.l	#1,d0
0001C784 2540 0004                  		move.l	d0,4(a2)
0001C788                            
0001C788                            Obj09_BumpSnd:
0001C788 303C 00B4                  		move.w	#$B4,d0
0001C78C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C792                            ; ===========================================================================
0001C792                            
0001C792                            Obj09_GOAL:
0001C792 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C796 6600                       		bne.s	Obj09_UPblock
0001C798 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C79C 303C 00A8                  		move.w	#$A8,d0		; change item
0001C7A0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C7A6 4E75                       		rts	
0001C7A8                            ; ===========================================================================
0001C7A8                            
0001C7A8                            Obj09_UPblock:
0001C7A8 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C7AC 6600                       		bne.s	Obj09_DOWNblock
0001C7AE 4A28 0036                  		tst.b	$36(a0)
0001C7B2 6600 0000                  		bne.w	Obj09_NoGlass
0001C7B6 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C7BC 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C7C2 6700                       		beq.s	Obj09_UPsnd
0001C7C4 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C7C8 2268 0032                  		movea.l	$32(a0),a1
0001C7CC 5389                       		subq.l	#1,a1
0001C7CE 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C7D2                            
0001C7D2                            Obj09_UPsnd:
0001C7D2 303C 00A9                  		move.w	#$A9,d0
0001C7D6 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C7DC                            ; ===========================================================================
0001C7DC                            
0001C7DC                            Obj09_DOWNblock:
0001C7DC 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C7E0 6600                       		bne.s	Obj09_Rblock
0001C7E2 4A28 0036                  		tst.b	$36(a0)
0001C7E6 6600 0000                  		bne.w	Obj09_NoGlass
0001C7EA 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C7F0 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C7F6 6600                       		bne.s	Obj09_DOWNsnd
0001C7F8 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C7FC 2268 0032                  		movea.l	$32(a0),a1
0001C800 5389                       		subq.l	#1,a1
0001C802 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C806                            
0001C806                            Obj09_DOWNsnd:
0001C806 303C 00A9                  		move.w	#$A9,d0
0001C80A 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C810                            ; ===========================================================================
0001C810                            
0001C810                            Obj09_Rblock:
0001C810 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C814 6600                       		bne.s	Obj09_ChkGlass
0001C816 4A28 0037                  		tst.b	$37(a0)
0001C81A 6600 0000                  		bne.w	Obj09_NoGlass
0001C81E 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C824 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C828 6600                       		bne.s	Obj09_RevStage
0001C82A 14BC 0004                  		move.b	#4,(a2)
0001C82E 2028 0032                  		move.l	$32(a0),d0
0001C832 5380                       		subq.l	#1,d0
0001C834 2540 0004                  		move.l	d0,4(a2)
0001C838                            
0001C838                            Obj09_RevStage:
0001C838 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C83C 303C 00A9                  		move.w	#$A9,d0
0001C840 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play sound
0001C846                            ; ===========================================================================
0001C846                            
0001C846                            Obj09_ChkGlass:
0001C846 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C84A 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C84C 0C00 002E                  		cmpi.b	#$2E,d0
0001C850 6700                       		beq.s	Obj09_Glass
0001C852 0C00 002F                  		cmpi.b	#$2F,d0
0001C856 6700                       		beq.s	Obj09_Glass
0001C858 0C00 0030                  		cmpi.b	#$30,d0
0001C85C 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C85E                            
0001C85E                            Obj09_Glass:
0001C85E 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C862 6600                       		bne.s	Obj09_GlassSnd
0001C864 14BC 0006                  		move.b	#6,(a2)
0001C868 2268 0032                  		movea.l	$32(a0),a1
0001C86C 5389                       		subq.l	#1,a1
0001C86E 2549 0004                  		move.l	a1,4(a2)
0001C872 1011                       		move.b	(a1),d0
0001C874 5200                       		addq.b	#1,d0		; change glass type when touched
0001C876 0C00 0030                  		cmpi.b	#$30,d0
0001C87A 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C87C 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C87E                            
0001C87E                            Obj09_GlassUpdate:
0001C87E 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C882                            
0001C882                            Obj09_GlassSnd:
0001C882 303C 00BA                  		move.w	#$BA,d0
0001C886 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C88C                            ; ===========================================================================
0001C88C                            
0001C88C                            Obj09_NoGlass:
0001C88C 4E75                       		rts	
0001C88E                            ; End of function Obj09_ChkItems2
0001C88E                            
0001C88E                            ; ===========================================================================
0001C88E                            ; ---------------------------------------------------------------------------
0001C88E                            ; Object 10 - blank
0001C88E                            ; ---------------------------------------------------------------------------
0001C88E                            
0001C88E                            Obj10:					; XREF: Obj_Index
0001C88E 4E75                       		rts	
0001C890                            ; ---------------------------------------------------------------------------
0001C890                            ; Subroutine to	animate	level graphics
0001C890                            ; ---------------------------------------------------------------------------
0001C890                            
0001C890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C890                            
0001C890                            
0001C890                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C890 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C894 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C896 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C89C 6100 0000                  		bsr.w	AniArt_GiantRing
0001C8A0 7000                       		moveq	#0,d0
0001C8A2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C8A6 D040                       		add.w	d0,d0
0001C8A8 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C8AC 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C8B0                            ; ===========================================================================
0001C8B0                            
0001C8B0                            AniArt_Pause:
0001C8B0 4E75                       		rts	
0001C8B2                            ; End of function AniArt_Load
0001C8B2                            
0001C8B2                            ; ===========================================================================
0001C8B2 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C8B6 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C8BA 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C8BE 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C8C0                            ; ===========================================================================
0001C8C0                            ; ---------------------------------------------------------------------------
0001C8C0                            ; Animated pattern routine - Green Hill
0001C8C0                            ; ---------------------------------------------------------------------------
0001C8C0                            
0001C8C0                            AniArt_GHZ:				; XREF: AniArt_Index
0001C8C0 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C8C4 6A00                       		bpl.s	loc_1C08A
0001C8C6 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C8CC 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C8D2 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C8D6 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C8DA 0240 0001                  		andi.w	#1,d0
0001C8DE 6700                       		beq.s	loc_1C078
0001C8E0 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C8E4                            
0001C8E4                            loc_1C078:
0001C8E4 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C8EE 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C8F2 6000 0000                  		bra.w	LoadTiles
0001C8F6                            ; ===========================================================================
0001C8F6                            
0001C8F6                            loc_1C08A:
0001C8F6 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C8FA 6A00                       		bpl.s	loc_1C0C0
0001C8FC 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C902 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C908 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C90C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C910 0240 0001                  		andi.w	#1,d0
0001C914 6700                       		beq.s	loc_1C0AE
0001C916 43E9 0200                  		lea	$200(a1),a1
0001C91A                            
0001C91A                            loc_1C0AE:
0001C91A 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C924 323C 000F                  		move.w	#$F,d1
0001C928 6000 0000                  		bra.w	LoadTiles
0001C92C                            ; ===========================================================================
0001C92C                            
0001C92C                            loc_1C0C0:
0001C92C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C930 6A00                       		bpl.s	locret_1C10C
0001C932 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C938 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C93C 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C940 0240 0003                  		andi.w	#3,d0
0001C944 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C948 0800 0000                  		btst	#0,d0
0001C94C 6600                       		bne.s	loc_1C0E8
0001C94E 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C954                            
0001C954                            loc_1C0E8:
0001C954 EF48                       		lsl.w	#7,d0
0001C956 3200                       		move.w	d0,d1
0001C958 D040                       		add.w	d0,d0
0001C95A D041                       		add.w	d1,d0
0001C95C 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C966 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C96C 43F1 0000                  		lea	(a1,d0.w),a1
0001C970 323C 000B                  		move.w	#$B,d1
0001C974 6100 0000                  		bsr.w	LoadTiles
0001C978                            
0001C978                            locret_1C10C:
0001C978 4E75                       		rts	
0001C97A                            ; ===========================================================================
0001C97A 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C97E                            ; ===========================================================================
0001C97E                            ; ---------------------------------------------------------------------------
0001C97E                            ; Animated pattern routine - Marble
0001C97E                            ; ---------------------------------------------------------------------------
0001C97E                            
0001C97E                            AniArt_MZ:				; XREF: AniArt_Index
0001C97E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C982 6A00                       		bpl.s	loc_1C150
0001C984 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C98A 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C990 7000                       		moveq	#0,d0
0001C992 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C996 5200                       		addq.b	#1,d0
0001C998 0C00 0003                  		cmpi.b	#3,d0
0001C99C 6600                       		bne.s	loc_1C134
0001C99E 7000                       		moveq	#0,d0
0001C9A0                            
0001C9A0                            loc_1C134:
0001C9A0 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C9A4 C0FC 0100                  		mulu.w	#$100,d0
0001C9A8 D2C0                       		adda.w	d0,a1
0001C9AA 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C9B4 323C 0007                  		move.w	#7,d1
0001C9B8 6100 0000                  		bsr.w	LoadTiles
0001C9BC                            
0001C9BC                            loc_1C150:
0001C9BC 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C9C0 6A00                       		bpl.s	loc_1C1AE
0001C9C2 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C9C8 7000                       		moveq	#0,d0
0001C9CA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C9CE 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C9D4 EE58                       		ror.w	#7,d0
0001C9D6 D8C0                       		adda.w	d0,a4
0001C9D8 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C9E2 7600                       		moveq	#0,d3
0001C9E4 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C9E8 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C9EC 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C9F0 343C 0003                  		move.w	#3,d2
0001C9F4                            
0001C9F4                            loc_1C188:
0001C9F4 3003                       		move.w	d3,d0
0001C9F6 D040                       		add.w	d0,d0
0001C9F8 0240 001E                  		andi.w	#$1E,d0
0001C9FC 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CA02 3033 0000                  		move.w	(a3,d0.w),d0
0001CA06 47F3 0000                  		lea	(a3,d0.w),a3
0001CA0A 224C                       		movea.l	a4,a1
0001CA0C 323C 001F                  		move.w	#$1F,d1
0001CA10 4E93                       		jsr	(a3)
0001CA12 5843                       		addq.w	#4,d3
0001CA14 51CA FFDE                  		dbf	d2,loc_1C188
0001CA18 4E75                       		rts	
0001CA1A                            ; ===========================================================================
0001CA1A                            
0001CA1A                            loc_1C1AE:
0001CA1A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CA1E 6A00 0000                  		bpl.w	locret_1C1EA
0001CA22 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CA28 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CA2E 7000                       		moveq	#0,d0
0001CA30 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CA34 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CA38 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CA3E C0FC 00C0                  		mulu.w	#$C0,d0
0001CA42 D2C0                       		adda.w	d0,a1
0001CA44 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CA4E 323C 0005                  		move.w	#5,d1
0001CA52 6000 0000                  		bra.w	LoadTiles
0001CA56                            ; ===========================================================================
0001CA56                            
0001CA56                            locret_1C1EA:
0001CA56 4E75                       		rts	
0001CA58                            ; ===========================================================================
0001CA58                            ; ---------------------------------------------------------------------------
0001CA58                            ; Animated pattern routine - Scrap Brain
0001CA58                            ; ---------------------------------------------------------------------------
0001CA58                            
0001CA58                            AniArt_SBZ:				; XREF: AniArt_Index
0001CA58 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CA5C 6700                       		beq.s	loc_1C1F8
0001CA5E 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CA62 6000                       		bra.s	loc_1C250
0001CA64                            ; ===========================================================================
0001CA64                            
0001CA64                            loc_1C1F8:
0001CA64 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CA68 6A00                       		bpl.s	loc_1C250
0001CA6A 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CA70 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CA76 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CA80 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA84 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CA88 0240 0007                  		andi.w	#7,d0
0001CA8C 6700                       		beq.s	loc_1C234
0001CA8E 5340                       		subq.w	#1,d0
0001CA90 C0FC 0180                  		mulu.w	#$180,d0
0001CA94 43F1 0000                  		lea	(a1,d0.w),a1
0001CA98 323C 000B                  		move.w	#$B,d1
0001CA9C 6000 0000                  		bra.w	LoadTiles
0001CAA0                            ; ===========================================================================
0001CAA0                            
0001CAA0                            loc_1C234:
0001CAA0 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CAA6                            
0001CAA6                            loc_1C23A:
0001CAA6 323C 0005                  		move.w	#5,d1
0001CAAA 6100 0000                  		bsr.w	LoadTiles
0001CAAE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CAB4 323C 0005                  		move.w	#5,d1
0001CAB8 6000 0000                  		bra.w	LoadTiles
0001CABC                            ; ===========================================================================
0001CABC                            
0001CABC                            loc_1C250:
0001CABC 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CAC0 6700                       		beq.s	loc_1C25C
0001CAC2 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CAC6 6000                       		bra.s	locret_1C2A0
0001CAC8                            ; ===========================================================================
0001CAC8                            
0001CAC8                            loc_1C25C:
0001CAC8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CACC 6A00                       		bpl.s	locret_1C2A0
0001CACE 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CAD4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CADA 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CAE4 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CAE8 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CAEC 0240 0007                  		andi.w	#7,d0
0001CAF0 6700                       		beq.s	loc_1C298
0001CAF2 5340                       		subq.w	#1,d0
0001CAF4 C0FC 0180                  		mulu.w	#$180,d0
0001CAF8 43F1 0000                  		lea	(a1,d0.w),a1
0001CAFC 323C 000B                  		move.w	#$B,d1
0001CB00 6000 0000                  		bra.w	LoadTiles
0001CB04                            ; ===========================================================================
0001CB04                            
0001CB04                            loc_1C298:
0001CB04 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CB0A 609A                       		bra.s	loc_1C23A
0001CB0C                            ; ===========================================================================
0001CB0C                            
0001CB0C                            locret_1C2A0:
0001CB0C 4E75                       		rts	
0001CB0E                            ; ===========================================================================
0001CB0E                            ; ---------------------------------------------------------------------------
0001CB0E                            ; Animated pattern routine - ending sequence
0001CB0E                            ; ---------------------------------------------------------------------------
0001CB0E                            
0001CB0E                            AniArt_Ending:				; XREF: AniArt_Index
0001CB0E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB12 6A00                       		bpl.s	loc_1C2F4
0001CB14 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CB1A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CB20 45F8 9400                  		lea	($FFFF9400).w,a2
0001CB24 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CB28 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB2C 0240 0001                  		andi.w	#1,d0
0001CB30 6700                       		beq.s	loc_1C2CE
0001CB32 43E9 0200                  		lea	$200(a1),a1
0001CB36 45EA 0200                  		lea	$200(a2),a2
0001CB3A                            
0001CB3A                            loc_1C2CE:
0001CB3A 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CB44 323C 000F                  		move.w	#$F,d1
0001CB48 6100 0000                  		bsr.w	LoadTiles
0001CB4C 224A                       		movea.l	a2,a1
0001CB4E 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CB58 323C 000F                  		move.w	#$F,d1
0001CB5C 6000 0000                  		bra.w	LoadTiles
0001CB60                            ; ===========================================================================
0001CB60                            
0001CB60                            loc_1C2F4:
0001CB60 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB64 6A00                       		bpl.s	loc_1C33C
0001CB66 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CB6C 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CB70 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CB74 0240 0007                  		andi.w	#7,d0
0001CB78 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CB7C EF48                       		lsl.w	#7,d0
0001CB7E 3200                       		move.w	d0,d1
0001CB80 D040                       		add.w	d0,d0
0001CB82 D041                       		add.w	d1,d0
0001CB84 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CB8E 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CB94 43F1 0000                  		lea	(a1,d0.w),a1
0001CB98 323C 000B                  		move.w	#$B,d1
0001CB9C 6000 0000                  		bra.w	LoadTiles
0001CBA0                            ; ===========================================================================
0001CBA0 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CBA8                            ; ===========================================================================
0001CBA8                            
0001CBA8                            loc_1C33C:
0001CBA8 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CBAC 6A00                       		bpl.s	loc_1C37A
0001CBAE 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CBB4 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CBB8 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CBBC 0240 0003                  		andi.w	#3,d0
0001CBC0 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CBC4 E148                       		lsl.w	#8,d0
0001CBC6 D040                       		add.w	d0,d0
0001CBC8 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CBD2 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CBD6 43F1 0000                  		lea	(a1,d0.w),a1
0001CBDA 323C 000F                  		move.w	#$F,d1
0001CBDE 6000 0000                  		bra.w	LoadTiles
0001CBE2                            ; ===========================================================================
0001CBE2 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CBE6                            ; ===========================================================================
0001CBE6                            
0001CBE6                            loc_1C37A:
0001CBE6 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CBEA 6A00                       		bpl.s	locret_1C3B4
0001CBEC 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CBF2 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CBF6 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CBFA 0240 0003                  		andi.w	#3,d0
0001CBFE 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CC02 E148                       		lsl.w	#8,d0
0001CC04 D040                       		add.w	d0,d0
0001CC06 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CC10 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CC14 43F1 0000                  		lea	(a1,d0.w),a1
0001CC18 323C 000F                  		move.w	#$F,d1
0001CC1C 6000 0000                  		bra.w	LoadTiles
0001CC20                            ; ===========================================================================
0001CC20                            
0001CC20                            locret_1C3B4:
0001CC20 4E75                       		rts	
0001CC22                            ; ===========================================================================
0001CC22                            
0001CC22                            AniArt_none:				; XREF: AniArt_Index
0001CC22 4E75                       		rts	
0001CC24                            
0001CC24                            ; ---------------------------------------------------------------------------
0001CC24                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CC24                            ; ---------------------------------------------------------------------------
0001CC24                            
0001CC24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC24                            
0001CC24                            
0001CC24                            LoadTiles:
0001CC24 2C99                       		move.l	(a1)+,(a6)
0001CC26 2C99                       		move.l	(a1)+,(a6)
0001CC28 2C99                       		move.l	(a1)+,(a6)
0001CC2A 2C99                       		move.l	(a1)+,(a6)
0001CC2C 2C99                       		move.l	(a1)+,(a6)
0001CC2E 2C99                       		move.l	(a1)+,(a6)
0001CC30 2C99                       		move.l	(a1)+,(a6)
0001CC32 2C99                       		move.l	(a1)+,(a6)
0001CC34 51C9 FFEE                  		dbf	d1,LoadTiles
0001CC38 4E75                       		rts	
0001CC3A                            ; End of function LoadTiles
0001CC3A                            
0001CC3A                            ; ===========================================================================
0001CC3A                            ; ---------------------------------------------------------------------------
0001CC3A                            ; Animated pattern routine - more Marble Zone
0001CC3A                            ; ---------------------------------------------------------------------------
0001CC3A 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CC3E 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CC42 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CC46 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CC4A 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CC4E 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CC52 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CC56 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CC5A                            ; ===========================================================================
0001CC5A                            
0001CC5A                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CC5A 2C91                       		move.l	(a1),(a6)
0001CC5C 43E9 0010                  		lea	$10(a1),a1
0001CC60 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CC64 4E75                       		rts	
0001CC66                            ; ===========================================================================
0001CC66                            
0001CC66                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CC66 2029 0002                  		move.l	2(a1),d0
0001CC6A 1029 0001                  		move.b	1(a1),d0
0001CC6E E098                       		ror.l	#8,d0
0001CC70 2C80                       		move.l	d0,(a6)
0001CC72 43E9 0010                  		lea	$10(a1),a1
0001CC76 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CC7A 4E75                       		rts	
0001CC7C                            ; ===========================================================================
0001CC7C                            
0001CC7C                            loc_1C410:				; XREF: AniArt_MZextra
0001CC7C 2CA9 0002                  		move.l	2(a1),(a6)
0001CC80 43E9 0010                  		lea	$10(a1),a1
0001CC84 51C9 FFF6                  		dbf	d1,loc_1C410
0001CC88 4E75                       		rts	
0001CC8A                            ; ===========================================================================
0001CC8A                            
0001CC8A                            loc_1C41E:				; XREF: AniArt_MZextra
0001CC8A 2029 0004                  		move.l	4(a1),d0
0001CC8E 1029 0003                  		move.b	3(a1),d0
0001CC92 E098                       		ror.l	#8,d0
0001CC94 2C80                       		move.l	d0,(a6)
0001CC96 43E9 0010                  		lea	$10(a1),a1
0001CC9A 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CC9E 4E75                       		rts	
0001CCA0                            ; ===========================================================================
0001CCA0                            
0001CCA0                            loc_1C434:				; XREF: AniArt_MZextra
0001CCA0 2CA9 0004                  		move.l	4(a1),(a6)
0001CCA4 43E9 0010                  		lea	$10(a1),a1
0001CCA8 51C9 FFF6                  		dbf	d1,loc_1C434
0001CCAC 4E75                       		rts	
0001CCAE                            ; ===========================================================================
0001CCAE                            
0001CCAE                            loc_1C442:				; XREF: AniArt_MZextra
0001CCAE 2029 0006                  		move.l	6(a1),d0
0001CCB2 1029 0005                  		move.b	5(a1),d0
0001CCB6 E098                       		ror.l	#8,d0
0001CCB8 2C80                       		move.l	d0,(a6)
0001CCBA 43E9 0010                  		lea	$10(a1),a1
0001CCBE 51C9 FFEE                  		dbf	d1,loc_1C442
0001CCC2 4E75                       		rts	
0001CCC4                            ; ===========================================================================
0001CCC4                            
0001CCC4                            loc_1C458:				; XREF: AniArt_MZextra
0001CCC4 2CA9 0006                  		move.l	6(a1),(a6)
0001CCC8 43E9 0010                  		lea	$10(a1),a1
0001CCCC 51C9 FFF6                  		dbf	d1,loc_1C458
0001CCD0 4E75                       		rts	
0001CCD2                            ; ===========================================================================
0001CCD2                            
0001CCD2                            loc_1C466:				; XREF: AniArt_MZextra
0001CCD2 2029 0008                  		move.l	8(a1),d0
0001CCD6 1029 0007                  		move.b	7(a1),d0
0001CCDA E098                       		ror.l	#8,d0
0001CCDC 2C80                       		move.l	d0,(a6)
0001CCDE 43E9 0010                  		lea	$10(a1),a1
0001CCE2 51C9 FFEE                  		dbf	d1,loc_1C466
0001CCE6 4E75                       		rts	
0001CCE8                            ; ===========================================================================
0001CCE8                            
0001CCE8                            loc_1C47C:				; XREF: AniArt_MZextra
0001CCE8 2CA9 0008                  		move.l	8(a1),(a6)
0001CCEC 43E9 0010                  		lea	$10(a1),a1
0001CCF0 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CCF4 4E75                       		rts	
0001CCF6                            ; ===========================================================================
0001CCF6                            
0001CCF6                            loc_1C48A:				; XREF: AniArt_MZextra
0001CCF6 2029 000A                  		move.l	$A(a1),d0
0001CCFA 1029 0009                  		move.b	9(a1),d0
0001CCFE E098                       		ror.l	#8,d0
0001CD00 2C80                       		move.l	d0,(a6)
0001CD02 43E9 0010                  		lea	$10(a1),a1
0001CD06 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CD0A 4E75                       		rts	
0001CD0C                            ; ===========================================================================
0001CD0C                            
0001CD0C                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CD0C 2CA9 000A                  		move.l	$A(a1),(a6)
0001CD10 43E9 0010                  		lea	$10(a1),a1
0001CD14 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CD18 4E75                       		rts	
0001CD1A                            ; ===========================================================================
0001CD1A                            
0001CD1A                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CD1A 2029 000C                  		move.l	$C(a1),d0
0001CD1E 1029 000B                  		move.b	$B(a1),d0
0001CD22 E098                       		ror.l	#8,d0
0001CD24 2C80                       		move.l	d0,(a6)
0001CD26 43E9 0010                  		lea	$10(a1),a1
0001CD2A 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CD2E 4E75                       		rts	
0001CD30                            ; ===========================================================================
0001CD30                            
0001CD30                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CD30 2CA9 000C                  		move.l	$C(a1),(a6)
0001CD34 43E9 0010                  		lea	$10(a1),a1
0001CD38 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CD3C 4E75                       		rts	
0001CD3E                            ; ===========================================================================
0001CD3E                            
0001CD3E                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CD3E 2029 000C                  		move.l	$C(a1),d0
0001CD42 E198                       		rol.l	#8,d0
0001CD44 1011                       		move.b	0(a1),d0
0001CD46 2C80                       		move.l	d0,(a6)
0001CD48 43E9 0010                  		lea	$10(a1),a1
0001CD4C 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CD50 4E75                       		rts	
0001CD52                            ; ===========================================================================
0001CD52                            
0001CD52                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CD52 3CA9 000E                  		move.w	$E(a1),(a6)
0001CD56 3C91                       		move.w	0(a1),(a6)
0001CD58 43E9 0010                  		lea	$10(a1),a1
0001CD5C 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CD60 4E75                       		rts	
0001CD62                            ; ===========================================================================
0001CD62                            
0001CD62                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CD62 2011                       		move.l	0(a1),d0
0001CD64 1029 000F                  		move.b	$F(a1),d0
0001CD68 E098                       		ror.l	#8,d0
0001CD6A 2C80                       		move.l	d0,(a6)
0001CD6C 43E9 0010                  		lea	$10(a1),a1
0001CD70 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CD74 4E75                       		rts	
0001CD76                            
0001CD76                            ; ---------------------------------------------------------------------------
0001CD76                            ; Animated pattern routine - giant ring
0001CD76                            ; ---------------------------------------------------------------------------
0001CD76                            
0001CD76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD76                            
0001CD76                            
0001CD76                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CD76 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CD7A 6600                       		bne.s	loc_1C518
0001CD7C 4E75                       		rts	
0001CD7E                            ; ===========================================================================
0001CD7E                            
0001CD7E                            loc_1C518:
0001CD7E 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CD84 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CD8A 7000                       		moveq	#0,d0
0001CD8C 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CD90 43F1 0000                  		lea	(a1,d0.w),a1
0001CD94 0640 8000                  		addi.w	#$8000,d0
0001CD98 E588                       		lsl.l	#2,d0
0001CD9A E448                       		lsr.w	#2,d0
0001CD9C 0040 4000                  		ori.w	#$4000,d0
0001CDA0 4840                       		swap	d0
0001CDA2 2D40 0004                  		move.l	d0,4(a6)
0001CDA6 323C 000D                  		move.w	#$D,d1
0001CDAA 6000 FE78                  		bra.w	LoadTiles
0001CDAE                            ; End of function AniArt_GiantRing
0001CDAE                            
0001CDAE                            ; ===========================================================================
0001CDAE                            ; ---------------------------------------------------------------------------
0001CDAE                            ; Object 21 - SCORE, TIME, RINGS
0001CDAE                            ; ---------------------------------------------------------------------------
0001CDAE                            
0001CDAE                            Obj21:					; XREF: Obj_Index
0001CDAE 7000                       		moveq	#0,d0
0001CDB0 1028 0024                  		move.b	$24(a0),d0
0001CDB4 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CDB8 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CDBC                            ; ===========================================================================
0001CDBC 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CDBE 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CDC0                            ; ===========================================================================
0001CDC0                            
0001CDC0                            Obj21_Main:				; XREF: Obj21_Main
0001CDC0 5428 0024                  		addq.b	#2,$24(a0)
0001CDC4 317C 0090 0008             		move.w	#$90,8(a0)
0001CDCA 317C 0108 000A             		move.w	#$108,$A(a0)
0001CDD0 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CDD8 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CDDE 117C 0000 0001             		move.b	#0,1(a0)
0001CDE4 117C 0000 0018             		move.b	#0,$18(a0)
0001CDEA                            
0001CDEA                            Obj21_Flash:				; XREF: Obj21_Main
0001CDEA 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CDEE 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CDF0 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CDF4 4EF9 0000 DD5E             		jmp	DisplaySprite
0001CDFA                            ; ===========================================================================
0001CDFA                            
0001CDFA                            Obj21_Flash2:
0001CDFA 7000                       		moveq	#0,d0
0001CDFC 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CE02 6600                       		bne.s	Obj21_Display
0001CE04 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CE06 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CE0C 6600                       		bne.s	Obj21_Display	; if not, branch
0001CE0E 5440                       		addq.w	#2,d0		; make time counter flash red
0001CE10                            
0001CE10                            Obj21_Display:
0001CE10 1140 001A                  		move.b	d0,$1A(a0)
0001CE14 4EF9 0000 DD5E             		jmp	DisplaySprite
0001CE1A                            ; ===========================================================================
0001CE1A                            ; ---------------------------------------------------------------------------
0001CE1A                            ; Sprite mappings - SCORE, TIME, RINGS
0001CE1A                            ; ---------------------------------------------------------------------------
0001CE1A                            Map_obj21:
0001CE1A                            	include "_maps\obj21.asm"
0001CE1A                            ; ---------------------------------------------------------------------------
0001CE1A                            ; Sprite mappings - SCORE, TIME, RINGS
0001CE1A                            ; ---------------------------------------------------------------------------
0001CE1A 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CE1E 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CE22 0A                         byte_1C5BC:	dc.b $A
0001CE23 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE28 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE2D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE32 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CE37 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE3C A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CE41 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CE46 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE4B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE50 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CE55 00                         		dc.b 0
0001CE56 0A                         byte_1C5F0:	dc.b $A
0001CE57 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE5C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE61 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE66 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CE6B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE70 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CE75 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CE7A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE7F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE84 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CE89 00                         		dc.b 0
0001CE8A 0A                         byte_1C624:	dc.b $A
0001CE8B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE90 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE95 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE9A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CE9F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CEA4 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CEA9 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CEAE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEB3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CEB8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CEBD 00                         		dc.b 0
0001CEBE 0A                         byte_1C658:	dc.b $A
0001CEBF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CEC4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CEC9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CECE 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CED3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CED8 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CEDD A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CEE2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEE7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CEEC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CEF2 00                         		even
0001CEF2 00                         		even
0001CEF2                            
0001CEF2                            ; ---------------------------------------------------------------------------
0001CEF2                            ; Add points subroutine
0001CEF2                            ; ---------------------------------------------------------------------------
0001CEF2                            
0001CEF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEF2                            
0001CEF2                            
0001CEF2                            AddPoints:
0001CEF2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CEF8 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CEFC 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CF00 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CF02 223C 000F 423F             		move.l	#999999,d1
0001CF08 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CF0A 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CF0E 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CF10 2481                       		move.l	d1,(a2)
0001CF12                            
0001CF12                            loc_1C6AC:
0001CF12 2013                       		move.l	(a3),d0
0001CF14 B092                       		cmp.l	(a2),d0
0001CF16 6500 0000                  		bcs.w	locret_1C6B6
0001CF1A 2480                       		move.l	d0,(a2)
0001CF1C                            
0001CF1C                            locret_1C6B6:
0001CF1C 4E75                       		rts	
0001CF1E                            ; End of function AddPoints
0001CF1E                            
0001CF1E                            ; ---------------------------------------------------------------------------
0001CF1E                            ; Subroutine to	update the HUD
0001CF1E                            ; ---------------------------------------------------------------------------
0001CF1E                            
0001CF1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF1E                            
0001CF1E                            
0001CF1E                            HudUpdate:
0001CF1E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CF22 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CF26 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CF2A 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CF2C 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CF30 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CF36 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CF3A 6100 0000                  		bsr.w	Hud_Score
0001CF3E                            
0001CF3E                            Hud_ChkRings:
0001CF3E 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CF42 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CF44 6A00                       		bpl.s	loc_1C6E4
0001CF46 6100 0000                  		bsr.w	Hud_LoadZero
0001CF4A                            
0001CF4A                            loc_1C6E4:
0001CF4A 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CF4E 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CF54 7200                       		moveq	#0,d1
0001CF56 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CF5A 6100 0000                  		bsr.w	Hud_Rings
0001CF5E                            
0001CF5E                            Hud_ChkTime:
0001CF5E 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CF62 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CF64 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CF68 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CF6A 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CF6E 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CF74 6700                       		beq.s	TimeOver	; if yes, branch
0001CF76 5221                       		addq.b	#1,-(a1)
0001CF78 0C11 003C                  		cmpi.b	#60,(a1)
0001CF7C 6500                       		bcs.s	Hud_ChkLives
0001CF7E 12BC 0000                  		move.b	#0,(a1)
0001CF82 5221                       		addq.b	#1,-(a1)
0001CF84 0C11 003C                  		cmpi.b	#60,(a1)
0001CF88 6500                       		bcs.s	loc_1C734
0001CF8A 12BC 0000                  		move.b	#0,(a1)
0001CF8E 5221                       		addq.b	#1,-(a1)
0001CF90 0C11 0009                  		cmpi.b	#9,(a1)
0001CF94 6500                       		bcs.s	loc_1C734
0001CF96 12BC 0009                  		move.b	#9,(a1)
0001CF9A                            
0001CF9A                            loc_1C734:
0001CF9A 203C 5E40 0003             		move.l	#$5E400003,d0
0001CFA0 7200                       		moveq	#0,d1
0001CFA2 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CFA6 6100 0000                  		bsr.w	Hud_Mins
0001CFAA 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CFB0 7200                       		moveq	#0,d1
0001CFB2 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CFB6 6100 0000                  		bsr.w	Hud_Secs
0001CFBA                            
0001CFBA                            Hud_ChkLives:
0001CFBA 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CFBE 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CFC0 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CFC4 6100 0000                  		bsr.w	Hud_Lives
0001CFC8                            
0001CFC8                            Hud_ChkBonus:
0001CFC8 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CFCC 6700                       		beq.s	Hud_End		; if not, branch
0001CFCE 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CFD2 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CFDC 7200                       		moveq	#0,d1
0001CFDE 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CFE2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CFE6 7200                       		moveq	#0,d1
0001CFE8 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CFEC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CFF0                            
0001CFF0                            Hud_End:
0001CFF0 4E75                       		rts	
0001CFF2                            ; ===========================================================================
0001CFF2                            
0001CFF2                            TimeOver:				; XREF: Hud_ChkTime
0001CFF2 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CFF6 41F8 D000                  		lea	($FFFFD000).w,a0
0001CFFA 2448                       		movea.l	a0,a2
0001CFFC 6100 E908                  		bsr.w	KillSonic
0001D000 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D006 4E75                       		rts	
0001D008                            ; ===========================================================================
0001D008                            
0001D008                            HudDebug:				; XREF: HudUpdate
0001D008 6100 0000                  		bsr.w	HudDb_XY
0001D00C 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D010 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D012 6A00                       		bpl.s	HudDb_Rings
0001D014 6100 0000                  		bsr.w	Hud_LoadZero
0001D018                            
0001D018                            HudDb_Rings:
0001D018 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D01C 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D022 7200                       		moveq	#0,d1
0001D024 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D028 6100 0000                  		bsr.w	Hud_Rings
0001D02C                            
0001D02C                            HudDb_ObjCount:
0001D02C 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D032 7200                       		moveq	#0,d1
0001D034 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D038 6100 0000                  		bsr.w	Hud_Secs
0001D03C 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D040 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D042 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D046 6100 0000                  		bsr.w	Hud_Lives
0001D04A                            
0001D04A                            HudDb_ChkBonus:
0001D04A 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D04E 6700                       		beq.s	HudDb_End	; if not, branch
0001D050 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D054 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D05E 7200                       		moveq	#0,d1
0001D060 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D064 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D068 7200                       		moveq	#0,d1
0001D06A 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D06E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D072                            
0001D072                            HudDb_End:
0001D072 4E75                       		rts	
0001D074                            ; End of function HudUpdate
0001D074                            
0001D074                            ; ---------------------------------------------------------------------------
0001D074                            ; Subroutine to	load "0" on the	HUD
0001D074                            ; ---------------------------------------------------------------------------
0001D074                            
0001D074                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D074                            
0001D074                            
0001D074                            Hud_LoadZero:				; XREF: HudUpdate
0001D074 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D07E 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D082 343C 0002                  		move.w	#2,d2
0001D086 6000                       		bra.s	loc_1C83E
0001D088                            ; End of function Hud_LoadZero
0001D088                            
0001D088                            ; ---------------------------------------------------------------------------
0001D088                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D088                            ; ---------------------------------------------------------------------------
0001D088                            
0001D088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D088                            
0001D088                            
0001D088                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D088 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D08E 6100 0000                  		bsr.w	Hud_Lives
0001D092 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D09C 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D0A0 343C 000E                  		move.w	#$E,d2
0001D0A4                            
0001D0A4                            loc_1C83E:				; XREF: Hud_LoadZero
0001D0A4 43FA 0000                  		lea	Art_Hud(pc),a1
0001D0A8                            
0001D0A8                            loc_1C842:
0001D0A8 323C 000F                  		move.w	#$F,d1
0001D0AC 101A                       		move.b	(a2)+,d0
0001D0AE 6B00                       		bmi.s	loc_1C85E
0001D0B0 4880                       		ext.w	d0
0001D0B2 EB48                       		lsl.w	#5,d0
0001D0B4 47F1 0000                  		lea	(a1,d0.w),a3
0001D0B8                            
0001D0B8                            loc_1C852:
0001D0B8 2C9B                       		move.l	(a3)+,(a6)
0001D0BA 51C9 FFFC                  		dbf	d1,loc_1C852
0001D0BE                            
0001D0BE                            loc_1C858:
0001D0BE 51CA FFE8                  		dbf	d2,loc_1C842
0001D0C2                            
0001D0C2 4E75                       		rts	
0001D0C4                            ; ===========================================================================
0001D0C4                            
0001D0C4                            loc_1C85E:
0001D0C4 2CBC 0000 0000             		move.l	#0,(a6)
0001D0CA 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D0CE                            
0001D0CE 60EE                       		bra.s	loc_1C858
0001D0D0                            ; End of function Hud_Base
0001D0D0                            
0001D0D0                            ; ===========================================================================
0001D0D0 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D0DC FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D0E0                            ; ---------------------------------------------------------------------------
0001D0E0                            ; Subroutine to	load debug mode	numbers	patterns
0001D0E0                            ; ---------------------------------------------------------------------------
0001D0E0                            
0001D0E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0E0                            
0001D0E0                            
0001D0E0                            HudDb_XY:				; XREF: HudDebug
0001D0E0 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D0EA 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D0EE 4841                       		swap	d1
0001D0F0 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D0F4 6100                       		bsr.s	HudDb_XY2
0001D0F6 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D0FA 4841                       		swap	d1
0001D0FC 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D100                            ; End of function HudDb_XY
0001D100                            
0001D100                            
0001D100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D100                            
0001D100                            
0001D100                            HudDb_XY2:
0001D100 7C07                       		moveq	#7,d6
0001D102 43F9 0000 05F4             		lea	(Art_Text).l,a1
0001D108                            
0001D108                            HudDb_XYLoop:
0001D108 E959                       		rol.w	#4,d1
0001D10A 3401                       		move.w	d1,d2
0001D10C 0242 000F                  		andi.w	#$F,d2
0001D110 0C42 000A                  		cmpi.w	#$A,d2
0001D114 6500                       		bcs.s	loc_1C8B2
0001D116 5E42                       		addq.w	#7,d2
0001D118                            
0001D118                            loc_1C8B2:
0001D118 EB4A                       		lsl.w	#5,d2
0001D11A 47F1 2000                  		lea	(a1,d2.w),a3
0001D11E 2C9B                       		move.l	(a3)+,(a6)
0001D120 2C9B                       		move.l	(a3)+,(a6)
0001D122 2C9B                       		move.l	(a3)+,(a6)
0001D124 2C9B                       		move.l	(a3)+,(a6)
0001D126 2C9B                       		move.l	(a3)+,(a6)
0001D128 2C9B                       		move.l	(a3)+,(a6)
0001D12A 2C9B                       		move.l	(a3)+,(a6)
0001D12C 2C9B                       		move.l	(a3)+,(a6)
0001D12E 4841                       		swap	d1
0001D130 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D134                            
0001D134 4E75                       		rts	
0001D136                            ; End of function HudDb_XY2
0001D136                            
0001D136                            ; ---------------------------------------------------------------------------
0001D136                            ; Subroutine to	load rings numbers patterns
0001D136                            ; ---------------------------------------------------------------------------
0001D136                            
0001D136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D136                            
0001D136                            
0001D136                            Hud_Rings:				; XREF: HudUpdate
0001D136 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D13C 7C02                       		moveq	#2,d6
0001D13E 6000                       		bra.s	Hud_LoadArt
0001D140                            ; End of function Hud_Rings
0001D140                            
0001D140                            ; ---------------------------------------------------------------------------
0001D140                            ; Subroutine to	load score numbers patterns
0001D140                            ; ---------------------------------------------------------------------------
0001D140                            
0001D140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D140                            
0001D140                            
0001D140                            Hud_Score:				; XREF: HudUpdate
0001D140 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D146 7C05                       		moveq	#5,d6
0001D148                            
0001D148                            Hud_LoadArt:
0001D148 7800                       		moveq	#0,d4
0001D14A 43FA 0000                  		lea	Art_Hud(pc),a1
0001D14E                            
0001D14E                            Hud_ScoreLoop:
0001D14E 7400                       		moveq	#0,d2
0001D150 261A                       		move.l	(a2)+,d3
0001D152                            
0001D152                            loc_1C8EC:
0001D152 9283                       		sub.l	d3,d1
0001D154 6500                       		bcs.s	loc_1C8F4
0001D156 5242                       		addq.w	#1,d2
0001D158 60F8                       		bra.s	loc_1C8EC
0001D15A                            ; ===========================================================================
0001D15A                            
0001D15A                            loc_1C8F4:
0001D15A D283                       		add.l	d3,d1
0001D15C 4A42                       		tst.w	d2
0001D15E 6700                       		beq.s	loc_1C8FE
0001D160 383C 0001                  		move.w	#1,d4
0001D164                            
0001D164                            loc_1C8FE:
0001D164 4A44                       		tst.w	d4
0001D166 6700                       		beq.s	loc_1C92C
0001D168 ED4A                       		lsl.w	#6,d2
0001D16A 2D40 0004                  		move.l	d0,4(a6)
0001D16E 47F1 2000                  		lea	(a1,d2.w),a3
0001D172 2C9B                       		move.l	(a3)+,(a6)
0001D174 2C9B                       		move.l	(a3)+,(a6)
0001D176 2C9B                       		move.l	(a3)+,(a6)
0001D178 2C9B                       		move.l	(a3)+,(a6)
0001D17A 2C9B                       		move.l	(a3)+,(a6)
0001D17C 2C9B                       		move.l	(a3)+,(a6)
0001D17E 2C9B                       		move.l	(a3)+,(a6)
0001D180 2C9B                       		move.l	(a3)+,(a6)
0001D182 2C9B                       		move.l	(a3)+,(a6)
0001D184 2C9B                       		move.l	(a3)+,(a6)
0001D186 2C9B                       		move.l	(a3)+,(a6)
0001D188 2C9B                       		move.l	(a3)+,(a6)
0001D18A 2C9B                       		move.l	(a3)+,(a6)
0001D18C 2C9B                       		move.l	(a3)+,(a6)
0001D18E 2C9B                       		move.l	(a3)+,(a6)
0001D190 2C9B                       		move.l	(a3)+,(a6)
0001D192                            
0001D192                            loc_1C92C:
0001D192 0680 0040 0000             		addi.l	#$400000,d0
0001D198 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D19C                            
0001D19C 4E75                       		rts	
0001D19E                            ; End of function Hud_Score
0001D19E                            
0001D19E                            ; ---------------------------------------------------------------------------
0001D19E                            ; Subroutine to	load countdown numbers on the continue screen
0001D19E                            ; ---------------------------------------------------------------------------
0001D19E                            
0001D19E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D19E                            
0001D19E                            
0001D19E                            ContScrCounter:				; XREF: ContinueScreen
0001D19E 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D1A8 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D1AE 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D1B4 7C01                       		moveq	#1,d6
0001D1B6 7800                       		moveq	#0,d4
0001D1B8 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D1BC                            
0001D1BC                            ContScr_Loop:
0001D1BC 7400                       		moveq	#0,d2
0001D1BE 261A                       		move.l	(a2)+,d3
0001D1C0                            
0001D1C0                            loc_1C95A:
0001D1C0 9283                       		sub.l	d3,d1
0001D1C2 6500                       		bcs.s	loc_1C962
0001D1C4 5242                       		addq.w	#1,d2
0001D1C6 60F8                       		bra.s	loc_1C95A
0001D1C8                            ; ===========================================================================
0001D1C8                            
0001D1C8                            loc_1C962:
0001D1C8 D283                       		add.l	d3,d1
0001D1CA ED4A                       		lsl.w	#6,d2
0001D1CC 47F1 2000                  		lea	(a1,d2.w),a3
0001D1D0 2C9B                       		move.l	(a3)+,(a6)
0001D1D2 2C9B                       		move.l	(a3)+,(a6)
0001D1D4 2C9B                       		move.l	(a3)+,(a6)
0001D1D6 2C9B                       		move.l	(a3)+,(a6)
0001D1D8 2C9B                       		move.l	(a3)+,(a6)
0001D1DA 2C9B                       		move.l	(a3)+,(a6)
0001D1DC 2C9B                       		move.l	(a3)+,(a6)
0001D1DE 2C9B                       		move.l	(a3)+,(a6)
0001D1E0 2C9B                       		move.l	(a3)+,(a6)
0001D1E2 2C9B                       		move.l	(a3)+,(a6)
0001D1E4 2C9B                       		move.l	(a3)+,(a6)
0001D1E6 2C9B                       		move.l	(a3)+,(a6)
0001D1E8 2C9B                       		move.l	(a3)+,(a6)
0001D1EA 2C9B                       		move.l	(a3)+,(a6)
0001D1EC 2C9B                       		move.l	(a3)+,(a6)
0001D1EE 2C9B                       		move.l	(a3)+,(a6)
0001D1F0 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D1F4                            
0001D1F4 4E75                       		rts	
0001D1F6                            ; End of function ContScrCounter
0001D1F6                            
0001D1F6                            ; ===========================================================================
0001D1F6                            ; ---------------------------------------------------------------------------
0001D1F6                            ; HUD counter sizes
0001D1F6                            ; ---------------------------------------------------------------------------
0001D1F6 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D1FA 0000 2710                  Hud_10000:	dc.l 10000
0001D1FE 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D202 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D206 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D20A 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D20E                            
0001D20E                            ; ---------------------------------------------------------------------------
0001D20E                            ; Subroutine to	load time numbers patterns
0001D20E                            ; ---------------------------------------------------------------------------
0001D20E                            
0001D20E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D20E                            
0001D20E                            
0001D20E                            Hud_Mins:				; XREF: Hud_ChkTime
0001D20E 45F9 0001 D20A             		lea	(Hud_1).l,a2
0001D214 7C00                       		moveq	#0,d6
0001D216 6000                       		bra.s	loc_1C9BA
0001D218                            ; End of function Hud_Mins
0001D218                            
0001D218                            
0001D218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D218                            
0001D218                            
0001D218                            Hud_Secs:				; XREF: Hud_ChkTime
0001D218 45F9 0001 D206             		lea	(Hud_10).l,a2
0001D21E 7C01                       		moveq	#1,d6
0001D220                            
0001D220                            loc_1C9BA:
0001D220 7800                       		moveq	#0,d4
0001D222 43FA 0000                  		lea	Art_Hud(pc),a1
0001D226                            
0001D226                            Hud_TimeLoop:
0001D226 7400                       		moveq	#0,d2
0001D228 261A                       		move.l	(a2)+,d3
0001D22A                            
0001D22A                            loc_1C9C4:
0001D22A 9283                       		sub.l	d3,d1
0001D22C 6500                       		bcs.s	loc_1C9CC
0001D22E 5242                       		addq.w	#1,d2
0001D230 60F8                       		bra.s	loc_1C9C4
0001D232                            ; ===========================================================================
0001D232                            
0001D232                            loc_1C9CC:
0001D232 D283                       		add.l	d3,d1
0001D234 4A42                       		tst.w	d2
0001D236 6700                       		beq.s	loc_1C9D6
0001D238 383C 0001                  		move.w	#1,d4
0001D23C                            
0001D23C                            loc_1C9D6:
0001D23C ED4A                       		lsl.w	#6,d2
0001D23E 2D40 0004                  		move.l	d0,4(a6)
0001D242 47F1 2000                  		lea	(a1,d2.w),a3
0001D246 2C9B                       		move.l	(a3)+,(a6)
0001D248 2C9B                       		move.l	(a3)+,(a6)
0001D24A 2C9B                       		move.l	(a3)+,(a6)
0001D24C 2C9B                       		move.l	(a3)+,(a6)
0001D24E 2C9B                       		move.l	(a3)+,(a6)
0001D250 2C9B                       		move.l	(a3)+,(a6)
0001D252 2C9B                       		move.l	(a3)+,(a6)
0001D254 2C9B                       		move.l	(a3)+,(a6)
0001D256 2C9B                       		move.l	(a3)+,(a6)
0001D258 2C9B                       		move.l	(a3)+,(a6)
0001D25A 2C9B                       		move.l	(a3)+,(a6)
0001D25C 2C9B                       		move.l	(a3)+,(a6)
0001D25E 2C9B                       		move.l	(a3)+,(a6)
0001D260 2C9B                       		move.l	(a3)+,(a6)
0001D262 2C9B                       		move.l	(a3)+,(a6)
0001D264 2C9B                       		move.l	(a3)+,(a6)
0001D266 0680 0040 0000             		addi.l	#$400000,d0
0001D26C 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D270                            
0001D270 4E75                       		rts	
0001D272                            ; End of function Hud_Secs
0001D272                            
0001D272                            ; ---------------------------------------------------------------------------
0001D272                            ; Subroutine to	load time/ring bonus numbers patterns
0001D272                            ; ---------------------------------------------------------------------------
0001D272                            
0001D272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D272                            
0001D272                            
0001D272                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D272 45F9 0001 D1FE             		lea	(Hud_1000).l,a2
0001D278 7C03                       		moveq	#3,d6
0001D27A 7800                       		moveq	#0,d4
0001D27C 43FA 0000                  		lea	Art_Hud(pc),a1
0001D280                            
0001D280                            Hud_BonusLoop:
0001D280 7400                       		moveq	#0,d2
0001D282 261A                       		move.l	(a2)+,d3
0001D284                            
0001D284                            loc_1CA1E:
0001D284 9283                       		sub.l	d3,d1
0001D286 6500                       		bcs.s	loc_1CA26
0001D288 5242                       		addq.w	#1,d2
0001D28A 60F8                       		bra.s	loc_1CA1E
0001D28C                            ; ===========================================================================
0001D28C                            
0001D28C                            loc_1CA26:
0001D28C D283                       		add.l	d3,d1
0001D28E 4A42                       		tst.w	d2
0001D290 6700                       		beq.s	loc_1CA30
0001D292 383C 0001                  		move.w	#1,d4
0001D296                            
0001D296                            loc_1CA30:
0001D296 4A44                       		tst.w	d4
0001D298 6700                       		beq.s	Hud_ClrBonus
0001D29A ED4A                       		lsl.w	#6,d2
0001D29C 47F1 2000                  		lea	(a1,d2.w),a3
0001D2A0 2C9B                       		move.l	(a3)+,(a6)
0001D2A2 2C9B                       		move.l	(a3)+,(a6)
0001D2A4 2C9B                       		move.l	(a3)+,(a6)
0001D2A6 2C9B                       		move.l	(a3)+,(a6)
0001D2A8 2C9B                       		move.l	(a3)+,(a6)
0001D2AA 2C9B                       		move.l	(a3)+,(a6)
0001D2AC 2C9B                       		move.l	(a3)+,(a6)
0001D2AE 2C9B                       		move.l	(a3)+,(a6)
0001D2B0 2C9B                       		move.l	(a3)+,(a6)
0001D2B2 2C9B                       		move.l	(a3)+,(a6)
0001D2B4 2C9B                       		move.l	(a3)+,(a6)
0001D2B6 2C9B                       		move.l	(a3)+,(a6)
0001D2B8 2C9B                       		move.l	(a3)+,(a6)
0001D2BA 2C9B                       		move.l	(a3)+,(a6)
0001D2BC 2C9B                       		move.l	(a3)+,(a6)
0001D2BE 2C9B                       		move.l	(a3)+,(a6)
0001D2C0                            
0001D2C0                            loc_1CA5A:
0001D2C0 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D2C4                            
0001D2C4 4E75                       		rts	
0001D2C6                            ; ===========================================================================
0001D2C6                            
0001D2C6                            Hud_ClrBonus:
0001D2C6 7A0F                       		moveq	#$F,d5
0001D2C8                            
0001D2C8                            Hud_ClrBonusLoop:
0001D2C8 2CBC 0000 0000             		move.l	#0,(a6)
0001D2CE 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D2D2                            
0001D2D2 60EC                       		bra.s	loc_1CA5A
0001D2D4                            ; End of function Hud_TimeRingBonus
0001D2D4                            
0001D2D4                            ; ---------------------------------------------------------------------------
0001D2D4                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D2D4                            ; ---------------------------------------------------------------------------
0001D2D4                            
0001D2D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2D4                            
0001D2D4                            
0001D2D4                            Hud_Lives:				; XREF: Hud_ChkLives
0001D2D4 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D2DA 7200                       		moveq	#0,d1
0001D2DC 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D2E0 45F9 0001 D206             		lea	(Hud_10).l,a2
0001D2E6 7C01                       		moveq	#1,d6
0001D2E8 7800                       		moveq	#0,d4
0001D2EA 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D2EE                            
0001D2EE                            Hud_LivesLoop:
0001D2EE 2D40 0004                  		move.l	d0,4(a6)
0001D2F2 7400                       		moveq	#0,d2
0001D2F4 261A                       		move.l	(a2)+,d3
0001D2F6                            
0001D2F6                            loc_1CA90:
0001D2F6 9283                       		sub.l	d3,d1
0001D2F8 6500                       		bcs.s	loc_1CA98
0001D2FA 5242                       		addq.w	#1,d2
0001D2FC 60F8                       		bra.s	loc_1CA90
0001D2FE                            ; ===========================================================================
0001D2FE                            
0001D2FE                            loc_1CA98:
0001D2FE D283                       		add.l	d3,d1
0001D300 4A42                       		tst.w	d2
0001D302 6700                       		beq.s	loc_1CAA2
0001D304 383C 0001                  		move.w	#1,d4
0001D308                            
0001D308                            loc_1CAA2:
0001D308 4A44                       		tst.w	d4
0001D30A 6700                       		beq.s	Hud_ClrLives
0001D30C                            
0001D30C                            loc_1CAA6:
0001D30C EB4A                       		lsl.w	#5,d2
0001D30E 47F1 2000                  		lea	(a1,d2.w),a3
0001D312 2C9B                       		move.l	(a3)+,(a6)
0001D314 2C9B                       		move.l	(a3)+,(a6)
0001D316 2C9B                       		move.l	(a3)+,(a6)
0001D318 2C9B                       		move.l	(a3)+,(a6)
0001D31A 2C9B                       		move.l	(a3)+,(a6)
0001D31C 2C9B                       		move.l	(a3)+,(a6)
0001D31E 2C9B                       		move.l	(a3)+,(a6)
0001D320 2C9B                       		move.l	(a3)+,(a6)
0001D322                            
0001D322                            loc_1CABC:
0001D322 0680 0040 0000             		addi.l	#$400000,d0
0001D328 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D32C                            
0001D32C 4E75                       		rts	
0001D32E                            ; ===========================================================================
0001D32E                            
0001D32E                            Hud_ClrLives:
0001D32E 4A46                       		tst.w	d6
0001D330 67DA                       		beq.s	loc_1CAA6
0001D332 7A07                       		moveq	#7,d5
0001D334                            
0001D334                            Hud_ClrLivesLoop:
0001D334 2CBC 0000 0000             		move.l	#0,(a6)
0001D33A 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D33E 60E2                       		bra.s	loc_1CABC
0001D340                            ; End of function Hud_Lives
0001D340                            
0001D340                            ; ===========================================================================
0001D340                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D640                            		even
0001D640                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D780                            		even
0001D780                            ; ===========================================================================
0001D780                            ; ---------------------------------------------------------------------------
0001D780                            ; When debug mode is currently in use
0001D780                            ; ---------------------------------------------------------------------------
0001D780                            
0001D780                            DebugMode:				; XREF: Obj01; Obj09
0001D780 7000                       		moveq	#0,d0
0001D782 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D786 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D78A 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D78E                            ; ===========================================================================
0001D78E 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D790 0000                       		dc.w Debug_Skip-Debug_Index
0001D792                            ; ===========================================================================
0001D792                            
0001D792                            Debug_Main:				; XREF: Debug_Index
0001D792 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D796 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D79C 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D7A2 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D7A8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D7AE 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D7B4 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D7BA 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D7C0 117C 0000 001A             		move.b	#0,$1A(a0)
0001D7C6 117C 0000 001C             		move.b	#0,$1C(a0)
0001D7CC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D7D2 6600                       		bne.s	Debug_Zone	; if not, branch
0001D7D4 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D7DA 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D7E0 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D7E2 6000                       		bra.s	Debug_UseList
0001D7E4                            ; ===========================================================================
0001D7E4                            
0001D7E4                            Debug_Zone:
0001D7E4 7000                       		moveq	#0,d0
0001D7E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D7EA                            
0001D7EA                            Debug_UseList:
0001D7EA 45F9 0000 0000             		lea	(DebugList).l,a2
0001D7F0 D040                       		add.w	d0,d0
0001D7F2 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D7F6 3C1A                       		move.w	(a2)+,d6
0001D7F8 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D7FC 6200                       		bhi.s	loc_1CF9E
0001D7FE 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D804                            
0001D804                            loc_1CF9E:
0001D804 6100 0000                  		bsr.w	Debug_ShowItem
0001D808 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D80E 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D814                            
0001D814                            Debug_Skip:				; XREF: Debug_Index
0001D814 7006                       		moveq	#6,d0
0001D816 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D81C 6700                       		beq.s	loc_1CFBE
0001D81E 7000                       		moveq	#0,d0
0001D820 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D824                            
0001D824                            loc_1CFBE:
0001D824 45F9 0000 0000             		lea	(DebugList).l,a2
0001D82A D040                       		add.w	d0,d0
0001D82C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D830 3C1A                       		move.w	(a2)+,d6
0001D832 6100 0000                  		bsr.w	Debug_Control
0001D836 4EF9 0000 DD5E             		jmp	DisplaySprite
0001D83C                            
0001D83C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D83C                            
0001D83C                            
0001D83C                            Debug_Control:
0001D83C 7800                       		moveq	#0,d4
0001D83E 323C 0001                  		move.w	#1,d1
0001D842 1838 F605                  		move.b	($FFFFF605).w,d4
0001D846 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D84A 6600                       		bne.s	loc_1D018	; if yes, branch
0001D84C 1038 F604                  		move.b	($FFFFF604).w,d0
0001D850 0240 000F                  		andi.w	#$F,d0
0001D854 6600                       		bne.s	loc_1D000
0001D856 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D85C 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D862 6000 0000                  		bra.w	Debug_BackItem
0001D866                            ; ===========================================================================
0001D866                            
0001D866                            loc_1D000:
0001D866 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D86A 6600                       		bne.s	loc_1D01C
0001D86C 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D872 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D876 6600                       		bne.s	loc_1D018
0001D878 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D87E                            
0001D87E                            loc_1D018:
0001D87E 1838 F604                  		move.b	($FFFFF604).w,d4
0001D882                            
0001D882                            loc_1D01C:
0001D882 7200                       		moveq	#0,d1
0001D884 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D888 5241                       		addq.w	#1,d1
0001D88A 4841                       		swap	d1
0001D88C E881                       		asr.l	#4,d1
0001D88E 2428 000C                  		move.l	$C(a0),d2
0001D892 2628 0008                  		move.l	8(a0),d3
0001D896 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D89A 6700                       		beq.s	loc_1D03C	; if not, branch
0001D89C 9481                       		sub.l	d1,d2
0001D89E 6400                       		bcc.s	loc_1D03C
0001D8A0 7400                       		moveq	#0,d2
0001D8A2                            
0001D8A2                            loc_1D03C:
0001D8A2 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D8A6 6700                       		beq.s	loc_1D052	; if not, branch
0001D8A8 D481                       		add.l	d1,d2
0001D8AA 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D8B0 6500                       		bcs.s	loc_1D052
0001D8B2 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D8B8                            
0001D8B8                            loc_1D052:
0001D8B8 0804 0002                  		btst	#2,d4
0001D8BC 6700                       		beq.s	loc_1D05E
0001D8BE 9681                       		sub.l	d1,d3
0001D8C0 6400                       		bcc.s	loc_1D05E
0001D8C2 7600                       		moveq	#0,d3
0001D8C4                            
0001D8C4                            loc_1D05E:
0001D8C4 0804 0003                  		btst	#3,d4
0001D8C8 6700                       		beq.s	loc_1D066
0001D8CA D681                       		add.l	d1,d3
0001D8CC                            
0001D8CC                            loc_1D066:
0001D8CC 2142 000C                  		move.l	d2,$C(a0)
0001D8D0 2143 0008                  		move.l	d3,8(a0)
0001D8D4                            
0001D8D4                            Debug_BackItem:
0001D8D4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D8DA 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D8DC 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D8E2 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D8E4 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D8E8 6400                       		bcc.s	Debug_NoLoop
0001D8EA DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D8EE 6000                       		bra.s	Debug_NoLoop
0001D8F0                            ; ===========================================================================
0001D8F0                            
0001D8F0                            Debug_NextItem:
0001D8F0 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D8F6 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D8F8 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D8FC BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D900 6200                       		bhi.s	Debug_NoLoop
0001D902 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D908                            
0001D908                            Debug_NoLoop:
0001D908 6000 0000                  		bra.w	Debug_ShowItem
0001D90C                            ; ===========================================================================
0001D90C                            
0001D90C                            Debug_MakeItem:
0001D90C 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D912 6700                       		beq.s	Debug_Exit	; if not, branch
0001D914 4EB9 0000 E1E4             		jsr	SingleObjLoad
0001D91A 6600                       		bne.s	Debug_Exit
0001D91C 3368 0008 0008             		move.w	8(a0),8(a1)
0001D922 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D928 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D92C 1368 0001 0001             		move.b	1(a0),1(a1)
0001D932 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D938 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D93E 7000                       		moveq	#0,d0
0001D940 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D944 E748                       		lsl.w	#3,d0
0001D946 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D94C 4E75                       		rts	
0001D94E                            ; ===========================================================================
0001D94E                            
0001D94E                            Debug_Exit:
0001D94E 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D954 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D956 7000                       		moveq	#0,d0
0001D958 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D95C 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D964 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D96A 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D96E 3140 000A                  		move.w	d0,$A(a0)
0001D972 3140 000E                  		move.w	d0,$E(a0)
0001D976 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D97C 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D982 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D988 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D98A 4278 F780                  		clr.w	($FFFFF780).w
0001D98E 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D994 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D99C 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D9A2 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D9A8 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D9AE 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D9B4                            
0001D9B4                            Debug_DoNothing:
0001D9B4 4E75                       		rts	
0001D9B6                            ; End of function Debug_Control
0001D9B6                            
0001D9B6                            
0001D9B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9B6                            
0001D9B6                            
0001D9B6                            Debug_ShowItem:				; XREF: Debug_Main
0001D9B6 7000                       		moveq	#0,d0
0001D9B8 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D9BC E748                       		lsl.w	#3,d0
0001D9BE 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D9C4 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D9CA 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D9D0 4E75                       		rts	
0001D9D2                            ; End of function Debug_ShowItem
0001D9D2                            
0001D9D2                            ; ===========================================================================
0001D9D2                            ; ---------------------------------------------------------------------------
0001D9D2                            ; Debug	list pointers
0001D9D2                            ; ---------------------------------------------------------------------------
0001D9D2                            DebugList:
0001D9D2                            	include "_inc\Debug list pointers.asm"
0001D9D2                            ; ---------------------------------------------------------------------------
0001D9D2                            ; Debug	list pointers
0001D9D2                            ; ---------------------------------------------------------------------------
0001D9D2 0000                       	dc.w Debug_GHZ-DebugList
0001D9D4 0000                       	dc.w Debug_LZ-DebugList
0001D9D6 0000                       	dc.w Debug_MZ-DebugList
0001D9D8 0000                       	dc.w Debug_SLZ-DebugList
0001D9DA 0000                       	dc.w Debug_SYZ-DebugList
0001D9DC 0000                       	dc.w Debug_SBZ-DebugList
0001D9DE 0000                       	dc.w Debug_Ending-DebugList
0001D9DE 0000                       	dc.w Debug_Ending-DebugList
0001D9E0                            
0001D9E0                            ; ---------------------------------------------------------------------------
0001D9E0                            ; Debug	list - Green Hill
0001D9E0                            ; ---------------------------------------------------------------------------
0001D9E0                            Debug_GHZ:
0001D9E0                            	include "_inc\Debug list - GHZ.asm"
0001D9E0                            ; ---------------------------------------------------------------------------
0001D9E0                            ; Debug	list - Green Hill
0001D9E0                            ; ---------------------------------------------------------------------------
0001D9E0 0010                       	dc.w $10			; number of items in list
0001D9E2 2500 A5BC                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D9E6 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D9EA 2600 ABC2                  	dc.l Map_obj26+$26000000
0001D9EE 0000 0680                  	dc.b 0,	0, 6, $80
0001D9F2 1F00 9DB4                  	dc.l Map_obj1F+$1F000000
0001D9F6 0000 0400                  	dc.b 0,	0, 4, 0
0001D9FA 2200 A070                  	dc.l Map_obj22+$22000000
0001D9FE 0000 0444                  	dc.b 0,	0, 4, $44
0001DA02 2B00 B236                  	dc.l Map_obj2B+$2B000000
0001DA06 0000 047B                  	dc.b 0,	0, 4, $7B
0001DA0A 3600 D746                  	dc.l Map_obj36+$36000000
0001DA0E 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA12 1800 86D0                  	dc.l Map_obj18+$18000000
0001DA16 0000 4000                  	dc.b 0,	0, $40,	0
0001DA1A 3B00 D86C                  	dc.l Map_obj3B+$3B000000
0001DA1E 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DA22 4000 FEF8                  	dc.l Map_obj40+$40000000
0001DA26 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DA2A 4100 E472                  	dc.l Map_obj41+$41000000
0001DA2E 0000 0523                  	dc.b 0,	0, 5, $23
0001DA32 4200 E698                  	dc.l Map_obj42+$42000000
0001DA36 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DA3A 4400 E9A6                  	dc.l Map_obj44+$44000000
0001DA3E 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DA42 1900 87D0                  	dc.l Map_obj48+$19000000
0001DA46 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DA4A 7901 7936                  	dc.l Map_obj79+$79000000
0001DA4E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA52 4B00 A5FC                  	dc.l Map_obj4B+$4B000000
0001DA56 0000 2400                  	dc.b 0,	0, $24,	0
0001DA5A 7D01 7A86                  	dc.l Map_obj7D+$7D000000
0001DA5E 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DA62                            	even
0001DA62                            	even
0001DA62                            
0001DA62                            ; ---------------------------------------------------------------------------
0001DA62                            ; Debug	list - Labyrinth
0001DA62                            ; ---------------------------------------------------------------------------
0001DA62                            Debug_LZ:
0001DA62                            	include "_inc\Debug list - LZ.asm"
0001DA62                            ; ---------------------------------------------------------------------------
0001DA62                            ; Debug	list - Labyrinth
0001DA62                            ; ---------------------------------------------------------------------------
0001DA62 0019                       	dc.w $19
0001DA64 2500 A5BC                  	dc.l Map_obj25+$25000000
0001DA68 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA6C 2600 ABC2                  	dc.l Map_obj26+$26000000
0001DA70 0000 0680                  	dc.b 0,	0, 6, $80
0001DA74 4100 E472                  	dc.l Map_obj41+$41000000
0001DA78 0000 0523                  	dc.b 0,	0, 5, $23
0001DA7C 2C00 B2E6                  	dc.l Map_obj2C+$2C000000
0001DA80 0800 2486                  	dc.b 8,	0, $24,	$86
0001DA84 2D00 B4DA                  	dc.l Map_obj2D+$2D000000
0001DA88 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DA8C 1601 26CC                  	dc.l Map_obj16+$16000000
0001DA90 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DA94 1601 26CC                  	dc.l Map_obj16+$16000000
0001DA98 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DA9C 3300 C992                  	dc.l Map_obj33+$33000000
0001DAA0 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DAA4 3200 C552                  	dc.l Map_obj32+$32000000
0001DAA8 0000 0513                  	dc.b 0,	0, 5, $13
0001DAAC 3600 D746                  	dc.l Map_obj36+$36000000
0001DAB0 0000 051B                  	dc.b 0,	0, 5, $1B
0001DAB4 5201 07EE                  	dc.l Map_obj52a+$52000000
0001DAB8 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DABC 6101 28F4                  	dc.l Map_obj61+$61000000
0001DAC0 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DAC4 6101 28F4                  	dc.l Map_obj61+$61000000
0001DAC8 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DACC 6101 28F4                  	dc.l Map_obj61+$61000000
0001DAD0 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DAD4 6201 2A48                  	dc.l Map_obj62+$62000000
0001DAD8 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DADC 6101 28F4                  	dc.l Map_obj61+$61000000
0001DAE0 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DAE4 6101 28F4                  	dc.l Map_obj61+$61000000
0001DAE8 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DAEC 6301 2DAA                  	dc.l Map_obj63+$63000000
0001DAF0 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DAF4 6001 2616                  	dc.l Map_obj60+$60000000
0001DAF8 0000 0467                  	dc.b 0,	0, 4, $67
0001DAFC 6401 30F0                  	dc.l Map_obj64+$64000000
0001DB00 8413 8348                  	dc.b $84, $13, $83, $48
0001DB04 6501 3278                  	dc.l Map_obj65+$65000000
0001DB08 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DB0C 6501 3278                  	dc.l Map_obj65+$65000000
0001DB10 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DB14 0B01 1A66                  	dc.l Map_obj0B+$B000000
0001DB18 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DB1C 0C01 1B36                  	dc.l Map_obj0C+$C000000
0001DB20 0200 4328                  	dc.b 2,	0, $43,	$28
0001DB24 7901 7936                  	dc.l Map_obj79+$79000000
0001DB28 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB2C                            	even
0001DB2C                            	even
0001DB2C                            
0001DB2C                            ; ---------------------------------------------------------------------------
0001DB2C                            ; Debug	list - Marble
0001DB2C                            ; ---------------------------------------------------------------------------
0001DB2C                            Debug_MZ:
0001DB2C                            	include "_inc\Debug list - MZ.asm"
0001DB2C                            ; ---------------------------------------------------------------------------
0001DB2C                            ; Debug	list - Marble
0001DB2C                            ; ---------------------------------------------------------------------------
0001DB2C 0012                       	dc.w $12
0001DB2E 2500 A5BC                  	dc.l Map_obj25+$25000000
0001DB32 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB36 2600 ABC2                  	dc.l Map_obj26+$26000000
0001DB3A 0000 0680                  	dc.b 0,	0, 6, $80
0001DB3E 2200 A070                  	dc.l Map_obj22+$22000000
0001DB42 0000 0444                  	dc.b 0,	0, 4, $44
0001DB46 3600 D746                  	dc.l Map_obj36+$36000000
0001DB4A 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB4E 4100 E472                  	dc.l Map_obj41+$41000000
0001DB52 0000 0523                  	dc.b 0,	0, 5, $23
0001DB56 1300 BA1C                  	dc.l Map_obj14+$13000000
0001DB5A 0000 0345                  	dc.b 0,	0, 3, $45
0001DB5E 4600 F058                  	dc.l Map_obj46+$46000000
0001DB62 0000 4000                  	dc.b 0,	0, $40,	0
0001DB66 4C00 F9A4                  	dc.l Map_obj4C+$4C000000
0001DB6A 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DB6E 4E00 FC88                  	dc.l Map_obj4E+$4E000000
0001DB72 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DB76 3300 C992                  	dc.l Map_obj33+$33000000
0001DB7A 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DB7E 5001 0086                  	dc.l Map_obj50+$50000000
0001DB82 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DB86 5101 0522                  	dc.l Map_obj51+$51000000
0001DB8A 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DB8E 5201 0798                  	dc.l Map_obj52+$52000000
0001DB92 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DB96 5300 8D68                  	dc.l Map_obj53+$53000000
0001DB9A 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DB9E 5400 F96A                  	dc.l Map_obj54+$54000000
0001DBA2 0000 8680                  	dc.b 0,	0, $86,	$80
0001DBA6 5501 098C                  	dc.l Map_obj55+$55000000
0001DBAA 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DBAE 7801 75B0                  	dc.l Map_obj78+$78000000
0001DBB2 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DBB6 7901 7936                  	dc.l Map_obj79+$79000000
0001DBBA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DBBE                            	even
0001DBBE                            	even
0001DBBE                            
0001DBBE                            ; ---------------------------------------------------------------------------
0001DBBE                            ; Debug	list - Star Light
0001DBBE                            ; ---------------------------------------------------------------------------
0001DBBE                            Debug_SLZ:
0001DBBE                            	include "_inc\Debug list - SLZ.asm"
0001DBBE                            ; ---------------------------------------------------------------------------
0001DBBE                            ; Debug	list - Star Light
0001DBBE                            ; ---------------------------------------------------------------------------
0001DBBE 000F                       	dc.w $F
0001DBC0 2500 A5BC                  	dc.l Map_obj25+$25000000
0001DBC4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DBC8 2600 ABC2                  	dc.l Map_obj26+$26000000
0001DBCC 0000 0680                  	dc.b 0,	0, 6, $80
0001DBD0 5901 148E                  	dc.l Map_obj59+$59000000
0001DBD4 0000 4000                  	dc.b 0,	0, $40,	0
0001DBD8 5300 8D68                  	dc.l Map_obj53+$53000000
0001DBDC 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DBE0 1800 872E                  	dc.l Map_obj18b+$18000000
0001DBE4 0000 4000                  	dc.b 0,	0, $40,	0
0001DBE8 5A01 15C8                  	dc.l Map_obj5A+$5A000000
0001DBEC 0000 4000                  	dc.b 0,	0, $40,	0
0001DBF0 5B01 1780                  	dc.l Map_obj5B+$5B000000
0001DBF4 0000 4000                  	dc.b 0,	0, $40,	0
0001DBF8 5D01 1D50                  	dc.l Map_obj5D+$5D000000
0001DBFC 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DC00 5E01 20E2                  	dc.l Map_obj5E+$5E000000
0001DC04 0000 0374                  	dc.b 0,	0, 3, $74
0001DC08 4100 E472                  	dc.l Map_obj41+$41000000
0001DC0C 0000 0523                  	dc.b 0,	0, 5, $23
0001DC10 1300 BA1C                  	dc.l Map_obj14+$13000000
0001DC14 0000 0480                  	dc.b 0,	0, 4, $80
0001DC18 1C00 8E78                  	dc.l Map_obj1C+$1C000000
0001DC1C 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DC20 5F01 2360                  	dc.l Map_obj5F+$5F000000
0001DC24 0000 0400                  	dc.b 0,	0, 4, 0
0001DC28 6001 2616                  	dc.l Map_obj60+$60000000
0001DC2C 0000 2429                  	dc.b 0,	0, $24,	$29
0001DC30 7901 7936                  	dc.l Map_obj79+$79000000
0001DC34 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC38                            	even
0001DC38                            	even
0001DC38                            
0001DC38                            ; ---------------------------------------------------------------------------
0001DC38                            ; Debug	list - Spring Yard
0001DC38                            ; ---------------------------------------------------------------------------
0001DC38                            Debug_SYZ:
0001DC38                            	include "_inc\Debug list - SYZ.asm"
0001DC38                            ; ---------------------------------------------------------------------------
0001DC38                            ; Debug	list - Spring Yard
0001DC38                            ; ---------------------------------------------------------------------------
0001DC38 000F                       	dc.w $F
0001DC3A 2500 A5BC                  	dc.l Map_obj25+$25000000
0001DC3E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC42 2600 ABC2                  	dc.l Map_obj26+$26000000
0001DC46 0000 0680                  	dc.b 0,	0, 6, $80
0001DC4A 3600 D746                  	dc.l Map_obj36+$36000000
0001DC4E 0000 051B                  	dc.b 0,	0, 5, $1B
0001DC52 4100 E472                  	dc.l Map_obj41+$41000000
0001DC56 0000 0523                  	dc.b 0,	0, 5, $23
0001DC5A 4300 E8F8                  	dc.l Map_obj43+$43000000
0001DC5E 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DC62 1200 F0D6                  	dc.l Map_obj12+$12000000
0001DC66 0000 0000                  	dc.b 0,	0, 0, 0
0001DC6A 4700 F252                  	dc.l Map_obj47+$47000000
0001DC6E 0000 0380                  	dc.b 0,	0, 3, $80
0001DC72 1F00 9DB4                  	dc.l Map_obj1F+$1F000000
0001DC76 0000 0400                  	dc.b 0,	0, 4, 0
0001DC7A 2200 A070                  	dc.l Map_obj22+$22000000
0001DC7E 0000 0444                  	dc.b 0,	0, 4, $44
0001DC82 5001 0086                  	dc.l Map_obj50+$50000000
0001DC86 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DC8A 1800 871C                  	dc.l Map_obj18a+$18000000
0001DC8E 0000 4000                  	dc.b 0,	0, $40,	0
0001DC92 5601 0E4E                  	dc.l Map_obj56+$56000000
0001DC96 0000 4000                  	dc.b 0,	0, $40,	0
0001DC9A 3200 C552                  	dc.l Map_obj32+$32000000
0001DC9E 0000 0513                  	dc.b 0,	0, 5, $13
0001DCA2 7801 75B0                  	dc.l Map_obj78+$78000000
0001DCA6 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DCAA 7901 7936                  	dc.l Map_obj79+$79000000
0001DCAE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DCB2                            	even
0001DCB2                            	even
0001DCB2                            
0001DCB2                            ; ---------------------------------------------------------------------------
0001DCB2                            ; Debug	list - Scrap Brain
0001DCB2                            ; ---------------------------------------------------------------------------
0001DCB2                            Debug_SBZ:
0001DCB2                            	include "_inc\Debug list - SBZ.asm"
0001DCB2                            ; ---------------------------------------------------------------------------
0001DCB2                            ; Debug	list - Scrap Brain
0001DCB2                            ; ---------------------------------------------------------------------------
0001DCB2 001D                       	dc.w $1D
0001DCB4 2500 A5BC                  	dc.l Map_obj25+$25000000
0001DCB8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DCBC 2600 ABC2                  	dc.l Map_obj26+$26000000
0001DCC0 0000 0680                  	dc.b 0,	0, 6, $80
0001DCC4 5F01 2360                  	dc.l Map_obj5F+$5F000000
0001DCC8 0000 0400                  	dc.b 0,	0, 4, 0
0001DCCC 6001 2616                  	dc.l Map_obj60+$60000000
0001DCD0 0000 0429                  	dc.b 0,	0, 4, $29
0001DCD4 7801 75B0                  	dc.l Map_obj78+$78000000
0001DCD8 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DCDC 1501 11EA                  	dc.l Map_obj15b+$15000000
0001DCE0 0702 4391                  	dc.b 7,	2, $43,	$91
0001DCE4 6701 5EC4                  	dc.l Map_obj67+$67000000
0001DCE8 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DCEC 5201 0798                  	dc.l Map_obj52+$52000000
0001DCF0 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DCF4 3200 C552                  	dc.l Map_obj32+$32000000
0001DCF8 0000 0513                  	dc.b 0,	0, 5, $13
0001DCFC 6901 611E                  	dc.l Map_obj69+$69000000
0001DD00 0300 4492                  	dc.b 3,	0, $44,	$92
0001DD04 6901 6178                  	dc.l Map_obj69a+$69000000
0001DD08 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DD0C 6A01 63D6                  	dc.l Map_obj6A+$6A000000
0001DD10 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DD14 5300 8D68                  	dc.l Map_obj53+$53000000
0001DD18 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DD1C 5201 0798                  	dc.l Map_obj52+$52000000
0001DD20 3903 4460                  	dc.b $39, 3, $44, $60
0001DD24 6B01 67A6                  	dc.l Map_obj6B+$6B000000
0001DD28 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DD2C 2A00 900E                  	dc.l Map_obj2A+$2A000000
0001DD30 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DD34 6B01 67A6                  	dc.l Map_obj6B+$6B000000
0001DD38 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DD3C 6A01 63D6                  	dc.l Map_obj6A+$6A000000
0001DD40 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DD44 6B01 67A6                  	dc.l Map_obj6B+$6B000000
0001DD48 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DD4C 6A01 63D6                  	dc.l Map_obj6A+$6A000000
0001DD50 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DD54 6B01 67A6                  	dc.l Map_obj6B+$6B000000
0001DD58 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DD5C 6C01 6968                  	dc.l Map_obj6C+$6C000000
0001DD60 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DD64 6D00 ED48                  	dc.l Map_obj6D+$6D000000
0001DD68 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DD6C 6D00 ED48                  	dc.l Map_obj6D+$6D000000
0001DD70 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DD74 6E01 6A1E                  	dc.l Map_obj6E+$6E000000
0001DD78 0400 047E                  	dc.b 4,	0, 4, $7E
0001DD7C 7001 6E74                  	dc.l Map_obj70+$70000000
0001DD80 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DD84 7101 1BF6                  	dc.l Map_obj71+$71000000
0001DD88 1100 8680                  	dc.b $11, 0, $86, $80
0001DD8C 1E00 94CC                  	dc.l Map_obj1E+$1E000000
0001DD90 0400 2302                  	dc.b 4,	0, $23,	2
0001DD94 7901 7936                  	dc.l Map_obj79+$79000000
0001DD98 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DD9C                            	even
0001DD9C                            	even
0001DD9C                            
0001DD9C                            ; ---------------------------------------------------------------------------
0001DD9C                            ; Debug	list - ending sequence / special stage
0001DD9C                            ; ---------------------------------------------------------------------------
0001DD9C                            Debug_Ending:
0001DD9C                            	include "_inc\Debug list - Ending and SS.asm"
0001DD9C                            ; ---------------------------------------------------------------------------
0001DD9C                            ; Debug	list - ending sequence / special stage
0001DD9C                            ; ---------------------------------------------------------------------------
0001DD9C 000D                       	dc.w $D
0001DD9E 2500 A5BC                  	dc.l Map_obj25+$25000000
0001DDA2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DDA6 4700 F252                  	dc.l Map_obj47+$47000000
0001DDAA 0000 0380                  	dc.b 0,	0, 3, $80
0001DDAE 2800 9AE6                  	dc.l Map_obj28a+$28000000
0001DDB2 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DDB6 2800 9AE6                  	dc.l Map_obj28a+$28000000
0001DDBA 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DDBE 2800 9AE6                  	dc.l Map_obj28a+$28000000
0001DDC2 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DDC6 2800 9ACE                  	dc.l Map_obj28+$28000000
0001DDCA 0D00 0553                  	dc.b $D, 0, 5, $53
0001DDCE 2800 9ACE                  	dc.l Map_obj28+$28000000
0001DDD2 0E00 0553                  	dc.b $E, 0, 5, $53
0001DDD6 2800 9ACE                  	dc.l Map_obj28+$28000000
0001DDDA 0F00 0573                  	dc.b $F, 0, 5, $73
0001DDDE 2800 9ACE                  	dc.l Map_obj28+$28000000
0001DDE2 1000 0573                  	dc.b $10, 0, 5,	$73
0001DDE6 2800 9AE6                  	dc.l Map_obj28a+$28000000
0001DDEA 1100 0585                  	dc.b $11, 0, 5,	$85
0001DDEE 2800 9AFE                  	dc.l Map_obj28b+$28000000
0001DDF2 1200 0593                  	dc.b $12, 0, 5,	$93
0001DDF6 2800 9AE6                  	dc.l Map_obj28a+$28000000
0001DDFA 1300 0565                  	dc.b $13, 0, 5,	$65
0001DDFE 2800 9AFE                  	dc.l Map_obj28b+$28000000
0001DE02 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DE06                            	even
0001DE06                            	even
0001DE06                            
0001DE06                            ; ---------------------------------------------------------------------------
0001DE06                            ; Main level load blocks
0001DE06                            ; ---------------------------------------------------------------------------
0001DE06                            MainLoadBlocks:
0001DE06                            	include "_inc\Main level load blocks.asm"
0001DE06                            ; ---------------------------------------------------------------------------
0001DE06                            ; Main level load blocks
0001DE06                            ;
0001DE06                            ; ===FORMAT===
0001DE06                            ; level	patterns + (1st	PLC num	* 10^6)
0001DE06                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DE06                            ; 256x256 mappings
0001DE06                            ; blank, music (unused), pal index (unused), pal index
0001DE06                            ; ---------------------------------------------------------------------------
0001DE06 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DE0A 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DE0E 0000 0000                  	dc.l Blk256_GHZ
0001DE12 0081 0404                  	dc.b 0,	$81, 4,	4
0001DE16 0000 0000                  	dc.l Nem_LZ+$6000000
0001DE1A 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DE1E 0000 0000                  	dc.l Blk256_LZ
0001DE22 0082 0505                  	dc.b 0,	$82, 5,	5
0001DE26 0000 0000                  	dc.l Nem_MZ+$8000000
0001DE2A 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DE2E 0000 0000                  	dc.l Blk256_MZ
0001DE32 0083 0606                  	dc.b 0,	$83, 6,	6
0001DE36 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DE3A 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DE3E 0000 0000                  	dc.l Blk256_SLZ
0001DE42 0084 0707                  	dc.b 0,	$84, 7,	7
0001DE46 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DE4A 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DE4E 0000 0000                  	dc.l Blk256_SYZ
0001DE52 0085 0808                  	dc.b 0,	$85, 8,	8
0001DE56 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DE5A 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DE5E 0000 0000                  	dc.l Blk256_SBZ
0001DE62 0086 0909                  	dc.b 0,	$86, 9,	9
0001DE66 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DE6A 0000 0000                  	dc.l Blk16_GHZ
0001DE6E 0000 0000                  	dc.l Blk256_GHZ
0001DE72 0086 1313                  	dc.b 0,	$86, $13, $13
0001DE76                            	even
0001DE76                            	even
0001DE76                            
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76                            ; Pattern load cues
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76                            ArtLoadCues:
0001DE76                            	include "_inc\Pattern load cues.asm"
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76                            ; Pattern load cues - index
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DE7A 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DE7E 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DE82 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DE86 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DE8A 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DE8E 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DE92 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DE96 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DE9A 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DE9E 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DEA2 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DEA6 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DEAA 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DEAE 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DEB2 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DEB6 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001DEB8                            ; ---------------------------------------------------------------------------
0001DEB8                            ; Pattern load cues - standard block 1
0001DEB8                            ; ---------------------------------------------------------------------------
0001DEB8 0004                       PLC_Main:	dc.w 4
0001DEBA 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DEBE F400                       		dc.w $F400
0001DEC0 0000 0000                  		dc.l Nem_Hud		; HUD
0001DEC4 D940                       		dc.w $D940
0001DEC6 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DECA FA80                       		dc.w $FA80
0001DECC 0000 0000                  		dc.l Nem_Ring		; rings
0001DED0 F640                       		dc.w $F640
0001DED2 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DED6 F2E0                       		dc.w $F2E0
0001DED8                            ; ---------------------------------------------------------------------------
0001DED8                            ; Pattern load cues - standard block 2
0001DED8                            ; ---------------------------------------------------------------------------
0001DED8 0002                       PLC_Main2:	dc.w 2
0001DEDA 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DEDE D000                       		dc.w $D000
0001DEE0 0000 0000                  		dc.l Nem_Shield		; shield
0001DEE4 A820                       		dc.w $A820
0001DEE6 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DEEA AB80                       		dc.w $AB80
0001DEEC                            ; ---------------------------------------------------------------------------
0001DEEC                            ; Pattern load cues - explosion
0001DEEC                            ; ---------------------------------------------------------------------------
0001DEEC 0000                       PLC_Explode:	dc.w 0
0001DEEE 0000 0000                  		dc.l Nem_Explode	; explosion
0001DEF2 B400                       		dc.w $B400
0001DEF4                            ; ---------------------------------------------------------------------------
0001DEF4                            ; Pattern load cues - game/time	over
0001DEF4                            ; ---------------------------------------------------------------------------
0001DEF4 0000                       PLC_GameOver:	dc.w 0
0001DEF6 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DEFA ABC0                       		dc.w $ABC0
0001DEFC                            ; ---------------------------------------------------------------------------
0001DEFC                            ; Pattern load cues - Green Hill
0001DEFC                            ; ---------------------------------------------------------------------------
0001DEFC 000B                       PLC_GHZ:	dc.w $B
0001DEFE 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DF02 0000                       		dc.w 0
0001DF04 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DF08 39A0                       		dc.w $39A0
0001DF0A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DF0E 6B00                       		dc.w $6B00
0001DF10 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DF14 7A00                       		dc.w $7A00
0001DF16 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DF1A 8000                       		dc.w $8000
0001DF1C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DF20 8880                       		dc.w $8880
0001DF22 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DF26 8F60                       		dc.w $8F60
0001DF28 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DF2C 9360                       		dc.w $9360
0001DF2E 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DF32 9E00                       		dc.w $9E00
0001DF34 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF38 A360                       		dc.w $A360
0001DF3A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF3E A460                       		dc.w $A460
0001DF40 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF44 A660                       		dc.w $A660
0001DF46 0005                       PLC_GHZ2:	dc.w 5
0001DF48 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DF4C 7000                       		dc.w $7000
0001DF4E 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DF52 71C0                       		dc.w $71C0
0001DF54 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DF58 7300                       		dc.w $7300
0001DF5A 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DF5E 7540                       		dc.w $7540
0001DF60 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DF64 A1E0                       		dc.w $A1E0
0001DF66 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DF6A 6980                       		dc.w $6980
0001DF6C                            ; ---------------------------------------------------------------------------
0001DF6C                            ; Pattern load cues - Labyrinth
0001DF6C                            ; ---------------------------------------------------------------------------
0001DF6C 000B                       PLC_LZ:		dc.w $B
0001DF6E 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DF72 0000                       		dc.w 0
0001DF74 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DF78 3C00                       		dc.w $3C00
0001DF7A 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DF7E 3E00                       		dc.w $3E00
0001DF80 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DF84 4B20                       		dc.w $4B20
0001DF86 0000 0000                  		dc.l Nem_Water		; water	surface
0001DF8A 6000                       		dc.w $6000
0001DF8C 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DF90 6200                       		dc.w $6200
0001DF92 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DF96 6500                       		dc.w $6500
0001DF98 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DF9C 6900                       		dc.w $6900
0001DF9E 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DFA2 7780                       		dc.w $7780
0001DFA4 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DFA8 7880                       		dc.w $7880
0001DFAA 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DFAE 7980                       		dc.w $7980
0001DFB0 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DFB4 94C0                       		dc.w $94C0
0001DFB6 000C                       PLC_LZ2:	dc.w $C
0001DFB8 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DFBC 7BC0                       		dc.w $7BC0
0001DFBE 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DFC2 7CC0                       		dc.w $7CC0
0001DFC4 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DFC8 7EC0                       		dc.w $7EC0
0001DFCA 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DFCE 5D20                       		dc.w $5D20
0001DFD0 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DFD4 8800                       		dc.w $8800
0001DFD6 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DFDA 89E0                       		dc.w $89E0
0001DFDC 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DFE0 8CE0                       		dc.w $8CE0
0001DFE2 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DFE6 90C0                       		dc.w $90C0
0001DFE8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DFEC A1E0                       		dc.w $A1E0
0001DFEE 0000 0000                  		dc.l Nem_Cork		; cork block
0001DFF2 A000                       		dc.w $A000
0001DFF4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DFF8 A360                       		dc.w $A360
0001DFFA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DFFE A460                       		dc.w $A460
0001E000 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E004 A660                       		dc.w $A660
0001E006                            ; ---------------------------------------------------------------------------
0001E006                            ; Pattern load cues - Marble
0001E006                            ; ---------------------------------------------------------------------------
0001E006 0009                       PLC_MZ:		dc.w 9
0001E008 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E00C 0000                       		dc.w 0
0001E00E 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E012 6000                       		dc.w $6000
0001E014 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E018 68A0                       		dc.w $68A0
0001E01A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E01E 7000                       		dc.w $7000
0001E020 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E024 71C0                       		dc.w $71C0
0001E026 0000 0000                  		dc.l Nem_Lava		; lava
0001E02A 7500                       		dc.w $7500
0001E02C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E030 8880                       		dc.w $8880
0001E032 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E036 8F60                       		dc.w $8F60
0001E038 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E03C 9700                       		dc.w $9700
0001E03E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E042 9FE0                       		dc.w $9FE0
0001E044 0004                       PLC_MZ2:	dc.w 4
0001E046 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E04A A260                       		dc.w $A260
0001E04C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E050 A360                       		dc.w $A360
0001E052 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E056 A460                       		dc.w $A460
0001E058 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E05C A660                       		dc.w $A660
0001E05E 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E062 5700                       		dc.w $5700
0001E064                            ; ---------------------------------------------------------------------------
0001E064                            ; Pattern load cues - Star Light
0001E064                            ; ---------------------------------------------------------------------------
0001E064 0008                       PLC_SLZ:	dc.w 8
0001E066 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E06A 0000                       		dc.w 0
0001E06C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E070 8000                       		dc.w $8000
0001E072 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E076 8520                       		dc.w $8520
0001E078 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E07C 9000                       		dc.w $9000
0001E07E 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E082 9C00                       		dc.w $9C00
0001E084 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E088 A260                       		dc.w $A260
0001E08A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E08E A360                       		dc.w $A360
0001E090 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E094 A460                       		dc.w $A460
0001E096 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E09A A660                       		dc.w $A660
0001E09C 0005                       PLC_SLZ2:	dc.w 5
0001E09E 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E0A2 6E80                       		dc.w $6E80
0001E0A4 0000 0000                  		dc.l Nem_Fan		; fan
0001E0A8 7400                       		dc.w $7400
0001E0AA 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E0AE 7980                       		dc.w $7980
0001E0B0 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E0B4 7B80                       		dc.w $7B80
0001E0B6 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E0BA 9B00                       		dc.w $9B00
0001E0BC 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E0C0 9E00                       		dc.w $9E00
0001E0C2                            ; ---------------------------------------------------------------------------
0001E0C2                            ; Pattern load cues - Spring Yard
0001E0C2                            ; ---------------------------------------------------------------------------
0001E0C2 0004                       PLC_SYZ:	dc.w 4
0001E0C4 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E0C8 0000                       		dc.w 0
0001E0CA 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E0CE 8000                       		dc.w $8000
0001E0D0 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E0D4 8880                       		dc.w $8880
0001E0D6 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E0DA 8F60                       		dc.w $8F60
0001E0DC 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E0E0 9700                       		dc.w $9700
0001E0E2 0007                       PLC_SYZ2:	dc.w 7
0001E0E4 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E0E8 7000                       		dc.w $7000
0001E0EA 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E0EE 72C0                       		dc.w $72C0
0001E0F0 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E0F4 7740                       		dc.w $7740
0001E0F6 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E0FA 9FE0                       		dc.w $9FE0
0001E0FC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E100 A1E0                       		dc.w $A1E0
0001E102 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E106 A360                       		dc.w $A360
0001E108 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E10C A460                       		dc.w $A460
0001E10E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E112 A660                       		dc.w $A660
0001E114                            ; ---------------------------------------------------------------------------
0001E114                            ; Pattern load cues - Scrap Brain
0001E114                            ; ---------------------------------------------------------------------------
0001E114 000B                       PLC_SBZ:	dc.w $B
0001E116 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E11A 0000                       		dc.w 0
0001E11C 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E120 5800                       		dc.w $5800
0001E122 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E126 5D00                       		dc.w $5D00
0001E128 0000 0000                  		dc.l Nem_Girder		; girder
0001E12C 5E00                       		dc.w $5E00
0001E12E 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E132 6040                       		dc.w $6040
0001E134 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E138 6880                       		dc.w $6880
0001E13A 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E13E 6900                       		dc.w $6900
0001E140 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E144 7220                       		dc.w $7220
0001E146 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E14A 76A0                       		dc.w $76A0
0001E14C 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E150 7B20                       		dc.w $7B20
0001E152 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E156 7EA0                       		dc.w $7EA0
0001E158 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E15C 9860                       		dc.w $9860
0001E15E 000C                       PLC_SBZ2:	dc.w $C
0001E160 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E164 5600                       		dc.w $5600
0001E166 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E16A 8000                       		dc.w $8000
0001E16C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E170 8520                       		dc.w $8520
0001E172 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E176 8C00                       		dc.w $8C00
0001E178 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E17C 8DE0                       		dc.w $8DE0
0001E17E 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E182 8FC0                       		dc.w $8FC0
0001E184 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E188 9240                       		dc.w $9240
0001E18A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E18E 7F20                       		dc.w $7F20
0001E190 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E194 9BE0                       		dc.w $9BE0
0001E196 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E19A A1E0                       		dc.w $A1E0
0001E19C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E1A0 A360                       		dc.w $A360
0001E1A2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E1A6 A460                       		dc.w $A460
0001E1A8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E1AC A660                       		dc.w $A660
0001E1AE                            ; ---------------------------------------------------------------------------
0001E1AE                            ; Pattern load cues - title card
0001E1AE                            ; ---------------------------------------------------------------------------
0001E1AE 0000                       PLC_TitleCard:	dc.w 0
0001E1B0 0000 0000                  		dc.l Nem_TitleCard
0001E1B4 B000                       		dc.w $B000
0001E1B6                            ; ---------------------------------------------------------------------------
0001E1B6                            ; Pattern load cues - act 3 boss
0001E1B6                            ; ---------------------------------------------------------------------------
0001E1B6 0005                       PLC_Boss:	dc.w 5
0001E1B8 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E1BC 8000                       		dc.w $8000
0001E1BE 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E1C2 8D80                       		dc.w $8D80
0001E1C4 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E1C8 93A0                       		dc.w $93A0
0001E1CA 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E1CE A300                       		dc.w $A300
0001E1D0 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E1D4 A300                       		dc.w $A300
0001E1D6 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E1DA A540                       		dc.w $A540
0001E1DC                            ; ---------------------------------------------------------------------------
0001E1DC                            ; Pattern load cues - act 1/2 signpost
0001E1DC                            ; ---------------------------------------------------------------------------
0001E1DC 0002                       PLC_Signpost:	dc.w 2
0001E1DE 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E1E2 D000                       		dc.w $D000
0001E1E4 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E1E8 96C0                       		dc.w $96C0
0001E1EA 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E1EE 8C40                       		dc.w $8C40
0001E1F0                            ; ---------------------------------------------------------------------------
0001E1F0                            ; Pattern load cues - beta special stage warp effect
0001E1F0                            ; ---------------------------------------------------------------------------
0001E1F0 0000                       PLC_Warp:	dc.w 0
0001E1F2 0000 0000                  		dc.l Nem_Warp
0001E1F6 A820                       		dc.w $A820
0001E1F8                            ; ---------------------------------------------------------------------------
0001E1F8                            ; Pattern load cues - special stage
0001E1F8                            ; ---------------------------------------------------------------------------
0001E1F8 0010                       PLC_SpeStage:	dc.w $10
0001E1FA 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E1FE 0000                       		dc.w 0
0001E200 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E204 0A20                       		dc.w $A20
0001E206 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E20A 2840                       		dc.w $2840
0001E20C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E210 4760                       		dc.w $4760
0001E212 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E216 4A20                       		dc.w $4A20
0001E218 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E21C 4C60                       		dc.w $4C60
0001E21E 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E222 5E00                       		dc.w $5E00
0001E224 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E228 6E00                       		dc.w $6E00
0001E22A 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E22E 7E00                       		dc.w $7E00
0001E230 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E234 8E00                       		dc.w $8E00
0001E236 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E23A 9E00                       		dc.w $9E00
0001E23C 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E240 AE00                       		dc.w $AE00
0001E242 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E246 BE00                       		dc.w $BE00
0001E248 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E24C EE00                       		dc.w $EE00
0001E24E 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E252 F2E0                       		dc.w $F2E0
0001E254 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E258 F400                       		dc.w $F400
0001E25A 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E25E F520                       		dc.w $F520
0001E260 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E264 F2E0                       		dc.w $F2E0
0001E266 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E26A F400                       		dc.w $F400
0001E26C 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E270 F520                       		dc.w $F520
0001E272                            ; ---------------------------------------------------------------------------
0001E272                            ; Pattern load cues - GHZ animals
0001E272                            ; ---------------------------------------------------------------------------
0001E272 0001                       PLC_GHZAnimals:	dc.w 1
0001E274 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E278 B000                       		dc.w $B000
0001E27A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E27E B240                       		dc.w $B240
0001E280                            ; ---------------------------------------------------------------------------
0001E280                            ; Pattern load cues - LZ animals
0001E280                            ; ---------------------------------------------------------------------------
0001E280 0001                       PLC_LZAnimals:	dc.w 1
0001E282 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E286 B000                       		dc.w $B000
0001E288 0000 0000                  		dc.l Nem_Seal		; seal
0001E28C B240                       		dc.w $B240
0001E28E                            ; ---------------------------------------------------------------------------
0001E28E                            ; Pattern load cues - MZ animals
0001E28E                            ; ---------------------------------------------------------------------------
0001E28E 0001                       PLC_MZAnimals:	dc.w 1
0001E290 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E294 B000                       		dc.w $B000
0001E296 0000 0000                  		dc.l Nem_Seal		; seal
0001E29A B240                       		dc.w $B240
0001E29C                            ; ---------------------------------------------------------------------------
0001E29C                            ; Pattern load cues - SLZ animals
0001E29C                            ; ---------------------------------------------------------------------------
0001E29C 0001                       PLC_SLZAnimals:	dc.w 1
0001E29E 0000 0000                  		dc.l Nem_Pig		; pig
0001E2A2 B000                       		dc.w $B000
0001E2A4 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E2A8 B240                       		dc.w $B240
0001E2AA                            ; ---------------------------------------------------------------------------
0001E2AA                            ; Pattern load cues - SYZ animals
0001E2AA                            ; ---------------------------------------------------------------------------
0001E2AA 0001                       PLC_SYZAnimals:	dc.w 1
0001E2AC 0000 0000                  		dc.l Nem_Pig		; pig
0001E2B0 B000                       		dc.w $B000
0001E2B2 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E2B6 B240                       		dc.w $B240
0001E2B8                            ; ---------------------------------------------------------------------------
0001E2B8                            ; Pattern load cues - SBZ animals
0001E2B8                            ; ---------------------------------------------------------------------------
0001E2B8 0001                       PLC_SBZAnimals:	dc.w 1
0001E2BA 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E2BE B000                       		dc.w $B000
0001E2C0 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E2C4 B240                       		dc.w $B240
0001E2C6                            ; ---------------------------------------------------------------------------
0001E2C6                            ; Pattern load cues - special stage results screen
0001E2C6                            ; ---------------------------------------------------------------------------
0001E2C6 0001                       PLC_SpeStResult:dc.w 1
0001E2C8 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E2CC A820                       		dc.w $A820
0001E2CE 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E2D2 AA20                       		dc.w $AA20
0001E2D4                            ; ---------------------------------------------------------------------------
0001E2D4                            ; Pattern load cues - ending sequence
0001E2D4                            ; ---------------------------------------------------------------------------
0001E2D4 000E                       PLC_Ending:	dc.w $E
0001E2D6 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E2DA 0000                       		dc.w 0
0001E2DC 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E2E0 39A0                       		dc.w $39A0
0001E2E2 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E2E6 6B00                       		dc.w $6B00
0001E2E8 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E2EC 7400                       		dc.w $7400
0001E2EE 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E2F2 78A0                       		dc.w $78A0
0001E2F4 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E2F8 7C20                       		dc.w $7C20
0001E2FA 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E2FE A480                       		dc.w $A480
0001E300 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E304 AA60                       		dc.w $AA60
0001E306 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E30A ACA0                       		dc.w $ACA0
0001E30C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E310 AE60                       		dc.w $AE60
0001E312 0000 0000                  		dc.l Nem_Seal		; seal
0001E316 B0A0                       		dc.w $B0A0
0001E318 0000 0000                  		dc.l Nem_Pig		; pig
0001E31C B260                       		dc.w $B260
0001E31E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E322 B4A0                       		dc.w $B4A0
0001E324 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E328 B660                       		dc.w $B660
0001E32A 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E32E B8A0                       		dc.w $B8A0
0001E330                            ; ---------------------------------------------------------------------------
0001E330                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E330                            ; ---------------------------------------------------------------------------
0001E330 0002                       PLC_TryAgain:	dc.w 2
0001E332 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E336 78A0                       		dc.w $78A0
0001E338 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E33C 7C20                       		dc.w $7C20
0001E33E 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E342 B400                       		dc.w $B400
0001E344                            ; ---------------------------------------------------------------------------
0001E344                            ; Pattern load cues - Eggman on SBZ 2
0001E344                            ; ---------------------------------------------------------------------------
0001E344 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E346 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E34A A300                       		dc.w $A300
0001E34C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E350 8000                       		dc.w $8000
0001E352 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E356 9400                       		dc.w $9400
0001E358                            ; ---------------------------------------------------------------------------
0001E358                            ; Pattern load cues - final boss
0001E358                            ; ---------------------------------------------------------------------------
0001E358 0004                       PLC_FZBoss:	dc.w 4
0001E35A 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E35E 7400                       		dc.w $7400
0001E360 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E364 6000                       		dc.w $6000
0001E366 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E36A 8000                       		dc.w $8000
0001E36C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E370 8E00                       		dc.w $8E00
0001E372 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E376 A540                       		dc.w $A540
0001E378                            ; ---------------------------------------------------------------------------
0001E378                            ; Pattern load cues - Teto boss
0001E378                            ; ---------------------------------------------------------------------------
0001E378 0002                       PLC_TetoBoss:	dc.w 2
0001E37A 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E37E 8000                       		dc.w $8000
0001E380 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E384 93A0                       		dc.w $93A0
0001E386 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E38A 9000                       		dc.w $9000
0001E38C                            		even
0001E38C                            		even
0001E38C                            
0001E38C                            		incbin	misc\padding.bin
0001E47A                            		even
0001E47A                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E8CA                            		even
0001E8CA                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E95C                            		even
0001E95C                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EA9E                            		even
0001EA9E                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EAEC                            		even
0001EAEC                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001EC00                            		even
0001EC00                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FACA                            		even
0001FACA                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023BD0                            		even
00023BD0                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023C04                            		even
00023C04                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023CC2                            		even
00023CC2                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002416A                            		even
0002416A                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000241C8                            		even
000241C8                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024DCE                            		even
00024DCE                            ; ---------------------------------------------------------------------------
00024DCE                            ; Sprite mappings - Sonic
00024DCE                            ; ---------------------------------------------------------------------------
00024DCE                            Map_Sonic:
00024DCE                            	include "_maps\Sonic.asm"
00024DCE                            Map_6d2d:
00024DCE 0000                       Map_6d2d_0: 	dc.w Map_6d2d_B8-Map_6d2d
00024DD0 0000                       Map_6d2d_2: 	dc.w Map_6d2d_B9-Map_6d2d
00024DD2 0000                       Map_6d2d_4: 	dc.w Map_6d2d_C4-Map_6d2d
00024DD4 0000                       Map_6d2d_6: 	dc.w Map_6d2d_D4-Map_6d2d
00024DD6 0000                       Map_6d2d_8: 	dc.w Map_6d2d_E4-Map_6d2d
00024DD8 0000                       Map_6d2d_A: 	dc.w Map_6d2d_F4-Map_6d2d
00024DDA 0000                       Map_6d2d_C: 	dc.w Map_6d2d_104-Map_6d2d
00024DDC 0000                       Map_6d2d_E: 	dc.w Map_6d2d_119-Map_6d2d
00024DDE 0000                       Map_6d2d_10: 	dc.w Map_6d2d_124-Map_6d2d
00024DE0 0000                       Map_6d2d_12: 	dc.w Map_6d2d_12F-Map_6d2d
00024DE2 0000                       Map_6d2d_14: 	dc.w Map_6d2d_144-Map_6d2d
00024DE4 0000                       Map_6d2d_16: 	dc.w Map_6d2d_14F-Map_6d2d
00024DE6 0000                       Map_6d2d_18: 	dc.w Map_6d2d_15F-Map_6d2d
00024DE8 0000                       Map_6d2d_1A: 	dc.w Map_6d2d_179-Map_6d2d
00024DEA 0000                       Map_6d2d_1C: 	dc.w Map_6d2d_198-Map_6d2d
00024DEC 0000                       Map_6d2d_1E: 	dc.w Map_6d2d_1AD-Map_6d2d
00024DEE 0000                       Map_6d2d_20: 	dc.w Map_6d2d_1C7-Map_6d2d
00024DF0 0000                       Map_6d2d_22: 	dc.w Map_6d2d_1DC-Map_6d2d
00024DF2 0000                       Map_6d2d_24: 	dc.w Map_6d2d_1F6-Map_6d2d
00024DF4 0000                       Map_6d2d_26: 	dc.w Map_6d2d_20B-Map_6d2d
00024DF6 0000                       Map_6d2d_28: 	dc.w Map_6d2d_216-Map_6d2d
00024DF8 0000                       Map_6d2d_2A: 	dc.w Map_6d2d_221-Map_6d2d
00024DFA 0000                       Map_6d2d_2C: 	dc.w Map_6d2d_236-Map_6d2d
00024DFC 0000                       Map_6d2d_2E: 	dc.w Map_6d2d_241-Map_6d2d
00024DFE 0000                       Map_6d2d_30: 	dc.w Map_6d2d_251-Map_6d2d
00024E00 0000                       Map_6d2d_32: 	dc.w Map_6d2d_270-Map_6d2d
00024E02 0000                       Map_6d2d_34: 	dc.w Map_6d2d_28F-Map_6d2d
00024E04 0000                       Map_6d2d_36: 	dc.w Map_6d2d_2A4-Map_6d2d
00024E06 0000                       Map_6d2d_38: 	dc.w Map_6d2d_2BE-Map_6d2d
00024E08 0000                       Map_6d2d_3A: 	dc.w Map_6d2d_2D3-Map_6d2d
00024E0A 0000                       Map_6d2d_3C: 	dc.w Map_6d2d_2ED-Map_6d2d
00024E0C 0000                       Map_6d2d_3E: 	dc.w Map_6d2d_2F8-Map_6d2d
00024E0E 0000                       Map_6d2d_40: 	dc.w Map_6d2d_303-Map_6d2d
00024E10 0000                       Map_6d2d_42: 	dc.w Map_6d2d_30E-Map_6d2d
00024E12 0000                       Map_6d2d_44: 	dc.w Map_6d2d_319-Map_6d2d
00024E14 0000                       Map_6d2d_46: 	dc.w Map_6d2d_32E-Map_6d2d
00024E16 0000                       Map_6d2d_48: 	dc.w Map_6d2d_33E-Map_6d2d
00024E18 0000                       Map_6d2d_4A: 	dc.w Map_6d2d_353-Map_6d2d
00024E1A 0000                       Map_6d2d_4C: 	dc.w Map_6d2d_363-Map_6d2d
00024E1C 0000                       Map_6d2d_4E: 	dc.w Map_6d2d_36E-Map_6d2d
00024E1E 0000                       Map_6d2d_50: 	dc.w Map_6d2d_379-Map_6d2d
00024E20 0000                       Map_6d2d_52: 	dc.w Map_6d2d_384-Map_6d2d
00024E22 0000                       Map_6d2d_54: 	dc.w Map_6d2d_38F-Map_6d2d
00024E24 0000                       Map_6d2d_56: 	dc.w Map_6d2d_3A4-Map_6d2d
00024E26 0000                       Map_6d2d_58: 	dc.w Map_6d2d_3AF-Map_6d2d
00024E28 0000                       Map_6d2d_5A: 	dc.w Map_6d2d_3C4-Map_6d2d
00024E2A 0000                       Map_6d2d_5C: 	dc.w Map_6d2d_3CF-Map_6d2d
00024E2C 0000                       Map_6d2d_5E: 	dc.w Map_6d2d_3D5-Map_6d2d
00024E2E 0000                       Map_6d2d_60: 	dc.w Map_6d2d_3DB-Map_6d2d
00024E30 0000                       Map_6d2d_62: 	dc.w Map_6d2d_3E1-Map_6d2d
00024E32 0000                       Map_6d2d_64: 	dc.w Map_6d2d_3E7-Map_6d2d
00024E34 0000                       Map_6d2d_66: 	dc.w Map_6d2d_3ED-Map_6d2d
00024E36 0000                       Map_6d2d_68: 	dc.w Map_6d2d_3F8-Map_6d2d
00024E38 0000                       Map_6d2d_6A: 	dc.w Map_6d2d_3FE-Map_6d2d
00024E3A 0000                       Map_6d2d_6C: 	dc.w Map_6d2d_409-Map_6d2d
00024E3C 0000                       Map_6d2d_6E: 	dc.w Map_6d2d_40F-Map_6d2d
00024E3E 0000                       Map_6d2d_70: 	dc.w Map_6d2d_41A-Map_6d2d
00024E40 0000                       Map_6d2d_72: 	dc.w Map_6d2d_42F-Map_6d2d
00024E42 0000                       Map_6d2d_74: 	dc.w Map_6d2d_44E-Map_6d2d
00024E44 0000                       Map_6d2d_76: 	dc.w Map_6d2d_459-Map_6d2d
00024E46 0000                       Map_6d2d_78: 	dc.w Map_6d2d_464-Map_6d2d
00024E48 0000                       Map_6d2d_7A: 	dc.w Map_6d2d_479-Map_6d2d
00024E4A 0000                       Map_6d2d_7C: 	dc.w Map_6d2d_484-Map_6d2d
00024E4C 0000                       Map_6d2d_7E: 	dc.w Map_6d2d_494-Map_6d2d
00024E4E 0000                       Map_6d2d_80: 	dc.w Map_6d2d_4A9-Map_6d2d
00024E50 0000                       Map_6d2d_82: 	dc.w Map_6d2d_4B9-Map_6d2d
00024E52 0000                       Map_6d2d_84: 	dc.w Map_6d2d_4CE-Map_6d2d
00024E54 0000                       Map_6d2d_86: 	dc.w Map_6d2d_4E3-Map_6d2d
00024E56 0000                       Map_6d2d_88: 	dc.w Map_6d2d_4FD-Map_6d2d
00024E58 0000                       Map_6d2d_8A: 	dc.w Map_6d2d_517-Map_6d2d
00024E5A 0000                       Map_6d2d_8C: 	dc.w Map_6d2d_522-Map_6d2d
00024E5C 0000                       Map_6d2d_8E: 	dc.w Map_6d2d_532-Map_6d2d
00024E5E 0000                       Map_6d2d_90: 	dc.w Map_6d2d_53D-Map_6d2d
00024E60 0000                       Map_6d2d_92: 	dc.w Map_6d2d_54D-Map_6d2d
00024E62 0000                       Map_6d2d_94: 	dc.w Map_6d2d_558-Map_6d2d
00024E64 0000                       Map_6d2d_96: 	dc.w Map_6d2d_568-Map_6d2d
00024E66 0000                       Map_6d2d_98: 	dc.w Map_6d2d_578-Map_6d2d
00024E68 0000                       Map_6d2d_9A: 	dc.w Map_6d2d_592-Map_6d2d
00024E6A 0000                       Map_6d2d_9C: 	dc.w Map_6d2d_5AC-Map_6d2d
00024E6C 0000                       Map_6d2d_9E: 	dc.w Map_6d2d_5B7-Map_6d2d
00024E6E 0000                       Map_6d2d_A0: 	dc.w Map_6d2d_5C7-Map_6d2d
00024E70 0000                       Map_6d2d_A2: 	dc.w Map_6d2d_5CD-Map_6d2d
00024E72 0000                       Map_6d2d_A4: 	dc.w Map_6d2d_5D3-Map_6d2d
00024E74 0000                       Map_6d2d_A6: 	dc.w Map_6d2d_5D9-Map_6d2d
00024E76 0000                       Map_6d2d_A8: 	dc.w Map_6d2d_5EE-Map_6d2d
00024E78 0000                       Map_6d2d_AA: 	dc.w Map_6d2d_5FE-Map_6d2d
00024E7A 0000                       Map_6d2d_AC: 	dc.w Map_6d2d_60E-Map_6d2d
00024E7C 0000                       Map_6d2d_AE: 	dc.w Map_6d2d_61E-Map_6d2d
00024E7E 0000                       Map_6d2d_B0: 	dc.w Map_6d2d_629-Map_6d2d
00024E80 0000                       Map_6d2d_B2: 	dc.w Map_6d2d_634-Map_6d2d
00024E82 0000                       Map_6d2d_B4: 	dc.w Map_6d2d_644-Map_6d2d
00024E84 0000                       Map_6d2d_B6: 	dc.w Map_6d2d_64F-Map_6d2d
00024E86 00                         Map_6d2d_B8: 	dc.b $0
00024E87 02                         Map_6d2d_B9: 	dc.b $2
00024E88 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024E8D 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024E92 03                         Map_6d2d_C4: 	dc.b $3
00024E93 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024E98 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024E9D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024EA2 03                         Map_6d2d_D4: 	dc.b $3
00024EA3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024EA8 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024EAD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024EB2 03                         Map_6d2d_E4: 	dc.b $3
00024EB3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024EB8 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024EBD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024EC2 03                         Map_6d2d_F4: 	dc.b $3
00024EC3 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024EC8 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024ECD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024ED2 04                         Map_6d2d_104: 	dc.b $4
00024ED3 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024ED8 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024EDD FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024EE2 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024EE7 02                         Map_6d2d_119: 	dc.b $2
00024EE8 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024EED FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024EF2 02                         Map_6d2d_124: 	dc.b $2
00024EF3 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024EF8 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024EFD 04                         Map_6d2d_12F: 	dc.b $4
00024EFE EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024F03 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024F08 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024F0D 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024F12 02                         Map_6d2d_144: 	dc.b $2
00024F13 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024F18 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024F1D 03                         Map_6d2d_14F: 	dc.b $3
00024F1E ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024F23 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024F28 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024F2D 05                         Map_6d2d_15F: 	dc.b $5
00024F2E EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024F33 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024F38 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024F3D 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024F42 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024F47 06                         Map_6d2d_179: 	dc.b $6
00024F48 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024F4D EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024F52 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024F57 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024F5C FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024F61 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024F66 04                         Map_6d2d_198: 	dc.b $4
00024F67 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024F6C ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024F71 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024F76 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00024F7B 05                         Map_6d2d_1AD: 	dc.b $5
00024F7C EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024F81 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00024F86 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00024F8B 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00024F90 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00024F95 04                         Map_6d2d_1C7: 	dc.b $4
00024F96 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024F9B EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024FA0 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00024FA5 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00024FAA 05                         Map_6d2d_1DC: 	dc.b $5
00024FAB ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024FB0 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024FB5 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00024FBA FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00024FBF 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00024FC4 04                         Map_6d2d_1F6: 	dc.b $4
00024FC5 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00024FCA EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00024FCF FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00024FD4 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00024FD9 02                         Map_6d2d_20B: 	dc.b $2
00024FDA F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00024FDF EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00024FE4 02                         Map_6d2d_216: 	dc.b $2
00024FE5 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00024FEA F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00024FEF 04                         Map_6d2d_221: 	dc.b $4
00024FF0 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00024FF5 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00024FFA FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00024FFF 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00025004 02                         Map_6d2d_236: 	dc.b $2
00025005 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
0002500A F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
0002500F 03                         Map_6d2d_241: 	dc.b $3
00025010 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00025015 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
0002501A F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
0002501F 06                         Map_6d2d_251: 	dc.b $6
00025020 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025025 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
0002502A F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
0002502F F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00025034 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00025039 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
0002503E 06                         Map_6d2d_270: 	dc.b $6
0002503F FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025044 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00025049 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
0002504E F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025053 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00025058 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
0002505D 04                         Map_6d2d_28F: 	dc.b $4
0002505E FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025063 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00025068 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
0002506D 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025072 05                         Map_6d2d_2A4: 	dc.b $5
00025073 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025078 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
0002507D F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025082 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00025087 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
0002508C 04                         Map_6d2d_2BE: 	dc.b $4
0002508D FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025092 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00025097 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
0002509C 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000250A1 05                         Map_6d2d_2D3: 	dc.b $5
000250A2 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000250A7 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000250AC F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000250B1 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000250B6 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000250BB 02                         Map_6d2d_2ED: 	dc.b $2
000250BC EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000250C1 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000250C6 02                         Map_6d2d_2F8: 	dc.b $2
000250C7 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000250CC FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000250D1 02                         Map_6d2d_303: 	dc.b $2
000250D2 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000250D7 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000250DC 02                         Map_6d2d_30E: 	dc.b $2
000250DD EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000250E2 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000250E7 04                         Map_6d2d_319: 	dc.b $4
000250E8 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000250ED EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000250F2 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000250F7 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000250FC 03                         Map_6d2d_32E: 	dc.b $3
000250FD EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025102 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025107 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002510C 04                         Map_6d2d_33E: 	dc.b $4
0002510D EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025112 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025117 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002511C FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025121 03                         Map_6d2d_353: 	dc.b $3
00025122 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025127 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002512C FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025131 02                         Map_6d2d_363: 	dc.b $2
00025132 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025137 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002513C 02                         Map_6d2d_36E: 	dc.b $2
0002513D F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025142 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025147 02                         Map_6d2d_379: 	dc.b $2
00025148 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002514D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025152 02                         Map_6d2d_384: 	dc.b $2
00025153 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025158 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002515D 04                         Map_6d2d_38F: 	dc.b $4
0002515E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025163 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025168 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002516D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025172 02                         Map_6d2d_3A4: 	dc.b $2
00025173 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025178 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002517D 04                         Map_6d2d_3AF: 	dc.b $4
0002517E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025183 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025188 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002518D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025192 02                         Map_6d2d_3C4: 	dc.b $2
00025193 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025198 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002519D 01                         Map_6d2d_3CF: 	dc.b $1
0002519E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251A3 01                         Map_6d2d_3D5: 	dc.b $1
000251A4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251A9 01                         Map_6d2d_3DB: 	dc.b $1
000251AA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251AF 01                         Map_6d2d_3E1: 	dc.b $1
000251B0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251B5 01                         Map_6d2d_3E7: 	dc.b $1
000251B6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251BB 02                         Map_6d2d_3ED: 	dc.b $2
000251BC F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000251C1 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000251C6 01                         Map_6d2d_3F8: 	dc.b $1
000251C7 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251CC 02                         Map_6d2d_3FE: 	dc.b $2
000251CD EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000251D2 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000251D7 01                         Map_6d2d_409: 	dc.b $1
000251D8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251DD 02                         Map_6d2d_40F: 	dc.b $2
000251DE ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000251E3 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000251E8 04                         Map_6d2d_41A: 	dc.b $4
000251E9 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000251EE FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000251F3 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000251F8 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000251FD 06                         Map_6d2d_42F: 	dc.b $6
000251FE F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00025203 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00025208 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
0002520D 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025212 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00025217 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
0002521C 02                         Map_6d2d_44E: 	dc.b $2
0002521D 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025222 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00025227 02                         Map_6d2d_459: 	dc.b $2
00025228 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
0002522D EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025232 04                         Map_6d2d_464: 	dc.b $4
00025233 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025238 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002523D 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025242 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025247 02                         Map_6d2d_479: 	dc.b $2
00025248 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002524D F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025252 03                         Map_6d2d_484: 	dc.b $3
00025253 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00025258 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
0002525D 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025262 04                         Map_6d2d_494: 	dc.b $4
00025263 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025268 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002526D 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025272 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025277 03                         Map_6d2d_4A9: 	dc.b $3
00025278 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
0002527D 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00025282 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00025287 04                         Map_6d2d_4B9: 	dc.b $4
00025288 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002528D 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025292 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025297 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002529C 04                         Map_6d2d_4CE: 	dc.b $4
0002529D F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000252A2 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000252A7 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000252AC F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000252B1 05                         Map_6d2d_4E3: 	dc.b $5
000252B2 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000252B7 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000252BC 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000252C1 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000252C6 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000252CB 05                         Map_6d2d_4FD: 	dc.b $5
000252CC E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000252D1 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000252D6 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000252DB 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000252E0 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000252E5 02                         Map_6d2d_517: 	dc.b $2
000252E6 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000252EB 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000252F0 03                         Map_6d2d_522: 	dc.b $3
000252F1 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000252F6 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000252FB 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025300 02                         Map_6d2d_532: 	dc.b $2
00025301 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00025306 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002530B 03                         Map_6d2d_53D: 	dc.b $3
0002530C EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025311 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025316 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002531B 02                         Map_6d2d_54D: 	dc.b $2
0002531C EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025321 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00025326 03                         Map_6d2d_558: 	dc.b $3
00025327 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002532C 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025331 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025336 03                         Map_6d2d_568: 	dc.b $3
00025337 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002533C E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025341 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025346 05                         Map_6d2d_578: 	dc.b $5
00025347 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002534C E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025351 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025356 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002535B 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025360 05                         Map_6d2d_592: 	dc.b $5
00025361 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025366 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002536B F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025370 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025375 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002537A 02                         Map_6d2d_5AC: 	dc.b $2
0002537B EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025380 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025385 03                         Map_6d2d_5B7: 	dc.b $3
00025386 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002538B F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025390 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025395 01                         Map_6d2d_5C7: 	dc.b $1
00025396 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002539B 01                         Map_6d2d_5CD: 	dc.b $1
0002539C F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000253A1 01                         Map_6d2d_5D3: 	dc.b $1
000253A2 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000253A7 04                         Map_6d2d_5D9: 	dc.b $4
000253A8 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000253AD F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000253B2 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000253B7 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000253BC 03                         Map_6d2d_5EE: 	dc.b $3
000253BD F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000253C2 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
000253C7 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000253CC 03                         Map_6d2d_5FE: 	dc.b $3
000253CD F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000253D2 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000253D7 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000253DC 03                         Map_6d2d_60E: 	dc.b $3
000253DD EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000253E2 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000253E7 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000253EC 02                         Map_6d2d_61E: 	dc.b $2
000253ED F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000253F2 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000253F7 02                         Map_6d2d_629: 	dc.b $2
000253F8 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000253FD EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025402 03                         Map_6d2d_634: 	dc.b $3
00025403 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00025408 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
0002540D 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025412 02                         Map_6d2d_644: 	dc.b $2
00025413 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00025418 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
0002541D 04                         Map_6d2d_64F: 	dc.b $4
0002541E ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025423 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00025428 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
0002542D 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025432                            	even
00025432                            	even
00025432                            
00025432                            ; ---------------------------------------------------------------------------
00025432                            ; Uncompressed graphics	loading	array for Sonic
00025432                            ; ---------------------------------------------------------------------------
00025432                            SonicDynPLC:
00025432                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025432                            DPLC_2d5b:
00025432 0000                       DPLC_2d5b_0: 	dc.w DPLC_2d5b_B8-DPLC_2d5b
00025434 0000                       DPLC_2d5b_2: 	dc.w DPLC_2d5b_B9-DPLC_2d5b
00025436 0000                       DPLC_2d5b_4: 	dc.w DPLC_2d5b_BE-DPLC_2d5b
00025438 0000                       DPLC_2d5b_6: 	dc.w DPLC_2d5b_C5-DPLC_2d5b
0002543A 0000                       DPLC_2d5b_8: 	dc.w DPLC_2d5b_CC-DPLC_2d5b
0002543C 0000                       DPLC_2d5b_A: 	dc.w DPLC_2d5b_D3-DPLC_2d5b
0002543E 0000                       DPLC_2d5b_C: 	dc.w DPLC_2d5b_DA-DPLC_2d5b
00025440 0000                       DPLC_2d5b_E: 	dc.w DPLC_2d5b_E3-DPLC_2d5b
00025442 0000                       DPLC_2d5b_10: 	dc.w DPLC_2d5b_E8-DPLC_2d5b
00025444 0000                       DPLC_2d5b_12: 	dc.w DPLC_2d5b_ED-DPLC_2d5b
00025446 0000                       DPLC_2d5b_14: 	dc.w DPLC_2d5b_F6-DPLC_2d5b
00025448 0000                       DPLC_2d5b_16: 	dc.w DPLC_2d5b_FB-DPLC_2d5b
0002544A 0000                       DPLC_2d5b_18: 	dc.w DPLC_2d5b_102-DPLC_2d5b
0002544C 0000                       DPLC_2d5b_1A: 	dc.w DPLC_2d5b_10D-DPLC_2d5b
0002544E 0000                       DPLC_2d5b_1C: 	dc.w DPLC_2d5b_11A-DPLC_2d5b
00025450 0000                       DPLC_2d5b_1E: 	dc.w DPLC_2d5b_123-DPLC_2d5b
00025452 0000                       DPLC_2d5b_20: 	dc.w DPLC_2d5b_12E-DPLC_2d5b
00025454 0000                       DPLC_2d5b_22: 	dc.w DPLC_2d5b_137-DPLC_2d5b
00025456 0000                       DPLC_2d5b_24: 	dc.w DPLC_2d5b_142-DPLC_2d5b
00025458 0000                       DPLC_2d5b_26: 	dc.w DPLC_2d5b_14B-DPLC_2d5b
0002545A 0000                       DPLC_2d5b_28: 	dc.w DPLC_2d5b_150-DPLC_2d5b
0002545C 0000                       DPLC_2d5b_2A: 	dc.w DPLC_2d5b_155-DPLC_2d5b
0002545E 0000                       DPLC_2d5b_2C: 	dc.w DPLC_2d5b_15E-DPLC_2d5b
00025460 0000                       DPLC_2d5b_2E: 	dc.w DPLC_2d5b_163-DPLC_2d5b
00025462 0000                       DPLC_2d5b_30: 	dc.w DPLC_2d5b_16A-DPLC_2d5b
00025464 0000                       DPLC_2d5b_32: 	dc.w DPLC_2d5b_177-DPLC_2d5b
00025466 0000                       DPLC_2d5b_34: 	dc.w DPLC_2d5b_184-DPLC_2d5b
00025468 0000                       DPLC_2d5b_36: 	dc.w DPLC_2d5b_18D-DPLC_2d5b
0002546A 0000                       DPLC_2d5b_38: 	dc.w DPLC_2d5b_198-DPLC_2d5b
0002546C 0000                       DPLC_2d5b_3A: 	dc.w DPLC_2d5b_1A1-DPLC_2d5b
0002546E 0000                       DPLC_2d5b_3C: 	dc.w DPLC_2d5b_1AC-DPLC_2d5b
00025470 0000                       DPLC_2d5b_3E: 	dc.w DPLC_2d5b_1B1-DPLC_2d5b
00025472 0000                       DPLC_2d5b_40: 	dc.w DPLC_2d5b_1B6-DPLC_2d5b
00025474 0000                       DPLC_2d5b_42: 	dc.w DPLC_2d5b_1BB-DPLC_2d5b
00025476 0000                       DPLC_2d5b_44: 	dc.w DPLC_2d5b_1C0-DPLC_2d5b
00025478 0000                       DPLC_2d5b_46: 	dc.w DPLC_2d5b_1C9-DPLC_2d5b
0002547A 0000                       DPLC_2d5b_48: 	dc.w DPLC_2d5b_1D0-DPLC_2d5b
0002547C 0000                       DPLC_2d5b_4A: 	dc.w DPLC_2d5b_1D9-DPLC_2d5b
0002547E 0000                       DPLC_2d5b_4C: 	dc.w DPLC_2d5b_1E0-DPLC_2d5b
00025480 0000                       DPLC_2d5b_4E: 	dc.w DPLC_2d5b_1E5-DPLC_2d5b
00025482 0000                       DPLC_2d5b_50: 	dc.w DPLC_2d5b_1EA-DPLC_2d5b
00025484 0000                       DPLC_2d5b_52: 	dc.w DPLC_2d5b_1EF-DPLC_2d5b
00025486 0000                       DPLC_2d5b_54: 	dc.w DPLC_2d5b_1F4-DPLC_2d5b
00025488 0000                       DPLC_2d5b_56: 	dc.w DPLC_2d5b_1FD-DPLC_2d5b
0002548A 0000                       DPLC_2d5b_58: 	dc.w DPLC_2d5b_202-DPLC_2d5b
0002548C 0000                       DPLC_2d5b_5A: 	dc.w DPLC_2d5b_20B-DPLC_2d5b
0002548E 0000                       DPLC_2d5b_5C: 	dc.w DPLC_2d5b_210-DPLC_2d5b
00025490 0000                       DPLC_2d5b_5E: 	dc.w DPLC_2d5b_213-DPLC_2d5b
00025492 0000                       DPLC_2d5b_60: 	dc.w DPLC_2d5b_216-DPLC_2d5b
00025494 0000                       DPLC_2d5b_62: 	dc.w DPLC_2d5b_219-DPLC_2d5b
00025496 0000                       DPLC_2d5b_64: 	dc.w DPLC_2d5b_21C-DPLC_2d5b
00025498 0000                       DPLC_2d5b_66: 	dc.w DPLC_2d5b_21F-DPLC_2d5b
0002549A 0000                       DPLC_2d5b_68: 	dc.w DPLC_2d5b_224-DPLC_2d5b
0002549C 0000                       DPLC_2d5b_6A: 	dc.w DPLC_2d5b_227-DPLC_2d5b
0002549E 0000                       DPLC_2d5b_6C: 	dc.w DPLC_2d5b_22C-DPLC_2d5b
000254A0 0000                       DPLC_2d5b_6E: 	dc.w DPLC_2d5b_22F-DPLC_2d5b
000254A2 0000                       DPLC_2d5b_70: 	dc.w DPLC_2d5b_234-DPLC_2d5b
000254A4 0000                       DPLC_2d5b_72: 	dc.w DPLC_2d5b_23D-DPLC_2d5b
000254A6 0000                       DPLC_2d5b_74: 	dc.w DPLC_2d5b_242-DPLC_2d5b
000254A8 0000                       DPLC_2d5b_76: 	dc.w DPLC_2d5b_247-DPLC_2d5b
000254AA 0000                       DPLC_2d5b_78: 	dc.w DPLC_2d5b_24C-DPLC_2d5b
000254AC 0000                       DPLC_2d5b_7A: 	dc.w DPLC_2d5b_251-DPLC_2d5b
000254AE 0000                       DPLC_2d5b_7C: 	dc.w DPLC_2d5b_254-DPLC_2d5b
000254B0 0000                       DPLC_2d5b_7E: 	dc.w DPLC_2d5b_25B-DPLC_2d5b
000254B2 0000                       DPLC_2d5b_80: 	dc.w DPLC_2d5b_260-DPLC_2d5b
000254B4 0000                       DPLC_2d5b_82: 	dc.w DPLC_2d5b_267-DPLC_2d5b
000254B6 0000                       DPLC_2d5b_84: 	dc.w DPLC_2d5b_270-DPLC_2d5b
000254B8 0000                       DPLC_2d5b_86: 	dc.w DPLC_2d5b_279-DPLC_2d5b
000254BA 0000                       DPLC_2d5b_88: 	dc.w DPLC_2d5b_284-DPLC_2d5b
000254BC 0000                       DPLC_2d5b_8A: 	dc.w DPLC_2d5b_28F-DPLC_2d5b
000254BE 0000                       DPLC_2d5b_8C: 	dc.w DPLC_2d5b_294-DPLC_2d5b
000254C0 0000                       DPLC_2d5b_8E: 	dc.w DPLC_2d5b_29B-DPLC_2d5b
000254C2 0000                       DPLC_2d5b_90: 	dc.w DPLC_2d5b_2A0-DPLC_2d5b
000254C4 0000                       DPLC_2d5b_92: 	dc.w DPLC_2d5b_2A7-DPLC_2d5b
000254C6 0000                       DPLC_2d5b_94: 	dc.w DPLC_2d5b_2AC-DPLC_2d5b
000254C8 0000                       DPLC_2d5b_96: 	dc.w DPLC_2d5b_2B3-DPLC_2d5b
000254CA 0000                       DPLC_2d5b_98: 	dc.w DPLC_2d5b_2BA-DPLC_2d5b
000254CC 0000                       DPLC_2d5b_9A: 	dc.w DPLC_2d5b_2C5-DPLC_2d5b
000254CE 0000                       DPLC_2d5b_9C: 	dc.w DPLC_2d5b_2D0-DPLC_2d5b
000254D0 0000                       DPLC_2d5b_9E: 	dc.w DPLC_2d5b_2D5-DPLC_2d5b
000254D2 0000                       DPLC_2d5b_A0: 	dc.w DPLC_2d5b_2DC-DPLC_2d5b
000254D4 0000                       DPLC_2d5b_A2: 	dc.w DPLC_2d5b_2DF-DPLC_2d5b
000254D6 0000                       DPLC_2d5b_A4: 	dc.w DPLC_2d5b_2E2-DPLC_2d5b
000254D8 0000                       DPLC_2d5b_A6: 	dc.w DPLC_2d5b_2E5-DPLC_2d5b
000254DA 0000                       DPLC_2d5b_A8: 	dc.w DPLC_2d5b_2EA-DPLC_2d5b
000254DC 0000                       DPLC_2d5b_AA: 	dc.w DPLC_2d5b_2F1-DPLC_2d5b
000254DE 0000                       DPLC_2d5b_AC: 	dc.w DPLC_2d5b_2F8-DPLC_2d5b
000254E0 0000                       DPLC_2d5b_AE: 	dc.w DPLC_2d5b_2FF-DPLC_2d5b
000254E2 0000                       DPLC_2d5b_B0: 	dc.w DPLC_2d5b_304-DPLC_2d5b
000254E4 0000                       DPLC_2d5b_B2: 	dc.w DPLC_2d5b_309-DPLC_2d5b
000254E6 0000                       DPLC_2d5b_B4: 	dc.w DPLC_2d5b_30E-DPLC_2d5b
000254E8 0000                       DPLC_2d5b_B6: 	dc.w DPLC_2d5b_313-DPLC_2d5b
000254EA 00                         DPLC_2d5b_B8: 	dc.b $0
000254EB 02                         DPLC_2d5b_B9: 	dc.b $2
000254EC F000                       	dc.b $F0, $0
000254EE 1010                       	dc.b $10, $10
000254F0 03                         DPLC_2d5b_BE: 	dc.b $3
000254F1 5012                       	dc.b $50, $12
000254F3 5018                       	dc.b $50, $18
000254F5 201E                       	dc.b $20, $1E
000254F7 03                         DPLC_2d5b_C5: 	dc.b $3
000254F8 5021                       	dc.b $50, $21
000254FA 5018                       	dc.b $50, $18
000254FC 201E                       	dc.b $20, $1E
000254FE 03                         DPLC_2d5b_CC: 	dc.b $3
000254FF 5021                       	dc.b $50, $21
00025501 5018                       	dc.b $50, $18
00025503 2027                       	dc.b $20, $27
00025505 03                         DPLC_2d5b_D3: 	dc.b $3
00025506 802A                       	dc.b $80, $2A
00025508 2033                       	dc.b $20, $33
0002550A 2036                       	dc.b $20, $36
0002550C 04                         DPLC_2d5b_DA: 	dc.b $4
0002550D 7039                       	dc.b $70, $39
0002550F 5041                       	dc.b $50, $41
00025511 5047                       	dc.b $50, $47
00025513 104D                       	dc.b $10, $4D
00025515 02                         DPLC_2d5b_E3: 	dc.b $2
00025516 7039                       	dc.b $70, $39
00025518 B04F                       	dc.b $B0, $4F
0002551A 02                         DPLC_2d5b_E8: 	dc.b $2
0002551B 505B                       	dc.b $50, $5B
0002551D 8061                       	dc.b $80, $61
0002551F 04                         DPLC_2d5b_ED: 	dc.b $4
00025520 505B                       	dc.b $50, $5B
00025522 506A                       	dc.b $50, $6A
00025524 5070                       	dc.b $50, $70
00025526 1076                       	dc.b $10, $76
00025528 02                         DPLC_2d5b_F6: 	dc.b $2
00025529 F4F0                       	dc.b $F4, $F0
0002552B 1500                       	dc.b $15, $0
0002552D 03                         DPLC_2d5b_FB: 	dc.b $3
0002552E 7039                       	dc.b $70, $39
00025530 3078                       	dc.b $30, $78
00025532 507C                       	dc.b $50, $7C
00025534 05                         DPLC_2d5b_102: 	dc.b $5
00025535 5082                       	dc.b $50, $82
00025537 5088                       	dc.b $50, $88
00025539 208E                       	dc.b $20, $8E
0002553B 5091                       	dc.b $50, $91
0002553D 0097                       	dc.b $0, $97
0002553F 06                         DPLC_2d5b_10D: 	dc.b $6
00025540 5082                       	dc.b $50, $82
00025542 1098                       	dc.b $10, $98
00025544 309A                       	dc.b $30, $9A
00025546 509E                       	dc.b $50, $9E
00025548 30A4                       	dc.b $30, $A4
0002554A 00A8                       	dc.b $0, $A8
0002554C 04                         DPLC_2d5b_11A: 	dc.b $4
0002554D 50A9                       	dc.b $50, $A9
0002554F 10AF                       	dc.b $10, $AF
00025551 70B1                       	dc.b $70, $B1
00025553 20B9                       	dc.b $20, $B9
00025555 05                         DPLC_2d5b_123: 	dc.b $5
00025556 50BC                       	dc.b $50, $BC
00025558 30C2                       	dc.b $30, $C2
0002555A 70C6                       	dc.b $70, $C6
0002555C 20CE                       	dc.b $20, $CE
0002555E 10D1                       	dc.b $10, $D1
00025560 04                         DPLC_2d5b_12E: 	dc.b $4
00025561 50BC                       	dc.b $50, $BC
00025563 10D3                       	dc.b $10, $D3
00025565 70D5                       	dc.b $70, $D5
00025567 20DD                       	dc.b $20, $DD
00025569 05                         DPLC_2d5b_137: 	dc.b $5
0002556A 5082                       	dc.b $50, $82
0002556C 1098                       	dc.b $10, $98
0002556E 008E                       	dc.b $0, $8E
00025570 70E0                       	dc.b $70, $E0
00025572 20E8                       	dc.b $20, $E8
00025574 04                         DPLC_2d5b_142: 	dc.b $4
00025575 70EB                       	dc.b $70, $EB
00025577 50F3                       	dc.b $50, $F3
00025579 10F9                       	dc.b $10, $F9
0002557B 50FB                       	dc.b $50, $FB
0002557D 02                         DPLC_2d5b_14B: 	dc.b $2
0002557E 70EB                       	dc.b $70, $EB
00025580 B101                       	dc.b $B1, $1
00025582 02                         DPLC_2d5b_150: 	dc.b $2
00025583 510D                       	dc.b $51, $D
00025585 8113                       	dc.b $81, $13
00025587 04                         DPLC_2d5b_155: 	dc.b $4
00025588 510D                       	dc.b $51, $D
0002558A 511C                       	dc.b $51, $1C
0002558C 1122                       	dc.b $11, $22
0002558E 5124                       	dc.b $51, $24
00025590 02                         DPLC_2d5b_15E: 	dc.b $2
00025591 510D                       	dc.b $51, $D
00025593 B12A                       	dc.b $B1, $2A
00025595 03                         DPLC_2d5b_163: 	dc.b $3
00025596 70EB                       	dc.b $70, $EB
00025598 0101                       	dc.b $1, $1
0002559A 8136                       	dc.b $81, $36
0002559C 06                         DPLC_2d5b_16A: 	dc.b $6
0002559D 513F                       	dc.b $51, $3F
0002559F 1145                       	dc.b $11, $45
000255A1 1147                       	dc.b $11, $47
000255A3 8149                       	dc.b $81, $49
000255A5 0152                       	dc.b $1, $52
000255A7 0153                       	dc.b $1, $53
000255A9 06                         DPLC_2d5b_177: 	dc.b $6
000255AA 513F                       	dc.b $51, $3F
000255AC 2154                       	dc.b $21, $54
000255AE 1157                       	dc.b $11, $57
000255B0 1159                       	dc.b $11, $59
000255B2 815B                       	dc.b $81, $5B
000255B4 0152                       	dc.b $1, $52
000255B6 04                         DPLC_2d5b_184: 	dc.b $4
000255B7 5164                       	dc.b $51, $64
000255B9 116A                       	dc.b $11, $6A
000255BB 816C                       	dc.b $81, $6C
000255BD 1175                       	dc.b $11, $75
000255BF 05                         DPLC_2d5b_18D: 	dc.b $5
000255C0 5177                       	dc.b $51, $77
000255C2 217D                       	dc.b $21, $7D
000255C4 1180                       	dc.b $11, $80
000255C6 7182                       	dc.b $71, $82
000255C8 218A                       	dc.b $21, $8A
000255CA 04                         DPLC_2d5b_198: 	dc.b $4
000255CB 5177                       	dc.b $51, $77
000255CD 118D                       	dc.b $11, $8D
000255CF 818F                       	dc.b $81, $8F
000255D1 1198                       	dc.b $11, $98
000255D3 05                         DPLC_2d5b_1A1: 	dc.b $5
000255D4 513F                       	dc.b $51, $3F
000255D6 819A                       	dc.b $81, $9A
000255D8 1159                       	dc.b $11, $59
000255DA 11A3                       	dc.b $11, $A3
000255DC 0152                       	dc.b $1, $52
000255DE 02                         DPLC_2d5b_1AC: 	dc.b $2
000255DF 51A5                       	dc.b $51, $A5
000255E1 B1AB                       	dc.b $B1, $AB
000255E3 02                         DPLC_2d5b_1B1: 	dc.b $2
000255E4 505B                       	dc.b $50, $5B
000255E6 B1B7                       	dc.b $B1, $B7
000255E8 02                         DPLC_2d5b_1B6: 	dc.b $2
000255E9 51A5                       	dc.b $51, $A5
000255EB B1C3                       	dc.b $B1, $C3
000255ED 02                         DPLC_2d5b_1BB: 	dc.b $2
000255EE 505B                       	dc.b $50, $5B
000255F0 B1CF                       	dc.b $B1, $CF
000255F2 04                         DPLC_2d5b_1C0: 	dc.b $4
000255F3 51DB                       	dc.b $51, $DB
000255F5 11E1                       	dc.b $11, $E1
000255F7 B1E3                       	dc.b $B1, $E3
000255F9 01EF                       	dc.b $1, $EF
000255FB 03                         DPLC_2d5b_1C9: 	dc.b $3
000255FC 51F0                       	dc.b $51, $F0
000255FE 11F6                       	dc.b $11, $F6
00025600 B1F8                       	dc.b $B1, $F8
00025602 04                         DPLC_2d5b_1D0: 	dc.b $4
00025603 51DB                       	dc.b $51, $DB
00025605 1204                       	dc.b $12, $4
00025607 B206                       	dc.b $B2, $6
00025609 01EF                       	dc.b $1, $EF
0002560B 03                         DPLC_2d5b_1D9: 	dc.b $3
0002560C 51F0                       	dc.b $51, $F0
0002560E 11F6                       	dc.b $11, $F6
00025610 B212                       	dc.b $B2, $12
00025612 02                         DPLC_2d5b_1E0: 	dc.b $2
00025613 521E                       	dc.b $52, $1E
00025615 B224                       	dc.b $B2, $24
00025617 02                         DPLC_2d5b_1E5: 	dc.b $2
00025618 510D                       	dc.b $51, $D
0002561A B230                       	dc.b $B2, $30
0002561C 02                         DPLC_2d5b_1EA: 	dc.b $2
0002561D 521E                       	dc.b $52, $1E
0002561F B23C                       	dc.b $B2, $3C
00025621 02                         DPLC_2d5b_1EF: 	dc.b $2
00025622 510D                       	dc.b $51, $D
00025624 B248                       	dc.b $B2, $48
00025626 04                         DPLC_2d5b_1F4: 	dc.b $4
00025627 5254                       	dc.b $52, $54
00025629 125A                       	dc.b $12, $5A
0002562B B25C                       	dc.b $B2, $5C
0002562D 0268                       	dc.b $2, $68
0002562F 02                         DPLC_2d5b_1FD: 	dc.b $2
00025630 7269                       	dc.b $72, $69
00025632 B271                       	dc.b $B2, $71
00025634 04                         DPLC_2d5b_202: 	dc.b $4
00025635 5254                       	dc.b $52, $54
00025637 127D                       	dc.b $12, $7D
00025639 B27F                       	dc.b $B2, $7F
0002563B 0268                       	dc.b $2, $68
0002563D 02                         DPLC_2d5b_20B: 	dc.b $2
0002563E 7269                       	dc.b $72, $69
00025640 B28B                       	dc.b $B2, $8B
00025642 01                         DPLC_2d5b_210: 	dc.b $1
00025643 F297                       	dc.b $F2, $97
00025645 01                         DPLC_2d5b_213: 	dc.b $1
00025646 F2A7                       	dc.b $F2, $A7
00025648 01                         DPLC_2d5b_216: 	dc.b $1
00025649 F2B7                       	dc.b $F2, $B7
0002564B 01                         DPLC_2d5b_219: 	dc.b $1
0002564C F2C7                       	dc.b $F2, $C7
0002564E 01                         DPLC_2d5b_21C: 	dc.b $1
0002564F F2D7                       	dc.b $F2, $D7
00025651 02                         DPLC_2d5b_21F: 	dc.b $2
00025652 B2E7                       	dc.b $B2, $E7
00025654 22F3                       	dc.b $22, $F3
00025656 01                         DPLC_2d5b_224: 	dc.b $1
00025657 F2F6                       	dc.b $F2, $F6
00025659 02                         DPLC_2d5b_227: 	dc.b $2
0002565A B306                       	dc.b $B3, $6
0002565C 2312                       	dc.b $23, $12
0002565E 01                         DPLC_2d5b_22C: 	dc.b $1
0002565F F315                       	dc.b $F3, $15
00025661 02                         DPLC_2d5b_22F: 	dc.b $2
00025662 5325                       	dc.b $53, $25
00025664 B32B                       	dc.b $B3, $2B
00025666 04                         DPLC_2d5b_234: 	dc.b $4
00025667 5337                       	dc.b $53, $37
00025669 733D                       	dc.b $73, $3D
0002566B 1345                       	dc.b $13, $45
0002566D 0347                       	dc.b $3, $47
0002566F 02                         DPLC_2d5b_23D: 	dc.b $2
00025670 D348                       	dc.b $D3, $48
00025672 34EC                       	dc.b $34, $EC
00025674 02                         DPLC_2d5b_242: 	dc.b $2
00025675 F528                       	dc.b $F5, $28
00025677 0538                       	dc.b $5, $38
00025679 02                         DPLC_2d5b_247: 	dc.b $2
0002567A F539                       	dc.b $F5, $39
0002567C 0549                       	dc.b $5, $49
0002567E 02                         DPLC_2d5b_24C: 	dc.b $2
0002567F E356                       	dc.b $E3, $56
00025681 054A                       	dc.b $5, $4A
00025683 01                         DPLC_2d5b_251: 	dc.b $1
00025684 8365                       	dc.b $83, $65
00025686 03                         DPLC_2d5b_254: 	dc.b $3
00025687 736E                       	dc.b $73, $6E
00025689 0376                       	dc.b $3, $76
0002568B 3377                       	dc.b $33, $77
0002568D 02                         DPLC_2d5b_25B: 	dc.b $2
0002568E E37B                       	dc.b $E3, $7B
00025690 054A                       	dc.b $5, $4A
00025692 03                         DPLC_2d5b_260: 	dc.b $3
00025693 B38A                       	dc.b $B3, $8A
00025695 1396                       	dc.b $13, $96
00025697 0398                       	dc.b $3, $98
00025699 04                         DPLC_2d5b_267: 	dc.b $4
0002569A B399                       	dc.b $B3, $99
0002569C 33A5                       	dc.b $33, $A5
0002569E 03A9                       	dc.b $3, $A9
000256A0 03AA                       	dc.b $3, $AA
000256A2 04                         DPLC_2d5b_270: 	dc.b $4
000256A3 B3AB                       	dc.b $B3, $AB
000256A5 33B7                       	dc.b $33, $B7
000256A7 03BB                       	dc.b $3, $BB
000256A9 03BC                       	dc.b $3, $BC
000256AB 05                         DPLC_2d5b_279: 	dc.b $5
000256AC 83BD                       	dc.b $83, $BD
000256AE 13C6                       	dc.b $13, $C6
000256B0 53C8                       	dc.b $53, $C8
000256B2 13CE                       	dc.b $13, $CE
000256B4 03D0                       	dc.b $3, $D0
000256B6 05                         DPLC_2d5b_284: 	dc.b $5
000256B7 83D1                       	dc.b $83, $D1
000256B9 13DA                       	dc.b $13, $DA
000256BB 53C8                       	dc.b $53, $C8
000256BD 13CE                       	dc.b $13, $CE
000256BF 03D0                       	dc.b $3, $D0
000256C1 02                         DPLC_2d5b_28F: 	dc.b $2
000256C2 83DC                       	dc.b $83, $DC
000256C4 73E5                       	dc.b $73, $E5
000256C6 03                         DPLC_2d5b_294: 	dc.b $3
000256C7 83ED                       	dc.b $83, $ED
000256C9 23F6                       	dc.b $23, $F6
000256CB 13F9                       	dc.b $13, $F9
000256CD 02                         DPLC_2d5b_29B: 	dc.b $2
000256CE 83FB                       	dc.b $83, $FB
000256D0 7404                       	dc.b $74, $4
000256D2 03                         DPLC_2d5b_2A0: 	dc.b $3
000256D3 83ED                       	dc.b $83, $ED
000256D5 240C                       	dc.b $24, $C
000256D7 140F                       	dc.b $14, $F
000256D9 02                         DPLC_2d5b_2A7: 	dc.b $2
000256DA 5411                       	dc.b $54, $11
000256DC B417                       	dc.b $B4, $17
000256DE 03                         DPLC_2d5b_2AC: 	dc.b $3
000256DF 8423                       	dc.b $84, $23
000256E1 342C                       	dc.b $34, $2C
000256E3 0430                       	dc.b $4, $30
000256E5 03                         DPLC_2d5b_2B3: 	dc.b $3
000256E6 7431                       	dc.b $74, $31
000256E8 1439                       	dc.b $14, $39
000256EA B43B                       	dc.b $B4, $3B
000256EC 05                         DPLC_2d5b_2BA: 	dc.b $5
000256ED 7447                       	dc.b $74, $47
000256EF 144F                       	dc.b $14, $4F
000256F1 5451                       	dc.b $54, $51
000256F3 3457                       	dc.b $34, $57
000256F5 045B                       	dc.b $4, $5B
000256F7 05                         DPLC_2d5b_2C5: 	dc.b $5
000256F8 745C                       	dc.b $74, $5C
000256FA 144F                       	dc.b $14, $4F
000256FC 5464                       	dc.b $54, $64
000256FE 3457                       	dc.b $34, $57
00025700 045B                       	dc.b $4, $5B
00025702 02                         DPLC_2d5b_2D0: 	dc.b $2
00025703 246A                       	dc.b $24, $6A
00025705 F46D                       	dc.b $F4, $6D
00025707 03                         DPLC_2d5b_2D5: 	dc.b $3
00025708 247D                       	dc.b $24, $7D
0002570A B480                       	dc.b $B4, $80
0002570C 248C                       	dc.b $24, $8C
0002570E 01                         DPLC_2d5b_2DC: 	dc.b $1
0002570F B48F                       	dc.b $B4, $8F
00025711 01                         DPLC_2d5b_2DF: 	dc.b $1
00025712 549B                       	dc.b $54, $9B
00025714 01                         DPLC_2d5b_2E2: 	dc.b $1
00025715 14A1                       	dc.b $14, $A1
00025717 02                         DPLC_2d5b_2E5: 	dc.b $2
00025718 E356                       	dc.b $E3, $56
0002571A 054A                       	dc.b $5, $4A
0002571C 03                         DPLC_2d5b_2EA: 	dc.b $3
0002571D 736E                       	dc.b $73, $6E
0002571F 0376                       	dc.b $3, $76
00025721 3377                       	dc.b $33, $77
00025723 03                         DPLC_2d5b_2F1: 	dc.b $3
00025724 B4A3                       	dc.b $B4, $A3
00025726 14AF                       	dc.b $14, $AF
00025728 34B1                       	dc.b $34, $B1
0002572A 03                         DPLC_2d5b_2F8: 	dc.b $3
0002572B 54B5                       	dc.b $54, $B5
0002572D B4BB                       	dc.b $B4, $BB
0002572F 1074                       	dc.b $10, $74
00025731 02                         DPLC_2d5b_2FF: 	dc.b $2
00025732 F4C7                       	dc.b $F4, $C7
00025734 24D7                       	dc.b $24, $D7
00025736 02                         DPLC_2d5b_304: 	dc.b $2
00025737 F4DA                       	dc.b $F4, $DA
00025739 14EA                       	dc.b $14, $EA
0002573B 02                         DPLC_2d5b_309: 	dc.b $2
0002573C F502                       	dc.b $F5, $2
0002573E 2512                       	dc.b $25, $12
00025740 02                         DPLC_2d5b_30E: 	dc.b $2
00025741 F515                       	dc.b $F5, $15
00025743 2525                       	dc.b $25, $25
00025745 02                         DPLC_2d5b_313: 	dc.b $2
00025746 F54B                       	dc.b $F5, $4B
00025748 755B                       	dc.b $75, $5B
0002574A                            	even
0002574A                            	even
0002574A                            
0002574A                            ; ---------------------------------------------------------------------------
0002574A                            ; Uncompressed graphics	- Sonic
0002574A                            ; ---------------------------------------------------------------------------
0002574A                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0003036A                            		even
0003036A                            ; ---------------------------------------------------------------------------
0003036A                            ; Compressed graphics - various
0003036A                            ; ---------------------------------------------------------------------------
0003036A                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003046E                            		even
0003046E                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000304A8                            		even
000304A8                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0003063E                            		even
0003063E                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030786                            		even
00030786                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030890                            		even
00030890                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
000308E2                            		even
000308E2                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00030B2A                            		even
00030B2A                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030CB0                            		even
00030CB0                            ; ---------------------------------------------------------------------------
00030CB0                            ; Sprite mappings - walls of the special stage
00030CB0                            ; ---------------------------------------------------------------------------
00030CB0                            Map_SSWalls:
00030CB0                            	include "_maps\SSwalls.asm"
00030CB0                            ; ---------------------------------------------------------------------------
00030CB0                            ; Sprite mappings - walls of the special stage
00030CB0                            ; ---------------------------------------------------------------------------
00030CB0 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030CB4 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030CB8 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030CBC 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030CC0 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030CC4 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030CC8 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030CCC 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030CD0 01                         byte_2C584:	dc.b 1
00030CD1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030CD6 01                         byte_2C58A:	dc.b 1
00030CD7 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030CDC 01                         byte_2C590:	dc.b 1
00030CDD F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030CE2 01                         byte_2C596:	dc.b 1
00030CE3 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030CE8 01                         byte_2C59C:	dc.b 1
00030CE9 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030CEE 01                         byte_2C5A2:	dc.b 1
00030CEF F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030CF4 01                         byte_2C5A8:	dc.b 1
00030CF5 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030CFA 01                         byte_2C5AE:	dc.b 1
00030CFB F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030D00 01                         byte_2C5B4:	dc.b 1
00030D01 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030D06 01                         byte_2C5BA:	dc.b 1
00030D07 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030D0C 01                         byte_2C5C0:	dc.b 1
00030D0D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030D12 01                         byte_2C5C6:	dc.b 1
00030D13 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030D18 01                         byte_2C5CC:	dc.b 1
00030D19 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030D1E 01                         byte_2C5D2:	dc.b 1
00030D1F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030D24 01                         byte_2C5D8:	dc.b 1
00030D25 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030D2A 01                         byte_2C5DE:	dc.b 1
00030D2B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030D30                            		even
00030D30                            		even
00030D30                            ; ---------------------------------------------------------------------------
00030D30                            ; Compressed graphics - special stage
00030D30                            ; ---------------------------------------------------------------------------
00030D30                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031668                            		even
00031668                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
000317B6                            		even
000317B6                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032C48                            		even
00032C48                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032F48                            		even
00032F48                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003343C                            		even
0003343C                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003352A                            		even
0003352A                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000335FA                            		even
000335FA                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000336F0                            		even
000336F0                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003374E                            		even
0003374E                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000337E0                            		even
000337E0                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000338A2                            		even
000338A2                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033970                            		even
00033970                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033A3C                            		even
00033A3C                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033B04                            		even
00033B04                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033BCE                            		even
00033BCE                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033C9E                            		even
00033C9E                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033E92                            		even
00033E92                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00033FFA                            		even
00033FFA                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000340AA                            		even
000340AA                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00034184                            		even
00034184                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00034208                            		even
00034208                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00034386                            		even
00034386                            ; ---------------------------------------------------------------------------
00034386                            ; Compressed graphics - GHZ stuff
00034386                            ; ---------------------------------------------------------------------------
00034386                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000343D0                            		even
000343D0                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000344EA                            		even
000344EA                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
000345D6                            		even
000345D6                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0003461E                            		even
0003461E                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000347BC                            		even
000347BC                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034838                            		even
00034838                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034A4C                            		even
00034A4C                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034B78                            		even
00034B78                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034CA6                            		even
00034CA6                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034D44                            		even
00034D44                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034DA4                            		even
00034DA4                            ; ---------------------------------------------------------------------------
00034DA4                            ; Compressed graphics - LZ stuff
00034DA4                            ; ---------------------------------------------------------------------------
00034DA4                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034EC8                            		even
00034EC8                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000356BC                            		even
000356BC                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003583C                            		even
0003583C                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
000359A6                            		even
000359A6                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00035FFC                            		even
00035FFC                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
000360B2                            		even
000360B2                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00036154                            		even
00036154                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
000362B0                            		even
000362B0                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00036314                            		even
00036314                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036466                            		even
00036466                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036948                            		even
00036948                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036AB8                            		even
00036AB8                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036D70                            		even
00036D70                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036EA8                            		even
00036EA8                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036FD2                            		even
00036FD2                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000370E2                            		even
000370E2                            ; ---------------------------------------------------------------------------
000370E2                            ; Compressed graphics - MZ stuff
000370E2                            ; ---------------------------------------------------------------------------
000370E2                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037370                            		even
00037370                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0003742E                            		even
0003742E                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000374E6                            		even
000374E6                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003753A                            		even
0003753A                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003780C 00                         		even
0003780C                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00038122                            		even
00038122                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038286                            		even
00038286                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0003830E                            		even
0003830E                            ; ---------------------------------------------------------------------------
0003830E                            ; Compressed graphics - SLZ stuff
0003830E                            ; ---------------------------------------------------------------------------
0003830E                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003854A                            		even
0003854A                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038690                            		even
00038690                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
000388D4                            		even
000388D4                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038936                            		even
00038936                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038A18                            		even
00038A18                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038BFA                            		even
00038BFA                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038D06                            		even
00038D06                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038DAA                            		even
00038DAA                            ; ---------------------------------------------------------------------------
00038DAA                            ; Compressed graphics - SYZ stuff
00038DAA                            ; ---------------------------------------------------------------------------
00038DAA                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038F14                            		even
00038F14                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038F76                            		even
00038F76                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00039058                            		even
00039058                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000392E6                            		even
000392E6                            ; ---------------------------------------------------------------------------
000392E6                            ; Compressed graphics - SBZ stuff
000392E6                            ; ---------------------------------------------------------------------------
000392E6                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003933A                            		even
0003933A                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000395D6                            		even
000395D6                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000397DA                            		even
000397DA                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039978                            		even
00039978                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039CA8                            		even
00039CA8                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039E86                            		even
00039E86                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039EDE                            		even
00039EDE                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A0A8 00                         		even
0003A0A8                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A1A6                            		even
0003A1A6                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A332                            		even
0003A332                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A382                            		even
0003A382                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A3DA                            		even
0003A3DA                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A4D6                            		even
0003A4D6                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A5EC                            		even
0003A5EC                            ; ---------------------------------------------------------------------------
0003A5EC                            ; Compressed graphics - enemies
0003A5EC                            ; ---------------------------------------------------------------------------
0003A5EC                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A9AC                            		even
0003A9AC                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AB56 00                         		even
0003AB56                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003AF18 00                         		even
0003AF18                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B100                            		even
0003B100                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B2B8 00                         		even
0003B2B8                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B402                            		even
0003B402                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B68C                            		even
0003B68C                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BCB0                            		even
0003BCB0                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003BEA6                            		even
0003BEA6                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C4C4                            		even
0003C4C4                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003C8C4 00                         		even
0003C8C4                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CBC0                            		even
0003CBC0                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003CE08                            		even
0003CE08                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D0A0                            		even
0003D0A0                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D27E                            		even
0003D27E                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D40C                            		even
0003D40C                            ; ---------------------------------------------------------------------------
0003D40C                            ; Compressed graphics - various
0003D40C                            ; ---------------------------------------------------------------------------
0003D40C                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DA1A                            		even
0003DA1A                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DB10                            		even
0003DB10                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DC16                            		even
0003DC16                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DD0A                            		even
0003DD0A                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E24E                            		even
0003E24E                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003E8B4                            		even
0003E8B4                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003E964                            		even
0003E964                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003EAF6                            		even
0003EAF6                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003EBF8                            		even
0003EBF8                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003ECD4                            		even
0003ECD4                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F150                            		even
0003F150                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F210                            		even
0003F210                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F384                            		even
0003F384                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F686                            		even
0003F686                            ; ---------------------------------------------------------------------------
0003F686                            ; Compressed graphics - continue screen
0003F686                            ; ---------------------------------------------------------------------------
0003F686                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003F936                            		even
0003F936                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FB70                            		even
0003FB70                            ; ---------------------------------------------------------------------------
0003FB70                            ; Compressed graphics - animals
0003FB70                            ; ---------------------------------------------------------------------------
0003FB70                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FCC8                            		even
0003FCC8                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003FE24                            		even
0003FE24                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003FFA0                            		even
0003FFA0                            Nem_Seal:	incbin	artnem\seal.bin		; seal
000400BC                            		even
000400BC                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000401F2                            		even
000401F2                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0004032C                            		even
0004032C                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040488                            		even
00040488                            ; ---------------------------------------------------------------------------
00040488                            ; Compressed graphics - primary patterns and block mappings
00040488                            ; ---------------------------------------------------------------------------
00040488                            Blk16_GHZ:	incbin	map16\ghz.bin
00040D9C                            		even
00040D9C                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
000426AA                            		even
000426AA                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043A2A                            		even
00043A2A                            Blk256_GHZ:	incbin	map256\ghz.bin
00045D28                            		even
00045D28                            Blk16_LZ:	incbin	map16\lz.bin
00046462                            		even
00046462                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048864                            		even
00048864                            Blk256_LZ:	incbin	map256\lz.bin
0004B1E4                            		even
0004B1E4                            Blk16_MZ:	incbin	map16\mz.bin
0004B940                            		even
0004B940                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E1C8                            		even
0004E1C8                            Blk256_MZ:	incbin	map256\mz.bin
0004F94C                            		even
0004F94C                            Blk16_SLZ:	incbin	map16\slz.bin
00050016                            		even
00050016                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00051F6A                            		even
00051F6A                            Blk256_SLZ:	incbin	map256\slz.bin
000525E4                            		even
000525E4                            Blk16_SYZ:	incbin	map16\syz.bin
0005320A                            		even
0005320A                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005779C                            		even
0005779C                            Blk256_SYZ:	incbin	map256\syz.bin
000597F8                            		even
000597F8                            Blk16_SBZ:	incbin	map16\sbz.bin
0005A740                            		even
0005A740                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D104                            		even
0005D104                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FBFA                            		even
0005FBFA                            ; ---------------------------------------------------------------------------
0005FBFA                            ; Compressed graphics - bosses and ending sequence
0005FBFA                            ; ---------------------------------------------------------------------------
0005FBFA                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00060414 00                         		even
00060414                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00060A62                            		even
00060A62                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00060ADC                            		even
00060ADC                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00060DC6                            		even
00060DC6                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006164A                            		even
0006164A                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000623A0 00                         		even
000623A0                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00062B08                            		even
00062B08                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00063088                            		even
00063088                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000631A8                            		even
000631A8                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000633A6                            		even
000633A6                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00064584                            		even
00064584                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00064EC8                            		even
00064EC8                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006529E                            		even
0006529E                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006582E                            		even
0006582E                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00065AB6                            		even
00065AB6                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000660A4 00                         		even
000660A4                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006632C                            		even
0006632C                            		incbin	misc\padding2.bin
00066430                            		even
00066430                            ; ---------------------------------------------------------------------------
00066430                            ; Collision data
00066430                            ; ---------------------------------------------------------------------------
00066430                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00066530                            		even
00066530                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00067530                            		even
00067530                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00068530                            		even
00068530                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000686E8 00                         		even
000686E8                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00068850                            		even
00068850                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000689E0                            		even
000689E0                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00068BD4                            		even
00068BD4                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00068DDA                            		even
00068DDA                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00069078                            		even
00069078                            ; ---------------------------------------------------------------------------
00069078                            ; Special layouts
00069078                            ; ---------------------------------------------------------------------------
00069078                            SS_1:		incbin	sslayout\1.bin
000692F2                            		even
000692F2                            SS_2:		incbin	sslayout\2.bin
00069704                            		even
00069704                            SS_3:		incbin	sslayout\3.bin
00069A60                            		even
00069A60                            SS_4:		incbin	sslayout\4.bin
00069F3A                            		even
00069F3A                            SS_5:		incbin	sslayout\5.bin
0006A40C                            		even
0006A40C                            SS_6:		incbin	sslayout\6.bin
0006A71C                            		even
0006A71C                            ; ---------------------------------------------------------------------------
0006A71C                            ; Animated uncompressed graphics
0006A71C                            ; ---------------------------------------------------------------------------
0006A71C                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006A91C                            		even
0006A91C                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006AD1C                            		even
0006AD1C                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006B19C                            		even
0006B19C                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006B49C                            		even
0006B49C                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006BA9C                            		even
0006BA9C                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006BD9C                            		even
0006BD9C                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006C81C                            		even
0006C81C                            
0006C81C                            ; ---------------------------------------------------------------------------
0006C81C                            ; Level	layout index
0006C81C                            ; ---------------------------------------------------------------------------
0006C81C 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006C822 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006C828 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006C82E 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006C834 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006C83A 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006C840 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006C846 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006C84C 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006C852 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006C858 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006C85E 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006C864 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C86A 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C870 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C876 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006C87C 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006C882 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006C888 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006C88E 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006C894 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006C89A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006C8A0 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006C8A6 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006C8AC 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C8B2 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C8B8 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C8BE 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C8C4                            
0006C8C4                            Level_GHZ1:	incbin	levels\ghz1.bin
0006C9B6                            		even
0006C9B6 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006C9BA                            Level_GHZ2:	incbin	levels\ghz2.bin
0006CA82                            		even
0006CA82 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006CA86                            Level_GHZ3:	incbin	levels\ghz3.bin
0006CBA8                            		even
0006CBA8                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006CBCA                            		even
0006CBCA 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006CBCE 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006CBD2                            
0006CBD2                            Level_LZ1:	incbin	levels\lz1.bin
0006CCD4                            		even
0006CCD4                            Level_LZbg:	incbin	levels\lzbg.bin
0006CDD6                            		even
0006CDD6 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006CDDA                            Level_LZ2:	incbin	levels\lz2.bin
0006CE74                            		even
0006CE74 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006CE78                            Level_LZ3:	incbin	levels\lz3.bin
0006CF92                            		even
0006CF92 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006CF96                            Level_SBZ3:	incbin	levels\sbz3.bin
0006D050                            		even
0006D050 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006D054                            
0006D054                            Level_MZ1:	incbin	levels\mz1.bin
0006D0F2                            		even
0006D0F2                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006D16C                            		even
0006D16C                            Level_MZ2:	incbin	levels\mz2.bin
0006D210                            		even
0006D210                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006D2A2                            		even
0006D2A2 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006D2A6                            Level_MZ3:	incbin	levels\mz3.bin
0006D388                            		even
0006D388                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006D42C 00                         		even
0006D42C 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006D430 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006D434                            
0006D434                            Level_SLZ1:	incbin	levels\slz1.bin
0006D546                            		even
0006D546                            Level_SLZbg:	incbin	levels\slzbg.bin
0006D560                            		even
0006D560                            Level_SLZ2:	incbin	levels\slz2.bin
0006D650                            		even
0006D650                            Level_SLZ3:	incbin	levels\slz3.bin
0006D76A                            		even
0006D76A 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006D76E                            
0006D76E                            Level_SYZ1:	incbin	levels\syz1.bin
0006D82A 00                         		even
0006D82A                            Level_SYZbg:	incbin	levels\syzbg.bin
0006D864                            		even
0006D864 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006D868                            Level_SYZ2:	incbin	levels\syz2.bin
0006D96C                            		even
0006D96C 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006D970                            Level_SYZ3:	incbin	levels\syz3.bin
0006DACA 00                         		even
0006DACA 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006DACE 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006DAD2                            
0006DAD2                            Level_SBZ1:	incbin	levels\sbz1.bin
0006DBF4                            		even
0006DBF4                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006DC32                            		even
0006DC32                            Level_SBZ2:	incbin	levels\sbz2.bin
0006DD74                            		even
0006DD74                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006DEDE                            		even
0006DEDE 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006DEE2 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006DEE6                            Level_End:	incbin	levels\ending.bin
0006DF16 00                         		even
0006DF16 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006DF1A                            
0006DF1A                            ; ---------------------------------------------------------------------------
0006DF1A                            ; Animated uncompressed giant ring graphics
0006DF1A                            ; ---------------------------------------------------------------------------
0006DF1A                            Art_BigRing:	incbin	artunc\bigring.bin
0006EB5A                            		even
0006EB5A                            
0006EB5A                            		incbin	misc\padding3.bin
0006EBF6                            		even
0006EBF6                            
0006EBF6                            ; ---------------------------------------------------------------------------
0006EBF6                            ; Sprite locations index
0006EBF6                            ; ---------------------------------------------------------------------------
0006EBF6 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EBFA 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EBFE 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC02 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC06 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC0A 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC0E 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC12 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC16 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC1A 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC1E 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC22 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC26 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC2A 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC2E 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC32 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC36 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC3A 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC3E 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC42 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC46 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC4A 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC4E 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC52 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC56 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC5A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC5E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC62 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC66 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006EC6A 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006EC6E 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006EC72 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006EC76 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006EC7A 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006EC7E 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006EC82 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006EC86 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006EC8C                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006F4D8                            		even
0006F4D8                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006F58C                            		even
0006F58C                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006FFD0                            		even
0006FFD0                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00070378                            		even
00070378                            ObjPos_LZ2:	incbin	objpos\lz2.bin
000706AE                            		even
000706AE                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00070BC4                            		even
00070BC4                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007105C                            		even
0007105C                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007108E                            		even
0007108E                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000710C0                            		even
000710C0                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000710F2                            		even
000710F2                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00071124                            		even
00071124                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007116E                            		even
0007116E                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000711AC                            		even
000711AC                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00071518                            		even
00071518                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000719C2                            		even
000719C2                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00071F38                            		even
00071F38                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00071F62                            		even
00071F62                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000723CA                            		even
000723CA                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000729AC                            		even
000729AC                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0007301E                            		even
0007301E                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00073588                            		even
00073588                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00073B8E                            		even
00073B8E                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000742CC                            		even
000742CC                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000749AA                            		even
000749AA                            ObjPos_FZ:	incbin	objpos\fz.bin
000749BC                            		even
000749BC                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000749EE                            		even
000749EE                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00074A20                            		even
00074A20                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00074A52                            		even
00074A52                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00074A84                            		even
00074A84                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00074AB6                            		even
00074AB6                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00074AEE                            		even
00074AEE                            ObjPos_End:	incbin	objpos\ending.bin
00074C4A                            		even
00074C4A FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00074C50                            ; ---------------------------------------------------------------------------
00074C50                            		incbin	misc\padding4.bin
0007527A                            		even
0007527A                            
0007527A 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007527E 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00075282 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00075286 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007528A 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0007528E 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00075292                            ; ---------------------------------------------------------------------------
00075292                            ; PSG instruments used in music
00075292                            ; ---------------------------------------------------------------------------
00075292 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007529E 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000752AA 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000752B6                            PSG1:		incbin	sound\psg1.bin
000752CD                            PSG2:		incbin	sound\psg2.bin
000752D4                            PSG3:		incbin	sound\psg3.bin
000752E5                            PSG4:		incbin	sound\psg4.bin
000752F0                            PSG6:		incbin	sound\psg6.bin
000752FF                            PSG5:		incbin	sound\psg5.bin
00075329                            PSG7:		incbin	sound\psg7.bin
00075345                            PSG8:		incbin	sound\psg8.bin
0007536D                            PSG9:		incbin	sound\psg9.bin
0007537E                            
0007537E 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00075386                            ; ---------------------------------------------------------------------------
00075386                            ; Music	Pointers
00075386                            ; ---------------------------------------------------------------------------
00075386 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0007538E 0000 0000 0000 0000        		dc.l Music83, Music84
00075396 0000 0000 0000 0000        		dc.l Music85, Music86
0007539E 0000 0000 0000 0000        		dc.l Music87, Music88
000753A6 0000 0000 0000 0000        		dc.l Music89, Music8A
000753AE 0000 0000 0000 0000        		dc.l Music8B, Music8C
000753B6 0000 0000 0000 0000        		dc.l Music8D, Music8E
000753BE 0000 0000 0000 0000        		dc.l Music8F, Music90
000753C6 0000 0000 0000 0000        		dc.l Music91, Music92
000753CE 0000 0000 0000 0000        		dc.l Music93, Music94
000753D6 0000 0000 0000 0000        		dc.l Music95, Music96
000753DE 0000 0000 0000 0000        		dc.l Music97, Music98
000753E6 0000 0000 0000 0000        		dc.l Music99, Music9A
000753EE 0000 0000 0000 0000        		dc.l Music9B, Music9C
000753F6 0000 0000 0000 0000        		dc.l Music9D, Music9E
000753FE 0000 0000                  		dc.l Music9F
00075402                            ; ---------------------------------------------------------------------------
00075402                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00075402                            ; ---------------------------------------------------------------------------
00075402 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00075412 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00075422 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00075432 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00075442 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00075452 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00075462 9090 9090                  		dc.b $90, $90, $90, $90
00075466                            
00075466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075466                            
00075466                            
00075466                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00075466 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007546E 4E71                       		nop	
00075470 4E71                       		nop	
00075472 4E71                       		nop	
00075474                            
00075474                            loc_71B5A:
00075474 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007547C 66F6                       		bne.s	loc_71B5A
0007547E                            
0007547E 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00075486 6700                       		beq.s	loc_71B82
00075488 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00075490 4E71                       		nop	
00075492 4E71                       		nop	
00075494 4E71                       		nop	
00075496 4E71                       		nop	
00075498 4E71                       		nop	
0007549A 60CA                       		bra.s	sub_71B4C
0007549C                            ; ===========================================================================
0007549C                            
0007549C                            loc_71B82:
0007549C 4DF9 00FF F000             		lea	($FFF000).l,a6
000754A2 422E 000E                  		clr.b	$E(a6)
000754A6 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000754AA 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000754AE 532E 0001                  		subq.b	#1,1(a6)
000754B2 6600                       		bne.s	loc_71B9E
000754B4 4EBA 0000                  		jsr	sub_7260C(pc)
000754B8                            
000754B8                            loc_71B9E:
000754B8 102E 0004                  		move.b	4(a6),d0
000754BC 6700                       		beq.s	loc_71BA8
000754BE 4EBA 0000                  		jsr	sub_72504(pc)
000754C2                            
000754C2                            loc_71BA8:
000754C2 4A2E 0024                  		tst.b	$24(a6)
000754C6 6700                       		beq.s	loc_71BB2
000754C8 4EBA 0000                  		jsr	sub_7267C(pc)
000754CC                            
000754CC                            loc_71BB2:
000754CC 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000754D0 6700                       		beq.s	loc_71BBC	; if not, branch
000754D2 4EBA 0000                  		jsr	Sound_Play(pc)
000754D6                            
000754D6                            loc_71BBC:
000754D6 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000754DC 6700                       		beq.s	loc_71BC8
000754DE 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000754E2                            
000754E2                            loc_71BC8:
000754E2 4BEE 0040                  		lea	$40(a6),a5
000754E6 4A15                       		tst.b	(a5)
000754E8 6A00                       		bpl.s	loc_71BD4
000754EA 4EBA 0000                  		jsr	sub_71C4E(pc)
000754EE                            
000754EE                            loc_71BD4:
000754EE 422E 0008                  		clr.b	8(a6)
000754F2 7E05                       		moveq	#5,d7
000754F4                            
000754F4                            loc_71BDA:
000754F4 DAFC 0030                  		adda.w	#$30,a5
000754F8 4A15                       		tst.b	(a5)
000754FA 6A00                       		bpl.s	loc_71BE6
000754FC 4EBA 0000                  		jsr	sub_71CCA(pc)
00075500                            
00075500                            loc_71BE6:
00075500 51CF FFF2                  		dbf	d7,loc_71BDA
00075504                            
00075504 7E02                       		moveq	#2,d7
00075506                            
00075506                            loc_71BEC:
00075506 DAFC 0030                  		adda.w	#$30,a5
0007550A 4A15                       		tst.b	(a5)
0007550C 6A00                       		bpl.s	loc_71BF8
0007550E 4EBA 0000                  		jsr	sub_72850(pc)
00075512                            
00075512                            loc_71BF8:
00075512 51CF FFF2                  		dbf	d7,loc_71BEC
00075516                            
00075516 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007551C 7E02                       		moveq	#2,d7
0007551E                            
0007551E                            loc_71C04:
0007551E DAFC 0030                  		adda.w	#$30,a5
00075522 4A15                       		tst.b	(a5)
00075524 6A00                       		bpl.s	loc_71C10
00075526 4EBA 0000                  		jsr	sub_71CCA(pc)
0007552A                            
0007552A                            loc_71C10:
0007552A 51CF FFF2                  		dbf	d7,loc_71C04
0007552E                            
0007552E 7E02                       		moveq	#2,d7
00075530                            
00075530                            loc_71C16:
00075530 DAFC 0030                  		adda.w	#$30,a5
00075534 4A15                       		tst.b	(a5)
00075536 6A00                       		bpl.s	loc_71C22
00075538 4EBA 0000                  		jsr	sub_72850(pc)
0007553C                            
0007553C                            loc_71C22:
0007553C 51CF FFF2                  		dbf	d7,loc_71C16
00075540 1D7C 0040 000E             		move.b	#$40,$E(a6)
00075546 DAFC 0030                  		adda.w	#$30,a5
0007554A 4A15                       		tst.b	(a5)
0007554C 6A00                       		bpl.s	loc_71C38
0007554E 4EBA 0000                  		jsr	sub_71CCA(pc)
00075552                            
00075552                            loc_71C38:
00075552 DAFC 0030                  		adda.w	#$30,a5
00075556 4A15                       		tst.b	(a5)
00075558 6A00                       		bpl.s	loc_71C44
0007555A 4EBA 0000                  		jsr	sub_72850(pc)
0007555E                            
0007555E                            loc_71C44:
0007555E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00075566 4E75                       		rts	
00075568                            ; End of function sub_71B4C
00075568                            
00075568                            
00075568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075568                            
00075568                            
00075568                            sub_71C4E:				; XREF: sub_71B4C
00075568 532D 000E                  		subq.b	#1,$E(a5)
0007556C 6600                       		bne.s	locret_71CAA
0007556E 1D7C 0080 0008             		move.b	#$80,8(a6)
00075574 286D 0004                  		movea.l	4(a5),a4
00075578                            
00075578                            loc_71C5E:
00075578 7A00                       		moveq	#0,d5
0007557A 1A1C                       		move.b	(a4)+,d5
0007557C 0C05 00E0                  		cmpi.b	#-$20,d5
00075580 6500                       		bcs.s	loc_71C6E
00075582 4EBA 0000                  		jsr	sub_72A5A(pc)
00075586 60F0                       		bra.s	loc_71C5E
00075588                            ; ===========================================================================
00075588                            
00075588                            loc_71C6E:
00075588 4A05                       		tst.b	d5
0007558A 6A00                       		bpl.s	loc_71C84
0007558C 1B45 0010                  		move.b	d5,$10(a5)
00075590 1A1C                       		move.b	(a4)+,d5
00075592 6A00                       		bpl.s	loc_71C84
00075594 534C                       		subq.w	#1,a4
00075596 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007559C 6000                       		bra.s	loc_71C88
0007559E                            ; ===========================================================================
0007559E                            
0007559E                            loc_71C84:
0007559E 4EBA 0000                  		jsr	sub_71D40(pc)
000755A2                            
000755A2                            loc_71C88:
000755A2 2B4C 0004                  		move.l	a4,4(a5)
000755A6 0815 0002                  		btst	#2,(a5)
000755AA 6600                       		bne.s	locret_71CAA
000755AC 7000                       		moveq	#0,d0
000755AE 102D 0010                  		move.b	$10(a5),d0
000755B2 0C00 0080                  		cmpi.b	#$80,d0
000755B6 6700                       		beq.s	locret_71CAA
000755B8 0800 0003                  		btst	#3,d0
000755BC 6600                       		bne.s	loc_71CAC
000755BE 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000755C4                            
000755C4                            locret_71CAA:
000755C4 4E75                       		rts	
000755C6                            ; ===========================================================================
000755C6                            
000755C6                            loc_71CAC:
000755C6 0400 0088                  		subi.b	#$88,d0
000755CA 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
000755CE 13C0 00A0 00EA             		move.b	d0,($A000EA).l
000755D4 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
000755DC 4E75                       		rts	
000755DE                            ; End of function sub_71C4E
000755DE                            
000755DE                            ; ===========================================================================
000755DE 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
000755E4                            
000755E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000755E4                            
000755E4                            
000755E4                            sub_71CCA:				; XREF: sub_71B4C
000755E4 532D 000E                  		subq.b	#1,$E(a5)
000755E8 6600                       		bne.s	loc_71CE0
000755EA 0895 0004                  		bclr	#4,(a5)
000755EE 4EBA 0000                  		jsr	sub_71CEC(pc)
000755F2 4EBA 0000                  		jsr	sub_71E18(pc)
000755F6 6000 0000                  		bra.w	loc_726E2
000755FA                            ; ===========================================================================
000755FA                            
000755FA                            loc_71CE0:
000755FA 4EBA 0000                  		jsr	sub_71D9E(pc)
000755FE 4EBA 0000                  		jsr	sub_71DC6(pc)
00075602 6000 0000                  		bra.w	loc_71E24
00075606                            ; End of function sub_71CCA
00075606                            
00075606                            
00075606                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075606                            
00075606                            
00075606                            sub_71CEC:				; XREF: sub_71CCA
00075606 286D 0004                  		movea.l	4(a5),a4
0007560A 0895 0001                  		bclr	#1,(a5)
0007560E                            
0007560E                            loc_71CF4:
0007560E 7A00                       		moveq	#0,d5
00075610 1A1C                       		move.b	(a4)+,d5
00075612 0C05 00E0                  		cmpi.b	#-$20,d5
00075616 6500                       		bcs.s	loc_71D04
00075618 4EBA 0000                  		jsr	sub_72A5A(pc)
0007561C 60F0                       		bra.s	loc_71CF4
0007561E                            ; ===========================================================================
0007561E                            
0007561E                            loc_71D04:
0007561E 4EBA 0000                  		jsr	sub_726FE(pc)
00075622 4A05                       		tst.b	d5
00075624 6A00                       		bpl.s	loc_71D1A
00075626 4EBA 0000                  		jsr	sub_71D22(pc)
0007562A 1A1C                       		move.b	(a4)+,d5
0007562C 6A00                       		bpl.s	loc_71D1A
0007562E 534C                       		subq.w	#1,a4
00075630 6000 0000                  		bra.w	sub_71D60
00075634                            ; ===========================================================================
00075634                            
00075634                            loc_71D1A:
00075634 4EBA 0000                  		jsr	sub_71D40(pc)
00075638 6000 0000                  		bra.w	sub_71D60
0007563C                            ; End of function sub_71CEC
0007563C                            
0007563C                            
0007563C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007563C                            
0007563C                            
0007563C                            sub_71D22:				; XREF: sub_71CEC
0007563C 0405 0080                  		subi.b	#$80,d5
00075640 6700                       		beq.s	loc_71D58
00075642 DA2D 0008                  		add.b	8(a5),d5
00075646 0245 007F                  		andi.w	#$7F,d5
0007564A E34D                       		lsl.w	#1,d5
0007564C 41FA 0000                  		lea	word_72790(pc),a0
00075650 3C30 5000                  		move.w	(a0,d5.w),d6
00075654 3B46 0010                  		move.w	d6,$10(a5)
00075658 4E75                       		rts	
0007565A                            ; End of function sub_71D22
0007565A                            
0007565A                            
0007565A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007565A                            
0007565A                            
0007565A                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007565A 1005                       		move.b	d5,d0
0007565C 122D 0002                  		move.b	2(a5),d1
00075660                            
00075660                            loc_71D46:
00075660 5301                       		subq.b	#1,d1
00075662 6700                       		beq.s	loc_71D4E
00075664 D005                       		add.b	d5,d0
00075666 60F8                       		bra.s	loc_71D46
00075668                            ; ===========================================================================
00075668                            
00075668                            loc_71D4E:
00075668 1B40 000F                  		move.b	d0,$F(a5)
0007566C 1B40 000E                  		move.b	d0,$E(a5)
00075670 4E75                       		rts	
00075672                            ; End of function sub_71D40
00075672                            
00075672                            ; ===========================================================================
00075672                            
00075672                            loc_71D58:				; XREF: sub_71D22
00075672 08D5 0001                  		bset	#1,(a5)
00075676 426D 0010                  		clr.w	$10(a5)
0007567A                            
0007567A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007567A                            
0007567A                            
0007567A                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007567A 2B4C 0004                  		move.l	a4,4(a5)
0007567E 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075684 0815 0004                  		btst	#4,(a5)
00075688 6600                       		bne.s	locret_71D9C
0007568A 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00075690 422D 000C                  		clr.b	$C(a5)
00075694 0815 0003                  		btst	#3,(a5)
00075698 6700                       		beq.s	locret_71D9C
0007569A 206D 0014                  		movea.l	$14(a5),a0
0007569E 1B58 0018                  		move.b	(a0)+,$18(a5)
000756A2 1B58 0019                  		move.b	(a0)+,$19(a5)
000756A6 1B58 001A                  		move.b	(a0)+,$1A(a5)
000756AA 1018                       		move.b	(a0)+,d0
000756AC E208                       		lsr.b	#1,d0
000756AE 1B40 001B                  		move.b	d0,$1B(a5)
000756B2 426D 001C                  		clr.w	$1C(a5)
000756B6                            
000756B6                            locret_71D9C:
000756B6 4E75                       		rts	
000756B8                            ; End of function sub_71D60
000756B8                            
000756B8                            
000756B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756B8                            
000756B8                            
000756B8                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000756B8 4A2D 0012                  		tst.b	$12(a5)
000756BC 6700                       		beq.s	locret_71DC4
000756BE 532D 0012                  		subq.b	#1,$12(a5)
000756C2 6600                       		bne.s	locret_71DC4
000756C4 08D5 0001                  		bset	#1,(a5)
000756C8 4A2D 0001                  		tst.b	1(a5)
000756CC 6B00 0000                  		bmi.w	loc_71DBE
000756D0 4EBA 0000                  		jsr	sub_726FE(pc)
000756D4 584F                       		addq.w	#4,sp
000756D6 4E75                       		rts	
000756D8                            ; ===========================================================================
000756D8                            
000756D8                            loc_71DBE:
000756D8 4EBA 0000                  		jsr	sub_729A0(pc)
000756DC 584F                       		addq.w	#4,sp
000756DE                            
000756DE                            locret_71DC4:
000756DE 4E75                       		rts	
000756E0                            ; End of function sub_71D9E
000756E0                            
000756E0                            
000756E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756E0                            
000756E0                            
000756E0                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000756E0 584F                       		addq.w	#4,sp
000756E2 0815 0003                  		btst	#3,(a5)
000756E6 6700                       		beq.s	locret_71E16
000756E8 4A2D 0018                  		tst.b	$18(a5)
000756EC 6700                       		beq.s	loc_71DDA
000756EE 532D 0018                  		subq.b	#1,$18(a5)
000756F2 4E75                       		rts	
000756F4                            ; ===========================================================================
000756F4                            
000756F4                            loc_71DDA:
000756F4 532D 0019                  		subq.b	#1,$19(a5)
000756F8 6700                       		beq.s	loc_71DE2
000756FA 4E75                       		rts	
000756FC                            ; ===========================================================================
000756FC                            
000756FC                            loc_71DE2:
000756FC 206D 0014                  		movea.l	$14(a5),a0
00075700 1B68 0001 0019             		move.b	1(a0),$19(a5)
00075706 4A2D 001B                  		tst.b	$1B(a5)
0007570A 6600                       		bne.s	loc_71DFE
0007570C 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00075712 442D 001A                  		neg.b	$1A(a5)
00075716 4E75                       		rts	
00075718                            ; ===========================================================================
00075718                            
00075718                            loc_71DFE:
00075718 532D 001B                  		subq.b	#1,$1B(a5)
0007571C 1C2D 001A                  		move.b	$1A(a5),d6
00075720 4886                       		ext.w	d6
00075722 DC6D 001C                  		add.w	$1C(a5),d6
00075726 3B46 001C                  		move.w	d6,$1C(a5)
0007572A DC6D 0010                  		add.w	$10(a5),d6
0007572E 594F                       		subq.w	#4,sp
00075730                            
00075730                            locret_71E16:
00075730 4E75                       		rts	
00075732                            ; End of function sub_71DC6
00075732                            
00075732                            
00075732                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075732                            
00075732                            
00075732                            sub_71E18:				; XREF: sub_71CCA
00075732 0815 0001                  		btst	#1,(a5)
00075736 6600                       		bne.s	locret_71E48
00075738 3C2D 0010                  		move.w	$10(a5),d6
0007573C 6700                       		beq.s	loc_71E4A
0007573E                            
0007573E                            loc_71E24:				; XREF: sub_71CCA
0007573E 102D 001E                  		move.b	$1E(a5),d0
00075742 4880                       		ext.w	d0
00075744 DC40                       		add.w	d0,d6
00075746 0815 0002                  		btst	#2,(a5)
0007574A 6600                       		bne.s	locret_71E48
0007574C 3206                       		move.w	d6,d1
0007574E E049                       		lsr.w	#8,d1
00075750 103C 00A4                  		move.b	#-$5C,d0
00075754 4EBA 0000                  		jsr	sub_72722(pc)
00075758 1206                       		move.b	d6,d1
0007575A 103C 00A0                  		move.b	#-$60,d0
0007575E 4EBA 0000                  		jsr	sub_72722(pc)
00075762                            
00075762                            locret_71E48:
00075762 4E75                       		rts	
00075764                            ; ===========================================================================
00075764                            
00075764                            loc_71E4A:
00075764 08D5 0001                  		bset	#1,(a5)
00075768 4E75                       		rts	
0007576A                            ; End of function sub_71E18
0007576A                            
0007576A                            ; ===========================================================================
0007576A                            
0007576A                            loc_71E50:				; XREF: sub_71B4C
0007576A 6B00                       		bmi.s	loc_71E94
0007576C 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00075772 6700 0000                  		beq.w	loc_71EFE
00075776 1D7C 0002 0003             		move.b	#2,3(a6)
0007577C 7602                       		moveq	#2,d3
0007577E 103C 00B4                  		move.b	#-$4C,d0
00075782 7200                       		moveq	#0,d1
00075784                            
00075784                            loc_71E6A:
00075784 4EBA 0000                  		jsr	sub_7272E(pc)
00075788 4EBA 0000                  		jsr	sub_72764(pc)
0007578C 5200                       		addq.b	#1,d0
0007578E 51CB FFF4                  		dbf	d3,loc_71E6A
00075792                            
00075792 7602                       		moveq	#2,d3
00075794 7028                       		moveq	#$28,d0
00075796                            
00075796                            loc_71E7C:
00075796 1203                       		move.b	d3,d1
00075798 4EBA 0000                  		jsr	sub_7272E(pc)
0007579C 5801                       		addq.b	#4,d1
0007579E 4EBA 0000                  		jsr	sub_7272E(pc)
000757A2 51CB FFF2                  		dbf	d3,loc_71E7C
000757A6                            
000757A6 4EBA 0000                  		jsr	sub_729B6(pc)
000757AA 6000 FDB2                  		bra.w	loc_71C44
000757AE                            ; ===========================================================================
000757AE                            
000757AE                            loc_71E94:				; XREF: loc_71E50
000757AE 422E 0003                  		clr.b	3(a6)
000757B2 7630                       		moveq	#$30,d3
000757B4 4BEE 0040                  		lea	$40(a6),a5
000757B8 7806                       		moveq	#6,d4
000757BA                            
000757BA                            loc_71EA0:
000757BA 0815 0007                  		btst	#7,(a5)
000757BE 6700                       		beq.s	loc_71EB8
000757C0 0815 0002                  		btst	#2,(a5)
000757C4 6600                       		bne.s	loc_71EB8
000757C6 103C 00B4                  		move.b	#-$4C,d0
000757CA 122D 000A                  		move.b	$A(a5),d1
000757CE 4EBA 0000                  		jsr	sub_72722(pc)
000757D2                            
000757D2                            loc_71EB8:
000757D2 DAC3                       		adda.w	d3,a5
000757D4 51CC FFE4                  		dbf	d4,loc_71EA0
000757D8                            
000757D8 4BEE 0220                  		lea	$220(a6),a5
000757DC 7802                       		moveq	#2,d4
000757DE                            
000757DE                            loc_71EC4:
000757DE 0815 0007                  		btst	#7,(a5)
000757E2 6700                       		beq.s	loc_71EDC
000757E4 0815 0002                  		btst	#2,(a5)
000757E8 6600                       		bne.s	loc_71EDC
000757EA 103C 00B4                  		move.b	#-$4C,d0
000757EE 122D 000A                  		move.b	$A(a5),d1
000757F2 4EBA 0000                  		jsr	sub_72722(pc)
000757F6                            
000757F6                            loc_71EDC:
000757F6 DAC3                       		adda.w	d3,a5
000757F8 51CC FFE4                  		dbf	d4,loc_71EC4
000757FC                            
000757FC 4BEE 0340                  		lea	$340(a6),a5
00075800 0815 0007                  		btst	#7,(a5)
00075804 6700                       		beq.s	loc_71EFE
00075806 0815 0002                  		btst	#2,(a5)
0007580A 6600                       		bne.s	loc_71EFE
0007580C 103C 00B4                  		move.b	#-$4C,d0
00075810 122D 000A                  		move.b	$A(a5),d1
00075814 4EBA 0000                  		jsr	sub_72722(pc)
00075818                            
00075818                            loc_71EFE:
00075818 6000 FD44                  		bra.w	loc_71C44
0007581C                            
0007581C                            ; ---------------------------------------------------------------------------
0007581C                            ; Subroutine to	play a sound or	music track
0007581C                            ; ---------------------------------------------------------------------------
0007581C                            
0007581C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007581C                            
0007581C                            
0007581C                            Sound_Play:				; XREF: sub_71B4C
0007581C 2079 0007 527A             		movea.l	(Go_SoundTypes).l,a0
00075822 43EE 000A                  		lea	$A(a6),a1	; load music track number
00075826 1616                       		move.b	0(a6),d3
00075828 7802                       		moveq	#2,d4
0007582A                            
0007582A                            loc_71F12:
0007582A 1011                       		move.b	(a1),d0		; move track number to d0
0007582C 1200                       		move.b	d0,d1
0007582E 4219                       		clr.b	(a1)+
00075830 0400 0081                  		subi.b	#$81,d0
00075834 6500                       		bcs.s	loc_71F3E
00075836 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007583C 6700                       		beq.s	loc_71F2C
0007583E 1D41 000A                  		move.b	d1,$A(a6)
00075842 6000                       		bra.s	loc_71F3E
00075844                            ; ===========================================================================
00075844                            
00075844                            loc_71F2C:
00075844 0240 007F                  		andi.w	#$7F,d0
00075848 1430 0000                  		move.b	(a0,d0.w),d2
0007584C B403                       		cmp.b	d3,d2
0007584E 6500                       		bcs.s	loc_71F3E
00075850 1602                       		move.b	d2,d3
00075852 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00075856                            
00075856                            loc_71F3E:
00075856 51CC FFD2                  		dbf	d4,loc_71F12
0007585A                            
0007585A 4A03                       		tst.b	d3
0007585C 6B00                       		bmi.s	locret_71F4A
0007585E 1C83                       		move.b	d3,0(a6)
00075860                            
00075860                            locret_71F4A:
00075860 4E75                       		rts	
00075862                            ; End of function Sound_Play
00075862                            
00075862                            
00075862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075862                            
00075862                            
00075862                            Sound_ChkValue:				; XREF: sub_71B4C
00075862 7E00                       		moveq	#0,d7
00075864 1E2E 0009                  		move.b	9(a6),d7
00075868 6700 0000                  		beq.w	Sound_E4
0007586C 6A00                       		bpl.s	locret_71F8C
0007586E 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00075874 0C07 009F                  		cmpi.b	#$9F,d7
00075878 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007587C 0C07 00A0                  		cmpi.b	#$A0,d7
00075880 6500 0000                  		bcs.w	locret_71F8C
00075884 0C07 00CF                  		cmpi.b	#$CF,d7
00075888 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007588C 0C07 00D0                  		cmpi.b	#$D0,d7
00075890 6500 0000                  		bcs.w	locret_71F8C
00075894 0C07 00E0                  		cmpi.b	#$E0,d7
00075898 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007589C 0C07 00E5                  		cmpi.b	#$E5,d7
000758A0 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
000758A2                            
000758A2                            locret_71F8C:
000758A2 4E75                       		rts	
000758A4                            ; ===========================================================================
000758A4                            
000758A4                            Sound_E0toE5				; XREF: Sound_ChkValue
000758A4 0407 00E0                  		subi.b	#$E0,d7
000758A8 E54F                       		lsl.w	#2,d7
000758AA 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000758AE                            ; ===========================================================================
000758AE                            
000758AE                            Sound_ExIndex:
000758AE 6000 0000                  		bra.w	Sound_E0
000758B2                            ; ===========================================================================
000758B2 6000 0000                  		bra.w	Sound_E1
000758B6                            ; ===========================================================================
000758B6 6000 0000                  		bra.w	Sound_E2
000758BA                            ; ===========================================================================
000758BA 6000 0000                  		bra.w	Sound_E3
000758BE                            ; ===========================================================================
000758BE 6000 0000                  		bra.w	Sound_E4
000758C2                            ; ===========================================================================
000758C2 6000 0000                  		bra.w	Sound_E5
000758C6                            ; ===========================================================================
000758C6                            ; ---------------------------------------------------------------------------
000758C6                            ; Play "Say-gaa" PCM sound
000758C6                            ; ---------------------------------------------------------------------------
000758C6                            
000758C6                            Sound_E1:				  
000758C6 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000758CC 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000758D2 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000758DA                            PlayPCM_Loop:	  
000758DA 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000758E0 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000758E4 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000758E8 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000758EA 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000758EC 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000758F0 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000758F6 4EB8 1418                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000758FA 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00075900 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00075902 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00075904                            return_PlayPCM: 
00075904 584F                       		addq.w	#4,sp 
00075906 4E75                       		rts
00075908                            		
00075908                            ; ---------------------------------------------------------------------------
00075908                            ; Play you are an idiot pcm sound
00075908                            ; since the sfx already crashes the game forever load it here :V
00075908                            ; ---------------------------------------------------------------------------
00075908                            
00075908                            Sound_E5: 
00075908 4EB8 14E8                  		jsr	ClearScreen
0007590C                            		;control port on a5
0007590C 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00075912 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
00075918 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0007591C 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00075920 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00075924                            		
00075924 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
00075928                            		
00075928 2ABC 4000 0000             		move.l	#$40000000,(a5)
0007592E 41F9 0002 41C8             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00075934 4EB8 1664                  		jsr	NemDec
00075938 43F9 00FF 0000             		lea	($FF0000).l,a1
0007593E 41F9 0002 416A             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00075944 303C 0000                  		move.w	#0,d0
00075948 4EB8 1942                  		jsr	EniDec
0007594C 43F9 00FF 0000             		lea	($FF0000).l,a1
00075952 203C 4304 0003             		move.l	#$43040003,d0
00075958 7223                       		moveq	#35,d1
0007595A 740D                       		moveq	#13,d2
0007595C 4EB8 1644                  		jsr	ShowVDPGraphics
00075960 7014                       		moveq	#20,d0
00075962 4EB8 2302                  		jsr	PalLoad2	; load pallet
00075966                            		
00075966                            Sound_E5_StartPCM:
00075966 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007596C 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00075972 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007597A                            PlayPCM_LoopE5:	  
0007597A                            
0007597A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075980                            		
00075980 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00075984                            		
00075984 1038 FE24                  		move.b	($FFFFFE24).w,d0
00075988 0200 000F                  		andi.b	#$F,d0
0007598C 6700                       		beq.s	SfxE5SwapPalette
0007598E                            		
0007598E 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00075992 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00075996 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075998 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
0007599A 60DE                       		bra.s	PlayPCM_LoopE5
0007599C                            		
0007599C                            SfxE5SwapPalette:
0007599C                            		
0007599C 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
000759A2                            		
000759A2                            		
000759A2 0838 0004 FE24             		btst	#4,($FFFFFE24).w
000759A8 6700                       		beq.s	@not_black
000759AA 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
000759B0 6000                       		bra.s	@merge
000759B2                            	@not_black:
000759B2 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
000759B8                            	@merge:
000759B8 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
000759BC 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
000759C0 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
000759C6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000759CA                            		
000759CA 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
000759CE 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
000759D2 60A6                       		bra.s	PlayPCM_LoopE5
000759D4                            		
000759D4                            ; ===========================================================================
000759D4                            ; ---------------------------------------------------------------------------
000759D4                            ; Play music track $81-$9F
000759D4                            ; ---------------------------------------------------------------------------
000759D4                            
000759D4                            Sound_81to9F:				; XREF: Sound_ChkValue
000759D4 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000759D8 6600                       		bne.s	loc_72024	; if not, branch
000759DA 4A2E 0027                  		tst.b	$27(a6)
000759DE 6600 0000                  		bne.w	loc_721B6
000759E2 4BEE 0040                  		lea	$40(a6),a5
000759E6 7009                       		moveq	#9,d0
000759E8                            
000759E8                            loc_71FE6:
000759E8 0895 0002                  		bclr	#2,(a5)
000759EC DAFC 0030                  		adda.w	#$30,a5
000759F0 51C8 FFF6                  		dbf	d0,loc_71FE6
000759F4                            
000759F4 4BEE 0220                  		lea	$220(a6),a5
000759F8 7005                       		moveq	#5,d0
000759FA                            
000759FA                            loc_71FF8:
000759FA 0895 0007                  		bclr	#7,(a5)
000759FE DAFC 0030                  		adda.w	#$30,a5
00075A02 51C8 FFF6                  		dbf	d0,loc_71FF8
00075A06 4216                       		clr.b	0(a6)
00075A08 204E                       		movea.l	a6,a0
00075A0A 43EE 03A0                  		lea	$3A0(a6),a1
00075A0E 303C 0087                  		move.w	#$87,d0
00075A12                            
00075A12                            loc_72012:
00075A12 22D8                       		move.l	(a0)+,(a1)+
00075A14 51C8 FFFC                  		dbf	d0,loc_72012
00075A18                            
00075A18 1D7C 0080 0027             		move.b	#$80,$27(a6)
00075A1E 4216                       		clr.b	0(a6)
00075A20 6000                       		bra.s	loc_7202C
00075A22                            ; ===========================================================================
00075A22                            
00075A22                            loc_72024:
00075A22 422E 0027                  		clr.b	$27(a6)
00075A26 422E 0026                  		clr.b	$26(a6)
00075A2A                            
00075A2A                            loc_7202C:
00075A2A 4EBA 0000                  		jsr	sub_725CA(pc)
00075A2E 2879 0007 528A             		movea.l	(off_719A0).l,a4
00075A34 0407 0081                  		subi.b	#$81,d7
00075A38 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00075A3E 2879 0007 5282             		movea.l	(Go_MusicIndex).l,a4
00075A44 E54F                       		lsl.w	#2,d7
00075A46 2874 7000                  		movea.l	(a4,d7.w),a4
00075A4A 7000                       		moveq	#0,d0
00075A4C 3014                       		move.w	(a4),d0
00075A4E D08C                       		add.l	a4,d0
00075A50 2D40 0018                  		move.l	d0,$18(a6)
00075A54 102C 0005                  		move.b	5(a4),d0
00075A58 1D40 0028                  		move.b	d0,$28(a6)
00075A5C 4A2E 002A                  		tst.b	$2A(a6)
00075A60 6700                       		beq.s	loc_72068
00075A62 102E 0029                  		move.b	$29(a6),d0
00075A66                            
00075A66                            loc_72068:
00075A66 1D40 0002                  		move.b	d0,2(a6)
00075A6A 1D40 0001                  		move.b	d0,1(a6)
00075A6E 7200                       		moveq	#0,d1
00075A70 264C                       		movea.l	a4,a3
00075A72 5C4C                       		addq.w	#6,a4
00075A74 7E00                       		moveq	#0,d7
00075A76 1E2B 0002                  		move.b	2(a3),d7
00075A7A 6700 0000                  		beq.w	loc_72114
00075A7E 5307                       		subq.b	#1,d7
00075A80 123C 00C0                  		move.b	#-$40,d1
00075A84 182B 0004                  		move.b	4(a3),d4
00075A88 7C30                       		moveq	#$30,d6
00075A8A 1A3C 0001                  		move.b	#1,d5
00075A8E 43EE 0040                  		lea	$40(a6),a1
00075A92 45FA 0000                  		lea	byte_721BA(pc),a2
00075A96                            
00075A96                            loc_72098:
00075A96 08D1 0007                  		bset	#7,(a1)
00075A9A 135A 0001                  		move.b	(a2)+,1(a1)
00075A9E 1344 0002                  		move.b	d4,2(a1)
00075AA2 1346 000D                  		move.b	d6,$D(a1)
00075AA6 1341 000A                  		move.b	d1,$A(a1)
00075AAA 1345 000E                  		move.b	d5,$E(a1)
00075AAE 7000                       		moveq	#0,d0
00075AB0 301C                       		move.w	(a4)+,d0
00075AB2 D08B                       		add.l	a3,d0
00075AB4 2340 0004                  		move.l	d0,4(a1)
00075AB8 335C 0008                  		move.w	(a4)+,8(a1)
00075ABC D2C6                       		adda.w	d6,a1
00075ABE 51CF FFD6                  		dbf	d7,loc_72098
00075AC2 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00075AC8 6600                       		bne.s	loc_720D8
00075ACA 702B                       		moveq	#$2B,d0
00075ACC 7200                       		moveq	#0,d1
00075ACE 4EBA 0000                  		jsr	sub_7272E(pc)
00075AD2 6000 0000                  		bra.w	loc_72114
00075AD6                            ; ===========================================================================
00075AD6                            
00075AD6                            loc_720D8:
00075AD6 7028                       		moveq	#$28,d0
00075AD8 7206                       		moveq	#6,d1
00075ADA 4EBA 0000                  		jsr	sub_7272E(pc)
00075ADE 103C 0042                  		move.b	#$42,d0
00075AE2 727F                       		moveq	#$7F,d1
00075AE4 4EBA 0000                  		jsr	sub_72764(pc)
00075AE8 103C 004A                  		move.b	#$4A,d0
00075AEC 727F                       		moveq	#$7F,d1
00075AEE 4EBA 0000                  		jsr	sub_72764(pc)
00075AF2 103C 0046                  		move.b	#$46,d0
00075AF6 727F                       		moveq	#$7F,d1
00075AF8 4EBA 0000                  		jsr	sub_72764(pc)
00075AFC 103C 004E                  		move.b	#$4E,d0
00075B00 727F                       		moveq	#$7F,d1
00075B02 4EBA 0000                  		jsr	sub_72764(pc)
00075B06 103C 00B6                  		move.b	#-$4A,d0
00075B0A 123C 00C0                  		move.b	#-$40,d1
00075B0E 4EBA 0000                  		jsr	sub_72764(pc)
00075B12                            
00075B12                            loc_72114:
00075B12 7E00                       		moveq	#0,d7
00075B14 1E2B 0003                  		move.b	3(a3),d7
00075B18 6700                       		beq.s	loc_72154
00075B1A 5307                       		subq.b	#1,d7
00075B1C 43EE 0190                  		lea	$190(a6),a1
00075B20 45FA 0000                  		lea	byte_721C2(pc),a2
00075B24                            
00075B24                            loc_72126:
00075B24 08D1 0007                  		bset	#7,(a1)
00075B28 135A 0001                  		move.b	(a2)+,1(a1)
00075B2C 1344 0002                  		move.b	d4,2(a1)
00075B30 1346 000D                  		move.b	d6,$D(a1)
00075B34 1345 000E                  		move.b	d5,$E(a1)
00075B38 7000                       		moveq	#0,d0
00075B3A 301C                       		move.w	(a4)+,d0
00075B3C D08B                       		add.l	a3,d0
00075B3E 2340 0004                  		move.l	d0,4(a1)
00075B42 335C 0008                  		move.w	(a4)+,8(a1)
00075B46 101C                       		move.b	(a4)+,d0
00075B48 135C 000B                  		move.b	(a4)+,$B(a1)
00075B4C D2C6                       		adda.w	d6,a1
00075B4E 51CF FFD4                  		dbf	d7,loc_72126
00075B52                            
00075B52                            loc_72154:
00075B52 43EE 0220                  		lea	$220(a6),a1
00075B56 7E05                       		moveq	#5,d7
00075B58                            
00075B58                            loc_7215A:
00075B58 4A11                       		tst.b	(a1)
00075B5A 6A00 0000                  		bpl.w	loc_7217C
00075B5E 7000                       		moveq	#0,d0
00075B60 1029 0001                  		move.b	1(a1),d0
00075B64 6B00                       		bmi.s	loc_7216E
00075B66 5500                       		subq.b	#2,d0
00075B68 E508                       		lsl.b	#2,d0
00075B6A 6000                       		bra.s	loc_72170
00075B6C                            ; ===========================================================================
00075B6C                            
00075B6C                            loc_7216E:
00075B6C E608                       		lsr.b	#3,d0
00075B6E                            
00075B6E                            loc_72170:
00075B6E 41FA 0000                  		lea	dword_722CC(pc),a0
00075B72 2070 0000                  		movea.l	(a0,d0.w),a0
00075B76 08D0 0002                  		bset	#2,(a0)
00075B7A                            
00075B7A                            loc_7217C:
00075B7A D2C6                       		adda.w	d6,a1
00075B7C 51CF FFDA                  		dbf	d7,loc_7215A
00075B80                            
00075B80 4A6E 0340                  		tst.w	$340(a6)
00075B84 6A00                       		bpl.s	loc_7218E
00075B86 08EE 0002 0100             		bset	#2,$100(a6)
00075B8C                            
00075B8C                            loc_7218E:
00075B8C 4A6E 0370                  		tst.w	$370(a6)
00075B90 6A00                       		bpl.s	loc_7219A
00075B92 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075B98                            
00075B98                            loc_7219A:
00075B98 4BEE 0070                  		lea	$70(a6),a5
00075B9C 7805                       		moveq	#5,d4
00075B9E                            
00075B9E                            loc_721A0:
00075B9E 4EBA 0000                  		jsr	sub_726FE(pc)
00075BA2 DAC6                       		adda.w	d6,a5
00075BA4 51CC FFF8                  		dbf	d4,loc_721A0
00075BA8 7802                       		moveq	#2,d4
00075BAA                            
00075BAA                            loc_721AC:
00075BAA 4EBA 0000                  		jsr	sub_729A0(pc)
00075BAE DAC6                       		adda.w	d6,a5
00075BB0 51CC FFF8                  		dbf	d4,loc_721AC
00075BB4                            
00075BB4                            loc_721B6:
00075BB4 584F                       		addq.w	#4,sp
00075BB6 4E75                       		rts	
00075BB8                            ; ===========================================================================
00075BB8 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00075BC0                            		even
00075BC0 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00075BC4                            		even
00075BC4                            ; ===========================================================================
00075BC4                            ; ---------------------------------------------------------------------------
00075BC4                            ; Play normal sound effect
00075BC4                            ; ---------------------------------------------------------------------------
00075BC4                            
00075BC4                            Sound_A0toCF:				; XREF: Sound_ChkValue
00075BC4 4A2E 0027                  		tst.b	$27(a6)
00075BC8 6600 0000                  		bne.w	loc_722C6
00075BCC 4A2E 0004                  		tst.b	4(a6)
00075BD0 6600 0000                  		bne.w	loc_722C6
00075BD4 4A2E 0024                  		tst.b	$24(a6)
00075BD8 6600 0000                  		bne.w	loc_722C6
00075BDC 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00075BE0 6600                       		bne.s	Sound_notB5	; if not, branch
00075BE2 4A2E 002B                  		tst.b	$2B(a6)
00075BE6 6600                       		bne.s	loc_721EE
00075BE8 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00075BEC                            
00075BEC                            loc_721EE:
00075BEC 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00075BF2                            
00075BF2                            Sound_notB5:
00075BF2 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00075BF6 6600                       		bne.s	Sound_notA7	; if not, branch
00075BF8 4A2E 002C                  		tst.b	$2C(a6)
00075BFC 6600 0000                  		bne.w	locret_722C4
00075C00 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00075C06                            
00075C06                            Sound_notA7:
00075C06 2079 0007 5286             		movea.l	(Go_SoundIndex).l,a0
00075C0C 0407 00A0                  		subi.b	#$A0,d7
00075C10 E54F                       		lsl.w	#2,d7
00075C12 2670 7000                  		movea.l	(a0,d7.w),a3
00075C16 224B                       		movea.l	a3,a1
00075C18 7200                       		moveq	#0,d1
00075C1A 3219                       		move.w	(a1)+,d1
00075C1C D28B                       		add.l	a3,d1
00075C1E 1A19                       		move.b	(a1)+,d5
00075C20 1E19                       		move.b	(a1)+,d7
00075C22 5307                       		subq.b	#1,d7
00075C24 7C30                       		moveq	#$30,d6
00075C26                            
00075C26                            loc_72228:
00075C26 7600                       		moveq	#0,d3
00075C28 1629 0001                  		move.b	1(a1),d3
00075C2C 1803                       		move.b	d3,d4
00075C2E 6B00                       		bmi.s	loc_72244
00075C30 5543                       		subq.w	#2,d3
00075C32 E54B                       		lsl.w	#2,d3
00075C34 4BFA 0000                  		lea	dword_722CC(pc),a5
00075C38 2A75 3000                  		movea.l	(a5,d3.w),a5
00075C3C 08D5 0002                  		bset	#2,(a5)
00075C40 6000                       		bra.s	loc_7226E
00075C42                            ; ===========================================================================
00075C42                            
00075C42                            loc_72244:
00075C42 E64B                       		lsr.w	#3,d3
00075C44 4BFA 0000                  		lea	dword_722CC(pc),a5
00075C48 2A75 3000                  		movea.l	(a5,d3.w),a5
00075C4C 08D5 0002                  		bset	#2,(a5)
00075C50 0C04 00C0                  		cmpi.b	#$C0,d4
00075C54 6600                       		bne.s	loc_7226E
00075C56 1004                       		move.b	d4,d0
00075C58 0000 001F                  		ori.b	#$1F,d0
00075C5C 13C0 00C0 0011             		move.b	d0,($C00011).l
00075C62 0840 0005                  		bchg	#5,d0
00075C66 13C0 00C0 0011             		move.b	d0,($C00011).l
00075C6C                            
00075C6C                            loc_7226E:
00075C6C 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00075C70 244D                       		movea.l	a5,a2
00075C72 700B                       		moveq	#$B,d0
00075C74                            
00075C74                            loc_72276:
00075C74 429A                       		clr.l	(a2)+
00075C76 51C8 FFFC                  		dbf	d0,loc_72276
00075C7A                            
00075C7A 3A99                       		move.w	(a1)+,(a5)
00075C7C 1B45 0002                  		move.b	d5,2(a5)
00075C80 7000                       		moveq	#0,d0
00075C82 3019                       		move.w	(a1)+,d0
00075C84 D08B                       		add.l	a3,d0
00075C86 2B40 0004                  		move.l	d0,4(a5)
00075C8A 3B59 0008                  		move.w	(a1)+,8(a5)
00075C8E 1B7C 0001 000E             		move.b	#1,$E(a5)
00075C94 1B46 000D                  		move.b	d6,$D(a5)
00075C98 4A04                       		tst.b	d4
00075C9A 6B00                       		bmi.s	loc_722A8
00075C9C 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075CA2 2B41 0020                  		move.l	d1,$20(a5)
00075CA6                            
00075CA6                            loc_722A8:
00075CA6 51CF FF7E                  		dbf	d7,loc_72228
00075CAA                            
00075CAA 4A2E 0250                  		tst.b	$250(a6)
00075CAE 6A00                       		bpl.s	loc_722B8
00075CB0 08EE 0002 0340             		bset	#2,$340(a6)
00075CB6                            
00075CB6                            loc_722B8:
00075CB6 4A2E 0310                  		tst.b	$310(a6)
00075CBA 6A00                       		bpl.s	locret_722C4
00075CBC 08EE 0002 0370             		bset	#2,$370(a6)
00075CC2                            
00075CC2                            locret_722C4:
00075CC2 4E75                       		rts	
00075CC4                            ; ===========================================================================
00075CC4                            
00075CC4                            loc_722C6:
00075CC4 4216                       		clr.b	0(a6)
00075CC6 4E75                       		rts	
00075CC8                            ; ===========================================================================
00075CC8 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00075CCC 0000 0000                  		dc.l 0
00075CD0 00FF F100                  		dc.l $FFF100
00075CD4 00FF F130                  		dc.l $FFF130
00075CD8 00FF F190                  		dc.l $FFF190
00075CDC 00FF F1C0                  		dc.l $FFF1C0
00075CE0 00FF F1F0                  		dc.l $FFF1F0
00075CE4 00FF F1F0                  		dc.l $FFF1F0
00075CE8 00FF F220                  dword_722EC:	dc.l $FFF220
00075CEC 0000 0000                  		dc.l 0
00075CF0 00FF F250                  		dc.l $FFF250
00075CF4 00FF F280                  		dc.l $FFF280
00075CF8 00FF F2B0                  		dc.l $FFF2B0
00075CFC 00FF F2E0                  		dc.l $FFF2E0
00075D00 00FF F310                  		dc.l $FFF310
00075D04 00FF F310                  		dc.l $FFF310
00075D08                            ; ===========================================================================
00075D08                            ; ---------------------------------------------------------------------------
00075D08                            ; Play GHZ waterfall sound
00075D08                            ; ---------------------------------------------------------------------------
00075D08                            
00075D08                            Sound_D0toDF:				; XREF: Sound_ChkValue
00075D08 4A2E 0027                  		tst.b	$27(a6)
00075D0C 6600 0000                  		bne.w	locret_723C6
00075D10 4A2E 0004                  		tst.b	4(a6)
00075D14 6600 0000                  		bne.w	locret_723C6
00075D18 4A2E 0024                  		tst.b	$24(a6)
00075D1C 6600 0000                  		bne.w	locret_723C6
00075D20 2079 0007 527E             		movea.l	(Go_SoundD0).l,a0
00075D26 0407 00D0                  		subi.b	#$D0,d7
00075D2A E54F                       		lsl.w	#2,d7
00075D2C 2670 7000                  		movea.l	(a0,d7.w),a3
00075D30 224B                       		movea.l	a3,a1
00075D32 7000                       		moveq	#0,d0
00075D34 3019                       		move.w	(a1)+,d0
00075D36 D08B                       		add.l	a3,d0
00075D38 2D40 0020                  		move.l	d0,$20(a6)
00075D3C 1A19                       		move.b	(a1)+,d5
00075D3E 1E19                       		move.b	(a1)+,d7
00075D40 5307                       		subq.b	#1,d7
00075D42 7C30                       		moveq	#$30,d6
00075D44                            
00075D44                            loc_72348:
00075D44 1829 0001                  		move.b	1(a1),d4
00075D48 6B00                       		bmi.s	loc_7235A
00075D4A 08EE 0002 0100             		bset	#2,$100(a6)
00075D50 4BEE 0340                  		lea	$340(a6),a5
00075D54 6000                       		bra.s	loc_72364
00075D56                            ; ===========================================================================
00075D56                            
00075D56                            loc_7235A:
00075D56 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075D5C 4BEE 0370                  		lea	$370(a6),a5
00075D60                            
00075D60                            loc_72364:
00075D60 244D                       		movea.l	a5,a2
00075D62 700B                       		moveq	#$B,d0
00075D64                            
00075D64                            loc_72368:
00075D64 429A                       		clr.l	(a2)+
00075D66 51C8 FFFC                  		dbf	d0,loc_72368
00075D6A                            
00075D6A 3A99                       		move.w	(a1)+,(a5)
00075D6C 1B45 0002                  		move.b	d5,2(a5)
00075D70 7000                       		moveq	#0,d0
00075D72 3019                       		move.w	(a1)+,d0
00075D74 D08B                       		add.l	a3,d0
00075D76 2B40 0004                  		move.l	d0,4(a5)
00075D7A 3B59 0008                  		move.w	(a1)+,8(a5)
00075D7E 1B7C 0001 000E             		move.b	#1,$E(a5)
00075D84 1B46 000D                  		move.b	d6,$D(a5)
00075D88 4A04                       		tst.b	d4
00075D8A 6B00                       		bmi.s	loc_72396
00075D8C 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075D92                            
00075D92                            loc_72396:
00075D92 51CF FFB0                  		dbf	d7,loc_72348
00075D96                            
00075D96 4A2E 0250                  		tst.b	$250(a6)
00075D9A 6A00                       		bpl.s	loc_723A6
00075D9C 08EE 0002 0340             		bset	#2,$340(a6)
00075DA2                            
00075DA2                            loc_723A6:
00075DA2 4A2E 0310                  		tst.b	$310(a6)
00075DA6 6A00                       		bpl.s	locret_723C6
00075DA8 08EE 0002 0370             		bset	#2,$370(a6)
00075DAE 0004 001F                  		ori.b	#$1F,d4
00075DB2 13C4 00C0 0011             		move.b	d4,($C00011).l
00075DB8 0844 0005                  		bchg	#5,d4
00075DBC 13C4 00C0 0011             		move.b	d4,($C00011).l
00075DC2                            
00075DC2                            locret_723C6:
00075DC2 4E75                       		rts	
00075DC4                            ; End of function Sound_ChkValue
00075DC4                            
00075DC4                            ; ===========================================================================
00075DC4 00FF F100                  		dc.l $FFF100
00075DC8 00FF F1F0                  		dc.l $FFF1F0
00075DCC 00FF F250                  		dc.l $FFF250
00075DD0 00FF F310                  		dc.l $FFF310
00075DD4 00FF F340                  		dc.l $FFF340
00075DD8 00FF F370                  		dc.l $FFF370
00075DDC                            
00075DDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075DDC                            
00075DDC                            
00075DDC                            Snd_FadeOut1:				; XREF: Sound_E0
00075DDC 4216                       		clr.b	0(a6)
00075DDE 4BEE 0220                  		lea	$220(a6),a5
00075DE2 7E05                       		moveq	#5,d7
00075DE4                            
00075DE4                            loc_723EA:
00075DE4 4A15                       		tst.b	(a5)
00075DE6 6A00 0000                  		bpl.w	loc_72472
00075DEA 0895 0007                  		bclr	#7,(a5)
00075DEE 7600                       		moveq	#0,d3
00075DF0 162D 0001                  		move.b	1(a5),d3
00075DF4 6B00                       		bmi.s	loc_7243C
00075DF6 4EBA 0000                  		jsr	sub_726FE(pc)
00075DFA 0C03 0004                  		cmpi.b	#4,d3
00075DFE 6600                       		bne.s	loc_72416
00075E00 4A2E 0340                  		tst.b	$340(a6)
00075E04 6A00                       		bpl.s	loc_72416
00075E06 4BEE 0340                  		lea	$340(a6),a5
00075E0A 226E 0020                  		movea.l	$20(a6),a1
00075E0E 6000                       		bra.s	loc_72428
00075E10                            ; ===========================================================================
00075E10                            
00075E10                            loc_72416:
00075E10 5503                       		subq.b	#2,d3
00075E12 E50B                       		lsl.b	#2,d3
00075E14 41FA FEB2                  		lea	dword_722CC(pc),a0
00075E18 264D                       		movea.l	a5,a3
00075E1A 2A70 3000                  		movea.l	(a0,d3.w),a5
00075E1E 226E 0018                  		movea.l	$18(a6),a1
00075E22                            
00075E22                            loc_72428:
00075E22 0895 0002                  		bclr	#2,(a5)
00075E26 08D5 0001                  		bset	#1,(a5)
00075E2A 102D 000B                  		move.b	$B(a5),d0
00075E2E 4EBA 0000                  		jsr	sub_72C4E(pc)
00075E32 2A4B                       		movea.l	a3,a5
00075E34 6000                       		bra.s	loc_72472
00075E36                            ; ===========================================================================
00075E36                            
00075E36                            loc_7243C:
00075E36 4EBA 0000                  		jsr	sub_729A0(pc)
00075E3A 41EE 0370                  		lea	$370(a6),a0
00075E3E 0C03 00E0                  		cmpi.b	#$E0,d3
00075E42 6700                       		beq.s	loc_7245A
00075E44 0C03 00C0                  		cmpi.b	#$C0,d3
00075E48 6700                       		beq.s	loc_7245A
00075E4A E60B                       		lsr.b	#3,d3
00075E4C 41FA FE7A                  		lea	dword_722CC(pc),a0
00075E50 2070 3000                  		movea.l	(a0,d3.w),a0
00075E54                            
00075E54                            loc_7245A:
00075E54 0890 0002                  		bclr	#2,(a0)
00075E58 08D0 0001                  		bset	#1,(a0)
00075E5C 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00075E62 6600                       		bne.s	loc_72472
00075E64 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00075E6C                            
00075E6C                            loc_72472:
00075E6C DAFC 0030                  		adda.w	#$30,a5
00075E70 51CF FF72                  		dbf	d7,loc_723EA
00075E74                            
00075E74 4E75                       		rts	
00075E76                            ; End of function Snd_FadeOut1
00075E76                            
00075E76                            
00075E76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075E76                            
00075E76                            
00075E76                            Snd_FadeOut2:				; XREF: Sound_E0
00075E76 4BEE 0340                  		lea	$340(a6),a5
00075E7A 4A15                       		tst.b	(a5)
00075E7C 6A00                       		bpl.s	loc_724AE
00075E7E 0895 0007                  		bclr	#7,(a5)
00075E82 0815 0002                  		btst	#2,(a5)
00075E86 6600                       		bne.s	loc_724AE
00075E88 4EBA 0000                  		jsr	loc_7270A(pc)
00075E8C 4BEE 0100                  		lea	$100(a6),a5
00075E90 0895 0002                  		bclr	#2,(a5)
00075E94 08D5 0001                  		bset	#1,(a5)
00075E98 4A15                       		tst.b	(a5)
00075E9A 6A00                       		bpl.s	loc_724AE
00075E9C 226E 0018                  		movea.l	$18(a6),a1
00075EA0 102D 000B                  		move.b	$B(a5),d0
00075EA4 4EBA 0000                  		jsr	sub_72C4E(pc)
00075EA8                            
00075EA8                            loc_724AE:
00075EA8 4BEE 0370                  		lea	$370(a6),a5
00075EAC 4A15                       		tst.b	(a5)
00075EAE 6A00                       		bpl.s	locret_724E4
00075EB0 0895 0007                  		bclr	#7,(a5)
00075EB4 0815 0002                  		btst	#2,(a5)
00075EB8 6600                       		bne.s	locret_724E4
00075EBA 4EBA 0000                  		jsr	loc_729A6(pc)
00075EBE 4BEE 01F0                  		lea	$1F0(a6),a5
00075EC2 0895 0002                  		bclr	#2,(a5)
00075EC6 08D5 0001                  		bset	#1,(a5)
00075ECA 4A15                       		tst.b	(a5)
00075ECC 6A00                       		bpl.s	locret_724E4
00075ECE 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00075ED4 6600                       		bne.s	locret_724E4
00075ED6 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00075EDE                            
00075EDE                            locret_724E4:
00075EDE 4E75                       		rts	
00075EE0                            ; End of function Snd_FadeOut2
00075EE0                            
00075EE0                            ; ===========================================================================
00075EE0                            ; ---------------------------------------------------------------------------
00075EE0                            ; Fade out music
00075EE0                            ; ---------------------------------------------------------------------------
00075EE0                            
00075EE0                            Sound_E0:				; XREF: Sound_ExIndex
00075EE0 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00075EE4 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00075EE8 1D7C 0003 0006             		move.b	#3,6(a6)
00075EEE 1D7C 0028 0004             		move.b	#$28,4(a6)
00075EF4 422E 0040                  		clr.b	$40(a6)
00075EF8 422E 002A                  		clr.b	$2A(a6)
00075EFC 4E75                       		rts	
00075EFE                            
00075EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075EFE                            
00075EFE                            
00075EFE                            sub_72504:				; XREF: sub_71B4C
00075EFE 102E 0006                  		move.b	6(a6),d0
00075F02 6700                       		beq.s	loc_72510
00075F04 532E 0006                  		subq.b	#1,6(a6)
00075F08 4E75                       		rts	
00075F0A                            ; ===========================================================================
00075F0A                            
00075F0A                            loc_72510:
00075F0A 532E 0004                  		subq.b	#1,4(a6)
00075F0E 6700 0000                  		beq.w	Sound_E4
00075F12 1D7C 0003 0006             		move.b	#3,6(a6)
00075F18 4BEE 0070                  		lea	$70(a6),a5
00075F1C 7E05                       		moveq	#5,d7
00075F1E                            
00075F1E                            loc_72524:
00075F1E 4A15                       		tst.b	(a5)
00075F20 6A00                       		bpl.s	loc_72538
00075F22 522D 0009                  		addq.b	#1,9(a5)
00075F26 6A00                       		bpl.s	loc_72534
00075F28 0895 0007                  		bclr	#7,(a5)
00075F2C 6000                       		bra.s	loc_72538
00075F2E                            ; ===========================================================================
00075F2E                            
00075F2E                            loc_72534:
00075F2E 4EBA 0000                  		jsr	sub_72CB4(pc)
00075F32                            
00075F32                            loc_72538:
00075F32 DAFC 0030                  		adda.w	#$30,a5
00075F36 51CF FFE6                  		dbf	d7,loc_72524
00075F3A                            
00075F3A 7E02                       		moveq	#2,d7
00075F3C                            
00075F3C                            loc_72542:
00075F3C 4A15                       		tst.b	(a5)
00075F3E 6A00                       		bpl.s	loc_72560
00075F40 522D 0009                  		addq.b	#1,9(a5)
00075F44 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00075F4A 6500                       		bcs.s	loc_72558
00075F4C 0895 0007                  		bclr	#7,(a5)
00075F50 6000                       		bra.s	loc_72560
00075F52                            ; ===========================================================================
00075F52                            
00075F52                            loc_72558:
00075F52 1C2D 0009                  		move.b	9(a5),d6
00075F56 4EBA 0000                  		jsr	sub_7296A(pc)
00075F5A                            
00075F5A                            loc_72560:
00075F5A DAFC 0030                  		adda.w	#$30,a5
00075F5E 51CF FFDC                  		dbf	d7,loc_72542
00075F62                            
00075F62 4E75                       		rts	
00075F64                            ; End of function sub_72504
00075F64                            
00075F64                            
00075F64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F64                            
00075F64                            
00075F64                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00075F64 7602                       		moveq	#2,d3
00075F66 7028                       		moveq	#$28,d0
00075F68                            
00075F68                            loc_7256E:
00075F68 1203                       		move.b	d3,d1
00075F6A 4EBA 0000                  		jsr	sub_7272E(pc)
00075F6E 5801                       		addq.b	#4,d1
00075F70 4EBA 0000                  		jsr	sub_7272E(pc)
00075F74 51CB FFF2                  		dbf	d3,loc_7256E
00075F78                            
00075F78 7040                       		moveq	#$40,d0
00075F7A 727F                       		moveq	#$7F,d1
00075F7C 7802                       		moveq	#2,d4
00075F7E                            
00075F7E                            loc_72584:
00075F7E 7603                       		moveq	#3,d3
00075F80                            
00075F80                            loc_72586:
00075F80 4EBA 0000                  		jsr	sub_7272E(pc)
00075F84 4EBA 0000                  		jsr	sub_72764(pc)
00075F88 5840                       		addq.w	#4,d0
00075F8A 51CB FFF4                  		dbf	d3,loc_72586
00075F8E                            
00075F8E 0400 000F                  		subi.b	#$F,d0
00075F92 51CC FFEA                  		dbf	d4,loc_72584
00075F96                            
00075F96 4E75                       		rts	
00075F98                            ; End of function sub_7256A
00075F98                            
00075F98                            ; ===========================================================================
00075F98                            ; ---------------------------------------------------------------------------
00075F98                            ; Stop music
00075F98                            ; ---------------------------------------------------------------------------
00075F98                            
00075F98                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00075F98 702B                       		moveq	#$2B,d0
00075F9A 123C 0080                  		move.b	#$80,d1
00075F9E 4EBA 0000                  		jsr	sub_7272E(pc)
00075FA2 7027                       		moveq	#$27,d0
00075FA4 7200                       		moveq	#0,d1
00075FA6 4EBA 0000                  		jsr	sub_7272E(pc)
00075FAA 204E                       		movea.l	a6,a0
00075FAC 303C 00E3                  		move.w	#$E3,d0
00075FB0                            
00075FB0                            loc_725B6:
00075FB0 4298                       		clr.l	(a0)+
00075FB2 51C8 FFFC                  		dbf	d0,loc_725B6
00075FB6                            
00075FB6 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00075FBC 4EBA FFA6                  		jsr	sub_7256A(pc)
00075FC0 6000 0000                  		bra.w	sub_729B6
00075FC4                            
00075FC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075FC4                            
00075FC4                            
00075FC4                            sub_725CA:				; XREF: Sound_ChkValue
00075FC4 204E                       		movea.l	a6,a0
00075FC6 1216                       		move.b	0(a6),d1
00075FC8 142E 0027                  		move.b	$27(a6),d2
00075FCC 162E 002A                  		move.b	$2A(a6),d3
00075FD0 182E 0026                  		move.b	$26(a6),d4
00075FD4 3A2E 000A                  		move.w	$A(a6),d5
00075FD8 303C 0087                  		move.w	#$87,d0
00075FDC                            
00075FDC                            loc_725E4:
00075FDC 4298                       		clr.l	(a0)+
00075FDE 51C8 FFFC                  		dbf	d0,loc_725E4
00075FE2                            
00075FE2 1C81                       		move.b	d1,0(a6)
00075FE4 1D42 0027                  		move.b	d2,$27(a6)
00075FE8 1D43 002A                  		move.b	d3,$2A(a6)
00075FEC 1D44 0026                  		move.b	d4,$26(a6)
00075FF0 3D45 000A                  		move.w	d5,$A(a6)
00075FF4 1D7C 0080 0009             		move.b	#$80,9(a6)
00075FFA 4EBA FF68                  		jsr	sub_7256A(pc)
00075FFE 6000 0000                  		bra.w	sub_729B6
00076002                            ; End of function sub_725CA
00076002                            
00076002                            
00076002                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076002                            
00076002                            
00076002                            sub_7260C:				; XREF: sub_71B4C
00076002 1D6E 0002 0001             		move.b	2(a6),1(a6)
00076008 41EE 004E                  		lea	$4E(a6),a0
0007600C 7030                       		moveq	#$30,d0
0007600E 7209                       		moveq	#9,d1
00076010                            
00076010                            loc_7261A:
00076010 5210                       		addq.b	#1,(a0)
00076012 D0C0                       		adda.w	d0,a0
00076014 51C9 FFFA                  		dbf	d1,loc_7261A
00076018                            
00076018 4E75                       		rts	
0007601A                            ; End of function sub_7260C
0007601A                            
0007601A                            ; ===========================================================================
0007601A                            ; ---------------------------------------------------------------------------
0007601A                            ; Speed	up music
0007601A                            ; ---------------------------------------------------------------------------
0007601A                            
0007601A                            Sound_E2:				; XREF: Sound_ExIndex
0007601A 4A2E 0027                  		tst.b	$27(a6)
0007601E 6600                       		bne.s	loc_7263E
00076020 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00076026 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007602C 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00076032 4E75                       		rts	
00076034                            ; ===========================================================================
00076034                            
00076034                            loc_7263E:
00076034 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007603A 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00076040 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00076046 4E75                       		rts	
00076048                            ; ===========================================================================
00076048                            ; ---------------------------------------------------------------------------
00076048                            ; Change music back to normal speed
00076048                            ; ---------------------------------------------------------------------------
00076048                            
00076048                            Sound_E3:				; XREF: Sound_ExIndex
00076048 4A2E 0027                  		tst.b	$27(a6)
0007604C 6600                       		bne.s	loc_7266A
0007604E 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00076054 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007605A 422E 002A                  		clr.b	$2A(a6)
0007605E 4E75                       		rts	
00076060                            ; ===========================================================================
00076060                            
00076060                            loc_7266A:
00076060 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00076066 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007606C 422E 03CA                  		clr.b	$3CA(a6)
00076070 4E75                       		rts	
00076072                            
00076072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076072                            
00076072                            
00076072                            sub_7267C:				; XREF: sub_71B4C
00076072 4A2E 0025                  		tst.b	$25(a6)
00076076 6700                       		beq.s	loc_72688
00076078 532E 0025                  		subq.b	#1,$25(a6)
0007607C 4E75                       		rts	
0007607E                            ; ===========================================================================
0007607E                            
0007607E                            loc_72688:
0007607E 4A2E 0026                  		tst.b	$26(a6)
00076082 6700                       		beq.s	loc_726D6
00076084 532E 0026                  		subq.b	#1,$26(a6)
00076088 1D7C 0002 0025             		move.b	#2,$25(a6)
0007608E 4BEE 0070                  		lea	$70(a6),a5
00076092 7E05                       		moveq	#5,d7
00076094                            
00076094                            loc_7269E:
00076094 4A15                       		tst.b	(a5)
00076096 6A00                       		bpl.s	loc_726AA
00076098 532D 0009                  		subq.b	#1,9(a5)
0007609C 4EBA 0000                  		jsr	sub_72CB4(pc)
000760A0                            
000760A0                            loc_726AA:
000760A0 DAFC 0030                  		adda.w	#$30,a5
000760A4 51CF FFEE                  		dbf	d7,loc_7269E
000760A8 7E02                       		moveq	#2,d7
000760AA                            
000760AA                            loc_726B4:
000760AA 4A15                       		tst.b	(a5)
000760AC 6A00                       		bpl.s	loc_726CC
000760AE 532D 0009                  		subq.b	#1,9(a5)
000760B2 1C2D 0009                  		move.b	9(a5),d6
000760B6 0C06 0010                  		cmpi.b	#$10,d6
000760BA 6500                       		bcs.s	loc_726C8
000760BC 7C0F                       		moveq	#$F,d6
000760BE                            
000760BE                            loc_726C8:
000760BE 4EBA 0000                  		jsr	sub_7296A(pc)
000760C2                            
000760C2                            loc_726CC:
000760C2 DAFC 0030                  		adda.w	#$30,a5
000760C6 51CF FFE2                  		dbf	d7,loc_726B4
000760CA 4E75                       		rts	
000760CC                            ; ===========================================================================
000760CC                            
000760CC                            loc_726D6:
000760CC 08AE 0002 0040             		bclr	#2,$40(a6)
000760D2 422E 0024                  		clr.b	$24(a6)
000760D6 4E75                       		rts	
000760D8                            ; End of function sub_7267C
000760D8                            
000760D8                            ; ===========================================================================
000760D8                            
000760D8                            loc_726E2:				; XREF: sub_71CCA
000760D8 0815 0001                  		btst	#1,(a5)
000760DC 6600                       		bne.s	locret_726FC
000760DE 0815 0002                  		btst	#2,(a5)
000760E2 6600                       		bne.s	locret_726FC
000760E4 7028                       		moveq	#$28,d0
000760E6 122D 0001                  		move.b	1(a5),d1
000760EA 0001 00F0                  		ori.b	#-$10,d1
000760EE 6000 0000                  		bra.w	sub_7272E
000760F2                            ; ===========================================================================
000760F2                            
000760F2                            locret_726FC:
000760F2 4E75                       		rts	
000760F4                            
000760F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000760F4                            
000760F4                            
000760F4                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000760F4 0815 0004                  		btst	#4,(a5)
000760F8 6600                       		bne.s	locret_72714
000760FA 0815 0002                  		btst	#2,(a5)
000760FE 6600                       		bne.s	locret_72714
00076100                            
00076100                            loc_7270A:				; XREF: Snd_FadeOut2
00076100 7028                       		moveq	#$28,d0
00076102 122D 0001                  		move.b	1(a5),d1
00076106 6000 0000                  		bra.w	sub_7272E
0007610A                            ; ===========================================================================
0007610A                            
0007610A                            locret_72714:
0007610A 4E75                       		rts	
0007610C                            ; End of function sub_726FE
0007610C                            
0007610C                            ; ===========================================================================
0007610C                            
0007610C                            loc_72716:				; XREF: sub_72A5A
0007610C 0815 0002                  		btst	#2,(a5)
00076110 6600                       		bne.s	locret_72720
00076112 6000 0000                  		bra.w	sub_72722
00076116                            ; ===========================================================================
00076116                            
00076116                            locret_72720:
00076116 4E75                       		rts	
00076118                            
00076118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076118                            
00076118                            
00076118                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00076118 082D 0002 0001             		btst	#2,1(a5)
0007611E 6600                       		bne.s	loc_7275A
00076120 D02D 0001                  		add.b	1(a5),d0
00076124                            ; End of function sub_72722
00076124                            
00076124                            
00076124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076124                            
00076124                            
00076124                            sub_7272E:				; XREF: loc_71E6A
00076124 1439 00A0 4000             		move.b	($A04000).l,d2
0007612A 0802 0007                  		btst	#7,d2
0007612E 66F4                       		bne.s	sub_7272E
00076130 13C0 00A0 4000             		move.b	d0,($A04000).l
00076136 4E71                       		nop	
00076138 4E71                       		nop	
0007613A 4E71                       		nop	
0007613C                            
0007613C                            loc_72746:
0007613C 1439 00A0 4000             		move.b	($A04000).l,d2
00076142 0802 0007                  		btst	#7,d2
00076146 66F4                       		bne.s	loc_72746
00076148                            
00076148 13C1 00A0 4001             		move.b	d1,($A04001).l
0007614E 4E75                       		rts	
00076150                            ; End of function sub_7272E
00076150                            
00076150                            ; ===========================================================================
00076150                            
00076150                            loc_7275A:				; XREF: sub_72722
00076150 142D 0001                  		move.b	1(a5),d2
00076154 0882 0002                  		bclr	#2,d2
00076158 D002                       		add.b	d2,d0
0007615A                            
0007615A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007615A                            
0007615A                            
0007615A                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007615A 1439 00A0 4000             		move.b	($A04000).l,d2
00076160 0802 0007                  		btst	#7,d2
00076164 66F4                       		bne.s	sub_72764
00076166 13C0 00A0 4002             		move.b	d0,($A04002).l
0007616C 4E71                       		nop	
0007616E 4E71                       		nop	
00076170 4E71                       		nop	
00076172                            
00076172                            loc_7277C:
00076172 1439 00A0 4000             		move.b	($A04000).l,d2
00076178 0802 0007                  		btst	#7,d2
0007617C 66F4                       		bne.s	loc_7277C
0007617E                            
0007617E 13C1 00A0 4003             		move.b	d1,($A04003).l
00076184 4E75                       		rts	
00076186                            ; End of function sub_72764
00076186                            
00076186                            ; ===========================================================================
00076186 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00076198 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000761AA 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000761BA 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000761CA 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000761DA 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000761EA 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000761FA 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007620A 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007621A 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007622A 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007623A 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00076246                            
00076246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076246                            
00076246                            
00076246                            sub_72850:				; XREF: sub_71B4C
00076246 532D 000E                  		subq.b	#1,$E(a5)
0007624A 6600                       		bne.s	loc_72866
0007624C 0895 0004                  		bclr	#4,(a5)
00076250 4EBA 0000                  		jsr	sub_72878(pc)
00076254 4EBA 0000                  		jsr	sub_728DC(pc)
00076258 6000 0000                  		bra.w	loc_7292E
0007625C                            ; ===========================================================================
0007625C                            
0007625C                            loc_72866:
0007625C 4EBA F45A                  		jsr	sub_71D9E(pc)
00076260 4EBA 0000                  		jsr	sub_72926(pc)
00076264 4EBA F47A                  		jsr	sub_71DC6(pc)
00076268 4EBA 0000                  		jsr	sub_728E2(pc)
0007626C 4E75                       		rts	
0007626E                            ; End of function sub_72850
0007626E                            
0007626E                            
0007626E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007626E                            
0007626E                            
0007626E                            sub_72878:				; XREF: sub_72850
0007626E 0895 0001                  		bclr	#1,(a5)
00076272 286D 0004                  		movea.l	4(a5),a4
00076276                            
00076276                            loc_72880:
00076276 7A00                       		moveq	#0,d5
00076278 1A1C                       		move.b	(a4)+,d5
0007627A 0C05 00E0                  		cmpi.b	#$E0,d5
0007627E 6500                       		bcs.s	loc_72890
00076280 4EBA 0000                  		jsr	sub_72A5A(pc)
00076284 60F0                       		bra.s	loc_72880
00076286                            ; ===========================================================================
00076286                            
00076286                            loc_72890:
00076286 4A05                       		tst.b	d5
00076288 6A00                       		bpl.s	loc_728A4
0007628A 4EBA 0000                  		jsr	sub_728AC(pc)
0007628E 1A1C                       		move.b	(a4)+,d5
00076290 4A05                       		tst.b	d5
00076292 6A00                       		bpl.s	loc_728A4
00076294 534C                       		subq.w	#1,a4
00076296 6000 F3E2                  		bra.w	sub_71D60
0007629A                            ; ===========================================================================
0007629A                            
0007629A                            loc_728A4:
0007629A 4EBA F3BE                  		jsr	sub_71D40(pc)
0007629E 6000 F3DA                  		bra.w	sub_71D60
000762A2                            ; End of function sub_72878
000762A2                            
000762A2                            
000762A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762A2                            
000762A2                            
000762A2                            sub_728AC:				; XREF: sub_72878
000762A2 0405 0081                  		subi.b	#$81,d5
000762A6 6500                       		bcs.s	loc_728CA
000762A8 DA2D 0008                  		add.b	8(a5),d5
000762AC 0245 007F                  		andi.w	#$7F,d5
000762B0 E34D                       		lsl.w	#1,d5
000762B2 41FA 0000                  		lea	word_729CE(pc),a0
000762B6 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000762BC 6000 F3BC                  		bra.w	sub_71D60
000762C0                            ; ===========================================================================
000762C0                            
000762C0                            loc_728CA:
000762C0 08D5 0001                  		bset	#1,(a5)
000762C4 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000762CA 4EBA F3AE                  		jsr	sub_71D60(pc)
000762CE 6000 0000                  		bra.w	sub_729A0
000762D2                            ; End of function sub_728AC
000762D2                            
000762D2                            
000762D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762D2                            
000762D2                            
000762D2                            sub_728DC:				; XREF: sub_72850
000762D2 3C2D 0010                  		move.w	$10(a5),d6
000762D6 6B00                       		bmi.s	loc_72920
000762D8                            ; End of function sub_728DC
000762D8                            
000762D8                            
000762D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762D8                            
000762D8                            
000762D8                            sub_728E2:				; XREF: sub_72850
000762D8 102D 001E                  		move.b	$1E(a5),d0
000762DC 4880                       		ext.w	d0
000762DE DC40                       		add.w	d0,d6
000762E0 0815 0002                  		btst	#2,(a5)
000762E4 6600                       		bne.s	locret_7291E
000762E6 0815 0001                  		btst	#1,(a5)
000762EA 6600                       		bne.s	locret_7291E
000762EC 102D 0001                  		move.b	1(a5),d0
000762F0 0C00 00E0                  		cmpi.b	#$E0,d0
000762F4 6600                       		bne.s	loc_72904
000762F6 103C 00C0                  		move.b	#$C0,d0
000762FA                            
000762FA                            loc_72904:
000762FA 3206                       		move.w	d6,d1
000762FC 0201 000F                  		andi.b	#$F,d1
00076300 8001                       		or.b	d1,d0
00076302 E84E                       		lsr.w	#4,d6
00076304 0206 003F                  		andi.b	#$3F,d6
00076308 13C0 00C0 0011             		move.b	d0,($C00011).l
0007630E 13C6 00C0 0011             		move.b	d6,($C00011).l
00076314                            
00076314                            locret_7291E:
00076314 4E75                       		rts	
00076316                            ; End of function sub_728E2
00076316                            
00076316                            ; ===========================================================================
00076316                            
00076316                            loc_72920:				; XREF: sub_728DC
00076316 08D5 0001                  		bset	#1,(a5)
0007631A 4E75                       		rts	
0007631C                            
0007631C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007631C                            
0007631C                            
0007631C                            sub_72926:				; XREF: sub_72850
0007631C 4A2D 000B                  		tst.b	$B(a5)
00076320 6700 0000                  		beq.w	locret_7298A
00076324                            
00076324                            loc_7292E:				; XREF: sub_72850
00076324 1C2D 0009                  		move.b	9(a5),d6
00076328 7000                       		moveq	#0,d0
0007632A 102D 000B                  		move.b	$B(a5),d0
0007632E 6700                       		beq.s	sub_7296A
00076330 2079 0007 528E             		movea.l	(Go_PSGIndex).l,a0
00076336 5340                       		subq.w	#1,d0
00076338 E548                       		lsl.w	#2,d0
0007633A 2070 0000                  		movea.l	(a0,d0.w),a0
0007633E 102D 000C                  		move.b	$C(a5),d0
00076342 1030 0000                  		move.b	(a0,d0.w),d0
00076346 522D 000C                  		addq.b	#1,$C(a5)
0007634A 0800 0007                  		btst	#7,d0
0007634E 6700                       		beq.s	loc_72960
00076350 0C00 0080                  		cmpi.b	#$80,d0
00076354 6700                       		beq.s	loc_7299A
00076356                            
00076356                            loc_72960:
00076356 DC40                       		add.w	d0,d6
00076358 0C06 0010                  		cmpi.b	#$10,d6
0007635C 6500                       		bcs.s	sub_7296A
0007635E 7C0F                       		moveq	#$F,d6
00076360                            ; End of function sub_72926
00076360                            
00076360                            
00076360                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076360                            
00076360                            
00076360                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00076360 0815 0001                  		btst	#1,(a5)
00076364 6600                       		bne.s	locret_7298A
00076366 0815 0002                  		btst	#2,(a5)
0007636A 6600                       		bne.s	locret_7298A
0007636C 0815 0004                  		btst	#4,(a5)
00076370 6600                       		bne.s	loc_7298C
00076372                            
00076372                            loc_7297C:
00076372 8C2D 0001                  		or.b	1(a5),d6
00076376 0606 0010                  		addi.b	#$10,d6
0007637A 13C6 00C0 0011             		move.b	d6,($C00011).l
00076380                            
00076380                            locret_7298A:
00076380 4E75                       		rts	
00076382                            ; ===========================================================================
00076382                            
00076382                            loc_7298C:
00076382 4A2D 0013                  		tst.b	$13(a5)
00076386 67EA                       		beq.s	loc_7297C
00076388 4A2D 0012                  		tst.b	$12(a5)
0007638C 66E4                       		bne.s	loc_7297C
0007638E 4E75                       		rts	
00076390                            ; End of function sub_7296A
00076390                            
00076390                            ; ===========================================================================
00076390                            
00076390                            loc_7299A:				; XREF: sub_72926
00076390 532D 000C                  		subq.b	#1,$C(a5)
00076394 4E75                       		rts	
00076396                            
00076396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076396                            
00076396                            
00076396                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00076396 0815 0002                  		btst	#2,(a5)
0007639A 6600                       		bne.s	locret_729B4
0007639C                            
0007639C                            loc_729A6:				; XREF: Snd_FadeOut2
0007639C 102D 0001                  		move.b	1(a5),d0
000763A0 0000 001F                  		ori.b	#$1F,d0
000763A4 13C0 00C0 0011             		move.b	d0,($C00011).l
000763AA                            
000763AA                            locret_729B4:
000763AA 4E75                       		rts	
000763AC                            ; End of function sub_729A0
000763AC                            
000763AC                            
000763AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000763AC                            
000763AC                            
000763AC                            sub_729B6:				; XREF: loc_71E7C
000763AC 41F9 00C0 0011             		lea	($C00011).l,a0
000763B2 10BC 009F                  		move.b	#$9F,(a0)
000763B6 10BC 00BF                  		move.b	#$BF,(a0)
000763BA 10BC 00DF                  		move.b	#$DF,(a0)
000763BE 10BC 00FF                  		move.b	#$FF,(a0)
000763C2 4E75                       		rts	
000763C4                            ; End of function sub_729B6
000763C4                            
000763C4                            ; ===========================================================================
000763C4 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000763D6 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000763E8 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000763FC 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00076410 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00076424 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00076438 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007644C 0011 0000                  		dc.w $11, 0
00076450                            
00076450                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076450                            
00076450                            
00076450                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00076450 0445 00E0                  		subi.w	#$E0,d5
00076454 E54D                       		lsl.w	#2,d5
00076456 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007645A                            ; End of function sub_72A5A
0007645A                            
0007645A                            ; ===========================================================================
0007645A                            
0007645A                            loc_72A64:
0007645A 6000 0000                  		bra.w	loc_72ACC
0007645E                            ; ===========================================================================
0007645E 6000 0000                  		bra.w	loc_72AEC
00076462                            ; ===========================================================================
00076462 6000 0000                  		bra.w	loc_72AF2
00076466                            ; ===========================================================================
00076466 6000 0000                  		bra.w	loc_72AF8
0007646A                            ; ===========================================================================
0007646A 6000 0000                  		bra.w	loc_72B14
0007646E                            ; ===========================================================================
0007646E 6000 0000                  		bra.w	loc_72B9E
00076472                            ; ===========================================================================
00076472 6000 0000                  		bra.w	loc_72BA4
00076476                            ; ===========================================================================
00076476 6000 0000                  		bra.w	loc_72BAE
0007647A                            ; ===========================================================================
0007647A 6000 0000                  		bra.w	loc_72BB4
0007647E                            ; ===========================================================================
0007647E 6000 0000                  		bra.w	loc_72BBE
00076482                            ; ===========================================================================
00076482 6000 0000                  		bra.w	loc_72BC6
00076486                            ; ===========================================================================
00076486 6000 0000                  		bra.w	loc_72BD0
0007648A                            ; ===========================================================================
0007648A 6000 0000                  		bra.w	loc_72BE6
0007648E                            ; ===========================================================================
0007648E 6000 0000                  		bra.w	loc_72BEE
00076492                            ; ===========================================================================
00076492 6000 0000                  		bra.w	loc_72BF4
00076496                            ; ===========================================================================
00076496 6000 0000                  		bra.w	loc_72C26
0007649A                            ; ===========================================================================
0007649A 6000 0000                  		bra.w	loc_72D30
0007649E                            ; ===========================================================================
0007649E 6000 0000                  		bra.w	loc_72D52
000764A2                            ; ===========================================================================
000764A2 6000 0000                  		bra.w	loc_72D58
000764A6                            ; ===========================================================================
000764A6 6000 0000                  		bra.w	loc_72E06
000764AA                            ; ===========================================================================
000764AA 6000 0000                  		bra.w	loc_72E20
000764AE                            ; ===========================================================================
000764AE 6000 0000                  		bra.w	loc_72E26
000764B2                            ; ===========================================================================
000764B2 6000 0000                  		bra.w	loc_72E2C
000764B6                            ; ===========================================================================
000764B6 6000 0000                  		bra.w	loc_72E38
000764BA                            ; ===========================================================================
000764BA 6000 0000                  		bra.w	loc_72E52
000764BE                            ; ===========================================================================
000764BE 6000 0000                  		bra.w	loc_72E64
000764C2                            ; ===========================================================================
000764C2                            
000764C2                            loc_72ACC:				; XREF: loc_72A64
000764C2 121C                       		move.b	(a4)+,d1
000764C4 4A2D 0001                  		tst.b	1(a5)
000764C8 6B00                       		bmi.s	locret_72AEA
000764CA 102D 000A                  		move.b	$A(a5),d0
000764CE 0200 0037                  		andi.b	#$37,d0
000764D2 8200                       		or.b	d0,d1
000764D4 1B41 000A                  		move.b	d1,$A(a5)
000764D8 103C 00B4                  		move.b	#$B4,d0
000764DC 6000 FC2E                  		bra.w	loc_72716
000764E0                            ; ===========================================================================
000764E0                            
000764E0                            locret_72AEA:
000764E0 4E75                       		rts	
000764E2                            ; ===========================================================================
000764E2                            
000764E2                            loc_72AEC:				; XREF: loc_72A64
000764E2 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000764E6 4E75                       		rts	
000764E8                            ; ===========================================================================
000764E8                            
000764E8                            loc_72AF2:				; XREF: loc_72A64
000764E8 1D5C 0007                  		move.b	(a4)+,7(a6)
000764EC 4E75                       		rts	
000764EE                            ; ===========================================================================
000764EE                            
000764EE                            loc_72AF8:				; XREF: loc_72A64
000764EE 7000                       		moveq	#0,d0
000764F0 102D 000D                  		move.b	$D(a5),d0
000764F4 2875 0000                  		movea.l	(a5,d0.w),a4
000764F8 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00076500 544C                       		addq.w	#2,a4
00076502 5800                       		addq.b	#4,d0
00076504 1B40 000D                  		move.b	d0,$D(a5)
00076508 4E75                       		rts	
0007650A                            ; ===========================================================================
0007650A                            
0007650A                            loc_72B14:				; XREF: loc_72A64
0007650A 204E                       		movea.l	a6,a0
0007650C 43EE 03A0                  		lea	$3A0(a6),a1
00076510 303C 0087                  		move.w	#$87,d0
00076514                            
00076514                            loc_72B1E:
00076514 20D9                       		move.l	(a1)+,(a0)+
00076516 51C8 FFFC                  		dbf	d0,loc_72B1E
0007651A                            
0007651A 08EE 0002 0040             		bset	#2,$40(a6)
00076520 264D                       		movea.l	a5,a3
00076522 1C3C 0028                  		move.b	#$28,d6
00076526 9C2E 0026                  		sub.b	$26(a6),d6
0007652A 7E05                       		moveq	#5,d7
0007652C 4BEE 0070                  		lea	$70(a6),a5
00076530                            
00076530                            loc_72B3A:
00076530 0815 0007                  		btst	#7,(a5)
00076534 6700                       		beq.s	loc_72B5C
00076536 08D5 0001                  		bset	#1,(a5)
0007653A DD2D 0009                  		add.b	d6,9(a5)
0007653E 0815 0002                  		btst	#2,(a5)
00076542 6600                       		bne.s	loc_72B5C
00076544 7000                       		moveq	#0,d0
00076546 102D 000B                  		move.b	$B(a5),d0
0007654A 226E 0018                  		movea.l	$18(a6),a1
0007654E 4EBA 0000                  		jsr	sub_72C4E(pc)
00076552                            
00076552                            loc_72B5C:
00076552 DAFC 0030                  		adda.w	#$30,a5
00076556 51CF FFD8                  		dbf	d7,loc_72B3A
0007655A                            
0007655A 7E02                       		moveq	#2,d7
0007655C                            
0007655C                            loc_72B66:
0007655C 0815 0007                  		btst	#7,(a5)
00076560 6700                       		beq.s	loc_72B78
00076562 08D5 0001                  		bset	#1,(a5)
00076566 4EBA FE2E                  		jsr	sub_729A0(pc)
0007656A DD2D 0009                  		add.b	d6,9(a5)
0007656E                            
0007656E                            loc_72B78:
0007656E DAFC 0030                  		adda.w	#$30,a5
00076572 51CF FFE8                  		dbf	d7,loc_72B66
00076576 2A4B                       		movea.l	a3,a5
00076578 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007657E 1D7C 0028 0026             		move.b	#$28,$26(a6)
00076584 422E 0027                  		clr.b	$27(a6)
00076588 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00076590 504F                       		addq.w	#8,sp
00076592 4E75                       		rts	
00076594                            ; ===========================================================================
00076594                            
00076594                            loc_72B9E:				; XREF: loc_72A64
00076594 1B5C 0002                  		move.b	(a4)+,2(a5)
00076598 4E75                       		rts	
0007659A                            ; ===========================================================================
0007659A                            
0007659A                            loc_72BA4:				; XREF: loc_72A64
0007659A 101C                       		move.b	(a4)+,d0
0007659C D12D 0009                  		add.b	d0,9(a5)
000765A0 6000 0000                  		bra.w	sub_72CB4
000765A4                            ; ===========================================================================
000765A4                            
000765A4                            loc_72BAE:				; XREF: loc_72A64
000765A4 08D5 0004                  		bset	#4,(a5)
000765A8 4E75                       		rts	
000765AA                            ; ===========================================================================
000765AA                            
000765AA                            loc_72BB4:				; XREF: loc_72A64
000765AA 1B54 0012                  		move.b	(a4),$12(a5)
000765AE 1B5C 0013                  		move.b	(a4)+,$13(a5)
000765B2 4E75                       		rts	
000765B4                            ; ===========================================================================
000765B4                            
000765B4                            loc_72BBE:				; XREF: loc_72A64
000765B4 101C                       		move.b	(a4)+,d0
000765B6 D12D 0008                  		add.b	d0,8(a5)
000765BA 4E75                       		rts	
000765BC                            ; ===========================================================================
000765BC                            
000765BC                            loc_72BC6:				; XREF: loc_72A64
000765BC 1D54 0002                  		move.b	(a4),2(a6)
000765C0 1D5C 0001                  		move.b	(a4)+,1(a6)
000765C4 4E75                       		rts	
000765C6                            ; ===========================================================================
000765C6                            
000765C6                            loc_72BD0:				; XREF: loc_72A64
000765C6 41EE 0040                  		lea	$40(a6),a0
000765CA 101C                       		move.b	(a4)+,d0
000765CC 7230                       		moveq	#$30,d1
000765CE 7409                       		moveq	#9,d2
000765D0                            
000765D0                            loc_72BDA:
000765D0 1140 0002                  		move.b	d0,2(a0)
000765D4 D0C1                       		adda.w	d1,a0
000765D6 51CA FFF8                  		dbf	d2,loc_72BDA
000765DA                            
000765DA 4E75                       		rts	
000765DC                            ; ===========================================================================
000765DC                            
000765DC                            loc_72BE6:				; XREF: loc_72A64
000765DC 101C                       		move.b	(a4)+,d0
000765DE D12D 0009                  		add.b	d0,9(a5)
000765E2 4E75                       		rts	
000765E4                            ; ===========================================================================
000765E4                            
000765E4                            loc_72BEE:				; XREF: loc_72A64
000765E4 422E 002C                  		clr.b	$2C(a6)
000765E8 4E75                       		rts	
000765EA                            ; ===========================================================================
000765EA                            
000765EA                            loc_72BF4:				; XREF: loc_72A64
000765EA 0895 0007                  		bclr	#7,(a5)
000765EE 0895 0004                  		bclr	#4,(a5)
000765F2 4EBA FB00                  		jsr	sub_726FE(pc)
000765F6 4A2E 0250                  		tst.b	$250(a6)
000765FA 6B00                       		bmi.s	loc_72C22
000765FC 264D                       		movea.l	a5,a3
000765FE 4BEE 0100                  		lea	$100(a6),a5
00076602 226E 0018                  		movea.l	$18(a6),a1
00076606 0895 0002                  		bclr	#2,(a5)
0007660A 08D5 0001                  		bset	#1,(a5)
0007660E 102D 000B                  		move.b	$B(a5),d0
00076612 4EBA 0000                  		jsr	sub_72C4E(pc)
00076616 2A4B                       		movea.l	a3,a5
00076618                            
00076618                            loc_72C22:
00076618 504F                       		addq.w	#8,sp
0007661A 4E75                       		rts	
0007661C                            ; ===========================================================================
0007661C                            
0007661C                            loc_72C26:				; XREF: loc_72A64
0007661C 7000                       		moveq	#0,d0
0007661E 101C                       		move.b	(a4)+,d0
00076620 1B40 000B                  		move.b	d0,$B(a5)
00076624 0815 0002                  		btst	#2,(a5)
00076628 6600 0000                  		bne.w	locret_72CAA
0007662C 226E 0018                  		movea.l	$18(a6),a1
00076630 4A2E 000E                  		tst.b	$E(a6)
00076634 6700                       		beq.s	sub_72C4E
00076636 226D 0020                  		movea.l	$20(a5),a1
0007663A 4A2E 000E                  		tst.b	$E(a6)
0007663E 6B00                       		bmi.s	sub_72C4E
00076640 226E 0020                  		movea.l	$20(a6),a1
00076644                            
00076644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076644                            
00076644                            
00076644                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00076644 5340                       		subq.w	#1,d0
00076646 6B00                       		bmi.s	loc_72C5C
00076648 323C 0019                  		move.w	#$19,d1
0007664C                            
0007664C                            loc_72C56:
0007664C D2C1                       		adda.w	d1,a1
0007664E 51C8 FFFC                  		dbf	d0,loc_72C56
00076652                            
00076652                            loc_72C5C:
00076652 1219                       		move.b	(a1)+,d1
00076654 1B41 001F                  		move.b	d1,$1F(a5)
00076658 1801                       		move.b	d1,d4
0007665A 103C 00B0                  		move.b	#$B0,d0
0007665E 4EBA FAB8                  		jsr	sub_72722(pc)
00076662 45FA 0000                  		lea	byte_72D18(pc),a2
00076666 7613                       		moveq	#$13,d3
00076668                            
00076668                            loc_72C72:
00076668 101A                       		move.b	(a2)+,d0
0007666A 1219                       		move.b	(a1)+,d1
0007666C 4EBA FAAA                  		jsr	sub_72722(pc)
00076670 51CB FFF6                  		dbf	d3,loc_72C72
00076674 7A03                       		moveq	#3,d5
00076676 0244 0007                  		andi.w	#7,d4
0007667A 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007667E 162D 0009                  		move.b	9(a5),d3
00076682                            
00076682                            loc_72C8C:
00076682 101A                       		move.b	(a2)+,d0
00076684 1219                       		move.b	(a1)+,d1
00076686 E20C                       		lsr.b	#1,d4
00076688 6400                       		bcc.s	loc_72C96
0007668A D203                       		add.b	d3,d1
0007668C                            
0007668C                            loc_72C96:
0007668C 4EBA FA8A                  		jsr	sub_72722(pc)
00076690 51CD FFF0                  		dbf	d5,loc_72C8C
00076694 103C 00B4                  		move.b	#$B4,d0
00076698 122D 000A                  		move.b	$A(a5),d1
0007669C 4EBA FA7A                  		jsr	sub_72722(pc)
000766A0                            
000766A0                            locret_72CAA:
000766A0 4E75                       		rts	
000766A2                            ; End of function sub_72C4E
000766A2                            
000766A2                            ; ===========================================================================
000766A2 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000766AA                            
000766AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000766AA                            
000766AA                            
000766AA                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000766AA 0815 0002                  		btst	#2,(a5)
000766AE 6600                       		bne.s	locret_72D16
000766B0 7000                       		moveq	#0,d0
000766B2 102D 000B                  		move.b	$B(a5),d0
000766B6 226E 0018                  		movea.l	$18(a6),a1
000766BA 4A2E 000E                  		tst.b	$E(a6)
000766BE 6700                       		beq.s	loc_72CD8
000766C0 226E 0020                  		movea.l	$20(a6),a1
000766C4 4A2E 000E                  		tst.b	$E(a6)
000766C8 6B00                       		bmi.s	loc_72CD8
000766CA 226E 0020                  		movea.l	$20(a6),a1
000766CE                            
000766CE                            loc_72CD8:
000766CE 5340                       		subq.w	#1,d0
000766D0 6B00                       		bmi.s	loc_72CE6
000766D2 323C 0019                  		move.w	#$19,d1
000766D6                            
000766D6                            loc_72CE0:
000766D6 D2C1                       		adda.w	d1,a1
000766D8 51C8 FFFC                  		dbf	d0,loc_72CE0
000766DC                            
000766DC                            loc_72CE6:
000766DC D2FC 0015                  		adda.w	#$15,a1
000766E0 45FA 0000                  		lea	byte_72D2C(pc),a2
000766E4 102D 001F                  		move.b	$1F(a5),d0
000766E8 0240 0007                  		andi.w	#7,d0
000766EC 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000766F0 162D 0009                  		move.b	9(a5),d3
000766F4 6B00                       		bmi.s	locret_72D16
000766F6 7A03                       		moveq	#3,d5
000766F8                            
000766F8                            loc_72D02:
000766F8 101A                       		move.b	(a2)+,d0
000766FA 1219                       		move.b	(a1)+,d1
000766FC E20C                       		lsr.b	#1,d4
000766FE 6400                       		bcc.s	loc_72D12
00076700 D203                       		add.b	d3,d1
00076702 6500                       		bcs.s	loc_72D12
00076704 4EBA FA12                  		jsr	sub_72722(pc)
00076708                            
00076708                            loc_72D12:
00076708 51CD FFEE                  		dbf	d5,loc_72D02
0007670C                            
0007670C                            locret_72D16:
0007670C 4E75                       		rts	
0007670E                            ; End of function sub_72CB4
0007670E                            
0007670E                            ; ===========================================================================
0007670E 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00076718 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00076722 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00076726                            ; ===========================================================================
00076726                            
00076726                            loc_72D30:				; XREF: loc_72A64
00076726 08D5 0003                  		bset	#3,(a5)
0007672A 2B4C 0014                  		move.l	a4,$14(a5)
0007672E 1B5C 0018                  		move.b	(a4)+,$18(a5)
00076732 1B5C 0019                  		move.b	(a4)+,$19(a5)
00076736 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007673A 101C                       		move.b	(a4)+,d0
0007673C E208                       		lsr.b	#1,d0
0007673E 1B40 001B                  		move.b	d0,$1B(a5)
00076742 426D 001C                  		clr.w	$1C(a5)
00076746 4E75                       		rts	
00076748                            ; ===========================================================================
00076748                            
00076748                            loc_72D52:				; XREF: loc_72A64
00076748 08D5 0003                  		bset	#3,(a5)
0007674C 4E75                       		rts	
0007674E                            ; ===========================================================================
0007674E                            
0007674E                            loc_72D58:				; XREF: loc_72A64
0007674E 0895 0007                  		bclr	#7,(a5)
00076752 0895 0004                  		bclr	#4,(a5)
00076756 4A2D 0001                  		tst.b	1(a5)
0007675A 6B00                       		bmi.s	loc_72D74
0007675C 4A2E 0008                  		tst.b	8(a6)
00076760 6B00 0000                  		bmi.w	loc_72E02
00076764 4EBA F98E                  		jsr	sub_726FE(pc)
00076768 6000                       		bra.s	loc_72D78
0007676A                            ; ===========================================================================
0007676A                            
0007676A                            loc_72D74:
0007676A 4EBA FC2A                  		jsr	sub_729A0(pc)
0007676E                            
0007676E                            loc_72D78:
0007676E 4A2E 000E                  		tst.b	$E(a6)
00076772 6A00 0000                  		bpl.w	loc_72E02
00076776 4216                       		clr.b	0(a6)
00076778 7000                       		moveq	#0,d0
0007677A 102D 0001                  		move.b	1(a5),d0
0007677E 6B00                       		bmi.s	loc_72DCC
00076780 41FA F546                  		lea	dword_722CC(pc),a0
00076784 264D                       		movea.l	a5,a3
00076786 0C00 0004                  		cmpi.b	#4,d0
0007678A 6600                       		bne.s	loc_72DA8
0007678C 4A2E 0340                  		tst.b	$340(a6)
00076790 6A00                       		bpl.s	loc_72DA8
00076792 4BEE 0340                  		lea	$340(a6),a5
00076796 226E 0020                  		movea.l	$20(a6),a1
0007679A 6000                       		bra.s	loc_72DB8
0007679C                            ; ===========================================================================
0007679C                            
0007679C                            loc_72DA8:
0007679C 5500                       		subq.b	#2,d0
0007679E E508                       		lsl.b	#2,d0
000767A0 2A70 0000                  		movea.l	(a0,d0.w),a5
000767A4 4A15                       		tst.b	(a5)
000767A6 6A00                       		bpl.s	loc_72DC8
000767A8 226E 0018                  		movea.l	$18(a6),a1
000767AC                            
000767AC                            loc_72DB8:
000767AC 0895 0002                  		bclr	#2,(a5)
000767B0 08D5 0001                  		bset	#1,(a5)
000767B4 102D 000B                  		move.b	$B(a5),d0
000767B8 4EBA FE8A                  		jsr	sub_72C4E(pc)
000767BC                            
000767BC                            loc_72DC8:
000767BC 2A4B                       		movea.l	a3,a5
000767BE 6000                       		bra.s	loc_72E02
000767C0                            ; ===========================================================================
000767C0                            
000767C0                            loc_72DCC:
000767C0 41EE 0370                  		lea	$370(a6),a0
000767C4 4A10                       		tst.b	(a0)
000767C6 6A00                       		bpl.s	loc_72DE0
000767C8 0C00 00E0                  		cmpi.b	#$E0,d0
000767CC 6700                       		beq.s	loc_72DEA
000767CE 0C00 00C0                  		cmpi.b	#$C0,d0
000767D2 6700                       		beq.s	loc_72DEA
000767D4                            
000767D4                            loc_72DE0:
000767D4 41FA F4F2                  		lea	dword_722CC(pc),a0
000767D8 E608                       		lsr.b	#3,d0
000767DA 2070 0000                  		movea.l	(a0,d0.w),a0
000767DE                            
000767DE                            loc_72DEA:
000767DE 0890 0002                  		bclr	#2,(a0)
000767E2 08D0 0001                  		bset	#1,(a0)
000767E6 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000767EC 6600                       		bne.s	loc_72E02
000767EE 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000767F6                            
000767F6                            loc_72E02:
000767F6 504F                       		addq.w	#8,sp
000767F8 4E75                       		rts	
000767FA                            ; ===========================================================================
000767FA                            
000767FA                            loc_72E06:				; XREF: loc_72A64
000767FA 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00076800 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00076804 0815 0002                  		btst	#2,(a5)
00076808 6600                       		bne.s	locret_72E1E
0007680A 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00076812                            
00076812                            locret_72E1E:
00076812 4E75                       		rts	
00076814                            ; ===========================================================================
00076814                            
00076814                            loc_72E20:				; XREF: loc_72A64
00076814 0895 0003                  		bclr	#3,(a5)
00076818 4E75                       		rts	
0007681A                            ; ===========================================================================
0007681A                            
0007681A                            loc_72E26:				; XREF: loc_72A64
0007681A 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007681E 4E75                       		rts	
00076820                            ; ===========================================================================
00076820                            
00076820                            loc_72E2C:				; XREF: loc_72A64
00076820 101C                       		move.b	(a4)+,d0
00076822 E148                       		lsl.w	#8,d0
00076824 101C                       		move.b	(a4)+,d0
00076826 D8C0                       		adda.w	d0,a4
00076828 534C                       		subq.w	#1,a4
0007682A 4E75                       		rts	
0007682C                            ; ===========================================================================
0007682C                            
0007682C                            loc_72E38:				; XREF: loc_72A64
0007682C 7000                       		moveq	#0,d0
0007682E 101C                       		move.b	(a4)+,d0
00076830 121C                       		move.b	(a4)+,d1
00076832 4A35 0024                  		tst.b	$24(a5,d0.w)
00076836 6600                       		bne.s	loc_72E48
00076838 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007683C                            
0007683C                            loc_72E48:
0007683C 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00076840 66DE                       		bne.s	loc_72E2C
00076842 544C                       		addq.w	#2,a4
00076844 4E75                       		rts	
00076846                            ; ===========================================================================
00076846                            
00076846                            loc_72E52:				; XREF: loc_72A64
00076846 7000                       		moveq	#0,d0
00076848 102D 000D                  		move.b	$D(a5),d0
0007684C 5900                       		subq.b	#4,d0
0007684E 2B8C 0000                  		move.l	a4,(a5,d0.w)
00076852 1B40 000D                  		move.b	d0,$D(a5)
00076856 60C8                       		bra.s	loc_72E2C
00076858                            ; ===========================================================================
00076858                            
00076858                            loc_72E64:				; XREF: loc_72A64
00076858 103C 0088                  		move.b	#$88,d0
0007685C 123C 000F                  		move.b	#$F,d1
00076860 4EBA F8C2                  		jsr	sub_7272E(pc)
00076864 103C 008C                  		move.b	#$8C,d0
00076868 123C 000F                  		move.b	#$F,d1
0007686C 6000 F8B6                  		bra.w	sub_7272E
00076870                            ; ===========================================================================
00076870                            Kos_Z80:	incbin	sound\z80_1.bin
00076920 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00076922 21                         		dc.b $21
00076923 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00076925                            		incbin	sound\z80_2.bin
00077FD0                            		even
00077FD0                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007E7D0                            		even
0007E7D0                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008806E                            		even
0008806E                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000885FC                            		even
000885FC                            Music84:	include	sound\music84.asm ; Star Light Act 1
000885FC                            music84_Header:
000885FC =00000001                  smpsHeaderStartSong = 1
000885FC 0000                       	smpsHeaderVoice     music84_Voices
000885FE 0603                       	smpsHeaderChan      $06, $03
00088600 0205                       	smpsHeaderTempo     $02, $05
00088602                            
00088606 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0008860A 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
0008860E 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00088612 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00088616 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0008861A 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00088620 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00088626 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0008862C                            
0008862C                            ; FM1 Data
0008862C                            music84_FM1:
0008862C E0C0                       	smpsPan             panCenter, $00
00088630 E107                       	smpsAlterNote       $07
00088632 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00088636 E106                       	smpsAlterNote       $06
00088638 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0008863C E10B                       	smpsAlterNote       $0B
0008863E 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00088644 E10C                       	smpsAlterNote       $0C
00088646 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088649 E10B                       	smpsAlterNote       $0B
0008864B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008864E E109                       	smpsAlterNote       $09
00088650 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00088655 E108                       	smpsAlterNote       $08
00088657 8001                       	dc.b	nRst, $01
00088659 E10B                       	smpsAlterNote       $0B
0008865B 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00088661 E107                       	smpsAlterNote       $07
00088663 9B03                       	dc.b	nD2, $03
00088665                            
00088665                            music84_Jump04:
00088665 E107                       	smpsAlterNote       $07
00088667 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008866B E10B                       	smpsAlterNote       $0B
0008866D A202 8001                  	dc.b	nA2, $02, nRst, $01
00088671 E107                       	smpsAlterNote       $07
00088673 9B03                       	dc.b	nD2, $03
00088675 E11A                       	smpsAlterNote       $1A
00088677 A301                       	dc.b	nBb2, $01
00088679 E1F2                       	smpsAlterNote       $F2
0008867B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008867E E1FF                       	smpsAlterNote       $FF
00088680 E701                       	dc.b	smpsNoAttack, $01
00088682 E111                       	smpsAlterNote       $11
00088684 E701                       	dc.b	smpsNoAttack, $01
00088686 E106                       	smpsAlterNote       $06
00088688 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008868B E107                       	smpsAlterNote       $07
0008868D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088691 E108                       	smpsAlterNote       $08
00088693 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0008869B E109                       	smpsAlterNote       $09
0008869D A003                       	dc.b	nG2, $03
0008869F E10C                       	smpsAlterNote       $0C
000886A1 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000886A5 E1FD                       	smpsAlterNote       $FD
000886A7 A401                       	dc.b	nB2, $01
000886A9 E109                       	smpsAlterNote       $09
000886AB E701                       	dc.b	smpsNoAttack, $01
000886AD E106                       	smpsAlterNote       $06
000886AF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000886B2 E109                       	smpsAlterNote       $09
000886B4 A007                       	dc.b	nG2, $07
000886B6 E108                       	smpsAlterNote       $08
000886B8 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000886BC E107                       	smpsAlterNote       $07
000886BE 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000886C4 E10B                       	smpsAlterNote       $0B
000886C6 A203 8001                  	dc.b	nA2, $03, nRst, $01
000886CA E107                       	smpsAlterNote       $07
000886CC 9B03                       	dc.b	nD2, $03
000886CE E11A                       	smpsAlterNote       $1A
000886D0 A301                       	dc.b	nBb2, $01
000886D2 E1F9                       	smpsAlterNote       $F9
000886D4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000886D7 E107                       	smpsAlterNote       $07
000886D9 E701                       	dc.b	smpsNoAttack, $01
000886DB E111                       	smpsAlterNote       $11
000886DD E701                       	dc.b	smpsNoAttack, $01
000886DF E106                       	smpsAlterNote       $06
000886E1 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000886E6 E107                       	smpsAlterNote       $07
000886E8 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000886F0 E1EC                       	smpsAlterNote       $EC
000886F2 A101                       	dc.b	nAb2, $01
000886F4 E108                       	smpsAlterNote       $08
000886F6 E701                       	dc.b	smpsNoAttack, $01
000886F8 E116                       	smpsAlterNote       $16
000886FA E701                       	dc.b	smpsNoAttack, $01
000886FC E1F5                       	smpsAlterNote       $F5
000886FE E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088701 E10B                       	smpsAlterNote       $0B
00088703 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088707 E107                       	smpsAlterNote       $07
00088709 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008870F E109                       	smpsAlterNote       $09
00088711 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088715 E10B                       	smpsAlterNote       $0B
00088717 9603                       	dc.b	nA1, $03
00088719 E107                       	smpsAlterNote       $07
0008871B 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00088721 E10B                       	smpsAlterNote       $0B
00088723 A203 8001                  	dc.b	nA2, $03, nRst, $01
00088727 E107                       	smpsAlterNote       $07
00088729 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008872D E11A                       	smpsAlterNote       $1A
0008872F A301                       	dc.b	nBb2, $01
00088731 E1F9                       	smpsAlterNote       $F9
00088733 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088736 E107                       	smpsAlterNote       $07
00088738 E701                       	dc.b	smpsNoAttack, $01
0008873A E1FB                       	smpsAlterNote       $FB
0008873C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008873F E106                       	smpsAlterNote       $06
00088741 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088745 E107                       	smpsAlterNote       $07
00088747 9B03                       	dc.b	nD2, $03
00088749 E108                       	smpsAlterNote       $08
0008874B 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088751 E109                       	smpsAlterNote       $09
00088753 A002 8001                  	dc.b	nG2, $02, nRst, $01
00088757 E10C                       	smpsAlterNote       $0C
00088759 A303                       	dc.b	nBb2, $03
0008875B E1F0                       	smpsAlterNote       $F0
0008875D A401                       	dc.b	nB2, $01
0008875F E1FD                       	smpsAlterNote       $FD
00088761 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00088766 E106                       	smpsAlterNote       $06
00088768 8001                       	dc.b	nRst, $01
0008876A E109                       	smpsAlterNote       $09
0008876C A006 8001                  	dc.b	nG2, $06, nRst, $01
00088770 E108                       	smpsAlterNote       $08
00088772 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00088776 E107                       	smpsAlterNote       $07
00088778 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008877E E10B                       	smpsAlterNote       $0B
00088780 A203                       	dc.b	nA2, $03
00088782 E107                       	smpsAlterNote       $07
00088784 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088788 E1F2                       	smpsAlterNote       $F2
0008878A A401                       	dc.b	nB2, $01
0008878C E1FF                       	smpsAlterNote       $FF
0008878E E701                       	dc.b	smpsNoAttack, $01
00088790 E107                       	smpsAlterNote       $07
00088792 E701                       	dc.b	smpsNoAttack, $01
00088794 E1FB                       	smpsAlterNote       $FB
00088796 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088799 E106                       	smpsAlterNote       $06
0008879B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008879F E107                       	smpsAlterNote       $07
000887A1 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
000887AB E117                       	smpsAlterNote       $17
000887AD A001                       	dc.b	nG2, $01
000887AF E1FA                       	smpsAlterNote       $FA
000887B1 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000887B4 E108                       	smpsAlterNote       $08
000887B6 E701                       	dc.b	smpsNoAttack, $01
000887B8 E1E7                       	smpsAlterNote       $E7
000887BA E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000887BD E103                       	smpsAlterNote       $03
000887BF E701                       	dc.b	smpsNoAttack, $01
000887C1 E10B                       	smpsAlterNote       $0B
000887C3 E702                       	dc.b	smpsNoAttack, $02
000887C5 E107                       	smpsAlterNote       $07
000887C7 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000887CF E106                       	smpsAlterNote       $06
000887D1 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000887D7 E10C                       	smpsAlterNote       $0C
000887D9 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000887DF E109                       	smpsAlterNote       $09
000887E1 9E03                       	dc.b	nF2, $03
000887E3 E10C                       	smpsAlterNote       $0C
000887E5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000887E9 E1EA                       	smpsAlterNote       $EA
000887EB A201                       	dc.b	nA2, $01
000887ED E106                       	smpsAlterNote       $06
000887EF E701                       	dc.b	smpsNoAttack, $01
000887F1 E1E2                       	smpsAlterNote       $E2
000887F3 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000887F6 E1F0                       	smpsAlterNote       $F0
000887F8 E701                       	dc.b	smpsNoAttack, $01
000887FA E10C                       	smpsAlterNote       $0C
000887FC E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00088808 E116                       	smpsAlterNote       $16
0008880A 9C01                       	dc.b	nEb2, $01
0008880C E105                       	smpsAlterNote       $05
0008880E E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088811 E1F1                       	smpsAlterNote       $F1
00088813 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088816 E1FF                       	smpsAlterNote       $FF
00088818 E701                       	dc.b	smpsNoAttack, $01
0008881A E109                       	smpsAlterNote       $09
0008881C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088820 E10C                       	smpsAlterNote       $0C
00088822 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008882E 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00088834 E109                       	smpsAlterNote       $09
00088836 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008883A E10C                       	smpsAlterNote       $0C
0008883C 9703                       	dc.b	nBb1, $03
0008883E E11A                       	smpsAlterNote       $1A
00088840 A101                       	dc.b	nAb2, $01
00088842 E1FB                       	smpsAlterNote       $FB
00088844 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088847 E10A                       	smpsAlterNote       $0A
00088849 E701                       	dc.b	smpsNoAttack, $01
0008884B E1E8                       	smpsAlterNote       $E8
0008884D E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088850 E106                       	smpsAlterNote       $06
00088852 E701                       	dc.b	smpsNoAttack, $01
00088854 E10C                       	smpsAlterNote       $0C
00088856 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00088862 E1F9                       	smpsAlterNote       $F9
00088864 9D01                       	dc.b	nE2, $01
00088866 E108                       	smpsAlterNote       $08
00088868 E701                       	dc.b	smpsNoAttack, $01
0008886A E1F6                       	smpsAlterNote       $F6
0008886C E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008886F E109                       	smpsAlterNote       $09
00088871 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00088875 E10C                       	smpsAlterNote       $0C
00088877 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00088883 E108                       	smpsAlterNote       $08
00088885 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008888B E106                       	smpsAlterNote       $06
0008888D A403 8001                  	dc.b	nB2, $03, nRst, $01
00088891 E108                       	smpsAlterNote       $08
00088893 9D03                       	dc.b	nE2, $03
00088895 E1EB                       	smpsAlterNote       $EB
00088897 A801                       	dc.b	nEb3, $01
00088899 E109                       	smpsAlterNote       $09
0008889B E701                       	dc.b	smpsNoAttack, $01
0008889D E1FA                       	smpsAlterNote       $FA
0008889F E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000888A2 E108                       	smpsAlterNote       $08
000888A4 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000888B0 E1E9                       	smpsAlterNote       $E9
000888B2 A301                       	dc.b	nBb2, $01
000888B4 E107                       	smpsAlterNote       $07
000888B6 E701                       	dc.b	smpsNoAttack, $01
000888B8 E1F0                       	smpsAlterNote       $F0
000888BA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000888BD E1F7                       	smpsAlterNote       $F7
000888BF E701                       	dc.b	smpsNoAttack, $01
000888C1 E107                       	smpsAlterNote       $07
000888C3 E701                       	dc.b	smpsNoAttack, $01
000888C5 E106                       	smpsAlterNote       $06
000888C7 E701                       	dc.b	smpsNoAttack, $01
000888C9 E108                       	smpsAlterNote       $08
000888CB 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000888D1 E106                       	smpsAlterNote       $06
000888D3 A403 8001                  	dc.b	nB2, $03, nRst, $01
000888D7 E108                       	smpsAlterNote       $08
000888D9 9D03                       	dc.b	nE2, $03
000888DB E10B                       	smpsAlterNote       $0B
000888DD 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000888E5 E108                       	smpsAlterNote       $08
000888E7 9D03                       	dc.b	nE2, $03
000888E9 E10B                       	smpsAlterNote       $0B
000888EB 9603 8001                  	dc.b	nA1, $03, nRst, $01
000888EF E113                       	smpsAlterNote       $13
000888F1 A001                       	dc.b	nG2, $01
000888F3 E118                       	smpsAlterNote       $18
000888F5 E701                       	dc.b	smpsNoAttack, $01
000888F7 E1E9                       	smpsAlterNote       $E9
000888F9 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000888FC E1F3                       	smpsAlterNote       $F3
000888FE E701                       	dc.b	smpsNoAttack, $01
00088900 E1FD                       	smpsAlterNote       $FD
00088902 E701                       	dc.b	smpsNoAttack, $01
00088904 E102                       	smpsAlterNote       $02
00088906 E701                       	dc.b	smpsNoAttack, $01
00088908 E107                       	smpsAlterNote       $07
0008890A 8001                       	dc.b	nRst, $01
0008890C E10B                       	smpsAlterNote       $0B
0008890E 9603                       	dc.b	nA1, $03
00088910 E10C                       	smpsAlterNote       $0C
00088912 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00088918 E10B                       	smpsAlterNote       $0B
0008891A 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00088926 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0008892C E107                       	smpsAlterNote       $07
0008892E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088934 E10B                       	smpsAlterNote       $0B
00088936 A203                       	dc.b	nA2, $03
00088938 E107                       	smpsAlterNote       $07
0008893A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008893E E1F2                       	smpsAlterNote       $F2
00088940 A401                       	dc.b	nB2, $01
00088942 E1FF                       	smpsAlterNote       $FF
00088944 E701                       	dc.b	smpsNoAttack, $01
00088946 E107                       	smpsAlterNote       $07
00088948 E701                       	dc.b	smpsNoAttack, $01
0008894A E1FB                       	smpsAlterNote       $FB
0008894C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008894F E106                       	smpsAlterNote       $06
00088951 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088955 E107                       	smpsAlterNote       $07
00088957 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008895B E108                       	smpsAlterNote       $08
0008895D 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00088963 E109                       	smpsAlterNote       $09
00088965 A003 8001                  	dc.b	nG2, $03, nRst, $01
00088969 E10C                       	smpsAlterNote       $0C
0008896B A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008896F E1F0                       	smpsAlterNote       $F0
00088971 A401                       	dc.b	nB2, $01
00088973 E109                       	smpsAlterNote       $09
00088975 E701                       	dc.b	smpsNoAttack, $01
00088977 E106                       	smpsAlterNote       $06
00088979 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008897C E109                       	smpsAlterNote       $09
0008897E A007                       	dc.b	nG2, $07
00088980 E108                       	smpsAlterNote       $08
00088982 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00088986 E107                       	smpsAlterNote       $07
00088988 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008898E E10B                       	smpsAlterNote       $0B
00088990 A202 8001                  	dc.b	nA2, $02, nRst, $01
00088994 E107                       	smpsAlterNote       $07
00088996 9B03                       	dc.b	nD2, $03
00088998 E11A                       	smpsAlterNote       $1A
0008899A A301                       	dc.b	nBb2, $01
0008899C E1F2                       	smpsAlterNote       $F2
0008899E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000889A1 E1FF                       	smpsAlterNote       $FF
000889A3 E701                       	dc.b	smpsNoAttack, $01
000889A5 E111                       	smpsAlterNote       $11
000889A7 E701                       	dc.b	smpsNoAttack, $01
000889A9 E106                       	smpsAlterNote       $06
000889AB E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000889AE E107                       	smpsAlterNote       $07
000889B0 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000889BC E117                       	smpsAlterNote       $17
000889BE A001                       	dc.b	nG2, $01
000889C0 E1FA                       	smpsAlterNote       $FA
000889C2 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000889C5 E116                       	smpsAlterNote       $16
000889C7 E701                       	dc.b	smpsNoAttack, $01
000889C9 E1F5                       	smpsAlterNote       $F5
000889CB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000889CE E103                       	smpsAlterNote       $03
000889D0 E701                       	dc.b	smpsNoAttack, $01
000889D2 E10B                       	smpsAlterNote       $0B
000889D4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000889D8 E107                       	smpsAlterNote       $07
000889DA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000889E0 E109                       	smpsAlterNote       $09
000889E2 9E03                       	dc.b	nF2, $03
000889E4 E10B                       	smpsAlterNote       $0B
000889E6 9603 8001                  	dc.b	nA1, $03, nRst, $01
000889EA E107                       	smpsAlterNote       $07
000889EC 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000889F2 E10B                       	smpsAlterNote       $0B
000889F4 A203 8001                  	dc.b	nA2, $03, nRst, $01
000889F8 E107                       	smpsAlterNote       $07
000889FA 9B03                       	dc.b	nD2, $03
000889FC E11A                       	smpsAlterNote       $1A
000889FE A301                       	dc.b	nBb2, $01
00088A00 E1F9                       	smpsAlterNote       $F9
00088A02 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088A05 E107                       	smpsAlterNote       $07
00088A07 E701                       	dc.b	smpsNoAttack, $01
00088A09 E111                       	smpsAlterNote       $11
00088A0B E701                       	dc.b	smpsNoAttack, $01
00088A0D E106                       	smpsAlterNote       $06
00088A0F E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00088A14 E107                       	smpsAlterNote       $07
00088A16 9B03                       	dc.b	nD2, $03
00088A18 E108                       	smpsAlterNote       $08
00088A1A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088A20 E109                       	smpsAlterNote       $09
00088A22 A003                       	dc.b	nG2, $03
00088A24 E10C                       	smpsAlterNote       $0C
00088A26 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00088A2A E1FD                       	smpsAlterNote       $FD
00088A2C A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00088A31 E106                       	smpsAlterNote       $06
00088A33 8001                       	dc.b	nRst, $01
00088A35 E109                       	smpsAlterNote       $09
00088A37 A006 8001                  	dc.b	nG2, $06, nRst, $01
00088A3B E108                       	smpsAlterNote       $08
00088A3D 9C03                       	dc.b	nEb2, $03
00088A3F E107                       	smpsAlterNote       $07
00088A41 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00088A47 E10B                       	smpsAlterNote       $0B
00088A49 A203 8001                  	dc.b	nA2, $03, nRst, $01
00088A4D E107                       	smpsAlterNote       $07
00088A4F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088A53 E11A                       	smpsAlterNote       $1A
00088A55 A301                       	dc.b	nBb2, $01
00088A57 E1F9                       	smpsAlterNote       $F9
00088A59 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088A5C E107                       	smpsAlterNote       $07
00088A5E E701                       	dc.b	smpsNoAttack, $01
00088A60 E1FB                       	smpsAlterNote       $FB
00088A62 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088A65 E106                       	smpsAlterNote       $06
00088A67 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088A6B E107                       	smpsAlterNote       $07
00088A6D 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00088A75 E1EC                       	smpsAlterNote       $EC
00088A77 A101                       	dc.b	nAb2, $01
00088A79 E108                       	smpsAlterNote       $08
00088A7B E701                       	dc.b	smpsNoAttack, $01
00088A7D E1E7                       	smpsAlterNote       $E7
00088A7F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088A82 E1F5                       	smpsAlterNote       $F5
00088A84 E701                       	dc.b	smpsNoAttack, $01
00088A86 E10B                       	smpsAlterNote       $0B
00088A88 E702                       	dc.b	smpsNoAttack, $02
00088A8A E107                       	smpsAlterNote       $07
00088A8C 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00088A92 E106                       	smpsAlterNote       $06
00088A94 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00088A9A E10C                       	smpsAlterNote       $0C
00088A9C 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00088AA4 E109                       	smpsAlterNote       $09
00088AA6 9E03                       	dc.b	nF2, $03
00088AA8 E10C                       	smpsAlterNote       $0C
00088AAA 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088AAE E1EA                       	smpsAlterNote       $EA
00088AB0 A201                       	dc.b	nA2, $01
00088AB2 E106                       	smpsAlterNote       $06
00088AB4 E701                       	dc.b	smpsNoAttack, $01
00088AB6 E114                       	smpsAlterNote       $14
00088AB8 E701                       	dc.b	smpsNoAttack, $01
00088ABA E1F0                       	smpsAlterNote       $F0
00088ABC E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088ABF E10C                       	smpsAlterNote       $0C
00088AC1 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00088ACD 9703                       	dc.b	nBb1, $03
00088ACF E116                       	smpsAlterNote       $16
00088AD1 9C01                       	dc.b	nEb2, $01
00088AD3 E105                       	smpsAlterNote       $05
00088AD5 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088AD8 E113                       	smpsAlterNote       $13
00088ADA E701                       	dc.b	smpsNoAttack, $01
00088ADC E1FF                       	smpsAlterNote       $FF
00088ADE E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088AE1 E109                       	smpsAlterNote       $09
00088AE3 E703                       	dc.b	smpsNoAttack, $03
00088AE5 E10C                       	smpsAlterNote       $0C
00088AE7 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00088AF3 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088AFB E109                       	smpsAlterNote       $09
00088AFD 9E03                       	dc.b	nF2, $03
00088AFF E10C                       	smpsAlterNote       $0C
00088B01 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088B05 E1EC                       	smpsAlterNote       $EC
00088B07 A201                       	dc.b	nA2, $01
00088B09 E10A                       	smpsAlterNote       $0A
00088B0B E701                       	dc.b	smpsNoAttack, $01
00088B0D E1E8                       	smpsAlterNote       $E8
00088B0F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088B12 E1F7                       	smpsAlterNote       $F7
00088B14 E701                       	dc.b	smpsNoAttack, $01
00088B16 E10C                       	smpsAlterNote       $0C
00088B18 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00088B24 E1EA                       	smpsAlterNote       $EA
00088B26 9D01                       	dc.b	nE2, $01
00088B28 E108                       	smpsAlterNote       $08
00088B2A E701                       	dc.b	smpsNoAttack, $01
00088B2C E1F6                       	smpsAlterNote       $F6
00088B2E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088B31 E105                       	smpsAlterNote       $05
00088B33 E701                       	dc.b	smpsNoAttack, $01
00088B35 E109                       	smpsAlterNote       $09
00088B37 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088B3B E10C                       	smpsAlterNote       $0C
00088B3D 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00088B49 E108                       	smpsAlterNote       $08
00088B4B 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00088B51 E106                       	smpsAlterNote       $06
00088B53 A403 8001                  	dc.b	nB2, $03, nRst, $01
00088B57 E108                       	smpsAlterNote       $08
00088B59 9D03                       	dc.b	nE2, $03
00088B5B E1EB                       	smpsAlterNote       $EB
00088B5D A801                       	dc.b	nEb3, $01
00088B5F E109                       	smpsAlterNote       $09
00088B61 E701                       	dc.b	smpsNoAttack, $01
00088B63 E1EB                       	smpsAlterNote       $EB
00088B65 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00088B68 E108                       	smpsAlterNote       $08
00088B6A E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00088B76 E1E9                       	smpsAlterNote       $E9
00088B78 A301                       	dc.b	nBb2, $01
00088B7A E1F8                       	smpsAlterNote       $F8
00088B7C E701                       	dc.b	smpsNoAttack, $01
00088B7E E116                       	smpsAlterNote       $16
00088B80 E701                       	dc.b	smpsNoAttack, $01
00088B82 E1F7                       	smpsAlterNote       $F7
00088B84 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088B87 E107                       	smpsAlterNote       $07
00088B89 E701                       	dc.b	smpsNoAttack, $01
00088B8B E1EE                       	smpsAlterNote       $EE
00088B8D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088B90 E106                       	smpsAlterNote       $06
00088B92 8001                       	dc.b	nRst, $01
00088B94 E108                       	smpsAlterNote       $08
00088B96 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00088B9C E106                       	smpsAlterNote       $06
00088B9E A402 8001                  	dc.b	nB2, $02, nRst, $01
00088BA2 E108                       	smpsAlterNote       $08
00088BA4 9D03                       	dc.b	nE2, $03
00088BA6 E10B                       	smpsAlterNote       $0B
00088BA8 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00088BAE E108                       	smpsAlterNote       $08
00088BB0 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00088BB4 E10B                       	smpsAlterNote       $0B
00088BB6 9603                       	dc.b	nA1, $03
00088BB8 E10E                       	smpsAlterNote       $0E
00088BBA A001                       	dc.b	nG2, $01
00088BBC E118                       	smpsAlterNote       $18
00088BBE E701                       	dc.b	smpsNoAttack, $01
00088BC0 E1E9                       	smpsAlterNote       $E9
00088BC2 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088BC5 E1EE                       	smpsAlterNote       $EE
00088BC7 E701                       	dc.b	smpsNoAttack, $01
00088BC9 E1F8                       	smpsAlterNote       $F8
00088BCB E701                       	dc.b	smpsNoAttack, $01
00088BCD E102                       	smpsAlterNote       $02
00088BCF E701                       	dc.b	smpsNoAttack, $01
00088BD1 E107                       	smpsAlterNote       $07
00088BD3 8001                       	dc.b	nRst, $01
00088BD5 E10B                       	smpsAlterNote       $0B
00088BD7 9603                       	dc.b	nA1, $03
00088BD9 E10C                       	smpsAlterNote       $0C
00088BDB 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00088BE1 E10B                       	smpsAlterNote       $0B
00088BE3 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00088BEF 8001 9603                  	dc.b	nRst, $01, nA1, $03
00088BF3 E10C                       	smpsAlterNote       $0C
00088BF5 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00088C01 8001                       	dc.b	nRst, $01
00088C03 E10B                       	smpsAlterNote       $0B
00088C05 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00088C0D E107                       	smpsAlterNote       $07
00088C0F 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00088C13 E10B                       	smpsAlterNote       $0B
00088C15 9603                       	dc.b	nA1, $03
00088C17 E109                       	smpsAlterNote       $09
00088C19 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088C1D E108                       	smpsAlterNote       $08
00088C1F 9D06                       	dc.b	nE2, $06
00088C21 E107                       	smpsAlterNote       $07
00088C23 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088C27 E106                       	smpsAlterNote       $06
00088C29 9903                       	dc.b	nC2, $03
00088C2B E10C                       	smpsAlterNote       $0C
00088C2D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088C31 E10B                       	smpsAlterNote       $0B
00088C33 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00088C3F 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088C49 E10C                       	smpsAlterNote       $0C
00088C4B 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00088C57 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00088C63 8001                       	dc.b	nRst, $01
00088C65 E10B                       	smpsAlterNote       $0B
00088C67 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088C73 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00088C7F 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00088C8B 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088C95 E10C                       	smpsAlterNote       $0C
00088C97 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00088CA3 E10B                       	smpsAlterNote       $0B
00088CA5 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00088CAD E107                       	smpsAlterNote       $07
00088CAF 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00088CB3 E10B                       	smpsAlterNote       $0B
00088CB5 9603                       	dc.b	nA1, $03
00088CB7 E109                       	smpsAlterNote       $09
00088CB9 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088CBD E108                       	smpsAlterNote       $08
00088CBF 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00088CC3 E107                       	smpsAlterNote       $07
00088CC5 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088CC9 E106                       	smpsAlterNote       $06
00088CCB 9903                       	dc.b	nC2, $03
00088CCD E10C                       	smpsAlterNote       $0C
00088CCF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088CD3 E10B                       	smpsAlterNote       $0B
00088CD5 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088CE1 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088CEB E10C                       	smpsAlterNote       $0C
00088CED 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00088CF9 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00088D05 8001                       	dc.b	nRst, $01
00088D07 E10B                       	smpsAlterNote       $0B
00088D09 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088D15 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088D1F E10C                       	smpsAlterNote       $0C
00088D21 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088D2D 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00088D39 E10B                       	smpsAlterNote       $0B
00088D3B 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088D47 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00088D51 E10C                       	smpsAlterNote       $0C
00088D53 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088D5F 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00088D6B E10B                       	smpsAlterNote       $0B
00088D6D 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00088D79 8001                       	dc.b	nRst, $01
00088D7B E1EC                       	smpsAlterNote       $EC
00088D7D A101                       	dc.b	nAb2, $01
00088D7F E1FA                       	smpsAlterNote       $FA
00088D81 E701                       	dc.b	smpsNoAttack, $01
00088D83 E116                       	smpsAlterNote       $16
00088D85 E701                       	dc.b	smpsNoAttack, $01
00088D87 E1F5                       	smpsAlterNote       $F5
00088D89 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088D8C E10B                       	smpsAlterNote       $0B
00088D8E E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00088D9A 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00088DA6 E107                       	smpsAlterNote       $07
00088DA8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088DAE E10B                       	smpsAlterNote       $0B
00088DB0 A203                       	dc.b	nA2, $03
00088DB2 E107                       	smpsAlterNote       $07
00088DB4 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088DB8 E1F3                       	smpsAlterNote       $F3
00088DBA A401                       	dc.b	nB2, $01
00088DBC E102                       	smpsAlterNote       $02
00088DBE E701                       	dc.b	smpsNoAttack, $01
00088DC0 E109                       	smpsAlterNote       $09
00088DC2 E701                       	dc.b	smpsNoAttack, $01
00088DC4 E102                       	smpsAlterNote       $02
00088DC6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088DC9 E106                       	smpsAlterNote       $06
00088DCB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088DCF E107                       	smpsAlterNote       $07
00088DD1 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088DD5 E108                       	smpsAlterNote       $08
00088DD7 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00088DDD E109                       	smpsAlterNote       $09
00088DDF A003 8001                  	dc.b	nG2, $03, nRst, $01
00088DE3 E1F2                       	smpsAlterNote       $F2
00088DE5 A401                       	dc.b	nB2, $01
00088DE7 E1FF                       	smpsAlterNote       $FF
00088DE9 E701                       	dc.b	smpsNoAttack, $01
00088DEB E111                       	smpsAlterNote       $11
00088DED E701                       	dc.b	smpsNoAttack, $01
00088DEF E1FB                       	smpsAlterNote       $FB
00088DF1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088DF4 E106                       	smpsAlterNote       $06
00088DF6 E702                       	dc.b	smpsNoAttack, $02
00088DF8 E109                       	smpsAlterNote       $09
00088DFA A007                       	dc.b	nG2, $07
00088DFC E108                       	smpsAlterNote       $08
00088DFE 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00088E02 E107                       	smpsAlterNote       $07
00088E04 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088E0A E10B                       	smpsAlterNote       $0B
00088E0C A202 8001                  	dc.b	nA2, $02, nRst, $01
00088E10 E107                       	smpsAlterNote       $07
00088E12 9B03                       	dc.b	nD2, $03
00088E14 E11A                       	smpsAlterNote       $1A
00088E16 A301                       	dc.b	nBb2, $01
00088E18 E1F2                       	smpsAlterNote       $F2
00088E1A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088E1D E1FF                       	smpsAlterNote       $FF
00088E1F E701                       	dc.b	smpsNoAttack, $01
00088E21 E111                       	smpsAlterNote       $11
00088E23 E701                       	dc.b	smpsNoAttack, $01
00088E25 E106                       	smpsAlterNote       $06
00088E27 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088E2A E107                       	smpsAlterNote       $07
00088E2C 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00088E38 E117                       	smpsAlterNote       $17
00088E3A A001                       	dc.b	nG2, $01
00088E3C E1FA                       	smpsAlterNote       $FA
00088E3E E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088E41 E116                       	smpsAlterNote       $16
00088E43 E701                       	dc.b	smpsNoAttack, $01
00088E45 E1F5                       	smpsAlterNote       $F5
00088E47 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088E4A E103                       	smpsAlterNote       $03
00088E4C E701                       	dc.b	smpsNoAttack, $01
00088E4E E10B                       	smpsAlterNote       $0B
00088E50 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088E54 E107                       	smpsAlterNote       $07
00088E56 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088E5C E109                       	smpsAlterNote       $09
00088E5E 9E03                       	dc.b	nF2, $03
00088E60 E10B                       	smpsAlterNote       $0B
00088E62 9603 8001                  	dc.b	nA1, $03, nRst, $01
00088E66 E107                       	smpsAlterNote       $07
00088E68 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00088E6E E10B                       	smpsAlterNote       $0B
00088E70 A203 8001                  	dc.b	nA2, $03, nRst, $01
00088E74 E107                       	smpsAlterNote       $07
00088E76 9B03                       	dc.b	nD2, $03
00088E78 E11A                       	smpsAlterNote       $1A
00088E7A A301                       	dc.b	nBb2, $01
00088E7C E1F9                       	smpsAlterNote       $F9
00088E7E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088E81 E1FF                       	smpsAlterNote       $FF
00088E83 E701                       	dc.b	smpsNoAttack, $01
00088E85 E111                       	smpsAlterNote       $11
00088E87 E701                       	dc.b	smpsNoAttack, $01
00088E89 E106                       	smpsAlterNote       $06
00088E8B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088E8E E107                       	smpsAlterNote       $07
00088E90 9B03                       	dc.b	nD2, $03
00088E92 E108                       	smpsAlterNote       $08
00088E94 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088E9A E109                       	smpsAlterNote       $09
00088E9C A003                       	dc.b	nG2, $03
00088E9E E1F0                       	smpsAlterNote       $F0
00088EA0 A501                       	dc.b	nC3, $01
00088EA2 E106                       	smpsAlterNote       $06
00088EA4 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00088EA8 E109                       	smpsAlterNote       $09
00088EAA A006 8001                  	dc.b	nG2, $06, nRst, $01
00088EAE E108                       	smpsAlterNote       $08
00088EB0 9C03                       	dc.b	nEb2, $03
00088EB2 E107                       	smpsAlterNote       $07
00088EB4 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00088EBA E10B                       	smpsAlterNote       $0B
00088EBC A203 8001                  	dc.b	nA2, $03, nRst, $01
00088EC0 E107                       	smpsAlterNote       $07
00088EC2 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088EC6 E11A                       	smpsAlterNote       $1A
00088EC8 A301                       	dc.b	nBb2, $01
00088ECA E1F9                       	smpsAlterNote       $F9
00088ECC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088ECF E107                       	smpsAlterNote       $07
00088ED1 E701                       	dc.b	smpsNoAttack, $01
00088ED3 E1FB                       	smpsAlterNote       $FB
00088ED5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088ED8 E106                       	smpsAlterNote       $06
00088EDA E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088EDE E107                       	smpsAlterNote       $07
00088EE0 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00088EE8 E1EC                       	smpsAlterNote       $EC
00088EEA A101                       	dc.b	nAb2, $01
00088EEC E108                       	smpsAlterNote       $08
00088EEE E701                       	dc.b	smpsNoAttack, $01
00088EF0 E1E7                       	smpsAlterNote       $E7
00088EF2 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088EF5 E1F5                       	smpsAlterNote       $F5
00088EF7 E701                       	dc.b	smpsNoAttack, $01
00088EF9 E10B                       	smpsAlterNote       $0B
00088EFB E702                       	dc.b	smpsNoAttack, $02
00088EFD E107                       	smpsAlterNote       $07
00088EFF 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00088F05 E106                       	smpsAlterNote       $06
00088F07 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00088F0D E10C                       	smpsAlterNote       $0C
00088F0F 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00088F17 E109                       	smpsAlterNote       $09
00088F19 9E03                       	dc.b	nF2, $03
00088F1B E10C                       	smpsAlterNote       $0C
00088F1D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088F21 E1EA                       	smpsAlterNote       $EA
00088F23 A201                       	dc.b	nA2, $01
00088F25 E106                       	smpsAlterNote       $06
00088F27 E701                       	dc.b	smpsNoAttack, $01
00088F29 E114                       	smpsAlterNote       $14
00088F2B E701                       	dc.b	smpsNoAttack, $01
00088F2D E1F0                       	smpsAlterNote       $F0
00088F2F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088F32 E10C                       	smpsAlterNote       $0C
00088F34 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00088F40 9703                       	dc.b	nBb1, $03
00088F42 E116                       	smpsAlterNote       $16
00088F44 9C01                       	dc.b	nEb2, $01
00088F46 E105                       	smpsAlterNote       $05
00088F48 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088F4B E113                       	smpsAlterNote       $13
00088F4D E701                       	dc.b	smpsNoAttack, $01
00088F4F E1FF                       	smpsAlterNote       $FF
00088F51 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088F54 E109                       	smpsAlterNote       $09
00088F56 E703                       	dc.b	smpsNoAttack, $03
00088F58 E10C                       	smpsAlterNote       $0C
00088F5A 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00088F66 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088F6E E109                       	smpsAlterNote       $09
00088F70 9E03                       	dc.b	nF2, $03
00088F72 E10C                       	smpsAlterNote       $0C
00088F74 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088F78 E1EA                       	smpsAlterNote       $EA
00088F7A A201                       	dc.b	nA2, $01
00088F7C E106                       	smpsAlterNote       $06
00088F7E E701                       	dc.b	smpsNoAttack, $01
00088F80 E1E2                       	smpsAlterNote       $E2
00088F82 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088F85 E1F0                       	smpsAlterNote       $F0
00088F87 E701                       	dc.b	smpsNoAttack, $01
00088F89 E10C                       	smpsAlterNote       $0C
00088F8B E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00088F97 E116                       	smpsAlterNote       $16
00088F99 9C01                       	dc.b	nEb2, $01
00088F9B E105                       	smpsAlterNote       $05
00088F9D E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088FA0 E1F1                       	smpsAlterNote       $F1
00088FA2 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088FA5 E1FF                       	smpsAlterNote       $FF
00088FA7 E701                       	dc.b	smpsNoAttack, $01
00088FA9 E109                       	smpsAlterNote       $09
00088FAB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088FAF E10C                       	smpsAlterNote       $0C
00088FB1 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00088FBD E106                       	smpsAlterNote       $06
00088FBF 9903                       	dc.b	nC2, $03
00088FC1 E107                       	smpsAlterNote       $07
00088FC3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088FC7 E109                       	smpsAlterNote       $09
00088FC9 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00088FCF E107                       	smpsAlterNote       $07
00088FD1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088FD5 E108                       	smpsAlterNote       $08
00088FD7 9D03                       	dc.b	nE2, $03
00088FD9 E10B                       	smpsAlterNote       $0B
00088FDB 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00088FE1 E109                       	smpsAlterNote       $09
00088FE3 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00088FE9 E10C                       	smpsAlterNote       $0C
00088FEB 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00088FF1 E106                       	smpsAlterNote       $06
00088FF3 9903                       	dc.b	nC2, $03
00088FF5 E11A                       	smpsAlterNote       $1A
00088FF7 A301                       	dc.b	nBb2, $01
00088FF9 E1F9                       	smpsAlterNote       $F9
00088FFB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088FFE E1FF                       	smpsAlterNote       $FF
00089000 E701                       	dc.b	smpsNoAttack, $01
00089002 E111                       	smpsAlterNote       $11
00089004 E701                       	dc.b	smpsNoAttack, $01
00089006 E106                       	smpsAlterNote       $06
00089008 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
0008900F E109                       	smpsAlterNote       $09
00089011 A003                       	dc.b	nG2, $03
00089013 E106                       	smpsAlterNote       $06
00089015 9907                       	dc.b	nC2, $07
00089017 E107                       	smpsAlterNote       $07
00089019 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00089021 E10B                       	smpsAlterNote       $0B
00089023 A203                       	dc.b	nA2, $03
00089025 E107                       	smpsAlterNote       $07
00089027 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008902B E1F2                       	smpsAlterNote       $F2
0008902D A401                       	dc.b	nB2, $01
0008902F E1F9                       	smpsAlterNote       $F9
00089031 E701                       	dc.b	smpsNoAttack, $01
00089033 E107                       	smpsAlterNote       $07
00089035 E701                       	dc.b	smpsNoAttack, $01
00089037 E1FB                       	smpsAlterNote       $FB
00089039 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008903C E106                       	smpsAlterNote       $06
0008903E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00089042 E107                       	smpsAlterNote       $07
00089044 9B03                       	dc.b	nD2, $03
00089046 E108                       	smpsAlterNote       $08
00089048 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008904E E109                       	smpsAlterNote       $09
00089050 A003 8001                  	dc.b	nG2, $03, nRst, $01
00089054 E1F2                       	smpsAlterNote       $F2
00089056 A401                       	dc.b	nB2, $01
00089058 E1F9                       	smpsAlterNote       $F9
0008905A E701                       	dc.b	smpsNoAttack, $01
0008905C E107                       	smpsAlterNote       $07
0008905E E701                       	dc.b	smpsNoAttack, $01
00089060 E1FB                       	smpsAlterNote       $FB
00089062 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00089065 E106                       	smpsAlterNote       $06
00089067 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008906B E108                       	smpsAlterNote       $08
0008906D 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00089071 E10C                       	smpsAlterNote       $0C
00089073 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00089077 E107                       	smpsAlterNote       $07
00089079 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008907F E10B                       	smpsAlterNote       $0B
00089081 A203                       	dc.b	nA2, $03
00089083 E107                       	smpsAlterNote       $07
00089085 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00089089 E1F2                       	smpsAlterNote       $F2
0008908B A401                       	dc.b	nB2, $01
0008908D E1FF                       	smpsAlterNote       $FF
0008908F E701                       	dc.b	smpsNoAttack, $01
00089091 E107                       	smpsAlterNote       $07
00089093 E701                       	dc.b	smpsNoAttack, $01
00089095 E1FB                       	smpsAlterNote       $FB
00089097 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008909A E106                       	smpsAlterNote       $06
0008909C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000890A0 E107                       	smpsAlterNote       $07
000890A2 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000890A6 E108                       	smpsAlterNote       $08
000890A8 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000890AE E109                       	smpsAlterNote       $09
000890B0 A003 8001                  	dc.b	nG2, $03, nRst, $01
000890B4 E1F2                       	smpsAlterNote       $F2
000890B6 A401                       	dc.b	nB2, $01
000890B8 E1FF                       	smpsAlterNote       $FF
000890BA E701                       	dc.b	smpsNoAttack, $01
000890BC E111                       	smpsAlterNote       $11
000890BE E701                       	dc.b	smpsNoAttack, $01
000890C0 E1FB                       	smpsAlterNote       $FB
000890C2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000890C5 E106                       	smpsAlterNote       $06
000890C7 E702                       	dc.b	smpsNoAttack, $02
000890C9 E108                       	smpsAlterNote       $08
000890CB 9C07                       	dc.b	nEb2, $07
000890CD E10C                       	smpsAlterNote       $0C
000890CF A303 8001                  	dc.b	nBb2, $03, nRst, $01
000890D3 E107                       	smpsAlterNote       $07
000890D5 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000890DB E10B                       	smpsAlterNote       $0B
000890DD A202 8001                  	dc.b	nA2, $02, nRst, $01
000890E1 E107                       	smpsAlterNote       $07
000890E3 9B03                       	dc.b	nD2, $03
000890E5 E11A                       	smpsAlterNote       $1A
000890E7 A301                       	dc.b	nBb2, $01
000890E9 E1F2                       	smpsAlterNote       $F2
000890EB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000890EE E1FF                       	smpsAlterNote       $FF
000890F0 E701                       	dc.b	smpsNoAttack, $01
000890F2 E111                       	smpsAlterNote       $11
000890F4 E701                       	dc.b	smpsNoAttack, $01
000890F6 E106                       	smpsAlterNote       $06
000890F8 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000890FB E107                       	smpsAlterNote       $07
000890FD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00089101 E108                       	smpsAlterNote       $08
00089103 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008910B E109                       	smpsAlterNote       $09
0008910D A003                       	dc.b	nG2, $03
0008910F E11A                       	smpsAlterNote       $1A
00089111 A301                       	dc.b	nBb2, $01
00089113 E1F2                       	smpsAlterNote       $F2
00089115 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00089118 E1FF                       	smpsAlterNote       $FF
0008911A E701                       	dc.b	smpsNoAttack, $01
0008911C E111                       	smpsAlterNote       $11
0008911E E701                       	dc.b	smpsNoAttack, $01
00089120 E106                       	smpsAlterNote       $06
00089122 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00089125 E108                       	smpsAlterNote       $08
00089127 9C07                       	dc.b	nEb2, $07
00089129 E10C                       	smpsAlterNote       $0C
0008912B A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008912F E107                       	smpsAlterNote       $07
00089131 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
0008913D 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00089147 E108                       	smpsAlterNote       $08
00089149 9C06                       	dc.b	nEb2, $06
0008914B E10C                       	smpsAlterNote       $0C
0008914D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00089151 E108                       	smpsAlterNote       $08
00089153 9C03                       	dc.b	nEb2, $03
00089155 E109                       	smpsAlterNote       $09
00089157 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008915B E10C                       	smpsAlterNote       $0C
0008915D A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00089165 E107                       	smpsAlterNote       $07
00089167 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008916B F6F4 F8                    	smpsJump            music84_Jump04
0008916E                            
0008916E                            ; FM2 Data
0008916E                            music84_FM2:
0008916E E0C0                       	smpsPan             panCenter, $00
00089172 E10B                       	smpsAlterNote       $0B
00089174 C603 8007                  	dc.b	nA5, $03, nRst, $07
00089178 E109                       	smpsAlterNote       $09
0008917A C403 800B                  	dc.b	nG5, $03, nRst, $0B
0008917E E108                       	smpsAlterNote       $08
00089180 C103 8004                  	dc.b	nE5, $03, nRst, $04
00089186 E080                       	smpsPan             panLeft, $00
00089188 E10C                       	smpsAlterNote       $0C
0008918A E6F9                       	smpsAlterVol        $F9
0008918C C703                       	dc.b	nBb5, $03
0008918E E10B                       	smpsAlterNote       $0B
00089190 C603 8001                  	dc.b	nA5, $03, nRst, $01
00089194 E109                       	smpsAlterNote       $09
00089196 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008919C E108                       	smpsAlterNote       $08
0008919E C103 8001                  	dc.b	nE5, $03, nRst, $01
000891A2 E106                       	smpsAlterNote       $06
000891A4 BD03                       	dc.b	nC5, $03
000891A6 E10B                       	smpsAlterNote       $0B
000891A8 BA03 8001                  	dc.b	nA4, $03, nRst, $01
000891AE E0C0                       	smpsPan             panCenter, $00
000891B0 E107                       	smpsAlterNote       $07
000891B2 E606                       	smpsAlterVol        $06
000891B4 BF03                       	dc.b	nD5, $03
000891B6                            
000891B6                            music84_Jump03:
000891B6 E108                       	smpsAlterNote       $08
000891B8 C103 8001                  	dc.b	nE5, $03, nRst, $01
000891BC E109                       	smpsAlterNote       $09
000891BE C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
000891C4 E10B                       	smpsAlterNote       $0B
000891C6 C607                       	dc.b	nA5, $07
000891C8 E107                       	smpsAlterNote       $07
000891CA BF03 8001                  	dc.b	nD5, $03, nRst, $01
000891CE E106                       	smpsAlterNote       $06
000891D0 C90D                       	dc.b	nC6, $0D
000891D2 E100                       	smpsAlterNote       $00
000891D4 E701                       	dc.b	smpsNoAttack, $01
000891D6 E1FF                       	smpsAlterNote       $FF
000891D8 E701                       	dc.b	smpsNoAttack, $01
000891DA E103                       	smpsAlterNote       $03
000891DC E701                       	dc.b	smpsNoAttack, $01
000891DE E109                       	smpsAlterNote       $09
000891E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891E4 E106                       	smpsAlterNote       $06
000891E6 E701                       	dc.b	smpsNoAttack, $01
000891E8 E100                       	smpsAlterNote       $00
000891EA E701                       	dc.b	smpsNoAttack, $01
000891EC E10C                       	smpsAlterNote       $0C
000891EE C703 8001                  	dc.b	nBb5, $03, nRst, $01
000891F2 E10B                       	smpsAlterNote       $0B
000891F4 C603                       	dc.b	nA5, $03
000891F6 E109                       	smpsAlterNote       $09
000891F8 C403 8001                  	dc.b	nG5, $03, nRst, $01
000891FC E10B                       	smpsAlterNote       $0B
000891FE C60D                       	dc.b	nA5, $0D
00089200 E105                       	smpsAlterNote       $05
00089202 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089206 E10B                       	smpsAlterNote       $0B
00089208 E701                       	dc.b	smpsNoAttack, $01
0008920A E10E                       	smpsAlterNote       $0E
0008920C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089210 E108                       	smpsAlterNote       $08
00089212 E701                       	dc.b	smpsNoAttack, $01
00089214 E104                       	smpsAlterNote       $04
00089216 E701                       	dc.b	smpsNoAttack, $01
00089218 E105                       	smpsAlterNote       $05
0008921A E701                       	dc.b	smpsNoAttack, $01
0008921C E10B                       	smpsAlterNote       $0B
0008921E E701                       	dc.b	smpsNoAttack, $01
00089220 E10F                       	smpsAlterNote       $0F
00089222 E701                       	dc.b	smpsNoAttack, $01
00089224 E10B                       	smpsAlterNote       $0B
00089226 E701                       	dc.b	smpsNoAttack, $01
00089228 E108                       	smpsAlterNote       $08
0008922A E701                       	dc.b	smpsNoAttack, $01
0008922C E104                       	smpsAlterNote       $04
0008922E E701                       	dc.b	smpsNoAttack, $01
00089230 E108                       	smpsAlterNote       $08
00089232 E701                       	dc.b	smpsNoAttack, $01
00089234 E10E                       	smpsAlterNote       $0E
00089236 E701                       	dc.b	smpsNoAttack, $01
00089238 E10F                       	smpsAlterNote       $0F
0008923A E701                       	dc.b	smpsNoAttack, $01
0008923C E10B                       	smpsAlterNote       $0B
0008923E E701                       	dc.b	smpsNoAttack, $01
00089240 E105                       	smpsAlterNote       $05
00089242 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089246 E108                       	smpsAlterNote       $08
00089248 E701                       	dc.b	smpsNoAttack, $01
0008924A E10E                       	smpsAlterNote       $0E
0008924C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089250 E108                       	smpsAlterNote       $08
00089252 E701                       	dc.b	smpsNoAttack, $01
00089254 E105                       	smpsAlterNote       $05
00089256 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008925A E10B                       	smpsAlterNote       $0B
0008925C E701                       	dc.b	smpsNoAttack, $01
0008925E E10F                       	smpsAlterNote       $0F
00089260 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00089264 E107                       	smpsAlterNote       $07
00089266 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008926A E108                       	smpsAlterNote       $08
0008926C C103                       	dc.b	nE5, $03
0008926E E109                       	smpsAlterNote       $09
00089270 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00089278 E10B                       	smpsAlterNote       $0B
0008927A C606 8001                  	dc.b	nA5, $06, nRst, $01
0008927E E107                       	smpsAlterNote       $07
00089280 BF03                       	dc.b	nD5, $03
00089282 E106                       	smpsAlterNote       $06
00089284 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00089288 E107                       	smpsAlterNote       $07
0008928A CB03                       	dc.b	nD6, $03
0008928C E10C                       	smpsAlterNote       $0C
0008928E C704 8001                  	dc.b	nBb5, $04, nRst, $01
00089292 E10B                       	smpsAlterNote       $0B
00089294 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089298 E109                       	smpsAlterNote       $09
0008929A C404                       	dc.b	nG5, $04
0008929C E10B                       	smpsAlterNote       $0B
0008929E C60D                       	dc.b	nA5, $0D
000892A0 E108                       	smpsAlterNote       $08
000892A2 E701                       	dc.b	smpsNoAttack, $01
000892A4 E104                       	smpsAlterNote       $04
000892A6 E701                       	dc.b	smpsNoAttack, $01
000892A8 E108                       	smpsAlterNote       $08
000892AA E701                       	dc.b	smpsNoAttack, $01
000892AC E10B                       	smpsAlterNote       $0B
000892AE E701                       	dc.b	smpsNoAttack, $01
000892B0 E10F                       	smpsAlterNote       $0F
000892B2 E701                       	dc.b	smpsNoAttack, $01
000892B4 E10B                       	smpsAlterNote       $0B
000892B6 E701                       	dc.b	smpsNoAttack, $01
000892B8 E105                       	smpsAlterNote       $05
000892BA E701                       	dc.b	smpsNoAttack, $01
000892BC E104                       	smpsAlterNote       $04
000892BE E701                       	dc.b	smpsNoAttack, $01
000892C0 E108                       	smpsAlterNote       $08
000892C2 E701                       	dc.b	smpsNoAttack, $01
000892C4 E10E                       	smpsAlterNote       $0E
000892C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892CA E10B                       	smpsAlterNote       $0B
000892CC E701                       	dc.b	smpsNoAttack, $01
000892CE E105                       	smpsAlterNote       $05
000892D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892D4 E10B                       	smpsAlterNote       $0B
000892D6 E701                       	dc.b	smpsNoAttack, $01
000892D8 E10E                       	smpsAlterNote       $0E
000892DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892DE E108                       	smpsAlterNote       $08
000892E0 E701                       	dc.b	smpsNoAttack, $01
000892E2 E104                       	smpsAlterNote       $04
000892E4 E701                       	dc.b	smpsNoAttack, $01
000892E6 E105                       	smpsAlterNote       $05
000892E8 E701                       	dc.b	smpsNoAttack, $01
000892EA E10B                       	smpsAlterNote       $0B
000892EC E701                       	dc.b	smpsNoAttack, $01
000892EE E10F                       	smpsAlterNote       $0F
000892F0 E701                       	dc.b	smpsNoAttack, $01
000892F2 E10B                       	smpsAlterNote       $0B
000892F4 E701                       	dc.b	smpsNoAttack, $01
000892F6 E108                       	smpsAlterNote       $08
000892F8 E701                       	dc.b	smpsNoAttack, $01
000892FA E105                       	smpsAlterNote       $05
000892FC 8001                       	dc.b	nRst, $01
000892FE E109                       	smpsAlterNote       $09
00089300 C401                       	dc.b	nG5, $01
00089302 E10B                       	smpsAlterNote       $0B
00089304 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
0008930D E109                       	smpsAlterNote       $09
0008930F C404 8001                  	dc.b	nG5, $04, nRst, $01
00089313 E10B                       	smpsAlterNote       $0B
00089315 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089319 E107                       	smpsAlterNote       $07
0008931B BF0D                       	dc.b	nD5, $0D
0008931D E101                       	smpsAlterNote       $01
0008931F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089323 E104                       	smpsAlterNote       $04
00089325 E701                       	dc.b	smpsNoAttack, $01
00089327 E10A                       	smpsAlterNote       $0A
00089329 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008932D E104                       	smpsAlterNote       $04
0008932F E701                       	dc.b	smpsNoAttack, $01
00089331 E101                       	smpsAlterNote       $01
00089333 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089337 E107                       	smpsAlterNote       $07
00089339 E701                       	dc.b	smpsNoAttack, $01
0008933B E10B                       	smpsAlterNote       $0B
0008933D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089341 E108                       	smpsAlterNote       $08
00089343 C101                       	dc.b	nE5, $01
00089345 E109                       	smpsAlterNote       $09
00089347 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008934C E10B                       	smpsAlterNote       $0B
0008934E C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00089356 E108                       	smpsAlterNote       $08
00089358 CD06                       	dc.b	nE6, $06
0008935A E109                       	smpsAlterNote       $09
0008935C CE07                       	dc.b	nF6, $07
0008935E E108                       	smpsAlterNote       $08
00089360 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00089364 E106                       	smpsAlterNote       $06
00089366 C903                       	dc.b	nC6, $03
00089368 E109                       	smpsAlterNote       $09
0008936A C403 8001                  	dc.b	nG5, $03, nRst, $01
0008936E E10C                       	smpsAlterNote       $0C
00089370 C70D                       	dc.b	nBb5, $0D
00089372 E106                       	smpsAlterNote       $06
00089374 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089378 E109                       	smpsAlterNote       $09
0008937A E701                       	dc.b	smpsNoAttack, $01
0008937C E10F                       	smpsAlterNote       $0F
0008937E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089382 E109                       	smpsAlterNote       $09
00089384 E701                       	dc.b	smpsNoAttack, $01
00089386 E106                       	smpsAlterNote       $06
00089388 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008938C E10C                       	smpsAlterNote       $0C
0008938E E701                       	dc.b	smpsNoAttack, $01
00089390 E110                       	smpsAlterNote       $10
00089392 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089396 E10B                       	smpsAlterNote       $0B
00089398 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008939C E105                       	smpsAlterNote       $05
0008939E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893A2 E10B                       	smpsAlterNote       $0B
000893A4 E701                       	dc.b	smpsNoAttack, $01
000893A6 E10E                       	smpsAlterNote       $0E
000893A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893AC E108                       	smpsAlterNote       $08
000893AE E701                       	dc.b	smpsNoAttack, $01
000893B0 E104                       	smpsAlterNote       $04
000893B2 E701                       	dc.b	smpsNoAttack, $01
000893B4 E105                       	smpsAlterNote       $05
000893B6 E701                       	dc.b	smpsNoAttack, $01
000893B8 E10B                       	smpsAlterNote       $0B
000893BA E701                       	dc.b	smpsNoAttack, $01
000893BC E10F                       	smpsAlterNote       $0F
000893BE E701                       	dc.b	smpsNoAttack, $01
000893C0 E10B                       	smpsAlterNote       $0B
000893C2 E701                       	dc.b	smpsNoAttack, $01
000893C4 E108                       	smpsAlterNote       $08
000893C6 E701                       	dc.b	smpsNoAttack, $01
000893C8 E104                       	smpsAlterNote       $04
000893CA E701                       	dc.b	smpsNoAttack, $01
000893CC E108                       	smpsAlterNote       $08
000893CE E701                       	dc.b	smpsNoAttack, $01
000893D0 E10E                       	smpsAlterNote       $0E
000893D2 E701                       	dc.b	smpsNoAttack, $01
000893D4 E10F                       	smpsAlterNote       $0F
000893D6 E701                       	dc.b	smpsNoAttack, $01
000893D8 E10B                       	smpsAlterNote       $0B
000893DA E701                       	dc.b	smpsNoAttack, $01
000893DC E105                       	smpsAlterNote       $05
000893DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893E2 E108                       	smpsAlterNote       $08
000893E4 E701                       	dc.b	smpsNoAttack, $01
000893E6 E10E                       	smpsAlterNote       $0E
000893E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893EC E108                       	smpsAlterNote       $08
000893EE E701                       	dc.b	smpsNoAttack, $01
000893F0 E105                       	smpsAlterNote       $05
000893F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893F6 E10B                       	smpsAlterNote       $0B
000893F8 E701                       	dc.b	smpsNoAttack, $01
000893FA E10F                       	smpsAlterNote       $0F
000893FC E701                       	dc.b	smpsNoAttack, $01
000893FE E10E                       	smpsAlterNote       $0E
00089400 E701                       	dc.b	smpsNoAttack, $01
00089402 E108                       	smpsAlterNote       $08
00089404 E701                       	dc.b	smpsNoAttack, $01
00089406 E104                       	smpsAlterNote       $04
00089408 E701                       	dc.b	smpsNoAttack, $01
0008940A E108                       	smpsAlterNote       $08
0008940C E701                       	dc.b	smpsNoAttack, $01
0008940E E10E                       	smpsAlterNote       $0E
00089410 E701                       	dc.b	smpsNoAttack, $01
00089412 E10F                       	smpsAlterNote       $0F
00089414 E701                       	dc.b	smpsNoAttack, $01
00089416 E10B                       	smpsAlterNote       $0B
00089418 E701                       	dc.b	smpsNoAttack, $01
0008941A E105                       	smpsAlterNote       $05
0008941C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089420 E108                       	smpsAlterNote       $08
00089422 E701                       	dc.b	smpsNoAttack, $01
00089424 E10E                       	smpsAlterNote       $0E
00089426 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008942A E108                       	smpsAlterNote       $08
0008942C E701                       	dc.b	smpsNoAttack, $01
0008942E E105                       	smpsAlterNote       $05
00089430 E701                       	dc.b	smpsNoAttack, $01
00089432 E10B                       	smpsAlterNote       $0B
00089434 C60D                       	dc.b	nA5, $0D
00089436 E108                       	smpsAlterNote       $08
00089438 E701                       	dc.b	smpsNoAttack, $01
0008943A E104                       	smpsAlterNote       $04
0008943C E701                       	dc.b	smpsNoAttack, $01
0008943E E105                       	smpsAlterNote       $05
00089440 E701                       	dc.b	smpsNoAttack, $01
00089442 E10B                       	smpsAlterNote       $0B
00089444 E701                       	dc.b	smpsNoAttack, $01
00089446 E10F                       	smpsAlterNote       $0F
00089448 E701                       	dc.b	smpsNoAttack, $01
0008944A E10B                       	smpsAlterNote       $0B
0008944C E701                       	dc.b	smpsNoAttack, $01
0008944E E108                       	smpsAlterNote       $08
00089450 E701                       	dc.b	smpsNoAttack, $01
00089452 E104                       	smpsAlterNote       $04
00089454 E701                       	dc.b	smpsNoAttack, $01
00089456 E108                       	smpsAlterNote       $08
00089458 E701                       	dc.b	smpsNoAttack, $01
0008945A E10E                       	smpsAlterNote       $0E
0008945C E701                       	dc.b	smpsNoAttack, $01
0008945E E10F                       	smpsAlterNote       $0F
00089460 E701                       	dc.b	smpsNoAttack, $01
00089464 E109                       	smpsAlterNote       $09
00089466 E6FF                       	smpsAlterVol        $FF
00089468 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00089472 E108                       	smpsAlterNote       $08
00089474 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008947A E107                       	smpsAlterNote       $07
0008947C E601                       	smpsAlterVol        $01
0008947E BF03                       	dc.b	nD5, $03
00089480 E108                       	smpsAlterNote       $08
00089482 C103 8001                  	dc.b	nE5, $03, nRst, $01
00089486 E109                       	smpsAlterNote       $09
00089488 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008948E E10B                       	smpsAlterNote       $0B
00089490 C606 8001                  	dc.b	nA5, $06, nRst, $01
00089494 E107                       	smpsAlterNote       $07
00089496 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008949A E106                       	smpsAlterNote       $06
0008949C C90D                       	dc.b	nC6, $0D
0008949E E103                       	smpsAlterNote       $03
000894A0 E701                       	dc.b	smpsNoAttack, $01
000894A2 E1FF                       	smpsAlterNote       $FF
000894A4 E701                       	dc.b	smpsNoAttack, $01
000894A6 E103                       	smpsAlterNote       $03
000894A8 E701                       	dc.b	smpsNoAttack, $01
000894AA E109                       	smpsAlterNote       $09
000894AC E701                       	dc.b	smpsNoAttack, $01
000894AE E10A                       	smpsAlterNote       $0A
000894B0 E701                       	dc.b	smpsNoAttack, $01
000894B2 E106                       	smpsAlterNote       $06
000894B4 E701                       	dc.b	smpsNoAttack, $01
000894B6 E100                       	smpsAlterNote       $00
000894B8 E701                       	dc.b	smpsNoAttack, $01
000894BA E10C                       	smpsAlterNote       $0C
000894BC C703 8001                  	dc.b	nBb5, $03, nRst, $01
000894C0 E10B                       	smpsAlterNote       $0B
000894C2 C603                       	dc.b	nA5, $03
000894C4 E109                       	smpsAlterNote       $09
000894C6 C403 8001                  	dc.b	nG5, $03, nRst, $01
000894CA E10B                       	smpsAlterNote       $0B
000894CC C60D                       	dc.b	nA5, $0D
000894CE E105                       	smpsAlterNote       $05
000894D0 E701                       	dc.b	smpsNoAttack, $01
000894D2 E104                       	smpsAlterNote       $04
000894D4 E701                       	dc.b	smpsNoAttack, $01
000894D6 E108                       	smpsAlterNote       $08
000894D8 E701                       	dc.b	smpsNoAttack, $01
000894DA E10E                       	smpsAlterNote       $0E
000894DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894E0 E10B                       	smpsAlterNote       $0B
000894E2 E701                       	dc.b	smpsNoAttack, $01
000894E4 E105                       	smpsAlterNote       $05
000894E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894EA E10B                       	smpsAlterNote       $0B
000894EC E701                       	dc.b	smpsNoAttack, $01
000894EE E10E                       	smpsAlterNote       $0E
000894F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894F4 E108                       	smpsAlterNote       $08
000894F6 E701                       	dc.b	smpsNoAttack, $01
000894F8 E104                       	smpsAlterNote       $04
000894FA E701                       	dc.b	smpsNoAttack, $01
000894FC E105                       	smpsAlterNote       $05
000894FE E701                       	dc.b	smpsNoAttack, $01
00089500 E10B                       	smpsAlterNote       $0B
00089502 E701                       	dc.b	smpsNoAttack, $01
00089504 E10F                       	smpsAlterNote       $0F
00089506 E701                       	dc.b	smpsNoAttack, $01
00089508 E10B                       	smpsAlterNote       $0B
0008950A E701                       	dc.b	smpsNoAttack, $01
0008950C E108                       	smpsAlterNote       $08
0008950E E701                       	dc.b	smpsNoAttack, $01
00089510 E104                       	smpsAlterNote       $04
00089512 E701                       	dc.b	smpsNoAttack, $01
00089514 E108                       	smpsAlterNote       $08
00089516 E701                       	dc.b	smpsNoAttack, $01
00089518 E10E                       	smpsAlterNote       $0E
0008951A E701                       	dc.b	smpsNoAttack, $01
0008951C E10F                       	smpsAlterNote       $0F
0008951E E701                       	dc.b	smpsNoAttack, $01
00089520 E10B                       	smpsAlterNote       $0B
00089522 E701                       	dc.b	smpsNoAttack, $01
00089524 E105                       	smpsAlterNote       $05
00089526 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008952A E108                       	smpsAlterNote       $08
0008952C E701                       	dc.b	smpsNoAttack, $01
0008952E E10E                       	smpsAlterNote       $0E
00089530 E701                       	dc.b	smpsNoAttack, $01
00089532 E10F                       	smpsAlterNote       $0F
00089534 800F                       	dc.b	nRst, $0F
00089536 E107                       	smpsAlterNote       $07
00089538 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008953C E108                       	smpsAlterNote       $08
0008953E C103                       	dc.b	nE5, $03
00089540 E109                       	smpsAlterNote       $09
00089542 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00089548 E10B                       	smpsAlterNote       $0B
0008954A C606 8001                  	dc.b	nA5, $06, nRst, $01
0008954E E107                       	smpsAlterNote       $07
00089550 BF03                       	dc.b	nD5, $03
00089552 E106                       	smpsAlterNote       $06
00089554 C90E                       	dc.b	nC6, $0E
00089556 E107                       	smpsAlterNote       $07
00089558 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008955C E10C                       	smpsAlterNote       $0C
0008955E C704                       	dc.b	nBb5, $04
00089560 E10B                       	smpsAlterNote       $0B
00089562 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089566 E109                       	smpsAlterNote       $09
00089568 C404                       	dc.b	nG5, $04
0008956A E10B                       	smpsAlterNote       $0B
0008956C C60D                       	dc.b	nA5, $0D
0008956E E108                       	smpsAlterNote       $08
00089570 E701                       	dc.b	smpsNoAttack, $01
00089572 E105                       	smpsAlterNote       $05
00089574 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089578 E10B                       	smpsAlterNote       $0B
0008957A E701                       	dc.b	smpsNoAttack, $01
0008957C E10F                       	smpsAlterNote       $0F
0008957E E701                       	dc.b	smpsNoAttack, $01
00089580 E10E                       	smpsAlterNote       $0E
00089582 E701                       	dc.b	smpsNoAttack, $01
00089584 E108                       	smpsAlterNote       $08
00089586 E701                       	dc.b	smpsNoAttack, $01
00089588 E104                       	smpsAlterNote       $04
0008958A E701                       	dc.b	smpsNoAttack, $01
0008958C E108                       	smpsAlterNote       $08
0008958E E701                       	dc.b	smpsNoAttack, $01
00089590 E10B                       	smpsAlterNote       $0B
00089592 E701                       	dc.b	smpsNoAttack, $01
00089594 E10F                       	smpsAlterNote       $0F
00089596 E701                       	dc.b	smpsNoAttack, $01
00089598 E10B                       	smpsAlterNote       $0B
0008959A E701                       	dc.b	smpsNoAttack, $01
0008959C E105                       	smpsAlterNote       $05
0008959E E701                       	dc.b	smpsNoAttack, $01
000895A0 E104                       	smpsAlterNote       $04
000895A2 E701                       	dc.b	smpsNoAttack, $01
000895A4 E108                       	smpsAlterNote       $08
000895A6 E701                       	dc.b	smpsNoAttack, $01
000895A8 E10E                       	smpsAlterNote       $0E
000895AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895AE E10B                       	smpsAlterNote       $0B
000895B0 E701                       	dc.b	smpsNoAttack, $01
000895B2 E105                       	smpsAlterNote       $05
000895B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895B8 E10B                       	smpsAlterNote       $0B
000895BA E701                       	dc.b	smpsNoAttack, $01
000895BC E10E                       	smpsAlterNote       $0E
000895BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895C2 E108                       	smpsAlterNote       $08
000895C4 E701                       	dc.b	smpsNoAttack, $01
000895C6 E105                       	smpsAlterNote       $05
000895C8 8001                       	dc.b	nRst, $01
000895CA E109                       	smpsAlterNote       $09
000895CC C402                       	dc.b	nG5, $02
000895CE E10B                       	smpsAlterNote       $0B
000895D0 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000895D9 E109                       	smpsAlterNote       $09
000895DB C404                       	dc.b	nG5, $04
000895DD E10B                       	smpsAlterNote       $0B
000895DF C604 8001                  	dc.b	nA5, $04, nRst, $01
000895E3 E107                       	smpsAlterNote       $07
000895E5 BF0D                       	dc.b	nD5, $0D
000895E7 E101                       	smpsAlterNote       $01
000895E9 E701                       	dc.b	smpsNoAttack, $01
000895EB E100                       	smpsAlterNote       $00
000895ED E701                       	dc.b	smpsNoAttack, $01
000895EF E104                       	smpsAlterNote       $04
000895F1 E701                       	dc.b	smpsNoAttack, $01
000895F3 E10A                       	smpsAlterNote       $0A
000895F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895F9 E107                       	smpsAlterNote       $07
000895FB E701                       	dc.b	smpsNoAttack, $01
000895FD E101                       	smpsAlterNote       $01
000895FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089603 E107                       	smpsAlterNote       $07
00089605 E701                       	dc.b	smpsNoAttack, $01
00089607 E10A                       	smpsAlterNote       $0A
00089609 E701                       	dc.b	smpsNoAttack, $01
0008960B E10B                       	smpsAlterNote       $0B
0008960D 8001                       	dc.b	nRst, $01
0008960F E108                       	smpsAlterNote       $08
00089611 C101                       	dc.b	nE5, $01
00089613 E109                       	smpsAlterNote       $09
00089615 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008961A E10B                       	smpsAlterNote       $0B
0008961C C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00089624 E108                       	smpsAlterNote       $08
00089626 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008962A E109                       	smpsAlterNote       $09
0008962C CE06 8001                  	dc.b	nF6, $06, nRst, $01
00089630 E108                       	smpsAlterNote       $08
00089632 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00089636 E106                       	smpsAlterNote       $06
00089638 C903                       	dc.b	nC6, $03
0008963A E109                       	smpsAlterNote       $09
0008963C C403 8001                  	dc.b	nG5, $03, nRst, $01
00089640 E10C                       	smpsAlterNote       $0C
00089642 C70D                       	dc.b	nBb5, $0D
00089644 E109                       	smpsAlterNote       $09
00089646 E701                       	dc.b	smpsNoAttack, $01
00089648 E105                       	smpsAlterNote       $05
0008964A E701                       	dc.b	smpsNoAttack, $01
0008964C E109                       	smpsAlterNote       $09
0008964E E701                       	dc.b	smpsNoAttack, $01
00089650 E10F                       	smpsAlterNote       $0F
00089652 E701                       	dc.b	smpsNoAttack, $01
00089654 E110                       	smpsAlterNote       $10
00089656 E701                       	dc.b	smpsNoAttack, $01
00089658 E10C                       	smpsAlterNote       $0C
0008965A E701                       	dc.b	smpsNoAttack, $01
0008965C E106                       	smpsAlterNote       $06
0008965E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089662 E109                       	smpsAlterNote       $09
00089664 E701                       	dc.b	smpsNoAttack, $01
00089666 E10F                       	smpsAlterNote       $0F
00089668 E701                       	dc.b	smpsNoAttack, $01
0008966A E110                       	smpsAlterNote       $10
0008966C 8001                       	dc.b	nRst, $01
0008966E E10B                       	smpsAlterNote       $0B
00089670 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00089676 E105                       	smpsAlterNote       $05
00089678 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008967C E108                       	smpsAlterNote       $08
0008967E E701                       	dc.b	smpsNoAttack, $01
00089680 E10E                       	smpsAlterNote       $0E
00089682 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089686 E108                       	smpsAlterNote       $08
00089688 E701                       	dc.b	smpsNoAttack, $01
0008968A E105                       	smpsAlterNote       $05
0008968C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089690 E10B                       	smpsAlterNote       $0B
00089692 E701                       	dc.b	smpsNoAttack, $01
00089694 E10F                       	smpsAlterNote       $0F
00089696 E701                       	dc.b	smpsNoAttack, $01
00089698 E10E                       	smpsAlterNote       $0E
0008969A E701                       	dc.b	smpsNoAttack, $01
0008969C E108                       	smpsAlterNote       $08
0008969E E701                       	dc.b	smpsNoAttack, $01
000896A0 E104                       	smpsAlterNote       $04
000896A2 E701                       	dc.b	smpsNoAttack, $01
000896A4 E108                       	smpsAlterNote       $08
000896A6 E701                       	dc.b	smpsNoAttack, $01
000896A8 E10B                       	smpsAlterNote       $0B
000896AA E701                       	dc.b	smpsNoAttack, $01
000896AC E10F                       	smpsAlterNote       $0F
000896AE E701                       	dc.b	smpsNoAttack, $01
000896B0 E10B                       	smpsAlterNote       $0B
000896B2 E701                       	dc.b	smpsNoAttack, $01
000896B4 E105                       	smpsAlterNote       $05
000896B6 E701                       	dc.b	smpsNoAttack, $01
000896B8 E104                       	smpsAlterNote       $04
000896BA E701                       	dc.b	smpsNoAttack, $01
000896BC E108                       	smpsAlterNote       $08
000896BE E701                       	dc.b	smpsNoAttack, $01
000896C0 E10E                       	smpsAlterNote       $0E
000896C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896C6 E10B                       	smpsAlterNote       $0B
000896C8 E701                       	dc.b	smpsNoAttack, $01
000896CA E105                       	smpsAlterNote       $05
000896CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896D0 E10B                       	smpsAlterNote       $0B
000896D2 E701                       	dc.b	smpsNoAttack, $01
000896D4 E10E                       	smpsAlterNote       $0E
000896D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896DA E108                       	smpsAlterNote       $08
000896DC E701                       	dc.b	smpsNoAttack, $01
000896DE E104                       	smpsAlterNote       $04
000896E0 E701                       	dc.b	smpsNoAttack, $01
000896E2 E105                       	smpsAlterNote       $05
000896E4 E701                       	dc.b	smpsNoAttack, $01
000896E6 E10B                       	smpsAlterNote       $0B
000896E8 E701                       	dc.b	smpsNoAttack, $01
000896EA E10F                       	smpsAlterNote       $0F
000896EC E701                       	dc.b	smpsNoAttack, $01
000896EE E10B                       	smpsAlterNote       $0B
000896F0 E701                       	dc.b	smpsNoAttack, $01
000896F2 E108                       	smpsAlterNote       $08
000896F4 E701                       	dc.b	smpsNoAttack, $01
000896F6 E104                       	smpsAlterNote       $04
000896F8 E701                       	dc.b	smpsNoAttack, $01
000896FA E108                       	smpsAlterNote       $08
000896FC E701                       	dc.b	smpsNoAttack, $01
000896FE E10E                       	smpsAlterNote       $0E
00089700 E701                       	dc.b	smpsNoAttack, $01
00089702 E10F                       	smpsAlterNote       $0F
00089704 E701                       	dc.b	smpsNoAttack, $01
00089706 E10B                       	smpsAlterNote       $0B
00089708 E701                       	dc.b	smpsNoAttack, $01
0008970A E105                       	smpsAlterNote       $05
0008970C E701                       	dc.b	smpsNoAttack, $01
0008970E E10B                       	smpsAlterNote       $0B
00089710 C60E                       	dc.b	nA5, $0E
00089712 E105                       	smpsAlterNote       $05
00089714 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089718 E10B                       	smpsAlterNote       $0B
0008971A E701                       	dc.b	smpsNoAttack, $01
0008971C E10E                       	smpsAlterNote       $0E
0008971E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089722 E108                       	smpsAlterNote       $08
00089724 E701                       	dc.b	smpsNoAttack, $01
00089726 E104                       	smpsAlterNote       $04
00089728 E701                       	dc.b	smpsNoAttack, $01
0008972A E105                       	smpsAlterNote       $05
0008972C E701                       	dc.b	smpsNoAttack, $01
0008972E E10B                       	smpsAlterNote       $0B
00089730 E701                       	dc.b	smpsNoAttack, $01
00089732 E10F                       	smpsAlterNote       $0F
00089734 E701                       	dc.b	smpsNoAttack, $01
00089736 E10B                       	smpsAlterNote       $0B
00089738 E701                       	dc.b	smpsNoAttack, $01
0008973A E108                       	smpsAlterNote       $08
0008973C E701                       	dc.b	smpsNoAttack, $01
0008973E E104                       	smpsAlterNote       $04
00089740 E701                       	dc.b	smpsNoAttack, $01
00089742 E108                       	smpsAlterNote       $08
00089744 E701                       	dc.b	smpsNoAttack, $01
00089746 E10E                       	smpsAlterNote       $0E
00089748 E701                       	dc.b	smpsNoAttack, $01
0008974A E10F                       	smpsAlterNote       $0F
0008974C E701                       	dc.b	smpsNoAttack, $01
0008974E E10B                       	smpsAlterNote       $0B
00089750 E701                       	dc.b	smpsNoAttack, $01
00089752 E105                       	smpsAlterNote       $05
00089754 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089758 E108                       	smpsAlterNote       $08
0008975A E701                       	dc.b	smpsNoAttack, $01
0008975C E10E                       	smpsAlterNote       $0E
0008975E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089762 E108                       	smpsAlterNote       $08
00089764 E701                       	dc.b	smpsNoAttack, $01
00089766 E105                       	smpsAlterNote       $05
00089768 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008976C E10B                       	smpsAlterNote       $0B
0008976E E701                       	dc.b	smpsNoAttack, $01
00089770 E10F                       	smpsAlterNote       $0F
00089772 E701                       	dc.b	smpsNoAttack, $01
00089774 E10E                       	smpsAlterNote       $0E
00089776 E701                       	dc.b	smpsNoAttack, $01
00089778 E108                       	smpsAlterNote       $08
0008977A E701                       	dc.b	smpsNoAttack, $01
0008977C E104                       	smpsAlterNote       $04
0008977E E701                       	dc.b	smpsNoAttack, $01
00089780 E108                       	smpsAlterNote       $08
00089782 E701                       	dc.b	smpsNoAttack, $01
00089784 E10E                       	smpsAlterNote       $0E
00089786 E701                       	dc.b	smpsNoAttack, $01
00089788 E10F                       	smpsAlterNote       $0F
0008978A E701                       	dc.b	smpsNoAttack, $01
0008978C E10B                       	smpsAlterNote       $0B
0008978E E701                       	dc.b	smpsNoAttack, $01
00089790 E105                       	smpsAlterNote       $05
00089792 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089796 E108                       	smpsAlterNote       $08
00089798 E701                       	dc.b	smpsNoAttack, $01
0008979A E10E                       	smpsAlterNote       $0E
0008979C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897A0 E108                       	smpsAlterNote       $08
000897A2 E701                       	dc.b	smpsNoAttack, $01
000897A4 E105                       	smpsAlterNote       $05
000897A6 E701                       	dc.b	smpsNoAttack, $01
000897AA E10B                       	smpsAlterNote       $0B
000897AC E6FD                       	smpsAlterVol        $FD
000897AE C604 8001                  	dc.b	nA5, $04, nRst, $01
000897B2 E109                       	smpsAlterNote       $09
000897B4 C404                       	dc.b	nG5, $04
000897B6 E10B                       	smpsAlterNote       $0B
000897B8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000897BC E107                       	smpsAlterNote       $07
000897BE BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000897C4 E10B                       	smpsAlterNote       $0B
000897C6 C604                       	dc.b	nA5, $04
000897C8 E109                       	smpsAlterNote       $09
000897CA C404 8001                  	dc.b	nG5, $04, nRst, $01
000897CE E10B                       	smpsAlterNote       $0B
000897D0 C604                       	dc.b	nA5, $04
000897D2 E108                       	smpsAlterNote       $08
000897D4 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000897DC E106                       	smpsAlterNote       $06
000897DE C904 8001                  	dc.b	nC6, $04, nRst, $01
000897E2 E10C                       	smpsAlterNote       $0C
000897E4 C704                       	dc.b	nBb5, $04
000897E6 E10B                       	smpsAlterNote       $0B
000897E8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000897EC E109                       	smpsAlterNote       $09
000897EE C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000897F8 E10B                       	smpsAlterNote       $0B
000897FA C60D                       	dc.b	nA5, $0D
000897FC E108                       	smpsAlterNote       $08
000897FE E701                       	dc.b	smpsNoAttack, $01
00089800 E104                       	smpsAlterNote       $04
00089802 E701                       	dc.b	smpsNoAttack, $01
00089804 E108                       	smpsAlterNote       $08
00089806 E701                       	dc.b	smpsNoAttack, $01
00089808 E10E                       	smpsAlterNote       $0E
0008980A E701                       	dc.b	smpsNoAttack, $01
0008980C E10F                       	smpsAlterNote       $0F
0008980E E701                       	dc.b	smpsNoAttack, $01
00089810 E10B                       	smpsAlterNote       $0B
00089812 E701                       	dc.b	smpsNoAttack, $01
00089814 E105                       	smpsAlterNote       $05
00089816 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008981A E108                       	smpsAlterNote       $08
0008981C E701                       	dc.b	smpsNoAttack, $01
0008981E E10E                       	smpsAlterNote       $0E
00089820 E701                       	dc.b	smpsNoAttack, $01
00089822 E10F                       	smpsAlterNote       $0F
00089824 8001                       	dc.b	nRst, $01
00089826 E109                       	smpsAlterNote       $09
00089828 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008982E E108                       	smpsAlterNote       $08
00089830 C10D                       	dc.b	nE5, $0D
00089832 E102                       	smpsAlterNote       $02
00089834 E701                       	dc.b	smpsNoAttack, $01
00089836 E101                       	smpsAlterNote       $01
00089838 E701                       	dc.b	smpsNoAttack, $01
0008983A E105                       	smpsAlterNote       $05
0008983C E701                       	dc.b	smpsNoAttack, $01
0008983E E10B                       	smpsAlterNote       $0B
00089840 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089844 E108                       	smpsAlterNote       $08
00089846 E701                       	dc.b	smpsNoAttack, $01
00089848 E102                       	smpsAlterNote       $02
0008984A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008984E E108                       	smpsAlterNote       $08
00089850 E701                       	dc.b	smpsNoAttack, $01
00089852 E10B                       	smpsAlterNote       $0B
00089854 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089858 E105                       	smpsAlterNote       $05
0008985A E701                       	dc.b	smpsNoAttack, $01
0008985C E101                       	smpsAlterNote       $01
0008985E E701                       	dc.b	smpsNoAttack, $01
00089860 E102                       	smpsAlterNote       $02
00089862 E701                       	dc.b	smpsNoAttack, $01
00089864 E108                       	smpsAlterNote       $08
00089866 E701                       	dc.b	smpsNoAttack, $01
00089868 E10C                       	smpsAlterNote       $0C
0008986A E701                       	dc.b	smpsNoAttack, $01
0008986C E108                       	smpsAlterNote       $08
0008986E E701                       	dc.b	smpsNoAttack, $01
00089870 E105                       	smpsAlterNote       $05
00089872 E701                       	dc.b	smpsNoAttack, $01
00089874 E101                       	smpsAlterNote       $01
00089876 E701                       	dc.b	smpsNoAttack, $01
00089878 E105                       	smpsAlterNote       $05
0008987A E701                       	dc.b	smpsNoAttack, $01
0008987C E10B                       	smpsAlterNote       $0B
0008987E E701                       	dc.b	smpsNoAttack, $01
00089880 E10C                       	smpsAlterNote       $0C
00089882 E701                       	dc.b	smpsNoAttack, $01
00089884 E108                       	smpsAlterNote       $08
00089886 E701                       	dc.b	smpsNoAttack, $01
00089888 E102                       	smpsAlterNote       $02
0008988A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008988E E105                       	smpsAlterNote       $05
00089890 E701                       	dc.b	smpsNoAttack, $01
00089892 E10B                       	smpsAlterNote       $0B
00089894 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089898 E105                       	smpsAlterNote       $05
0008989A E701                       	dc.b	smpsNoAttack, $01
0008989C E102                       	smpsAlterNote       $02
0008989E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898A2 E108                       	smpsAlterNote       $08
000898A4 E701                       	dc.b	smpsNoAttack, $01
000898A6 E10C                       	smpsAlterNote       $0C
000898A8 E701                       	dc.b	smpsNoAttack, $01
000898AA E10B                       	smpsAlterNote       $0B
000898AC E701                       	dc.b	smpsNoAttack, $01
000898AE E105                       	smpsAlterNote       $05
000898B0 E701                       	dc.b	smpsNoAttack, $01
000898B2 E101                       	smpsAlterNote       $01
000898B4 E701                       	dc.b	smpsNoAttack, $01
000898B6 E105                       	smpsAlterNote       $05
000898B8 E701                       	dc.b	smpsNoAttack, $01
000898BA E108                       	smpsAlterNote       $08
000898BC E701                       	dc.b	smpsNoAttack, $01
000898BE E10C                       	smpsAlterNote       $0C
000898C0 E701                       	dc.b	smpsNoAttack, $01
000898C2 E108                       	smpsAlterNote       $08
000898C4 E701                       	dc.b	smpsNoAttack, $01
000898C6 E102                       	smpsAlterNote       $02
000898C8 E701                       	dc.b	smpsNoAttack, $01
000898CA E101                       	smpsAlterNote       $01
000898CC E701                       	dc.b	smpsNoAttack, $01
000898CE E105                       	smpsAlterNote       $05
000898D0 E701                       	dc.b	smpsNoAttack, $01
000898D2 E10B                       	smpsAlterNote       $0B
000898D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898D8 E108                       	smpsAlterNote       $08
000898DA E701                       	dc.b	smpsNoAttack, $01
000898DC E102                       	smpsAlterNote       $02
000898DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898E2 E108                       	smpsAlterNote       $08
000898E4 E701                       	dc.b	smpsNoAttack, $01
000898E6 E10B                       	smpsAlterNote       $0B
000898E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898EC E105                       	smpsAlterNote       $05
000898EE E701                       	dc.b	smpsNoAttack, $01
000898F0 E101                       	smpsAlterNote       $01
000898F2 E701                       	dc.b	smpsNoAttack, $01
000898F4 E102                       	smpsAlterNote       $02
000898F6 E701                       	dc.b	smpsNoAttack, $01
000898F8 E108                       	smpsAlterNote       $08
000898FA E701                       	dc.b	smpsNoAttack, $01
000898FC E10C                       	smpsAlterNote       $0C
000898FE E701                       	dc.b	smpsNoAttack, $01
00089900 E108                       	smpsAlterNote       $08
00089902 E701                       	dc.b	smpsNoAttack, $01
00089904 E105                       	smpsAlterNote       $05
00089906 E701                       	dc.b	smpsNoAttack, $01
00089908 E101                       	smpsAlterNote       $01
0008990A E701                       	dc.b	smpsNoAttack, $01
0008990C E105                       	smpsAlterNote       $05
0008990E E701                       	dc.b	smpsNoAttack, $01
00089910 E10B                       	smpsAlterNote       $0B
00089912 E701                       	dc.b	smpsNoAttack, $01
00089914 E10C                       	smpsAlterNote       $0C
00089916 E701                       	dc.b	smpsNoAttack, $01
00089918 E108                       	smpsAlterNote       $08
0008991A E701                       	dc.b	smpsNoAttack, $01
0008991C E102                       	smpsAlterNote       $02
0008991E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089922 E105                       	smpsAlterNote       $05
00089924 E701                       	dc.b	smpsNoAttack, $01
00089926 E10B                       	smpsAlterNote       $0B
00089928 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008992C E105                       	smpsAlterNote       $05
0008992E E701                       	dc.b	smpsNoAttack, $01
00089930 E101                       	smpsAlterNote       $01
00089932 E701                       	dc.b	smpsNoAttack, $01
00089934 E102                       	smpsAlterNote       $02
00089936 E701                       	dc.b	smpsNoAttack, $01
00089938 E108                       	smpsAlterNote       $08
0008993A E701                       	dc.b	smpsNoAttack, $01
0008993C E10C                       	smpsAlterNote       $0C
0008993E E701                       	dc.b	smpsNoAttack, $01
00089940 E108                       	smpsAlterNote       $08
00089942 E701                       	dc.b	smpsNoAttack, $01
00089944 E105                       	smpsAlterNote       $05
00089946 E701                       	dc.b	smpsNoAttack, $01
00089948 E101                       	smpsAlterNote       $01
0008994A E701                       	dc.b	smpsNoAttack, $01
0008994C E105                       	smpsAlterNote       $05
0008994E E701                       	dc.b	smpsNoAttack, $01
00089950 E10B                       	smpsAlterNote       $0B
00089952 E701                       	dc.b	smpsNoAttack, $01
00089954 E10C                       	smpsAlterNote       $0C
00089956 E701                       	dc.b	smpsNoAttack, $01
00089958 E108                       	smpsAlterNote       $08
0008995A E701                       	dc.b	smpsNoAttack, $01
0008995C E102                       	smpsAlterNote       $02
0008995E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089962 E105                       	smpsAlterNote       $05
00089964 E701                       	dc.b	smpsNoAttack, $01
00089966 E10B                       	smpsAlterNote       $0B
00089968 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008996C E105                       	smpsAlterNote       $05
0008996E E701                       	dc.b	smpsNoAttack, $01
00089970 E102                       	smpsAlterNote       $02
00089972 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089976 E108                       	smpsAlterNote       $08
00089978 E701                       	dc.b	smpsNoAttack, $01
0008997A E10C                       	smpsAlterNote       $0C
0008997C E701                       	dc.b	smpsNoAttack, $01
0008997E E10B                       	smpsAlterNote       $0B
00089980 E701                       	dc.b	smpsNoAttack, $01
00089982 E105                       	smpsAlterNote       $05
00089984 E701                       	dc.b	smpsNoAttack, $01
00089986 E101                       	smpsAlterNote       $01
00089988 E701                       	dc.b	smpsNoAttack, $01
0008998A E105                       	smpsAlterNote       $05
0008998C E701                       	dc.b	smpsNoAttack, $01
0008998E E108                       	smpsAlterNote       $08
00089990 E701                       	dc.b	smpsNoAttack, $01
00089992 E10C                       	smpsAlterNote       $0C
00089994 E701                       	dc.b	smpsNoAttack, $01
00089998 E10B                       	smpsAlterNote       $0B
0008999A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008999E E109                       	smpsAlterNote       $09
000899A0 C404                       	dc.b	nG5, $04
000899A2 E10B                       	smpsAlterNote       $0B
000899A4 C604 8001                  	dc.b	nA5, $04, nRst, $01
000899A8 E107                       	smpsAlterNote       $07
000899AA BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000899B0 E10B                       	smpsAlterNote       $0B
000899B2 C604                       	dc.b	nA5, $04
000899B4 E109                       	smpsAlterNote       $09
000899B6 C404 8001                  	dc.b	nG5, $04, nRst, $01
000899BA E10B                       	smpsAlterNote       $0B
000899BC C604                       	dc.b	nA5, $04
000899BE E108                       	smpsAlterNote       $08
000899C0 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000899C6 E106                       	smpsAlterNote       $06
000899C8 C904 8001                  	dc.b	nC6, $04, nRst, $01
000899CC E10C                       	smpsAlterNote       $0C
000899CE C704                       	dc.b	nBb5, $04
000899D0 E10B                       	smpsAlterNote       $0B
000899D2 C604 8001                  	dc.b	nA5, $04, nRst, $01
000899D6 E109                       	smpsAlterNote       $09
000899D8 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000899E2 E10B                       	smpsAlterNote       $0B
000899E4 C60D                       	dc.b	nA5, $0D
000899E6 E108                       	smpsAlterNote       $08
000899E8 E701                       	dc.b	smpsNoAttack, $01
000899EA E104                       	smpsAlterNote       $04
000899EC E701                       	dc.b	smpsNoAttack, $01
000899EE E108                       	smpsAlterNote       $08
000899F0 E701                       	dc.b	smpsNoAttack, $01
000899F2 E10B                       	smpsAlterNote       $0B
000899F4 E701                       	dc.b	smpsNoAttack, $01
000899F6 E10F                       	smpsAlterNote       $0F
000899F8 E701                       	dc.b	smpsNoAttack, $01
000899FA E10B                       	smpsAlterNote       $0B
000899FC E701                       	dc.b	smpsNoAttack, $01
000899FE E105                       	smpsAlterNote       $05
00089A00 E701                       	dc.b	smpsNoAttack, $01
00089A02 E104                       	smpsAlterNote       $04
00089A04 E701                       	dc.b	smpsNoAttack, $01
00089A06 E108                       	smpsAlterNote       $08
00089A08 E701                       	dc.b	smpsNoAttack, $01
00089A0A E10E                       	smpsAlterNote       $0E
00089A0C E701                       	dc.b	smpsNoAttack, $01
00089A0E E10F                       	smpsAlterNote       $0F
00089A10 8001                       	dc.b	nRst, $01
00089A12 E109                       	smpsAlterNote       $09
00089A14 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00089A1A E108                       	smpsAlterNote       $08
00089A1C C10D                       	dc.b	nE5, $0D
00089A1E E105                       	smpsAlterNote       $05
00089A20 E701                       	dc.b	smpsNoAttack, $01
00089A22 E101                       	smpsAlterNote       $01
00089A24 E701                       	dc.b	smpsNoAttack, $01
00089A26 E105                       	smpsAlterNote       $05
00089A28 E701                       	dc.b	smpsNoAttack, $01
00089A2A E10B                       	smpsAlterNote       $0B
00089A2C E701                       	dc.b	smpsNoAttack, $01
00089A2E E10C                       	smpsAlterNote       $0C
00089A30 E701                       	dc.b	smpsNoAttack, $01
00089A32 E108                       	smpsAlterNote       $08
00089A34 E701                       	dc.b	smpsNoAttack, $01
00089A36 E102                       	smpsAlterNote       $02
00089A38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A3C E105                       	smpsAlterNote       $05
00089A3E E701                       	dc.b	smpsNoAttack, $01
00089A40 E10B                       	smpsAlterNote       $0B
00089A42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A46 E105                       	smpsAlterNote       $05
00089A48 E701                       	dc.b	smpsNoAttack, $01
00089A4A E102                       	smpsAlterNote       $02
00089A4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A50 E108                       	smpsAlterNote       $08
00089A52 E701                       	dc.b	smpsNoAttack, $01
00089A54 E10C                       	smpsAlterNote       $0C
00089A56 E701                       	dc.b	smpsNoAttack, $01
00089A58 E10B                       	smpsAlterNote       $0B
00089A5A E701                       	dc.b	smpsNoAttack, $01
00089A5C E105                       	smpsAlterNote       $05
00089A5E E701                       	dc.b	smpsNoAttack, $01
00089A60 E101                       	smpsAlterNote       $01
00089A62 E701                       	dc.b	smpsNoAttack, $01
00089A64 E105                       	smpsAlterNote       $05
00089A66 E701                       	dc.b	smpsNoAttack, $01
00089A68 E108                       	smpsAlterNote       $08
00089A6A E701                       	dc.b	smpsNoAttack, $01
00089A6C E10C                       	smpsAlterNote       $0C
00089A6E E701                       	dc.b	smpsNoAttack, $01
00089A70 E108                       	smpsAlterNote       $08
00089A72 E701                       	dc.b	smpsNoAttack, $01
00089A74 E102                       	smpsAlterNote       $02
00089A76 E701                       	dc.b	smpsNoAttack, $01
00089A78 E101                       	smpsAlterNote       $01
00089A7A E701                       	dc.b	smpsNoAttack, $01
00089A7C E105                       	smpsAlterNote       $05
00089A7E E701                       	dc.b	smpsNoAttack, $01
00089A80 E10B                       	smpsAlterNote       $0B
00089A82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A86 E108                       	smpsAlterNote       $08
00089A88 E701                       	dc.b	smpsNoAttack, $01
00089A8A E102                       	smpsAlterNote       $02
00089A8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A90 E108                       	smpsAlterNote       $08
00089A92 E701                       	dc.b	smpsNoAttack, $01
00089A94 E10B                       	smpsAlterNote       $0B
00089A96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A9A E105                       	smpsAlterNote       $05
00089A9C E701                       	dc.b	smpsNoAttack, $01
00089A9E E101                       	smpsAlterNote       $01
00089AA0 E701                       	dc.b	smpsNoAttack, $01
00089AA2 E102                       	smpsAlterNote       $02
00089AA4 E701                       	dc.b	smpsNoAttack, $01
00089AA6 E108                       	smpsAlterNote       $08
00089AA8 E701                       	dc.b	smpsNoAttack, $01
00089AAA E10C                       	smpsAlterNote       $0C
00089AAC E701                       	dc.b	smpsNoAttack, $01
00089AAE E108                       	smpsAlterNote       $08
00089AB0 E701                       	dc.b	smpsNoAttack, $01
00089AB2 E105                       	smpsAlterNote       $05
00089AB4 E701                       	dc.b	smpsNoAttack, $01
00089AB6 E101                       	smpsAlterNote       $01
00089AB8 E701                       	dc.b	smpsNoAttack, $01
00089ABA E105                       	smpsAlterNote       $05
00089ABC E701                       	dc.b	smpsNoAttack, $01
00089ABE E10B                       	smpsAlterNote       $0B
00089AC0 E701                       	dc.b	smpsNoAttack, $01
00089AC2 E10C                       	smpsAlterNote       $0C
00089AC4 E701                       	dc.b	smpsNoAttack, $01
00089AC6 E108                       	smpsAlterNote       $08
00089AC8 E701                       	dc.b	smpsNoAttack, $01
00089ACA E102                       	smpsAlterNote       $02
00089ACC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AD0 E108                       	smpsAlterNote       $08
00089AD2 E701                       	dc.b	smpsNoAttack, $01
00089AD4 E10B                       	smpsAlterNote       $0B
00089AD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089ADA E105                       	smpsAlterNote       $05
00089ADC E701                       	dc.b	smpsNoAttack, $01
00089ADE E101                       	smpsAlterNote       $01
00089AE0 E701                       	dc.b	smpsNoAttack, $01
00089AE2 E102                       	smpsAlterNote       $02
00089AE4 E701                       	dc.b	smpsNoAttack, $01
00089AE6 E108                       	smpsAlterNote       $08
00089AE8 E701                       	dc.b	smpsNoAttack, $01
00089AEA E10C                       	smpsAlterNote       $0C
00089AEC E701                       	dc.b	smpsNoAttack, $01
00089AEE E108                       	smpsAlterNote       $08
00089AF0 E701                       	dc.b	smpsNoAttack, $01
00089AF2 E105                       	smpsAlterNote       $05
00089AF4 E701                       	dc.b	smpsNoAttack, $01
00089AF6 E101                       	smpsAlterNote       $01
00089AF8 E701                       	dc.b	smpsNoAttack, $01
00089AFA E105                       	smpsAlterNote       $05
00089AFC E701                       	dc.b	smpsNoAttack, $01
00089AFE E10B                       	smpsAlterNote       $0B
00089B00 E701                       	dc.b	smpsNoAttack, $01
00089B02 E10C                       	smpsAlterNote       $0C
00089B04 E701                       	dc.b	smpsNoAttack, $01
00089B06 E108                       	smpsAlterNote       $08
00089B08 E701                       	dc.b	smpsNoAttack, $01
00089B0A E102                       	smpsAlterNote       $02
00089B0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B10 E105                       	smpsAlterNote       $05
00089B12 E701                       	dc.b	smpsNoAttack, $01
00089B14 E10B                       	smpsAlterNote       $0B
00089B16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B1A E105                       	smpsAlterNote       $05
00089B1C E701                       	dc.b	smpsNoAttack, $01
00089B1E E102                       	smpsAlterNote       $02
00089B20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B24 E108                       	smpsAlterNote       $08
00089B26 E701                       	dc.b	smpsNoAttack, $01
00089B28 E10C                       	smpsAlterNote       $0C
00089B2A E701                       	dc.b	smpsNoAttack, $01
00089B2C E10B                       	smpsAlterNote       $0B
00089B2E E701                       	dc.b	smpsNoAttack, $01
00089B30 E105                       	smpsAlterNote       $05
00089B32 E701                       	dc.b	smpsNoAttack, $01
00089B34 E101                       	smpsAlterNote       $01
00089B36 E701                       	dc.b	smpsNoAttack, $01
00089B38 E105                       	smpsAlterNote       $05
00089B3A E701                       	dc.b	smpsNoAttack, $01
00089B3C E108                       	smpsAlterNote       $08
00089B3E E701                       	dc.b	smpsNoAttack, $01
00089B40 E10C                       	smpsAlterNote       $0C
00089B42 E701                       	dc.b	smpsNoAttack, $01
00089B44 E108                       	smpsAlterNote       $08
00089B46 E701                       	dc.b	smpsNoAttack, $01
00089B48 E102                       	smpsAlterNote       $02
00089B4A E701                       	dc.b	smpsNoAttack, $01
00089B4C E101                       	smpsAlterNote       $01
00089B4E E701                       	dc.b	smpsNoAttack, $01
00089B50 E105                       	smpsAlterNote       $05
00089B52 E701                       	dc.b	smpsNoAttack, $01
00089B54 E10B                       	smpsAlterNote       $0B
00089B56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B5A E108                       	smpsAlterNote       $08
00089B5C E701                       	dc.b	smpsNoAttack, $01
00089B5E E102                       	smpsAlterNote       $02
00089B60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B64 E108                       	smpsAlterNote       $08
00089B66 E701                       	dc.b	smpsNoAttack, $01
00089B68 E10B                       	smpsAlterNote       $0B
00089B6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B6E E105                       	smpsAlterNote       $05
00089B70 E701                       	dc.b	smpsNoAttack, $01
00089B72 E102                       	smpsAlterNote       $02
00089B74 8001                       	dc.b	nRst, $01
00089B76 E107                       	smpsAlterNote       $07
00089B78 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00089B7C E108                       	smpsAlterNote       $08
00089B7E C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00089B82 E102                       	smpsAlterNote       $02
00089B84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B88 E108                       	smpsAlterNote       $08
00089B8A E701                       	dc.b	smpsNoAttack, $01
00089B8C E10B                       	smpsAlterNote       $0B
00089B8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B92 E105                       	smpsAlterNote       $05
00089B94 E701                       	dc.b	smpsNoAttack, $01
00089B96 E101                       	smpsAlterNote       $01
00089B98 E701                       	dc.b	smpsNoAttack, $01
00089B9A E102                       	smpsAlterNote       $02
00089B9C E701                       	dc.b	smpsNoAttack, $01
00089B9E E108                       	smpsAlterNote       $08
00089BA0 E701                       	dc.b	smpsNoAttack, $01
00089BA2 E10C                       	smpsAlterNote       $0C
00089BA4 E701                       	dc.b	smpsNoAttack, $01
00089BA6 E108                       	smpsAlterNote       $08
00089BA8 E701                       	dc.b	smpsNoAttack, $01
00089BAA E105                       	smpsAlterNote       $05
00089BAC E701                       	dc.b	smpsNoAttack, $01
00089BAE E101                       	smpsAlterNote       $01
00089BB0 E701                       	dc.b	smpsNoAttack, $01
00089BB2 E105                       	smpsAlterNote       $05
00089BB4 E701                       	dc.b	smpsNoAttack, $01
00089BB6 E10B                       	smpsAlterNote       $0B
00089BB8 E701                       	dc.b	smpsNoAttack, $01
00089BBA E10C                       	smpsAlterNote       $0C
00089BBC E701                       	dc.b	smpsNoAttack, $01
00089BBE E108                       	smpsAlterNote       $08
00089BC0 E701                       	dc.b	smpsNoAttack, $01
00089BC2 E102                       	smpsAlterNote       $02
00089BC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BC8 E105                       	smpsAlterNote       $05
00089BCA E701                       	dc.b	smpsNoAttack, $01
00089BCC E10B                       	smpsAlterNote       $0B
00089BCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BD2 E105                       	smpsAlterNote       $05
00089BD4 E701                       	dc.b	smpsNoAttack, $01
00089BD6 E102                       	smpsAlterNote       $02
00089BD8 E701                       	dc.b	smpsNoAttack, $01
00089BDA E109                       	smpsAlterNote       $09
00089BDC C40A C207                  	dc.b	nG5, $0A, nF5, $07
00089BE0 E108                       	smpsAlterNote       $08
00089BE2 C10D                       	dc.b	nE5, $0D
00089BE4 E105                       	smpsAlterNote       $05
00089BE6 E701                       	dc.b	smpsNoAttack, $01
00089BE8 E101                       	smpsAlterNote       $01
00089BEA E701                       	dc.b	smpsNoAttack, $01
00089BEC E102                       	smpsAlterNote       $02
00089BEE E701                       	dc.b	smpsNoAttack, $01
00089BF0 E108                       	smpsAlterNote       $08
00089BF2 E701                       	dc.b	smpsNoAttack, $01
00089BF4 E10C                       	smpsAlterNote       $0C
00089BF6 E701                       	dc.b	smpsNoAttack, $01
00089BF8 E108                       	smpsAlterNote       $08
00089BFA E701                       	dc.b	smpsNoAttack, $01
00089BFC E105                       	smpsAlterNote       $05
00089BFE E701                       	dc.b	smpsNoAttack, $01
00089C00 E101                       	smpsAlterNote       $01
00089C02 E701                       	dc.b	smpsNoAttack, $01
00089C04 E105                       	smpsAlterNote       $05
00089C06 E701                       	dc.b	smpsNoAttack, $01
00089C08 E10B                       	smpsAlterNote       $0B
00089C0A E701                       	dc.b	smpsNoAttack, $01
00089C0C E10C                       	smpsAlterNote       $0C
00089C0E E701                       	dc.b	smpsNoAttack, $01
00089C10 E108                       	smpsAlterNote       $08
00089C12 E701                       	dc.b	smpsNoAttack, $01
00089C14 E102                       	smpsAlterNote       $02
00089C16 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00089C1E E10B                       	smpsAlterNote       $0B
00089C20 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00089C24 E10C                       	smpsAlterNote       $0C
00089C26 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00089C2A E10B                       	smpsAlterNote       $0B
00089C2C BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00089C32 E107                       	smpsAlterNote       $07
00089C34 BF03                       	dc.b	nD5, $03
00089C36 E108                       	smpsAlterNote       $08
00089C38 C103 8001                  	dc.b	nE5, $03, nRst, $01
00089C3C E109                       	smpsAlterNote       $09
00089C3E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00089C44 E10B                       	smpsAlterNote       $0B
00089C46 C606 8001                  	dc.b	nA5, $06, nRst, $01
00089C4A E107                       	smpsAlterNote       $07
00089C4C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089C50 E106                       	smpsAlterNote       $06
00089C52 C90D                       	dc.b	nC6, $0D
00089C54 E103                       	smpsAlterNote       $03
00089C56 E701                       	dc.b	smpsNoAttack, $01
00089C58 E1FF                       	smpsAlterNote       $FF
00089C5A E701                       	dc.b	smpsNoAttack, $01
00089C5C E103                       	smpsAlterNote       $03
00089C5E E701                       	dc.b	smpsNoAttack, $01
00089C60 E109                       	smpsAlterNote       $09
00089C62 E701                       	dc.b	smpsNoAttack, $01
00089C64 E10A                       	smpsAlterNote       $0A
00089C66 E701                       	dc.b	smpsNoAttack, $01
00089C68 E106                       	smpsAlterNote       $06
00089C6A E701                       	dc.b	smpsNoAttack, $01
00089C6C E100                       	smpsAlterNote       $00
00089C6E E701                       	dc.b	smpsNoAttack, $01
00089C70 E10C                       	smpsAlterNote       $0C
00089C72 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089C76 E10B                       	smpsAlterNote       $0B
00089C78 C603                       	dc.b	nA5, $03
00089C7A E109                       	smpsAlterNote       $09
00089C7C C403 8001                  	dc.b	nG5, $03, nRst, $01
00089C80 E10B                       	smpsAlterNote       $0B
00089C82 C60D                       	dc.b	nA5, $0D
00089C84 E105                       	smpsAlterNote       $05
00089C86 E701                       	dc.b	smpsNoAttack, $01
00089C88 E104                       	smpsAlterNote       $04
00089C8A E701                       	dc.b	smpsNoAttack, $01
00089C8C E108                       	smpsAlterNote       $08
00089C8E E701                       	dc.b	smpsNoAttack, $01
00089C90 E10E                       	smpsAlterNote       $0E
00089C92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C96 E10B                       	smpsAlterNote       $0B
00089C98 E701                       	dc.b	smpsNoAttack, $01
00089C9A E105                       	smpsAlterNote       $05
00089C9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CA0 E10B                       	smpsAlterNote       $0B
00089CA2 E701                       	dc.b	smpsNoAttack, $01
00089CA4 E10E                       	smpsAlterNote       $0E
00089CA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CAA E108                       	smpsAlterNote       $08
00089CAC E701                       	dc.b	smpsNoAttack, $01
00089CAE E104                       	smpsAlterNote       $04
00089CB0 E701                       	dc.b	smpsNoAttack, $01
00089CB2 E105                       	smpsAlterNote       $05
00089CB4 E701                       	dc.b	smpsNoAttack, $01
00089CB6 E10B                       	smpsAlterNote       $0B
00089CB8 E701                       	dc.b	smpsNoAttack, $01
00089CBA E10F                       	smpsAlterNote       $0F
00089CBC E701                       	dc.b	smpsNoAttack, $01
00089CBE E10B                       	smpsAlterNote       $0B
00089CC0 E701                       	dc.b	smpsNoAttack, $01
00089CC2 E108                       	smpsAlterNote       $08
00089CC4 E701                       	dc.b	smpsNoAttack, $01
00089CC6 E104                       	smpsAlterNote       $04
00089CC8 E701                       	dc.b	smpsNoAttack, $01
00089CCA E108                       	smpsAlterNote       $08
00089CCC E701                       	dc.b	smpsNoAttack, $01
00089CCE E10E                       	smpsAlterNote       $0E
00089CD0 E701                       	dc.b	smpsNoAttack, $01
00089CD2 E10F                       	smpsAlterNote       $0F
00089CD4 E701                       	dc.b	smpsNoAttack, $01
00089CD6 E10B                       	smpsAlterNote       $0B
00089CD8 E701                       	dc.b	smpsNoAttack, $01
00089CDA E105                       	smpsAlterNote       $05
00089CDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CE0 E108                       	smpsAlterNote       $08
00089CE2 E701                       	dc.b	smpsNoAttack, $01
00089CE4 E10E                       	smpsAlterNote       $0E
00089CE6 E701                       	dc.b	smpsNoAttack, $01
00089CE8 E10F                       	smpsAlterNote       $0F
00089CEA 800F                       	dc.b	nRst, $0F
00089CEC E107                       	smpsAlterNote       $07
00089CEE BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089CF2 E108                       	smpsAlterNote       $08
00089CF4 C103                       	dc.b	nE5, $03
00089CF6 E109                       	smpsAlterNote       $09
00089CF8 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00089CFE E10B                       	smpsAlterNote       $0B
00089D00 C607                       	dc.b	nA5, $07
00089D02 E107                       	smpsAlterNote       $07
00089D04 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00089D08 E106                       	smpsAlterNote       $06
00089D0A C90D                       	dc.b	nC6, $0D
00089D0C E107                       	smpsAlterNote       $07
00089D0E CB03 8001                  	dc.b	nD6, $03, nRst, $01
00089D12 E10C                       	smpsAlterNote       $0C
00089D14 C704                       	dc.b	nBb5, $04
00089D16 E10B                       	smpsAlterNote       $0B
00089D18 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089D1C E109                       	smpsAlterNote       $09
00089D1E C404                       	dc.b	nG5, $04
00089D20 E10B                       	smpsAlterNote       $0B
00089D22 C60D                       	dc.b	nA5, $0D
00089D24 E108                       	smpsAlterNote       $08
00089D26 E701                       	dc.b	smpsNoAttack, $01
00089D28 E105                       	smpsAlterNote       $05
00089D2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D2E E10B                       	smpsAlterNote       $0B
00089D30 E701                       	dc.b	smpsNoAttack, $01
00089D32 E10F                       	smpsAlterNote       $0F
00089D34 E701                       	dc.b	smpsNoAttack, $01
00089D36 E10E                       	smpsAlterNote       $0E
00089D38 E701                       	dc.b	smpsNoAttack, $01
00089D3A E108                       	smpsAlterNote       $08
00089D3C E701                       	dc.b	smpsNoAttack, $01
00089D3E E104                       	smpsAlterNote       $04
00089D40 E701                       	dc.b	smpsNoAttack, $01
00089D42 E108                       	smpsAlterNote       $08
00089D44 E701                       	dc.b	smpsNoAttack, $01
00089D46 E10B                       	smpsAlterNote       $0B
00089D48 E701                       	dc.b	smpsNoAttack, $01
00089D4A E10F                       	smpsAlterNote       $0F
00089D4C E701                       	dc.b	smpsNoAttack, $01
00089D4E E10B                       	smpsAlterNote       $0B
00089D50 E701                       	dc.b	smpsNoAttack, $01
00089D52 E105                       	smpsAlterNote       $05
00089D54 E701                       	dc.b	smpsNoAttack, $01
00089D56 E104                       	smpsAlterNote       $04
00089D58 E701                       	dc.b	smpsNoAttack, $01
00089D5A E108                       	smpsAlterNote       $08
00089D5C E701                       	dc.b	smpsNoAttack, $01
00089D5E E10E                       	smpsAlterNote       $0E
00089D60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D64 E10B                       	smpsAlterNote       $0B
00089D66 E701                       	dc.b	smpsNoAttack, $01
00089D68 E105                       	smpsAlterNote       $05
00089D6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D6E E10B                       	smpsAlterNote       $0B
00089D70 E701                       	dc.b	smpsNoAttack, $01
00089D72 E10E                       	smpsAlterNote       $0E
00089D74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D78 E108                       	smpsAlterNote       $08
00089D7A E701                       	dc.b	smpsNoAttack, $01
00089D7C E105                       	smpsAlterNote       $05
00089D7E 8001                       	dc.b	nRst, $01
00089D80 E109                       	smpsAlterNote       $09
00089D82 C401 8001                  	dc.b	nG5, $01, nRst, $01
00089D86 E10B                       	smpsAlterNote       $0B
00089D88 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00089D90 E109                       	smpsAlterNote       $09
00089D92 C404                       	dc.b	nG5, $04
00089D94 E10B                       	smpsAlterNote       $0B
00089D96 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089D9A E107                       	smpsAlterNote       $07
00089D9C BF0D                       	dc.b	nD5, $0D
00089D9E E101                       	smpsAlterNote       $01
00089DA0 E701                       	dc.b	smpsNoAttack, $01
00089DA2 E100                       	smpsAlterNote       $00
00089DA4 E701                       	dc.b	smpsNoAttack, $01
00089DA6 E104                       	smpsAlterNote       $04
00089DA8 E701                       	dc.b	smpsNoAttack, $01
00089DAA E10A                       	smpsAlterNote       $0A
00089DAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DB0 E107                       	smpsAlterNote       $07
00089DB2 E701                       	dc.b	smpsNoAttack, $01
00089DB4 E101                       	smpsAlterNote       $01
00089DB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DBA E107                       	smpsAlterNote       $07
00089DBC E701                       	dc.b	smpsNoAttack, $01
00089DBE E10A                       	smpsAlterNote       $0A
00089DC0 E701                       	dc.b	smpsNoAttack, $01
00089DC2 E10B                       	smpsAlterNote       $0B
00089DC4 8001                       	dc.b	nRst, $01
00089DC6 E108                       	smpsAlterNote       $08
00089DC8 8001                       	dc.b	nRst, $01
00089DCA E109                       	smpsAlterNote       $09
00089DCC 8001 C401                  	dc.b	nRst, $01, nG5, $01
00089DD0 E10B                       	smpsAlterNote       $0B
00089DD2 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00089DDA E108                       	smpsAlterNote       $08
00089DDC CD06 8001                  	dc.b	nE6, $06, nRst, $01
00089DE0 E109                       	smpsAlterNote       $09
00089DE2 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00089DE6 E108                       	smpsAlterNote       $08
00089DE8 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00089DEC E106                       	smpsAlterNote       $06
00089DEE C903                       	dc.b	nC6, $03
00089DF0 E109                       	smpsAlterNote       $09
00089DF2 C403 8001                  	dc.b	nG5, $03, nRst, $01
00089DF6 E10C                       	smpsAlterNote       $0C
00089DF8 C70D                       	dc.b	nBb5, $0D
00089DFA E109                       	smpsAlterNote       $09
00089DFC E701                       	dc.b	smpsNoAttack, $01
00089DFE E105                       	smpsAlterNote       $05
00089E00 E701                       	dc.b	smpsNoAttack, $01
00089E02 E109                       	smpsAlterNote       $09
00089E04 E701                       	dc.b	smpsNoAttack, $01
00089E06 E10F                       	smpsAlterNote       $0F
00089E08 E701                       	dc.b	smpsNoAttack, $01
00089E0A E110                       	smpsAlterNote       $10
00089E0C E701                       	dc.b	smpsNoAttack, $01
00089E0E E10C                       	smpsAlterNote       $0C
00089E10 E701                       	dc.b	smpsNoAttack, $01
00089E12 E106                       	smpsAlterNote       $06
00089E14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E18 E109                       	smpsAlterNote       $09
00089E1A E701                       	dc.b	smpsNoAttack, $01
00089E1C E10F                       	smpsAlterNote       $0F
00089E1E E701                       	dc.b	smpsNoAttack, $01
00089E20 E110                       	smpsAlterNote       $10
00089E22 8001                       	dc.b	nRst, $01
00089E24 E10B                       	smpsAlterNote       $0B
00089E26 C606 8001                  	dc.b	nA5, $06, nRst, $01
00089E2A E109                       	smpsAlterNote       $09
00089E2C C40D                       	dc.b	nG5, $0D
00089E2E E103                       	smpsAlterNote       $03
00089E30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E34 E106                       	smpsAlterNote       $06
00089E36 E701                       	dc.b	smpsNoAttack, $01
00089E38 E10C                       	smpsAlterNote       $0C
00089E3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E3E E106                       	smpsAlterNote       $06
00089E40 E701                       	dc.b	smpsNoAttack, $01
00089E42 E103                       	smpsAlterNote       $03
00089E44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E48 E109                       	smpsAlterNote       $09
00089E4A E701                       	dc.b	smpsNoAttack, $01
00089E4C E10D                       	smpsAlterNote       $0D
00089E4E E701                       	dc.b	smpsNoAttack, $01
00089E50 E10C                       	smpsAlterNote       $0C
00089E52 E701                       	dc.b	smpsNoAttack, $01
00089E54 E106                       	smpsAlterNote       $06
00089E56 E701                       	dc.b	smpsNoAttack, $01
00089E58 E102                       	smpsAlterNote       $02
00089E5A E701                       	dc.b	smpsNoAttack, $01
00089E5C E103                       	smpsAlterNote       $03
00089E5E 8001                       	dc.b	nRst, $01
00089E60 E10B                       	smpsAlterNote       $0B
00089E62 C60D                       	dc.b	nA5, $0D
00089E64 E108                       	smpsAlterNote       $08
00089E66 E701                       	dc.b	smpsNoAttack, $01
00089E68 E104                       	smpsAlterNote       $04
00089E6A E701                       	dc.b	smpsNoAttack, $01
00089E6C E108                       	smpsAlterNote       $08
00089E6E E701                       	dc.b	smpsNoAttack, $01
00089E70 E10B                       	smpsAlterNote       $0B
00089E72 E701                       	dc.b	smpsNoAttack, $01
00089E74 E10F                       	smpsAlterNote       $0F
00089E76 E701                       	dc.b	smpsNoAttack, $01
00089E78 E10B                       	smpsAlterNote       $0B
00089E7A E701                       	dc.b	smpsNoAttack, $01
00089E7C E105                       	smpsAlterNote       $05
00089E7E E701                       	dc.b	smpsNoAttack, $01
00089E80 E104                       	smpsAlterNote       $04
00089E82 E701                       	dc.b	smpsNoAttack, $01
00089E84 E108                       	smpsAlterNote       $08
00089E86 E701                       	dc.b	smpsNoAttack, $01
00089E88 E10E                       	smpsAlterNote       $0E
00089E8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E8E E10B                       	smpsAlterNote       $0B
00089E90 E701                       	dc.b	smpsNoAttack, $01
00089E92 E105                       	smpsAlterNote       $05
00089E94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E98 E10C                       	smpsAlterNote       $0C
00089E9A C70E                       	dc.b	nBb5, $0E
00089E9C E106                       	smpsAlterNote       $06
00089E9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EA2 E10C                       	smpsAlterNote       $0C
00089EA4 E701                       	dc.b	smpsNoAttack, $01
00089EA6 E10F                       	smpsAlterNote       $0F
00089EA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EAC E109                       	smpsAlterNote       $09
00089EAE E701                       	dc.b	smpsNoAttack, $01
00089EB0 E105                       	smpsAlterNote       $05
00089EB2 E701                       	dc.b	smpsNoAttack, $01
00089EB4 E106                       	smpsAlterNote       $06
00089EB6 E701                       	dc.b	smpsNoAttack, $01
00089EB8 E10C                       	smpsAlterNote       $0C
00089EBA E701                       	dc.b	smpsNoAttack, $01
00089EBC E110                       	smpsAlterNote       $10
00089EBE E701                       	dc.b	smpsNoAttack, $01
00089EC0 E10C                       	smpsAlterNote       $0C
00089EC2 E701                       	dc.b	smpsNoAttack, $01
00089EC4 E109                       	smpsAlterNote       $09
00089EC6 E701                       	dc.b	smpsNoAttack, $01
00089EC8 E105                       	smpsAlterNote       $05
00089ECA E701                       	dc.b	smpsNoAttack, $01
00089ECC E106                       	smpsAlterNote       $06
00089ECE 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00089ED2 E107                       	smpsAlterNote       $07
00089ED4 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00089ED9 E108                       	smpsAlterNote       $08
00089EDB CD0D                       	dc.b	nE6, $0D
00089EDD E107                       	smpsAlterNote       $07
00089EDF CB0D                       	dc.b	nD6, $0D
00089EE1 E104                       	smpsAlterNote       $04
00089EE3 E701                       	dc.b	smpsNoAttack, $01
00089EE5 E100                       	smpsAlterNote       $00
00089EE7 E701                       	dc.b	smpsNoAttack, $01
00089EE9 E101                       	smpsAlterNote       $01
00089EEB E701                       	dc.b	smpsNoAttack, $01
00089EED E107                       	smpsAlterNote       $07
00089EEF E701                       	dc.b	smpsNoAttack, $01
00089EF1 E10B                       	smpsAlterNote       $0B
00089EF3 E701                       	dc.b	smpsNoAttack, $01
00089EF5 E107                       	smpsAlterNote       $07
00089EF7 E701                       	dc.b	smpsNoAttack, $01
00089EF9 E104                       	smpsAlterNote       $04
00089EFB E701                       	dc.b	smpsNoAttack, $01
00089EFD E100                       	smpsAlterNote       $00
00089EFF E701                       	dc.b	smpsNoAttack, $01
00089F01 E104                       	smpsAlterNote       $04
00089F03 E701                       	dc.b	smpsNoAttack, $01
00089F05 E10A                       	smpsAlterNote       $0A
00089F07 E701                       	dc.b	smpsNoAttack, $01
00089F09 E10B                       	smpsAlterNote       $0B
00089F0B E701                       	dc.b	smpsNoAttack, $01
00089F0D E108                       	smpsAlterNote       $08
00089F0F CC0D                       	dc.b	nEb6, $0D
00089F11 E105                       	smpsAlterNote       $05
00089F13 E701                       	dc.b	smpsNoAttack, $01
00089F15 E101                       	smpsAlterNote       $01
00089F17 E701                       	dc.b	smpsNoAttack, $01
00089F19 E102                       	smpsAlterNote       $02
00089F1B E701                       	dc.b	smpsNoAttack, $01
00089F1D E108                       	smpsAlterNote       $08
00089F1F E701                       	dc.b	smpsNoAttack, $01
00089F21 E106                       	smpsAlterNote       $06
00089F23 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00089F2F 8001                       	dc.b	nRst, $01
00089F31 E107                       	smpsAlterNote       $07
00089F33 CB0D                       	dc.b	nD6, $0D
00089F35 E104                       	smpsAlterNote       $04
00089F37 E701                       	dc.b	smpsNoAttack, $01
00089F39 E100                       	smpsAlterNote       $00
00089F3B E701                       	dc.b	smpsNoAttack, $01
00089F3D E104                       	smpsAlterNote       $04
00089F3F E701                       	dc.b	smpsNoAttack, $01
00089F41 E107                       	smpsAlterNote       $07
00089F43 E701                       	dc.b	smpsNoAttack, $01
00089F45 E10B                       	smpsAlterNote       $0B
00089F47 E701                       	dc.b	smpsNoAttack, $01
00089F49 E107                       	smpsAlterNote       $07
00089F4B E701                       	dc.b	smpsNoAttack, $01
00089F4D E101                       	smpsAlterNote       $01
00089F4F E701                       	dc.b	smpsNoAttack, $01
00089F51 E100                       	smpsAlterNote       $00
00089F53 E701                       	dc.b	smpsNoAttack, $01
00089F55 E104                       	smpsAlterNote       $04
00089F57 E701                       	dc.b	smpsNoAttack, $01
00089F59 E10A                       	smpsAlterNote       $0A
00089F5B E701                       	dc.b	smpsNoAttack, $01
00089F5D E10B                       	smpsAlterNote       $0B
00089F5F 8001                       	dc.b	nRst, $01
00089F61 E109                       	smpsAlterNote       $09
00089F63 CE0A                       	dc.b	nF6, $0A
00089F65 E108                       	smpsAlterNote       $08
00089F67 CC07                       	dc.b	nEb6, $07
00089F69 E106                       	smpsAlterNote       $06
00089F6B C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00089F77 E107                       	smpsAlterNote       $07
00089F79 CB0D                       	dc.b	nD6, $0D
00089F7B E101                       	smpsAlterNote       $01
00089F7D E701                       	dc.b	smpsNoAttack, $01
00089F7F E100                       	smpsAlterNote       $00
00089F81 E701                       	dc.b	smpsNoAttack, $01
00089F83 E104                       	smpsAlterNote       $04
00089F85 E701                       	dc.b	smpsNoAttack, $01
00089F87 E10A                       	smpsAlterNote       $0A
00089F89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F8D E107                       	smpsAlterNote       $07
00089F8F E701                       	dc.b	smpsNoAttack, $01
00089F91 E101                       	smpsAlterNote       $01
00089F93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F97 E107                       	smpsAlterNote       $07
00089F99 E701                       	dc.b	smpsNoAttack, $01
00089F9B E10A                       	smpsAlterNote       $0A
00089F9D E701                       	dc.b	smpsNoAttack, $01
00089F9F E10B                       	smpsAlterNote       $0B
00089FA1 8001                       	dc.b	nRst, $01
00089FA3 E108                       	smpsAlterNote       $08
00089FA5 CC0D                       	dc.b	nEb6, $0D
00089FA7 E102                       	smpsAlterNote       $02
00089FA9 E701                       	dc.b	smpsNoAttack, $01
00089FAB E101                       	smpsAlterNote       $01
00089FAD E701                       	dc.b	smpsNoAttack, $01
00089FAF E105                       	smpsAlterNote       $05
00089FB1 E701                       	dc.b	smpsNoAttack, $01
00089FB3 E108                       	smpsAlterNote       $08
00089FB5 8001                       	dc.b	nRst, $01
00089FB7 E106                       	smpsAlterNote       $06
00089FB9 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00089FC5 8001                       	dc.b	nRst, $01
00089FC7 E107                       	smpsAlterNote       $07
00089FC9 CB0D                       	dc.b	nD6, $0D
00089FCB E101                       	smpsAlterNote       $01
00089FCD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FD1 E104                       	smpsAlterNote       $04
00089FD3 E701                       	dc.b	smpsNoAttack, $01
00089FD5 E10A                       	smpsAlterNote       $0A
00089FD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FDB E104                       	smpsAlterNote       $04
00089FDD E701                       	dc.b	smpsNoAttack, $01
00089FDF E101                       	smpsAlterNote       $01
00089FE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FE5 E107                       	smpsAlterNote       $07
00089FE7 E701                       	dc.b	smpsNoAttack, $01
00089FE9 E10B                       	smpsAlterNote       $0B
00089FEB E701                       	dc.b	smpsNoAttack, $01
00089FED E10A                       	smpsAlterNote       $0A
00089FEF E701                       	dc.b	smpsNoAttack, $01
00089FF1 E104                       	smpsAlterNote       $04
00089FF3 E701                       	dc.b	smpsNoAttack, $01
00089FF5 E100                       	smpsAlterNote       $00
00089FF7 E701                       	dc.b	smpsNoAttack, $01
00089FF9 E101                       	smpsAlterNote       $01
00089FFB 801C                       	dc.b	nRst, $1C
00089FFF E107                       	smpsAlterNote       $07
0008A001 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A005 E603                       	smpsAlterVol        $03
0008A007 F6F1 AD                    	smpsJump            music84_Jump03
0008A00A                            
0008A00A                            ; FM3 Data
0008A00A                            music84_FM3:
0008A00A E0C0                       	smpsPan             panCenter, $00
0008A00E E109                       	smpsAlterNote       $09
0008A010 C203 8007                  	dc.b	nF5, $03, nRst, $07
0008A014 E108                       	smpsAlterNote       $08
0008A016 C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008A01A E10B                       	smpsAlterNote       $0B
0008A01C BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008A022 E040                       	smpsPan             panRight, $00
0008A024 E110                       	smpsAlterNote       $10
0008A026 E6F9                       	smpsAlterVol        $F9
0008A028 C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008A02C E10F                       	smpsAlterNote       $0F
0008A02E C603                       	dc.b	nA5, $03
0008A030 E10D                       	smpsAlterNote       $0D
0008A032 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008A038 E10C                       	smpsAlterNote       $0C
0008A03A C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A03E E10A                       	smpsAlterNote       $0A
0008A040 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A044 E10F                       	smpsAlterNote       $0F
0008A046 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008A04A E0C0                       	smpsPan             panCenter, $00
0008A04E E109                       	smpsAlterNote       $09
0008A050 E609                       	smpsAlterVol        $09
0008A052 B603                       	dc.b	nF4, $03
0008A054                            
0008A054                            music84_Jump02:
0008A054 E70A                       	dc.b	smpsNoAttack, $0A
0008A056 E103                       	smpsAlterNote       $03
0008A058 E701                       	dc.b	smpsNoAttack, $01
0008A05A E102                       	smpsAlterNote       $02
0008A05C E701                       	dc.b	smpsNoAttack, $01
0008A05E E106                       	smpsAlterNote       $06
0008A060 E701                       	dc.b	smpsNoAttack, $01
0008A062 E10C                       	smpsAlterNote       $0C
0008A064 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A068 E109                       	smpsAlterNote       $09
0008A06A E701                       	dc.b	smpsNoAttack, $01
0008A06C E103                       	smpsAlterNote       $03
0008A06E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A072 E109                       	smpsAlterNote       $09
0008A074 E701                       	dc.b	smpsNoAttack, $01
0008A076 E10C                       	smpsAlterNote       $0C
0008A078 E701                       	dc.b	smpsNoAttack, $01
0008A07A E10D                       	smpsAlterNote       $0D
0008A07C 8001                       	dc.b	nRst, $01
0008A07E E109                       	smpsAlterNote       $09
0008A080 B80D                       	dc.b	nG4, $0D
0008A082 E103                       	smpsAlterNote       $03
0008A084 E701                       	dc.b	smpsNoAttack, $01
0008A086 E102                       	smpsAlterNote       $02
0008A088 E701                       	dc.b	smpsNoAttack, $01
0008A08A E106                       	smpsAlterNote       $06
0008A08C E701                       	dc.b	smpsNoAttack, $01
0008A08E E10C                       	smpsAlterNote       $0C
0008A090 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A094 E109                       	smpsAlterNote       $09
0008A096 E701                       	dc.b	smpsNoAttack, $01
0008A098 E103                       	smpsAlterNote       $03
0008A09A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A09E E109                       	smpsAlterNote       $09
0008A0A0 E701                       	dc.b	smpsNoAttack, $01
0008A0A2 E10C                       	smpsAlterNote       $0C
0008A0A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0A8 E106                       	smpsAlterNote       $06
0008A0AA E701                       	dc.b	smpsNoAttack, $01
0008A0AC E102                       	smpsAlterNote       $02
0008A0AE E701                       	dc.b	smpsNoAttack, $01
0008A0B0 E103                       	smpsAlterNote       $03
0008A0B2 E701                       	dc.b	smpsNoAttack, $01
0008A0B4 E109                       	smpsAlterNote       $09
0008A0B6 E701                       	dc.b	smpsNoAttack, $01
0008A0B8 E10D                       	smpsAlterNote       $0D
0008A0BA E701                       	dc.b	smpsNoAttack, $01
0008A0BC E109                       	smpsAlterNote       $09
0008A0BE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A0C2 E10B                       	smpsAlterNote       $0B
0008A0C4 BA0D                       	dc.b	nA4, $0D
0008A0C6 E105                       	smpsAlterNote       $05
0008A0C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0CC E108                       	smpsAlterNote       $08
0008A0CE E701                       	dc.b	smpsNoAttack, $01
0008A0D0 E10E                       	smpsAlterNote       $0E
0008A0D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0D6 E108                       	smpsAlterNote       $08
0008A0D8 E701                       	dc.b	smpsNoAttack, $01
0008A0DA E104                       	smpsAlterNote       $04
0008A0DC E701                       	dc.b	smpsNoAttack, $01
0008A0DE E105                       	smpsAlterNote       $05
0008A0E0 E701                       	dc.b	smpsNoAttack, $01
0008A0E2 E10B                       	smpsAlterNote       $0B
0008A0E4 E701                       	dc.b	smpsNoAttack, $01
0008A0E6 E10F                       	smpsAlterNote       $0F
0008A0E8 E701                       	dc.b	smpsNoAttack, $01
0008A0EA E10B                       	smpsAlterNote       $0B
0008A0EC E701                       	dc.b	smpsNoAttack, $01
0008A0EE E108                       	smpsAlterNote       $08
0008A0F0 E701                       	dc.b	smpsNoAttack, $01
0008A0F2 E104                       	smpsAlterNote       $04
0008A0F4 E701                       	dc.b	smpsNoAttack, $01
0008A0F6 E108                       	smpsAlterNote       $08
0008A0F8 E701                       	dc.b	smpsNoAttack, $01
0008A0FA E10E                       	smpsAlterNote       $0E
0008A0FC E701                       	dc.b	smpsNoAttack, $01
0008A0FE E10F                       	smpsAlterNote       $0F
0008A100 E701                       	dc.b	smpsNoAttack, $01
0008A102 E10B                       	smpsAlterNote       $0B
0008A104 E701                       	dc.b	smpsNoAttack, $01
0008A106 E105                       	smpsAlterNote       $05
0008A108 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A10C E108                       	smpsAlterNote       $08
0008A10E E701                       	dc.b	smpsNoAttack, $01
0008A110 E10E                       	smpsAlterNote       $0E
0008A112 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A116 E108                       	smpsAlterNote       $08
0008A118 E701                       	dc.b	smpsNoAttack, $01
0008A11A E105                       	smpsAlterNote       $05
0008A11C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A120 E10B                       	smpsAlterNote       $0B
0008A122 E701                       	dc.b	smpsNoAttack, $01
0008A124 E10F                       	smpsAlterNote       $0F
0008A126 E701                       	dc.b	smpsNoAttack, $01
0008A128 E10E                       	smpsAlterNote       $0E
0008A12A E701                       	dc.b	smpsNoAttack, $01
0008A12C E108                       	smpsAlterNote       $08
0008A12E E701                       	dc.b	smpsNoAttack, $01
0008A130 E104                       	smpsAlterNote       $04
0008A132 E701                       	dc.b	smpsNoAttack, $01
0008A134 E105                       	smpsAlterNote       $05
0008A136 8001                       	dc.b	nRst, $01
0008A138 E108                       	smpsAlterNote       $08
0008A13A B50A                       	dc.b	nE4, $0A
0008A13C E109                       	smpsAlterNote       $09
0008A13E B60D                       	dc.b	nF4, $0D
0008A140 E106                       	smpsAlterNote       $06
0008A142 E701                       	dc.b	smpsNoAttack, $01
0008A144 E103                       	smpsAlterNote       $03
0008A146 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A14A E109                       	smpsAlterNote       $09
0008A14C E701                       	dc.b	smpsNoAttack, $01
0008A14E E10D                       	smpsAlterNote       $0D
0008A150 E701                       	dc.b	smpsNoAttack, $01
0008A152 E10C                       	smpsAlterNote       $0C
0008A154 E701                       	dc.b	smpsNoAttack, $01
0008A156 E106                       	smpsAlterNote       $06
0008A158 E701                       	dc.b	smpsNoAttack, $01
0008A15A E102                       	smpsAlterNote       $02
0008A15C E701                       	dc.b	smpsNoAttack, $01
0008A15E E106                       	smpsAlterNote       $06
0008A160 E701                       	dc.b	smpsNoAttack, $01
0008A162 E109                       	smpsAlterNote       $09
0008A164 E701                       	dc.b	smpsNoAttack, $01
0008A166 E10D                       	smpsAlterNote       $0D
0008A168 E701                       	dc.b	smpsNoAttack, $01
0008A16A E109                       	smpsAlterNote       $09
0008A16C B80D                       	dc.b	nG4, $0D
0008A16E E106                       	smpsAlterNote       $06
0008A170 E701                       	dc.b	smpsNoAttack, $01
0008A172 E103                       	smpsAlterNote       $03
0008A174 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A178 E109                       	smpsAlterNote       $09
0008A17A E701                       	dc.b	smpsNoAttack, $01
0008A17C E10D                       	smpsAlterNote       $0D
0008A17E E701                       	dc.b	smpsNoAttack, $01
0008A180 E10C                       	smpsAlterNote       $0C
0008A182 E701                       	dc.b	smpsNoAttack, $01
0008A184 E106                       	smpsAlterNote       $06
0008A186 E701                       	dc.b	smpsNoAttack, $01
0008A188 E102                       	smpsAlterNote       $02
0008A18A E701                       	dc.b	smpsNoAttack, $01
0008A18C E106                       	smpsAlterNote       $06
0008A18E E701                       	dc.b	smpsNoAttack, $01
0008A190 E109                       	smpsAlterNote       $09
0008A192 E701                       	dc.b	smpsNoAttack, $01
0008A194 E10D                       	smpsAlterNote       $0D
0008A196 E701                       	dc.b	smpsNoAttack, $01
0008A198 E109                       	smpsAlterNote       $09
0008A19A E701                       	dc.b	smpsNoAttack, $01
0008A19C E103                       	smpsAlterNote       $03
0008A19E E701                       	dc.b	smpsNoAttack, $01
0008A1A0 E102                       	smpsAlterNote       $02
0008A1A2 E701                       	dc.b	smpsNoAttack, $01
0008A1A4 E106                       	smpsAlterNote       $06
0008A1A6 E701                       	dc.b	smpsNoAttack, $01
0008A1A8 E10C                       	smpsAlterNote       $0C
0008A1AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1AE E109                       	smpsAlterNote       $09
0008A1B0 E701                       	dc.b	smpsNoAttack, $01
0008A1B2 E10B                       	smpsAlterNote       $0B
0008A1B4 BA0D                       	dc.b	nA4, $0D
0008A1B6 E108                       	smpsAlterNote       $08
0008A1B8 E701                       	dc.b	smpsNoAttack, $01
0008A1BA E104                       	smpsAlterNote       $04
0008A1BC E701                       	dc.b	smpsNoAttack, $01
0008A1BE E108                       	smpsAlterNote       $08
0008A1C0 E701                       	dc.b	smpsNoAttack, $01
0008A1C2 E10B                       	smpsAlterNote       $0B
0008A1C4 E701                       	dc.b	smpsNoAttack, $01
0008A1C6 E10F                       	smpsAlterNote       $0F
0008A1C8 E701                       	dc.b	smpsNoAttack, $01
0008A1CA E10B                       	smpsAlterNote       $0B
0008A1CC E701                       	dc.b	smpsNoAttack, $01
0008A1CE E105                       	smpsAlterNote       $05
0008A1D0 E701                       	dc.b	smpsNoAttack, $01
0008A1D2 E104                       	smpsAlterNote       $04
0008A1D4 E701                       	dc.b	smpsNoAttack, $01
0008A1D6 E108                       	smpsAlterNote       $08
0008A1D8 E701                       	dc.b	smpsNoAttack, $01
0008A1DA E10E                       	smpsAlterNote       $0E
0008A1DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1E0 E10B                       	smpsAlterNote       $0B
0008A1E2 E701                       	dc.b	smpsNoAttack, $01
0008A1E4 E105                       	smpsAlterNote       $05
0008A1E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1EA E10B                       	smpsAlterNote       $0B
0008A1EC E701                       	dc.b	smpsNoAttack, $01
0008A1EE E10E                       	smpsAlterNote       $0E
0008A1F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1F4 E108                       	smpsAlterNote       $08
0008A1F6 E701                       	dc.b	smpsNoAttack, $01
0008A1F8 E104                       	smpsAlterNote       $04
0008A1FA E701                       	dc.b	smpsNoAttack, $01
0008A1FC E105                       	smpsAlterNote       $05
0008A1FE E701                       	dc.b	smpsNoAttack, $01
0008A200 E10B                       	smpsAlterNote       $0B
0008A202 E701                       	dc.b	smpsNoAttack, $01
0008A204 E10F                       	smpsAlterNote       $0F
0008A206 E701                       	dc.b	smpsNoAttack, $01
0008A208 E10B                       	smpsAlterNote       $0B
0008A20A E701                       	dc.b	smpsNoAttack, $01
0008A20C E108                       	smpsAlterNote       $08
0008A20E E701                       	dc.b	smpsNoAttack, $01
0008A210 E105                       	smpsAlterNote       $05
0008A212 8001                       	dc.b	nRst, $01
0008A214 E109                       	smpsAlterNote       $09
0008A216 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008A21A E108                       	smpsAlterNote       $08
0008A21C B506 8001                  	dc.b	nE4, $06, nRst, $01
0008A220 E107                       	smpsAlterNote       $07
0008A222 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008A226 E108                       	smpsAlterNote       $08
0008A228 B502 8001                  	dc.b	nE4, $02, nRst, $01
0008A22C E109                       	smpsAlterNote       $09
0008A22E B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
0008A234 E10B                       	smpsAlterNote       $0B
0008A236 BA0D                       	dc.b	nA4, $0D
0008A238 E108                       	smpsAlterNote       $08
0008A23A E701                       	dc.b	smpsNoAttack, $01
0008A23C E104                       	smpsAlterNote       $04
0008A23E E701                       	dc.b	smpsNoAttack, $01
0008A240 E108                       	smpsAlterNote       $08
0008A242 E701                       	dc.b	smpsNoAttack, $01
0008A244 E10E                       	smpsAlterNote       $0E
0008A246 E701                       	dc.b	smpsNoAttack, $01
0008A248 E10F                       	smpsAlterNote       $0F
0008A24A E701                       	dc.b	smpsNoAttack, $01
0008A24C E10B                       	smpsAlterNote       $0B
0008A24E E701                       	dc.b	smpsNoAttack, $01
0008A250 E105                       	smpsAlterNote       $05
0008A252 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A256 E108                       	smpsAlterNote       $08
0008A258 E701                       	dc.b	smpsNoAttack, $01
0008A25A E10E                       	smpsAlterNote       $0E
0008A25C E701                       	dc.b	smpsNoAttack, $01
0008A25E E10F                       	smpsAlterNote       $0F
0008A260 8001                       	dc.b	nRst, $01
0008A262 E109                       	smpsAlterNote       $09
0008A264 C20D                       	dc.b	nF5, $0D
0008A266 E103                       	smpsAlterNote       $03
0008A268 E701                       	dc.b	smpsNoAttack, $01
0008A26A E102                       	smpsAlterNote       $02
0008A26C E701                       	dc.b	smpsNoAttack, $01
0008A26E E106                       	smpsAlterNote       $06
0008A270 E701                       	dc.b	smpsNoAttack, $01
0008A272 E10C                       	smpsAlterNote       $0C
0008A274 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A278 E109                       	smpsAlterNote       $09
0008A27A E701                       	dc.b	smpsNoAttack, $01
0008A27C E103                       	smpsAlterNote       $03
0008A27E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A282 E109                       	smpsAlterNote       $09
0008A284 E701                       	dc.b	smpsNoAttack, $01
0008A286 E10C                       	smpsAlterNote       $0C
0008A288 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A28C E106                       	smpsAlterNote       $06
0008A28E E701                       	dc.b	smpsNoAttack, $01
0008A290 E102                       	smpsAlterNote       $02
0008A292 E701                       	dc.b	smpsNoAttack, $01
0008A294 E103                       	smpsAlterNote       $03
0008A296 E701                       	dc.b	smpsNoAttack, $01
0008A298 E109                       	smpsAlterNote       $09
0008A29A E701                       	dc.b	smpsNoAttack, $01
0008A29C E10D                       	smpsAlterNote       $0D
0008A29E E701                       	dc.b	smpsNoAttack, $01
0008A2A0 E109                       	smpsAlterNote       $09
0008A2A2 E701                       	dc.b	smpsNoAttack, $01
0008A2A4 E106                       	smpsAlterNote       $06
0008A2A6 E701                       	dc.b	smpsNoAttack, $01
0008A2A8 E102                       	smpsAlterNote       $02
0008A2AA E701                       	dc.b	smpsNoAttack, $01
0008A2AC E106                       	smpsAlterNote       $06
0008A2AE E701                       	dc.b	smpsNoAttack, $01
0008A2B0 E10C                       	smpsAlterNote       $0C
0008A2B2 E701                       	dc.b	smpsNoAttack, $01
0008A2B4 E10D                       	smpsAlterNote       $0D
0008A2B6 E701                       	dc.b	smpsNoAttack, $01
0008A2B8 E109                       	smpsAlterNote       $09
0008A2BA E701                       	dc.b	smpsNoAttack, $01
0008A2BC E103                       	smpsAlterNote       $03
0008A2BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2C2 E106                       	smpsAlterNote       $06
0008A2C4 E701                       	dc.b	smpsNoAttack, $01
0008A2C6 E10C                       	smpsAlterNote       $0C
0008A2C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2CC E106                       	smpsAlterNote       $06
0008A2CE E701                       	dc.b	smpsNoAttack, $01
0008A2D0 E103                       	smpsAlterNote       $03
0008A2D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2D6 E109                       	smpsAlterNote       $09
0008A2D8 E701                       	dc.b	smpsNoAttack, $01
0008A2DA E10D                       	smpsAlterNote       $0D
0008A2DC E701                       	dc.b	smpsNoAttack, $01
0008A2DE E10C                       	smpsAlterNote       $0C
0008A2E0 E701                       	dc.b	smpsNoAttack, $01
0008A2E2 E106                       	smpsAlterNote       $06
0008A2E4 E701                       	dc.b	smpsNoAttack, $01
0008A2E6 E102                       	smpsAlterNote       $02
0008A2E8 E701                       	dc.b	smpsNoAttack, $01
0008A2EA E106                       	smpsAlterNote       $06
0008A2EC E701                       	dc.b	smpsNoAttack, $01
0008A2EE E109                       	smpsAlterNote       $09
0008A2F0 E701                       	dc.b	smpsNoAttack, $01
0008A2F2 E10D                       	smpsAlterNote       $0D
0008A2F4 E701                       	dc.b	smpsNoAttack, $01
0008A2F6 E109                       	smpsAlterNote       $09
0008A2F8 E701                       	dc.b	smpsNoAttack, $01
0008A2FA E103                       	smpsAlterNote       $03
0008A2FC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A300 E109                       	smpsAlterNote       $09
0008A302 C206                       	dc.b	nF5, $06
0008A304 E108                       	smpsAlterNote       $08
0008A306 C10E                       	dc.b	nE5, $0E
0008A308 E102                       	smpsAlterNote       $02
0008A30A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A30E E108                       	smpsAlterNote       $08
0008A310 E701                       	dc.b	smpsNoAttack, $01
0008A312 E10B                       	smpsAlterNote       $0B
0008A314 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A318 E105                       	smpsAlterNote       $05
0008A31A E701                       	dc.b	smpsNoAttack, $01
0008A31C E101                       	smpsAlterNote       $01
0008A31E E701                       	dc.b	smpsNoAttack, $01
0008A320 E102                       	smpsAlterNote       $02
0008A322 E701                       	dc.b	smpsNoAttack, $01
0008A324 E108                       	smpsAlterNote       $08
0008A326 E701                       	dc.b	smpsNoAttack, $01
0008A328 E10C                       	smpsAlterNote       $0C
0008A32A E701                       	dc.b	smpsNoAttack, $01
0008A32C E107                       	smpsAlterNote       $07
0008A32E BF0E                       	dc.b	nD5, $0E
0008A330 E101                       	smpsAlterNote       $01
0008A332 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A336 E107                       	smpsAlterNote       $07
0008A338 E701                       	dc.b	smpsNoAttack, $01
0008A33A E10A                       	smpsAlterNote       $0A
0008A33C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A340 E104                       	smpsAlterNote       $04
0008A342 E701                       	dc.b	smpsNoAttack, $01
0008A344 E100                       	smpsAlterNote       $00
0008A346 E701                       	dc.b	smpsNoAttack, $01
0008A348 E104                       	smpsAlterNote       $04
0008A34A E701                       	dc.b	smpsNoAttack, $01
0008A34C E107                       	smpsAlterNote       $07
0008A34E E701                       	dc.b	smpsNoAttack, $01
0008A350 E10B                       	smpsAlterNote       $0B
0008A352 E701                       	dc.b	smpsNoAttack, $01
0008A354 E107                       	smpsAlterNote       $07
0008A356 E701                       	dc.b	smpsNoAttack, $01
0008A358 E101                       	smpsAlterNote       $01
0008A35A E701                       	dc.b	smpsNoAttack, $01
0008A35C E100                       	smpsAlterNote       $00
0008A35E E701                       	dc.b	smpsNoAttack, $01
0008A360 E104                       	smpsAlterNote       $04
0008A362 E701                       	dc.b	smpsNoAttack, $01
0008A364 E10A                       	smpsAlterNote       $0A
0008A366 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A36A E107                       	smpsAlterNote       $07
0008A36C E701                       	dc.b	smpsNoAttack, $01
0008A36E E101                       	smpsAlterNote       $01
0008A370 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A374 E107                       	smpsAlterNote       $07
0008A376 E701                       	dc.b	smpsNoAttack, $01
0008A378 E10A                       	smpsAlterNote       $0A
0008A37A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A37E E104                       	smpsAlterNote       $04
0008A380 E701                       	dc.b	smpsNoAttack, $01
0008A382 E100                       	smpsAlterNote       $00
0008A384 E701                       	dc.b	smpsNoAttack, $01
0008A386 E101                       	smpsAlterNote       $01
0008A388 E701                       	dc.b	smpsNoAttack, $01
0008A38A E107                       	smpsAlterNote       $07
0008A38C E701                       	dc.b	smpsNoAttack, $01
0008A38E E10B                       	smpsAlterNote       $0B
0008A390 E701                       	dc.b	smpsNoAttack, $01
0008A392 E107                       	smpsAlterNote       $07
0008A394 E701                       	dc.b	smpsNoAttack, $01
0008A396 E104                       	smpsAlterNote       $04
0008A398 E701                       	dc.b	smpsNoAttack, $01
0008A39A E100                       	smpsAlterNote       $00
0008A39C E701                       	dc.b	smpsNoAttack, $01
0008A39E E104                       	smpsAlterNote       $04
0008A3A0 E701                       	dc.b	smpsNoAttack, $01
0008A3A2 E10A                       	smpsAlterNote       $0A
0008A3A4 E701                       	dc.b	smpsNoAttack, $01
0008A3A6 E10B                       	smpsAlterNote       $0B
0008A3A8 E701                       	dc.b	smpsNoAttack, $01
0008A3AA E107                       	smpsAlterNote       $07
0008A3AC E701                       	dc.b	smpsNoAttack, $01
0008A3AE E101                       	smpsAlterNote       $01
0008A3B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3B4 E104                       	smpsAlterNote       $04
0008A3B6 E701                       	dc.b	smpsNoAttack, $01
0008A3B8 E10A                       	smpsAlterNote       $0A
0008A3BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3BE E104                       	smpsAlterNote       $04
0008A3C0 E701                       	dc.b	smpsNoAttack, $01
0008A3C2 E101                       	smpsAlterNote       $01
0008A3C4 E701                       	dc.b	smpsNoAttack, $01
0008A3C8 E107                       	smpsAlterNote       $07
0008A3CA E6FF                       	smpsAlterVol        $FF
0008A3CC BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008A3D8 8004                       	dc.b	nRst, $04
0008A3DC E109                       	smpsAlterNote       $09
0008A3DE E602                       	smpsAlterVol        $02
0008A3E0 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0008A3E6 E108                       	smpsAlterNote       $08
0008A3E8 B502 8001                  	dc.b	nE4, $02, nRst, $01
0008A3EC E109                       	smpsAlterNote       $09
0008A3EE B60D                       	dc.b	nF4, $0D
0008A3F0 E106                       	smpsAlterNote       $06
0008A3F2 E701                       	dc.b	smpsNoAttack, $01
0008A3F4 E102                       	smpsAlterNote       $02
0008A3F6 E701                       	dc.b	smpsNoAttack, $01
0008A3F8 E106                       	smpsAlterNote       $06
0008A3FA E701                       	dc.b	smpsNoAttack, $01
0008A3FC E109                       	smpsAlterNote       $09
0008A3FE E701                       	dc.b	smpsNoAttack, $01
0008A400 E10D                       	smpsAlterNote       $0D
0008A402 E701                       	dc.b	smpsNoAttack, $01
0008A404 E109                       	smpsAlterNote       $09
0008A406 E701                       	dc.b	smpsNoAttack, $01
0008A408 E103                       	smpsAlterNote       $03
0008A40A E701                       	dc.b	smpsNoAttack, $01
0008A40C E102                       	smpsAlterNote       $02
0008A40E E701                       	dc.b	smpsNoAttack, $01
0008A410 E106                       	smpsAlterNote       $06
0008A412 E701                       	dc.b	smpsNoAttack, $01
0008A414 E10C                       	smpsAlterNote       $0C
0008A416 E701                       	dc.b	smpsNoAttack, $01
0008A418 E10D                       	smpsAlterNote       $0D
0008A41A 8001                       	dc.b	nRst, $01
0008A41C E109                       	smpsAlterNote       $09
0008A41E B80D                       	dc.b	nG4, $0D
0008A420 E106                       	smpsAlterNote       $06
0008A422 E701                       	dc.b	smpsNoAttack, $01
0008A424 E102                       	smpsAlterNote       $02
0008A426 E701                       	dc.b	smpsNoAttack, $01
0008A428 E106                       	smpsAlterNote       $06
0008A42A E701                       	dc.b	smpsNoAttack, $01
0008A42C E10C                       	smpsAlterNote       $0C
0008A42E E701                       	dc.b	smpsNoAttack, $01
0008A430 E10D                       	smpsAlterNote       $0D
0008A432 E701                       	dc.b	smpsNoAttack, $01
0008A434 E109                       	smpsAlterNote       $09
0008A436 E701                       	dc.b	smpsNoAttack, $01
0008A438 E103                       	smpsAlterNote       $03
0008A43A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A43E E106                       	smpsAlterNote       $06
0008A440 E701                       	dc.b	smpsNoAttack, $01
0008A442 E10C                       	smpsAlterNote       $0C
0008A444 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A448 E106                       	smpsAlterNote       $06
0008A44A E701                       	dc.b	smpsNoAttack, $01
0008A44C E103                       	smpsAlterNote       $03
0008A44E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A452 E109                       	smpsAlterNote       $09
0008A454 E701                       	dc.b	smpsNoAttack, $01
0008A456 E10D                       	smpsAlterNote       $0D
0008A458 E701                       	dc.b	smpsNoAttack, $01
0008A45A E10C                       	smpsAlterNote       $0C
0008A45C E701                       	dc.b	smpsNoAttack, $01
0008A45E E109                       	smpsAlterNote       $09
0008A460 8001                       	dc.b	nRst, $01
0008A462 E10B                       	smpsAlterNote       $0B
0008A464 BA03                       	dc.b	nA4, $03
0008A466 E10C                       	smpsAlterNote       $0C
0008A468 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008A46C E10B                       	smpsAlterNote       $0B
0008A46E BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0008A474 E10C                       	smpsAlterNote       $0C
0008A476 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008A47A E10B                       	smpsAlterNote       $0B
0008A47C C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008A482 E10C                       	smpsAlterNote       $0C
0008A484 D303                       	dc.b	nBb6, $03
0008A486 E10B                       	smpsAlterNote       $0B
0008A488 D20D                       	dc.b	nA6, $0D
0008A48A E108                       	smpsAlterNote       $08
0008A48C E701                       	dc.b	smpsNoAttack, $01
0008A48E E104                       	smpsAlterNote       $04
0008A490 E701                       	dc.b	smpsNoAttack, $01
0008A492 E105                       	smpsAlterNote       $05
0008A494 E701                       	dc.b	smpsNoAttack, $01
0008A496 E10B                       	smpsAlterNote       $0B
0008A498 E701                       	dc.b	smpsNoAttack, $01
0008A49A E10F                       	smpsAlterNote       $0F
0008A49C E701                       	dc.b	smpsNoAttack, $01
0008A49E E10B                       	smpsAlterNote       $0B
0008A4A0 E701                       	dc.b	smpsNoAttack, $01
0008A4A2 E108                       	smpsAlterNote       $08
0008A4A4 E701                       	dc.b	smpsNoAttack, $01
0008A4A6 E104                       	smpsAlterNote       $04
0008A4A8 E701                       	dc.b	smpsNoAttack, $01
0008A4AA E108                       	smpsAlterNote       $08
0008A4AC E701                       	dc.b	smpsNoAttack, $01
0008A4AE E10E                       	smpsAlterNote       $0E
0008A4B0 E701                       	dc.b	smpsNoAttack, $01
0008A4B2 E10F                       	smpsAlterNote       $0F
0008A4B4 E701                       	dc.b	smpsNoAttack, $01
0008A4B6 E10B                       	smpsAlterNote       $0B
0008A4B8 E701                       	dc.b	smpsNoAttack, $01
0008A4BA E105                       	smpsAlterNote       $05
0008A4BC E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008A4C2 E109                       	smpsAlterNote       $09
0008A4C4 CE07                       	dc.b	nF6, $07
0008A4C6 E108                       	smpsAlterNote       $08
0008A4C8 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008A4CC E109                       	smpsAlterNote       $09
0008A4CE CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008A4D2 E108                       	smpsAlterNote       $08
0008A4D4 CC0D                       	dc.b	nEb6, $0D
0008A4D6 E102                       	smpsAlterNote       $02
0008A4D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4DC E108                       	smpsAlterNote       $08
0008A4DE E701                       	dc.b	smpsNoAttack, $01
0008A4E0 E10B                       	smpsAlterNote       $0B
0008A4E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4E6 E105                       	smpsAlterNote       $05
0008A4E8 E701                       	dc.b	smpsNoAttack, $01
0008A4EA E101                       	smpsAlterNote       $01
0008A4EC E701                       	dc.b	smpsNoAttack, $01
0008A4EE E102                       	smpsAlterNote       $02
0008A4F0 E701                       	dc.b	smpsNoAttack, $01
0008A4F2 E108                       	smpsAlterNote       $08
0008A4F4 E701                       	dc.b	smpsNoAttack, $01
0008A4F6 E10C                       	smpsAlterNote       $0C
0008A4F8 E701                       	dc.b	smpsNoAttack, $01
0008A4FA E108                       	smpsAlterNote       $08
0008A4FC E701                       	dc.b	smpsNoAttack, $01
0008A4FE E105                       	smpsAlterNote       $05
0008A500 E701                       	dc.b	smpsNoAttack, $01
0008A502 E101                       	smpsAlterNote       $01
0008A504 E701                       	dc.b	smpsNoAttack, $01
0008A506 E105                       	smpsAlterNote       $05
0008A508 E701                       	dc.b	smpsNoAttack, $01
0008A50A E10B                       	smpsAlterNote       $0B
0008A50C E701                       	dc.b	smpsNoAttack, $01
0008A50E E10C                       	smpsAlterNote       $0C
0008A510 E701                       	dc.b	smpsNoAttack, $01
0008A512 E108                       	smpsAlterNote       $08
0008A514 E701                       	dc.b	smpsNoAttack, $01
0008A516 E107                       	smpsAlterNote       $07
0008A518 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0008A522 E10B                       	smpsAlterNote       $0B
0008A524 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008A52E E109                       	smpsAlterNote       $09
0008A530 C203                       	dc.b	nF5, $03
0008A532 E108                       	smpsAlterNote       $08
0008A534 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A538 E109                       	smpsAlterNote       $09
0008A53A C20D                       	dc.b	nF5, $0D
0008A53C E108                       	smpsAlterNote       $08
0008A53E C10E                       	dc.b	nE5, $0E
0008A540 E107                       	smpsAlterNote       $07
0008A542 BF0D                       	dc.b	nD5, $0D
0008A544 E104                       	smpsAlterNote       $04
0008A546 E701                       	dc.b	smpsNoAttack, $01
0008A548 E100                       	smpsAlterNote       $00
0008A54A E701                       	dc.b	smpsNoAttack, $01
0008A54C E104                       	smpsAlterNote       $04
0008A54E E701                       	dc.b	smpsNoAttack, $01
0008A550 E107                       	smpsAlterNote       $07
0008A552 E701                       	dc.b	smpsNoAttack, $01
0008A554 E10B                       	smpsAlterNote       $0B
0008A556 E701                       	dc.b	smpsNoAttack, $01
0008A558 E107                       	smpsAlterNote       $07
0008A55A E701                       	dc.b	smpsNoAttack, $01
0008A55C E101                       	smpsAlterNote       $01
0008A55E E701                       	dc.b	smpsNoAttack, $01
0008A560 E100                       	smpsAlterNote       $00
0008A562 E701                       	dc.b	smpsNoAttack, $01
0008A564 E104                       	smpsAlterNote       $04
0008A566 E701                       	dc.b	smpsNoAttack, $01
0008A568 E10A                       	smpsAlterNote       $0A
0008A56A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A56E E107                       	smpsAlterNote       $07
0008A570 E701                       	dc.b	smpsNoAttack, $01
0008A572 E101                       	smpsAlterNote       $01
0008A574 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A578 E107                       	smpsAlterNote       $07
0008A57A E701                       	dc.b	smpsNoAttack, $01
0008A57C E10A                       	smpsAlterNote       $0A
0008A57E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A582 E104                       	smpsAlterNote       $04
0008A584 E701                       	dc.b	smpsNoAttack, $01
0008A586 E100                       	smpsAlterNote       $00
0008A588 E701                       	dc.b	smpsNoAttack, $01
0008A58A E101                       	smpsAlterNote       $01
0008A58C E701                       	dc.b	smpsNoAttack, $01
0008A58E E107                       	smpsAlterNote       $07
0008A590 E701                       	dc.b	smpsNoAttack, $01
0008A592 E10B                       	smpsAlterNote       $0B
0008A594 E701                       	dc.b	smpsNoAttack, $01
0008A596 E107                       	smpsAlterNote       $07
0008A598 E701                       	dc.b	smpsNoAttack, $01
0008A59A E104                       	smpsAlterNote       $04
0008A59C E701                       	dc.b	smpsNoAttack, $01
0008A59E E100                       	smpsAlterNote       $00
0008A5A0 E701                       	dc.b	smpsNoAttack, $01
0008A5A2 E104                       	smpsAlterNote       $04
0008A5A4 E701                       	dc.b	smpsNoAttack, $01
0008A5A6 E10A                       	smpsAlterNote       $0A
0008A5A8 E701                       	dc.b	smpsNoAttack, $01
0008A5AA E10B                       	smpsAlterNote       $0B
0008A5AC E701                       	dc.b	smpsNoAttack, $01
0008A5AE E107                       	smpsAlterNote       $07
0008A5B0 E701                       	dc.b	smpsNoAttack, $01
0008A5B2 E101                       	smpsAlterNote       $01
0008A5B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5B8 E104                       	smpsAlterNote       $04
0008A5BA E701                       	dc.b	smpsNoAttack, $01
0008A5BC E10A                       	smpsAlterNote       $0A
0008A5BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5C2 E104                       	smpsAlterNote       $04
0008A5C4 E701                       	dc.b	smpsNoAttack, $01
0008A5C6 E101                       	smpsAlterNote       $01
0008A5C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5CC E107                       	smpsAlterNote       $07
0008A5CE E701                       	dc.b	smpsNoAttack, $01
0008A5D0 E10B                       	smpsAlterNote       $0B
0008A5D2 E701                       	dc.b	smpsNoAttack, $01
0008A5D4 E10A                       	smpsAlterNote       $0A
0008A5D6 E701                       	dc.b	smpsNoAttack, $01
0008A5D8 E104                       	smpsAlterNote       $04
0008A5DA E701                       	dc.b	smpsNoAttack, $01
0008A5DC E100                       	smpsAlterNote       $00
0008A5DE E701                       	dc.b	smpsNoAttack, $01
0008A5E0 E104                       	smpsAlterNote       $04
0008A5E2 E701                       	dc.b	smpsNoAttack, $01
0008A5E4 E107                       	smpsAlterNote       $07
0008A5E6 E701                       	dc.b	smpsNoAttack, $01
0008A5E8 E10B                       	smpsAlterNote       $0B
0008A5EA E701                       	dc.b	smpsNoAttack, $01
0008A5EC E107                       	smpsAlterNote       $07
0008A5EE E701                       	dc.b	smpsNoAttack, $01
0008A5F0 E101                       	smpsAlterNote       $01
0008A5F2 E701                       	dc.b	smpsNoAttack, $01
0008A5F4 E100                       	smpsAlterNote       $00
0008A5F6 E701                       	dc.b	smpsNoAttack, $01
0008A5F8 E104                       	smpsAlterNote       $04
0008A5FA E701                       	dc.b	smpsNoAttack, $01
0008A5FC E10A                       	smpsAlterNote       $0A
0008A5FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A602 E107                       	smpsAlterNote       $07
0008A604 E701                       	dc.b	smpsNoAttack, $01
0008A606 E101                       	smpsAlterNote       $01
0008A608 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A60C E107                       	smpsAlterNote       $07
0008A60E E701                       	dc.b	smpsNoAttack, $01
0008A610 E10A                       	smpsAlterNote       $0A
0008A612 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A616 E104                       	smpsAlterNote       $04
0008A618 E701                       	dc.b	smpsNoAttack, $01
0008A61A E100                       	smpsAlterNote       $00
0008A61C E701                       	dc.b	smpsNoAttack, $01
0008A61E E101                       	smpsAlterNote       $01
0008A620 E701                       	dc.b	smpsNoAttack, $01
0008A622 E107                       	smpsAlterNote       $07
0008A624 E701                       	dc.b	smpsNoAttack, $01
0008A626 E10B                       	smpsAlterNote       $0B
0008A628 E701                       	dc.b	smpsNoAttack, $01
0008A62A E107                       	smpsAlterNote       $07
0008A62C E701                       	dc.b	smpsNoAttack, $01
0008A62E E104                       	smpsAlterNote       $04
0008A630 E701                       	dc.b	smpsNoAttack, $01
0008A632 E100                       	smpsAlterNote       $00
0008A634 E701                       	dc.b	smpsNoAttack, $01
0008A636 E101                       	smpsAlterNote       $01
0008A638 8001                       	dc.b	nRst, $01
0008A63A E109                       	smpsAlterNote       $09
0008A63C C20D                       	dc.b	nF5, $0D
0008A63E E106                       	smpsAlterNote       $06
0008A640 E701                       	dc.b	smpsNoAttack, $01
0008A642 E102                       	smpsAlterNote       $02
0008A644 E701                       	dc.b	smpsNoAttack, $01
0008A646 E106                       	smpsAlterNote       $06
0008A648 E701                       	dc.b	smpsNoAttack, $01
0008A64A E10C                       	smpsAlterNote       $0C
0008A64C E701                       	dc.b	smpsNoAttack, $01
0008A64E E10D                       	smpsAlterNote       $0D
0008A650 E701                       	dc.b	smpsNoAttack, $01
0008A652 E109                       	smpsAlterNote       $09
0008A654 E701                       	dc.b	smpsNoAttack, $01
0008A656 E103                       	smpsAlterNote       $03
0008A658 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A65C E106                       	smpsAlterNote       $06
0008A65E E701                       	dc.b	smpsNoAttack, $01
0008A660 E10C                       	smpsAlterNote       $0C
0008A662 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A666 E106                       	smpsAlterNote       $06
0008A668 E701                       	dc.b	smpsNoAttack, $01
0008A66A E103                       	smpsAlterNote       $03
0008A66C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A670 E109                       	smpsAlterNote       $09
0008A672 E701                       	dc.b	smpsNoAttack, $01
0008A674 E10D                       	smpsAlterNote       $0D
0008A676 E701                       	dc.b	smpsNoAttack, $01
0008A678 E10C                       	smpsAlterNote       $0C
0008A67A E701                       	dc.b	smpsNoAttack, $01
0008A67C E109                       	smpsAlterNote       $09
0008A67E 8001                       	dc.b	nRst, $01
0008A680 E108                       	smpsAlterNote       $08
0008A682 C10D                       	dc.b	nE5, $0D
0008A684 E109                       	smpsAlterNote       $09
0008A686 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008A68A E108                       	smpsAlterNote       $08
0008A68C C10D                       	dc.b	nE5, $0D
0008A68E E102                       	smpsAlterNote       $02
0008A690 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A694 E105                       	smpsAlterNote       $05
0008A696 E701                       	dc.b	smpsNoAttack, $01
0008A698 E108                       	smpsAlterNote       $08
0008A69A 8001                       	dc.b	nRst, $01
0008A69C E107                       	smpsAlterNote       $07
0008A69E BF0D                       	dc.b	nD5, $0D
0008A6A0 E108                       	smpsAlterNote       $08
0008A6A2 C107                       	dc.b	nE5, $07
0008A6A4 E109                       	smpsAlterNote       $09
0008A6A6 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008A6AC E10B                       	smpsAlterNote       $0B
0008A6AE C603                       	dc.b	nA5, $03
0008A6B0 E10C                       	smpsAlterNote       $0C
0008A6B2 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008A6B8 E10B                       	smpsAlterNote       $0B
0008A6BA C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008A6C0 E109                       	smpsAlterNote       $09
0008A6C2 D003                       	dc.b	nG6, $03
0008A6C4 E108                       	smpsAlterNote       $08
0008A6C6 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008A6CA E10B                       	smpsAlterNote       $0B
0008A6CC C601 8001                  	dc.b	nA5, $01, nRst, $01
0008A6D0 E108                       	smpsAlterNote       $08
0008A6D2 C102                       	dc.b	nE5, $02
0008A6D6 E10C                       	smpsAlterNote       $0C
0008A6D8 E6FB                       	smpsAlterVol        $FB
0008A6DA A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008A6E6 8001                       	dc.b	nRst, $01
0008A6E8 E10B                       	smpsAlterNote       $0B
0008A6EA A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008A6F2 E107                       	smpsAlterNote       $07
0008A6F4 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008A6F8 E10B                       	smpsAlterNote       $0B
0008A6FA A203                       	dc.b	nA2, $03
0008A6FC E109                       	smpsAlterNote       $09
0008A6FE AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008A702 E108                       	smpsAlterNote       $08
0008A704 A906                       	dc.b	nE3, $06
0008A706 E107                       	smpsAlterNote       $07
0008A708 A703 8001                  	dc.b	nD3, $03, nRst, $01
0008A70C E106                       	smpsAlterNote       $06
0008A70E A503                       	dc.b	nC3, $03
0008A710 E10C                       	smpsAlterNote       $0C
0008A712 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A716 E10B                       	smpsAlterNote       $0B
0008A718 A203 8004                  	dc.b	nA2, $03, nRst, $04
0008A71C E11B                       	smpsAlterNote       $1B
0008A71E C401                       	dc.b	nG5, $01
0008A720 E1F4                       	smpsAlterNote       $F4
0008A722 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008A725 E106                       	smpsAlterNote       $06
0008A727 E701                       	dc.b	smpsNoAttack, $01
0008A729 E10F                       	smpsAlterNote       $0F
0008A72B E701                       	dc.b	smpsNoAttack, $01
0008A72D E1E4                       	smpsAlterNote       $E4
0008A72F E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008A732 E1F6                       	smpsAlterNote       $F6
0008A734 E701                       	dc.b	smpsNoAttack, $01
0008A736 E108                       	smpsAlterNote       $08
0008A738 E701                       	dc.b	smpsNoAttack, $01
0008A73A E10B                       	smpsAlterNote       $0B
0008A73C E706                       	dc.b	smpsNoAttack, $06
0008A73E E105                       	smpsAlterNote       $05
0008A740 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A744 E108                       	smpsAlterNote       $08
0008A746 E701                       	dc.b	smpsNoAttack, $01
0008A748 E10E                       	smpsAlterNote       $0E
0008A74A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A74E E108                       	smpsAlterNote       $08
0008A750 E701                       	dc.b	smpsNoAttack, $01
0008A752 E105                       	smpsAlterNote       $05
0008A754 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A758 E10B                       	smpsAlterNote       $0B
0008A75A E701                       	dc.b	smpsNoAttack, $01
0008A75C E10F                       	smpsAlterNote       $0F
0008A75E E701                       	dc.b	smpsNoAttack, $01
0008A760 E10E                       	smpsAlterNote       $0E
0008A762 E701                       	dc.b	smpsNoAttack, $01
0008A764 E108                       	smpsAlterNote       $08
0008A766 E701                       	dc.b	smpsNoAttack, $01
0008A768 E104                       	smpsAlterNote       $04
0008A76A E701                       	dc.b	smpsNoAttack, $01
0008A76C E108                       	smpsAlterNote       $08
0008A76E E701                       	dc.b	smpsNoAttack, $01
0008A770 E10B                       	smpsAlterNote       $0B
0008A772 E701                       	dc.b	smpsNoAttack, $01
0008A774 E10F                       	smpsAlterNote       $0F
0008A776 E701                       	dc.b	smpsNoAttack, $01
0008A778 E10B                       	smpsAlterNote       $0B
0008A77A E701                       	dc.b	smpsNoAttack, $01
0008A77C E105                       	smpsAlterNote       $05
0008A77E E701                       	dc.b	smpsNoAttack, $01
0008A780 E104                       	smpsAlterNote       $04
0008A782 E701                       	dc.b	smpsNoAttack, $01
0008A784 E108                       	smpsAlterNote       $08
0008A786 E701                       	dc.b	smpsNoAttack, $01
0008A788 E10E                       	smpsAlterNote       $0E
0008A78A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A78E E10B                       	smpsAlterNote       $0B
0008A790 E701                       	dc.b	smpsNoAttack, $01
0008A792 E105                       	smpsAlterNote       $05
0008A794 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A798 E10B                       	smpsAlterNote       $0B
0008A79A E701                       	dc.b	smpsNoAttack, $01
0008A79C E10E                       	smpsAlterNote       $0E
0008A79E E701                       	dc.b	smpsNoAttack, $01
0008A7A0 E10F                       	smpsAlterNote       $0F
0008A7A2 8001                       	dc.b	nRst, $01
0008A7A4 E109                       	smpsAlterNote       $09
0008A7A6 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008A7AC E108                       	smpsAlterNote       $08
0008A7AE C101 8001                  	dc.b	nE5, $01, nRst, $01
0008A7B2 E109                       	smpsAlterNote       $09
0008A7B4 C202                       	dc.b	nF5, $02
0008A7B6 E108                       	smpsAlterNote       $08
0008A7B8 C102                       	dc.b	nE5, $02
0008A7BA E107                       	smpsAlterNote       $07
0008A7BC BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008A7C0 E108                       	smpsAlterNote       $08
0008A7C2 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008A7C6 E107                       	smpsAlterNote       $07
0008A7C8 BF02                       	dc.b	nD5, $02
0008A7CA E106                       	smpsAlterNote       $06
0008A7CC BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A7D0 E107                       	smpsAlterNote       $07
0008A7D2 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008A7D6 E106                       	smpsAlterNote       $06
0008A7D8 BD02                       	dc.b	nC5, $02
0008A7DA E10C                       	smpsAlterNote       $0C
0008A7DC BB02                       	dc.b	nBb4, $02
0008A7DE E106                       	smpsAlterNote       $06
0008A7E0 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A7E4 E10C                       	smpsAlterNote       $0C
0008A7E6 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008A7EA E10B                       	smpsAlterNote       $0B
0008A7EC BA02                       	dc.b	nA4, $02
0008A7EE E10C                       	smpsAlterNote       $0C
0008A7F0 BB02                       	dc.b	nBb4, $02
0008A7F2 E10B                       	smpsAlterNote       $0B
0008A7F4 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008A7FE E108                       	smpsAlterNote       $08
0008A800 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008A808 E107                       	smpsAlterNote       $07
0008A80A BE02                       	dc.b	nCs5, $02
0008A80C E10B                       	smpsAlterNote       $0B
0008A80E BA02                       	dc.b	nA4, $02
0008A810 E109                       	smpsAlterNote       $09
0008A812 B802 8001                  	dc.b	nG4, $02, nRst, $01
0008A816 E108                       	smpsAlterNote       $08
0008A818 B501 8001                  	dc.b	nE4, $01, nRst, $01
0008A81C E10B                       	smpsAlterNote       $0B
0008A81E AE02                       	dc.b	nA3, $02
0008A820 E10C                       	smpsAlterNote       $0C
0008A822 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008A82E E10B                       	smpsAlterNote       $0B
0008A830 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008A838 E107                       	smpsAlterNote       $07
0008A83A A706 8001                  	dc.b	nD3, $06, nRst, $01
0008A83E E10B                       	smpsAlterNote       $0B
0008A840 A203                       	dc.b	nA2, $03
0008A842 E109                       	smpsAlterNote       $09
0008A844 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008A848 E108                       	smpsAlterNote       $08
0008A84A A906 8001                  	dc.b	nE3, $06, nRst, $01
0008A84E E107                       	smpsAlterNote       $07
0008A850 A702 8001                  	dc.b	nD3, $02, nRst, $01
0008A854 E106                       	smpsAlterNote       $06
0008A856 A503                       	dc.b	nC3, $03
0008A858 E10C                       	smpsAlterNote       $0C
0008A85A A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A860 E107                       	smpsAlterNote       $07
0008A862 B20D                       	dc.b	nCs4, $0D
0008A864 E104                       	smpsAlterNote       $04
0008A866 E701                       	dc.b	smpsNoAttack, $01
0008A868 E100                       	smpsAlterNote       $00
0008A86A E701                       	dc.b	smpsNoAttack, $01
0008A86C E104                       	smpsAlterNote       $04
0008A86E E701                       	dc.b	smpsNoAttack, $01
0008A870 E10A                       	smpsAlterNote       $0A
0008A872 E701                       	dc.b	smpsNoAttack, $01
0008A874 E10B                       	smpsAlterNote       $0B
0008A876 E701                       	dc.b	smpsNoAttack, $01
0008A878 E107                       	smpsAlterNote       $07
0008A87A E701                       	dc.b	smpsNoAttack, $01
0008A87C E101                       	smpsAlterNote       $01
0008A87E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A882 E104                       	smpsAlterNote       $04
0008A884 E701                       	dc.b	smpsNoAttack, $01
0008A886 E10A                       	smpsAlterNote       $0A
0008A888 E701                       	dc.b	smpsNoAttack, $01
0008A88A E10B                       	smpsAlterNote       $0B
0008A88C 8001                       	dc.b	nRst, $01
0008A88E E107                       	smpsAlterNote       $07
0008A890 B30D                       	dc.b	nD4, $0D
0008A892 E104                       	smpsAlterNote       $04
0008A894 E701                       	dc.b	smpsNoAttack, $01
0008A896 E100                       	smpsAlterNote       $00
0008A898 E701                       	dc.b	smpsNoAttack, $01
0008A89A E104                       	smpsAlterNote       $04
0008A89C E701                       	dc.b	smpsNoAttack, $01
0008A89E E10A                       	smpsAlterNote       $0A
0008A8A0 E701                       	dc.b	smpsNoAttack, $01
0008A8A2 E10B                       	smpsAlterNote       $0B
0008A8A4 E701                       	dc.b	smpsNoAttack, $01
0008A8A6 E107                       	smpsAlterNote       $07
0008A8A8 E701                       	dc.b	smpsNoAttack, $01
0008A8AA E101                       	smpsAlterNote       $01
0008A8AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8B0 E104                       	smpsAlterNote       $04
0008A8B2 E701                       	dc.b	smpsNoAttack, $01
0008A8B4 E10A                       	smpsAlterNote       $0A
0008A8B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8BA E104                       	smpsAlterNote       $04
0008A8BC E701                       	dc.b	smpsNoAttack, $01
0008A8BE E101                       	smpsAlterNote       $01
0008A8C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8C4 E107                       	smpsAlterNote       $07
0008A8C6 E701                       	dc.b	smpsNoAttack, $01
0008A8C8 E10B                       	smpsAlterNote       $0B
0008A8CA E701                       	dc.b	smpsNoAttack, $01
0008A8CC E10A                       	smpsAlterNote       $0A
0008A8CE E701                       	dc.b	smpsNoAttack, $01
0008A8D0 E107                       	smpsAlterNote       $07
0008A8D2 8001                       	dc.b	nRst, $01
0008A8D4 E108                       	smpsAlterNote       $08
0008A8D6 B50D                       	dc.b	nE4, $0D
0008A8D8 E102                       	smpsAlterNote       $02
0008A8DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8DE E105                       	smpsAlterNote       $05
0008A8E0 E701                       	dc.b	smpsNoAttack, $01
0008A8E2 E10B                       	smpsAlterNote       $0B
0008A8E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8E8 E105                       	smpsAlterNote       $05
0008A8EA E701                       	dc.b	smpsNoAttack, $01
0008A8EC E102                       	smpsAlterNote       $02
0008A8EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8F2 E108                       	smpsAlterNote       $08
0008A8F4 E701                       	dc.b	smpsNoAttack, $01
0008A8F6 E10C                       	smpsAlterNote       $0C
0008A8F8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A8FC E107                       	smpsAlterNote       $07
0008A8FE B30D                       	dc.b	nD4, $0D
0008A900 E101                       	smpsAlterNote       $01
0008A902 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A906 E104                       	smpsAlterNote       $04
0008A908 E701                       	dc.b	smpsNoAttack, $01
0008A90A E10A                       	smpsAlterNote       $0A
0008A90C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A910 E104                       	smpsAlterNote       $04
0008A912 E701                       	dc.b	smpsNoAttack, $01
0008A914 E101                       	smpsAlterNote       $01
0008A916 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A91A E107                       	smpsAlterNote       $07
0008A91C E701                       	dc.b	smpsNoAttack, $01
0008A91E E10B                       	smpsAlterNote       $0B
0008A920 E701                       	dc.b	smpsNoAttack, $01
0008A922 E10A                       	smpsAlterNote       $0A
0008A924 E701                       	dc.b	smpsNoAttack, $01
0008A926 E104                       	smpsAlterNote       $04
0008A928 E701                       	dc.b	smpsNoAttack, $01
0008A92A E100                       	smpsAlterNote       $00
0008A92C E701                       	dc.b	smpsNoAttack, $01
0008A92E E104                       	smpsAlterNote       $04
0008A930 E701                       	dc.b	smpsNoAttack, $01
0008A932 E107                       	smpsAlterNote       $07
0008A934 E701                       	dc.b	smpsNoAttack, $01
0008A936 E10B                       	smpsAlterNote       $0B
0008A938 E701                       	dc.b	smpsNoAttack, $01
0008A93A E107                       	smpsAlterNote       $07
0008A93C E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008A940 E101                       	smpsAlterNote       $01
0008A942 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A946 E107                       	smpsAlterNote       $07
0008A948 E701                       	dc.b	smpsNoAttack, $01
0008A94A E10A                       	smpsAlterNote       $0A
0008A94C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A950 E104                       	smpsAlterNote       $04
0008A952 E701                       	dc.b	smpsNoAttack, $01
0008A954 E100                       	smpsAlterNote       $00
0008A956 E701                       	dc.b	smpsNoAttack, $01
0008A958 E101                       	smpsAlterNote       $01
0008A95A E701                       	dc.b	smpsNoAttack, $01
0008A95C E107                       	smpsAlterNote       $07
0008A95E E701                       	dc.b	smpsNoAttack, $01
0008A960 E10B                       	smpsAlterNote       $0B
0008A962 E701                       	dc.b	smpsNoAttack, $01
0008A964 E107                       	smpsAlterNote       $07
0008A966 B30E                       	dc.b	nD4, $0E
0008A968 E101                       	smpsAlterNote       $01
0008A96A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A96E E107                       	smpsAlterNote       $07
0008A970 E701                       	dc.b	smpsNoAttack, $01
0008A972 E10A                       	smpsAlterNote       $0A
0008A974 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A978 E104                       	smpsAlterNote       $04
0008A97A E701                       	dc.b	smpsNoAttack, $01
0008A97C E100                       	smpsAlterNote       $00
0008A97E E701                       	dc.b	smpsNoAttack, $01
0008A980 E101                       	smpsAlterNote       $01
0008A982 E701                       	dc.b	smpsNoAttack, $01
0008A984 E107                       	smpsAlterNote       $07
0008A986 E701                       	dc.b	smpsNoAttack, $01
0008A988 E10B                       	smpsAlterNote       $0B
0008A98A E701                       	dc.b	smpsNoAttack, $01
0008A98C E107                       	smpsAlterNote       $07
0008A98E E701                       	dc.b	smpsNoAttack, $01
0008A990 E104                       	smpsAlterNote       $04
0008A992 E701                       	dc.b	smpsNoAttack, $01
0008A994 E100                       	smpsAlterNote       $00
0008A996 E701                       	dc.b	smpsNoAttack, $01
0008A998 E104                       	smpsAlterNote       $04
0008A99A E701                       	dc.b	smpsNoAttack, $01
0008A99C E10A                       	smpsAlterNote       $0A
0008A99E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9A2 E107                       	smpsAlterNote       $07
0008A9A4 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008A9A8 E104                       	smpsAlterNote       $04
0008A9AA E701                       	dc.b	smpsNoAttack, $01
0008A9AC E100                       	smpsAlterNote       $00
0008A9AE E701                       	dc.b	smpsNoAttack, $01
0008A9B0 E101                       	smpsAlterNote       $01
0008A9B2 E701                       	dc.b	smpsNoAttack, $01
0008A9B4 E107                       	smpsAlterNote       $07
0008A9B6 E701                       	dc.b	smpsNoAttack, $01
0008A9B8 E10B                       	smpsAlterNote       $0B
0008A9BA E701                       	dc.b	smpsNoAttack, $01
0008A9BC E107                       	smpsAlterNote       $07
0008A9BE E701                       	dc.b	smpsNoAttack, $01
0008A9C0 E104                       	smpsAlterNote       $04
0008A9C2 E701                       	dc.b	smpsNoAttack, $01
0008A9C4 E100                       	smpsAlterNote       $00
0008A9C6 E701                       	dc.b	smpsNoAttack, $01
0008A9C8 E104                       	smpsAlterNote       $04
0008A9CA E701                       	dc.b	smpsNoAttack, $01
0008A9CC E10A                       	smpsAlterNote       $0A
0008A9CE E701                       	dc.b	smpsNoAttack, $01
0008A9D0 E10B                       	smpsAlterNote       $0B
0008A9D2 E701                       	dc.b	smpsNoAttack, $01
0008A9D6 E6FF                       	smpsAlterVol        $FF
0008A9D8 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008A9E4 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008A9EC E109                       	smpsAlterNote       $09
0008A9EE E601                       	smpsAlterVol        $01
0008A9F0 B60D                       	dc.b	nF4, $0D
0008A9F2 E106                       	smpsAlterNote       $06
0008A9F4 E701                       	dc.b	smpsNoAttack, $01
0008A9F6 E102                       	smpsAlterNote       $02
0008A9F8 E701                       	dc.b	smpsNoAttack, $01
0008A9FA E106                       	smpsAlterNote       $06
0008A9FC E701                       	dc.b	smpsNoAttack, $01
0008A9FE E109                       	smpsAlterNote       $09
0008AA00 E701                       	dc.b	smpsNoAttack, $01
0008AA02 E10D                       	smpsAlterNote       $0D
0008AA04 E701                       	dc.b	smpsNoAttack, $01
0008AA06 E109                       	smpsAlterNote       $09
0008AA08 E701                       	dc.b	smpsNoAttack, $01
0008AA0A E103                       	smpsAlterNote       $03
0008AA0C E701                       	dc.b	smpsNoAttack, $01
0008AA0E E102                       	smpsAlterNote       $02
0008AA10 E701                       	dc.b	smpsNoAttack, $01
0008AA12 E106                       	smpsAlterNote       $06
0008AA14 E701                       	dc.b	smpsNoAttack, $01
0008AA16 E10C                       	smpsAlterNote       $0C
0008AA18 E701                       	dc.b	smpsNoAttack, $01
0008AA1A E10D                       	smpsAlterNote       $0D
0008AA1C 8001                       	dc.b	nRst, $01
0008AA1E E109                       	smpsAlterNote       $09
0008AA20 B80D                       	dc.b	nG4, $0D
0008AA22 E106                       	smpsAlterNote       $06
0008AA24 E701                       	dc.b	smpsNoAttack, $01
0008AA26 E102                       	smpsAlterNote       $02
0008AA28 E701                       	dc.b	smpsNoAttack, $01
0008AA2A E106                       	smpsAlterNote       $06
0008AA2C E701                       	dc.b	smpsNoAttack, $01
0008AA2E E109                       	smpsAlterNote       $09
0008AA30 E701                       	dc.b	smpsNoAttack, $01
0008AA32 E10D                       	smpsAlterNote       $0D
0008AA34 E701                       	dc.b	smpsNoAttack, $01
0008AA36 E109                       	smpsAlterNote       $09
0008AA38 E701                       	dc.b	smpsNoAttack, $01
0008AA3A E103                       	smpsAlterNote       $03
0008AA3C E701                       	dc.b	smpsNoAttack, $01
0008AA3E E102                       	smpsAlterNote       $02
0008AA40 E701                       	dc.b	smpsNoAttack, $01
0008AA42 E106                       	smpsAlterNote       $06
0008AA44 E701                       	dc.b	smpsNoAttack, $01
0008AA46 E10C                       	smpsAlterNote       $0C
0008AA48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA4C E106                       	smpsAlterNote       $06
0008AA4E E701                       	dc.b	smpsNoAttack, $01
0008AA50 E103                       	smpsAlterNote       $03
0008AA52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA56 E109                       	smpsAlterNote       $09
0008AA58 E701                       	dc.b	smpsNoAttack, $01
0008AA5A E10D                       	smpsAlterNote       $0D
0008AA5C E701                       	dc.b	smpsNoAttack, $01
0008AA5E E10C                       	smpsAlterNote       $0C
0008AA60 E701                       	dc.b	smpsNoAttack, $01
0008AA62 E109                       	smpsAlterNote       $09
0008AA64 8001                       	dc.b	nRst, $01
0008AA66 E10B                       	smpsAlterNote       $0B
0008AA68 BA0D                       	dc.b	nA4, $0D
0008AA6A E105                       	smpsAlterNote       $05
0008AA6C E701                       	dc.b	smpsNoAttack, $01
0008AA6E E104                       	smpsAlterNote       $04
0008AA70 E701                       	dc.b	smpsNoAttack, $01
0008AA72 E108                       	smpsAlterNote       $08
0008AA74 E701                       	dc.b	smpsNoAttack, $01
0008AA76 E10E                       	smpsAlterNote       $0E
0008AA78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA7C E10B                       	smpsAlterNote       $0B
0008AA7E E701                       	dc.b	smpsNoAttack, $01
0008AA80 E105                       	smpsAlterNote       $05
0008AA82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA86 E10B                       	smpsAlterNote       $0B
0008AA88 E701                       	dc.b	smpsNoAttack, $01
0008AA8A E10E                       	smpsAlterNote       $0E
0008AA8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA90 E108                       	smpsAlterNote       $08
0008AA92 E701                       	dc.b	smpsNoAttack, $01
0008AA94 E104                       	smpsAlterNote       $04
0008AA96 E701                       	dc.b	smpsNoAttack, $01
0008AA98 E105                       	smpsAlterNote       $05
0008AA9A E701                       	dc.b	smpsNoAttack, $01
0008AA9C E10B                       	smpsAlterNote       $0B
0008AA9E E701                       	dc.b	smpsNoAttack, $01
0008AAA0 E10F                       	smpsAlterNote       $0F
0008AAA2 E701                       	dc.b	smpsNoAttack, $01
0008AAA4 E10B                       	smpsAlterNote       $0B
0008AAA6 E701                       	dc.b	smpsNoAttack, $01
0008AAA8 E108                       	smpsAlterNote       $08
0008AAAA E701                       	dc.b	smpsNoAttack, $01
0008AAAC E104                       	smpsAlterNote       $04
0008AAAE E701                       	dc.b	smpsNoAttack, $01
0008AAB0 E108                       	smpsAlterNote       $08
0008AAB2 E701                       	dc.b	smpsNoAttack, $01
0008AAB4 E10E                       	smpsAlterNote       $0E
0008AAB6 E701                       	dc.b	smpsNoAttack, $01
0008AAB8 E10F                       	smpsAlterNote       $0F
0008AABA E701                       	dc.b	smpsNoAttack, $01
0008AABC E10B                       	smpsAlterNote       $0B
0008AABE E701                       	dc.b	smpsNoAttack, $01
0008AAC0 E105                       	smpsAlterNote       $05
0008AAC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAC6 E108                       	smpsAlterNote       $08
0008AAC8 E701                       	dc.b	smpsNoAttack, $01
0008AACA E10E                       	smpsAlterNote       $0E
0008AACC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAD0 E108                       	smpsAlterNote       $08
0008AAD2 E701                       	dc.b	smpsNoAttack, $01
0008AAD4 E105                       	smpsAlterNote       $05
0008AAD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AADA E108                       	smpsAlterNote       $08
0008AADC B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008AAE0 E109                       	smpsAlterNote       $09
0008AAE2 B60D                       	dc.b	nF4, $0D
0008AAE4 E103                       	smpsAlterNote       $03
0008AAE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAEA E106                       	smpsAlterNote       $06
0008AAEC E701                       	dc.b	smpsNoAttack, $01
0008AAEE E10C                       	smpsAlterNote       $0C
0008AAF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAF4 E106                       	smpsAlterNote       $06
0008AAF6 E701                       	dc.b	smpsNoAttack, $01
0008AAF8 E103                       	smpsAlterNote       $03
0008AAFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAFE E109                       	smpsAlterNote       $09
0008AB00 E701                       	dc.b	smpsNoAttack, $01
0008AB02 E10D                       	smpsAlterNote       $0D
0008AB04 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AB08 E109                       	smpsAlterNote       $09
0008AB0A B80D                       	dc.b	nG4, $0D
0008AB0C E103                       	smpsAlterNote       $03
0008AB0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB12 E109                       	smpsAlterNote       $09
0008AB14 E701                       	dc.b	smpsNoAttack, $01
0008AB16 E10C                       	smpsAlterNote       $0C
0008AB18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB1C E106                       	smpsAlterNote       $06
0008AB1E E701                       	dc.b	smpsNoAttack, $01
0008AB20 E102                       	smpsAlterNote       $02
0008AB22 E701                       	dc.b	smpsNoAttack, $01
0008AB24 E103                       	smpsAlterNote       $03
0008AB26 E701                       	dc.b	smpsNoAttack, $01
0008AB28 E109                       	smpsAlterNote       $09
0008AB2A E701                       	dc.b	smpsNoAttack, $01
0008AB2C E10D                       	smpsAlterNote       $0D
0008AB2E E701                       	dc.b	smpsNoAttack, $01
0008AB30 E109                       	smpsAlterNote       $09
0008AB32 E701                       	dc.b	smpsNoAttack, $01
0008AB34 E106                       	smpsAlterNote       $06
0008AB36 E701                       	dc.b	smpsNoAttack, $01
0008AB38 E102                       	smpsAlterNote       $02
0008AB3A E701                       	dc.b	smpsNoAttack, $01
0008AB3C E106                       	smpsAlterNote       $06
0008AB3E E701                       	dc.b	smpsNoAttack, $01
0008AB40 E10C                       	smpsAlterNote       $0C
0008AB42 E701                       	dc.b	smpsNoAttack, $01
0008AB44 E10D                       	smpsAlterNote       $0D
0008AB46 E701                       	dc.b	smpsNoAttack, $01
0008AB48 E109                       	smpsAlterNote       $09
0008AB4A E701                       	dc.b	smpsNoAttack, $01
0008AB4C E10B                       	smpsAlterNote       $0B
0008AB4E BA0D                       	dc.b	nA4, $0D
0008AB50 E108                       	smpsAlterNote       $08
0008AB52 E701                       	dc.b	smpsNoAttack, $01
0008AB54 E105                       	smpsAlterNote       $05
0008AB56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB5A E10B                       	smpsAlterNote       $0B
0008AB5C E701                       	dc.b	smpsNoAttack, $01
0008AB5E E10F                       	smpsAlterNote       $0F
0008AB60 E701                       	dc.b	smpsNoAttack, $01
0008AB62 E10E                       	smpsAlterNote       $0E
0008AB64 E701                       	dc.b	smpsNoAttack, $01
0008AB66 E108                       	smpsAlterNote       $08
0008AB68 E701                       	dc.b	smpsNoAttack, $01
0008AB6A E104                       	smpsAlterNote       $04
0008AB6C E701                       	dc.b	smpsNoAttack, $01
0008AB6E E108                       	smpsAlterNote       $08
0008AB70 E701                       	dc.b	smpsNoAttack, $01
0008AB72 E10B                       	smpsAlterNote       $0B
0008AB74 E701                       	dc.b	smpsNoAttack, $01
0008AB76 E10F                       	smpsAlterNote       $0F
0008AB78 E701                       	dc.b	smpsNoAttack, $01
0008AB7A E10B                       	smpsAlterNote       $0B
0008AB7C E701                       	dc.b	smpsNoAttack, $01
0008AB7E E105                       	smpsAlterNote       $05
0008AB80 E701                       	dc.b	smpsNoAttack, $01
0008AB82 E104                       	smpsAlterNote       $04
0008AB84 E701                       	dc.b	smpsNoAttack, $01
0008AB86 E108                       	smpsAlterNote       $08
0008AB88 E701                       	dc.b	smpsNoAttack, $01
0008AB8A E10E                       	smpsAlterNote       $0E
0008AB8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB90 E10B                       	smpsAlterNote       $0B
0008AB92 E701                       	dc.b	smpsNoAttack, $01
0008AB94 E105                       	smpsAlterNote       $05
0008AB96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB9A E10B                       	smpsAlterNote       $0B
0008AB9C E701                       	dc.b	smpsNoAttack, $01
0008AB9E E10E                       	smpsAlterNote       $0E
0008ABA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABA4 E108                       	smpsAlterNote       $08
0008ABA6 E701                       	dc.b	smpsNoAttack, $01
0008ABA8 E105                       	smpsAlterNote       $05
0008ABAA 8001                       	dc.b	nRst, $01
0008ABAC E109                       	smpsAlterNote       $09
0008ABAE B60A                       	dc.b	nF4, $0A
0008ABB0 E108                       	smpsAlterNote       $08
0008ABB2 B507                       	dc.b	nE4, $07
0008ABB4 E107                       	smpsAlterNote       $07
0008ABB6 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008ABBA E108                       	smpsAlterNote       $08
0008ABBC B503                       	dc.b	nE4, $03
0008ABBE E109                       	smpsAlterNote       $09
0008ABC0 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008ABC8 E10B                       	smpsAlterNote       $0B
0008ABCA BA0D                       	dc.b	nA4, $0D
0008ABCC E108                       	smpsAlterNote       $08
0008ABCE E701                       	dc.b	smpsNoAttack, $01
0008ABD0 E104                       	smpsAlterNote       $04
0008ABD2 E701                       	dc.b	smpsNoAttack, $01
0008ABD4 E108                       	smpsAlterNote       $08
0008ABD6 E701                       	dc.b	smpsNoAttack, $01
0008ABD8 E10B                       	smpsAlterNote       $0B
0008ABDA E701                       	dc.b	smpsNoAttack, $01
0008ABDC E10F                       	smpsAlterNote       $0F
0008ABDE E701                       	dc.b	smpsNoAttack, $01
0008ABE0 E10B                       	smpsAlterNote       $0B
0008ABE2 E701                       	dc.b	smpsNoAttack, $01
0008ABE4 E105                       	smpsAlterNote       $05
0008ABE6 E701                       	dc.b	smpsNoAttack, $01
0008ABE8 E104                       	smpsAlterNote       $04
0008ABEA E701                       	dc.b	smpsNoAttack, $01
0008ABEC E108                       	smpsAlterNote       $08
0008ABEE E701                       	dc.b	smpsNoAttack, $01
0008ABF0 E10E                       	smpsAlterNote       $0E
0008ABF2 E701                       	dc.b	smpsNoAttack, $01
0008ABF4 E10F                       	smpsAlterNote       $0F
0008ABF6 8001                       	dc.b	nRst, $01
0008ABF8 E109                       	smpsAlterNote       $09
0008ABFA C20D                       	dc.b	nF5, $0D
0008ABFC E106                       	smpsAlterNote       $06
0008ABFE E701                       	dc.b	smpsNoAttack, $01
0008AC00 E102                       	smpsAlterNote       $02
0008AC02 E701                       	dc.b	smpsNoAttack, $01
0008AC04 E106                       	smpsAlterNote       $06
0008AC06 E701                       	dc.b	smpsNoAttack, $01
0008AC08 E109                       	smpsAlterNote       $09
0008AC0A E701                       	dc.b	smpsNoAttack, $01
0008AC0C E10D                       	smpsAlterNote       $0D
0008AC0E E701                       	dc.b	smpsNoAttack, $01
0008AC10 E109                       	smpsAlterNote       $09
0008AC12 E701                       	dc.b	smpsNoAttack, $01
0008AC14 E103                       	smpsAlterNote       $03
0008AC16 E701                       	dc.b	smpsNoAttack, $01
0008AC18 E102                       	smpsAlterNote       $02
0008AC1A E701                       	dc.b	smpsNoAttack, $01
0008AC1C E106                       	smpsAlterNote       $06
0008AC1E E701                       	dc.b	smpsNoAttack, $01
0008AC20 E10C                       	smpsAlterNote       $0C
0008AC22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC26 E109                       	smpsAlterNote       $09
0008AC28 E701                       	dc.b	smpsNoAttack, $01
0008AC2A E103                       	smpsAlterNote       $03
0008AC2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC30 E109                       	smpsAlterNote       $09
0008AC32 E701                       	dc.b	smpsNoAttack, $01
0008AC34 E10C                       	smpsAlterNote       $0C
0008AC36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC3A E106                       	smpsAlterNote       $06
0008AC3C E701                       	dc.b	smpsNoAttack, $01
0008AC3E E102                       	smpsAlterNote       $02
0008AC40 E701                       	dc.b	smpsNoAttack, $01
0008AC42 E103                       	smpsAlterNote       $03
0008AC44 E701                       	dc.b	smpsNoAttack, $01
0008AC46 E109                       	smpsAlterNote       $09
0008AC48 E701                       	dc.b	smpsNoAttack, $01
0008AC4A E10D                       	smpsAlterNote       $0D
0008AC4C E701                       	dc.b	smpsNoAttack, $01
0008AC4E E109                       	smpsAlterNote       $09
0008AC50 E701                       	dc.b	smpsNoAttack, $01
0008AC52 E106                       	smpsAlterNote       $06
0008AC54 E701                       	dc.b	smpsNoAttack, $01
0008AC56 E102                       	smpsAlterNote       $02
0008AC58 E701                       	dc.b	smpsNoAttack, $01
0008AC5A E106                       	smpsAlterNote       $06
0008AC5C E701                       	dc.b	smpsNoAttack, $01
0008AC5E E10C                       	smpsAlterNote       $0C
0008AC60 E701                       	dc.b	smpsNoAttack, $01
0008AC62 E10D                       	smpsAlterNote       $0D
0008AC64 E701                       	dc.b	smpsNoAttack, $01
0008AC66 E109                       	smpsAlterNote       $09
0008AC68 E701                       	dc.b	smpsNoAttack, $01
0008AC6A E103                       	smpsAlterNote       $03
0008AC6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC70 E106                       	smpsAlterNote       $06
0008AC72 E701                       	dc.b	smpsNoAttack, $01
0008AC74 E10C                       	smpsAlterNote       $0C
0008AC76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC7A E106                       	smpsAlterNote       $06
0008AC7C E701                       	dc.b	smpsNoAttack, $01
0008AC7E E103                       	smpsAlterNote       $03
0008AC80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC84 E109                       	smpsAlterNote       $09
0008AC86 E701                       	dc.b	smpsNoAttack, $01
0008AC88 E10D                       	smpsAlterNote       $0D
0008AC8A E701                       	dc.b	smpsNoAttack, $01
0008AC8C E10C                       	smpsAlterNote       $0C
0008AC8E E701                       	dc.b	smpsNoAttack, $01
0008AC90 E106                       	smpsAlterNote       $06
0008AC92 E701                       	dc.b	smpsNoAttack, $01
0008AC94 E103                       	smpsAlterNote       $03
0008AC96 8001                       	dc.b	nRst, $01
0008AC98 E109                       	smpsAlterNote       $09
0008AC9A C206 8001                  	dc.b	nF5, $06, nRst, $01
0008ACA0 E10C                       	smpsAlterNote       $0C
0008ACA2 E601                       	smpsAlterVol        $01
0008ACA4 BB0D                       	dc.b	nBb4, $0D
0008ACA6 E106                       	smpsAlterNote       $06
0008ACA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACAC E109                       	smpsAlterNote       $09
0008ACAE E701                       	dc.b	smpsNoAttack, $01
0008ACB0 E10F                       	smpsAlterNote       $0F
0008ACB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACB6 E109                       	smpsAlterNote       $09
0008ACB8 E701                       	dc.b	smpsNoAttack, $01
0008ACBA E106                       	smpsAlterNote       $06
0008ACBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACC0 E10C                       	smpsAlterNote       $0C
0008ACC2 E701                       	dc.b	smpsNoAttack, $01
0008ACC4 E110                       	smpsAlterNote       $10
0008ACC6 E701                       	dc.b	smpsNoAttack, $01
0008ACC8 E10F                       	smpsAlterNote       $0F
0008ACCA E701                       	dc.b	smpsNoAttack, $01
0008ACCC E109                       	smpsAlterNote       $09
0008ACCE E701                       	dc.b	smpsNoAttack, $01
0008ACD0 E105                       	smpsAlterNote       $05
0008ACD2 E701                       	dc.b	smpsNoAttack, $01
0008ACD4 E106                       	smpsAlterNote       $06
0008ACD6 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008ACDA E103                       	smpsAlterNote       $03
0008ACDC E701                       	dc.b	smpsNoAttack, $01
0008ACDE E1FF                       	smpsAlterNote       $FF
0008ACE0 E701                       	dc.b	smpsNoAttack, $01
0008ACE2 E103                       	smpsAlterNote       $03
0008ACE4 E701                       	dc.b	smpsNoAttack, $01
0008ACE6 E106                       	smpsAlterNote       $06
0008ACE8 E701                       	dc.b	smpsNoAttack, $01
0008ACEA E10A                       	smpsAlterNote       $0A
0008ACEC E701                       	dc.b	smpsNoAttack, $01
0008ACEE E106                       	smpsAlterNote       $06
0008ACF0 E701                       	dc.b	smpsNoAttack, $01
0008ACF2 E100                       	smpsAlterNote       $00
0008ACF4 E701                       	dc.b	smpsNoAttack, $01
0008ACF6 E1FF                       	smpsAlterNote       $FF
0008ACF8 E701                       	dc.b	smpsNoAttack, $01
0008ACFA E103                       	smpsAlterNote       $03
0008ACFC E701                       	dc.b	smpsNoAttack, $01
0008ACFE E109                       	smpsAlterNote       $09
0008AD00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD04 E106                       	smpsAlterNote       $06
0008AD06 E701                       	dc.b	smpsNoAttack, $01
0008AD08 E100                       	smpsAlterNote       $00
0008AD0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD0E E107                       	smpsAlterNote       $07
0008AD10 BF0E                       	dc.b	nD5, $0E
0008AD12 E101                       	smpsAlterNote       $01
0008AD14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD18 E107                       	smpsAlterNote       $07
0008AD1A E701                       	dc.b	smpsNoAttack, $01
0008AD1C E10A                       	smpsAlterNote       $0A
0008AD1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD22 E104                       	smpsAlterNote       $04
0008AD24 E701                       	dc.b	smpsNoAttack, $01
0008AD26 E100                       	smpsAlterNote       $00
0008AD28 E701                       	dc.b	smpsNoAttack, $01
0008AD2A E101                       	smpsAlterNote       $01
0008AD2C E701                       	dc.b	smpsNoAttack, $01
0008AD2E E107                       	smpsAlterNote       $07
0008AD30 E701                       	dc.b	smpsNoAttack, $01
0008AD32 E10B                       	smpsAlterNote       $0B
0008AD34 E701                       	dc.b	smpsNoAttack, $01
0008AD36 E107                       	smpsAlterNote       $07
0008AD38 E701                       	dc.b	smpsNoAttack, $01
0008AD3A E104                       	smpsAlterNote       $04
0008AD3C E701                       	dc.b	smpsNoAttack, $01
0008AD3E E100                       	smpsAlterNote       $00
0008AD40 E701                       	dc.b	smpsNoAttack, $01
0008AD42 E101                       	smpsAlterNote       $01
0008AD44 8001                       	dc.b	nRst, $01
0008AD46 E108                       	smpsAlterNote       $08
0008AD48 C10C                       	dc.b	nE5, $0C
0008AD4A E109                       	smpsAlterNote       $09
0008AD4C C201 8001                  	dc.b	nF5, $01, nRst, $01
0008AD50 E10A                       	smpsAlterNote       $0A
0008AD52 8001                       	dc.b	nRst, $01
0008AD54 E109                       	smpsAlterNote       $09
0008AD56 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008AD5A E106                       	smpsAlterNote       $06
0008AD5C E701                       	dc.b	smpsNoAttack, $01
0008AD5E E102                       	smpsAlterNote       $02
0008AD60 E701                       	dc.b	smpsNoAttack, $01
0008AD62 E103                       	smpsAlterNote       $03
0008AD64 E701                       	dc.b	smpsNoAttack, $01
0008AD66 E109                       	smpsAlterNote       $09
0008AD68 E701                       	dc.b	smpsNoAttack, $01
0008AD6A E10D                       	smpsAlterNote       $0D
0008AD6C E701                       	dc.b	smpsNoAttack, $01
0008AD6E E109                       	smpsAlterNote       $09
0008AD70 E701                       	dc.b	smpsNoAttack, $01
0008AD72 E106                       	smpsAlterNote       $06
0008AD74 E701                       	dc.b	smpsNoAttack, $01
0008AD76 E102                       	smpsAlterNote       $02
0008AD78 E701                       	dc.b	smpsNoAttack, $01
0008AD7A E106                       	smpsAlterNote       $06
0008AD7C E701                       	dc.b	smpsNoAttack, $01
0008AD7E E10C                       	smpsAlterNote       $0C
0008AD80 E701                       	dc.b	smpsNoAttack, $01
0008AD82 E10D                       	smpsAlterNote       $0D
0008AD84 E701                       	dc.b	smpsNoAttack, $01
0008AD86 E109                       	smpsAlterNote       $09
0008AD88 C40D                       	dc.b	nG5, $0D
0008AD8A E106                       	smpsAlterNote       $06
0008AD8C E701                       	dc.b	smpsNoAttack, $01
0008AD8E E102                       	smpsAlterNote       $02
0008AD90 E701                       	dc.b	smpsNoAttack, $01
0008AD92 E103                       	smpsAlterNote       $03
0008AD94 E701                       	dc.b	smpsNoAttack, $01
0008AD96 E109                       	smpsAlterNote       $09
0008AD98 E701                       	dc.b	smpsNoAttack, $01
0008AD9A E108                       	smpsAlterNote       $08
0008AD9C C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008ADA8 E109                       	smpsAlterNote       $09
0008ADAA C20D                       	dc.b	nF5, $0D
0008ADAC E106                       	smpsAlterNote       $06
0008ADAE E701                       	dc.b	smpsNoAttack, $01
0008ADB0 E102                       	smpsAlterNote       $02
0008ADB2 E701                       	dc.b	smpsNoAttack, $01
0008ADB4 E106                       	smpsAlterNote       $06
0008ADB6 E701                       	dc.b	smpsNoAttack, $01
0008ADB8 E109                       	smpsAlterNote       $09
0008ADBA E701                       	dc.b	smpsNoAttack, $01
0008ADBC E10D                       	smpsAlterNote       $0D
0008ADBE E701                       	dc.b	smpsNoAttack, $01
0008ADC0 E109                       	smpsAlterNote       $09
0008ADC2 E701                       	dc.b	smpsNoAttack, $01
0008ADC4 E103                       	smpsAlterNote       $03
0008ADC6 E701                       	dc.b	smpsNoAttack, $01
0008ADC8 E102                       	smpsAlterNote       $02
0008ADCA E701                       	dc.b	smpsNoAttack, $01
0008ADCC E106                       	smpsAlterNote       $06
0008ADCE E701                       	dc.b	smpsNoAttack, $01
0008ADD0 E10C                       	smpsAlterNote       $0C
0008ADD2 E701                       	dc.b	smpsNoAttack, $01
0008ADD4 E10D                       	smpsAlterNote       $0D
0008ADD6 8001                       	dc.b	nRst, $01
0008ADD8 E112                       	smpsAlterNote       $12
0008ADDA C401                       	dc.b	nG5, $01
0008ADDC E1EB                       	smpsAlterNote       $EB
0008ADDE E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008ADE1 E1FD                       	smpsAlterNote       $FD
0008ADE3 E701                       	dc.b	smpsNoAttack, $01
0008ADE5 E10F                       	smpsAlterNote       $0F
0008ADE7 E701                       	dc.b	smpsNoAttack, $01
0008ADE9 E118                       	smpsAlterNote       $18
0008ADEB E701                       	dc.b	smpsNoAttack, $01
0008ADED E1ED                       	smpsAlterNote       $ED
0008ADEF E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008ADF2 E1FF                       	smpsAlterNote       $FF
0008ADF4 E701                       	dc.b	smpsNoAttack, $01
0008ADF6 E10B                       	smpsAlterNote       $0B
0008ADF8 E703                       	dc.b	smpsNoAttack, $03
0008ADFA E109                       	smpsAlterNote       $09
0008ADFC C407                       	dc.b	nG5, $07
0008ADFE E108                       	smpsAlterNote       $08
0008AE00 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008AE0C E109                       	smpsAlterNote       $09
0008AE0E C20D                       	dc.b	nF5, $0D
0008AE10 E103                       	smpsAlterNote       $03
0008AE12 E701                       	dc.b	smpsNoAttack, $01
0008AE14 E102                       	smpsAlterNote       $02
0008AE16 E701                       	dc.b	smpsNoAttack, $01
0008AE18 E106                       	smpsAlterNote       $06
0008AE1A E701                       	dc.b	smpsNoAttack, $01
0008AE1C E10C                       	smpsAlterNote       $0C
0008AE1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE22 E109                       	smpsAlterNote       $09
0008AE24 E701                       	dc.b	smpsNoAttack, $01
0008AE26 E103                       	smpsAlterNote       $03
0008AE28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE2C E109                       	smpsAlterNote       $09
0008AE2E E701                       	dc.b	smpsNoAttack, $01
0008AE30 E10C                       	smpsAlterNote       $0C
0008AE32 E701                       	dc.b	smpsNoAttack, $01
0008AE34 E10D                       	smpsAlterNote       $0D
0008AE36 8001                       	dc.b	nRst, $01
0008AE38 E10B                       	smpsAlterNote       $0B
0008AE3A C609 8001                  	dc.b	nA5, $09, nRst, $01
0008AE3E E109                       	smpsAlterNote       $09
0008AE40 B806 8001                  	dc.b	nG4, $06, nRst, $01
0008AE44 E108                       	smpsAlterNote       $08
0008AE46 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008AE52 8001                       	dc.b	nRst, $01
0008AE54 E109                       	smpsAlterNote       $09
0008AE56 C20D                       	dc.b	nF5, $0D
0008AE58 E103                       	smpsAlterNote       $03
0008AE5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE5E E106                       	smpsAlterNote       $06
0008AE60 E701                       	dc.b	smpsNoAttack, $01
0008AE62 E10C                       	smpsAlterNote       $0C
0008AE64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE68 E106                       	smpsAlterNote       $06
0008AE6A E701                       	dc.b	smpsNoAttack, $01
0008AE6C E103                       	smpsAlterNote       $03
0008AE6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE72 E109                       	smpsAlterNote       $09
0008AE74 E701                       	dc.b	smpsNoAttack, $01
0008AE76 E10D                       	smpsAlterNote       $0D
0008AE78 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AE7E E108                       	smpsAlterNote       $08
0008AE80 E6FF                       	smpsAlterVol        $FF
0008AE82 A806                       	dc.b	nEb3, $06
0008AE84 E10C                       	smpsAlterNote       $0C
0008AE86 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008AE8A E108                       	smpsAlterNote       $08
0008AE8C A803                       	dc.b	nEb3, $03
0008AE8E E109                       	smpsAlterNote       $09
0008AE90 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008AE94 E10C                       	smpsAlterNote       $0C
0008AE96 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008AEA0 E109                       	smpsAlterNote       $09
0008AEA2 E602                       	smpsAlterVol        $02
0008AEA4 B604                       	dc.b	nF4, $04
0008AEA6 E602                       	smpsAlterVol        $02
0008AEA8 F6F1 AA                    	smpsJump            music84_Jump02
0008AEAB                            
0008AEAB                            ; FM4 Data
0008AEAB                            music84_FM4:
0008AEAD E040                       	smpsPan             panRight, $00
0008AEAF 8003                       	dc.b	nRst, $03
0008AEB1 E10F                       	smpsAlterNote       $0F
0008AEB3 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008AEB7 E10D                       	smpsAlterNote       $0D
0008AEB9 C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008AEBD E10C                       	smpsAlterNote       $0C
0008AEBF C103 8004                  	dc.b	nE5, $03, nRst, $04
0008AEC5 E6FE                       	smpsAlterVol        $FE
0008AEC7 E110                       	smpsAlterNote       $10
0008AEC9 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008AECD E10F                       	smpsAlterNote       $0F
0008AECF C602 8001                  	dc.b	nA5, $02, nRst, $01
0008AED3 E10D                       	smpsAlterNote       $0D
0008AED5 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008AEDE E10C                       	smpsAlterNote       $0C
0008AEE0 C103                       	dc.b	nE5, $03
0008AEE2 E10A                       	smpsAlterNote       $0A
0008AEE4 BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008AEEA 03                         	dc.b	$03
0008AEEB                            
0008AEEB                            music84_Jump01:
0008AEEB E10B                       	smpsAlterNote       $0B
0008AEED BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008AEF1 E10C                       	smpsAlterNote       $0C
0008AEF3 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008AEF7 E10D                       	smpsAlterNote       $0D
0008AEF9 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008AF03 E10B                       	smpsAlterNote       $0B
0008AF05 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008AF09 E107                       	smpsAlterNote       $07
0008AF0B E701                       	dc.b	smpsNoAttack, $01
0008AF0D E103                       	smpsAlterNote       $03
0008AF0F E701                       	dc.b	smpsNoAttack, $01
0008AF11 E104                       	smpsAlterNote       $04
0008AF13 E701                       	dc.b	smpsNoAttack, $01
0008AF15 E10A                       	smpsAlterNote       $0A
0008AF17 E701                       	dc.b	smpsNoAttack, $01
0008AF19 E10E                       	smpsAlterNote       $0E
0008AF1B E701                       	dc.b	smpsNoAttack, $01
0008AF1D E10A                       	smpsAlterNote       $0A
0008AF1F E701                       	dc.b	smpsNoAttack, $01
0008AF21 E107                       	smpsAlterNote       $07
0008AF23 E701                       	dc.b	smpsNoAttack, $01
0008AF25 E104                       	smpsAlterNote       $04
0008AF27 8001                       	dc.b	nRst, $01
0008AF29 E110                       	smpsAlterNote       $10
0008AF2B C703                       	dc.b	nBb5, $03
0008AF2D E10F                       	smpsAlterNote       $0F
0008AF2F C603 8001                  	dc.b	nA5, $03, nRst, $01
0008AF33 E10D                       	smpsAlterNote       $0D
0008AF35 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008AF3B E10C                       	smpsAlterNote       $0C
0008AF3D E701                       	dc.b	smpsNoAttack, $01
0008AF3F E108                       	smpsAlterNote       $08
0008AF41 E701                       	dc.b	smpsNoAttack, $01
0008AF43 E10C                       	smpsAlterNote       $0C
0008AF45 E701                       	dc.b	smpsNoAttack, $01
0008AF47 E10F                       	smpsAlterNote       $0F
0008AF49 E701                       	dc.b	smpsNoAttack, $01
0008AF4B E113                       	smpsAlterNote       $13
0008AF4D E701                       	dc.b	smpsNoAttack, $01
0008AF4F E10F                       	smpsAlterNote       $0F
0008AF51 E701                       	dc.b	smpsNoAttack, $01
0008AF53 E109                       	smpsAlterNote       $09
0008AF55 E701                       	dc.b	smpsNoAttack, $01
0008AF57 E108                       	smpsAlterNote       $08
0008AF59 E701                       	dc.b	smpsNoAttack, $01
0008AF5B E10C                       	smpsAlterNote       $0C
0008AF5D E701                       	dc.b	smpsNoAttack, $01
0008AF5F E112                       	smpsAlterNote       $12
0008AF61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF65 E10C                       	smpsAlterNote       $0C
0008AF67 E701                       	dc.b	smpsNoAttack, $01
0008AF69 E109                       	smpsAlterNote       $09
0008AF6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF6F E10F                       	smpsAlterNote       $0F
0008AF71 E701                       	dc.b	smpsNoAttack, $01
0008AF73 E113                       	smpsAlterNote       $13
0008AF75 E701                       	dc.b	smpsNoAttack, $01
0008AF77 E112                       	smpsAlterNote       $12
0008AF79 E701                       	dc.b	smpsNoAttack, $01
0008AF7B E10C                       	smpsAlterNote       $0C
0008AF7D E701                       	dc.b	smpsNoAttack, $01
0008AF7F E108                       	smpsAlterNote       $08
0008AF81 E701                       	dc.b	smpsNoAttack, $01
0008AF83 E10C                       	smpsAlterNote       $0C
0008AF85 E701                       	dc.b	smpsNoAttack, $01
0008AF87 E10F                       	smpsAlterNote       $0F
0008AF89 E701                       	dc.b	smpsNoAttack, $01
0008AF8B E113                       	smpsAlterNote       $13
0008AF8D E701                       	dc.b	smpsNoAttack, $01
0008AF8F E10F                       	smpsAlterNote       $0F
0008AF91 E701                       	dc.b	smpsNoAttack, $01
0008AF93 E109                       	smpsAlterNote       $09
0008AF95 E701                       	dc.b	smpsNoAttack, $01
0008AF97 E108                       	smpsAlterNote       $08
0008AF99 E701                       	dc.b	smpsNoAttack, $01
0008AF9B E10C                       	smpsAlterNote       $0C
0008AF9D E701                       	dc.b	smpsNoAttack, $01
0008AF9F E112                       	smpsAlterNote       $12
0008AFA1 E701                       	dc.b	smpsNoAttack, $01
0008AFA3 E113                       	smpsAlterNote       $13
0008AFA5 800F                       	dc.b	nRst, $0F
0008AFA7 E10B                       	smpsAlterNote       $0B
0008AFA9 BF03                       	dc.b	nD5, $03
0008AFAB E10C                       	smpsAlterNote       $0C
0008AFAD C103 8001                  	dc.b	nE5, $03, nRst, $01
0008AFB1 E10D                       	smpsAlterNote       $0D
0008AFB3 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008AFBB E10B                       	smpsAlterNote       $0B
0008AFBD BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008AFC7 E110                       	smpsAlterNote       $10
0008AFC9 C704                       	dc.b	nBb5, $04
0008AFCB E10F                       	smpsAlterNote       $0F
0008AFCD C604 8001                  	dc.b	nA5, $04, nRst, $01
0008AFD1 E10D                       	smpsAlterNote       $0D
0008AFD3 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008AFD9 E109                       	smpsAlterNote       $09
0008AFDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFDF E10F                       	smpsAlterNote       $0F
0008AFE1 E701                       	dc.b	smpsNoAttack, $01
0008AFE3 E112                       	smpsAlterNote       $12
0008AFE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFE9 E10C                       	smpsAlterNote       $0C
0008AFEB E701                       	dc.b	smpsNoAttack, $01
0008AFED E108                       	smpsAlterNote       $08
0008AFEF E701                       	dc.b	smpsNoAttack, $01
0008AFF1 E109                       	smpsAlterNote       $09
0008AFF3 E701                       	dc.b	smpsNoAttack, $01
0008AFF5 E10F                       	smpsAlterNote       $0F
0008AFF7 E701                       	dc.b	smpsNoAttack, $01
0008AFF9 E113                       	smpsAlterNote       $13
0008AFFB E701                       	dc.b	smpsNoAttack, $01
0008AFFD E10F                       	smpsAlterNote       $0F
0008AFFF E701                       	dc.b	smpsNoAttack, $01
0008B001 E10C                       	smpsAlterNote       $0C
0008B003 E701                       	dc.b	smpsNoAttack, $01
0008B005 E108                       	smpsAlterNote       $08
0008B007 E701                       	dc.b	smpsNoAttack, $01
0008B009 E10C                       	smpsAlterNote       $0C
0008B00B E701                       	dc.b	smpsNoAttack, $01
0008B00D E112                       	smpsAlterNote       $12
0008B00F E701                       	dc.b	smpsNoAttack, $01
0008B011 E113                       	smpsAlterNote       $13
0008B013 E701                       	dc.b	smpsNoAttack, $01
0008B015 E10F                       	smpsAlterNote       $0F
0008B017 E701                       	dc.b	smpsNoAttack, $01
0008B019 E109                       	smpsAlterNote       $09
0008B01B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B01F E10C                       	smpsAlterNote       $0C
0008B021 E701                       	dc.b	smpsNoAttack, $01
0008B023 E112                       	smpsAlterNote       $12
0008B025 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B029 E10C                       	smpsAlterNote       $0C
0008B02B E701                       	dc.b	smpsNoAttack, $01
0008B02D E109                       	smpsAlterNote       $09
0008B02F E701                       	dc.b	smpsNoAttack, $01
0008B031 E10D                       	smpsAlterNote       $0D
0008B033 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008B037 E10F                       	smpsAlterNote       $0F
0008B039 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008B043 E10D                       	smpsAlterNote       $0D
0008B045 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008B04B E10B                       	smpsAlterNote       $0B
0008B04D BF0D                       	dc.b	nD5, $0D
0008B04F E108                       	smpsAlterNote       $08
0008B051 E701                       	dc.b	smpsNoAttack, $01
0008B053 E104                       	smpsAlterNote       $04
0008B055 E701                       	dc.b	smpsNoAttack, $01
0008B057 E108                       	smpsAlterNote       $08
0008B059 E701                       	dc.b	smpsNoAttack, $01
0008B05B E10B                       	smpsAlterNote       $0B
0008B05D E701                       	dc.b	smpsNoAttack, $01
0008B05F E10F                       	smpsAlterNote       $0F
0008B061 E701                       	dc.b	smpsNoAttack, $01
0008B063 E10B                       	smpsAlterNote       $0B
0008B065 E701                       	dc.b	smpsNoAttack, $01
0008B067 E105                       	smpsAlterNote       $05
0008B069 E701                       	dc.b	smpsNoAttack, $01
0008B06B E104                       	smpsAlterNote       $04
0008B06D E701                       	dc.b	smpsNoAttack, $01
0008B06F E108                       	smpsAlterNote       $08
0008B071 E701                       	dc.b	smpsNoAttack, $01
0008B073 E10E                       	smpsAlterNote       $0E
0008B075 E701                       	dc.b	smpsNoAttack, $01
0008B077 E10F                       	smpsAlterNote       $0F
0008B079 8001                       	dc.b	nRst, $01
0008B07B E10C                       	smpsAlterNote       $0C
0008B07D C101                       	dc.b	nE5, $01
0008B07F E10D                       	smpsAlterNote       $0D
0008B081 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008B087 E10F                       	smpsAlterNote       $0F
0008B089 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008B08D E10C                       	smpsAlterNote       $0C
0008B08F CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008B093 E10D                       	smpsAlterNote       $0D
0008B095 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008B099 E10C                       	smpsAlterNote       $0C
0008B09B CD03                       	dc.b	nE6, $03
0008B09D E10A                       	smpsAlterNote       $0A
0008B09F C903 8001                  	dc.b	nC6, $03, nRst, $01
0008B0A3 E10D                       	smpsAlterNote       $0D
0008B0A5 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008B0AD E109                       	smpsAlterNote       $09
0008B0AF E701                       	dc.b	smpsNoAttack, $01
0008B0B1 E10D                       	smpsAlterNote       $0D
0008B0B3 E701                       	dc.b	smpsNoAttack, $01
0008B0B5 E110                       	smpsAlterNote       $10
0008B0B7 E701                       	dc.b	smpsNoAttack, $01
0008B0B9 E114                       	smpsAlterNote       $14
0008B0BB E701                       	dc.b	smpsNoAttack, $01
0008B0BD E110                       	smpsAlterNote       $10
0008B0BF E701                       	dc.b	smpsNoAttack, $01
0008B0C1 E10A                       	smpsAlterNote       $0A
0008B0C3 E701                       	dc.b	smpsNoAttack, $01
0008B0C5 E109                       	smpsAlterNote       $09
0008B0C7 E701                       	dc.b	smpsNoAttack, $01
0008B0C9 E10D                       	smpsAlterNote       $0D
0008B0CB E701                       	dc.b	smpsNoAttack, $01
0008B0CD E113                       	smpsAlterNote       $13
0008B0CF E701                       	dc.b	smpsNoAttack, $01
0008B0D1 E114                       	smpsAlterNote       $14
0008B0D3 8001                       	dc.b	nRst, $01
0008B0D5 E10F                       	smpsAlterNote       $0F
0008B0D7 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008B0DD E10C                       	smpsAlterNote       $0C
0008B0DF E701                       	dc.b	smpsNoAttack, $01
0008B0E1 E108                       	smpsAlterNote       $08
0008B0E3 E701                       	dc.b	smpsNoAttack, $01
0008B0E5 E10C                       	smpsAlterNote       $0C
0008B0E7 E701                       	dc.b	smpsNoAttack, $01
0008B0E9 E112                       	smpsAlterNote       $12
0008B0EB E701                       	dc.b	smpsNoAttack, $01
0008B0ED E113                       	smpsAlterNote       $13
0008B0EF E701                       	dc.b	smpsNoAttack, $01
0008B0F1 E10F                       	smpsAlterNote       $0F
0008B0F3 E701                       	dc.b	smpsNoAttack, $01
0008B0F5 E109                       	smpsAlterNote       $09
0008B0F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0FB E10C                       	smpsAlterNote       $0C
0008B0FD E701                       	dc.b	smpsNoAttack, $01
0008B0FF E112                       	smpsAlterNote       $12
0008B101 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B105 E10C                       	smpsAlterNote       $0C
0008B107 E701                       	dc.b	smpsNoAttack, $01
0008B109 E109                       	smpsAlterNote       $09
0008B10B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B10F E10F                       	smpsAlterNote       $0F
0008B111 E701                       	dc.b	smpsNoAttack, $01
0008B113 E113                       	smpsAlterNote       $13
0008B115 E701                       	dc.b	smpsNoAttack, $01
0008B117 E112                       	smpsAlterNote       $12
0008B119 E701                       	dc.b	smpsNoAttack, $01
0008B11B E10C                       	smpsAlterNote       $0C
0008B11D E701                       	dc.b	smpsNoAttack, $01
0008B11F E108                       	smpsAlterNote       $08
0008B121 E701                       	dc.b	smpsNoAttack, $01
0008B123 E10C                       	smpsAlterNote       $0C
0008B125 E701                       	dc.b	smpsNoAttack, $01
0008B127 E10F                       	smpsAlterNote       $0F
0008B129 E701                       	dc.b	smpsNoAttack, $01
0008B12B E113                       	smpsAlterNote       $13
0008B12D E701                       	dc.b	smpsNoAttack, $01
0008B12F E10F                       	smpsAlterNote       $0F
0008B131 E701                       	dc.b	smpsNoAttack, $01
0008B133 E109                       	smpsAlterNote       $09
0008B135 E701                       	dc.b	smpsNoAttack, $01
0008B137 E108                       	smpsAlterNote       $08
0008B139 E701                       	dc.b	smpsNoAttack, $01
0008B13B E10C                       	smpsAlterNote       $0C
0008B13D E701                       	dc.b	smpsNoAttack, $01
0008B13F E112                       	smpsAlterNote       $12
0008B141 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B145 E10F                       	smpsAlterNote       $0F
0008B147 E701                       	dc.b	smpsNoAttack, $01
0008B149 E109                       	smpsAlterNote       $09
0008B14B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B14F E10F                       	smpsAlterNote       $0F
0008B151 E701                       	dc.b	smpsNoAttack, $01
0008B153 E113                       	smpsAlterNote       $13
0008B155 E701                       	dc.b	smpsNoAttack, $01
0008B157 E112                       	smpsAlterNote       $12
0008B159 E701                       	dc.b	smpsNoAttack, $01
0008B15B E10C                       	smpsAlterNote       $0C
0008B15D E701                       	dc.b	smpsNoAttack, $01
0008B15F E108                       	smpsAlterNote       $08
0008B161 E701                       	dc.b	smpsNoAttack, $01
0008B163 E10C                       	smpsAlterNote       $0C
0008B165 E701                       	dc.b	smpsNoAttack, $01
0008B167 E10F                       	smpsAlterNote       $0F
0008B169 E701                       	dc.b	smpsNoAttack, $01
0008B16B E113                       	smpsAlterNote       $13
0008B16D E701                       	dc.b	smpsNoAttack, $01
0008B16F E10F                       	smpsAlterNote       $0F
0008B171 E701                       	dc.b	smpsNoAttack, $01
0008B173 E109                       	smpsAlterNote       $09
0008B175 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B179 E10F                       	smpsAlterNote       $0F
0008B17B C60D                       	dc.b	nA5, $0D
0008B17D E109                       	smpsAlterNote       $09
0008B17F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B183 E10C                       	smpsAlterNote       $0C
0008B185 E701                       	dc.b	smpsNoAttack, $01
0008B187 E112                       	smpsAlterNote       $12
0008B189 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B18D E10C                       	smpsAlterNote       $0C
0008B18F E701                       	dc.b	smpsNoAttack, $01
0008B191 E109                       	smpsAlterNote       $09
0008B193 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B197 E10F                       	smpsAlterNote       $0F
0008B199 E701                       	dc.b	smpsNoAttack, $01
0008B19B E113                       	smpsAlterNote       $13
0008B19D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B1A3 E10D                       	smpsAlterNote       $0D
0008B1A5 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008B1AD E10C                       	smpsAlterNote       $0C
0008B1AF C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008B1B5 E6FF                       	smpsAlterVol        $FF
0008B1B7 E10B                       	smpsAlterNote       $0B
0008B1B9 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008B1BD E10C                       	smpsAlterNote       $0C
0008B1BF C103                       	dc.b	nE5, $03
0008B1C1 E10D                       	smpsAlterNote       $0D
0008B1C3 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008B1CD E10B                       	smpsAlterNote       $0B
0008B1CF BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008B1D3 E107                       	smpsAlterNote       $07
0008B1D5 E701                       	dc.b	smpsNoAttack, $01
0008B1D7 E104                       	smpsAlterNote       $04
0008B1D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1DD E10A                       	smpsAlterNote       $0A
0008B1DF E701                       	dc.b	smpsNoAttack, $01
0008B1E1 E10D                       	smpsAlterNote       $0D
0008B1E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1E7 E107                       	smpsAlterNote       $07
0008B1E9 E701                       	dc.b	smpsNoAttack, $01
0008B1EB E104                       	smpsAlterNote       $04
0008B1ED 8001                       	dc.b	nRst, $01
0008B1EF E110                       	smpsAlterNote       $10
0008B1F1 C703                       	dc.b	nBb5, $03
0008B1F3 E10F                       	smpsAlterNote       $0F
0008B1F5 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008B1F9 E10D                       	smpsAlterNote       $0D
0008B1FB C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008B1FF E10C                       	smpsAlterNote       $0C
0008B201 E701                       	dc.b	smpsNoAttack, $01
0008B203 E108                       	smpsAlterNote       $08
0008B205 E701                       	dc.b	smpsNoAttack, $01
0008B207 E109                       	smpsAlterNote       $09
0008B209 E701                       	dc.b	smpsNoAttack, $01
0008B20B E10F                       	smpsAlterNote       $0F
0008B20D E701                       	dc.b	smpsNoAttack, $01
0008B20F E113                       	smpsAlterNote       $13
0008B211 E701                       	dc.b	smpsNoAttack, $01
0008B213 E10F                       	smpsAlterNote       $0F
0008B215 E701                       	dc.b	smpsNoAttack, $01
0008B217 E10C                       	smpsAlterNote       $0C
0008B219 E701                       	dc.b	smpsNoAttack, $01
0008B21B E108                       	smpsAlterNote       $08
0008B21D E701                       	dc.b	smpsNoAttack, $01
0008B21F E10C                       	smpsAlterNote       $0C
0008B221 E701                       	dc.b	smpsNoAttack, $01
0008B223 E112                       	smpsAlterNote       $12
0008B225 E701                       	dc.b	smpsNoAttack, $01
0008B227 E113                       	smpsAlterNote       $13
0008B229 E701                       	dc.b	smpsNoAttack, $01
0008B22B E10F                       	smpsAlterNote       $0F
0008B22D E701                       	dc.b	smpsNoAttack, $01
0008B22F E109                       	smpsAlterNote       $09
0008B231 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B235 E10C                       	smpsAlterNote       $0C
0008B237 E701                       	dc.b	smpsNoAttack, $01
0008B239 E112                       	smpsAlterNote       $12
0008B23B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B23F E10C                       	smpsAlterNote       $0C
0008B241 E701                       	dc.b	smpsNoAttack, $01
0008B243 E109                       	smpsAlterNote       $09
0008B245 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B249 E10F                       	smpsAlterNote       $0F
0008B24B E701                       	dc.b	smpsNoAttack, $01
0008B24D E113                       	smpsAlterNote       $13
0008B24F E701                       	dc.b	smpsNoAttack, $01
0008B251 E112                       	smpsAlterNote       $12
0008B253 E701                       	dc.b	smpsNoAttack, $01
0008B255 E10C                       	smpsAlterNote       $0C
0008B257 E701                       	dc.b	smpsNoAttack, $01
0008B259 E108                       	smpsAlterNote       $08
0008B25B E701                       	dc.b	smpsNoAttack, $01
0008B25D E10C                       	smpsAlterNote       $0C
0008B25F E701                       	dc.b	smpsNoAttack, $01
0008B261 E10F                       	smpsAlterNote       $0F
0008B263 E701                       	dc.b	smpsNoAttack, $01
0008B265 E113                       	smpsAlterNote       $13
0008B267 E701                       	dc.b	smpsNoAttack, $01
0008B269 E10F                       	smpsAlterNote       $0F
0008B26B BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008B26F E110                       	smpsAlterNote       $10
0008B271 BB03                       	dc.b	nBb4, $03
0008B273 E10F                       	smpsAlterNote       $0F
0008B275 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008B279 E10B                       	smpsAlterNote       $0B
0008B27B BF03                       	dc.b	nD5, $03
0008B27D E10C                       	smpsAlterNote       $0C
0008B27F C103 8001                  	dc.b	nE5, $03, nRst, $01
0008B283 E10D                       	smpsAlterNote       $0D
0008B285 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008B28F E10B                       	smpsAlterNote       $0B
0008B291 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008B29D E110                       	smpsAlterNote       $10
0008B29F C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B2A3 E10F                       	smpsAlterNote       $0F
0008B2A5 C604                       	dc.b	nA5, $04
0008B2A7 E10D                       	smpsAlterNote       $0D
0008B2A9 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008B2AF E109                       	smpsAlterNote       $09
0008B2B1 E701                       	dc.b	smpsNoAttack, $01
0008B2B3 E108                       	smpsAlterNote       $08
0008B2B5 E701                       	dc.b	smpsNoAttack, $01
0008B2B7 E10C                       	smpsAlterNote       $0C
0008B2B9 E701                       	dc.b	smpsNoAttack, $01
0008B2BB E112                       	smpsAlterNote       $12
0008B2BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2C1 E10F                       	smpsAlterNote       $0F
0008B2C3 E701                       	dc.b	smpsNoAttack, $01
0008B2C5 E109                       	smpsAlterNote       $09
0008B2C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2CB E10F                       	smpsAlterNote       $0F
0008B2CD E701                       	dc.b	smpsNoAttack, $01
0008B2CF E112                       	smpsAlterNote       $12
0008B2D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2D5 E10C                       	smpsAlterNote       $0C
0008B2D7 E701                       	dc.b	smpsNoAttack, $01
0008B2D9 E108                       	smpsAlterNote       $08
0008B2DB E701                       	dc.b	smpsNoAttack, $01
0008B2DD E109                       	smpsAlterNote       $09
0008B2DF E701                       	dc.b	smpsNoAttack, $01
0008B2E1 E10F                       	smpsAlterNote       $0F
0008B2E3 E701                       	dc.b	smpsNoAttack, $01
0008B2E5 E113                       	smpsAlterNote       $13
0008B2E7 E701                       	dc.b	smpsNoAttack, $01
0008B2E9 E10F                       	smpsAlterNote       $0F
0008B2EB E701                       	dc.b	smpsNoAttack, $01
0008B2ED E10C                       	smpsAlterNote       $0C
0008B2EF E701                       	dc.b	smpsNoAttack, $01
0008B2F1 E108                       	smpsAlterNote       $08
0008B2F3 E701                       	dc.b	smpsNoAttack, $01
0008B2F5 E10C                       	smpsAlterNote       $0C
0008B2F7 E701                       	dc.b	smpsNoAttack, $01
0008B2F9 E112                       	smpsAlterNote       $12
0008B2FB E701                       	dc.b	smpsNoAttack, $01
0008B2FD E113                       	smpsAlterNote       $13
0008B2FF E701                       	dc.b	smpsNoAttack, $01
0008B301 E10F                       	smpsAlterNote       $0F
0008B303 E701                       	dc.b	smpsNoAttack, $01
0008B305 E109                       	smpsAlterNote       $09
0008B307 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B30B E10C                       	smpsAlterNote       $0C
0008B30D E701                       	dc.b	smpsNoAttack, $01
0008B30F E112                       	smpsAlterNote       $12
0008B311 E701                       	dc.b	smpsNoAttack, $01
0008B313 E113                       	smpsAlterNote       $13
0008B315 8001                       	dc.b	nRst, $01
0008B317 E10F                       	smpsAlterNote       $0F
0008B319 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008B325 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008B32D E10D                       	smpsAlterNote       $0D
0008B32F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B335 E10B                       	smpsAlterNote       $0B
0008B337 BF0D                       	dc.b	nD5, $0D
0008B339 E108                       	smpsAlterNote       $08
0008B33B E701                       	dc.b	smpsNoAttack, $01
0008B33D E104                       	smpsAlterNote       $04
0008B33F E701                       	dc.b	smpsNoAttack, $01
0008B341 E105                       	smpsAlterNote       $05
0008B343 E701                       	dc.b	smpsNoAttack, $01
0008B345 E10B                       	smpsAlterNote       $0B
0008B347 E701                       	dc.b	smpsNoAttack, $01
0008B349 E10F                       	smpsAlterNote       $0F
0008B34B E701                       	dc.b	smpsNoAttack, $01
0008B34D E10B                       	smpsAlterNote       $0B
0008B34F E701                       	dc.b	smpsNoAttack, $01
0008B351 E108                       	smpsAlterNote       $08
0008B353 E701                       	dc.b	smpsNoAttack, $01
0008B355 E104                       	smpsAlterNote       $04
0008B357 E701                       	dc.b	smpsNoAttack, $01
0008B359 E108                       	smpsAlterNote       $08
0008B35B E701                       	dc.b	smpsNoAttack, $01
0008B35D E10E                       	smpsAlterNote       $0E
0008B35F E701                       	dc.b	smpsNoAttack, $01
0008B361 E10F                       	smpsAlterNote       $0F
0008B363 E701                       	dc.b	smpsNoAttack, $01
0008B365 E10C                       	smpsAlterNote       $0C
0008B367 C101                       	dc.b	nE5, $01
0008B369 E10D                       	smpsAlterNote       $0D
0008B36B C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008B373 E10F                       	smpsAlterNote       $0F
0008B375 C607                       	dc.b	nA5, $07
0008B377 E10C                       	smpsAlterNote       $0C
0008B379 CD07                       	dc.b	nE6, $07
0008B37B E10D                       	smpsAlterNote       $0D
0008B37D CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008B381 E10C                       	smpsAlterNote       $0C
0008B383 CD03                       	dc.b	nE6, $03
0008B385 E10A                       	smpsAlterNote       $0A
0008B387 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008B38B E10D                       	smpsAlterNote       $0D
0008B38D C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008B393 E10A                       	smpsAlterNote       $0A
0008B395 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B399 E110                       	smpsAlterNote       $10
0008B39B E701                       	dc.b	smpsNoAttack, $01
0008B39D E114                       	smpsAlterNote       $14
0008B39F E701                       	dc.b	smpsNoAttack, $01
0008B3A1 E113                       	smpsAlterNote       $13
0008B3A3 E701                       	dc.b	smpsNoAttack, $01
0008B3A5 E10D                       	smpsAlterNote       $0D
0008B3A7 E701                       	dc.b	smpsNoAttack, $01
0008B3A9 E109                       	smpsAlterNote       $09
0008B3AB E701                       	dc.b	smpsNoAttack, $01
0008B3AD E10D                       	smpsAlterNote       $0D
0008B3AF E701                       	dc.b	smpsNoAttack, $01
0008B3B1 E110                       	smpsAlterNote       $10
0008B3B3 E701                       	dc.b	smpsNoAttack, $01
0008B3B5 E114                       	smpsAlterNote       $14
0008B3B7 E701                       	dc.b	smpsNoAttack, $01
0008B3B9 E10F                       	smpsAlterNote       $0F
0008B3BB C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008B3BF E10C                       	smpsAlterNote       $0C
0008B3C1 E701                       	dc.b	smpsNoAttack, $01
0008B3C3 E108                       	smpsAlterNote       $08
0008B3C5 E701                       	dc.b	smpsNoAttack, $01
0008B3C7 E10C                       	smpsAlterNote       $0C
0008B3C9 E701                       	dc.b	smpsNoAttack, $01
0008B3CB E10F                       	smpsAlterNote       $0F
0008B3CD E701                       	dc.b	smpsNoAttack, $01
0008B3CF E113                       	smpsAlterNote       $13
0008B3D1 E701                       	dc.b	smpsNoAttack, $01
0008B3D3 E10F                       	smpsAlterNote       $0F
0008B3D5 E701                       	dc.b	smpsNoAttack, $01
0008B3D7 E109                       	smpsAlterNote       $09
0008B3D9 E701                       	dc.b	smpsNoAttack, $01
0008B3DB E108                       	smpsAlterNote       $08
0008B3DD E701                       	dc.b	smpsNoAttack, $01
0008B3DF E10C                       	smpsAlterNote       $0C
0008B3E1 E701                       	dc.b	smpsNoAttack, $01
0008B3E3 E112                       	smpsAlterNote       $12
0008B3E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3E9 E10F                       	smpsAlterNote       $0F
0008B3EB E701                       	dc.b	smpsNoAttack, $01
0008B3ED E109                       	smpsAlterNote       $09
0008B3EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3F3 E10F                       	smpsAlterNote       $0F
0008B3F5 E701                       	dc.b	smpsNoAttack, $01
0008B3F7 E112                       	smpsAlterNote       $12
0008B3F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3FD E10C                       	smpsAlterNote       $0C
0008B3FF E701                       	dc.b	smpsNoAttack, $01
0008B401 E108                       	smpsAlterNote       $08
0008B403 E701                       	dc.b	smpsNoAttack, $01
0008B405 E109                       	smpsAlterNote       $09
0008B407 E701                       	dc.b	smpsNoAttack, $01
0008B409 E10F                       	smpsAlterNote       $0F
0008B40B E701                       	dc.b	smpsNoAttack, $01
0008B40D E113                       	smpsAlterNote       $13
0008B40F E701                       	dc.b	smpsNoAttack, $01
0008B411 E10F                       	smpsAlterNote       $0F
0008B413 E701                       	dc.b	smpsNoAttack, $01
0008B415 E10C                       	smpsAlterNote       $0C
0008B417 E701                       	dc.b	smpsNoAttack, $01
0008B419 E108                       	smpsAlterNote       $08
0008B41B E701                       	dc.b	smpsNoAttack, $01
0008B41D E10C                       	smpsAlterNote       $0C
0008B41F E701                       	dc.b	smpsNoAttack, $01
0008B421 E112                       	smpsAlterNote       $12
0008B423 E701                       	dc.b	smpsNoAttack, $01
0008B425 E113                       	smpsAlterNote       $13
0008B427 E701                       	dc.b	smpsNoAttack, $01
0008B429 E10F                       	smpsAlterNote       $0F
0008B42B E701                       	dc.b	smpsNoAttack, $01
0008B42D E109                       	smpsAlterNote       $09
0008B42F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B433 E10C                       	smpsAlterNote       $0C
0008B435 E701                       	dc.b	smpsNoAttack, $01
0008B437 E112                       	smpsAlterNote       $12
0008B439 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B43D E10C                       	smpsAlterNote       $0C
0008B43F E701                       	dc.b	smpsNoAttack, $01
0008B441 E109                       	smpsAlterNote       $09
0008B443 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B447 E10F                       	smpsAlterNote       $0F
0008B449 E701                       	dc.b	smpsNoAttack, $01
0008B44B E113                       	smpsAlterNote       $13
0008B44D E701                       	dc.b	smpsNoAttack, $01
0008B44F E112                       	smpsAlterNote       $12
0008B451 E701                       	dc.b	smpsNoAttack, $01
0008B453 E10C                       	smpsAlterNote       $0C
0008B455 E701                       	dc.b	smpsNoAttack, $01
0008B457 E109                       	smpsAlterNote       $09
0008B459 8001                       	dc.b	nRst, $01
0008B45B E10F                       	smpsAlterNote       $0F
0008B45D C60D                       	dc.b	nA5, $0D
0008B45F E10C                       	smpsAlterNote       $0C
0008B461 E701                       	dc.b	smpsNoAttack, $01
0008B463 E108                       	smpsAlterNote       $08
0008B465 E701                       	dc.b	smpsNoAttack, $01
0008B467 E10C                       	smpsAlterNote       $0C
0008B469 E701                       	dc.b	smpsNoAttack, $01
0008B46B E112                       	smpsAlterNote       $12
0008B46D E701                       	dc.b	smpsNoAttack, $01
0008B46F E113                       	smpsAlterNote       $13
0008B471 E701                       	dc.b	smpsNoAttack, $01
0008B473 E10F                       	smpsAlterNote       $0F
0008B475 E701                       	dc.b	smpsNoAttack, $01
0008B477 E109                       	smpsAlterNote       $09
0008B479 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B47D E10C                       	smpsAlterNote       $0C
0008B47F E701                       	dc.b	smpsNoAttack, $01
0008B481 E112                       	smpsAlterNote       $12
0008B483 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B487 E10C                       	smpsAlterNote       $0C
0008B489 E701                       	dc.b	smpsNoAttack, $01
0008B48B E109                       	smpsAlterNote       $09
0008B48D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B491 E10F                       	smpsAlterNote       $0F
0008B493 E701                       	dc.b	smpsNoAttack, $01
0008B495 E113                       	smpsAlterNote       $13
0008B497 E701                       	dc.b	smpsNoAttack, $01
0008B499 E112                       	smpsAlterNote       $12
0008B49B E701                       	dc.b	smpsNoAttack, $01
0008B49D E10C                       	smpsAlterNote       $0C
0008B49F E701                       	dc.b	smpsNoAttack, $01
0008B4A1 E108                       	smpsAlterNote       $08
0008B4A3 E701                       	dc.b	smpsNoAttack, $01
0008B4A5 E10C                       	smpsAlterNote       $0C
0008B4A7 E701                       	dc.b	smpsNoAttack, $01
0008B4A9 E10F                       	smpsAlterNote       $0F
0008B4AB E701                       	dc.b	smpsNoAttack, $01
0008B4AD E113                       	smpsAlterNote       $13
0008B4AF E701                       	dc.b	smpsNoAttack, $01
0008B4B1 E10F                       	smpsAlterNote       $0F
0008B4B3 E701                       	dc.b	smpsNoAttack, $01
0008B4B5 E109                       	smpsAlterNote       $09
0008B4B7 E701                       	dc.b	smpsNoAttack, $01
0008B4B9 E108                       	smpsAlterNote       $08
0008B4BB E701                       	dc.b	smpsNoAttack, $01
0008B4BD E10C                       	smpsAlterNote       $0C
0008B4BF E701                       	dc.b	smpsNoAttack, $01
0008B4C1 E112                       	smpsAlterNote       $12
0008B4C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4C7 E10F                       	smpsAlterNote       $0F
0008B4C9 E701                       	dc.b	smpsNoAttack, $01
0008B4CB E109                       	smpsAlterNote       $09
0008B4CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4D1 E10F                       	smpsAlterNote       $0F
0008B4D3 E701                       	dc.b	smpsNoAttack, $01
0008B4D5 E112                       	smpsAlterNote       $12
0008B4D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4DB E10C                       	smpsAlterNote       $0C
0008B4DD E701                       	dc.b	smpsNoAttack, $01
0008B4DF E108                       	smpsAlterNote       $08
0008B4E1 E701                       	dc.b	smpsNoAttack, $01
0008B4E3 E10C                       	smpsAlterNote       $0C
0008B4E5 E701                       	dc.b	smpsNoAttack, $01
0008B4E7 E10F                       	smpsAlterNote       $0F
0008B4E9 E701                       	dc.b	smpsNoAttack, $01
0008B4EB E113                       	smpsAlterNote       $13
0008B4ED E701                       	dc.b	smpsNoAttack, $01
0008B4EF E10F                       	smpsAlterNote       $0F
0008B4F1 E701                       	dc.b	smpsNoAttack, $01
0008B4F3 E109                       	smpsAlterNote       $09
0008B4F5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B4FB E601                       	smpsAlterVol        $01
0008B4FD E10F                       	smpsAlterNote       $0F
0008B4FF C604                       	dc.b	nA5, $04
0008B501 E10D                       	smpsAlterNote       $0D
0008B503 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B509 E10B                       	smpsAlterNote       $0B
0008B50B BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008B513 E10F                       	smpsAlterNote       $0F
0008B515 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008B519 E10D                       	smpsAlterNote       $0D
0008B51B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008B521 E10C                       	smpsAlterNote       $0C
0008B523 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008B529 E10A                       	smpsAlterNote       $0A
0008B52B C904 8001                  	dc.b	nC6, $04, nRst, $01
0008B52F E110                       	smpsAlterNote       $10
0008B531 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B535 E10F                       	smpsAlterNote       $0F
0008B537 C604                       	dc.b	nA5, $04
0008B539 E10D                       	smpsAlterNote       $0D
0008B53B C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008B547 E109                       	smpsAlterNote       $09
0008B549 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B54D E10F                       	smpsAlterNote       $0F
0008B54F E701                       	dc.b	smpsNoAttack, $01
0008B551 E112                       	smpsAlterNote       $12
0008B553 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B557 E10C                       	smpsAlterNote       $0C
0008B559 E701                       	dc.b	smpsNoAttack, $01
0008B55B E108                       	smpsAlterNote       $08
0008B55D E701                       	dc.b	smpsNoAttack, $01
0008B55F E10C                       	smpsAlterNote       $0C
0008B561 E701                       	dc.b	smpsNoAttack, $01
0008B563 E10F                       	smpsAlterNote       $0F
0008B565 E701                       	dc.b	smpsNoAttack, $01
0008B567 E113                       	smpsAlterNote       $13
0008B569 E701                       	dc.b	smpsNoAttack, $01
0008B56B E10D                       	smpsAlterNote       $0D
0008B56D C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008B573 E10C                       	smpsAlterNote       $0C
0008B575 C10D                       	dc.b	nE5, $0D
0008B577 E109                       	smpsAlterNote       $09
0008B579 E701                       	dc.b	smpsNoAttack, $01
0008B57B E105                       	smpsAlterNote       $05
0008B57D E701                       	dc.b	smpsNoAttack, $01
0008B57F E106                       	smpsAlterNote       $06
0008B581 E701                       	dc.b	smpsNoAttack, $01
0008B583 E10C                       	smpsAlterNote       $0C
0008B585 E701                       	dc.b	smpsNoAttack, $01
0008B587 E110                       	smpsAlterNote       $10
0008B589 E701                       	dc.b	smpsNoAttack, $01
0008B58B E10C                       	smpsAlterNote       $0C
0008B58D E701                       	dc.b	smpsNoAttack, $01
0008B58F E109                       	smpsAlterNote       $09
0008B591 E701                       	dc.b	smpsNoAttack, $01
0008B593 E105                       	smpsAlterNote       $05
0008B595 E701                       	dc.b	smpsNoAttack, $01
0008B597 E109                       	smpsAlterNote       $09
0008B599 E701                       	dc.b	smpsNoAttack, $01
0008B59B E10F                       	smpsAlterNote       $0F
0008B59D E701                       	dc.b	smpsNoAttack, $01
0008B59F E110                       	smpsAlterNote       $10
0008B5A1 E701                       	dc.b	smpsNoAttack, $01
0008B5A3 E10C                       	smpsAlterNote       $0C
0008B5A5 E701                       	dc.b	smpsNoAttack, $01
0008B5A7 E106                       	smpsAlterNote       $06
0008B5A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5AD E109                       	smpsAlterNote       $09
0008B5AF E701                       	dc.b	smpsNoAttack, $01
0008B5B1 E10F                       	smpsAlterNote       $0F
0008B5B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5B7 E109                       	smpsAlterNote       $09
0008B5B9 E701                       	dc.b	smpsNoAttack, $01
0008B5BB E106                       	smpsAlterNote       $06
0008B5BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5C1 E10C                       	smpsAlterNote       $0C
0008B5C3 E701                       	dc.b	smpsNoAttack, $01
0008B5C5 E110                       	smpsAlterNote       $10
0008B5C7 E701                       	dc.b	smpsNoAttack, $01
0008B5C9 E10F                       	smpsAlterNote       $0F
0008B5CB E701                       	dc.b	smpsNoAttack, $01
0008B5CD E109                       	smpsAlterNote       $09
0008B5CF E701                       	dc.b	smpsNoAttack, $01
0008B5D1 E105                       	smpsAlterNote       $05
0008B5D3 E701                       	dc.b	smpsNoAttack, $01
0008B5D5 E109                       	smpsAlterNote       $09
0008B5D7 E701                       	dc.b	smpsNoAttack, $01
0008B5D9 E10C                       	smpsAlterNote       $0C
0008B5DB E701                       	dc.b	smpsNoAttack, $01
0008B5DD E110                       	smpsAlterNote       $10
0008B5DF E701                       	dc.b	smpsNoAttack, $01
0008B5E1 E10C                       	smpsAlterNote       $0C
0008B5E3 E701                       	dc.b	smpsNoAttack, $01
0008B5E5 E106                       	smpsAlterNote       $06
0008B5E7 E701                       	dc.b	smpsNoAttack, $01
0008B5E9 E105                       	smpsAlterNote       $05
0008B5EB E701                       	dc.b	smpsNoAttack, $01
0008B5ED E109                       	smpsAlterNote       $09
0008B5EF E701                       	dc.b	smpsNoAttack, $01
0008B5F1 E10F                       	smpsAlterNote       $0F
0008B5F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5F7 E10C                       	smpsAlterNote       $0C
0008B5F9 E701                       	dc.b	smpsNoAttack, $01
0008B5FB E106                       	smpsAlterNote       $06
0008B5FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B601 E10C                       	smpsAlterNote       $0C
0008B603 E701                       	dc.b	smpsNoAttack, $01
0008B605 E10F                       	smpsAlterNote       $0F
0008B607 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B60B E109                       	smpsAlterNote       $09
0008B60D E701                       	dc.b	smpsNoAttack, $01
0008B60F E105                       	smpsAlterNote       $05
0008B611 E701                       	dc.b	smpsNoAttack, $01
0008B613 E106                       	smpsAlterNote       $06
0008B615 E701                       	dc.b	smpsNoAttack, $01
0008B617 E10C                       	smpsAlterNote       $0C
0008B619 E701                       	dc.b	smpsNoAttack, $01
0008B61B E110                       	smpsAlterNote       $10
0008B61D E701                       	dc.b	smpsNoAttack, $01
0008B61F E10C                       	smpsAlterNote       $0C
0008B621 E701                       	dc.b	smpsNoAttack, $01
0008B623 E109                       	smpsAlterNote       $09
0008B625 E701                       	dc.b	smpsNoAttack, $01
0008B627 E105                       	smpsAlterNote       $05
0008B629 E701                       	dc.b	smpsNoAttack, $01
0008B62B E109                       	smpsAlterNote       $09
0008B62D E701                       	dc.b	smpsNoAttack, $01
0008B62F E10F                       	smpsAlterNote       $0F
0008B631 E701                       	dc.b	smpsNoAttack, $01
0008B633 E110                       	smpsAlterNote       $10
0008B635 E701                       	dc.b	smpsNoAttack, $01
0008B637 E10C                       	smpsAlterNote       $0C
0008B639 E701                       	dc.b	smpsNoAttack, $01
0008B63B E106                       	smpsAlterNote       $06
0008B63D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B641 E109                       	smpsAlterNote       $09
0008B643 E701                       	dc.b	smpsNoAttack, $01
0008B645 E10F                       	smpsAlterNote       $0F
0008B647 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B64B E109                       	smpsAlterNote       $09
0008B64D E701                       	dc.b	smpsNoAttack, $01
0008B64F E106                       	smpsAlterNote       $06
0008B651 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B655 E10C                       	smpsAlterNote       $0C
0008B657 E701                       	dc.b	smpsNoAttack, $01
0008B659 E110                       	smpsAlterNote       $10
0008B65B E701                       	dc.b	smpsNoAttack, $01
0008B65D E10F                       	smpsAlterNote       $0F
0008B65F E701                       	dc.b	smpsNoAttack, $01
0008B661 E109                       	smpsAlterNote       $09
0008B663 E701                       	dc.b	smpsNoAttack, $01
0008B665 E105                       	smpsAlterNote       $05
0008B667 E701                       	dc.b	smpsNoAttack, $01
0008B669 E109                       	smpsAlterNote       $09
0008B66B E701                       	dc.b	smpsNoAttack, $01
0008B66D E10C                       	smpsAlterNote       $0C
0008B66F E701                       	dc.b	smpsNoAttack, $01
0008B671 E110                       	smpsAlterNote       $10
0008B673 E701                       	dc.b	smpsNoAttack, $01
0008B675 E10C                       	smpsAlterNote       $0C
0008B677 E701                       	dc.b	smpsNoAttack, $01
0008B679 E106                       	smpsAlterNote       $06
0008B67B E701                       	dc.b	smpsNoAttack, $01
0008B67D E105                       	smpsAlterNote       $05
0008B67F E701                       	dc.b	smpsNoAttack, $01
0008B681 E109                       	smpsAlterNote       $09
0008B683 E701                       	dc.b	smpsNoAttack, $01
0008B685 E10F                       	smpsAlterNote       $0F
0008B687 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B68B E109                       	smpsAlterNote       $09
0008B68D E701                       	dc.b	smpsNoAttack, $01
0008B68F E106                       	smpsAlterNote       $06
0008B691 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B695 E10C                       	smpsAlterNote       $0C
0008B697 E701                       	dc.b	smpsNoAttack, $01
0008B699 E110                       	smpsAlterNote       $10
0008B69B E701                       	dc.b	smpsNoAttack, $01
0008B69D E10F                       	smpsAlterNote       $0F
0008B69F E701                       	dc.b	smpsNoAttack, $01
0008B6A1 E109                       	smpsAlterNote       $09
0008B6A3 E701                       	dc.b	smpsNoAttack, $01
0008B6A5 E105                       	smpsAlterNote       $05
0008B6A7 E701                       	dc.b	smpsNoAttack, $01
0008B6A9 E109                       	smpsAlterNote       $09
0008B6AB E701                       	dc.b	smpsNoAttack, $01
0008B6AD E10C                       	smpsAlterNote       $0C
0008B6AF E701                       	dc.b	smpsNoAttack, $01
0008B6B1 E110                       	smpsAlterNote       $10
0008B6B3 E701                       	dc.b	smpsNoAttack, $01
0008B6B5 E10C                       	smpsAlterNote       $0C
0008B6B7 E701                       	dc.b	smpsNoAttack, $01
0008B6B9 E106                       	smpsAlterNote       $06
0008B6BB E701                       	dc.b	smpsNoAttack, $01
0008B6BD E105                       	smpsAlterNote       $05
0008B6BF E701                       	dc.b	smpsNoAttack, $01
0008B6C1 E109                       	smpsAlterNote       $09
0008B6C3 E701                       	dc.b	smpsNoAttack, $01
0008B6C5 E10F                       	smpsAlterNote       $0F
0008B6C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6CB E10C                       	smpsAlterNote       $0C
0008B6CD E701                       	dc.b	smpsNoAttack, $01
0008B6CF E106                       	smpsAlterNote       $06
0008B6D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6D5 E10C                       	smpsAlterNote       $0C
0008B6D7 E701                       	dc.b	smpsNoAttack, $01
0008B6D9 E10F                       	smpsAlterNote       $0F
0008B6DB E701                       	dc.b	smpsNoAttack, $01
0008B6DD E110                       	smpsAlterNote       $10
0008B6DF 8001                       	dc.b	nRst, $01
0008B6E1 E10F                       	smpsAlterNote       $0F
0008B6E3 C604                       	dc.b	nA5, $04
0008B6E5 E10D                       	smpsAlterNote       $0D
0008B6E7 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B6ED E10B                       	smpsAlterNote       $0B
0008B6EF BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008B6F5 E10F                       	smpsAlterNote       $0F
0008B6F7 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008B6FB E10D                       	smpsAlterNote       $0D
0008B6FD C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008B703 E10C                       	smpsAlterNote       $0C
0008B705 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008B70B E10A                       	smpsAlterNote       $0A
0008B70D C904                       	dc.b	nC6, $04
0008B70F E110                       	smpsAlterNote       $10
0008B711 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B715 E10F                       	smpsAlterNote       $0F
0008B717 C604                       	dc.b	nA5, $04
0008B719 E10D                       	smpsAlterNote       $0D
0008B71B C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008B727 E109                       	smpsAlterNote       $09
0008B729 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B72D E10F                       	smpsAlterNote       $0F
0008B72F E701                       	dc.b	smpsNoAttack, $01
0008B731 E112                       	smpsAlterNote       $12
0008B733 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B737 E10C                       	smpsAlterNote       $0C
0008B739 E701                       	dc.b	smpsNoAttack, $01
0008B73B E108                       	smpsAlterNote       $08
0008B73D E701                       	dc.b	smpsNoAttack, $01
0008B73F E109                       	smpsAlterNote       $09
0008B741 E701                       	dc.b	smpsNoAttack, $01
0008B743 E10F                       	smpsAlterNote       $0F
0008B745 E701                       	dc.b	smpsNoAttack, $01
0008B747 E113                       	smpsAlterNote       $13
0008B749 E701                       	dc.b	smpsNoAttack, $01
0008B74B E10D                       	smpsAlterNote       $0D
0008B74D C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008B753 E10C                       	smpsAlterNote       $0C
0008B755 C10D                       	dc.b	nE5, $0D
0008B757 E109                       	smpsAlterNote       $09
0008B759 E701                       	dc.b	smpsNoAttack, $01
0008B75B E106                       	smpsAlterNote       $06
0008B75D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B761 E10C                       	smpsAlterNote       $0C
0008B763 E701                       	dc.b	smpsNoAttack, $01
0008B765 E110                       	smpsAlterNote       $10
0008B767 E701                       	dc.b	smpsNoAttack, $01
0008B769 E10F                       	smpsAlterNote       $0F
0008B76B E701                       	dc.b	smpsNoAttack, $01
0008B76D E109                       	smpsAlterNote       $09
0008B76F E701                       	dc.b	smpsNoAttack, $01
0008B771 E105                       	smpsAlterNote       $05
0008B773 E701                       	dc.b	smpsNoAttack, $01
0008B775 E109                       	smpsAlterNote       $09
0008B777 E701                       	dc.b	smpsNoAttack, $01
0008B779 E10C                       	smpsAlterNote       $0C
0008B77B E701                       	dc.b	smpsNoAttack, $01
0008B77D E110                       	smpsAlterNote       $10
0008B77F E701                       	dc.b	smpsNoAttack, $01
0008B781 E10C                       	smpsAlterNote       $0C
0008B783 E701                       	dc.b	smpsNoAttack, $01
0008B785 E106                       	smpsAlterNote       $06
0008B787 E701                       	dc.b	smpsNoAttack, $01
0008B789 E105                       	smpsAlterNote       $05
0008B78B E701                       	dc.b	smpsNoAttack, $01
0008B78D E109                       	smpsAlterNote       $09
0008B78F E701                       	dc.b	smpsNoAttack, $01
0008B791 E10F                       	smpsAlterNote       $0F
0008B793 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B797 E10C                       	smpsAlterNote       $0C
0008B799 E701                       	dc.b	smpsNoAttack, $01
0008B79B E106                       	smpsAlterNote       $06
0008B79D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7A1 E10C                       	smpsAlterNote       $0C
0008B7A3 E701                       	dc.b	smpsNoAttack, $01
0008B7A5 E10F                       	smpsAlterNote       $0F
0008B7A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7AB E109                       	smpsAlterNote       $09
0008B7AD E701                       	dc.b	smpsNoAttack, $01
0008B7AF E105                       	smpsAlterNote       $05
0008B7B1 E701                       	dc.b	smpsNoAttack, $01
0008B7B3 E106                       	smpsAlterNote       $06
0008B7B5 E701                       	dc.b	smpsNoAttack, $01
0008B7B7 E10C                       	smpsAlterNote       $0C
0008B7B9 E701                       	dc.b	smpsNoAttack, $01
0008B7BB E110                       	smpsAlterNote       $10
0008B7BD E701                       	dc.b	smpsNoAttack, $01
0008B7BF E10C                       	smpsAlterNote       $0C
0008B7C1 E701                       	dc.b	smpsNoAttack, $01
0008B7C3 E109                       	smpsAlterNote       $09
0008B7C5 E701                       	dc.b	smpsNoAttack, $01
0008B7C7 E105                       	smpsAlterNote       $05
0008B7C9 E701                       	dc.b	smpsNoAttack, $01
0008B7CB E109                       	smpsAlterNote       $09
0008B7CD E701                       	dc.b	smpsNoAttack, $01
0008B7CF E10F                       	smpsAlterNote       $0F
0008B7D1 E701                       	dc.b	smpsNoAttack, $01
0008B7D3 E110                       	smpsAlterNote       $10
0008B7D5 E701                       	dc.b	smpsNoAttack, $01
0008B7D7 E10C                       	smpsAlterNote       $0C
0008B7D9 E701                       	dc.b	smpsNoAttack, $01
0008B7DB E106                       	smpsAlterNote       $06
0008B7DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7E1 E109                       	smpsAlterNote       $09
0008B7E3 E701                       	dc.b	smpsNoAttack, $01
0008B7E5 E10F                       	smpsAlterNote       $0F
0008B7E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7EB E109                       	smpsAlterNote       $09
0008B7ED E701                       	dc.b	smpsNoAttack, $01
0008B7EF E106                       	smpsAlterNote       $06
0008B7F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7F5 E10C                       	smpsAlterNote       $0C
0008B7F7 E701                       	dc.b	smpsNoAttack, $01
0008B7F9 E110                       	smpsAlterNote       $10
0008B7FB E701                       	dc.b	smpsNoAttack, $01
0008B7FD E10F                       	smpsAlterNote       $0F
0008B7FF E701                       	dc.b	smpsNoAttack, $01
0008B801 E109                       	smpsAlterNote       $09
0008B803 E701                       	dc.b	smpsNoAttack, $01
0008B805 E105                       	smpsAlterNote       $05
0008B807 E701                       	dc.b	smpsNoAttack, $01
0008B809 E109                       	smpsAlterNote       $09
0008B80B E701                       	dc.b	smpsNoAttack, $01
0008B80D E10F                       	smpsAlterNote       $0F
0008B80F E701                       	dc.b	smpsNoAttack, $01
0008B811 E110                       	smpsAlterNote       $10
0008B813 E701                       	dc.b	smpsNoAttack, $01
0008B815 E10C                       	smpsAlterNote       $0C
0008B817 E701                       	dc.b	smpsNoAttack, $01
0008B819 E106                       	smpsAlterNote       $06
0008B81B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B81F E109                       	smpsAlterNote       $09
0008B821 E701                       	dc.b	smpsNoAttack, $01
0008B823 E10F                       	smpsAlterNote       $0F
0008B825 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B829 E109                       	smpsAlterNote       $09
0008B82B E701                       	dc.b	smpsNoAttack, $01
0008B82D E106                       	smpsAlterNote       $06
0008B82F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B833 E10C                       	smpsAlterNote       $0C
0008B835 E701                       	dc.b	smpsNoAttack, $01
0008B837 E110                       	smpsAlterNote       $10
0008B839 E701                       	dc.b	smpsNoAttack, $01
0008B83B E10F                       	smpsAlterNote       $0F
0008B83D E701                       	dc.b	smpsNoAttack, $01
0008B83F E109                       	smpsAlterNote       $09
0008B841 E701                       	dc.b	smpsNoAttack, $01
0008B843 E105                       	smpsAlterNote       $05
0008B845 E701                       	dc.b	smpsNoAttack, $01
0008B847 E109                       	smpsAlterNote       $09
0008B849 E701                       	dc.b	smpsNoAttack, $01
0008B84B E10C                       	smpsAlterNote       $0C
0008B84D E701                       	dc.b	smpsNoAttack, $01
0008B84F E110                       	smpsAlterNote       $10
0008B851 E701                       	dc.b	smpsNoAttack, $01
0008B853 E10C                       	smpsAlterNote       $0C
0008B855 E701                       	dc.b	smpsNoAttack, $01
0008B857 E106                       	smpsAlterNote       $06
0008B859 E701                       	dc.b	smpsNoAttack, $01
0008B85B E105                       	smpsAlterNote       $05
0008B85D E701                       	dc.b	smpsNoAttack, $01
0008B85F E109                       	smpsAlterNote       $09
0008B861 E701                       	dc.b	smpsNoAttack, $01
0008B863 E10F                       	smpsAlterNote       $0F
0008B865 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B869 E10C                       	smpsAlterNote       $0C
0008B86B E701                       	dc.b	smpsNoAttack, $01
0008B86D E106                       	smpsAlterNote       $06
0008B86F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B873 E10C                       	smpsAlterNote       $0C
0008B875 E701                       	dc.b	smpsNoAttack, $01
0008B877 E10F                       	smpsAlterNote       $0F
0008B879 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B87D E109                       	smpsAlterNote       $09
0008B87F E701                       	dc.b	smpsNoAttack, $01
0008B881 E105                       	smpsAlterNote       $05
0008B883 E701                       	dc.b	smpsNoAttack, $01
0008B885 E106                       	smpsAlterNote       $06
0008B887 E701                       	dc.b	smpsNoAttack, $01
0008B889 E10C                       	smpsAlterNote       $0C
0008B88B E701                       	dc.b	smpsNoAttack, $01
0008B88D E110                       	smpsAlterNote       $10
0008B88F E701                       	dc.b	smpsNoAttack, $01
0008B891 E10C                       	smpsAlterNote       $0C
0008B893 E701                       	dc.b	smpsNoAttack, $01
0008B895 E109                       	smpsAlterNote       $09
0008B897 E701                       	dc.b	smpsNoAttack, $01
0008B899 E105                       	smpsAlterNote       $05
0008B89B E701                       	dc.b	smpsNoAttack, $01
0008B89D E109                       	smpsAlterNote       $09
0008B89F E701                       	dc.b	smpsNoAttack, $01
0008B8A1 E10F                       	smpsAlterNote       $0F
0008B8A3 E701                       	dc.b	smpsNoAttack, $01
0008B8A5 E110                       	smpsAlterNote       $10
0008B8A7 E701                       	dc.b	smpsNoAttack, $01
0008B8A9 E10C                       	smpsAlterNote       $0C
0008B8AB E701                       	dc.b	smpsNoAttack, $01
0008B8AD E106                       	smpsAlterNote       $06
0008B8AF E701                       	dc.b	smpsNoAttack, $01
0008B8B1 E10B                       	smpsAlterNote       $0B
0008B8B3 BF02                       	dc.b	nD5, $02
0008B8B5 E10C                       	smpsAlterNote       $0C
0008B8B7 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008B8BD E109                       	smpsAlterNote       $09
0008B8BF E701                       	dc.b	smpsNoAttack, $01
0008B8C1 E105                       	smpsAlterNote       $05
0008B8C3 E701                       	dc.b	smpsNoAttack, $01
0008B8C5 E109                       	smpsAlterNote       $09
0008B8C7 E701                       	dc.b	smpsNoAttack, $01
0008B8C9 E10F                       	smpsAlterNote       $0F
0008B8CB E701                       	dc.b	smpsNoAttack, $01
0008B8CD E110                       	smpsAlterNote       $10
0008B8CF E701                       	dc.b	smpsNoAttack, $01
0008B8D1 E10C                       	smpsAlterNote       $0C
0008B8D3 E701                       	dc.b	smpsNoAttack, $01
0008B8D5 E106                       	smpsAlterNote       $06
0008B8D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8DB E109                       	smpsAlterNote       $09
0008B8DD E701                       	dc.b	smpsNoAttack, $01
0008B8DF E10F                       	smpsAlterNote       $0F
0008B8E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8E5 E109                       	smpsAlterNote       $09
0008B8E7 E701                       	dc.b	smpsNoAttack, $01
0008B8E9 E106                       	smpsAlterNote       $06
0008B8EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8EF E10C                       	smpsAlterNote       $0C
0008B8F1 E701                       	dc.b	smpsNoAttack, $01
0008B8F3 E110                       	smpsAlterNote       $10
0008B8F5 E701                       	dc.b	smpsNoAttack, $01
0008B8F7 E10F                       	smpsAlterNote       $0F
0008B8F9 E701                       	dc.b	smpsNoAttack, $01
0008B8FB E109                       	smpsAlterNote       $09
0008B8FD E701                       	dc.b	smpsNoAttack, $01
0008B8FF E105                       	smpsAlterNote       $05
0008B901 E701                       	dc.b	smpsNoAttack, $01
0008B903 E109                       	smpsAlterNote       $09
0008B905 E701                       	dc.b	smpsNoAttack, $01
0008B907 E10C                       	smpsAlterNote       $0C
0008B909 E701                       	dc.b	smpsNoAttack, $01
0008B90B E110                       	smpsAlterNote       $10
0008B90D E701                       	dc.b	smpsNoAttack, $01
0008B90F E10C                       	smpsAlterNote       $0C
0008B911 E701                       	dc.b	smpsNoAttack, $01
0008B913 E106                       	smpsAlterNote       $06
0008B915 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B919 E10D                       	smpsAlterNote       $0D
0008B91B C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008B923 E10C                       	smpsAlterNote       $0C
0008B925 C10D                       	dc.b	nE5, $0D
0008B927 E106                       	smpsAlterNote       $06
0008B929 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B92D E109                       	smpsAlterNote       $09
0008B92F E701                       	dc.b	smpsNoAttack, $01
0008B931 E10F                       	smpsAlterNote       $0F
0008B933 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B937 E109                       	smpsAlterNote       $09
0008B939 E701                       	dc.b	smpsNoAttack, $01
0008B93B E106                       	smpsAlterNote       $06
0008B93D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B941 E10C                       	smpsAlterNote       $0C
0008B943 E701                       	dc.b	smpsNoAttack, $01
0008B945 E110                       	smpsAlterNote       $10
0008B947 E701                       	dc.b	smpsNoAttack, $01
0008B949 E10F                       	smpsAlterNote       $0F
0008B94B E701                       	dc.b	smpsNoAttack, $01
0008B94D E109                       	smpsAlterNote       $09
0008B94F E701                       	dc.b	smpsNoAttack, $01
0008B951 E105                       	smpsAlterNote       $05
0008B953 E701                       	dc.b	smpsNoAttack, $01
0008B955 E106                       	smpsAlterNote       $06
0008B957 800F                       	dc.b	nRst, $0F
0008B95B E6FF                       	smpsAlterVol        $FF
0008B95D E10F                       	smpsAlterNote       $0F
0008B95F BA01                       	dc.b	nA4, $01
0008B961 E110                       	smpsAlterNote       $10
0008B963 BB02                       	dc.b	nBb4, $02
0008B965 E10F                       	smpsAlterNote       $0F
0008B967 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008B96D E10B                       	smpsAlterNote       $0B
0008B96F BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008B973 E10C                       	smpsAlterNote       $0C
0008B975 C103                       	dc.b	nE5, $03
0008B977 E10D                       	smpsAlterNote       $0D
0008B979 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008B983 E10B                       	smpsAlterNote       $0B
0008B985 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008B989 E104                       	smpsAlterNote       $04
0008B98B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B98F E10A                       	smpsAlterNote       $0A
0008B991 E701                       	dc.b	smpsNoAttack, $01
0008B993 E10D                       	smpsAlterNote       $0D
0008B995 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B999 E107                       	smpsAlterNote       $07
0008B99B E701                       	dc.b	smpsNoAttack, $01
0008B99D E104                       	smpsAlterNote       $04
0008B99F 8001                       	dc.b	nRst, $01
0008B9A1 E110                       	smpsAlterNote       $10
0008B9A3 C703                       	dc.b	nBb5, $03
0008B9A5 E10F                       	smpsAlterNote       $0F
0008B9A7 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008B9AB E10D                       	smpsAlterNote       $0D
0008B9AD C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008B9B1 E10C                       	smpsAlterNote       $0C
0008B9B3 E701                       	dc.b	smpsNoAttack, $01
0008B9B5 E108                       	smpsAlterNote       $08
0008B9B7 E701                       	dc.b	smpsNoAttack, $01
0008B9B9 E109                       	smpsAlterNote       $09
0008B9BB E701                       	dc.b	smpsNoAttack, $01
0008B9BD E10F                       	smpsAlterNote       $0F
0008B9BF E701                       	dc.b	smpsNoAttack, $01
0008B9C1 E113                       	smpsAlterNote       $13
0008B9C3 E701                       	dc.b	smpsNoAttack, $01
0008B9C5 E10F                       	smpsAlterNote       $0F
0008B9C7 E701                       	dc.b	smpsNoAttack, $01
0008B9C9 E10C                       	smpsAlterNote       $0C
0008B9CB E701                       	dc.b	smpsNoAttack, $01
0008B9CD E108                       	smpsAlterNote       $08
0008B9CF E701                       	dc.b	smpsNoAttack, $01
0008B9D1 E10C                       	smpsAlterNote       $0C
0008B9D3 E701                       	dc.b	smpsNoAttack, $01
0008B9D5 E112                       	smpsAlterNote       $12
0008B9D7 E701                       	dc.b	smpsNoAttack, $01
0008B9D9 E113                       	smpsAlterNote       $13
0008B9DB E701                       	dc.b	smpsNoAttack, $01
0008B9DD E10F                       	smpsAlterNote       $0F
0008B9DF E701                       	dc.b	smpsNoAttack, $01
0008B9E1 E109                       	smpsAlterNote       $09
0008B9E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9E7 E10C                       	smpsAlterNote       $0C
0008B9E9 E701                       	dc.b	smpsNoAttack, $01
0008B9EB E112                       	smpsAlterNote       $12
0008B9ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9F1 E10C                       	smpsAlterNote       $0C
0008B9F3 E701                       	dc.b	smpsNoAttack, $01
0008B9F5 E109                       	smpsAlterNote       $09
0008B9F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9FB E10F                       	smpsAlterNote       $0F
0008B9FD E701                       	dc.b	smpsNoAttack, $01
0008B9FF E113                       	smpsAlterNote       $13
0008BA01 E701                       	dc.b	smpsNoAttack, $01
0008BA03 E112                       	smpsAlterNote       $12
0008BA05 E701                       	dc.b	smpsNoAttack, $01
0008BA07 E10C                       	smpsAlterNote       $0C
0008BA09 E701                       	dc.b	smpsNoAttack, $01
0008BA0B E108                       	smpsAlterNote       $08
0008BA0D E701                       	dc.b	smpsNoAttack, $01
0008BA0F E10C                       	smpsAlterNote       $0C
0008BA11 E701                       	dc.b	smpsNoAttack, $01
0008BA13 E10F                       	smpsAlterNote       $0F
0008BA15 E701                       	dc.b	smpsNoAttack, $01
0008BA17 E113                       	smpsAlterNote       $13
0008BA19 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008BA1D E10B                       	smpsAlterNote       $0B
0008BA1F BF03                       	dc.b	nD5, $03
0008BA21 E10C                       	smpsAlterNote       $0C
0008BA23 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008BA27 E10D                       	smpsAlterNote       $0D
0008BA29 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008BA33 E10B                       	smpsAlterNote       $0B
0008BA35 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008BA41 E110                       	smpsAlterNote       $10
0008BA43 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008BA47 E10F                       	smpsAlterNote       $0F
0008BA49 C604                       	dc.b	nA5, $04
0008BA4B E10D                       	smpsAlterNote       $0D
0008BA4D C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008BA53 E109                       	smpsAlterNote       $09
0008BA55 E701                       	dc.b	smpsNoAttack, $01
0008BA57 E108                       	smpsAlterNote       $08
0008BA59 E701                       	dc.b	smpsNoAttack, $01
0008BA5B E10C                       	smpsAlterNote       $0C
0008BA5D E701                       	dc.b	smpsNoAttack, $01
0008BA5F E112                       	smpsAlterNote       $12
0008BA61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA65 E10F                       	smpsAlterNote       $0F
0008BA67 E701                       	dc.b	smpsNoAttack, $01
0008BA69 E109                       	smpsAlterNote       $09
0008BA6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA6F E10F                       	smpsAlterNote       $0F
0008BA71 E701                       	dc.b	smpsNoAttack, $01
0008BA73 E112                       	smpsAlterNote       $12
0008BA75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA79 E10C                       	smpsAlterNote       $0C
0008BA7B E701                       	dc.b	smpsNoAttack, $01
0008BA7D E108                       	smpsAlterNote       $08
0008BA7F E701                       	dc.b	smpsNoAttack, $01
0008BA81 E109                       	smpsAlterNote       $09
0008BA83 E701                       	dc.b	smpsNoAttack, $01
0008BA85 E10F                       	smpsAlterNote       $0F
0008BA87 E701                       	dc.b	smpsNoAttack, $01
0008BA89 E113                       	smpsAlterNote       $13
0008BA8B E701                       	dc.b	smpsNoAttack, $01
0008BA8D E10F                       	smpsAlterNote       $0F
0008BA8F E701                       	dc.b	smpsNoAttack, $01
0008BA91 E10C                       	smpsAlterNote       $0C
0008BA93 E701                       	dc.b	smpsNoAttack, $01
0008BA95 E108                       	smpsAlterNote       $08
0008BA97 E701                       	dc.b	smpsNoAttack, $01
0008BA99 E10C                       	smpsAlterNote       $0C
0008BA9B E701                       	dc.b	smpsNoAttack, $01
0008BA9D E112                       	smpsAlterNote       $12
0008BA9F E701                       	dc.b	smpsNoAttack, $01
0008BAA1 E113                       	smpsAlterNote       $13
0008BAA3 E701                       	dc.b	smpsNoAttack, $01
0008BAA5 E10F                       	smpsAlterNote       $0F
0008BAA7 E701                       	dc.b	smpsNoAttack, $01
0008BAA9 E109                       	smpsAlterNote       $09
0008BAAB E701                       	dc.b	smpsNoAttack, $01
0008BAAD E10D                       	smpsAlterNote       $0D
0008BAAF C402                       	dc.b	nG5, $02
0008BAB1 E10F                       	smpsAlterNote       $0F
0008BAB3 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008BABD E10D                       	smpsAlterNote       $0D
0008BABF C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008BAC5 E10B                       	smpsAlterNote       $0B
0008BAC7 BF0D                       	dc.b	nD5, $0D
0008BAC9 E108                       	smpsAlterNote       $08
0008BACB E701                       	dc.b	smpsNoAttack, $01
0008BACD E104                       	smpsAlterNote       $04
0008BACF E701                       	dc.b	smpsNoAttack, $01
0008BAD1 E105                       	smpsAlterNote       $05
0008BAD3 E701                       	dc.b	smpsNoAttack, $01
0008BAD5 E10B                       	smpsAlterNote       $0B
0008BAD7 E701                       	dc.b	smpsNoAttack, $01
0008BAD9 E10F                       	smpsAlterNote       $0F
0008BADB E701                       	dc.b	smpsNoAttack, $01
0008BADD E10B                       	smpsAlterNote       $0B
0008BADF E701                       	dc.b	smpsNoAttack, $01
0008BAE1 E108                       	smpsAlterNote       $08
0008BAE3 E701                       	dc.b	smpsNoAttack, $01
0008BAE5 E104                       	smpsAlterNote       $04
0008BAE7 E701                       	dc.b	smpsNoAttack, $01
0008BAE9 E108                       	smpsAlterNote       $08
0008BAEB E701                       	dc.b	smpsNoAttack, $01
0008BAED E10E                       	smpsAlterNote       $0E
0008BAEF E701                       	dc.b	smpsNoAttack, $01
0008BAF1 E10F                       	smpsAlterNote       $0F
0008BAF3 E701                       	dc.b	smpsNoAttack, $01
0008BAF5 E10C                       	smpsAlterNote       $0C
0008BAF7 C101                       	dc.b	nE5, $01
0008BAF9 E10D                       	smpsAlterNote       $0D
0008BAFB C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008BB03 E10F                       	smpsAlterNote       $0F
0008BB05 C607                       	dc.b	nA5, $07
0008BB07 E10C                       	smpsAlterNote       $0C
0008BB09 CD07                       	dc.b	nE6, $07
0008BB0B E10D                       	smpsAlterNote       $0D
0008BB0D CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008BB11 E10C                       	smpsAlterNote       $0C
0008BB13 CD03                       	dc.b	nE6, $03
0008BB15 E10A                       	smpsAlterNote       $0A
0008BB17 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008BB1B E10D                       	smpsAlterNote       $0D
0008BB1D C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008BB23 E10A                       	smpsAlterNote       $0A
0008BB25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB29 E110                       	smpsAlterNote       $10
0008BB2B E701                       	dc.b	smpsNoAttack, $01
0008BB2D E114                       	smpsAlterNote       $14
0008BB2F E701                       	dc.b	smpsNoAttack, $01
0008BB31 E113                       	smpsAlterNote       $13
0008BB33 E701                       	dc.b	smpsNoAttack, $01
0008BB35 E10D                       	smpsAlterNote       $0D
0008BB37 E701                       	dc.b	smpsNoAttack, $01
0008BB39 E109                       	smpsAlterNote       $09
0008BB3B E701                       	dc.b	smpsNoAttack, $01
0008BB3D E10D                       	smpsAlterNote       $0D
0008BB3F E701                       	dc.b	smpsNoAttack, $01
0008BB41 E110                       	smpsAlterNote       $10
0008BB43 E701                       	dc.b	smpsNoAttack, $01
0008BB45 E114                       	smpsAlterNote       $14
0008BB47 E701                       	dc.b	smpsNoAttack, $01
0008BB49 E10F                       	smpsAlterNote       $0F
0008BB4B C607                       	dc.b	nA5, $07
0008BB4D E10D                       	smpsAlterNote       $0D
0008BB4F C40D                       	dc.b	nG5, $0D
0008BB51 E10A                       	smpsAlterNote       $0A
0008BB53 E701                       	dc.b	smpsNoAttack, $01
0008BB55 E106                       	smpsAlterNote       $06
0008BB57 E701                       	dc.b	smpsNoAttack, $01
0008BB59 E10A                       	smpsAlterNote       $0A
0008BB5B E701                       	dc.b	smpsNoAttack, $01
0008BB5D E10D                       	smpsAlterNote       $0D
0008BB5F E701                       	dc.b	smpsNoAttack, $01
0008BB61 E111                       	smpsAlterNote       $11
0008BB63 E701                       	dc.b	smpsNoAttack, $01
0008BB65 E10D                       	smpsAlterNote       $0D
0008BB67 E701                       	dc.b	smpsNoAttack, $01
0008BB69 E107                       	smpsAlterNote       $07
0008BB6B E701                       	dc.b	smpsNoAttack, $01
0008BB6D E106                       	smpsAlterNote       $06
0008BB6F E701                       	dc.b	smpsNoAttack, $01
0008BB71 E10A                       	smpsAlterNote       $0A
0008BB73 E701                       	dc.b	smpsNoAttack, $01
0008BB75 E110                       	smpsAlterNote       $10
0008BB77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB7B E10D                       	smpsAlterNote       $0D
0008BB7D E701                       	dc.b	smpsNoAttack, $01
0008BB7F E107                       	smpsAlterNote       $07
0008BB81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB85 E10F                       	smpsAlterNote       $0F
0008BB87 C60E                       	dc.b	nA5, $0E
0008BB89 E109                       	smpsAlterNote       $09
0008BB8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB8F E10F                       	smpsAlterNote       $0F
0008BB91 E701                       	dc.b	smpsNoAttack, $01
0008BB93 E112                       	smpsAlterNote       $12
0008BB95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB99 E10C                       	smpsAlterNote       $0C
0008BB9B E701                       	dc.b	smpsNoAttack, $01
0008BB9D E108                       	smpsAlterNote       $08
0008BB9F E701                       	dc.b	smpsNoAttack, $01
0008BBA1 E109                       	smpsAlterNote       $09
0008BBA3 E701                       	dc.b	smpsNoAttack, $01
0008BBA5 E10F                       	smpsAlterNote       $0F
0008BBA7 E701                       	dc.b	smpsNoAttack, $01
0008BBA9 E113                       	smpsAlterNote       $13
0008BBAB E701                       	dc.b	smpsNoAttack, $01
0008BBAD E10F                       	smpsAlterNote       $0F
0008BBAF E701                       	dc.b	smpsNoAttack, $01
0008BBB1 E10C                       	smpsAlterNote       $0C
0008BBB3 E701                       	dc.b	smpsNoAttack, $01
0008BBB5 E108                       	smpsAlterNote       $08
0008BBB7 E701                       	dc.b	smpsNoAttack, $01
0008BBB9 E109                       	smpsAlterNote       $09
0008BBBB 8001                       	dc.b	nRst, $01
0008BBBD E110                       	smpsAlterNote       $10
0008BBBF C70D                       	dc.b	nBb5, $0D
0008BBC1 E10D                       	smpsAlterNote       $0D
0008BBC3 E701                       	dc.b	smpsNoAttack, $01
0008BBC5 E109                       	smpsAlterNote       $09
0008BBC7 E701                       	dc.b	smpsNoAttack, $01
0008BBC9 E10D                       	smpsAlterNote       $0D
0008BBCB E701                       	dc.b	smpsNoAttack, $01
0008BBCD E113                       	smpsAlterNote       $13
0008BBCF E701                       	dc.b	smpsNoAttack, $01
0008BBD1 E114                       	smpsAlterNote       $14
0008BBD3 E701                       	dc.b	smpsNoAttack, $01
0008BBD5 E110                       	smpsAlterNote       $10
0008BBD7 E701                       	dc.b	smpsNoAttack, $01
0008BBD9 E10A                       	smpsAlterNote       $0A
0008BBDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBDF E10D                       	smpsAlterNote       $0D
0008BBE1 E701                       	dc.b	smpsNoAttack, $01
0008BBE3 E113                       	smpsAlterNote       $13
0008BBE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBE9 E10D                       	smpsAlterNote       $0D
0008BBEB E701                       	dc.b	smpsNoAttack, $01
0008BBED E10A                       	smpsAlterNote       $0A
0008BBEF E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008BBF9 E10B                       	smpsAlterNote       $0B
0008BBFB 8001                       	dc.b	nRst, $01
0008BBFD E10C                       	smpsAlterNote       $0C
0008BBFF CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008BC03 E10B                       	smpsAlterNote       $0B
0008BC05 CB0D                       	dc.b	nD6, $0D
0008BC07 E105                       	smpsAlterNote       $05
0008BC09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC0D E108                       	smpsAlterNote       $08
0008BC0F E701                       	dc.b	smpsNoAttack, $01
0008BC11 E10E                       	smpsAlterNote       $0E
0008BC13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC17 E108                       	smpsAlterNote       $08
0008BC19 E701                       	dc.b	smpsNoAttack, $01
0008BC1B E105                       	smpsAlterNote       $05
0008BC1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC21 E10B                       	smpsAlterNote       $0B
0008BC23 E701                       	dc.b	smpsNoAttack, $01
0008BC25 E10F                       	smpsAlterNote       $0F
0008BC27 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BC2B E10C                       	smpsAlterNote       $0C
0008BC2D CC0D                       	dc.b	nEb6, $0D
0008BC2F E106                       	smpsAlterNote       $06
0008BC31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC35 E109                       	smpsAlterNote       $09
0008BC37 E701                       	dc.b	smpsNoAttack, $01
0008BC39 E10C                       	smpsAlterNote       $0C
0008BC3B 8001                       	dc.b	nRst, $01
0008BC3D E10A                       	smpsAlterNote       $0A
0008BC3F C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008BC4B CB0E                       	dc.b	nD6, $0E
0008BC4D E105                       	smpsAlterNote       $05
0008BC4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC53 E10B                       	smpsAlterNote       $0B
0008BC55 E701                       	dc.b	smpsNoAttack, $01
0008BC57 E10E                       	smpsAlterNote       $0E
0008BC59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC5D E108                       	smpsAlterNote       $08
0008BC5F E701                       	dc.b	smpsNoAttack, $01
0008BC61 E104                       	smpsAlterNote       $04
0008BC63 E701                       	dc.b	smpsNoAttack, $01
0008BC65 E105                       	smpsAlterNote       $05
0008BC67 E701                       	dc.b	smpsNoAttack, $01
0008BC69 E10B                       	smpsAlterNote       $0B
0008BC6B E701                       	dc.b	smpsNoAttack, $01
0008BC6D E10F                       	smpsAlterNote       $0F
0008BC6F E701                       	dc.b	smpsNoAttack, $01
0008BC71 E10D                       	smpsAlterNote       $0D
0008BC73 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008BC77 E10C                       	smpsAlterNote       $0C
0008BC79 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008BC7D E10A                       	smpsAlterNote       $0A
0008BC7F C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008BC8B CB0D                       	dc.b	nD6, $0D
0008BC8D E108                       	smpsAlterNote       $08
0008BC8F E701                       	dc.b	smpsNoAttack, $01
0008BC91 E104                       	smpsAlterNote       $04
0008BC93 E701                       	dc.b	smpsNoAttack, $01
0008BC95 E105                       	smpsAlterNote       $05
0008BC97 E701                       	dc.b	smpsNoAttack, $01
0008BC99 E10B                       	smpsAlterNote       $0B
0008BC9B E701                       	dc.b	smpsNoAttack, $01
0008BC9D E10F                       	smpsAlterNote       $0F
0008BC9F E701                       	dc.b	smpsNoAttack, $01
0008BCA1 E10B                       	smpsAlterNote       $0B
0008BCA3 E701                       	dc.b	smpsNoAttack, $01
0008BCA5 E108                       	smpsAlterNote       $08
0008BCA7 E701                       	dc.b	smpsNoAttack, $01
0008BCA9 E104                       	smpsAlterNote       $04
0008BCAB E701                       	dc.b	smpsNoAttack, $01
0008BCAD E108                       	smpsAlterNote       $08
0008BCAF E701                       	dc.b	smpsNoAttack, $01
0008BCB1 E10E                       	smpsAlterNote       $0E
0008BCB3 E701                       	dc.b	smpsNoAttack, $01
0008BCB5 E10F                       	smpsAlterNote       $0F
0008BCB7 E701                       	dc.b	smpsNoAttack, $01
0008BCB9 E10C                       	smpsAlterNote       $0C
0008BCBB CC0D                       	dc.b	nEb6, $0D
0008BCBD E109                       	smpsAlterNote       $09
0008BCBF E701                       	dc.b	smpsNoAttack, $01
0008BCC1 E105                       	smpsAlterNote       $05
0008BCC3 E701                       	dc.b	smpsNoAttack, $01
0008BCC5 E106                       	smpsAlterNote       $06
0008BCC7 E701                       	dc.b	smpsNoAttack, $01
0008BCC9 E10C                       	smpsAlterNote       $0C
0008BCCB E701                       	dc.b	smpsNoAttack, $01
0008BCCD E10A                       	smpsAlterNote       $0A
0008BCCF C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008BCDB CB0D                       	dc.b	nD6, $0D
0008BCDD E108                       	smpsAlterNote       $08
0008BCDF E701                       	dc.b	smpsNoAttack, $01
0008BCE1 E104                       	smpsAlterNote       $04
0008BCE3 E701                       	dc.b	smpsNoAttack, $01
0008BCE5 E108                       	smpsAlterNote       $08
0008BCE7 E701                       	dc.b	smpsNoAttack, $01
0008BCE9 E10B                       	smpsAlterNote       $0B
0008BCEB E701                       	dc.b	smpsNoAttack, $01
0008BCED E10F                       	smpsAlterNote       $0F
0008BCEF E701                       	dc.b	smpsNoAttack, $01
0008BCF1 E10B                       	smpsAlterNote       $0B
0008BCF3 E701                       	dc.b	smpsNoAttack, $01
0008BCF5 E105                       	smpsAlterNote       $05
0008BCF7 E701                       	dc.b	smpsNoAttack, $01
0008BCF9 E104                       	smpsAlterNote       $04
0008BCFB E701                       	dc.b	smpsNoAttack, $01
0008BCFD E108                       	smpsAlterNote       $08
0008BCFF E701                       	dc.b	smpsNoAttack, $01
0008BD01 E10E                       	smpsAlterNote       $0E
0008BD03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD07 E10B                       	smpsAlterNote       $0B
0008BD09 E701                       	dc.b	smpsNoAttack, $01
0008BD0B E105                       	smpsAlterNote       $05
0008BD0D E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008BD15 03                         	dc.b	$03
0008BD16 E601                       	smpsAlterVol        $01
0008BD18 F6F1 D1                    	smpsJump            music84_Jump01
0008BD1B                            
0008BD1B                            ; FM5 Data
0008BD1B                            music84_FM5:
0008BD1D E080                       	smpsPan             panLeft, $00
0008BD1F 8003                       	dc.b	nRst, $03
0008BD21 E10D                       	smpsAlterNote       $0D
0008BD23 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008BD27 E10C                       	smpsAlterNote       $0C
0008BD29 C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008BD2D E10F                       	smpsAlterNote       $0F
0008BD2F BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008BD35 E6FE                       	smpsAlterVol        $FE
0008BD37 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008BD3D E10D                       	smpsAlterNote       $0D
0008BD3F C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008BD45 E10C                       	smpsAlterNote       $0C
0008BD47 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008BD4B E10A                       	smpsAlterNote       $0A
0008BD4D BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008BD53 03                         	dc.b	$03
0008BD54                            
0008BD54                            music84_Jump00:
0008BD54 8004                       	dc.b	nRst, $04
0008BD56 E602                       	smpsAlterVol        $02
0008BD58 E10D                       	smpsAlterNote       $0D
0008BD5A B60D                       	dc.b	nF4, $0D
0008BD5C E107                       	smpsAlterNote       $07
0008BD5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD62 E10A                       	smpsAlterNote       $0A
0008BD64 E701                       	dc.b	smpsNoAttack, $01
0008BD66 E110                       	smpsAlterNote       $10
0008BD68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD6C E10A                       	smpsAlterNote       $0A
0008BD6E E701                       	dc.b	smpsNoAttack, $01
0008BD70 E107                       	smpsAlterNote       $07
0008BD72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD76 E10D                       	smpsAlterNote       $0D
0008BD78 E701                       	dc.b	smpsNoAttack, $01
0008BD7A E111                       	smpsAlterNote       $11
0008BD7C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BD80 E10D                       	smpsAlterNote       $0D
0008BD82 B80D                       	dc.b	nG4, $0D
0008BD84 E107                       	smpsAlterNote       $07
0008BD86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD8A E10A                       	smpsAlterNote       $0A
0008BD8C E701                       	dc.b	smpsNoAttack, $01
0008BD8E E110                       	smpsAlterNote       $10
0008BD90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD94 E10A                       	smpsAlterNote       $0A
0008BD96 E701                       	dc.b	smpsNoAttack, $01
0008BD98 E107                       	smpsAlterNote       $07
0008BD9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD9E E10D                       	smpsAlterNote       $0D
0008BDA0 E701                       	dc.b	smpsNoAttack, $01
0008BDA2 E111                       	smpsAlterNote       $11
0008BDA4 E701                       	dc.b	smpsNoAttack, $01
0008BDA6 E110                       	smpsAlterNote       $10
0008BDA8 E701                       	dc.b	smpsNoAttack, $01
0008BDAA E10A                       	smpsAlterNote       $0A
0008BDAC E701                       	dc.b	smpsNoAttack, $01
0008BDAE E106                       	smpsAlterNote       $06
0008BDB0 E701                       	dc.b	smpsNoAttack, $01
0008BDB2 E10A                       	smpsAlterNote       $0A
0008BDB4 E701                       	dc.b	smpsNoAttack, $01
0008BDB6 E10D                       	smpsAlterNote       $0D
0008BDB8 E701                       	dc.b	smpsNoAttack, $01
0008BDBA E111                       	smpsAlterNote       $11
0008BDBC E701                       	dc.b	smpsNoAttack, $01
0008BDBE E10D                       	smpsAlterNote       $0D
0008BDC0 E701                       	dc.b	smpsNoAttack, $01
0008BDC2 E10F                       	smpsAlterNote       $0F
0008BDC4 BA0E                       	dc.b	nA4, $0E
0008BDC6 E109                       	smpsAlterNote       $09
0008BDC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDCC E10F                       	smpsAlterNote       $0F
0008BDCE E701                       	dc.b	smpsNoAttack, $01
0008BDD0 E112                       	smpsAlterNote       $12
0008BDD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDD6 E10C                       	smpsAlterNote       $0C
0008BDD8 E701                       	dc.b	smpsNoAttack, $01
0008BDDA E108                       	smpsAlterNote       $08
0008BDDC E701                       	dc.b	smpsNoAttack, $01
0008BDDE E109                       	smpsAlterNote       $09
0008BDE0 E701                       	dc.b	smpsNoAttack, $01
0008BDE2 E10F                       	smpsAlterNote       $0F
0008BDE4 E701                       	dc.b	smpsNoAttack, $01
0008BDE6 E113                       	smpsAlterNote       $13
0008BDE8 E701                       	dc.b	smpsNoAttack, $01
0008BDEA E10F                       	smpsAlterNote       $0F
0008BDEC E701                       	dc.b	smpsNoAttack, $01
0008BDEE E109                       	smpsAlterNote       $09
0008BDF0 E701                       	dc.b	smpsNoAttack, $01
0008BDF2 E108                       	smpsAlterNote       $08
0008BDF4 E701                       	dc.b	smpsNoAttack, $01
0008BDF6 E10C                       	smpsAlterNote       $0C
0008BDF8 E701                       	dc.b	smpsNoAttack, $01
0008BDFA E112                       	smpsAlterNote       $12
0008BDFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE00 E10F                       	smpsAlterNote       $0F
0008BE02 E701                       	dc.b	smpsNoAttack, $01
0008BE04 E109                       	smpsAlterNote       $09
0008BE06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE0A E10F                       	smpsAlterNote       $0F
0008BE0C E701                       	dc.b	smpsNoAttack, $01
0008BE0E E112                       	smpsAlterNote       $12
0008BE10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE14 E10C                       	smpsAlterNote       $0C
0008BE16 E701                       	dc.b	smpsNoAttack, $01
0008BE18 E108                       	smpsAlterNote       $08
0008BE1A E701                       	dc.b	smpsNoAttack, $01
0008BE1C E109                       	smpsAlterNote       $09
0008BE1E E701                       	dc.b	smpsNoAttack, $01
0008BE20 E10F                       	smpsAlterNote       $0F
0008BE22 E701                       	dc.b	smpsNoAttack, $01
0008BE24 E113                       	smpsAlterNote       $13
0008BE26 E701                       	dc.b	smpsNoAttack, $01
0008BE28 E10F                       	smpsAlterNote       $0F
0008BE2A E701                       	dc.b	smpsNoAttack, $01
0008BE2C E10C                       	smpsAlterNote       $0C
0008BE2E E701                       	dc.b	smpsNoAttack, $01
0008BE30 E108                       	smpsAlterNote       $08
0008BE32 E701                       	dc.b	smpsNoAttack, $01
0008BE34 E109                       	smpsAlterNote       $09
0008BE36 8001                       	dc.b	nRst, $01
0008BE38 E10C                       	smpsAlterNote       $0C
0008BE3A B50A                       	dc.b	nE4, $0A
0008BE3C E10D                       	smpsAlterNote       $0D
0008BE3E B60D                       	dc.b	nF4, $0D
0008BE40 E10A                       	smpsAlterNote       $0A
0008BE42 E701                       	dc.b	smpsNoAttack, $01
0008BE44 E106                       	smpsAlterNote       $06
0008BE46 E701                       	dc.b	smpsNoAttack, $01
0008BE48 E107                       	smpsAlterNote       $07
0008BE4A E701                       	dc.b	smpsNoAttack, $01
0008BE4C E10D                       	smpsAlterNote       $0D
0008BE4E E701                       	dc.b	smpsNoAttack, $01
0008BE50 E111                       	smpsAlterNote       $11
0008BE52 E701                       	dc.b	smpsNoAttack, $01
0008BE54 E10D                       	smpsAlterNote       $0D
0008BE56 E701                       	dc.b	smpsNoAttack, $01
0008BE58 E10A                       	smpsAlterNote       $0A
0008BE5A E701                       	dc.b	smpsNoAttack, $01
0008BE5C E106                       	smpsAlterNote       $06
0008BE5E E701                       	dc.b	smpsNoAttack, $01
0008BE60 E10A                       	smpsAlterNote       $0A
0008BE62 E701                       	dc.b	smpsNoAttack, $01
0008BE64 E110                       	smpsAlterNote       $10
0008BE66 E701                       	dc.b	smpsNoAttack, $01
0008BE68 E111                       	smpsAlterNote       $11
0008BE6A E701                       	dc.b	smpsNoAttack, $01
0008BE6C E10D                       	smpsAlterNote       $0D
0008BE6E B80D                       	dc.b	nG4, $0D
0008BE70 E10A                       	smpsAlterNote       $0A
0008BE72 E701                       	dc.b	smpsNoAttack, $01
0008BE74 E106                       	smpsAlterNote       $06
0008BE76 E701                       	dc.b	smpsNoAttack, $01
0008BE78 E107                       	smpsAlterNote       $07
0008BE7A E701                       	dc.b	smpsNoAttack, $01
0008BE7C E10D                       	smpsAlterNote       $0D
0008BE7E E701                       	dc.b	smpsNoAttack, $01
0008BE80 E111                       	smpsAlterNote       $11
0008BE82 E701                       	dc.b	smpsNoAttack, $01
0008BE84 E10D                       	smpsAlterNote       $0D
0008BE86 E701                       	dc.b	smpsNoAttack, $01
0008BE88 E10A                       	smpsAlterNote       $0A
0008BE8A E701                       	dc.b	smpsNoAttack, $01
0008BE8C E106                       	smpsAlterNote       $06
0008BE8E E701                       	dc.b	smpsNoAttack, $01
0008BE90 E10A                       	smpsAlterNote       $0A
0008BE92 E701                       	dc.b	smpsNoAttack, $01
0008BE94 E110                       	smpsAlterNote       $10
0008BE96 E701                       	dc.b	smpsNoAttack, $01
0008BE98 E111                       	smpsAlterNote       $11
0008BE9A E701                       	dc.b	smpsNoAttack, $01
0008BE9C E10D                       	smpsAlterNote       $0D
0008BE9E E701                       	dc.b	smpsNoAttack, $01
0008BEA0 E107                       	smpsAlterNote       $07
0008BEA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEA6 E10A                       	smpsAlterNote       $0A
0008BEA8 E701                       	dc.b	smpsNoAttack, $01
0008BEAA E110                       	smpsAlterNote       $10
0008BEAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEB0 E10D                       	smpsAlterNote       $0D
0008BEB2 8001                       	dc.b	nRst, $01
0008BEB4 E10F                       	smpsAlterNote       $0F
0008BEB6 BA0D                       	dc.b	nA4, $0D
0008BEB8 E10C                       	smpsAlterNote       $0C
0008BEBA E701                       	dc.b	smpsNoAttack, $01
0008BEBC E108                       	smpsAlterNote       $08
0008BEBE E701                       	dc.b	smpsNoAttack, $01
0008BEC0 E10C                       	smpsAlterNote       $0C
0008BEC2 E701                       	dc.b	smpsNoAttack, $01
0008BEC4 E112                       	smpsAlterNote       $12
0008BEC6 E701                       	dc.b	smpsNoAttack, $01
0008BEC8 E113                       	smpsAlterNote       $13
0008BECA E701                       	dc.b	smpsNoAttack, $01
0008BECC E10F                       	smpsAlterNote       $0F
0008BECE E701                       	dc.b	smpsNoAttack, $01
0008BED0 E109                       	smpsAlterNote       $09
0008BED2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BED6 E10C                       	smpsAlterNote       $0C
0008BED8 E701                       	dc.b	smpsNoAttack, $01
0008BEDA E112                       	smpsAlterNote       $12
0008BEDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEE0 E10C                       	smpsAlterNote       $0C
0008BEE2 E701                       	dc.b	smpsNoAttack, $01
0008BEE4 E109                       	smpsAlterNote       $09
0008BEE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEEA E10F                       	smpsAlterNote       $0F
0008BEEC E701                       	dc.b	smpsNoAttack, $01
0008BEEE E113                       	smpsAlterNote       $13
0008BEF0 E701                       	dc.b	smpsNoAttack, $01
0008BEF2 E112                       	smpsAlterNote       $12
0008BEF4 E701                       	dc.b	smpsNoAttack, $01
0008BEF6 E10C                       	smpsAlterNote       $0C
0008BEF8 E701                       	dc.b	smpsNoAttack, $01
0008BEFA E108                       	smpsAlterNote       $08
0008BEFC E701                       	dc.b	smpsNoAttack, $01
0008BEFE E10C                       	smpsAlterNote       $0C
0008BF00 E701                       	dc.b	smpsNoAttack, $01
0008BF02 E10F                       	smpsAlterNote       $0F
0008BF04 E701                       	dc.b	smpsNoAttack, $01
0008BF06 E113                       	smpsAlterNote       $13
0008BF08 E701                       	dc.b	smpsNoAttack, $01
0008BF0A E10F                       	smpsAlterNote       $0F
0008BF0C E701                       	dc.b	smpsNoAttack, $01
0008BF0E E109                       	smpsAlterNote       $09
0008BF10 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BF14 E10D                       	smpsAlterNote       $0D
0008BF16 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008BF1A E10C                       	smpsAlterNote       $0C
0008BF1C B506 8001                  	dc.b	nE4, $06, nRst, $01
0008BF20 E10B                       	smpsAlterNote       $0B
0008BF22 B30D                       	dc.b	nD4, $0D
0008BF24 E10C                       	smpsAlterNote       $0C
0008BF26 B503 8001                  	dc.b	nE4, $03, nRst, $01
0008BF2A E10D                       	smpsAlterNote       $0D
0008BF2C B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008BF34 E109                       	smpsAlterNote       $09
0008BF36 E701                       	dc.b	smpsNoAttack, $01
0008BF38 E108                       	smpsAlterNote       $08
0008BF3A E701                       	dc.b	smpsNoAttack, $01
0008BF3C E10C                       	smpsAlterNote       $0C
0008BF3E E701                       	dc.b	smpsNoAttack, $01
0008BF40 E112                       	smpsAlterNote       $12
0008BF42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF46 E10F                       	smpsAlterNote       $0F
0008BF48 E701                       	dc.b	smpsNoAttack, $01
0008BF4A E109                       	smpsAlterNote       $09
0008BF4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF50 E10F                       	smpsAlterNote       $0F
0008BF52 E701                       	dc.b	smpsNoAttack, $01
0008BF54 E112                       	smpsAlterNote       $12
0008BF56 E701                       	dc.b	smpsNoAttack, $01
0008BF58 E113                       	smpsAlterNote       $13
0008BF5A 8001                       	dc.b	nRst, $01
0008BF5C E10D                       	smpsAlterNote       $0D
0008BF5E C20D                       	dc.b	nF5, $0D
0008BF60 E107                       	smpsAlterNote       $07
0008BF62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF66 E10A                       	smpsAlterNote       $0A
0008BF68 E701                       	dc.b	smpsNoAttack, $01
0008BF6A E110                       	smpsAlterNote       $10
0008BF6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF70 E10A                       	smpsAlterNote       $0A
0008BF72 E701                       	dc.b	smpsNoAttack, $01
0008BF74 E107                       	smpsAlterNote       $07
0008BF76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF7A E10D                       	smpsAlterNote       $0D
0008BF7C E701                       	dc.b	smpsNoAttack, $01
0008BF7E E111                       	smpsAlterNote       $11
0008BF80 E701                       	dc.b	smpsNoAttack, $01
0008BF82 E110                       	smpsAlterNote       $10
0008BF84 E701                       	dc.b	smpsNoAttack, $01
0008BF86 E10A                       	smpsAlterNote       $0A
0008BF88 E701                       	dc.b	smpsNoAttack, $01
0008BF8A E106                       	smpsAlterNote       $06
0008BF8C E701                       	dc.b	smpsNoAttack, $01
0008BF8E E10A                       	smpsAlterNote       $0A
0008BF90 E701                       	dc.b	smpsNoAttack, $01
0008BF92 E10D                       	smpsAlterNote       $0D
0008BF94 E701                       	dc.b	smpsNoAttack, $01
0008BF96 E111                       	smpsAlterNote       $11
0008BF98 E701                       	dc.b	smpsNoAttack, $01
0008BF9A E10D                       	smpsAlterNote       $0D
0008BF9C E701                       	dc.b	smpsNoAttack, $01
0008BF9E E107                       	smpsAlterNote       $07
0008BFA0 E701                       	dc.b	smpsNoAttack, $01
0008BFA2 E106                       	smpsAlterNote       $06
0008BFA4 E701                       	dc.b	smpsNoAttack, $01
0008BFA6 E10A                       	smpsAlterNote       $0A
0008BFA8 E701                       	dc.b	smpsNoAttack, $01
0008BFAA E110                       	smpsAlterNote       $10
0008BFAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFB0 E10D                       	smpsAlterNote       $0D
0008BFB2 E701                       	dc.b	smpsNoAttack, $01
0008BFB4 E107                       	smpsAlterNote       $07
0008BFB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFBA E10D                       	smpsAlterNote       $0D
0008BFBC E701                       	dc.b	smpsNoAttack, $01
0008BFBE E110                       	smpsAlterNote       $10
0008BFC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFC4 E10A                       	smpsAlterNote       $0A
0008BFC6 E701                       	dc.b	smpsNoAttack, $01
0008BFC8 E106                       	smpsAlterNote       $06
0008BFCA E701                       	dc.b	smpsNoAttack, $01
0008BFCC E107                       	smpsAlterNote       $07
0008BFCE E701                       	dc.b	smpsNoAttack, $01
0008BFD0 E10D                       	smpsAlterNote       $0D
0008BFD2 E701                       	dc.b	smpsNoAttack, $01
0008BFD4 E111                       	smpsAlterNote       $11
0008BFD6 E701                       	dc.b	smpsNoAttack, $01
0008BFD8 E10D                       	smpsAlterNote       $0D
0008BFDA E701                       	dc.b	smpsNoAttack, $01
0008BFDC E10A                       	smpsAlterNote       $0A
0008BFDE E701                       	dc.b	smpsNoAttack, $01
0008BFE0 E106                       	smpsAlterNote       $06
0008BFE2 E701                       	dc.b	smpsNoAttack, $01
0008BFE4 E10A                       	smpsAlterNote       $0A
0008BFE6 E701                       	dc.b	smpsNoAttack, $01
0008BFE8 E110                       	smpsAlterNote       $10
0008BFEA E701                       	dc.b	smpsNoAttack, $01
0008BFEC E111                       	smpsAlterNote       $11
0008BFEE E701                       	dc.b	smpsNoAttack, $01
0008BFF0 E10D                       	smpsAlterNote       $0D
0008BFF2 E701                       	dc.b	smpsNoAttack, $01
0008BFF4 E107                       	smpsAlterNote       $07
0008BFF6 E701                       	dc.b	smpsNoAttack, $01
0008BFF8 E10D                       	smpsAlterNote       $0D
0008BFFA C207                       	dc.b	nF5, $07
0008BFFC E10C                       	smpsAlterNote       $0C
0008BFFE C10D                       	dc.b	nE5, $0D
0008C000 E109                       	smpsAlterNote       $09
0008C002 E701                       	dc.b	smpsNoAttack, $01
0008C004 E106                       	smpsAlterNote       $06
0008C006 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C00A E10C                       	smpsAlterNote       $0C
0008C00C E701                       	dc.b	smpsNoAttack, $01
0008C00E E110                       	smpsAlterNote       $10
0008C010 E701                       	dc.b	smpsNoAttack, $01
0008C012 E10F                       	smpsAlterNote       $0F
0008C014 E701                       	dc.b	smpsNoAttack, $01
0008C016 E109                       	smpsAlterNote       $09
0008C018 E701                       	dc.b	smpsNoAttack, $01
0008C01A E105                       	smpsAlterNote       $05
0008C01C E701                       	dc.b	smpsNoAttack, $01
0008C01E E109                       	smpsAlterNote       $09
0008C020 E701                       	dc.b	smpsNoAttack, $01
0008C022 E10C                       	smpsAlterNote       $0C
0008C024 E701                       	dc.b	smpsNoAttack, $01
0008C026 E110                       	smpsAlterNote       $10
0008C028 E701                       	dc.b	smpsNoAttack, $01
0008C02A E10B                       	smpsAlterNote       $0B
0008C02C BF0D                       	dc.b	nD5, $0D
0008C02E E108                       	smpsAlterNote       $08
0008C030 E701                       	dc.b	smpsNoAttack, $01
0008C032 E105                       	smpsAlterNote       $05
0008C034 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C038 E10B                       	smpsAlterNote       $0B
0008C03A E701                       	dc.b	smpsNoAttack, $01
0008C03C E10F                       	smpsAlterNote       $0F
0008C03E E701                       	dc.b	smpsNoAttack, $01
0008C040 E10E                       	smpsAlterNote       $0E
0008C042 E701                       	dc.b	smpsNoAttack, $01
0008C044 E108                       	smpsAlterNote       $08
0008C046 E701                       	dc.b	smpsNoAttack, $01
0008C048 E104                       	smpsAlterNote       $04
0008C04A E701                       	dc.b	smpsNoAttack, $01
0008C04C E108                       	smpsAlterNote       $08
0008C04E E701                       	dc.b	smpsNoAttack, $01
0008C050 E10E                       	smpsAlterNote       $0E
0008C052 E701                       	dc.b	smpsNoAttack, $01
0008C054 E10F                       	smpsAlterNote       $0F
0008C056 E701                       	dc.b	smpsNoAttack, $01
0008C058 E10B                       	smpsAlterNote       $0B
0008C05A E701                       	dc.b	smpsNoAttack, $01
0008C05C E105                       	smpsAlterNote       $05
0008C05E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C062 E108                       	smpsAlterNote       $08
0008C064 E701                       	dc.b	smpsNoAttack, $01
0008C066 E10E                       	smpsAlterNote       $0E
0008C068 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C06C E108                       	smpsAlterNote       $08
0008C06E E701                       	dc.b	smpsNoAttack, $01
0008C070 E105                       	smpsAlterNote       $05
0008C072 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C076 E10B                       	smpsAlterNote       $0B
0008C078 E701                       	dc.b	smpsNoAttack, $01
0008C07A E10F                       	smpsAlterNote       $0F
0008C07C E701                       	dc.b	smpsNoAttack, $01
0008C07E E10E                       	smpsAlterNote       $0E
0008C080 E701                       	dc.b	smpsNoAttack, $01
0008C082 E108                       	smpsAlterNote       $08
0008C084 E701                       	dc.b	smpsNoAttack, $01
0008C086 E104                       	smpsAlterNote       $04
0008C088 E701                       	dc.b	smpsNoAttack, $01
0008C08A E108                       	smpsAlterNote       $08
0008C08C E701                       	dc.b	smpsNoAttack, $01
0008C08E E10B                       	smpsAlterNote       $0B
0008C090 E701                       	dc.b	smpsNoAttack, $01
0008C092 E10F                       	smpsAlterNote       $0F
0008C094 E701                       	dc.b	smpsNoAttack, $01
0008C096 E10B                       	smpsAlterNote       $0B
0008C098 E701                       	dc.b	smpsNoAttack, $01
0008C09A E105                       	smpsAlterNote       $05
0008C09C E701                       	dc.b	smpsNoAttack, $01
0008C09E E104                       	smpsAlterNote       $04
0008C0A0 E701                       	dc.b	smpsNoAttack, $01
0008C0A2 E108                       	smpsAlterNote       $08
0008C0A4 E701                       	dc.b	smpsNoAttack, $01
0008C0A6 E10E                       	smpsAlterNote       $0E
0008C0A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0AC E10B                       	smpsAlterNote       $0B
0008C0AE E701                       	dc.b	smpsNoAttack, $01
0008C0B0 E105                       	smpsAlterNote       $05
0008C0B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0B6 E10B                       	smpsAlterNote       $0B
0008C0B8 E701                       	dc.b	smpsNoAttack, $01
0008C0BA E10E                       	smpsAlterNote       $0E
0008C0BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0C0 E108                       	smpsAlterNote       $08
0008C0C2 E701                       	dc.b	smpsNoAttack, $01
0008C0C4 E105                       	smpsAlterNote       $05
0008C0C6 8001                       	dc.b	nRst, $01
0008C0CA E601                       	smpsAlterVol        $01
0008C0CC E10B                       	smpsAlterNote       $0B
0008C0CE BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008C0DA 8004                       	dc.b	nRst, $04
0008C0DE E6FF                       	smpsAlterVol        $FF
0008C0E0 E10D                       	smpsAlterNote       $0D
0008C0E2 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008C0EA E10C                       	smpsAlterNote       $0C
0008C0EC E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008C0F1 E10D                       	smpsAlterNote       $0D
0008C0F3 B60D                       	dc.b	nF4, $0D
0008C0F5 E10A                       	smpsAlterNote       $0A
0008C0F7 E701                       	dc.b	smpsNoAttack, $01
0008C0F9 E106                       	smpsAlterNote       $06
0008C0FB E701                       	dc.b	smpsNoAttack, $01
0008C0FD E10A                       	smpsAlterNote       $0A
0008C0FF E701                       	dc.b	smpsNoAttack, $01
0008C101 E110                       	smpsAlterNote       $10
0008C103 E701                       	dc.b	smpsNoAttack, $01
0008C105 E111                       	smpsAlterNote       $11
0008C107 E701                       	dc.b	smpsNoAttack, $01
0008C109 E10D                       	smpsAlterNote       $0D
0008C10B E701                       	dc.b	smpsNoAttack, $01
0008C10D E107                       	smpsAlterNote       $07
0008C10F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C113 E10A                       	smpsAlterNote       $0A
0008C115 E701                       	dc.b	smpsNoAttack, $01
0008C117 E110                       	smpsAlterNote       $10
0008C119 E701                       	dc.b	smpsNoAttack, $01
0008C11B E111                       	smpsAlterNote       $11
0008C11D 8001                       	dc.b	nRst, $01
0008C11F E10D                       	smpsAlterNote       $0D
0008C121 B80D                       	dc.b	nG4, $0D
0008C123 E10A                       	smpsAlterNote       $0A
0008C125 E701                       	dc.b	smpsNoAttack, $01
0008C127 E106                       	smpsAlterNote       $06
0008C129 E701                       	dc.b	smpsNoAttack, $01
0008C12B E10A                       	smpsAlterNote       $0A
0008C12D E701                       	dc.b	smpsNoAttack, $01
0008C12F E110                       	smpsAlterNote       $10
0008C131 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C135 E10D                       	smpsAlterNote       $0D
0008C137 E701                       	dc.b	smpsNoAttack, $01
0008C139 E107                       	smpsAlterNote       $07
0008C13B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C13F E10D                       	smpsAlterNote       $0D
0008C141 E701                       	dc.b	smpsNoAttack, $01
0008C143 E110                       	smpsAlterNote       $10
0008C145 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C149 E10A                       	smpsAlterNote       $0A
0008C14B E701                       	dc.b	smpsNoAttack, $01
0008C14D E106                       	smpsAlterNote       $06
0008C14F E701                       	dc.b	smpsNoAttack, $01
0008C151 E107                       	smpsAlterNote       $07
0008C153 E701                       	dc.b	smpsNoAttack, $01
0008C155 E10D                       	smpsAlterNote       $0D
0008C157 E701                       	dc.b	smpsNoAttack, $01
0008C159 E111                       	smpsAlterNote       $11
0008C15B E701                       	dc.b	smpsNoAttack, $01
0008C15D E10D                       	smpsAlterNote       $0D
0008C15F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C163 E10F                       	smpsAlterNote       $0F
0008C165 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008C169 E110                       	smpsAlterNote       $10
0008C16B BB03                       	dc.b	nBb4, $03
0008C16D E10F                       	smpsAlterNote       $0F
0008C16F BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008C175 E110                       	smpsAlterNote       $10
0008C177 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008C17B E10F                       	smpsAlterNote       $0F
0008C17D C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008C183 E110                       	smpsAlterNote       $10
0008C185 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008C189 E10F                       	smpsAlterNote       $0F
0008C18B D20D                       	dc.b	nA6, $0D
0008C18D E10C                       	smpsAlterNote       $0C
0008C18F E701                       	dc.b	smpsNoAttack, $01
0008C191 E108                       	smpsAlterNote       $08
0008C193 E701                       	dc.b	smpsNoAttack, $01
0008C195 E10C                       	smpsAlterNote       $0C
0008C197 E701                       	dc.b	smpsNoAttack, $01
0008C199 E10F                       	smpsAlterNote       $0F
0008C19B E701                       	dc.b	smpsNoAttack, $01
0008C19D E113                       	smpsAlterNote       $13
0008C19F E701                       	dc.b	smpsNoAttack, $01
0008C1A1 E10F                       	smpsAlterNote       $0F
0008C1A3 E701                       	dc.b	smpsNoAttack, $01
0008C1A5 E109                       	smpsAlterNote       $09
0008C1A7 E701                       	dc.b	smpsNoAttack, $01
0008C1A9 E108                       	smpsAlterNote       $08
0008C1AB E701                       	dc.b	smpsNoAttack, $01
0008C1AD E10C                       	smpsAlterNote       $0C
0008C1AF E701                       	dc.b	smpsNoAttack, $01
0008C1B1 E112                       	smpsAlterNote       $12
0008C1B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C1B7 E10F                       	smpsAlterNote       $0F
0008C1B9 E701                       	dc.b	smpsNoAttack, $01
0008C1BB E109                       	smpsAlterNote       $09
0008C1BD E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008C1C3 E10D                       	smpsAlterNote       $0D
0008C1C5 CE07                       	dc.b	nF6, $07
0008C1C7 E10C                       	smpsAlterNote       $0C
0008C1C9 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008C1CD E10D                       	smpsAlterNote       $0D
0008C1CF CE03                       	dc.b	nF6, $03
0008C1D1 E10C                       	smpsAlterNote       $0C
0008C1D3 CC0D                       	dc.b	nEb6, $0D
0008C1D5 E109                       	smpsAlterNote       $09
0008C1D7 E701                       	dc.b	smpsNoAttack, $01
0008C1D9 E106                       	smpsAlterNote       $06
0008C1DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C1DF E10C                       	smpsAlterNote       $0C
0008C1E1 E701                       	dc.b	smpsNoAttack, $01
0008C1E3 E110                       	smpsAlterNote       $10
0008C1E5 E701                       	dc.b	smpsNoAttack, $01
0008C1E7 E10F                       	smpsAlterNote       $0F
0008C1E9 E701                       	dc.b	smpsNoAttack, $01
0008C1EB E109                       	smpsAlterNote       $09
0008C1ED E701                       	dc.b	smpsNoAttack, $01
0008C1EF E105                       	smpsAlterNote       $05
0008C1F1 E701                       	dc.b	smpsNoAttack, $01
0008C1F3 E109                       	smpsAlterNote       $09
0008C1F5 E701                       	dc.b	smpsNoAttack, $01
0008C1F7 E10C                       	smpsAlterNote       $0C
0008C1F9 E701                       	dc.b	smpsNoAttack, $01
0008C1FB E110                       	smpsAlterNote       $10
0008C1FD E701                       	dc.b	smpsNoAttack, $01
0008C1FF E10C                       	smpsAlterNote       $0C
0008C201 E701                       	dc.b	smpsNoAttack, $01
0008C203 E106                       	smpsAlterNote       $06
0008C205 E701                       	dc.b	smpsNoAttack, $01
0008C207 E105                       	smpsAlterNote       $05
0008C209 E701                       	dc.b	smpsNoAttack, $01
0008C20B E109                       	smpsAlterNote       $09
0008C20D E701                       	dc.b	smpsNoAttack, $01
0008C20F E10F                       	smpsAlterNote       $0F
0008C211 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C215 E10C                       	smpsAlterNote       $0C
0008C217 E701                       	dc.b	smpsNoAttack, $01
0008C219 E10B                       	smpsAlterNote       $0B
0008C21B CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008C225 E10F                       	smpsAlterNote       $0F
0008C227 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008C231 E10D                       	smpsAlterNote       $0D
0008C233 C203                       	dc.b	nF5, $03
0008C235 E10C                       	smpsAlterNote       $0C
0008C237 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008C23B E10D                       	smpsAlterNote       $0D
0008C23D C20D                       	dc.b	nF5, $0D
0008C23F E10C                       	smpsAlterNote       $0C
0008C241 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008C245 E10B                       	smpsAlterNote       $0B
0008C247 BF0D                       	dc.b	nD5, $0D
0008C249 E108                       	smpsAlterNote       $08
0008C24B E701                       	dc.b	smpsNoAttack, $01
0008C24D E104                       	smpsAlterNote       $04
0008C24F E701                       	dc.b	smpsNoAttack, $01
0008C251 E108                       	smpsAlterNote       $08
0008C253 E701                       	dc.b	smpsNoAttack, $01
0008C255 E10E                       	smpsAlterNote       $0E
0008C257 E701                       	dc.b	smpsNoAttack, $01
0008C259 E10F                       	smpsAlterNote       $0F
0008C25B E701                       	dc.b	smpsNoAttack, $01
0008C25D E10B                       	smpsAlterNote       $0B
0008C25F E701                       	dc.b	smpsNoAttack, $01
0008C261 E105                       	smpsAlterNote       $05
0008C263 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C267 E108                       	smpsAlterNote       $08
0008C269 E701                       	dc.b	smpsNoAttack, $01
0008C26B E10E                       	smpsAlterNote       $0E
0008C26D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C271 E108                       	smpsAlterNote       $08
0008C273 E701                       	dc.b	smpsNoAttack, $01
0008C275 E105                       	smpsAlterNote       $05
0008C277 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C27B E10B                       	smpsAlterNote       $0B
0008C27D E701                       	dc.b	smpsNoAttack, $01
0008C27F E10F                       	smpsAlterNote       $0F
0008C281 E701                       	dc.b	smpsNoAttack, $01
0008C283 E10E                       	smpsAlterNote       $0E
0008C285 E701                       	dc.b	smpsNoAttack, $01
0008C287 E108                       	smpsAlterNote       $08
0008C289 E701                       	dc.b	smpsNoAttack, $01
0008C28B E104                       	smpsAlterNote       $04
0008C28D E701                       	dc.b	smpsNoAttack, $01
0008C28F E108                       	smpsAlterNote       $08
0008C291 E701                       	dc.b	smpsNoAttack, $01
0008C293 E10B                       	smpsAlterNote       $0B
0008C295 E701                       	dc.b	smpsNoAttack, $01
0008C297 E10F                       	smpsAlterNote       $0F
0008C299 E701                       	dc.b	smpsNoAttack, $01
0008C29B E10B                       	smpsAlterNote       $0B
0008C29D E701                       	dc.b	smpsNoAttack, $01
0008C29F E105                       	smpsAlterNote       $05
0008C2A1 E701                       	dc.b	smpsNoAttack, $01
0008C2A3 E104                       	smpsAlterNote       $04
0008C2A5 E701                       	dc.b	smpsNoAttack, $01
0008C2A7 E108                       	smpsAlterNote       $08
0008C2A9 E701                       	dc.b	smpsNoAttack, $01
0008C2AB E10E                       	smpsAlterNote       $0E
0008C2AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2B1 E10B                       	smpsAlterNote       $0B
0008C2B3 E701                       	dc.b	smpsNoAttack, $01
0008C2B5 E105                       	smpsAlterNote       $05
0008C2B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2BB E10B                       	smpsAlterNote       $0B
0008C2BD E701                       	dc.b	smpsNoAttack, $01
0008C2BF E10E                       	smpsAlterNote       $0E
0008C2C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2C5 E108                       	smpsAlterNote       $08
0008C2C7 E701                       	dc.b	smpsNoAttack, $01
0008C2C9 E104                       	smpsAlterNote       $04
0008C2CB E701                       	dc.b	smpsNoAttack, $01
0008C2CD E105                       	smpsAlterNote       $05
0008C2CF E701                       	dc.b	smpsNoAttack, $01
0008C2D1 E10B                       	smpsAlterNote       $0B
0008C2D3 E701                       	dc.b	smpsNoAttack, $01
0008C2D5 E10F                       	smpsAlterNote       $0F
0008C2D7 E701                       	dc.b	smpsNoAttack, $01
0008C2D9 E10B                       	smpsAlterNote       $0B
0008C2DB E701                       	dc.b	smpsNoAttack, $01
0008C2DD E108                       	smpsAlterNote       $08
0008C2DF E701                       	dc.b	smpsNoAttack, $01
0008C2E1 E104                       	smpsAlterNote       $04
0008C2E3 E701                       	dc.b	smpsNoAttack, $01
0008C2E5 E108                       	smpsAlterNote       $08
0008C2E7 E701                       	dc.b	smpsNoAttack, $01
0008C2E9 E10E                       	smpsAlterNote       $0E
0008C2EB E701                       	dc.b	smpsNoAttack, $01
0008C2ED E10F                       	smpsAlterNote       $0F
0008C2EF E701                       	dc.b	smpsNoAttack, $01
0008C2F1 E10B                       	smpsAlterNote       $0B
0008C2F3 E701                       	dc.b	smpsNoAttack, $01
0008C2F5 E105                       	smpsAlterNote       $05
0008C2F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2FB E108                       	smpsAlterNote       $08
0008C2FD E701                       	dc.b	smpsNoAttack, $01
0008C2FF E10E                       	smpsAlterNote       $0E
0008C301 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C305 E108                       	smpsAlterNote       $08
0008C307 E701                       	dc.b	smpsNoAttack, $01
0008C309 E105                       	smpsAlterNote       $05
0008C30B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C30F E10B                       	smpsAlterNote       $0B
0008C311 E701                       	dc.b	smpsNoAttack, $01
0008C313 E10F                       	smpsAlterNote       $0F
0008C315 E701                       	dc.b	smpsNoAttack, $01
0008C317 E10E                       	smpsAlterNote       $0E
0008C319 E701                       	dc.b	smpsNoAttack, $01
0008C31B E108                       	smpsAlterNote       $08
0008C31D E701                       	dc.b	smpsNoAttack, $01
0008C31F E104                       	smpsAlterNote       $04
0008C321 E701                       	dc.b	smpsNoAttack, $01
0008C323 E108                       	smpsAlterNote       $08
0008C325 E701                       	dc.b	smpsNoAttack, $01
0008C327 E10B                       	smpsAlterNote       $0B
0008C329 E701                       	dc.b	smpsNoAttack, $01
0008C32B E10F                       	smpsAlterNote       $0F
0008C32D E701                       	dc.b	smpsNoAttack, $01
0008C32F E10B                       	smpsAlterNote       $0B
0008C331 E701                       	dc.b	smpsNoAttack, $01
0008C333 E105                       	smpsAlterNote       $05
0008C335 E701                       	dc.b	smpsNoAttack, $01
0008C337 E104                       	smpsAlterNote       $04
0008C339 E701                       	dc.b	smpsNoAttack, $01
0008C33B E105                       	smpsAlterNote       $05
0008C33D 8001                       	dc.b	nRst, $01
0008C33F E10D                       	smpsAlterNote       $0D
0008C341 C20D                       	dc.b	nF5, $0D
0008C343 E107                       	smpsAlterNote       $07
0008C345 E701                       	dc.b	smpsNoAttack, $01
0008C347 E106                       	smpsAlterNote       $06
0008C349 E701                       	dc.b	smpsNoAttack, $01
0008C34B E10A                       	smpsAlterNote       $0A
0008C34D E701                       	dc.b	smpsNoAttack, $01
0008C34F E110                       	smpsAlterNote       $10
0008C351 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C355 E10D                       	smpsAlterNote       $0D
0008C357 E701                       	dc.b	smpsNoAttack, $01
0008C359 E107                       	smpsAlterNote       $07
0008C35B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C35F E10D                       	smpsAlterNote       $0D
0008C361 E701                       	dc.b	smpsNoAttack, $01
0008C363 E110                       	smpsAlterNote       $10
0008C365 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C369 E10A                       	smpsAlterNote       $0A
0008C36B E701                       	dc.b	smpsNoAttack, $01
0008C36D E106                       	smpsAlterNote       $06
0008C36F E701                       	dc.b	smpsNoAttack, $01
0008C371 E107                       	smpsAlterNote       $07
0008C373 E701                       	dc.b	smpsNoAttack, $01
0008C375 E10D                       	smpsAlterNote       $0D
0008C377 E701                       	dc.b	smpsNoAttack, $01
0008C379 E111                       	smpsAlterNote       $11
0008C37B E701                       	dc.b	smpsNoAttack, $01
0008C37D E10D                       	smpsAlterNote       $0D
0008C37F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C383 E10C                       	smpsAlterNote       $0C
0008C385 C10D                       	dc.b	nE5, $0D
0008C387 E10D                       	smpsAlterNote       $0D
0008C389 C20A                       	dc.b	nF5, $0A
0008C38B E10C                       	smpsAlterNote       $0C
0008C38D C10E                       	dc.b	nE5, $0E
0008C38F E106                       	smpsAlterNote       $06
0008C391 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C395 E10C                       	smpsAlterNote       $0C
0008C397 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C39B E10B                       	smpsAlterNote       $0B
0008C39D BF0D                       	dc.b	nD5, $0D
0008C39F E10C                       	smpsAlterNote       $0C
0008C3A1 C107                       	dc.b	nE5, $07
0008C3A3 E10D                       	smpsAlterNote       $0D
0008C3A5 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008C3AF E110                       	smpsAlterNote       $10
0008C3B1 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008C3B7 E10F                       	smpsAlterNote       $0F
0008C3B9 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008C3C1 E10D                       	smpsAlterNote       $0D
0008C3C3 D003                       	dc.b	nG6, $03
0008C3C7 E0C0                       	smpsPan             panCenter, $00
0008C3C9 E6FF                       	smpsAlterVol        $FF
0008C3CB AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008C3D7 8001                       	dc.b	nRst, $01
0008C3D9 E10C                       	smpsAlterNote       $0C
0008C3DB A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008C3E5 E604                       	smpsAlterVol        $04
0008C3E7 E10B                       	smpsAlterNote       $0B
0008C3E9 B306 8001                  	dc.b	nD4, $06, nRst, $01
0008C3ED E10F                       	smpsAlterNote       $0F
0008C3EF AE03                       	dc.b	nA3, $03
0008C3F1 E10D                       	smpsAlterNote       $0D
0008C3F3 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008C3F7 E10C                       	smpsAlterNote       $0C
0008C3F9 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C3FD E10B                       	smpsAlterNote       $0B
0008C3FF B302 8001                  	dc.b	nD4, $02, nRst, $01
0008C403 E10A                       	smpsAlterNote       $0A
0008C405 B103                       	dc.b	nC4, $03
0008C407 E110                       	smpsAlterNote       $10
0008C409 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008C40D E10F                       	smpsAlterNote       $0F
0008C40F AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008C413 E080                       	smpsPan             panLeft, $00
0008C415 01                         	dc.b	$01
0008C418 E6FB                       	smpsAlterVol        $FB
0008C41A E1E4                       	smpsAlterNote       $E4
0008C41C C501                       	dc.b	nAb5, $01
0008C41E E1F4                       	smpsAlterNote       $F4
0008C420 E701                       	dc.b	smpsNoAttack, $01
0008C422 E104                       	smpsAlterNote       $04
0008C424 E701                       	dc.b	smpsNoAttack, $01
0008C426 E114                       	smpsAlterNote       $14
0008C428 E701                       	dc.b	smpsNoAttack, $01
0008C42A E11C                       	smpsAlterNote       $1C
0008C42C E701                       	dc.b	smpsNoAttack, $01
0008C42E E1EF                       	smpsAlterNote       $EF
0008C430 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008C433 E1FF                       	smpsAlterNote       $FF
0008C435 E701                       	dc.b	smpsNoAttack, $01
0008C437 E10F                       	smpsAlterNote       $0F
0008C439 C606                       	dc.b	nA5, $06
0008C43B E109                       	smpsAlterNote       $09
0008C43D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C441 E10F                       	smpsAlterNote       $0F
0008C443 E701                       	dc.b	smpsNoAttack, $01
0008C445 E112                       	smpsAlterNote       $12
0008C447 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C44B E10C                       	smpsAlterNote       $0C
0008C44D E701                       	dc.b	smpsNoAttack, $01
0008C44F E108                       	smpsAlterNote       $08
0008C451 E701                       	dc.b	smpsNoAttack, $01
0008C453 E109                       	smpsAlterNote       $09
0008C455 E701                       	dc.b	smpsNoAttack, $01
0008C457 E10F                       	smpsAlterNote       $0F
0008C459 E701                       	dc.b	smpsNoAttack, $01
0008C45B E113                       	smpsAlterNote       $13
0008C45D E701                       	dc.b	smpsNoAttack, $01
0008C45F E10F                       	smpsAlterNote       $0F
0008C461 E701                       	dc.b	smpsNoAttack, $01
0008C463 E10C                       	smpsAlterNote       $0C
0008C465 E701                       	dc.b	smpsNoAttack, $01
0008C467 E108                       	smpsAlterNote       $08
0008C469 E701                       	dc.b	smpsNoAttack, $01
0008C46B E10C                       	smpsAlterNote       $0C
0008C46D E701                       	dc.b	smpsNoAttack, $01
0008C46F E112                       	smpsAlterNote       $12
0008C471 E701                       	dc.b	smpsNoAttack, $01
0008C473 E113                       	smpsAlterNote       $13
0008C475 E701                       	dc.b	smpsNoAttack, $01
0008C477 E10F                       	smpsAlterNote       $0F
0008C479 E701                       	dc.b	smpsNoAttack, $01
0008C47B E109                       	smpsAlterNote       $09
0008C47D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C481 E10C                       	smpsAlterNote       $0C
0008C483 E701                       	dc.b	smpsNoAttack, $01
0008C485 E112                       	smpsAlterNote       $12
0008C487 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C48B E10C                       	smpsAlterNote       $0C
0008C48D E701                       	dc.b	smpsNoAttack, $01
0008C48F E109                       	smpsAlterNote       $09
0008C491 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C495 E10F                       	smpsAlterNote       $0F
0008C497 E701                       	dc.b	smpsNoAttack, $01
0008C499 E113                       	smpsAlterNote       $13
0008C49B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C49F E10D                       	smpsAlterNote       $0D
0008C4A1 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008C4A7 E10C                       	smpsAlterNote       $0C
0008C4A9 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008C4AD E10D                       	smpsAlterNote       $0D
0008C4AF C201 8001                  	dc.b	nF5, $01, nRst, $01
0008C4B3 E10C                       	smpsAlterNote       $0C
0008C4B5 C102                       	dc.b	nE5, $02
0008C4B7 E10B                       	smpsAlterNote       $0B
0008C4B9 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008C4BD E10C                       	smpsAlterNote       $0C
0008C4BF C101 8001                  	dc.b	nE5, $01, nRst, $01
0008C4C3 E10B                       	smpsAlterNote       $0B
0008C4C5 BF02                       	dc.b	nD5, $02
0008C4C7 E10A                       	smpsAlterNote       $0A
0008C4C9 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008C4D3 E110                       	smpsAlterNote       $10
0008C4D5 BB02                       	dc.b	nBb4, $02
0008C4D7 E10A                       	smpsAlterNote       $0A
0008C4D9 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008C4DD E110                       	smpsAlterNote       $10
0008C4DF BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008C4E3 E10F                       	smpsAlterNote       $0F
0008C4E5 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008C4E9 E110                       	smpsAlterNote       $10
0008C4EB BB02                       	dc.b	nBb4, $02
0008C4ED E10F                       	smpsAlterNote       $0F
0008C4EF BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008C4F9 E10C                       	smpsAlterNote       $0C
0008C4FB B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008C503 E10B                       	smpsAlterNote       $0B
0008C505 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008C509 E10F                       	smpsAlterNote       $0F
0008C50B BA02                       	dc.b	nA4, $02
0008C50F E0C0                       	smpsPan             panCenter, $00
0008C511 E601                       	smpsAlterVol        $01
0008C513 E109                       	smpsAlterNote       $09
0008C515 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008C521 E108                       	smpsAlterNote       $08
0008C523 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008C529 E107                       	smpsAlterNote       $07
0008C52B B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008C531 E109                       	smpsAlterNote       $09
0008C533 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008C537 E108                       	smpsAlterNote       $08
0008C539 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C53D E107                       	smpsAlterNote       $07
0008C53F B302 8001                  	dc.b	nD4, $02, nRst, $01
0008C543 E106                       	smpsAlterNote       $06
0008C545 B103                       	dc.b	nC4, $03
0008C547 E10C                       	smpsAlterNote       $0C
0008C549 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008C54F E080                       	smpsPan             panLeft, $00
0008C551 07                         	dc.b	$07
0008C552 E6FE                       	smpsAlterVol        $FE
0008C554 E10B                       	smpsAlterNote       $0B
0008C556 B20D                       	dc.b	nCs4, $0D
0008C558 E105                       	smpsAlterNote       $05
0008C55A E701                       	dc.b	smpsNoAttack, $01
0008C55C E104                       	smpsAlterNote       $04
0008C55E E701                       	dc.b	smpsNoAttack, $01
0008C560 E108                       	smpsAlterNote       $08
0008C562 E701                       	dc.b	smpsNoAttack, $01
0008C564 E10E                       	smpsAlterNote       $0E
0008C566 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C56A E10B                       	smpsAlterNote       $0B
0008C56C E701                       	dc.b	smpsNoAttack, $01
0008C56E E105                       	smpsAlterNote       $05
0008C570 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C574 E10B                       	smpsAlterNote       $0B
0008C576 E701                       	dc.b	smpsNoAttack, $01
0008C578 E10E                       	smpsAlterNote       $0E
0008C57A E701                       	dc.b	smpsNoAttack, $01
0008C57C E10F                       	smpsAlterNote       $0F
0008C57E 8001                       	dc.b	nRst, $01
0008C580 E10B                       	smpsAlterNote       $0B
0008C582 B30D                       	dc.b	nD4, $0D
0008C584 E105                       	smpsAlterNote       $05
0008C586 E701                       	dc.b	smpsNoAttack, $01
0008C588 E104                       	smpsAlterNote       $04
0008C58A E701                       	dc.b	smpsNoAttack, $01
0008C58C E108                       	smpsAlterNote       $08
0008C58E E701                       	dc.b	smpsNoAttack, $01
0008C590 E10E                       	smpsAlterNote       $0E
0008C592 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C596 E10B                       	smpsAlterNote       $0B
0008C598 E701                       	dc.b	smpsNoAttack, $01
0008C59A E105                       	smpsAlterNote       $05
0008C59C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5A0 E10B                       	smpsAlterNote       $0B
0008C5A2 E701                       	dc.b	smpsNoAttack, $01
0008C5A4 E10E                       	smpsAlterNote       $0E
0008C5A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5AA E108                       	smpsAlterNote       $08
0008C5AC E701                       	dc.b	smpsNoAttack, $01
0008C5AE E104                       	smpsAlterNote       $04
0008C5B0 E701                       	dc.b	smpsNoAttack, $01
0008C5B2 E105                       	smpsAlterNote       $05
0008C5B4 E701                       	dc.b	smpsNoAttack, $01
0008C5B6 E10B                       	smpsAlterNote       $0B
0008C5B8 E701                       	dc.b	smpsNoAttack, $01
0008C5BA E10F                       	smpsAlterNote       $0F
0008C5BC E701                       	dc.b	smpsNoAttack, $01
0008C5BE E10B                       	smpsAlterNote       $0B
0008C5C0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C5C4 E10C                       	smpsAlterNote       $0C
0008C5C6 B50D                       	dc.b	nE4, $0D
0008C5C8 E106                       	smpsAlterNote       $06
0008C5CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5CE E10C                       	smpsAlterNote       $0C
0008C5D0 E701                       	dc.b	smpsNoAttack, $01
0008C5D2 E10F                       	smpsAlterNote       $0F
0008C5D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5D8 E109                       	smpsAlterNote       $09
0008C5DA E701                       	dc.b	smpsNoAttack, $01
0008C5DC E105                       	smpsAlterNote       $05
0008C5DE E701                       	dc.b	smpsNoAttack, $01
0008C5E0 E106                       	smpsAlterNote       $06
0008C5E2 E701                       	dc.b	smpsNoAttack, $01
0008C5E4 E10C                       	smpsAlterNote       $0C
0008C5E6 E701                       	dc.b	smpsNoAttack, $01
0008C5E8 E110                       	smpsAlterNote       $10
0008C5EA E701                       	dc.b	smpsNoAttack, $01
0008C5EC E10B                       	smpsAlterNote       $0B
0008C5EE B30E                       	dc.b	nD4, $0E
0008C5F0 E105                       	smpsAlterNote       $05
0008C5F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5F6 E10B                       	smpsAlterNote       $0B
0008C5F8 E701                       	dc.b	smpsNoAttack, $01
0008C5FA E10E                       	smpsAlterNote       $0E
0008C5FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C600 E108                       	smpsAlterNote       $08
0008C602 E701                       	dc.b	smpsNoAttack, $01
0008C604 E104                       	smpsAlterNote       $04
0008C606 E701                       	dc.b	smpsNoAttack, $01
0008C608 E105                       	smpsAlterNote       $05
0008C60A E701                       	dc.b	smpsNoAttack, $01
0008C60C E10B                       	smpsAlterNote       $0B
0008C60E E701                       	dc.b	smpsNoAttack, $01
0008C610 E10F                       	smpsAlterNote       $0F
0008C612 E701                       	dc.b	smpsNoAttack, $01
0008C614 E10B                       	smpsAlterNote       $0B
0008C616 E701                       	dc.b	smpsNoAttack, $01
0008C618 E108                       	smpsAlterNote       $08
0008C61A E701                       	dc.b	smpsNoAttack, $01
0008C61C E104                       	smpsAlterNote       $04
0008C61E E701                       	dc.b	smpsNoAttack, $01
0008C620 E108                       	smpsAlterNote       $08
0008C622 E701                       	dc.b	smpsNoAttack, $01
0008C624 E10E                       	smpsAlterNote       $0E
0008C626 E701                       	dc.b	smpsNoAttack, $01
0008C628 E10F                       	smpsAlterNote       $0F
0008C62A E701                       	dc.b	smpsNoAttack, $01
0008C62C E10B                       	smpsAlterNote       $0B
0008C62E E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008C632 E108                       	smpsAlterNote       $08
0008C634 E701                       	dc.b	smpsNoAttack, $01
0008C636 E105                       	smpsAlterNote       $05
0008C638 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C63C E10B                       	smpsAlterNote       $0B
0008C63E E701                       	dc.b	smpsNoAttack, $01
0008C640 E10F                       	smpsAlterNote       $0F
0008C642 E701                       	dc.b	smpsNoAttack, $01
0008C644 E10E                       	smpsAlterNote       $0E
0008C646 E701                       	dc.b	smpsNoAttack, $01
0008C648 E108                       	smpsAlterNote       $08
0008C64A E701                       	dc.b	smpsNoAttack, $01
0008C64C E104                       	smpsAlterNote       $04
0008C64E E701                       	dc.b	smpsNoAttack, $01
0008C650 E108                       	smpsAlterNote       $08
0008C652 E701                       	dc.b	smpsNoAttack, $01
0008C654 E10B                       	smpsAlterNote       $0B
0008C656 E701                       	dc.b	smpsNoAttack, $01
0008C658 E10F                       	smpsAlterNote       $0F
0008C65A E701                       	dc.b	smpsNoAttack, $01
0008C65C E10B                       	smpsAlterNote       $0B
0008C65E B30D                       	dc.b	nD4, $0D
0008C660 E108                       	smpsAlterNote       $08
0008C662 E701                       	dc.b	smpsNoAttack, $01
0008C664 E105                       	smpsAlterNote       $05
0008C666 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C66A E10B                       	smpsAlterNote       $0B
0008C66C E701                       	dc.b	smpsNoAttack, $01
0008C66E E10F                       	smpsAlterNote       $0F
0008C670 E701                       	dc.b	smpsNoAttack, $01
0008C672 E10E                       	smpsAlterNote       $0E
0008C674 E701                       	dc.b	smpsNoAttack, $01
0008C676 E108                       	smpsAlterNote       $08
0008C678 E701                       	dc.b	smpsNoAttack, $01
0008C67A E104                       	smpsAlterNote       $04
0008C67C E701                       	dc.b	smpsNoAttack, $01
0008C67E E108                       	smpsAlterNote       $08
0008C680 E701                       	dc.b	smpsNoAttack, $01
0008C682 E10B                       	smpsAlterNote       $0B
0008C684 E701                       	dc.b	smpsNoAttack, $01
0008C686 E10F                       	smpsAlterNote       $0F
0008C688 E701                       	dc.b	smpsNoAttack, $01
0008C68A E10B                       	smpsAlterNote       $0B
0008C68C E701                       	dc.b	smpsNoAttack, $01
0008C68E E105                       	smpsAlterNote       $05
0008C690 E701                       	dc.b	smpsNoAttack, $01
0008C692 E104                       	smpsAlterNote       $04
0008C694 E701                       	dc.b	smpsNoAttack, $01
0008C696 E108                       	smpsAlterNote       $08
0008C698 E701                       	dc.b	smpsNoAttack, $01
0008C69A E10E                       	smpsAlterNote       $0E
0008C69C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C6A0 E10B                       	smpsAlterNote       $0B
0008C6A2 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008C6A6 E108                       	smpsAlterNote       $08
0008C6A8 E701                       	dc.b	smpsNoAttack, $01
0008C6AA E104                       	smpsAlterNote       $04
0008C6AC E701                       	dc.b	smpsNoAttack, $01
0008C6AE E108                       	smpsAlterNote       $08
0008C6B0 E701                       	dc.b	smpsNoAttack, $01
0008C6B2 E10B                       	smpsAlterNote       $0B
0008C6B4 E701                       	dc.b	smpsNoAttack, $01
0008C6B8 E0C0                       	smpsPan             panCenter, $00
0008C6BA E601                       	smpsAlterVol        $01
0008C6BC E108                       	smpsAlterNote       $08
0008C6BE A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008C6CA 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008C6D2 E080                       	smpsPan             panLeft, $00
0008C6D4 07                         	dc.b	$07
0008C6D5 E6FF                       	smpsAlterVol        $FF
0008C6D7 E10D                       	smpsAlterNote       $0D
0008C6D9 B60D                       	dc.b	nF4, $0D
0008C6DB E10A                       	smpsAlterNote       $0A
0008C6DD E701                       	dc.b	smpsNoAttack, $01
0008C6DF E106                       	smpsAlterNote       $06
0008C6E1 E701                       	dc.b	smpsNoAttack, $01
0008C6E3 E10A                       	smpsAlterNote       $0A
0008C6E5 E701                       	dc.b	smpsNoAttack, $01
0008C6E7 E110                       	smpsAlterNote       $10
0008C6E9 E701                       	dc.b	smpsNoAttack, $01
0008C6EB E111                       	smpsAlterNote       $11
0008C6ED E701                       	dc.b	smpsNoAttack, $01
0008C6EF E10D                       	smpsAlterNote       $0D
0008C6F1 E701                       	dc.b	smpsNoAttack, $01
0008C6F3 E107                       	smpsAlterNote       $07
0008C6F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C6F9 E10A                       	smpsAlterNote       $0A
0008C6FB E701                       	dc.b	smpsNoAttack, $01
0008C6FD E110                       	smpsAlterNote       $10
0008C6FF E701                       	dc.b	smpsNoAttack, $01
0008C701 E111                       	smpsAlterNote       $11
0008C703 8001                       	dc.b	nRst, $01
0008C705 E10D                       	smpsAlterNote       $0D
0008C707 B80D                       	dc.b	nG4, $0D
0008C709 E10A                       	smpsAlterNote       $0A
0008C70B E701                       	dc.b	smpsNoAttack, $01
0008C70D E106                       	smpsAlterNote       $06
0008C70F E701                       	dc.b	smpsNoAttack, $01
0008C711 E10A                       	smpsAlterNote       $0A
0008C713 E701                       	dc.b	smpsNoAttack, $01
0008C715 E110                       	smpsAlterNote       $10
0008C717 E701                       	dc.b	smpsNoAttack, $01
0008C719 E111                       	smpsAlterNote       $11
0008C71B E701                       	dc.b	smpsNoAttack, $01
0008C71D E10D                       	smpsAlterNote       $0D
0008C71F E701                       	dc.b	smpsNoAttack, $01
0008C721 E107                       	smpsAlterNote       $07
0008C723 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C727 E10D                       	smpsAlterNote       $0D
0008C729 E701                       	dc.b	smpsNoAttack, $01
0008C72B E110                       	smpsAlterNote       $10
0008C72D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C731 E10A                       	smpsAlterNote       $0A
0008C733 E701                       	dc.b	smpsNoAttack, $01
0008C735 E106                       	smpsAlterNote       $06
0008C737 E701                       	dc.b	smpsNoAttack, $01
0008C739 E107                       	smpsAlterNote       $07
0008C73B E701                       	dc.b	smpsNoAttack, $01
0008C73D E10D                       	smpsAlterNote       $0D
0008C73F E701                       	dc.b	smpsNoAttack, $01
0008C741 E111                       	smpsAlterNote       $11
0008C743 E701                       	dc.b	smpsNoAttack, $01
0008C745 E10D                       	smpsAlterNote       $0D
0008C747 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C74B E10F                       	smpsAlterNote       $0F
0008C74D BA0D                       	dc.b	nA4, $0D
0008C74F E109                       	smpsAlterNote       $09
0008C751 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C755 E10C                       	smpsAlterNote       $0C
0008C757 E701                       	dc.b	smpsNoAttack, $01
0008C759 E112                       	smpsAlterNote       $12
0008C75B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C75F E10C                       	smpsAlterNote       $0C
0008C761 E701                       	dc.b	smpsNoAttack, $01
0008C763 E109                       	smpsAlterNote       $09
0008C765 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C769 E10F                       	smpsAlterNote       $0F
0008C76B E701                       	dc.b	smpsNoAttack, $01
0008C76D E113                       	smpsAlterNote       $13
0008C76F E701                       	dc.b	smpsNoAttack, $01
0008C771 E112                       	smpsAlterNote       $12
0008C773 E701                       	dc.b	smpsNoAttack, $01
0008C775 E10C                       	smpsAlterNote       $0C
0008C777 E701                       	dc.b	smpsNoAttack, $01
0008C779 E108                       	smpsAlterNote       $08
0008C77B E701                       	dc.b	smpsNoAttack, $01
0008C77D E10C                       	smpsAlterNote       $0C
0008C77F E701                       	dc.b	smpsNoAttack, $01
0008C781 E10F                       	smpsAlterNote       $0F
0008C783 E701                       	dc.b	smpsNoAttack, $01
0008C785 E113                       	smpsAlterNote       $13
0008C787 E701                       	dc.b	smpsNoAttack, $01
0008C789 E10F                       	smpsAlterNote       $0F
0008C78B E701                       	dc.b	smpsNoAttack, $01
0008C78D E109                       	smpsAlterNote       $09
0008C78F E701                       	dc.b	smpsNoAttack, $01
0008C791 E108                       	smpsAlterNote       $08
0008C793 E701                       	dc.b	smpsNoAttack, $01
0008C795 E10C                       	smpsAlterNote       $0C
0008C797 E701                       	dc.b	smpsNoAttack, $01
0008C799 E112                       	smpsAlterNote       $12
0008C79B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C79F E10F                       	smpsAlterNote       $0F
0008C7A1 E701                       	dc.b	smpsNoAttack, $01
0008C7A3 E109                       	smpsAlterNote       $09
0008C7A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7A9 E10F                       	smpsAlterNote       $0F
0008C7AB E701                       	dc.b	smpsNoAttack, $01
0008C7AD E112                       	smpsAlterNote       $12
0008C7AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7B3 E10C                       	smpsAlterNote       $0C
0008C7B5 E701                       	dc.b	smpsNoAttack, $01
0008C7B7 E108                       	smpsAlterNote       $08
0008C7B9 E701                       	dc.b	smpsNoAttack, $01
0008C7BB E109                       	smpsAlterNote       $09
0008C7BD E701                       	dc.b	smpsNoAttack, $01
0008C7BF E10C                       	smpsAlterNote       $0C
0008C7C1 B50A                       	dc.b	nE4, $0A
0008C7C3 E10D                       	smpsAlterNote       $0D
0008C7C5 B60E                       	dc.b	nF4, $0E
0008C7C7 E107                       	smpsAlterNote       $07
0008C7C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7CD E10D                       	smpsAlterNote       $0D
0008C7CF E701                       	dc.b	smpsNoAttack, $01
0008C7D1 E110                       	smpsAlterNote       $10
0008C7D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7D7 E10A                       	smpsAlterNote       $0A
0008C7D9 E701                       	dc.b	smpsNoAttack, $01
0008C7DB E106                       	smpsAlterNote       $06
0008C7DD E701                       	dc.b	smpsNoAttack, $01
0008C7DF E107                       	smpsAlterNote       $07
0008C7E1 E701                       	dc.b	smpsNoAttack, $01
0008C7E3 E10D                       	smpsAlterNote       $0D
0008C7E5 E701                       	dc.b	smpsNoAttack, $01
0008C7E7 E111                       	smpsAlterNote       $11
0008C7E9 E701                       	dc.b	smpsNoAttack, $01
0008C7EB E10D                       	smpsAlterNote       $0D
0008C7ED B80D                       	dc.b	nG4, $0D
0008C7EF E10A                       	smpsAlterNote       $0A
0008C7F1 E701                       	dc.b	smpsNoAttack, $01
0008C7F3 E107                       	smpsAlterNote       $07
0008C7F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7F9 E10D                       	smpsAlterNote       $0D
0008C7FB E701                       	dc.b	smpsNoAttack, $01
0008C7FD E111                       	smpsAlterNote       $11
0008C7FF E701                       	dc.b	smpsNoAttack, $01
0008C801 E110                       	smpsAlterNote       $10
0008C803 E701                       	dc.b	smpsNoAttack, $01
0008C805 E10A                       	smpsAlterNote       $0A
0008C807 E701                       	dc.b	smpsNoAttack, $01
0008C809 E106                       	smpsAlterNote       $06
0008C80B E701                       	dc.b	smpsNoAttack, $01
0008C80D E10A                       	smpsAlterNote       $0A
0008C80F E701                       	dc.b	smpsNoAttack, $01
0008C811 E10D                       	smpsAlterNote       $0D
0008C813 E701                       	dc.b	smpsNoAttack, $01
0008C815 E111                       	smpsAlterNote       $11
0008C817 E701                       	dc.b	smpsNoAttack, $01
0008C819 E10D                       	smpsAlterNote       $0D
0008C81B E701                       	dc.b	smpsNoAttack, $01
0008C81D E107                       	smpsAlterNote       $07
0008C81F E701                       	dc.b	smpsNoAttack, $01
0008C821 E106                       	smpsAlterNote       $06
0008C823 E701                       	dc.b	smpsNoAttack, $01
0008C825 E10A                       	smpsAlterNote       $0A
0008C827 E701                       	dc.b	smpsNoAttack, $01
0008C829 E110                       	smpsAlterNote       $10
0008C82B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C82F E10D                       	smpsAlterNote       $0D
0008C831 E701                       	dc.b	smpsNoAttack, $01
0008C833 E10F                       	smpsAlterNote       $0F
0008C835 BA0D                       	dc.b	nA4, $0D
0008C837 E10C                       	smpsAlterNote       $0C
0008C839 E701                       	dc.b	smpsNoAttack, $01
0008C83B E108                       	smpsAlterNote       $08
0008C83D E701                       	dc.b	smpsNoAttack, $01
0008C83F E109                       	smpsAlterNote       $09
0008C841 E701                       	dc.b	smpsNoAttack, $01
0008C843 E10F                       	smpsAlterNote       $0F
0008C845 E701                       	dc.b	smpsNoAttack, $01
0008C847 E113                       	smpsAlterNote       $13
0008C849 E701                       	dc.b	smpsNoAttack, $01
0008C84B E10F                       	smpsAlterNote       $0F
0008C84D E701                       	dc.b	smpsNoAttack, $01
0008C84F E10C                       	smpsAlterNote       $0C
0008C851 E701                       	dc.b	smpsNoAttack, $01
0008C853 E108                       	smpsAlterNote       $08
0008C855 E701                       	dc.b	smpsNoAttack, $01
0008C857 E10C                       	smpsAlterNote       $0C
0008C859 E701                       	dc.b	smpsNoAttack, $01
0008C85B E112                       	smpsAlterNote       $12
0008C85D E701                       	dc.b	smpsNoAttack, $01
0008C85F E113                       	smpsAlterNote       $13
0008C861 E701                       	dc.b	smpsNoAttack, $01
0008C863 E10F                       	smpsAlterNote       $0F
0008C865 E701                       	dc.b	smpsNoAttack, $01
0008C867 E109                       	smpsAlterNote       $09
0008C869 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C86D E10C                       	smpsAlterNote       $0C
0008C86F E701                       	dc.b	smpsNoAttack, $01
0008C871 E112                       	smpsAlterNote       $12
0008C873 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C877 E10C                       	smpsAlterNote       $0C
0008C879 E701                       	dc.b	smpsNoAttack, $01
0008C87B E109                       	smpsAlterNote       $09
0008C87D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C881 E10F                       	smpsAlterNote       $0F
0008C883 E701                       	dc.b	smpsNoAttack, $01
0008C885 E113                       	smpsAlterNote       $13
0008C887 E701                       	dc.b	smpsNoAttack, $01
0008C889 E112                       	smpsAlterNote       $12
0008C88B E701                       	dc.b	smpsNoAttack, $01
0008C88D E10C                       	smpsAlterNote       $0C
0008C88F E701                       	dc.b	smpsNoAttack, $01
0008C891 E109                       	smpsAlterNote       $09
0008C893 8001                       	dc.b	nRst, $01
0008C895 E10D                       	smpsAlterNote       $0D
0008C897 B60A                       	dc.b	nF4, $0A
0008C899 E10C                       	smpsAlterNote       $0C
0008C89B B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C89F E10B                       	smpsAlterNote       $0B
0008C8A1 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008C8A5 E10C                       	smpsAlterNote       $0C
0008C8A7 B503                       	dc.b	nE4, $03
0008C8A9 E10D                       	smpsAlterNote       $0D
0008C8AB B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008C8B5 E10C                       	smpsAlterNote       $0C
0008C8B7 E701                       	dc.b	smpsNoAttack, $01
0008C8B9 E108                       	smpsAlterNote       $08
0008C8BB E701                       	dc.b	smpsNoAttack, $01
0008C8BD E10C                       	smpsAlterNote       $0C
0008C8BF E701                       	dc.b	smpsNoAttack, $01
0008C8C1 E112                       	smpsAlterNote       $12
0008C8C3 E701                       	dc.b	smpsNoAttack, $01
0008C8C5 E113                       	smpsAlterNote       $13
0008C8C7 E701                       	dc.b	smpsNoAttack, $01
0008C8C9 E10F                       	smpsAlterNote       $0F
0008C8CB E701                       	dc.b	smpsNoAttack, $01
0008C8CD E109                       	smpsAlterNote       $09
0008C8CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C8D3 E10C                       	smpsAlterNote       $0C
0008C8D5 E701                       	dc.b	smpsNoAttack, $01
0008C8D7 E112                       	smpsAlterNote       $12
0008C8D9 E701                       	dc.b	smpsNoAttack, $01
0008C8DB E113                       	smpsAlterNote       $13
0008C8DD 8001                       	dc.b	nRst, $01
0008C8DF E10D                       	smpsAlterNote       $0D
0008C8E1 C20D                       	dc.b	nF5, $0D
0008C8E3 E10A                       	smpsAlterNote       $0A
0008C8E5 E701                       	dc.b	smpsNoAttack, $01
0008C8E7 E106                       	smpsAlterNote       $06
0008C8E9 E701                       	dc.b	smpsNoAttack, $01
0008C8EB E10A                       	smpsAlterNote       $0A
0008C8ED E701                       	dc.b	smpsNoAttack, $01
0008C8EF E110                       	smpsAlterNote       $10
0008C8F1 E701                       	dc.b	smpsNoAttack, $01
0008C8F3 E111                       	smpsAlterNote       $11
0008C8F5 E701                       	dc.b	smpsNoAttack, $01
0008C8F7 E10D                       	smpsAlterNote       $0D
0008C8F9 E701                       	dc.b	smpsNoAttack, $01
0008C8FB E107                       	smpsAlterNote       $07
0008C8FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C901 E10A                       	smpsAlterNote       $0A
0008C903 E701                       	dc.b	smpsNoAttack, $01
0008C905 E110                       	smpsAlterNote       $10
0008C907 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C90B E10A                       	smpsAlterNote       $0A
0008C90D E701                       	dc.b	smpsNoAttack, $01
0008C90F E107                       	smpsAlterNote       $07
0008C911 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C915 E10D                       	smpsAlterNote       $0D
0008C917 E701                       	dc.b	smpsNoAttack, $01
0008C919 E111                       	smpsAlterNote       $11
0008C91B E701                       	dc.b	smpsNoAttack, $01
0008C91D E110                       	smpsAlterNote       $10
0008C91F E701                       	dc.b	smpsNoAttack, $01
0008C921 E10A                       	smpsAlterNote       $0A
0008C923 E701                       	dc.b	smpsNoAttack, $01
0008C925 E106                       	smpsAlterNote       $06
0008C927 E701                       	dc.b	smpsNoAttack, $01
0008C929 E10A                       	smpsAlterNote       $0A
0008C92B E701                       	dc.b	smpsNoAttack, $01
0008C92D E10D                       	smpsAlterNote       $0D
0008C92F E701                       	dc.b	smpsNoAttack, $01
0008C931 E111                       	smpsAlterNote       $11
0008C933 E701                       	dc.b	smpsNoAttack, $01
0008C935 E10D                       	smpsAlterNote       $0D
0008C937 E701                       	dc.b	smpsNoAttack, $01
0008C939 E107                       	smpsAlterNote       $07
0008C93B E701                       	dc.b	smpsNoAttack, $01
0008C93D E106                       	smpsAlterNote       $06
0008C93F E701                       	dc.b	smpsNoAttack, $01
0008C941 E10A                       	smpsAlterNote       $0A
0008C943 E701                       	dc.b	smpsNoAttack, $01
0008C945 E110                       	smpsAlterNote       $10
0008C947 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C94B E10D                       	smpsAlterNote       $0D
0008C94D E701                       	dc.b	smpsNoAttack, $01
0008C94F E107                       	smpsAlterNote       $07
0008C951 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C955 E10D                       	smpsAlterNote       $0D
0008C957 E701                       	dc.b	smpsNoAttack, $01
0008C959 E110                       	smpsAlterNote       $10
0008C95B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C95F E10A                       	smpsAlterNote       $0A
0008C961 E701                       	dc.b	smpsNoAttack, $01
0008C963 E106                       	smpsAlterNote       $06
0008C965 E701                       	dc.b	smpsNoAttack, $01
0008C967 E107                       	smpsAlterNote       $07
0008C969 E701                       	dc.b	smpsNoAttack, $01
0008C96B E10D                       	smpsAlterNote       $0D
0008C96D E701                       	dc.b	smpsNoAttack, $01
0008C96F E111                       	smpsAlterNote       $11
0008C971 E701                       	dc.b	smpsNoAttack, $01
0008C973 E10D                       	smpsAlterNote       $0D
0008C975 E701                       	dc.b	smpsNoAttack, $01
0008C977 E10A                       	smpsAlterNote       $0A
0008C979 E701                       	dc.b	smpsNoAttack, $01
0008C97B E107                       	smpsAlterNote       $07
0008C97D 8001                       	dc.b	nRst, $01
0008C97F E10D                       	smpsAlterNote       $0D
0008C981 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008C987 E601                       	smpsAlterVol        $01
0008C989 E110                       	smpsAlterNote       $10
0008C98B BB0D                       	dc.b	nBb4, $0D
0008C98D E10A                       	smpsAlterNote       $0A
0008C98F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C993 E110                       	smpsAlterNote       $10
0008C995 E701                       	dc.b	smpsNoAttack, $01
0008C997 E113                       	smpsAlterNote       $13
0008C999 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C99D E10D                       	smpsAlterNote       $0D
0008C99F E701                       	dc.b	smpsNoAttack, $01
0008C9A1 E109                       	smpsAlterNote       $09
0008C9A3 E701                       	dc.b	smpsNoAttack, $01
0008C9A5 E10A                       	smpsAlterNote       $0A
0008C9A7 E701                       	dc.b	smpsNoAttack, $01
0008C9A9 E110                       	smpsAlterNote       $10
0008C9AB E701                       	dc.b	smpsNoAttack, $01
0008C9AD E114                       	smpsAlterNote       $14
0008C9AF E701                       	dc.b	smpsNoAttack, $01
0008C9B1 E110                       	smpsAlterNote       $10
0008C9B3 E701                       	dc.b	smpsNoAttack, $01
0008C9B5 E10D                       	smpsAlterNote       $0D
0008C9B7 E701                       	dc.b	smpsNoAttack, $01
0008C9B9 E109                       	smpsAlterNote       $09
0008C9BB E701                       	dc.b	smpsNoAttack, $01
0008C9BD E10A                       	smpsAlterNote       $0A
0008C9BF 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008C9C3 E107                       	smpsAlterNote       $07
0008C9C5 E701                       	dc.b	smpsNoAttack, $01
0008C9C7 E103                       	smpsAlterNote       $03
0008C9C9 E701                       	dc.b	smpsNoAttack, $01
0008C9CB E107                       	smpsAlterNote       $07
0008C9CD E701                       	dc.b	smpsNoAttack, $01
0008C9CF E10D                       	smpsAlterNote       $0D
0008C9D1 E701                       	dc.b	smpsNoAttack, $01
0008C9D3 E10E                       	smpsAlterNote       $0E
0008C9D5 E701                       	dc.b	smpsNoAttack, $01
0008C9D7 E10A                       	smpsAlterNote       $0A
0008C9D9 E701                       	dc.b	smpsNoAttack, $01
0008C9DB E104                       	smpsAlterNote       $04
0008C9DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9E1 E107                       	smpsAlterNote       $07
0008C9E3 E701                       	dc.b	smpsNoAttack, $01
0008C9E5 E10D                       	smpsAlterNote       $0D
0008C9E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9EB E107                       	smpsAlterNote       $07
0008C9ED E701                       	dc.b	smpsNoAttack, $01
0008C9EF E104                       	smpsAlterNote       $04
0008C9F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9F5 E10B                       	smpsAlterNote       $0B
0008C9F7 BF0D                       	dc.b	nD5, $0D
0008C9F9 E108                       	smpsAlterNote       $08
0008C9FB E701                       	dc.b	smpsNoAttack, $01
0008C9FD E105                       	smpsAlterNote       $05
0008C9FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA03 E10B                       	smpsAlterNote       $0B
0008CA05 E701                       	dc.b	smpsNoAttack, $01
0008CA07 E10F                       	smpsAlterNote       $0F
0008CA09 E701                       	dc.b	smpsNoAttack, $01
0008CA0B E10E                       	smpsAlterNote       $0E
0008CA0D E701                       	dc.b	smpsNoAttack, $01
0008CA0F E108                       	smpsAlterNote       $08
0008CA11 E701                       	dc.b	smpsNoAttack, $01
0008CA13 E104                       	smpsAlterNote       $04
0008CA15 E701                       	dc.b	smpsNoAttack, $01
0008CA17 E108                       	smpsAlterNote       $08
0008CA19 E701                       	dc.b	smpsNoAttack, $01
0008CA1B E10B                       	smpsAlterNote       $0B
0008CA1D E701                       	dc.b	smpsNoAttack, $01
0008CA1F E10F                       	smpsAlterNote       $0F
0008CA21 E701                       	dc.b	smpsNoAttack, $01
0008CA23 E10B                       	smpsAlterNote       $0B
0008CA25 E701                       	dc.b	smpsNoAttack, $01
0008CA27 E105                       	smpsAlterNote       $05
0008CA29 E701                       	dc.b	smpsNoAttack, $01
0008CA2B E104                       	smpsAlterNote       $04
0008CA2D E701                       	dc.b	smpsNoAttack, $01
0008CA2F E105                       	smpsAlterNote       $05
0008CA31 8001                       	dc.b	nRst, $01
0008CA33 E10C                       	smpsAlterNote       $0C
0008CA35 C10C                       	dc.b	nE5, $0C
0008CA37 E10D                       	smpsAlterNote       $0D
0008CA39 C201                       	dc.b	nF5, $01
0008CA3B E10E                       	smpsAlterNote       $0E
0008CA3D C301 8001                  	dc.b	nFs5, $01, nRst, $01
0008CA41 E10D                       	smpsAlterNote       $0D
0008CA43 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008CA47 E10A                       	smpsAlterNote       $0A
0008CA49 E701                       	dc.b	smpsNoAttack, $01
0008CA4B E106                       	smpsAlterNote       $06
0008CA4D E701                       	dc.b	smpsNoAttack, $01
0008CA4F E10A                       	smpsAlterNote       $0A
0008CA51 E701                       	dc.b	smpsNoAttack, $01
0008CA53 E10D                       	smpsAlterNote       $0D
0008CA55 E701                       	dc.b	smpsNoAttack, $01
0008CA57 E111                       	smpsAlterNote       $11
0008CA59 E701                       	dc.b	smpsNoAttack, $01
0008CA5B E10D                       	smpsAlterNote       $0D
0008CA5D E701                       	dc.b	smpsNoAttack, $01
0008CA5F E107                       	smpsAlterNote       $07
0008CA61 E701                       	dc.b	smpsNoAttack, $01
0008CA63 E106                       	smpsAlterNote       $06
0008CA65 E701                       	dc.b	smpsNoAttack, $01
0008CA67 E10A                       	smpsAlterNote       $0A
0008CA69 E701                       	dc.b	smpsNoAttack, $01
0008CA6B E110                       	smpsAlterNote       $10
0008CA6D E701                       	dc.b	smpsNoAttack, $01
0008CA6F E111                       	smpsAlterNote       $11
0008CA71 8001                       	dc.b	nRst, $01
0008CA73 E10D                       	smpsAlterNote       $0D
0008CA75 C40D                       	dc.b	nG5, $0D
0008CA77 E10A                       	smpsAlterNote       $0A
0008CA79 E701                       	dc.b	smpsNoAttack, $01
0008CA7B E106                       	smpsAlterNote       $06
0008CA7D E701                       	dc.b	smpsNoAttack, $01
0008CA7F E10A                       	smpsAlterNote       $0A
0008CA81 E701                       	dc.b	smpsNoAttack, $01
0008CA83 E10D                       	smpsAlterNote       $0D
0008CA85 E701                       	dc.b	smpsNoAttack, $01
0008CA87 E10C                       	smpsAlterNote       $0C
0008CA89 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008CA95 8001                       	dc.b	nRst, $01
0008CA97 E10D                       	smpsAlterNote       $0D
0008CA99 C20D                       	dc.b	nF5, $0D
0008CA9B E10A                       	smpsAlterNote       $0A
0008CA9D E701                       	dc.b	smpsNoAttack, $01
0008CA9F E106                       	smpsAlterNote       $06
0008CAA1 E701                       	dc.b	smpsNoAttack, $01
0008CAA3 E10A                       	smpsAlterNote       $0A
0008CAA5 E701                       	dc.b	smpsNoAttack, $01
0008CAA7 E110                       	smpsAlterNote       $10
0008CAA9 E701                       	dc.b	smpsNoAttack, $01
0008CAAB E111                       	smpsAlterNote       $11
0008CAAD E701                       	dc.b	smpsNoAttack, $01
0008CAAF E10D                       	smpsAlterNote       $0D
0008CAB1 E701                       	dc.b	smpsNoAttack, $01
0008CAB3 E107                       	smpsAlterNote       $07
0008CAB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAB9 E10A                       	smpsAlterNote       $0A
0008CABB E701                       	dc.b	smpsNoAttack, $01
0008CABD E110                       	smpsAlterNote       $10
0008CABF E701                       	dc.b	smpsNoAttack, $01
0008CAC1 E111                       	smpsAlterNote       $11
0008CAC3 8001                       	dc.b	nRst, $01
0008CAC5 E10F                       	smpsAlterNote       $0F
0008CAC7 C60A                       	dc.b	nA5, $0A
0008CAC9 E10D                       	smpsAlterNote       $0D
0008CACB C406 8001                  	dc.b	nG5, $06, nRst, $01
0008CACF E10C                       	smpsAlterNote       $0C
0008CAD1 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008CADD 8001                       	dc.b	nRst, $01
0008CADF E10D                       	smpsAlterNote       $0D
0008CAE1 C20D                       	dc.b	nF5, $0D
0008CAE3 E107                       	smpsAlterNote       $07
0008CAE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAE9 E10A                       	smpsAlterNote       $0A
0008CAEB E701                       	dc.b	smpsNoAttack, $01
0008CAED E110                       	smpsAlterNote       $10
0008CAEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAF3 E10A                       	smpsAlterNote       $0A
0008CAF5 E701                       	dc.b	smpsNoAttack, $01
0008CAF7 E107                       	smpsAlterNote       $07
0008CAF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAFD E10D                       	smpsAlterNote       $0D
0008CAFF E701                       	dc.b	smpsNoAttack, $01
0008CB01 E111                       	smpsAlterNote       $11
0008CB03 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CB07 E10D                       	smpsAlterNote       $0D
0008CB09 C40D                       	dc.b	nG5, $0D
0008CB0B E107                       	smpsAlterNote       $07
0008CB0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB11 E10A                       	smpsAlterNote       $0A
0008CB13 E701                       	dc.b	smpsNoAttack, $01
0008CB15 E10D                       	smpsAlterNote       $0D
0008CB17 8001                       	dc.b	nRst, $01
0008CB19 E10C                       	smpsAlterNote       $0C
0008CB1B C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008CB27 E10D                       	smpsAlterNote       $0D
0008CB29 C20E                       	dc.b	nF5, $0E
0008CB2B E107                       	smpsAlterNote       $07
0008CB2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB31 E10D                       	smpsAlterNote       $0D
0008CB33 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CB39 E0C0                       	smpsPan             panCenter, $00
0008CB3B E603                       	smpsAlterVol        $03
0008CB3D E108                       	smpsAlterNote       $08
0008CB3F B406                       	dc.b	nEb4, $06
0008CB41 E10C                       	smpsAlterNote       $0C
0008CB43 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008CB47 E108                       	smpsAlterNote       $08
0008CB49 B403                       	dc.b	nEb4, $03
0008CB4B E109                       	smpsAlterNote       $09
0008CB4D B803 8001                  	dc.b	nG4, $03, nRst, $01
0008CB51 E10C                       	smpsAlterNote       $0C
0008CB53 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0008CB5B 03                         	dc.b	$03
0008CB5C E6FD                       	smpsAlterVol        $FD
0008CB5E F6F1 F4                    	smpsJump            music84_Jump00
0008CB61                            
0008CB61                            ; PSG1 Data
0008CB61                            music84_PSG1:
0008CB61 E1FD                       	smpsAlterNote       $FD
0008CB63 EC04                       	smpsPSGAlterVol     $04
0008CB65 9203                       	dc.b	nF1, $03
0008CB67 E1FE                       	smpsAlterNote       $FE
0008CB69 9603                       	dc.b	nA1, $03
0008CB6B EC04                       	smpsPSGAlterVol     $04
0008CB6D E701                       	dc.b	smpsNoAttack, $01
0008CB6F E1FF                       	smpsAlterNote       $FF
0008CB71 ECFC                       	smpsPSGAlterVol     $FC
0008CB73 9B03                       	dc.b	nD2, $03
0008CB75 E1FD                       	smpsAlterNote       $FD
0008CB77 9403                       	dc.b	nG1, $03
0008CB79 EC04                       	smpsPSGAlterVol     $04
0008CB7B E701                       	dc.b	smpsNoAttack, $01
0008CB7D E1FE                       	smpsAlterNote       $FE
0008CB7F ECFC                       	smpsPSGAlterVol     $FC
0008CB81 9703                       	dc.b	nBb1, $03
0008CB83 E1FF                       	smpsAlterNote       $FF
0008CB85 9B03                       	dc.b	nD2, $03
0008CB87 EC04                       	smpsPSGAlterVol     $04
0008CB89 E701                       	dc.b	smpsNoAttack, $01
0008CB8B E1FE                       	smpsAlterNote       $FE
0008CB8D ECFC                       	smpsPSGAlterVol     $FC
0008CB8F A002                       	dc.b	nG2, $02
0008CB91 EC04                       	smpsPSGAlterVol     $04
0008CB93 E701                       	dc.b	smpsNoAttack, $01
0008CB95 E1FF                       	smpsAlterNote       $FF
0008CB97 ECFC                       	smpsPSGAlterVol     $FC
0008CB99 A203                       	dc.b	nA2, $03
0008CB9B EC0B                       	smpsPSGAlterVol     $0B
0008CB9D 800A                       	dc.b	nRst, $0A
0008CB9F E105                       	smpsAlterNote       $05
0008CBA1 01                         	dc.b	$01
0008CBA2 E1FC                       	smpsAlterNote       $FC
0008CBA4 01                         	dc.b	$01
0008CBA5 E105                       	smpsAlterNote       $05
0008CBA7 01                         	dc.b	$01
0008CBA8 E1FD                       	smpsAlterNote       $FD
0008CBAA 01                         	dc.b	$01
0008CBAB E105                       	smpsAlterNote       $05
0008CBAD 01                         	dc.b	$01
0008CBAE E1FD                       	smpsAlterNote       $FD
0008CBB0 01                         	dc.b	$01
0008CBB1 E1FA                       	smpsAlterNote       $FA
0008CBB3 01                         	dc.b	$01
0008CBB4 E1FC                       	smpsAlterNote       $FC
0008CBB6 01                         	dc.b	$01
0008CBB7 E105                       	smpsAlterNote       $05
0008CBB9 01                         	dc.b	$01
0008CBBA E108                       	smpsAlterNote       $08
0008CBBC 0101                       	dc.b	$01, $01
0008CBBE E105                       	smpsAlterNote       $05
0008CBC0 01                         	dc.b	$01
0008CBC1 E1FA                       	smpsAlterNote       $FA
0008CBC3 0101                       	dc.b	$01, $01
0008CBC5 E1FD                       	smpsAlterNote       $FD
0008CBC7 01                         	dc.b	$01
0008CBC8 E105                       	smpsAlterNote       $05
0008CBCA 01                         	dc.b	$01
0008CBCB E108                       	smpsAlterNote       $08
0008CBCD 01                         	dc.b	$01
0008CBCE E105                       	smpsAlterNote       $05
0008CBD0 01                         	dc.b	$01
0008CBD1 E1FC                       	smpsAlterNote       $FC
0008CBD3 01                         	dc.b	$01
0008CBD4 E105                       	smpsAlterNote       $05
0008CBD6 01                         	dc.b	$01
0008CBD7 E1FD                       	smpsAlterNote       $FD
0008CBD9 01                         	dc.b	$01
0008CBDA                            
0008CBDA                            music84_Jump07:
0008CBDA E105                       	smpsAlterNote       $05
0008CBDC 8001                       	dc.b	nRst, $01
0008CBDE E1FD                       	smpsAlterNote       $FD
0008CBE0 01                         	dc.b	$01
0008CBE1 E1FA                       	smpsAlterNote       $FA
0008CBE3 01                         	dc.b	$01
0008CBE4 E1FC                       	smpsAlterNote       $FC
0008CBE6 01                         	dc.b	$01
0008CBE7 E1FD                       	smpsAlterNote       $FD
0008CBE9 ECF5                       	smpsPSGAlterVol     $F5
0008CBEB 9206                       	dc.b	nF1, $06
0008CBED EC04                       	smpsPSGAlterVol     $04
0008CBEF E701                       	dc.b	smpsNoAttack, $01
0008CBF1 EC07                       	smpsPSGAlterVol     $07
0008CBF3 8003                       	dc.b	nRst, $03
0008CBF5 ECF5                       	smpsPSGAlterVol     $F5
0008CBF7 9206                       	dc.b	nF1, $06
0008CBF9 EC04                       	smpsPSGAlterVol     $04
0008CBFB E701                       	dc.b	smpsNoAttack, $01
0008CBFD EC07                       	smpsPSGAlterVol     $07
0008CBFF 8006                       	dc.b	nRst, $06
0008CC01 E100                       	smpsAlterNote       $00
0008CC03 01                         	dc.b	$01
0008CC04 E104                       	smpsAlterNote       $04
0008CC06 01                         	dc.b	$01
0008CC07 E100                       	smpsAlterNote       $00
0008CC09 01                         	dc.b	$01
0008CC0A E1FB                       	smpsAlterNote       $FB
0008CC0C 01                         	dc.b	$01
0008CC0D E1FD                       	smpsAlterNote       $FD
0008CC0F ECF5                       	smpsPSGAlterVol     $F5
0008CC11 9406                       	dc.b	nG1, $06
0008CC13 EC04                       	smpsPSGAlterVol     $04
0008CC15 E701                       	dc.b	smpsNoAttack, $01
0008CC17 EC07                       	smpsPSGAlterVol     $07
0008CC19 8003                       	dc.b	nRst, $03
0008CC1B ECF5                       	smpsPSGAlterVol     $F5
0008CC1D 9407                       	dc.b	nG1, $07
0008CC1F EC0B                       	smpsPSGAlterVol     $0B
0008CC21 8006                       	dc.b	nRst, $06
0008CC23 E100                       	smpsAlterNote       $00
0008CC25 01                         	dc.b	$01
0008CC26 E103                       	smpsAlterNote       $03
0008CC28 0101                       	dc.b	$01, $01
0008CC2A E1FD                       	smpsAlterNote       $FD
0008CC2C 01                         	dc.b	$01
0008CC2D ECF5                       	smpsPSGAlterVol     $F5
0008CC2F 9207                       	dc.b	nF1, $07
0008CC31 EC0B                       	smpsPSGAlterVol     $0B
0008CC33 8004                       	dc.b	nRst, $04
0008CC35 ECF5                       	smpsPSGAlterVol     $F5
0008CC37 9206                       	dc.b	nF1, $06
0008CC39 EC04                       	smpsPSGAlterVol     $04
0008CC3B E701                       	dc.b	smpsNoAttack, $01
0008CC3D EC07                       	smpsPSGAlterVol     $07
0008CC3F 8006                       	dc.b	nRst, $06
0008CC41 E103                       	smpsAlterNote       $03
0008CC43 01                         	dc.b	$01
0008CC44 E104                       	smpsAlterNote       $04
0008CC46 01                         	dc.b	$01
0008CC47 E100                       	smpsAlterNote       $00
0008CC49 01                         	dc.b	$01
0008CC4A E1FA                       	smpsAlterNote       $FA
0008CC4C 01                         	dc.b	$01
0008CC4D E1FD                       	smpsAlterNote       $FD
0008CC4F ECF5                       	smpsPSGAlterVol     $F5
0008CC51 9206                       	dc.b	nF1, $06
0008CC53 EC04                       	smpsPSGAlterVol     $04
0008CC55 E701                       	dc.b	smpsNoAttack, $01
0008CC57 EC07                       	smpsPSGAlterVol     $07
0008CC59 8003                       	dc.b	nRst, $03
0008CC5B ECF5                       	smpsPSGAlterVol     $F5
0008CC5D 9106                       	dc.b	nE1, $06
0008CC5F EC04                       	smpsPSGAlterVol     $04
0008CC61 E701                       	dc.b	smpsNoAttack, $01
0008CC63 EC07                       	smpsPSGAlterVol     $07
0008CC65 8006                       	dc.b	nRst, $06
0008CC67 E100                       	smpsAlterNote       $00
0008CC69 01                         	dc.b	$01
0008CC6A E104                       	smpsAlterNote       $04
0008CC6C 01                         	dc.b	$01
0008CC6D E100                       	smpsAlterNote       $00
0008CC6F 01                         	dc.b	$01
0008CC70 E1FD                       	smpsAlterNote       $FD
0008CC72 01                         	dc.b	$01
0008CC73 ECF5                       	smpsPSGAlterVol     $F5
0008CC75 9206                       	dc.b	nF1, $06
0008CC77 EC04                       	smpsPSGAlterVol     $04
0008CC79 E701                       	dc.b	smpsNoAttack, $01
0008CC7B EC07                       	smpsPSGAlterVol     $07
0008CC7D 8003                       	dc.b	nRst, $03
0008CC7F ECF5                       	smpsPSGAlterVol     $F5
0008CC81 9207                       	dc.b	nF1, $07
0008CC83 EC0B                       	smpsPSGAlterVol     $0B
0008CC85 8007                       	dc.b	nRst, $07
0008CC87 E103                       	smpsAlterNote       $03
0008CC89 0101                       	dc.b	$01, $01
0008CC8B E1FD                       	smpsAlterNote       $FD
0008CC8D 01                         	dc.b	$01
0008CC8E E1FB                       	smpsAlterNote       $FB
0008CC90 01                         	dc.b	$01
0008CC91 E1FD                       	smpsAlterNote       $FD
0008CC93 ECF5                       	smpsPSGAlterVol     $F5
0008CC95 9406                       	dc.b	nG1, $06
0008CC97 EC0B                       	smpsPSGAlterVol     $0B
0008CC99 8004                       	dc.b	nRst, $04
0008CC9B ECF5                       	smpsPSGAlterVol     $F5
0008CC9D 9406                       	dc.b	nG1, $06
0008CC9F EC04                       	smpsPSGAlterVol     $04
0008CCA1 E701                       	dc.b	smpsNoAttack, $01
0008CCA3 EC07                       	smpsPSGAlterVol     $07
0008CCA5 8006                       	dc.b	nRst, $06
0008CCA7 E100                       	smpsAlterNote       $00
0008CCA9 01                         	dc.b	$01
0008CCAA E104                       	smpsAlterNote       $04
0008CCAC 01                         	dc.b	$01
0008CCAD E100                       	smpsAlterNote       $00
0008CCAF 01                         	dc.b	$01
0008CCB0 E1F9                       	smpsAlterNote       $F9
0008CCB2 01                         	dc.b	$01
0008CCB3 E1FD                       	smpsAlterNote       $FD
0008CCB5 ECF5                       	smpsPSGAlterVol     $F5
0008CCB7 9206                       	dc.b	nF1, $06
0008CCB9 EC04                       	smpsPSGAlterVol     $04
0008CCBB E701                       	dc.b	smpsNoAttack, $01
0008CCBD EC07                       	smpsPSGAlterVol     $07
0008CCBF 8003                       	dc.b	nRst, $03
0008CCC1 ECF5                       	smpsPSGAlterVol     $F5
0008CCC3 9207                       	dc.b	nF1, $07
0008CCC5 EC0B                       	smpsPSGAlterVol     $0B
0008CCC7 8006                       	dc.b	nRst, $06
0008CCC9 E100                       	smpsAlterNote       $00
0008CCCB 01                         	dc.b	$01
0008CCCC E104                       	smpsAlterNote       $04
0008CCCE 01                         	dc.b	$01
0008CCCF E103                       	smpsAlterNote       $03
0008CCD1 01                         	dc.b	$01
0008CCD2 E1FD                       	smpsAlterNote       $FD
0008CCD4 01                         	dc.b	$01
0008CCD5 ECF5                       	smpsPSGAlterVol     $F5
0008CCD7 9207                       	dc.b	nF1, $07
0008CCD9 EC0B                       	smpsPSGAlterVol     $0B
0008CCDB 8004                       	dc.b	nRst, $04
0008CCDD ECF5                       	smpsPSGAlterVol     $F5
0008CCDF 9206                       	dc.b	nF1, $06
0008CCE1 EC0B                       	smpsPSGAlterVol     $0B
0008CCE3 8007                       	dc.b	nRst, $07
0008CCE5 E103                       	smpsAlterNote       $03
0008CCE7 0101                       	dc.b	$01, $01
0008CCE9 E100                       	smpsAlterNote       $00
0008CCEB 01                         	dc.b	$01
0008CCEC E1FA                       	smpsAlterNote       $FA
0008CCEE 01                         	dc.b	$01
0008CCEF E1FD                       	smpsAlterNote       $FD
0008CCF1 ECF5                       	smpsPSGAlterVol     $F5
0008CCF3 9206                       	dc.b	nF1, $06
0008CCF5 EC04                       	smpsPSGAlterVol     $04
0008CCF7 E701                       	dc.b	smpsNoAttack, $01
0008CCF9 EC07                       	smpsPSGAlterVol     $07
0008CCFB 8003                       	dc.b	nRst, $03
0008CCFD ECF5                       	smpsPSGAlterVol     $F5
0008CCFF 9206                       	dc.b	nF1, $06
0008CD01 EC04                       	smpsPSGAlterVol     $04
0008CD03 E701                       	dc.b	smpsNoAttack, $01
0008CD05 EC07                       	smpsPSGAlterVol     $07
0008CD07 8006                       	dc.b	nRst, $06
0008CD09 E100                       	smpsAlterNote       $00
0008CD0B 01                         	dc.b	$01
0008CD0C E104                       	smpsAlterNote       $04
0008CD0E 01                         	dc.b	$01
0008CD0F E100                       	smpsAlterNote       $00
0008CD11 01                         	dc.b	$01
0008CD12 E1FD                       	smpsAlterNote       $FD
0008CD14 01                         	dc.b	$01
0008CD15 ECF5                       	smpsPSGAlterVol     $F5
0008CD17 9206                       	dc.b	nF1, $06
0008CD19 EC04                       	smpsPSGAlterVol     $04
0008CD1B E701                       	dc.b	smpsNoAttack, $01
0008CD1D EC07                       	smpsPSGAlterVol     $07
0008CD1F 8003                       	dc.b	nRst, $03
0008CD21 ECF5                       	smpsPSGAlterVol     $F5
0008CD23 9207                       	dc.b	nF1, $07
0008CD25 EC0B                       	smpsPSGAlterVol     $0B
0008CD27 8007                       	dc.b	nRst, $07
0008CD29 E103                       	smpsAlterNote       $03
0008CD2B 0101                       	dc.b	$01, $01
0008CD2D E1FD                       	smpsAlterNote       $FD
0008CD2F 01                         	dc.b	$01
0008CD30 E1FA                       	smpsAlterNote       $FA
0008CD32 01                         	dc.b	$01
0008CD33 E1FD                       	smpsAlterNote       $FD
0008CD35 ECF5                       	smpsPSGAlterVol     $F5
0008CD37 9206                       	dc.b	nF1, $06
0008CD39 EC0B                       	smpsPSGAlterVol     $0B
0008CD3B 8004                       	dc.b	nRst, $04
0008CD3D ECF5                       	smpsPSGAlterVol     $F5
0008CD3F 9206                       	dc.b	nF1, $06
0008CD41 EC04                       	smpsPSGAlterVol     $04
0008CD43 E701                       	dc.b	smpsNoAttack, $01
0008CD45 EC07                       	smpsPSGAlterVol     $07
0008CD47 8006                       	dc.b	nRst, $06
0008CD49 E103                       	smpsAlterNote       $03
0008CD4B 01                         	dc.b	$01
0008CD4C E104                       	smpsAlterNote       $04
0008CD4E 01                         	dc.b	$01
0008CD4F E100                       	smpsAlterNote       $00
0008CD51 01                         	dc.b	$01
0008CD52 E1FA                       	smpsAlterNote       $FA
0008CD54 01                         	dc.b	$01
0008CD55 E1FD                       	smpsAlterNote       $FD
0008CD57 ECF5                       	smpsPSGAlterVol     $F5
0008CD59 9206                       	dc.b	nF1, $06
0008CD5B EC04                       	smpsPSGAlterVol     $04
0008CD5D E701                       	dc.b	smpsNoAttack, $01
0008CD5F EC07                       	smpsPSGAlterVol     $07
0008CD61 8003                       	dc.b	nRst, $03
0008CD63 ECF5                       	smpsPSGAlterVol     $F5
0008CD65 9206                       	dc.b	nF1, $06
0008CD67 EC04                       	smpsPSGAlterVol     $04
0008CD69 E701                       	dc.b	smpsNoAttack, $01
0008CD6B EC07                       	smpsPSGAlterVol     $07
0008CD6D 8006                       	dc.b	nRst, $06
0008CD6F E100                       	smpsAlterNote       $00
0008CD71 01                         	dc.b	$01
0008CD72 E104                       	smpsAlterNote       $04
0008CD74 01                         	dc.b	$01
0008CD75 E103                       	smpsAlterNote       $03
0008CD77 01                         	dc.b	$01
0008CD78 E1FD                       	smpsAlterNote       $FD
0008CD7A 01                         	dc.b	$01
0008CD7B ECF5                       	smpsPSGAlterVol     $F5
0008CD7D 9107                       	dc.b	nE1, $07
0008CD7F EC0B                       	smpsPSGAlterVol     $0B
0008CD81 8004                       	dc.b	nRst, $04
0008CD83 ECF5                       	smpsPSGAlterVol     $F5
0008CD85 9106                       	dc.b	nE1, $06
0008CD87 EC0B                       	smpsPSGAlterVol     $0B
0008CD89 8007                       	dc.b	nRst, $07
0008CD8B E103                       	smpsAlterNote       $03
0008CD8D 0101                       	dc.b	$01, $01
0008CD8F E100                       	smpsAlterNote       $00
0008CD91 01                         	dc.b	$01
0008CD92 E1FA                       	smpsAlterNote       $FA
0008CD94 01                         	dc.b	$01
0008CD95 E1FD                       	smpsAlterNote       $FD
0008CD97 ECF5                       	smpsPSGAlterVol     $F5
0008CD99 9106                       	dc.b	nE1, $06
0008CD9B EC04                       	smpsPSGAlterVol     $04
0008CD9D E701                       	dc.b	smpsNoAttack, $01
0008CD9F EC07                       	smpsPSGAlterVol     $07
0008CDA1 8003                       	dc.b	nRst, $03
0008CDA3 ECF5                       	smpsPSGAlterVol     $F5
0008CDA5 9106                       	dc.b	nE1, $06
0008CDA7 EC04                       	smpsPSGAlterVol     $04
0008CDA9 E701                       	dc.b	smpsNoAttack, $01
0008CDAB EC07                       	smpsPSGAlterVol     $07
0008CDAD 8006                       	dc.b	nRst, $06
0008CDAF E100                       	smpsAlterNote       $00
0008CDB1 01                         	dc.b	$01
0008CDB2 E104                       	smpsAlterNote       $04
0008CDB4 01                         	dc.b	$01
0008CDB5 E100                       	smpsAlterNote       $00
0008CDB7 01                         	dc.b	$01
0008CDB8 E1FA                       	smpsAlterNote       $FA
0008CDBA 01                         	dc.b	$01
0008CDBB E1FD                       	smpsAlterNote       $FD
0008CDBD ECF5                       	smpsPSGAlterVol     $F5
0008CDBF 9106                       	dc.b	nE1, $06
0008CDC1 EC04                       	smpsPSGAlterVol     $04
0008CDC3 E701                       	dc.b	smpsNoAttack, $01
0008CDC5 EC07                       	smpsPSGAlterVol     $07
0008CDC7 8003                       	dc.b	nRst, $03
0008CDC9 ECF5                       	smpsPSGAlterVol     $F5
0008CDCB 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008CDCF EC04                       	smpsPSGAlterVol     $04
0008CDD1 E701                       	dc.b	smpsNoAttack, $01
0008CDD3 ECFC                       	smpsPSGAlterVol     $FC
0008CDD5 9103 9103                  	dc.b	nE1, $03, nE1, $03
0008CDD9 EC04                       	smpsPSGAlterVol     $04
0008CDDB E701                       	dc.b	smpsNoAttack, $01
0008CDDD ECFC                       	smpsPSGAlterVol     $FC
0008CDDF 9106                       	dc.b	nE1, $06
0008CDE1 EC04                       	smpsPSGAlterVol     $04
0008CDE3 E701                       	dc.b	smpsNoAttack, $01
0008CDE5 EC07                       	smpsPSGAlterVol     $07
0008CDE7 8006                       	dc.b	nRst, $06
0008CDE9 E100                       	smpsAlterNote       $00
0008CDEB 01                         	dc.b	$01
0008CDEC E104                       	smpsAlterNote       $04
0008CDEE 01                         	dc.b	$01
0008CDEF E100                       	smpsAlterNote       $00
0008CDF1 01                         	dc.b	$01
0008CDF2 E1FA                       	smpsAlterNote       $FA
0008CDF4 01                         	dc.b	$01
0008CDF5 E1F9                       	smpsAlterNote       $F9
0008CDF7 01                         	dc.b	$01
0008CDF8 E1FD                       	smpsAlterNote       $FD
0008CDFA 01                         	dc.b	$01
0008CDFB E103                       	smpsAlterNote       $03
0008CDFD 01                         	dc.b	$01
0008CDFE E104                       	smpsAlterNote       $04
0008CE00 01                         	dc.b	$01
0008CE01 E100                       	smpsAlterNote       $00
0008CE03 01                         	dc.b	$01
0008CE04 E1FA                       	smpsAlterNote       $FA
0008CE06 0101                       	dc.b	$01, $01
0008CE08 E1FD                       	smpsAlterNote       $FD
0008CE0A ECF5                       	smpsPSGAlterVol     $F5
0008CE0C 9206                       	dc.b	nF1, $06
0008CE0E EC04                       	smpsPSGAlterVol     $04
0008CE10 E701                       	dc.b	smpsNoAttack, $01
0008CE12 EC07                       	smpsPSGAlterVol     $07
0008CE14 8003                       	dc.b	nRst, $03
0008CE16 ECF5                       	smpsPSGAlterVol     $F5
0008CE18 9206                       	dc.b	nF1, $06
0008CE1A EC04                       	smpsPSGAlterVol     $04
0008CE1C E701                       	dc.b	smpsNoAttack, $01
0008CE1E EC07                       	smpsPSGAlterVol     $07
0008CE20 8006                       	dc.b	nRst, $06
0008CE22 E100                       	smpsAlterNote       $00
0008CE24 01                         	dc.b	$01
0008CE25 E104                       	smpsAlterNote       $04
0008CE27 01                         	dc.b	$01
0008CE28 E103                       	smpsAlterNote       $03
0008CE2A 01                         	dc.b	$01
0008CE2B E1FD                       	smpsAlterNote       $FD
0008CE2D 01                         	dc.b	$01
0008CE2E ECF5                       	smpsPSGAlterVol     $F5
0008CE30 9407                       	dc.b	nG1, $07
0008CE32 EC0B                       	smpsPSGAlterVol     $0B
0008CE34 8004                       	dc.b	nRst, $04
0008CE36 ECF5                       	smpsPSGAlterVol     $F5
0008CE38 9406                       	dc.b	nG1, $06
0008CE3A EC0B                       	smpsPSGAlterVol     $0B
0008CE3C 8007                       	dc.b	nRst, $07
0008CE3E E103                       	smpsAlterNote       $03
0008CE40 0101                       	dc.b	$01, $01
0008CE42 E1FD                       	smpsAlterNote       $FD
0008CE44 01                         	dc.b	$01
0008CE45 E1F9                       	smpsAlterNote       $F9
0008CE47 01                         	dc.b	$01
0008CE48 E1FD                       	smpsAlterNote       $FD
0008CE4A ECF5                       	smpsPSGAlterVol     $F5
0008CE4C 9206                       	dc.b	nF1, $06
0008CE4E EC04                       	smpsPSGAlterVol     $04
0008CE50 E701                       	dc.b	smpsNoAttack, $01
0008CE52 EC07                       	smpsPSGAlterVol     $07
0008CE54 8003                       	dc.b	nRst, $03
0008CE56 ECF5                       	smpsPSGAlterVol     $F5
0008CE58 9206                       	dc.b	nF1, $06
0008CE5A EC04                       	smpsPSGAlterVol     $04
0008CE5C E701                       	dc.b	smpsNoAttack, $01
0008CE5E EC07                       	smpsPSGAlterVol     $07
0008CE60 8006                       	dc.b	nRst, $06
0008CE62 E100                       	smpsAlterNote       $00
0008CE64 01                         	dc.b	$01
0008CE65 E104                       	smpsAlterNote       $04
0008CE67 01                         	dc.b	$01
0008CE68 E100                       	smpsAlterNote       $00
0008CE6A 01                         	dc.b	$01
0008CE6B E1FA                       	smpsAlterNote       $FA
0008CE6D 01                         	dc.b	$01
0008CE6E E1FD                       	smpsAlterNote       $FD
0008CE70 ECF5                       	smpsPSGAlterVol     $F5
0008CE72 9206                       	dc.b	nF1, $06
0008CE74 EC04                       	smpsPSGAlterVol     $04
0008CE76 E701                       	dc.b	smpsNoAttack, $01
0008CE78 EC07                       	smpsPSGAlterVol     $07
0008CE7A 8003                       	dc.b	nRst, $03
0008CE7C ECF5                       	smpsPSGAlterVol     $F5
0008CE7E 9107                       	dc.b	nE1, $07
0008CE80 EC0B                       	smpsPSGAlterVol     $0B
0008CE82 8006                       	dc.b	nRst, $06
0008CE84 E100                       	smpsAlterNote       $00
0008CE86 01                         	dc.b	$01
0008CE87 E103                       	smpsAlterNote       $03
0008CE89 0101                       	dc.b	$01, $01
0008CE8B E1FD                       	smpsAlterNote       $FD
0008CE8D 01                         	dc.b	$01
0008CE8E ECF5                       	smpsPSGAlterVol     $F5
0008CE90 9207                       	dc.b	nF1, $07
0008CE92 EC0B                       	smpsPSGAlterVol     $0B
0008CE94 8004                       	dc.b	nRst, $04
0008CE96 ECF5                       	smpsPSGAlterVol     $F5
0008CE98 9206                       	dc.b	nF1, $06
0008CE9A EC04                       	smpsPSGAlterVol     $04
0008CE9C E701                       	dc.b	smpsNoAttack, $01
0008CE9E EC07                       	smpsPSGAlterVol     $07
0008CEA0 8006                       	dc.b	nRst, $06
0008CEA2 E103                       	smpsAlterNote       $03
0008CEA4 01                         	dc.b	$01
0008CEA5 E104                       	smpsAlterNote       $04
0008CEA7 01                         	dc.b	$01
0008CEA8 E100                       	smpsAlterNote       $00
0008CEAA 01                         	dc.b	$01
0008CEAB E1FB                       	smpsAlterNote       $FB
0008CEAD 01                         	dc.b	$01
0008CEAE E1FD                       	smpsAlterNote       $FD
0008CEB0 ECF5                       	smpsPSGAlterVol     $F5
0008CEB2 9406                       	dc.b	nG1, $06
0008CEB4 EC04                       	smpsPSGAlterVol     $04
0008CEB6 E701                       	dc.b	smpsNoAttack, $01
0008CEB8 EC07                       	smpsPSGAlterVol     $07
0008CEBA 8003                       	dc.b	nRst, $03
0008CEBC ECF5                       	smpsPSGAlterVol     $F5
0008CEBE 9406                       	dc.b	nG1, $06
0008CEC0 EC04                       	smpsPSGAlterVol     $04
0008CEC2 E701                       	dc.b	smpsNoAttack, $01
0008CEC4 EC07                       	smpsPSGAlterVol     $07
0008CEC6 8006                       	dc.b	nRst, $06
0008CEC8 E100                       	smpsAlterNote       $00
0008CECA 01                         	dc.b	$01
0008CECB E104                       	smpsAlterNote       $04
0008CECD 01                         	dc.b	$01
0008CECE E100                       	smpsAlterNote       $00
0008CED0 01                         	dc.b	$01
0008CED1 E1FD                       	smpsAlterNote       $FD
0008CED3 01                         	dc.b	$01
0008CED4 ECF5                       	smpsPSGAlterVol     $F5
0008CED6 9206                       	dc.b	nF1, $06
0008CED8 EC04                       	smpsPSGAlterVol     $04
0008CEDA E701                       	dc.b	smpsNoAttack, $01
0008CEDC EC07                       	smpsPSGAlterVol     $07
0008CEDE 8003                       	dc.b	nRst, $03
0008CEE0 ECF5                       	smpsPSGAlterVol     $F5
0008CEE2 9207                       	dc.b	nF1, $07
0008CEE4 EC0B                       	smpsPSGAlterVol     $0B
0008CEE6 8007                       	dc.b	nRst, $07
0008CEE8 E103                       	smpsAlterNote       $03
0008CEEA 0101                       	dc.b	$01, $01
0008CEEC E1FD                       	smpsAlterNote       $FD
0008CEEE 01                         	dc.b	$01
0008CEEF E1FA                       	smpsAlterNote       $FA
0008CEF1 01                         	dc.b	$01
0008CEF2 E1FD                       	smpsAlterNote       $FD
0008CEF4 ECF5                       	smpsPSGAlterVol     $F5
0008CEF6 9206                       	dc.b	nF1, $06
0008CEF8 EC0B                       	smpsPSGAlterVol     $0B
0008CEFA 8004                       	dc.b	nRst, $04
0008CEFC ECF5                       	smpsPSGAlterVol     $F5
0008CEFE 9206                       	dc.b	nF1, $06
0008CF00 EC04                       	smpsPSGAlterVol     $04
0008CF02 E701                       	dc.b	smpsNoAttack, $01
0008CF04 EC07                       	smpsPSGAlterVol     $07
0008CF06 8006                       	dc.b	nRst, $06
0008CF08 E100                       	smpsAlterNote       $00
0008CF0A 01                         	dc.b	$01
0008CF0B E104                       	smpsAlterNote       $04
0008CF0D 01                         	dc.b	$01
0008CF0E E100                       	smpsAlterNote       $00
0008CF10 01                         	dc.b	$01
0008CF11 E1FA                       	smpsAlterNote       $FA
0008CF13 01                         	dc.b	$01
0008CF14 E1FD                       	smpsAlterNote       $FD
0008CF16 ECF5                       	smpsPSGAlterVol     $F5
0008CF18 9206                       	dc.b	nF1, $06
0008CF1A EC04                       	smpsPSGAlterVol     $04
0008CF1C E704                       	dc.b	smpsNoAttack, $04
0008CF1E ECFC                       	smpsPSGAlterVol     $FC
0008CF20 9207                       	dc.b	nF1, $07
0008CF22 EC0B                       	smpsPSGAlterVol     $0B
0008CF24 8006                       	dc.b	nRst, $06
0008CF26 E100                       	smpsAlterNote       $00
0008CF28 01                         	dc.b	$01
0008CF29 E104                       	smpsAlterNote       $04
0008CF2B 01                         	dc.b	$01
0008CF2C E103                       	smpsAlterNote       $03
0008CF2E 01                         	dc.b	$01
0008CF2F E1FD                       	smpsAlterNote       $FD
0008CF31 01                         	dc.b	$01
0008CF32 ECF5                       	smpsPSGAlterVol     $F5
0008CF34 9207                       	dc.b	nF1, $07
0008CF36 EC0B                       	smpsPSGAlterVol     $0B
0008CF38 8004                       	dc.b	nRst, $04
0008CF3A ECF5                       	smpsPSGAlterVol     $F5
0008CF3C 9206                       	dc.b	nF1, $06
0008CF3E EC0B                       	smpsPSGAlterVol     $0B
0008CF40 8007                       	dc.b	nRst, $07
0008CF42 E103                       	smpsAlterNote       $03
0008CF44 0101                       	dc.b	$01, $01
0008CF46 E100                       	smpsAlterNote       $00
0008CF48 01                         	dc.b	$01
0008CF49 E1FA                       	smpsAlterNote       $FA
0008CF4B 01                         	dc.b	$01
0008CF4C E1FD                       	smpsAlterNote       $FD
0008CF4E ECF5                       	smpsPSGAlterVol     $F5
0008CF50 9206                       	dc.b	nF1, $06
0008CF52 EC04                       	smpsPSGAlterVol     $04
0008CF54 E704                       	dc.b	smpsNoAttack, $04
0008CF56 ECFC                       	smpsPSGAlterVol     $FC
0008CF58 9206                       	dc.b	nF1, $06
0008CF5A EC04                       	smpsPSGAlterVol     $04
0008CF5C E701                       	dc.b	smpsNoAttack, $01
0008CF5E EC07                       	smpsPSGAlterVol     $07
0008CF60 8006                       	dc.b	nRst, $06
0008CF62 E100                       	smpsAlterNote       $00
0008CF64 01                         	dc.b	$01
0008CF65 E104                       	smpsAlterNote       $04
0008CF67 01                         	dc.b	$01
0008CF68 E100                       	smpsAlterNote       $00
0008CF6A 01                         	dc.b	$01
0008CF6B E1FD                       	smpsAlterNote       $FD
0008CF6D 01                         	dc.b	$01
0008CF6E ECF5                       	smpsPSGAlterVol     $F5
0008CF70 9206                       	dc.b	nF1, $06
0008CF72 EC04                       	smpsPSGAlterVol     $04
0008CF74 E701                       	dc.b	smpsNoAttack, $01
0008CF76 EC07                       	smpsPSGAlterVol     $07
0008CF78 8003                       	dc.b	nRst, $03
0008CF7A ECF5                       	smpsPSGAlterVol     $F5
0008CF7C 9207                       	dc.b	nF1, $07
0008CF7E EC0B                       	smpsPSGAlterVol     $0B
0008CF80 8007                       	dc.b	nRst, $07
0008CF82 E103                       	smpsAlterNote       $03
0008CF84 0101                       	dc.b	$01, $01
0008CF86 E1FD                       	smpsAlterNote       $FD
0008CF88 01                         	dc.b	$01
0008CF89 E1FA                       	smpsAlterNote       $FA
0008CF8B 01                         	dc.b	$01
0008CF8C E1FD                       	smpsAlterNote       $FD
0008CF8E ECF5                       	smpsPSGAlterVol     $F5
0008CF90 9106                       	dc.b	nE1, $06
0008CF92 EC0B                       	smpsPSGAlterVol     $0B
0008CF94 8004                       	dc.b	nRst, $04
0008CF96 ECF5                       	smpsPSGAlterVol     $F5
0008CF98 9106                       	dc.b	nE1, $06
0008CF9A EC04                       	smpsPSGAlterVol     $04
0008CF9C E701                       	dc.b	smpsNoAttack, $01
0008CF9E EC07                       	smpsPSGAlterVol     $07
0008CFA0 8006                       	dc.b	nRst, $06
0008CFA2 E100                       	smpsAlterNote       $00
0008CFA4 01                         	dc.b	$01
0008CFA5 E104                       	smpsAlterNote       $04
0008CFA7 01                         	dc.b	$01
0008CFA8 E100                       	smpsAlterNote       $00
0008CFAA 01                         	dc.b	$01
0008CFAB E1FA                       	smpsAlterNote       $FA
0008CFAD 01                         	dc.b	$01
0008CFAE E1FD                       	smpsAlterNote       $FD
0008CFB0 ECF5                       	smpsPSGAlterVol     $F5
0008CFB2 9106                       	dc.b	nE1, $06
0008CFB4 EC04                       	smpsPSGAlterVol     $04
0008CFB6 E701                       	dc.b	smpsNoAttack, $01
0008CFB8 EC07                       	smpsPSGAlterVol     $07
0008CFBA 8003                       	dc.b	nRst, $03
0008CFBC ECF5                       	smpsPSGAlterVol     $F5
0008CFBE 9106                       	dc.b	nE1, $06
0008CFC0 EC04                       	smpsPSGAlterVol     $04
0008CFC2 E701                       	dc.b	smpsNoAttack, $01
0008CFC4 EC07                       	smpsPSGAlterVol     $07
0008CFC6 8006                       	dc.b	nRst, $06
0008CFC8 E100                       	smpsAlterNote       $00
0008CFCA 01                         	dc.b	$01
0008CFCB E104                       	smpsAlterNote       $04
0008CFCD 01                         	dc.b	$01
0008CFCE E103                       	smpsAlterNote       $03
0008CFD0 01                         	dc.b	$01
0008CFD1 E1FD                       	smpsAlterNote       $FD
0008CFD3 01                         	dc.b	$01
0008CFD4 ECF5                       	smpsPSGAlterVol     $F5
0008CFD6 9107                       	dc.b	nE1, $07
0008CFD8 EC0B                       	smpsPSGAlterVol     $0B
0008CFDA 8004                       	dc.b	nRst, $04
0008CFDC ECF5                       	smpsPSGAlterVol     $F5
0008CFDE 9106                       	dc.b	nE1, $06
0008CFE0 EC0B                       	smpsPSGAlterVol     $0B
0008CFE2 8007                       	dc.b	nRst, $07
0008CFE4 E103                       	smpsAlterNote       $03
0008CFE6 0101                       	dc.b	$01, $01
0008CFE8 E100                       	smpsAlterNote       $00
0008CFEA 01                         	dc.b	$01
0008CFEB E1FA                       	smpsAlterNote       $FA
0008CFED 01                         	dc.b	$01
0008CFEE E1FD                       	smpsAlterNote       $FD
0008CFF0 ECF5                       	smpsPSGAlterVol     $F5
0008CFF2 9106                       	dc.b	nE1, $06
0008CFF4 EC04                       	smpsPSGAlterVol     $04
0008CFF6 E701                       	dc.b	smpsNoAttack, $01
0008CFF8 EC07                       	smpsPSGAlterVol     $07
0008CFFA 8003                       	dc.b	nRst, $03
0008CFFC ECF5                       	smpsPSGAlterVol     $F5
0008CFFE 9106                       	dc.b	nE1, $06
0008D000 EC04                       	smpsPSGAlterVol     $04
0008D002 E701                       	dc.b	smpsNoAttack, $01
0008D004 EC07                       	smpsPSGAlterVol     $07
0008D006 8003                       	dc.b	nRst, $03
0008D008 ECF5                       	smpsPSGAlterVol     $F5
0008D00A 9207                       	dc.b	nF1, $07
0008D00C EC0B                       	smpsPSGAlterVol     $0B
0008D00E 8006                       	dc.b	nRst, $06
0008D010 E100                       	smpsAlterNote       $00
0008D012 01                         	dc.b	$01
0008D013 E104                       	smpsAlterNote       $04
0008D015 01                         	dc.b	$01
0008D016 E103                       	smpsAlterNote       $03
0008D018 01                         	dc.b	$01
0008D019 E1FD                       	smpsAlterNote       $FD
0008D01B 01                         	dc.b	$01
0008D01C E1F9                       	smpsAlterNote       $F9
0008D01E 01                         	dc.b	$01
0008D01F E1FD                       	smpsAlterNote       $FD
0008D021 01                         	dc.b	$01
0008D022 E100                       	smpsAlterNote       $00
0008D024 01                         	dc.b	$01
0008D025 E104                       	smpsAlterNote       $04
0008D027 01                         	dc.b	$01
0008D028 E1FD                       	smpsAlterNote       $FD
0008D02A ECF5                       	smpsPSGAlterVol     $F5
0008D02C 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008D030 EC04                       	smpsPSGAlterVol     $04
0008D032 E701                       	dc.b	smpsNoAttack, $01
0008D034 EC07                       	smpsPSGAlterVol     $07
0008D036 8009                       	dc.b	nRst, $09
0008D038 E100                       	smpsAlterNote       $00
0008D03A 01                         	dc.b	$01
0008D03B E104                       	smpsAlterNote       $04
0008D03D 01                         	dc.b	$01
0008D03E E103                       	smpsAlterNote       $03
0008D040 01                         	dc.b	$01
0008D041 E1FD                       	smpsAlterNote       $FD
0008D043 01                         	dc.b	$01
0008D044 E1F9                       	smpsAlterNote       $F9
0008D046 01                         	dc.b	$01
0008D047 E1FD                       	smpsAlterNote       $FD
0008D049 01                         	dc.b	$01
0008D04A E100                       	smpsAlterNote       $00
0008D04C 01                         	dc.b	$01
0008D04D E104                       	smpsAlterNote       $04
0008D04F 01                         	dc.b	$01
0008D050 E100                       	smpsAlterNote       $00
0008D052 01                         	dc.b	$01
0008D053 E1FA                       	smpsAlterNote       $FA
0008D055 01                         	dc.b	$01
0008D056 E1F9                       	smpsAlterNote       $F9
0008D058 01                         	dc.b	$01
0008D059 E1FD                       	smpsAlterNote       $FD
0008D05B 01                         	dc.b	$01
0008D05C E103                       	smpsAlterNote       $03
0008D05E 0101                       	dc.b	$01, $01
0008D060 E100                       	smpsAlterNote       $00
0008D062 01                         	dc.b	$01
0008D063 E1FD                       	smpsAlterNote       $FD
0008D065 ECF5                       	smpsPSGAlterVol     $F5
0008D067 9202                       	dc.b	nF1, $02
0008D069 EC04                       	smpsPSGAlterVol     $04
0008D06B E701                       	dc.b	smpsNoAttack, $01
0008D06D ECFC                       	smpsPSGAlterVol     $FC
0008D06F 9106                       	dc.b	nE1, $06
0008D071 EC04                       	smpsPSGAlterVol     $04
0008D073 E701                       	dc.b	smpsNoAttack, $01
0008D075 EC07                       	smpsPSGAlterVol     $07
0008D077 8006                       	dc.b	nRst, $06
0008D079 E100                       	smpsAlterNote       $00
0008D07B 01                         	dc.b	$01
0008D07C E104                       	smpsAlterNote       $04
0008D07E 01                         	dc.b	$01
0008D07F E100                       	smpsAlterNote       $00
0008D081 01                         	dc.b	$01
0008D082 E1FD                       	smpsAlterNote       $FD
0008D084 01                         	dc.b	$01
0008D085 E1F9                       	smpsAlterNote       $F9
0008D087 01                         	dc.b	$01
0008D088 E1FD                       	smpsAlterNote       $FD
0008D08A 01                         	dc.b	$01
0008D08B E103                       	smpsAlterNote       $03
0008D08D 01                         	dc.b	$01
0008D08E E104                       	smpsAlterNote       $04
0008D090 01                         	dc.b	$01
0008D091 E1FD                       	smpsAlterNote       $FD
0008D093 ECF5                       	smpsPSGAlterVol     $F5
0008D095 9102                       	dc.b	nE1, $02
0008D097 EC04                       	smpsPSGAlterVol     $04
0008D099 E701                       	dc.b	smpsNoAttack, $01
0008D09B ECFC                       	smpsPSGAlterVol     $FC
0008D09D 920D                       	dc.b	nF1, $0D
0008D09F E100                       	smpsAlterNote       $00
0008D0A1 E701                       	dc.b	smpsNoAttack, $01
0008D0A3 E104                       	smpsAlterNote       $04
0008D0A5 E701                       	dc.b	smpsNoAttack, $01
0008D0A7 E100                       	smpsAlterNote       $00
0008D0A9 E701                       	dc.b	smpsNoAttack, $01
0008D0AB E1FD                       	smpsAlterNote       $FD
0008D0AD E701                       	dc.b	smpsNoAttack, $01
0008D0AF E1F9                       	smpsAlterNote       $F9
0008D0B1 E701                       	dc.b	smpsNoAttack, $01
0008D0B3 E1FD                       	smpsAlterNote       $FD
0008D0B5 E701                       	dc.b	smpsNoAttack, $01
0008D0B7 E103                       	smpsAlterNote       $03
0008D0B9 E701                       	dc.b	smpsNoAttack, $01
0008D0BB E104                       	smpsAlterNote       $04
0008D0BD E701                       	dc.b	smpsNoAttack, $01
0008D0BF E100                       	smpsAlterNote       $00
0008D0C1 E701                       	dc.b	smpsNoAttack, $01
0008D0C3 E1FA                       	smpsAlterNote       $FA
0008D0C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0C9 E1FD                       	smpsAlterNote       $FD
0008D0CB E701                       	dc.b	smpsNoAttack, $01
0008D0CD E103                       	smpsAlterNote       $03
0008D0CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0D3 E1FD                       	smpsAlterNote       $FD
0008D0D5 E701                       	dc.b	smpsNoAttack, $01
0008D0D7 E1F9                       	smpsAlterNote       $F9
0008D0D9 E701                       	dc.b	smpsNoAttack, $01
0008D0DB E1FA                       	smpsAlterNote       $FA
0008D0DD E701                       	dc.b	smpsNoAttack, $01
0008D0DF E100                       	smpsAlterNote       $00
0008D0E1 EC04                       	smpsPSGAlterVol     $04
0008D0E3 E701                       	dc.b	smpsNoAttack, $01
0008D0E5 EC07                       	smpsPSGAlterVol     $07
0008D0E7 E104                       	smpsAlterNote       $04
0008D0E9 8001                       	dc.b	nRst, $01
0008D0EB E100                       	smpsAlterNote       $00
0008D0ED 01                         	dc.b	$01
0008D0EE E1FD                       	smpsAlterNote       $FD
0008D0F0 01                         	dc.b	$01
0008D0F1 E1F9                       	smpsAlterNote       $F9
0008D0F3 01                         	dc.b	$01
0008D0F4 E1FD                       	smpsAlterNote       $FD
0008D0F6 01                         	dc.b	$01
0008D0F7 E103                       	smpsAlterNote       $03
0008D0F9 01                         	dc.b	$01
0008D0FA E104                       	smpsAlterNote       $04
0008D0FC 01                         	dc.b	$01
0008D0FD E1FD                       	smpsAlterNote       $FD
0008D0FF ECF5                       	smpsPSGAlterVol     $F5
0008D101 9106                       	dc.b	nE1, $06
0008D103 EC04                       	smpsPSGAlterVol     $04
0008D105 E701                       	dc.b	smpsNoAttack, $01
0008D107 EC07                       	smpsPSGAlterVol     $07
0008D109 8003                       	dc.b	nRst, $03
0008D10B ECF5                       	smpsPSGAlterVol     $F5
0008D10D 9106                       	dc.b	nE1, $06
0008D10F EC04                       	smpsPSGAlterVol     $04
0008D111 E701                       	dc.b	smpsNoAttack, $01
0008D113 EC07                       	smpsPSGAlterVol     $07
0008D115 8006                       	dc.b	nRst, $06
0008D117 E100                       	smpsAlterNote       $00
0008D119 01                         	dc.b	$01
0008D11A E104                       	smpsAlterNote       $04
0008D11C 01                         	dc.b	$01
0008D11D E100                       	smpsAlterNote       $00
0008D11F 01                         	dc.b	$01
0008D120 E1FA                       	smpsAlterNote       $FA
0008D122 01                         	dc.b	$01
0008D123 E1FD                       	smpsAlterNote       $FD
0008D125 ECF5                       	smpsPSGAlterVol     $F5
0008D127 9206                       	dc.b	nF1, $06
0008D129 EC04                       	smpsPSGAlterVol     $04
0008D12B E701                       	dc.b	smpsNoAttack, $01
0008D12D EC07                       	smpsPSGAlterVol     $07
0008D12F 8003                       	dc.b	nRst, $03
0008D131 ECF5                       	smpsPSGAlterVol     $F5
0008D133 9207                       	dc.b	nF1, $07
0008D135 EC0B                       	smpsPSGAlterVol     $0B
0008D137 8006                       	dc.b	nRst, $06
0008D139 E100                       	smpsAlterNote       $00
0008D13B 01                         	dc.b	$01
0008D13C E103                       	smpsAlterNote       $03
0008D13E 0101                       	dc.b	$01, $01
0008D140 E1FD                       	smpsAlterNote       $FD
0008D142 01                         	dc.b	$01
0008D143 ECF5                       	smpsPSGAlterVol     $F5
0008D145 9107                       	dc.b	nE1, $07
0008D147 EC0B                       	smpsPSGAlterVol     $0B
0008D149 8004                       	dc.b	nRst, $04
0008D14B ECF5                       	smpsPSGAlterVol     $F5
0008D14D 9106                       	dc.b	nE1, $06
0008D14F EC04                       	smpsPSGAlterVol     $04
0008D151 E701                       	dc.b	smpsNoAttack, $01
0008D153 EC07                       	smpsPSGAlterVol     $07
0008D155 8006                       	dc.b	nRst, $06
0008D157 E103                       	smpsAlterNote       $03
0008D159 01                         	dc.b	$01
0008D15A E104                       	smpsAlterNote       $04
0008D15C 01                         	dc.b	$01
0008D15D E100                       	smpsAlterNote       $00
0008D15F 01                         	dc.b	$01
0008D160 E1FA                       	smpsAlterNote       $FA
0008D162 01                         	dc.b	$01
0008D163 E1FD                       	smpsAlterNote       $FD
0008D165 ECF5                       	smpsPSGAlterVol     $F5
0008D167 9106                       	dc.b	nE1, $06
0008D169 EC04                       	smpsPSGAlterVol     $04
0008D16B E701                       	dc.b	smpsNoAttack, $01
0008D16D EC07                       	smpsPSGAlterVol     $07
0008D16F 8003                       	dc.b	nRst, $03
0008D171 ECF5                       	smpsPSGAlterVol     $F5
0008D173 9106                       	dc.b	nE1, $06
0008D175 EC04                       	smpsPSGAlterVol     $04
0008D177 E701                       	dc.b	smpsNoAttack, $01
0008D179 EC07                       	smpsPSGAlterVol     $07
0008D17B 8003                       	dc.b	nRst, $03
0008D17D ECF5                       	smpsPSGAlterVol     $F5
0008D17F 9207                       	dc.b	nF1, $07
0008D181 EC0B                       	smpsPSGAlterVol     $0B
0008D183 8006                       	dc.b	nRst, $06
0008D185 E100                       	smpsAlterNote       $00
0008D187 01                         	dc.b	$01
0008D188 E103                       	smpsAlterNote       $03
0008D18A 0101                       	dc.b	$01, $01
0008D18C E1FD                       	smpsAlterNote       $FD
0008D18E 01                         	dc.b	$01
0008D18F E1F9                       	smpsAlterNote       $F9
0008D191 01                         	dc.b	$01
0008D192 E1FA                       	smpsAlterNote       $FA
0008D194 01                         	dc.b	$01
0008D195 E100                       	smpsAlterNote       $00
0008D197 01                         	dc.b	$01
0008D198 E104                       	smpsAlterNote       $04
0008D19A 01                         	dc.b	$01
0008D19B E1FD                       	smpsAlterNote       $FD
0008D19D ECF5                       	smpsPSGAlterVol     $F5
0008D19F 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008D1A3 EC04                       	smpsPSGAlterVol     $04
0008D1A5 E701                       	dc.b	smpsNoAttack, $01
0008D1A7 EC07                       	smpsPSGAlterVol     $07
0008D1A9 8009                       	dc.b	nRst, $09
0008D1AB E100                       	smpsAlterNote       $00
0008D1AD 01                         	dc.b	$01
0008D1AE E103                       	smpsAlterNote       $03
0008D1B0 0101                       	dc.b	$01, $01
0008D1B2 E1FD                       	smpsAlterNote       $FD
0008D1B4 01                         	dc.b	$01
0008D1B5 E1F9                       	smpsAlterNote       $F9
0008D1B7 01                         	dc.b	$01
0008D1B8 E1FA                       	smpsAlterNote       $FA
0008D1BA 01                         	dc.b	$01
0008D1BB E100                       	smpsAlterNote       $00
0008D1BD 01                         	dc.b	$01
0008D1BE E104                       	smpsAlterNote       $04
0008D1C0 01                         	dc.b	$01
0008D1C1 E100                       	smpsAlterNote       $00
0008D1C3 01                         	dc.b	$01
0008D1C4 E1FD                       	smpsAlterNote       $FD
0008D1C6 01                         	dc.b	$01
0008D1C7 E1F9                       	smpsAlterNote       $F9
0008D1C9 01                         	dc.b	$01
0008D1CA E1FD                       	smpsAlterNote       $FD
0008D1CC 01                         	dc.b	$01
0008D1CD E103                       	smpsAlterNote       $03
0008D1CF 01                         	dc.b	$01
0008D1D0 E104                       	smpsAlterNote       $04
0008D1D2 01                         	dc.b	$01
0008D1D3 E100                       	smpsAlterNote       $00
0008D1D5 01                         	dc.b	$01
0008D1D6 E1FD                       	smpsAlterNote       $FD
0008D1D8 ECF5                       	smpsPSGAlterVol     $F5
0008D1DA 9203 9106                  	dc.b	nF1, $03, nE1, $06
0008D1DE EC04                       	smpsPSGAlterVol     $04
0008D1E0 E701                       	dc.b	smpsNoAttack, $01
0008D1E2 EC07                       	smpsPSGAlterVol     $07
0008D1E4 8006                       	dc.b	nRst, $06
0008D1E6 E100                       	smpsAlterNote       $00
0008D1E8 01                         	dc.b	$01
0008D1E9 E104                       	smpsAlterNote       $04
0008D1EB 01                         	dc.b	$01
0008D1EC E103                       	smpsAlterNote       $03
0008D1EE 01                         	dc.b	$01
0008D1EF E1FD                       	smpsAlterNote       $FD
0008D1F1 01                         	dc.b	$01
0008D1F2 E1F9                       	smpsAlterNote       $F9
0008D1F4 01                         	dc.b	$01
0008D1F5 E1FD                       	smpsAlterNote       $FD
0008D1F7 01                         	dc.b	$01
0008D1F8 E100                       	smpsAlterNote       $00
0008D1FA 01                         	dc.b	$01
0008D1FB E104                       	smpsAlterNote       $04
0008D1FD 01                         	dc.b	$01
0008D1FE E1FD                       	smpsAlterNote       $FD
0008D200 ECF5                       	smpsPSGAlterVol     $F5
0008D202 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0008D206 E100                       	smpsAlterNote       $00
0008D208 E701                       	dc.b	smpsNoAttack, $01
0008D20A E104                       	smpsAlterNote       $04
0008D20C E701                       	dc.b	smpsNoAttack, $01
0008D20E E100                       	smpsAlterNote       $00
0008D210 E701                       	dc.b	smpsNoAttack, $01
0008D212 E1FD                       	smpsAlterNote       $FD
0008D214 E701                       	dc.b	smpsNoAttack, $01
0008D216 E1F9                       	smpsAlterNote       $F9
0008D218 E701                       	dc.b	smpsNoAttack, $01
0008D21A E1FD                       	smpsAlterNote       $FD
0008D21C E701                       	dc.b	smpsNoAttack, $01
0008D21E E103                       	smpsAlterNote       $03
0008D220 E701                       	dc.b	smpsNoAttack, $01
0008D222 E104                       	smpsAlterNote       $04
0008D224 E701                       	dc.b	smpsNoAttack, $01
0008D226 E100                       	smpsAlterNote       $00
0008D228 E701                       	dc.b	smpsNoAttack, $01
0008D22A E1FA                       	smpsAlterNote       $FA
0008D22C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D230 E1FD                       	smpsAlterNote       $FD
0008D232 E701                       	dc.b	smpsNoAttack, $01
0008D234 E103                       	smpsAlterNote       $03
0008D236 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D23A E100                       	smpsAlterNote       $00
0008D23C E701                       	dc.b	smpsNoAttack, $01
0008D23E E1FA                       	smpsAlterNote       $FA
0008D240 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D244 E100                       	smpsAlterNote       $00
0008D246 EC04                       	smpsPSGAlterVol     $04
0008D248 E701                       	dc.b	smpsNoAttack, $01
0008D24A EC07                       	smpsPSGAlterVol     $07
0008D24C E104                       	smpsAlterNote       $04
0008D24E 8001                       	dc.b	nRst, $01
0008D250 E103                       	smpsAlterNote       $03
0008D252 01                         	dc.b	$01
0008D253 E1FD                       	smpsAlterNote       $FD
0008D255 01                         	dc.b	$01
0008D256 E1F9                       	smpsAlterNote       $F9
0008D258 01                         	dc.b	$01
0008D259 E1FD                       	smpsAlterNote       $FD
0008D25B 01                         	dc.b	$01
0008D25C E100                       	smpsAlterNote       $00
0008D25E 01                         	dc.b	$01
0008D25F E104                       	smpsAlterNote       $04
0008D261 01                         	dc.b	$01
0008D262 E1FD                       	smpsAlterNote       $FD
0008D264 ECF5                       	smpsPSGAlterVol     $F5
0008D266 9106                       	dc.b	nE1, $06
0008D268 EC04                       	smpsPSGAlterVol     $04
0008D26A E701                       	dc.b	smpsNoAttack, $01
0008D26C EC07                       	smpsPSGAlterVol     $07
0008D26E 8003                       	dc.b	nRst, $03
0008D270 ECF5                       	smpsPSGAlterVol     $F5
0008D272 9106                       	dc.b	nE1, $06
0008D274 EC04                       	smpsPSGAlterVol     $04
0008D276 E701                       	dc.b	smpsNoAttack, $01
0008D278 EC07                       	smpsPSGAlterVol     $07
0008D27A 8006                       	dc.b	nRst, $06
0008D27C E100                       	smpsAlterNote       $00
0008D27E 01                         	dc.b	$01
0008D27F E104                       	smpsAlterNote       $04
0008D281 01                         	dc.b	$01
0008D282 E100                       	smpsAlterNote       $00
0008D284 01                         	dc.b	$01
0008D285 E1FD                       	smpsAlterNote       $FD
0008D287 01                         	dc.b	$01
0008D288 ECF5                       	smpsPSGAlterVol     $F5
0008D28A 9206                       	dc.b	nF1, $06
0008D28C EC04                       	smpsPSGAlterVol     $04
0008D28E E701                       	dc.b	smpsNoAttack, $01
0008D290 EC07                       	smpsPSGAlterVol     $07
0008D292 8003                       	dc.b	nRst, $03
0008D294 ECF5                       	smpsPSGAlterVol     $F5
0008D296 9207                       	dc.b	nF1, $07
0008D298 EC0B                       	smpsPSGAlterVol     $0B
0008D29A 8007                       	dc.b	nRst, $07
0008D29C E103                       	smpsAlterNote       $03
0008D29E 0101                       	dc.b	$01, $01
0008D2A0 E1FD                       	smpsAlterNote       $FD
0008D2A2 01                         	dc.b	$01
0008D2A3 E1FA                       	smpsAlterNote       $FA
0008D2A5 01                         	dc.b	$01
0008D2A6 E1FD                       	smpsAlterNote       $FD
0008D2A8 ECF5                       	smpsPSGAlterVol     $F5
0008D2AA 9106                       	dc.b	nE1, $06
0008D2AC EC0B                       	smpsPSGAlterVol     $0B
0008D2AE 8004                       	dc.b	nRst, $04
0008D2B0 ECF5                       	smpsPSGAlterVol     $F5
0008D2B2 9106                       	dc.b	nE1, $06
0008D2B4 EC04                       	smpsPSGAlterVol     $04
0008D2B6 E701                       	dc.b	smpsNoAttack, $01
0008D2B8 EC07                       	smpsPSGAlterVol     $07
0008D2BA 8006                       	dc.b	nRst, $06
0008D2BC E100                       	smpsAlterNote       $00
0008D2BE 01                         	dc.b	$01
0008D2BF E104                       	smpsAlterNote       $04
0008D2C1 01                         	dc.b	$01
0008D2C2 E100                       	smpsAlterNote       $00
0008D2C4 01                         	dc.b	$01
0008D2C5 E1FA                       	smpsAlterNote       $FA
0008D2C7 01                         	dc.b	$01
0008D2C8 E1FD                       	smpsAlterNote       $FD
0008D2CA ECF5                       	smpsPSGAlterVol     $F5
0008D2CC 9206                       	dc.b	nF1, $06
0008D2CE EC04                       	smpsPSGAlterVol     $04
0008D2D0 E701                       	dc.b	smpsNoAttack, $01
0008D2D2 EC07                       	smpsPSGAlterVol     $07
0008D2D4 8003                       	dc.b	nRst, $03
0008D2D6 ECF5                       	smpsPSGAlterVol     $F5
0008D2D8 9206                       	dc.b	nF1, $06
0008D2DA EC04                       	smpsPSGAlterVol     $04
0008D2DC E701                       	dc.b	smpsNoAttack, $01
0008D2DE EC07                       	smpsPSGAlterVol     $07
0008D2E0 8006                       	dc.b	nRst, $06
0008D2E2 E100                       	smpsAlterNote       $00
0008D2E4 01                         	dc.b	$01
0008D2E5 E104                       	smpsAlterNote       $04
0008D2E7 01                         	dc.b	$01
0008D2E8 E103                       	smpsAlterNote       $03
0008D2EA 01                         	dc.b	$01
0008D2EB E1FD                       	smpsAlterNote       $FD
0008D2ED 01                         	dc.b	$01
0008D2EE ECF5                       	smpsPSGAlterVol     $F5
0008D2F0 9107                       	dc.b	nE1, $07
0008D2F2 EC0B                       	smpsPSGAlterVol     $0B
0008D2F4 8004                       	dc.b	nRst, $04
0008D2F6 ECF5                       	smpsPSGAlterVol     $F5
0008D2F8 9106                       	dc.b	nE1, $06
0008D2FA EC0B                       	smpsPSGAlterVol     $0B
0008D2FC 8007                       	dc.b	nRst, $07
0008D2FE E103                       	smpsAlterNote       $03
0008D300 0101                       	dc.b	$01, $01
0008D302 E100                       	smpsAlterNote       $00
0008D304 01                         	dc.b	$01
0008D305 E1FA                       	smpsAlterNote       $FA
0008D307 01                         	dc.b	$01
0008D308 E1FD                       	smpsAlterNote       $FD
0008D30A ECF5                       	smpsPSGAlterVol     $F5
0008D30C 9206                       	dc.b	nF1, $06
0008D30E EC04                       	smpsPSGAlterVol     $04
0008D310 E701                       	dc.b	smpsNoAttack, $01
0008D312 EC07                       	smpsPSGAlterVol     $07
0008D314 8003                       	dc.b	nRst, $03
0008D316 ECF5                       	smpsPSGAlterVol     $F5
0008D318 9206                       	dc.b	nF1, $06
0008D31A EC04                       	smpsPSGAlterVol     $04
0008D31C E701                       	dc.b	smpsNoAttack, $01
0008D31E EC07                       	smpsPSGAlterVol     $07
0008D320 8006                       	dc.b	nRst, $06
0008D322 E100                       	smpsAlterNote       $00
0008D324 01                         	dc.b	$01
0008D325 E104                       	smpsAlterNote       $04
0008D327 01                         	dc.b	$01
0008D328 E100                       	smpsAlterNote       $00
0008D32A 01                         	dc.b	$01
0008D32B E1FD                       	smpsAlterNote       $FD
0008D32D 01                         	dc.b	$01
0008D32E ECF5                       	smpsPSGAlterVol     $F5
0008D330 9106                       	dc.b	nE1, $06
0008D332 EC04                       	smpsPSGAlterVol     $04
0008D334 E701                       	dc.b	smpsNoAttack, $01
0008D336 EC07                       	smpsPSGAlterVol     $07
0008D338 8003                       	dc.b	nRst, $03
0008D33A ECF5                       	smpsPSGAlterVol     $F5
0008D33C 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008D340 EC04                       	smpsPSGAlterVol     $04
0008D342 E701                       	dc.b	smpsNoAttack, $01
0008D344 ECFC                       	smpsPSGAlterVol     $FC
0008D346 9103                       	dc.b	nE1, $03
0008D348 EC04                       	smpsPSGAlterVol     $04
0008D34A E701                       	dc.b	smpsNoAttack, $01
0008D34C ECFC                       	smpsPSGAlterVol     $FC
0008D34E 9102                       	dc.b	nE1, $02
0008D350 EC04                       	smpsPSGAlterVol     $04
0008D352 E701                       	dc.b	smpsNoAttack, $01
0008D354 ECFC                       	smpsPSGAlterVol     $FC
0008D356 9103                       	dc.b	nE1, $03
0008D358 EC0B                       	smpsPSGAlterVol     $0B
0008D35A 800A                       	dc.b	nRst, $0A
0008D35C E100                       	smpsAlterNote       $00
0008D35E 01                         	dc.b	$01
0008D35F E104                       	smpsAlterNote       $04
0008D361 01                         	dc.b	$01
0008D362 E100                       	smpsAlterNote       $00
0008D364 01                         	dc.b	$01
0008D365 E1FA                       	smpsAlterNote       $FA
0008D367 01                         	dc.b	$01
0008D368 E1F9                       	smpsAlterNote       $F9
0008D36A 01                         	dc.b	$01
0008D36B E1FD                       	smpsAlterNote       $FD
0008D36D 01                         	dc.b	$01
0008D36E E103                       	smpsAlterNote       $03
0008D370 0101                       	dc.b	$01, $01
0008D372 E100                       	smpsAlterNote       $00
0008D374 01                         	dc.b	$01
0008D375 E1FA                       	smpsAlterNote       $FA
0008D377 0101                       	dc.b	$01, $01
0008D379 E1FD                       	smpsAlterNote       $FD
0008D37B ECF5                       	smpsPSGAlterVol     $F5
0008D37D 9206                       	dc.b	nF1, $06
0008D37F EC04                       	smpsPSGAlterVol     $04
0008D381 E704                       	dc.b	smpsNoAttack, $04
0008D383 ECFC                       	smpsPSGAlterVol     $FC
0008D385 9206                       	dc.b	nF1, $06
0008D387 EC04                       	smpsPSGAlterVol     $04
0008D389 E701                       	dc.b	smpsNoAttack, $01
0008D38B EC07                       	smpsPSGAlterVol     $07
0008D38D 8006                       	dc.b	nRst, $06
0008D38F E100                       	smpsAlterNote       $00
0008D391 01                         	dc.b	$01
0008D392 E104                       	smpsAlterNote       $04
0008D394 01                         	dc.b	$01
0008D395 E103                       	smpsAlterNote       $03
0008D397 01                         	dc.b	$01
0008D398 E1FD                       	smpsAlterNote       $FD
0008D39A 01                         	dc.b	$01
0008D39B ECF5                       	smpsPSGAlterVol     $F5
0008D39D 9407                       	dc.b	nG1, $07
0008D39F EC0B                       	smpsPSGAlterVol     $0B
0008D3A1 8004                       	dc.b	nRst, $04
0008D3A3 ECF5                       	smpsPSGAlterVol     $F5
0008D3A5 9406                       	dc.b	nG1, $06
0008D3A7 EC0B                       	smpsPSGAlterVol     $0B
0008D3A9 8007                       	dc.b	nRst, $07
0008D3AB E103                       	smpsAlterNote       $03
0008D3AD 0101                       	dc.b	$01, $01
0008D3AF E1FD                       	smpsAlterNote       $FD
0008D3B1 01                         	dc.b	$01
0008D3B2 E1F9                       	smpsAlterNote       $F9
0008D3B4 01                         	dc.b	$01
0008D3B5 E1FD                       	smpsAlterNote       $FD
0008D3B7 ECF5                       	smpsPSGAlterVol     $F5
0008D3B9 9206                       	dc.b	nF1, $06
0008D3BB EC04                       	smpsPSGAlterVol     $04
0008D3BD E701                       	dc.b	smpsNoAttack, $01
0008D3BF EC07                       	smpsPSGAlterVol     $07
0008D3C1 8003                       	dc.b	nRst, $03
0008D3C3 ECF5                       	smpsPSGAlterVol     $F5
0008D3C5 9206                       	dc.b	nF1, $06
0008D3C7 EC04                       	smpsPSGAlterVol     $04
0008D3C9 E701                       	dc.b	smpsNoAttack, $01
0008D3CB EC07                       	smpsPSGAlterVol     $07
0008D3CD 8006                       	dc.b	nRst, $06
0008D3CF E100                       	smpsAlterNote       $00
0008D3D1 01                         	dc.b	$01
0008D3D2 E104                       	smpsAlterNote       $04
0008D3D4 01                         	dc.b	$01
0008D3D5 E100                       	smpsAlterNote       $00
0008D3D7 01                         	dc.b	$01
0008D3D8 E1FA                       	smpsAlterNote       $FA
0008D3DA 01                         	dc.b	$01
0008D3DB E1FD                       	smpsAlterNote       $FD
0008D3DD ECF5                       	smpsPSGAlterVol     $F5
0008D3DF 9206                       	dc.b	nF1, $06
0008D3E1 EC04                       	smpsPSGAlterVol     $04
0008D3E3 E701                       	dc.b	smpsNoAttack, $01
0008D3E5 EC07                       	smpsPSGAlterVol     $07
0008D3E7 8003                       	dc.b	nRst, $03
0008D3E9 ECF5                       	smpsPSGAlterVol     $F5
0008D3EB 9107                       	dc.b	nE1, $07
0008D3ED EC0B                       	smpsPSGAlterVol     $0B
0008D3EF 8006                       	dc.b	nRst, $06
0008D3F1 E100                       	smpsAlterNote       $00
0008D3F3 01                         	dc.b	$01
0008D3F4 E103                       	smpsAlterNote       $03
0008D3F6 0101                       	dc.b	$01, $01
0008D3F8 E1FD                       	smpsAlterNote       $FD
0008D3FA 01                         	dc.b	$01
0008D3FB ECF5                       	smpsPSGAlterVol     $F5
0008D3FD 9207                       	dc.b	nF1, $07
0008D3FF EC0B                       	smpsPSGAlterVol     $0B
0008D401 8004                       	dc.b	nRst, $04
0008D403 ECF5                       	smpsPSGAlterVol     $F5
0008D405 9206                       	dc.b	nF1, $06
0008D407 EC04                       	smpsPSGAlterVol     $04
0008D409 E701                       	dc.b	smpsNoAttack, $01
0008D40B EC07                       	smpsPSGAlterVol     $07
0008D40D 8006                       	dc.b	nRst, $06
0008D40F E103                       	smpsAlterNote       $03
0008D411 01                         	dc.b	$01
0008D412 E104                       	smpsAlterNote       $04
0008D414 01                         	dc.b	$01
0008D415 E100                       	smpsAlterNote       $00
0008D417 01                         	dc.b	$01
0008D418 E1FB                       	smpsAlterNote       $FB
0008D41A 01                         	dc.b	$01
0008D41B E1FD                       	smpsAlterNote       $FD
0008D41D ECF5                       	smpsPSGAlterVol     $F5
0008D41F 9406                       	dc.b	nG1, $06
0008D421 EC04                       	smpsPSGAlterVol     $04
0008D423 E701                       	dc.b	smpsNoAttack, $01
0008D425 EC07                       	smpsPSGAlterVol     $07
0008D427 8003                       	dc.b	nRst, $03
0008D429 ECF5                       	smpsPSGAlterVol     $F5
0008D42B 9406                       	dc.b	nG1, $06
0008D42D EC04                       	smpsPSGAlterVol     $04
0008D42F E701                       	dc.b	smpsNoAttack, $01
0008D431 EC07                       	smpsPSGAlterVol     $07
0008D433 8006                       	dc.b	nRst, $06
0008D435 E100                       	smpsAlterNote       $00
0008D437 01                         	dc.b	$01
0008D438 E104                       	smpsAlterNote       $04
0008D43A 01                         	dc.b	$01
0008D43B E100                       	smpsAlterNote       $00
0008D43D 01                         	dc.b	$01
0008D43E E1FD                       	smpsAlterNote       $FD
0008D440 01                         	dc.b	$01
0008D441 ECF5                       	smpsPSGAlterVol     $F5
0008D443 9206                       	dc.b	nF1, $06
0008D445 EC04                       	smpsPSGAlterVol     $04
0008D447 E701                       	dc.b	smpsNoAttack, $01
0008D449 EC07                       	smpsPSGAlterVol     $07
0008D44B 8003                       	dc.b	nRst, $03
0008D44D ECF5                       	smpsPSGAlterVol     $F5
0008D44F 9207                       	dc.b	nF1, $07
0008D451 EC0B                       	smpsPSGAlterVol     $0B
0008D453 8007                       	dc.b	nRst, $07
0008D455 E103                       	smpsAlterNote       $03
0008D457 0101                       	dc.b	$01, $01
0008D459 E1FD                       	smpsAlterNote       $FD
0008D45B 01                         	dc.b	$01
0008D45C E1FA                       	smpsAlterNote       $FA
0008D45E 01                         	dc.b	$01
0008D45F E1FD                       	smpsAlterNote       $FD
0008D461 ECF5                       	smpsPSGAlterVol     $F5
0008D463 9206                       	dc.b	nF1, $06
0008D465 EC0B                       	smpsPSGAlterVol     $0B
0008D467 8004                       	dc.b	nRst, $04
0008D469 ECF5                       	smpsPSGAlterVol     $F5
0008D46B 9206                       	dc.b	nF1, $06
0008D46D EC04                       	smpsPSGAlterVol     $04
0008D46F E701                       	dc.b	smpsNoAttack, $01
0008D471 EC07                       	smpsPSGAlterVol     $07
0008D473 8006                       	dc.b	nRst, $06
0008D475 E100                       	smpsAlterNote       $00
0008D477 01                         	dc.b	$01
0008D478 E104                       	smpsAlterNote       $04
0008D47A 01                         	dc.b	$01
0008D47B E100                       	smpsAlterNote       $00
0008D47D 01                         	dc.b	$01
0008D47E E1FA                       	smpsAlterNote       $FA
0008D480 01                         	dc.b	$01
0008D481 E1FD                       	smpsAlterNote       $FD
0008D483 ECF5                       	smpsPSGAlterVol     $F5
0008D485 9206                       	dc.b	nF1, $06
0008D487 EC04                       	smpsPSGAlterVol     $04
0008D489 E701                       	dc.b	smpsNoAttack, $01
0008D48B EC07                       	smpsPSGAlterVol     $07
0008D48D 8003                       	dc.b	nRst, $03
0008D48F ECF5                       	smpsPSGAlterVol     $F5
0008D491 9207                       	dc.b	nF1, $07
0008D493 EC0B                       	smpsPSGAlterVol     $0B
0008D495 8006                       	dc.b	nRst, $06
0008D497 E100                       	smpsAlterNote       $00
0008D499 01                         	dc.b	$01
0008D49A E103                       	smpsAlterNote       $03
0008D49C 0101                       	dc.b	$01, $01
0008D49E E1FD                       	smpsAlterNote       $FD
0008D4A0 01                         	dc.b	$01
0008D4A1 ECF5                       	smpsPSGAlterVol     $F5
0008D4A3 9207                       	dc.b	nF1, $07
0008D4A5 EC0B                       	smpsPSGAlterVol     $0B
0008D4A7 8004                       	dc.b	nRst, $04
0008D4A9 ECF5                       	smpsPSGAlterVol     $F5
0008D4AB 9206                       	dc.b	nF1, $06
0008D4AD EC0B                       	smpsPSGAlterVol     $0B
0008D4AF 8007                       	dc.b	nRst, $07
0008D4B1 E103                       	smpsAlterNote       $03
0008D4B3 0101                       	dc.b	$01, $01
0008D4B5 E100                       	smpsAlterNote       $00
0008D4B7 01                         	dc.b	$01
0008D4B8 E1FA                       	smpsAlterNote       $FA
0008D4BA 01                         	dc.b	$01
0008D4BB E1FD                       	smpsAlterNote       $FD
0008D4BD ECF5                       	smpsPSGAlterVol     $F5
0008D4BF 9206                       	dc.b	nF1, $06
0008D4C1 EC04                       	smpsPSGAlterVol     $04
0008D4C3 E701                       	dc.b	smpsNoAttack, $01
0008D4C5 EC07                       	smpsPSGAlterVol     $07
0008D4C7 8003                       	dc.b	nRst, $03
0008D4C9 ECF5                       	smpsPSGAlterVol     $F5
0008D4CB 9206                       	dc.b	nF1, $06
0008D4CD EC04                       	smpsPSGAlterVol     $04
0008D4CF E701                       	dc.b	smpsNoAttack, $01
0008D4D1 EC07                       	smpsPSGAlterVol     $07
0008D4D3 8006                       	dc.b	nRst, $06
0008D4D5 E100                       	smpsAlterNote       $00
0008D4D7 01                         	dc.b	$01
0008D4D8 E104                       	smpsAlterNote       $04
0008D4DA 01                         	dc.b	$01
0008D4DB E100                       	smpsAlterNote       $00
0008D4DD 01                         	dc.b	$01
0008D4DE E1FD                       	smpsAlterNote       $FD
0008D4E0 01                         	dc.b	$01
0008D4E1 ECF5                       	smpsPSGAlterVol     $F5
0008D4E3 9206                       	dc.b	nF1, $06
0008D4E5 EC04                       	smpsPSGAlterVol     $04
0008D4E7 E701                       	dc.b	smpsNoAttack, $01
0008D4E9 EC07                       	smpsPSGAlterVol     $07
0008D4EB 8003                       	dc.b	nRst, $03
0008D4ED ECF5                       	smpsPSGAlterVol     $F5
0008D4EF 9207                       	dc.b	nF1, $07
0008D4F1 EC0B                       	smpsPSGAlterVol     $0B
0008D4F3 8007                       	dc.b	nRst, $07
0008D4F5 E104                       	smpsAlterNote       $04
0008D4F7 0101                       	dc.b	$01, $01
0008D4F9 E1FB                       	smpsAlterNote       $FB
0008D4FB 01                         	dc.b	$01
0008D4FC E1F6                       	smpsAlterNote       $F6
0008D4FE 0101                       	dc.b	$01, $01
0008D500 E1FF                       	smpsAlterNote       $FF
0008D502 01                         	dc.b	$01
0008D503 E105                       	smpsAlterNote       $05
0008D505 01                         	dc.b	$01
0008D506 E104                       	smpsAlterNote       $04
0008D508 01                         	dc.b	$01
0008D509 E1FB                       	smpsAlterNote       $FB
0008D50B 01                         	dc.b	$01
0008D50C E1F5                       	smpsAlterNote       $F5
0008D50E 01                         	dc.b	$01
0008D50F E1FC                       	smpsAlterNote       $FC
0008D511 ECF5                       	smpsPSGAlterVol     $F5
0008D513 8B0E                       	dc.b	nBb0, $0E
0008D515 E102                       	smpsAlterNote       $02
0008D517 EC0B                       	smpsPSGAlterVol     $0B
0008D519 8001                       	dc.b	nRst, $01
0008D51B E101                       	smpsAlterNote       $01
0008D51D 01                         	dc.b	$01
0008D51E E1FC                       	smpsAlterNote       $FC
0008D520 01                         	dc.b	$01
0008D521 E1F9                       	smpsAlterNote       $F9
0008D523 0101                       	dc.b	$01, $01
0008D525 E1FF                       	smpsAlterNote       $FF
0008D527 01                         	dc.b	$01
0008D528 E102                       	smpsAlterNote       $02
0008D52A 01                         	dc.b	$01
0008D52B E1FF                       	smpsAlterNote       $FF
0008D52D 01                         	dc.b	$01
0008D52E E1FC                       	smpsAlterNote       $FC
0008D530 01                         	dc.b	$01
0008D531 E1F8                       	smpsAlterNote       $F8
0008D533 01                         	dc.b	$01
0008D534 E1FC                       	smpsAlterNote       $FC
0008D536 01                         	dc.b	$01
0008D537 E101                       	smpsAlterNote       $01
0008D539 01                         	dc.b	$01
0008D53A E102                       	smpsAlterNote       $02
0008D53C 01                         	dc.b	$01
0008D53D E1FF                       	smpsAlterNote       $FF
0008D53F 01                         	dc.b	$01
0008D540 E1FB                       	smpsAlterNote       $FB
0008D542 ECF5                       	smpsPSGAlterVol     $F5
0008D544 8D0D                       	dc.b	nC1, $0D
0008D546 E101                       	smpsAlterNote       $01
0008D548 EC0B                       	smpsPSGAlterVol     $0B
0008D54A 8001                       	dc.b	nRst, $01
0008D54C E102                       	smpsAlterNote       $02
0008D54E 01                         	dc.b	$01
0008D54F E1FF                       	smpsAlterNote       $FF
0008D551 01                         	dc.b	$01
0008D552 E1F9                       	smpsAlterNote       $F9
0008D554 0101                       	dc.b	$01, $01
0008D556 E1FC                       	smpsAlterNote       $FC
0008D558 01                         	dc.b	$01
0008D559 E101                       	smpsAlterNote       $01
0008D55B 0101                       	dc.b	$01, $01
0008D55D E1FC                       	smpsAlterNote       $FC
0008D55F 01                         	dc.b	$01
0008D560 E1F9                       	smpsAlterNote       $F9
0008D562 0101                       	dc.b	$01, $01
0008D564 E1FF                       	smpsAlterNote       $FF
0008D566 01                         	dc.b	$01
0008D567 E102                       	smpsAlterNote       $02
0008D569 01                         	dc.b	$01
0008D56A E101                       	smpsAlterNote       $01
0008D56C 01                         	dc.b	$01
0008D56D E1FC                       	smpsAlterNote       $FC
0008D56F ECF5                       	smpsPSGAlterVol     $F5
0008D571 8F0D                       	dc.b	nD1, $0D
0008D573 E1FF                       	smpsAlterNote       $FF
0008D575 EC04                       	smpsPSGAlterVol     $04
0008D577 E701                       	dc.b	smpsNoAttack, $01
0008D579 EC07                       	smpsPSGAlterVol     $07
0008D57B E103                       	smpsAlterNote       $03
0008D57D 8001                       	dc.b	nRst, $01
0008D57F E102                       	smpsAlterNote       $02
0008D581 01                         	dc.b	$01
0008D582 E1FD                       	smpsAlterNote       $FD
0008D584 01                         	dc.b	$01
0008D585 E1F9                       	smpsAlterNote       $F9
0008D587 01                         	dc.b	$01
0008D588 E1FD                       	smpsAlterNote       $FD
0008D58A 01                         	dc.b	$01
0008D58B E100                       	smpsAlterNote       $00
0008D58D 01                         	dc.b	$01
0008D58E E103                       	smpsAlterNote       $03
0008D590 01                         	dc.b	$01
0008D591 E100                       	smpsAlterNote       $00
0008D593 01                         	dc.b	$01
0008D594 E1FA                       	smpsAlterNote       $FA
0008D596 01                         	dc.b	$01
0008D597 E1F9                       	smpsAlterNote       $F9
0008D599 01                         	dc.b	$01
0008D59A E1FD                       	smpsAlterNote       $FD
0008D59C 01                         	dc.b	$01
0008D59D E102                       	smpsAlterNote       $02
0008D59F 0101                       	dc.b	$01, $01
0008D5A1 E100                       	smpsAlterNote       $00
0008D5A3 01                         	dc.b	$01
0008D5A4 E1FD                       	smpsAlterNote       $FD
0008D5A6 ECF5                       	smpsPSGAlterVol     $F5
0008D5A8 910D                       	dc.b	nE1, $0D
0008D5AA E103                       	smpsAlterNote       $03
0008D5AC EC0B                       	smpsPSGAlterVol     $0B
0008D5AE 8001 01                    	dc.b	nRst, $01, $01
0008D5B1 E100                       	smpsAlterNote       $00
0008D5B3 01                         	dc.b	$01
0008D5B4 E1FA                       	smpsAlterNote       $FA
0008D5B6 0101                       	dc.b	$01, $01
0008D5B8 E100                       	smpsAlterNote       $00
0008D5BA 01                         	dc.b	$01
0008D5BB E103                       	smpsAlterNote       $03
0008D5BD 01                         	dc.b	$01
0008D5BE E1FD                       	smpsAlterNote       $FD
0008D5C0 ECF5                       	smpsPSGAlterVol     $F5
0008D5C2 9206                       	dc.b	nF1, $06
0008D5C4 EC04                       	smpsPSGAlterVol     $04
0008D5C6 E701                       	dc.b	smpsNoAttack, $01
0008D5C8 EC07                       	smpsPSGAlterVol     $07
0008D5CA 8003                       	dc.b	nRst, $03
0008D5CC ECF5                       	smpsPSGAlterVol     $F5
0008D5CE 9207                       	dc.b	nF1, $07
0008D5D0 EC0B                       	smpsPSGAlterVol     $0B
0008D5D2 8006                       	dc.b	nRst, $06
0008D5D4 E100                       	smpsAlterNote       $00
0008D5D6 01                         	dc.b	$01
0008D5D7 E103                       	smpsAlterNote       $03
0008D5D9 0101                       	dc.b	$01, $01
0008D5DB E1FD                       	smpsAlterNote       $FD
0008D5DD 01                         	dc.b	$01
0008D5DE ECF5                       	smpsPSGAlterVol     $F5
0008D5E0 9407                       	dc.b	nG1, $07
0008D5E2 EC0B                       	smpsPSGAlterVol     $0B
0008D5E4 8004                       	dc.b	nRst, $04
0008D5E6 ECF5                       	smpsPSGAlterVol     $F5
0008D5E8 9406                       	dc.b	nG1, $06
0008D5EA EC04                       	smpsPSGAlterVol     $04
0008D5EC E701                       	dc.b	smpsNoAttack, $01
0008D5EE EC07                       	smpsPSGAlterVol     $07
0008D5F0 8006                       	dc.b	nRst, $06
0008D5F2 E103                       	smpsAlterNote       $03
0008D5F4 01                         	dc.b	$01
0008D5F5 E104                       	smpsAlterNote       $04
0008D5F7 01                         	dc.b	$01
0008D5F8 E100                       	smpsAlterNote       $00
0008D5FA 01                         	dc.b	$01
0008D5FB E1F9                       	smpsAlterNote       $F9
0008D5FD 01                         	dc.b	$01
0008D5FE E1FD                       	smpsAlterNote       $FD
0008D600 ECF5                       	smpsPSGAlterVol     $F5
0008D602 9206                       	dc.b	nF1, $06
0008D604 EC04                       	smpsPSGAlterVol     $04
0008D606 E701                       	dc.b	smpsNoAttack, $01
0008D608 EC07                       	smpsPSGAlterVol     $07
0008D60A 8003                       	dc.b	nRst, $03
0008D60C ECF5                       	smpsPSGAlterVol     $F5
0008D60E 9206                       	dc.b	nF1, $06
0008D610 EC04                       	smpsPSGAlterVol     $04
0008D612 E701                       	dc.b	smpsNoAttack, $01
0008D614 EC07                       	smpsPSGAlterVol     $07
0008D616 8006                       	dc.b	nRst, $06
0008D618 E100                       	smpsAlterNote       $00
0008D61A 01                         	dc.b	$01
0008D61B E104                       	smpsAlterNote       $04
0008D61D 01                         	dc.b	$01
0008D61E E103                       	smpsAlterNote       $03
0008D620 01                         	dc.b	$01
0008D621 E1FD                       	smpsAlterNote       $FD
0008D623 01                         	dc.b	$01
0008D624 ECF5                       	smpsPSGAlterVol     $F5
0008D626 9407                       	dc.b	nG1, $07
0008D628 EC0B                       	smpsPSGAlterVol     $0B
0008D62A 8004                       	dc.b	nRst, $04
0008D62C ECF5                       	smpsPSGAlterVol     $F5
0008D62E 9406                       	dc.b	nG1, $06
0008D630 EC0B                       	smpsPSGAlterVol     $0B
0008D632 8007                       	dc.b	nRst, $07
0008D634 E103                       	smpsAlterNote       $03
0008D636 0101                       	dc.b	$01, $01
0008D638 E100                       	smpsAlterNote       $00
0008D63A 01                         	dc.b	$01
0008D63B E1F9                       	smpsAlterNote       $F9
0008D63D 01                         	dc.b	$01
0008D63E E1FD                       	smpsAlterNote       $FD
0008D640 ECF5                       	smpsPSGAlterVol     $F5
0008D642 9206                       	dc.b	nF1, $06
0008D644 EC04                       	smpsPSGAlterVol     $04
0008D646 E701                       	dc.b	smpsNoAttack, $01
0008D648 EC07                       	smpsPSGAlterVol     $07
0008D64A 8003                       	dc.b	nRst, $03
0008D64C ECF5                       	smpsPSGAlterVol     $F5
0008D64E 9206                       	dc.b	nF1, $06
0008D650 EC04                       	smpsPSGAlterVol     $04
0008D652 E701                       	dc.b	smpsNoAttack, $01
0008D654 EC07                       	smpsPSGAlterVol     $07
0008D656 8006                       	dc.b	nRst, $06
0008D658 E100                       	smpsAlterNote       $00
0008D65A 01                         	dc.b	$01
0008D65B E104                       	smpsAlterNote       $04
0008D65D 01                         	dc.b	$01
0008D65E E100                       	smpsAlterNote       $00
0008D660 01                         	dc.b	$01
0008D661 E1FB                       	smpsAlterNote       $FB
0008D663 01                         	dc.b	$01
0008D664 E1FD                       	smpsAlterNote       $FD
0008D666 ECF5                       	smpsPSGAlterVol     $F5
0008D668 9406                       	dc.b	nG1, $06
0008D66A EC04                       	smpsPSGAlterVol     $04
0008D66C E701                       	dc.b	smpsNoAttack, $01
0008D66E EC07                       	smpsPSGAlterVol     $07
0008D670 8003                       	dc.b	nRst, $03
0008D672 ECF5                       	smpsPSGAlterVol     $F5
0008D674 9407                       	dc.b	nG1, $07
0008D676 EC0B                       	smpsPSGAlterVol     $0B
0008D678 8006                       	dc.b	nRst, $06
0008D67A E100                       	smpsAlterNote       $00
0008D67C 01                         	dc.b	$01
0008D67D E103                       	smpsAlterNote       $03
0008D67F 0101                       	dc.b	$01, $01
0008D681 E1FD                       	smpsAlterNote       $FD
0008D683 01                         	dc.b	$01
0008D684 ECF5                       	smpsPSGAlterVol     $F5
0008D686 9207                       	dc.b	nF1, $07
0008D688 EC0B                       	smpsPSGAlterVol     $0B
0008D68A 8004                       	dc.b	nRst, $04
0008D68C ECF5                       	smpsPSGAlterVol     $F5
0008D68E 9206                       	dc.b	nF1, $06
0008D690 EC04                       	smpsPSGAlterVol     $04
0008D692 E701                       	dc.b	smpsNoAttack, $01
0008D694 ECFC                       	smpsPSGAlterVol     $FC
0008D696 E1FC                       	smpsAlterNote       $FC
0008D698 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008D69C EC04                       	smpsPSGAlterVol     $04
0008D69E E701                       	dc.b	smpsNoAttack, $01
0008D6A0 ECFC                       	smpsPSGAlterVol     $FC
0008D6A2 9003                       	dc.b	nEb1, $03
0008D6A4 E1FD                       	smpsAlterNote       $FD
0008D6A6 9403                       	dc.b	nG1, $03
0008D6A8 EC04                       	smpsPSGAlterVol     $04
0008D6AA E701                       	dc.b	smpsNoAttack, $01
0008D6AC E1FE                       	smpsAlterNote       $FE
0008D6AE ECFC                       	smpsPSGAlterVol     $FC
0008D6B0 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008D6B4 EC04                       	smpsPSGAlterVol     $04
0008D6B6 E701                       	dc.b	smpsNoAttack, $01
0008D6B8 EC07                       	smpsPSGAlterVol     $07
0008D6BA 8009                       	dc.b	nRst, $09
0008D6BC E100                       	smpsAlterNote       $00
0008D6BE 01                         	dc.b	$01
0008D6BF F6F5 19                    	smpsJump            music84_Jump07
0008D6C2                            
0008D6C2                            ; PSG2 Data
0008D6C2                            music84_PSG2:
0008D6C2 E1FC                       	smpsAlterNote       $FC
0008D6C4 EC04                       	smpsPSGAlterVol     $04
0008D6C6 8F03                       	dc.b	nD1, $03
0008D6C8 E1FD                       	smpsAlterNote       $FD
0008D6CA 9203                       	dc.b	nF1, $03
0008D6CC EC04                       	smpsPSGAlterVol     $04
0008D6CE E701                       	dc.b	smpsNoAttack, $01
0008D6D0 E1FE                       	smpsAlterNote       $FE
0008D6D2 ECFC                       	smpsPSGAlterVol     $FC
0008D6D4 9603                       	dc.b	nA1, $03
0008D6D6 E1FD                       	smpsAlterNote       $FD
0008D6D8 9103                       	dc.b	nE1, $03
0008D6DA EC04                       	smpsPSGAlterVol     $04
0008D6DC E701                       	dc.b	smpsNoAttack, $01
0008D6DE ECFC                       	smpsPSGAlterVol     $FC
0008D6E0 9403                       	dc.b	nG1, $03
0008D6E2 E1FE                       	smpsAlterNote       $FE
0008D6E4 9703                       	dc.b	nBb1, $03
0008D6E6 EC04                       	smpsPSGAlterVol     $04
0008D6E8 E701                       	dc.b	smpsNoAttack, $01
0008D6EA E1FF                       	smpsAlterNote       $FF
0008D6EC ECFC                       	smpsPSGAlterVol     $FC
0008D6EE 9B02                       	dc.b	nD2, $02
0008D6F0 EC04                       	smpsPSGAlterVol     $04
0008D6F2 E701                       	dc.b	smpsNoAttack, $01
0008D6F4 ECFC                       	smpsPSGAlterVol     $FC
0008D6F6 E1FE                       	smpsAlterNote       $FE
0008D6F8 9A03                       	dc.b	nCs2, $03
0008D6FA EC0B                       	smpsPSGAlterVol     $0B
0008D6FC 800A                       	dc.b	nRst, $0A
0008D6FE E102                       	smpsAlterNote       $02
0008D700 01                         	dc.b	$01
0008D701 E10A                       	smpsAlterNote       $0A
0008D703 01                         	dc.b	$01
0008D704 E102                       	smpsAlterNote       $02
0008D706 01                         	dc.b	$01
0008D707 E1FC                       	smpsAlterNote       $FC
0008D709 01                         	dc.b	$01
0008D70A E10A                       	smpsAlterNote       $0A
0008D70C 01                         	dc.b	$01
0008D70D E1FC                       	smpsAlterNote       $FC
0008D70F 01                         	dc.b	$01
0008D710 E108                       	smpsAlterNote       $08
0008D712 01                         	dc.b	$01
0008D713 E10A                       	smpsAlterNote       $0A
0008D715 01                         	dc.b	$01
0008D716 E102                       	smpsAlterNote       $02
0008D718 01                         	dc.b	$01
0008D719 E1F7                       	smpsAlterNote       $F7
0008D71B 0101                       	dc.b	$01, $01
0008D71D E102                       	smpsAlterNote       $02
0008D71F 01                         	dc.b	$01
0008D720 E108                       	smpsAlterNote       $08
0008D722 0101                       	dc.b	$01, $01
0008D724 E1FC                       	smpsAlterNote       $FC
0008D726 01                         	dc.b	$01
0008D727 E10A                       	smpsAlterNote       $0A
0008D729 01                         	dc.b	$01
0008D72A E1F7                       	smpsAlterNote       $F7
0008D72C 01                         	dc.b	$01
0008D72D E102                       	smpsAlterNote       $02
0008D72F 01                         	dc.b	$01
0008D730 E10A                       	smpsAlterNote       $0A
0008D732 01                         	dc.b	$01
0008D733 E102                       	smpsAlterNote       $02
0008D735 01                         	dc.b	$01
0008D736 E1FC                       	smpsAlterNote       $FC
0008D738 01                         	dc.b	$01
0008D739                            
0008D739                            music84_Jump06:
0008D739 E10A                       	smpsAlterNote       $0A
0008D73B 8001                       	dc.b	nRst, $01
0008D73D E1FC                       	smpsAlterNote       $FC
0008D73F 01                         	dc.b	$01
0008D740 E108                       	smpsAlterNote       $08
0008D742 01                         	dc.b	$01
0008D743 E10A                       	smpsAlterNote       $0A
0008D745 01                         	dc.b	$01
0008D746 E1FC                       	smpsAlterNote       $FC
0008D748 ECF5                       	smpsPSGAlterVol     $F5
0008D74A 8F06                       	dc.b	nD1, $06
0008D74C EC04                       	smpsPSGAlterVol     $04
0008D74E E701                       	dc.b	smpsNoAttack, $01
0008D750 EC07                       	smpsPSGAlterVol     $07
0008D752 8003                       	dc.b	nRst, $03
0008D754 ECF5                       	smpsPSGAlterVol     $F5
0008D756 8F06                       	dc.b	nD1, $06
0008D758 EC04                       	smpsPSGAlterVol     $04
0008D75A E701                       	dc.b	smpsNoAttack, $01
0008D75C EC07                       	smpsPSGAlterVol     $07
0008D75E 8006                       	dc.b	nRst, $06
0008D760 E1FF                       	smpsAlterNote       $FF
0008D762 01                         	dc.b	$01
0008D763 E102                       	smpsAlterNote       $02
0008D765 01                         	dc.b	$01
0008D766 E1FF                       	smpsAlterNote       $FF
0008D768 01                         	dc.b	$01
0008D769 E1F9                       	smpsAlterNote       $F9
0008D76B 01                         	dc.b	$01
0008D76C E1FC                       	smpsAlterNote       $FC
0008D76E ECF5                       	smpsPSGAlterVol     $F5
0008D770 9006                       	dc.b	nEb1, $06
0008D772 EC04                       	smpsPSGAlterVol     $04
0008D774 E701                       	dc.b	smpsNoAttack, $01
0008D776 EC07                       	smpsPSGAlterVol     $07
0008D778 8003                       	dc.b	nRst, $03
0008D77A ECF5                       	smpsPSGAlterVol     $F5
0008D77C 9007                       	dc.b	nEb1, $07
0008D77E EC0B                       	smpsPSGAlterVol     $0B
0008D780 8006                       	dc.b	nRst, $06
0008D782 E1FF                       	smpsAlterNote       $FF
0008D784 01                         	dc.b	$01
0008D785 E103                       	smpsAlterNote       $03
0008D787 0101                       	dc.b	$01, $01
0008D789 E1FC                       	smpsAlterNote       $FC
0008D78B 01                         	dc.b	$01
0008D78C ECF5                       	smpsPSGAlterVol     $F5
0008D78E 8F07                       	dc.b	nD1, $07
0008D790 EC0B                       	smpsPSGAlterVol     $0B
0008D792 8004                       	dc.b	nRst, $04
0008D794 ECF5                       	smpsPSGAlterVol     $F5
0008D796 8F06                       	dc.b	nD1, $06
0008D798 EC04                       	smpsPSGAlterVol     $04
0008D79A E701                       	dc.b	smpsNoAttack, $01
0008D79C EC07                       	smpsPSGAlterVol     $07
0008D79E 8006                       	dc.b	nRst, $06
0008D7A0 E102                       	smpsAlterNote       $02
0008D7A2 01                         	dc.b	$01
0008D7A3 E103                       	smpsAlterNote       $03
0008D7A5 01                         	dc.b	$01
0008D7A6 E1FF                       	smpsAlterNote       $FF
0008D7A8 01                         	dc.b	$01
0008D7A9 E1F9                       	smpsAlterNote       $F9
0008D7AB 01                         	dc.b	$01
0008D7AC E1FC                       	smpsAlterNote       $FC
0008D7AE ECF5                       	smpsPSGAlterVol     $F5
0008D7B0 8F06                       	dc.b	nD1, $06
0008D7B2 EC04                       	smpsPSGAlterVol     $04
0008D7B4 E701                       	dc.b	smpsNoAttack, $01
0008D7B6 EC07                       	smpsPSGAlterVol     $07
0008D7B8 8003                       	dc.b	nRst, $03
0008D7BA ECF5                       	smpsPSGAlterVol     $F5
0008D7BC 8F06                       	dc.b	nD1, $06
0008D7BE EC04                       	smpsPSGAlterVol     $04
0008D7C0 E701                       	dc.b	smpsNoAttack, $01
0008D7C2 EC07                       	smpsPSGAlterVol     $07
0008D7C4 8006                       	dc.b	nRst, $06
0008D7C6 E1FF                       	smpsAlterNote       $FF
0008D7C8 01                         	dc.b	$01
0008D7C9 E103                       	smpsAlterNote       $03
0008D7CB 01                         	dc.b	$01
0008D7CC E1FF                       	smpsAlterNote       $FF
0008D7CE 01                         	dc.b	$01
0008D7CF E1FC                       	smpsAlterNote       $FC
0008D7D1 01                         	dc.b	$01
0008D7D2 ECF5                       	smpsPSGAlterVol     $F5
0008D7D4 8F06                       	dc.b	nD1, $06
0008D7D6 EC04                       	smpsPSGAlterVol     $04
0008D7D8 E701                       	dc.b	smpsNoAttack, $01
0008D7DA EC07                       	smpsPSGAlterVol     $07
0008D7DC 8003                       	dc.b	nRst, $03
0008D7DE ECF5                       	smpsPSGAlterVol     $F5
0008D7E0 8F07                       	dc.b	nD1, $07
0008D7E2 EC0B                       	smpsPSGAlterVol     $0B
0008D7E4 8007                       	dc.b	nRst, $07
0008D7E6 E101                       	smpsAlterNote       $01
0008D7E8 0101                       	dc.b	$01, $01
0008D7EA E1FC                       	smpsAlterNote       $FC
0008D7EC 01                         	dc.b	$01
0008D7ED E1F9                       	smpsAlterNote       $F9
0008D7EF 01                         	dc.b	$01
0008D7F0 E1FC                       	smpsAlterNote       $FC
0008D7F2 ECF5                       	smpsPSGAlterVol     $F5
0008D7F4 9006                       	dc.b	nEb1, $06
0008D7F6 EC0B                       	smpsPSGAlterVol     $0B
0008D7F8 8004                       	dc.b	nRst, $04
0008D7FA ECF5                       	smpsPSGAlterVol     $F5
0008D7FC 9006                       	dc.b	nEb1, $06
0008D7FE EC04                       	smpsPSGAlterVol     $04
0008D800 E701                       	dc.b	smpsNoAttack, $01
0008D802 EC07                       	smpsPSGAlterVol     $07
0008D804 8006                       	dc.b	nRst, $06
0008D806 E100                       	smpsAlterNote       $00
0008D808 01                         	dc.b	$01
0008D809 E102                       	smpsAlterNote       $02
0008D80B 01                         	dc.b	$01
0008D80C E100                       	smpsAlterNote       $00
0008D80E 01                         	dc.b	$01
0008D80F E1FD                       	smpsAlterNote       $FD
0008D811 01                         	dc.b	$01
0008D812 E1FF                       	smpsAlterNote       $FF
0008D814 ECF5                       	smpsPSGAlterVol     $F5
0008D816 9B06                       	dc.b	nD2, $06
0008D818 EC04                       	smpsPSGAlterVol     $04
0008D81A E701                       	dc.b	smpsNoAttack, $01
0008D81C EC07                       	smpsPSGAlterVol     $07
0008D81E 8003                       	dc.b	nRst, $03
0008D820 ECF5                       	smpsPSGAlterVol     $F5
0008D822 9B07                       	dc.b	nD2, $07
0008D824 EC0B                       	smpsPSGAlterVol     $0B
0008D826 8006                       	dc.b	nRst, $06
0008D828 E102                       	smpsAlterNote       $02
0008D82A 01                         	dc.b	$01
0008D82B E106                       	smpsAlterNote       $06
0008D82D 01                         	dc.b	$01
0008D82E E105                       	smpsAlterNote       $05
0008D830 01                         	dc.b	$01
0008D831 E1FF                       	smpsAlterNote       $FF
0008D833 01                         	dc.b	$01
0008D834 ECF5                       	smpsPSGAlterVol     $F5
0008D836 9B07                       	dc.b	nD2, $07
0008D838 EC0B                       	smpsPSGAlterVol     $0B
0008D83A 8004                       	dc.b	nRst, $04
0008D83C ECF5                       	smpsPSGAlterVol     $F5
0008D83E 9B06                       	dc.b	nD2, $06
0008D840 EC0B                       	smpsPSGAlterVol     $0B
0008D842 8007                       	dc.b	nRst, $07
0008D844 E105                       	smpsAlterNote       $05
0008D846 0101                       	dc.b	$01, $01
0008D848 E102                       	smpsAlterNote       $02
0008D84A 01                         	dc.b	$01
0008D84B E1FC                       	smpsAlterNote       $FC
0008D84D 01                         	dc.b	$01
0008D84E E1FF                       	smpsAlterNote       $FF
0008D850 ECF5                       	smpsPSGAlterVol     $F5
0008D852 9B06                       	dc.b	nD2, $06
0008D854 EC04                       	smpsPSGAlterVol     $04
0008D856 E701                       	dc.b	smpsNoAttack, $01
0008D858 EC07                       	smpsPSGAlterVol     $07
0008D85A 8003                       	dc.b	nRst, $03
0008D85C ECF5                       	smpsPSGAlterVol     $F5
0008D85E 9B06                       	dc.b	nD2, $06
0008D860 EC04                       	smpsPSGAlterVol     $04
0008D862 E701                       	dc.b	smpsNoAttack, $01
0008D864 EC07                       	smpsPSGAlterVol     $07
0008D866 8006                       	dc.b	nRst, $06
0008D868 E102                       	smpsAlterNote       $02
0008D86A 01                         	dc.b	$01
0008D86B E106                       	smpsAlterNote       $06
0008D86D 01                         	dc.b	$01
0008D86E E102                       	smpsAlterNote       $02
0008D870 01                         	dc.b	$01
0008D871 E1FF                       	smpsAlterNote       $FF
0008D873 01                         	dc.b	$01
0008D874 ECF5                       	smpsPSGAlterVol     $F5
0008D876 9B06                       	dc.b	nD2, $06
0008D878 EC04                       	smpsPSGAlterVol     $04
0008D87A E701                       	dc.b	smpsNoAttack, $01
0008D87C EC07                       	smpsPSGAlterVol     $07
0008D87E 8003                       	dc.b	nRst, $03
0008D880 ECF5                       	smpsPSGAlterVol     $F5
0008D882 9B07                       	dc.b	nD2, $07
0008D884 EC0B                       	smpsPSGAlterVol     $0B
0008D886 8007                       	dc.b	nRst, $07
0008D888 E105                       	smpsAlterNote       $05
0008D88A 0101                       	dc.b	$01, $01
0008D88C E1FF                       	smpsAlterNote       $FF
0008D88E 01                         	dc.b	$01
0008D88F E1FC                       	smpsAlterNote       $FC
0008D891 01                         	dc.b	$01
0008D892 E1FF                       	smpsAlterNote       $FF
0008D894 ECF5                       	smpsPSGAlterVol     $F5
0008D896 9B06                       	dc.b	nD2, $06
0008D898 EC0B                       	smpsPSGAlterVol     $0B
0008D89A 8004                       	dc.b	nRst, $04
0008D89C ECF5                       	smpsPSGAlterVol     $F5
0008D89E 9B06                       	dc.b	nD2, $06
0008D8A0 EC04                       	smpsPSGAlterVol     $04
0008D8A2 E701                       	dc.b	smpsNoAttack, $01
0008D8A4 EC07                       	smpsPSGAlterVol     $07
0008D8A6 8006                       	dc.b	nRst, $06
0008D8A8 E105                       	smpsAlterNote       $05
0008D8AA 01                         	dc.b	$01
0008D8AB E106                       	smpsAlterNote       $06
0008D8AD 01                         	dc.b	$01
0008D8AE E102                       	smpsAlterNote       $02
0008D8B0 01                         	dc.b	$01
0008D8B1 E1FC                       	smpsAlterNote       $FC
0008D8B3 01                         	dc.b	$01
0008D8B4 E1FF                       	smpsAlterNote       $FF
0008D8B6 ECF5                       	smpsPSGAlterVol     $F5
0008D8B8 9B06                       	dc.b	nD2, $06
0008D8BA EC04                       	smpsPSGAlterVol     $04
0008D8BC E701                       	dc.b	smpsNoAttack, $01
0008D8BE EC07                       	smpsPSGAlterVol     $07
0008D8C0 8003                       	dc.b	nRst, $03
0008D8C2 ECF5                       	smpsPSGAlterVol     $F5
0008D8C4 9B06                       	dc.b	nD2, $06
0008D8C6 EC04                       	smpsPSGAlterVol     $04
0008D8C8 E701                       	dc.b	smpsNoAttack, $01
0008D8CA EC07                       	smpsPSGAlterVol     $07
0008D8CC 8006                       	dc.b	nRst, $06
0008D8CE E102                       	smpsAlterNote       $02
0008D8D0 01                         	dc.b	$01
0008D8D1 E106                       	smpsAlterNote       $06
0008D8D3 01                         	dc.b	$01
0008D8D4 E105                       	smpsAlterNote       $05
0008D8D6 01                         	dc.b	$01
0008D8D7 E1FF                       	smpsAlterNote       $FF
0008D8D9 01                         	dc.b	$01
0008D8DA ECF5                       	smpsPSGAlterVol     $F5
0008D8DC 9B07                       	dc.b	nD2, $07
0008D8DE EC0B                       	smpsPSGAlterVol     $0B
0008D8E0 8004                       	dc.b	nRst, $04
0008D8E2 ECF5                       	smpsPSGAlterVol     $F5
0008D8E4 9B06                       	dc.b	nD2, $06
0008D8E6 EC0B                       	smpsPSGAlterVol     $0B
0008D8E8 8007                       	dc.b	nRst, $07
0008D8EA E105                       	smpsAlterNote       $05
0008D8EC 0101                       	dc.b	$01, $01
0008D8EE E102                       	smpsAlterNote       $02
0008D8F0 01                         	dc.b	$01
0008D8F1 E1FC                       	smpsAlterNote       $FC
0008D8F3 01                         	dc.b	$01
0008D8F4 E1FF                       	smpsAlterNote       $FF
0008D8F6 ECF5                       	smpsPSGAlterVol     $F5
0008D8F8 9B06                       	dc.b	nD2, $06
0008D8FA EC04                       	smpsPSGAlterVol     $04
0008D8FC E701                       	dc.b	smpsNoAttack, $01
0008D8FE EC07                       	smpsPSGAlterVol     $07
0008D900 8003                       	dc.b	nRst, $03
0008D902 ECF5                       	smpsPSGAlterVol     $F5
0008D904 9B06                       	dc.b	nD2, $06
0008D906 EC04                       	smpsPSGAlterVol     $04
0008D908 E701                       	dc.b	smpsNoAttack, $01
0008D90A EC07                       	smpsPSGAlterVol     $07
0008D90C 8006                       	dc.b	nRst, $06
0008D90E E102                       	smpsAlterNote       $02
0008D910 01                         	dc.b	$01
0008D911 E106                       	smpsAlterNote       $06
0008D913 01                         	dc.b	$01
0008D914 E102                       	smpsAlterNote       $02
0008D916 01                         	dc.b	$01
0008D917 E1FF                       	smpsAlterNote       $FF
0008D919 01                         	dc.b	$01
0008D91A ECF5                       	smpsPSGAlterVol     $F5
0008D91C 9B06                       	dc.b	nD2, $06
0008D91E EC04                       	smpsPSGAlterVol     $04
0008D920 E701                       	dc.b	smpsNoAttack, $01
0008D922 EC07                       	smpsPSGAlterVol     $07
0008D924 8003                       	dc.b	nRst, $03
0008D926 ECF5                       	smpsPSGAlterVol     $F5
0008D928 9B07                       	dc.b	nD2, $07
0008D92A E1FE                       	smpsAlterNote       $FE
0008D92C 9706                       	dc.b	nBb1, $06
0008D92E EC04                       	smpsPSGAlterVol     $04
0008D930 E701                       	dc.b	smpsNoAttack, $01
0008D932 ECFC                       	smpsPSGAlterVol     $FC
0008D934 9703                       	dc.b	nBb1, $03
0008D936 EC04                       	smpsPSGAlterVol     $04
0008D938 E701                       	dc.b	smpsNoAttack, $01
0008D93A ECFC                       	smpsPSGAlterVol     $FC
0008D93C 9702                       	dc.b	nBb1, $02
0008D93E EC04                       	smpsPSGAlterVol     $04
0008D940 E701                       	dc.b	smpsNoAttack, $01
0008D942 ECFC                       	smpsPSGAlterVol     $FC
0008D944 9606                       	dc.b	nA1, $06
0008D946 EC04                       	smpsPSGAlterVol     $04
0008D948 E701                       	dc.b	smpsNoAttack, $01
0008D94A EC07                       	smpsPSGAlterVol     $07
0008D94C 8006                       	dc.b	nRst, $06
0008D94E E101                       	smpsAlterNote       $01
0008D950 01                         	dc.b	$01
0008D951 E107                       	smpsAlterNote       $07
0008D953 01                         	dc.b	$01
0008D954 E101                       	smpsAlterNote       $01
0008D956 01                         	dc.b	$01
0008D957 E1F8                       	smpsAlterNote       $F8
0008D959 01                         	dc.b	$01
0008D95A E1F7                       	smpsAlterNote       $F7
0008D95C 01                         	dc.b	$01
0008D95D E1FC                       	smpsAlterNote       $FC
0008D95F 01                         	dc.b	$01
0008D960 E106                       	smpsAlterNote       $06
0008D962 01                         	dc.b	$01
0008D963 E107                       	smpsAlterNote       $07
0008D965 01                         	dc.b	$01
0008D966 E101                       	smpsAlterNote       $01
0008D968 01                         	dc.b	$01
0008D969 E1F8                       	smpsAlterNote       $F8
0008D96B 0101                       	dc.b	$01, $01
0008D96D E1FC                       	smpsAlterNote       $FC
0008D96F ECF5                       	smpsPSGAlterVol     $F5
0008D971 8F06                       	dc.b	nD1, $06
0008D973 EC04                       	smpsPSGAlterVol     $04
0008D975 E701                       	dc.b	smpsNoAttack, $01
0008D977 EC07                       	smpsPSGAlterVol     $07
0008D979 8003                       	dc.b	nRst, $03
0008D97B ECF5                       	smpsPSGAlterVol     $F5
0008D97D 8F06                       	dc.b	nD1, $06
0008D97F EC04                       	smpsPSGAlterVol     $04
0008D981 E701                       	dc.b	smpsNoAttack, $01
0008D983 EC07                       	smpsPSGAlterVol     $07
0008D985 8006                       	dc.b	nRst, $06
0008D987 E1FF                       	smpsAlterNote       $FF
0008D989 01                         	dc.b	$01
0008D98A E102                       	smpsAlterNote       $02
0008D98C 01                         	dc.b	$01
0008D98D E101                       	smpsAlterNote       $01
0008D98F 01                         	dc.b	$01
0008D990 E1FC                       	smpsAlterNote       $FC
0008D992 01                         	dc.b	$01
0008D993 ECF5                       	smpsPSGAlterVol     $F5
0008D995 9007                       	dc.b	nEb1, $07
0008D997 EC0B                       	smpsPSGAlterVol     $0B
0008D999 8004                       	dc.b	nRst, $04
0008D99B ECF5                       	smpsPSGAlterVol     $F5
0008D99D 9006                       	dc.b	nEb1, $06
0008D99F EC0B                       	smpsPSGAlterVol     $0B
0008D9A1 8007                       	dc.b	nRst, $07
0008D9A3 E103                       	smpsAlterNote       $03
0008D9A5 0101                       	dc.b	$01, $01
0008D9A7 E1FC                       	smpsAlterNote       $FC
0008D9A9 01                         	dc.b	$01
0008D9AA E1F9                       	smpsAlterNote       $F9
0008D9AC 01                         	dc.b	$01
0008D9AD E1FC                       	smpsAlterNote       $FC
0008D9AF ECF5                       	smpsPSGAlterVol     $F5
0008D9B1 8F06                       	dc.b	nD1, $06
0008D9B3 EC04                       	smpsPSGAlterVol     $04
0008D9B5 E701                       	dc.b	smpsNoAttack, $01
0008D9B7 EC07                       	smpsPSGAlterVol     $07
0008D9B9 8003                       	dc.b	nRst, $03
0008D9BB ECF5                       	smpsPSGAlterVol     $F5
0008D9BD 8F06                       	dc.b	nD1, $06
0008D9BF EC04                       	smpsPSGAlterVol     $04
0008D9C1 E701                       	dc.b	smpsNoAttack, $01
0008D9C3 EC07                       	smpsPSGAlterVol     $07
0008D9C5 8006                       	dc.b	nRst, $06
0008D9C7 E1FF                       	smpsAlterNote       $FF
0008D9C9 01                         	dc.b	$01
0008D9CA E103                       	smpsAlterNote       $03
0008D9CC 01                         	dc.b	$01
0008D9CD E1FF                       	smpsAlterNote       $FF
0008D9CF 01                         	dc.b	$01
0008D9D0 E1F9                       	smpsAlterNote       $F9
0008D9D2 01                         	dc.b	$01
0008D9D3 E1FC                       	smpsAlterNote       $FC
0008D9D5 ECF5                       	smpsPSGAlterVol     $F5
0008D9D7 8F06                       	dc.b	nD1, $06
0008D9D9 EC04                       	smpsPSGAlterVol     $04
0008D9DB E701                       	dc.b	smpsNoAttack, $01
0008D9DD EC07                       	smpsPSGAlterVol     $07
0008D9DF 8003                       	dc.b	nRst, $03
0008D9E1 ECF5                       	smpsPSGAlterVol     $F5
0008D9E3 8F07                       	dc.b	nD1, $07
0008D9E5 EC0B                       	smpsPSGAlterVol     $0B
0008D9E7 8006                       	dc.b	nRst, $06
0008D9E9 E1FF                       	smpsAlterNote       $FF
0008D9EB 01                         	dc.b	$01
0008D9EC E102                       	smpsAlterNote       $02
0008D9EE 0101                       	dc.b	$01, $01
0008D9F0 E1FC                       	smpsAlterNote       $FC
0008D9F2 01                         	dc.b	$01
0008D9F3 ECF5                       	smpsPSGAlterVol     $F5
0008D9F5 8F07                       	dc.b	nD1, $07
0008D9F7 EC0B                       	smpsPSGAlterVol     $0B
0008D9F9 8004                       	dc.b	nRst, $04
0008D9FB ECF5                       	smpsPSGAlterVol     $F5
0008D9FD 8F06                       	dc.b	nD1, $06
0008D9FF EC04                       	smpsPSGAlterVol     $04
0008DA01 E701                       	dc.b	smpsNoAttack, $01
0008DA03 EC07                       	smpsPSGAlterVol     $07
0008DA05 8006                       	dc.b	nRst, $06
0008DA07 E101                       	smpsAlterNote       $01
0008DA09 01                         	dc.b	$01
0008DA0A E102                       	smpsAlterNote       $02
0008DA0C 01                         	dc.b	$01
0008DA0D E1FF                       	smpsAlterNote       $FF
0008DA0F 01                         	dc.b	$01
0008DA10 E1F9                       	smpsAlterNote       $F9
0008DA12 01                         	dc.b	$01
0008DA13 E1FC                       	smpsAlterNote       $FC
0008DA15 ECF5                       	smpsPSGAlterVol     $F5
0008DA17 9006                       	dc.b	nEb1, $06
0008DA19 EC04                       	smpsPSGAlterVol     $04
0008DA1B E701                       	dc.b	smpsNoAttack, $01
0008DA1D EC07                       	smpsPSGAlterVol     $07
0008DA1F 8003                       	dc.b	nRst, $03
0008DA21 ECF5                       	smpsPSGAlterVol     $F5
0008DA23 9006                       	dc.b	nEb1, $06
0008DA25 EC04                       	smpsPSGAlterVol     $04
0008DA27 E701                       	dc.b	smpsNoAttack, $01
0008DA29 EC07                       	smpsPSGAlterVol     $07
0008DA2B 8006                       	dc.b	nRst, $06
0008DA2D E100                       	smpsAlterNote       $00
0008DA2F 01                         	dc.b	$01
0008DA30 E102                       	smpsAlterNote       $02
0008DA32 01                         	dc.b	$01
0008DA33 E100                       	smpsAlterNote       $00
0008DA35 01                         	dc.b	$01
0008DA36 E1FF                       	smpsAlterNote       $FF
0008DA38 01                         	dc.b	$01
0008DA39 ECF5                       	smpsPSGAlterVol     $F5
0008DA3B 9B06                       	dc.b	nD2, $06
0008DA3D EC04                       	smpsPSGAlterVol     $04
0008DA3F E701                       	dc.b	smpsNoAttack, $01
0008DA41 EC07                       	smpsPSGAlterVol     $07
0008DA43 8003                       	dc.b	nRst, $03
0008DA45 ECF5                       	smpsPSGAlterVol     $F5
0008DA47 9B07                       	dc.b	nD2, $07
0008DA49 EC0B                       	smpsPSGAlterVol     $0B
0008DA4B 8007                       	dc.b	nRst, $07
0008DA4D E105                       	smpsAlterNote       $05
0008DA4F 0101                       	dc.b	$01, $01
0008DA51 E1FF                       	smpsAlterNote       $FF
0008DA53 01                         	dc.b	$01
0008DA54 E1FC                       	smpsAlterNote       $FC
0008DA56 01                         	dc.b	$01
0008DA57 E1FF                       	smpsAlterNote       $FF
0008DA59 ECF5                       	smpsPSGAlterVol     $F5
0008DA5B 9B06                       	dc.b	nD2, $06
0008DA5D EC0B                       	smpsPSGAlterVol     $0B
0008DA5F 8004                       	dc.b	nRst, $04
0008DA61 ECF5                       	smpsPSGAlterVol     $F5
0008DA63 9B06                       	dc.b	nD2, $06
0008DA65 EC04                       	smpsPSGAlterVol     $04
0008DA67 E701                       	dc.b	smpsNoAttack, $01
0008DA69 EC07                       	smpsPSGAlterVol     $07
0008DA6B 8006                       	dc.b	nRst, $06
0008DA6D E102                       	smpsAlterNote       $02
0008DA6F 01                         	dc.b	$01
0008DA70 E106                       	smpsAlterNote       $06
0008DA72 01                         	dc.b	$01
0008DA73 E102                       	smpsAlterNote       $02
0008DA75 01                         	dc.b	$01
0008DA76 E1FC                       	smpsAlterNote       $FC
0008DA78 01                         	dc.b	$01
0008DA79 E1FF                       	smpsAlterNote       $FF
0008DA7B ECF5                       	smpsPSGAlterVol     $F5
0008DA7D 9B06                       	dc.b	nD2, $06
0008DA7F EC04                       	smpsPSGAlterVol     $04
0008DA81 E701                       	dc.b	smpsNoAttack, $01
0008DA83 EC07                       	smpsPSGAlterVol     $07
0008DA85 8003                       	dc.b	nRst, $03
0008DA87 ECF5                       	smpsPSGAlterVol     $F5
0008DA89 9B07                       	dc.b	nD2, $07
0008DA8B EC0B                       	smpsPSGAlterVol     $0B
0008DA8D 8006                       	dc.b	nRst, $06
0008DA8F E102                       	smpsAlterNote       $02
0008DA91 01                         	dc.b	$01
0008DA92 E105                       	smpsAlterNote       $05
0008DA94 0101                       	dc.b	$01, $01
0008DA96 E1FF                       	smpsAlterNote       $FF
0008DA98 01                         	dc.b	$01
0008DA99 ECF5                       	smpsPSGAlterVol     $F5
0008DA9B 9B07                       	dc.b	nD2, $07
0008DA9D EC0B                       	smpsPSGAlterVol     $0B
0008DA9F 8004                       	dc.b	nRst, $04
0008DAA1 ECF5                       	smpsPSGAlterVol     $F5
0008DAA3 9B06                       	dc.b	nD2, $06
0008DAA5 EC0B                       	smpsPSGAlterVol     $0B
0008DAA7 8007                       	dc.b	nRst, $07
0008DAA9 E105                       	smpsAlterNote       $05
0008DAAB 0101                       	dc.b	$01, $01
0008DAAD E102                       	smpsAlterNote       $02
0008DAAF 01                         	dc.b	$01
0008DAB0 E1FC                       	smpsAlterNote       $FC
0008DAB2 01                         	dc.b	$01
0008DAB3 E1FF                       	smpsAlterNote       $FF
0008DAB5 ECF5                       	smpsPSGAlterVol     $F5
0008DAB7 9B06                       	dc.b	nD2, $06
0008DAB9 EC04                       	smpsPSGAlterVol     $04
0008DABB E701                       	dc.b	smpsNoAttack, $01
0008DABD EC07                       	smpsPSGAlterVol     $07
0008DABF 8003                       	dc.b	nRst, $03
0008DAC1 ECF5                       	smpsPSGAlterVol     $F5
0008DAC3 9B06                       	dc.b	nD2, $06
0008DAC5 EC04                       	smpsPSGAlterVol     $04
0008DAC7 E701                       	dc.b	smpsNoAttack, $01
0008DAC9 EC07                       	smpsPSGAlterVol     $07
0008DACB 8006                       	dc.b	nRst, $06
0008DACD E102                       	smpsAlterNote       $02
0008DACF 01                         	dc.b	$01
0008DAD0 E106                       	smpsAlterNote       $06
0008DAD2 01                         	dc.b	$01
0008DAD3 E102                       	smpsAlterNote       $02
0008DAD5 01                         	dc.b	$01
0008DAD6 E1FF                       	smpsAlterNote       $FF
0008DAD8 01                         	dc.b	$01
0008DAD9 ECF5                       	smpsPSGAlterVol     $F5
0008DADB 9B06                       	dc.b	nD2, $06
0008DADD EC04                       	smpsPSGAlterVol     $04
0008DADF E701                       	dc.b	smpsNoAttack, $01
0008DAE1 EC07                       	smpsPSGAlterVol     $07
0008DAE3 8003                       	dc.b	nRst, $03
0008DAE5 ECF5                       	smpsPSGAlterVol     $F5
0008DAE7 9B07                       	dc.b	nD2, $07
0008DAE9 EC0B                       	smpsPSGAlterVol     $0B
0008DAEB 8007                       	dc.b	nRst, $07
0008DAED E105                       	smpsAlterNote       $05
0008DAEF 0101                       	dc.b	$01, $01
0008DAF1 E1FF                       	smpsAlterNote       $FF
0008DAF3 01                         	dc.b	$01
0008DAF4 E1FC                       	smpsAlterNote       $FC
0008DAF6 01                         	dc.b	$01
0008DAF7 E1FF                       	smpsAlterNote       $FF
0008DAF9 ECF5                       	smpsPSGAlterVol     $F5
0008DAFB 9B06                       	dc.b	nD2, $06
0008DAFD EC0B                       	smpsPSGAlterVol     $0B
0008DAFF 8004                       	dc.b	nRst, $04
0008DB01 ECF5                       	smpsPSGAlterVol     $F5
0008DB03 9B06                       	dc.b	nD2, $06
0008DB05 EC04                       	smpsPSGAlterVol     $04
0008DB07 E701                       	dc.b	smpsNoAttack, $01
0008DB09 EC07                       	smpsPSGAlterVol     $07
0008DB0B 8006                       	dc.b	nRst, $06
0008DB0D E102                       	smpsAlterNote       $02
0008DB0F 01                         	dc.b	$01
0008DB10 E106                       	smpsAlterNote       $06
0008DB12 01                         	dc.b	$01
0008DB13 E102                       	smpsAlterNote       $02
0008DB15 01                         	dc.b	$01
0008DB16 E1FC                       	smpsAlterNote       $FC
0008DB18 01                         	dc.b	$01
0008DB19 E1FF                       	smpsAlterNote       $FF
0008DB1B ECF5                       	smpsPSGAlterVol     $F5
0008DB1D 9B06                       	dc.b	nD2, $06
0008DB1F EC04                       	smpsPSGAlterVol     $04
0008DB21 E701                       	dc.b	smpsNoAttack, $01
0008DB23 EC07                       	smpsPSGAlterVol     $07
0008DB25 8003                       	dc.b	nRst, $03
0008DB27 ECF5                       	smpsPSGAlterVol     $F5
0008DB29 9B06                       	dc.b	nD2, $06
0008DB2B EC04                       	smpsPSGAlterVol     $04
0008DB2D E701                       	dc.b	smpsNoAttack, $01
0008DB2F EC07                       	smpsPSGAlterVol     $07
0008DB31 8006                       	dc.b	nRst, $06
0008DB33 E102                       	smpsAlterNote       $02
0008DB35 01                         	dc.b	$01
0008DB36 E106                       	smpsAlterNote       $06
0008DB38 01                         	dc.b	$01
0008DB39 E105                       	smpsAlterNote       $05
0008DB3B 01                         	dc.b	$01
0008DB3C E1FF                       	smpsAlterNote       $FF
0008DB3E 01                         	dc.b	$01
0008DB3F ECF5                       	smpsPSGAlterVol     $F5
0008DB41 9B07                       	dc.b	nD2, $07
0008DB43 EC0B                       	smpsPSGAlterVol     $0B
0008DB45 8004                       	dc.b	nRst, $04
0008DB47 ECF5                       	smpsPSGAlterVol     $F5
0008DB49 9B06                       	dc.b	nD2, $06
0008DB4B EC0B                       	smpsPSGAlterVol     $0B
0008DB4D 8007                       	dc.b	nRst, $07
0008DB4F E105                       	smpsAlterNote       $05
0008DB51 0101                       	dc.b	$01, $01
0008DB53 E101                       	smpsAlterNote       $01
0008DB55 01                         	dc.b	$01
0008DB56 E1FB                       	smpsAlterNote       $FB
0008DB58 01                         	dc.b	$01
0008DB59 E1FE                       	smpsAlterNote       $FE
0008DB5B ECF5                       	smpsPSGAlterVol     $F5
0008DB5D 9A06                       	dc.b	nCs2, $06
0008DB5F EC04                       	smpsPSGAlterVol     $04
0008DB61 E701                       	dc.b	smpsNoAttack, $01
0008DB63 EC07                       	smpsPSGAlterVol     $07
0008DB65 8003                       	dc.b	nRst, $03
0008DB67 ECF5                       	smpsPSGAlterVol     $F5
0008DB69 9A06                       	dc.b	nCs2, $06
0008DB6B EC04                       	smpsPSGAlterVol     $04
0008DB6D E701                       	dc.b	smpsNoAttack, $01
0008DB6F EC07                       	smpsPSGAlterVol     $07
0008DB71 8003                       	dc.b	nRst, $03
0008DB73 E1FC                       	smpsAlterNote       $FC
0008DB75 ECF5                       	smpsPSGAlterVol     $F5
0008DB77 8F07                       	dc.b	nD1, $07
0008DB79 EC0B                       	smpsPSGAlterVol     $0B
0008DB7B 8006                       	dc.b	nRst, $06
0008DB7D E1FF                       	smpsAlterNote       $FF
0008DB7F 01                         	dc.b	$01
0008DB80 E103                       	smpsAlterNote       $03
0008DB82 01                         	dc.b	$01
0008DB83 E102                       	smpsAlterNote       $02
0008DB85 01                         	dc.b	$01
0008DB86 E1FC                       	smpsAlterNote       $FC
0008DB88 01                         	dc.b	$01
0008DB89 E1F8                       	smpsAlterNote       $F8
0008DB8B 01                         	dc.b	$01
0008DB8C E1FC                       	smpsAlterNote       $FC
0008DB8E 01                         	dc.b	$01
0008DB8F E1FF                       	smpsAlterNote       $FF
0008DB91 01                         	dc.b	$01
0008DB92 E103                       	smpsAlterNote       $03
0008DB94 01                         	dc.b	$01
0008DB95 E1FC                       	smpsAlterNote       $FC
0008DB97 ECF5                       	smpsPSGAlterVol     $F5
0008DB99 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008DB9D EC04                       	smpsPSGAlterVol     $04
0008DB9F E701                       	dc.b	smpsNoAttack, $01
0008DBA1 EC07                       	smpsPSGAlterVol     $07
0008DBA3 8009                       	dc.b	nRst, $09
0008DBA5 E1FF                       	smpsAlterNote       $FF
0008DBA7 01                         	dc.b	$01
0008DBA8 E103                       	smpsAlterNote       $03
0008DBAA 01                         	dc.b	$01
0008DBAB E102                       	smpsAlterNote       $02
0008DBAD 01                         	dc.b	$01
0008DBAE E1FC                       	smpsAlterNote       $FC
0008DBB0 01                         	dc.b	$01
0008DBB1 E1F8                       	smpsAlterNote       $F8
0008DBB3 01                         	dc.b	$01
0008DBB4 E1FC                       	smpsAlterNote       $FC
0008DBB6 01                         	dc.b	$01
0008DBB7 E1FF                       	smpsAlterNote       $FF
0008DBB9 01                         	dc.b	$01
0008DBBA E103                       	smpsAlterNote       $03
0008DBBC 01                         	dc.b	$01
0008DBBD E1FF                       	smpsAlterNote       $FF
0008DBBF 01                         	dc.b	$01
0008DBC0 E1F9                       	smpsAlterNote       $F9
0008DBC2 01                         	dc.b	$01
0008DBC3 E1F8                       	smpsAlterNote       $F8
0008DBC5 01                         	dc.b	$01
0008DBC6 E1FC                       	smpsAlterNote       $FC
0008DBC8 01                         	dc.b	$01
0008DBC9 E102                       	smpsAlterNote       $02
0008DBCB 0101                       	dc.b	$01, $01
0008DBCD E1FF                       	smpsAlterNote       $FF
0008DBCF 01                         	dc.b	$01
0008DBD0 E1FC                       	smpsAlterNote       $FC
0008DBD2 ECF5                       	smpsPSGAlterVol     $F5
0008DBD4 8F02                       	dc.b	nD1, $02
0008DBD6 EC04                       	smpsPSGAlterVol     $04
0008DBD8 E701                       	dc.b	smpsNoAttack, $01
0008DBDA ECFC                       	smpsPSGAlterVol     $FC
0008DBDC E1FB                       	smpsAlterNote       $FB
0008DBDE 8D06                       	dc.b	nC1, $06
0008DBE0 EC04                       	smpsPSGAlterVol     $04
0008DBE2 E701                       	dc.b	smpsNoAttack, $01
0008DBE4 EC07                       	smpsPSGAlterVol     $07
0008DBE6 8006                       	dc.b	nRst, $06
0008DBE8 E1FE                       	smpsAlterNote       $FE
0008DBEA 01                         	dc.b	$01
0008DBEB E102                       	smpsAlterNote       $02
0008DBED 01                         	dc.b	$01
0008DBEE E1FE                       	smpsAlterNote       $FE
0008DBF0 01                         	dc.b	$01
0008DBF1 E1FB                       	smpsAlterNote       $FB
0008DBF3 01                         	dc.b	$01
0008DBF4 E1F7                       	smpsAlterNote       $F7
0008DBF6 01                         	dc.b	$01
0008DBF7 E1FB                       	smpsAlterNote       $FB
0008DBF9 01                         	dc.b	$01
0008DBFA E101                       	smpsAlterNote       $01
0008DBFC 01                         	dc.b	$01
0008DBFD E102                       	smpsAlterNote       $02
0008DBFF 01                         	dc.b	$01
0008DC00 E1FB                       	smpsAlterNote       $FB
0008DC02 ECF5                       	smpsPSGAlterVol     $F5
0008DC04 8D02                       	dc.b	nC1, $02
0008DC06 EC04                       	smpsPSGAlterVol     $04
0008DC08 E701                       	dc.b	smpsNoAttack, $01
0008DC0A E1FC                       	smpsAlterNote       $FC
0008DC0C ECFC                       	smpsPSGAlterVol     $FC
0008DC0E 8F0D                       	dc.b	nD1, $0D
0008DC10 E1FF                       	smpsAlterNote       $FF
0008DC12 E701                       	dc.b	smpsNoAttack, $01
0008DC14 E103                       	smpsAlterNote       $03
0008DC16 E701                       	dc.b	smpsNoAttack, $01
0008DC18 E1FF                       	smpsAlterNote       $FF
0008DC1A E701                       	dc.b	smpsNoAttack, $01
0008DC1C E1FC                       	smpsAlterNote       $FC
0008DC1E E701                       	dc.b	smpsNoAttack, $01
0008DC20 E1F8                       	smpsAlterNote       $F8
0008DC22 E701                       	dc.b	smpsNoAttack, $01
0008DC24 E1FC                       	smpsAlterNote       $FC
0008DC26 E701                       	dc.b	smpsNoAttack, $01
0008DC28 E102                       	smpsAlterNote       $02
0008DC2A E701                       	dc.b	smpsNoAttack, $01
0008DC2C E103                       	smpsAlterNote       $03
0008DC2E E701                       	dc.b	smpsNoAttack, $01
0008DC30 E1FF                       	smpsAlterNote       $FF
0008DC32 E701                       	dc.b	smpsNoAttack, $01
0008DC34 E1F9                       	smpsAlterNote       $F9
0008DC36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC3A E1FC                       	smpsAlterNote       $FC
0008DC3C E701                       	dc.b	smpsNoAttack, $01
0008DC3E E102                       	smpsAlterNote       $02
0008DC40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC44 E1FC                       	smpsAlterNote       $FC
0008DC46 E701                       	dc.b	smpsNoAttack, $01
0008DC48 E1F9                       	smpsAlterNote       $F9
0008DC4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC4E E1FF                       	smpsAlterNote       $FF
0008DC50 EC04                       	smpsPSGAlterVol     $04
0008DC52 E701                       	dc.b	smpsNoAttack, $01
0008DC54 EC07                       	smpsPSGAlterVol     $07
0008DC56 E103                       	smpsAlterNote       $03
0008DC58 8001                       	dc.b	nRst, $01
0008DC5A E102                       	smpsAlterNote       $02
0008DC5C 01                         	dc.b	$01
0008DC5D E1FB                       	smpsAlterNote       $FB
0008DC5F 01                         	dc.b	$01
0008DC60 E1F7                       	smpsAlterNote       $F7
0008DC62 01                         	dc.b	$01
0008DC63 E1FB                       	smpsAlterNote       $FB
0008DC65 01                         	dc.b	$01
0008DC66 E102                       	smpsAlterNote       $02
0008DC68 01                         	dc.b	$01
0008DC69 E103                       	smpsAlterNote       $03
0008DC6B 01                         	dc.b	$01
0008DC6C E1FB                       	smpsAlterNote       $FB
0008DC6E ECF5                       	smpsPSGAlterVol     $F5
0008DC70 8E06                       	dc.b	nCs1, $06
0008DC72 EC04                       	smpsPSGAlterVol     $04
0008DC74 E701                       	dc.b	smpsNoAttack, $01
0008DC76 EC07                       	smpsPSGAlterVol     $07
0008DC78 8003                       	dc.b	nRst, $03
0008DC7A ECF5                       	smpsPSGAlterVol     $F5
0008DC7C 8E06                       	dc.b	nCs1, $06
0008DC7E EC04                       	smpsPSGAlterVol     $04
0008DC80 E701                       	dc.b	smpsNoAttack, $01
0008DC82 EC07                       	smpsPSGAlterVol     $07
0008DC84 8006                       	dc.b	nRst, $06
0008DC86 E1FE                       	smpsAlterNote       $FE
0008DC88 01                         	dc.b	$01
0008DC89 E102                       	smpsAlterNote       $02
0008DC8B 01                         	dc.b	$01
0008DC8C E1FE                       	smpsAlterNote       $FE
0008DC8E 01                         	dc.b	$01
0008DC8F E1F9                       	smpsAlterNote       $F9
0008DC91 01                         	dc.b	$01
0008DC92 E1FC                       	smpsAlterNote       $FC
0008DC94 ECF5                       	smpsPSGAlterVol     $F5
0008DC96 8F06                       	dc.b	nD1, $06
0008DC98 EC04                       	smpsPSGAlterVol     $04
0008DC9A E701                       	dc.b	smpsNoAttack, $01
0008DC9C EC07                       	smpsPSGAlterVol     $07
0008DC9E 8003                       	dc.b	nRst, $03
0008DCA0 ECF5                       	smpsPSGAlterVol     $F5
0008DCA2 8F07                       	dc.b	nD1, $07
0008DCA4 EC0B                       	smpsPSGAlterVol     $0B
0008DCA6 8006                       	dc.b	nRst, $06
0008DCA8 E1FF                       	smpsAlterNote       $FF
0008DCAA 01                         	dc.b	$01
0008DCAB E102                       	smpsAlterNote       $02
0008DCAD 0101                       	dc.b	$01, $01
0008DCAF E1FB                       	smpsAlterNote       $FB
0008DCB1 01                         	dc.b	$01
0008DCB2 ECF5                       	smpsPSGAlterVol     $F5
0008DCB4 8E07                       	dc.b	nCs1, $07
0008DCB6 EC0B                       	smpsPSGAlterVol     $0B
0008DCB8 8004                       	dc.b	nRst, $04
0008DCBA ECF5                       	smpsPSGAlterVol     $F5
0008DCBC 8E06                       	dc.b	nCs1, $06
0008DCBE EC04                       	smpsPSGAlterVol     $04
0008DCC0 E701                       	dc.b	smpsNoAttack, $01
0008DCC2 EC07                       	smpsPSGAlterVol     $07
0008DCC4 8006                       	dc.b	nRst, $06
0008DCC6 E101                       	smpsAlterNote       $01
0008DCC8 01                         	dc.b	$01
0008DCC9 E102                       	smpsAlterNote       $02
0008DCCB 01                         	dc.b	$01
0008DCCC E1FE                       	smpsAlterNote       $FE
0008DCCE 01                         	dc.b	$01
0008DCCF E1F8                       	smpsAlterNote       $F8
0008DCD1 01                         	dc.b	$01
0008DCD2 E1FB                       	smpsAlterNote       $FB
0008DCD4 ECF5                       	smpsPSGAlterVol     $F5
0008DCD6 8E06                       	dc.b	nCs1, $06
0008DCD8 EC04                       	smpsPSGAlterVol     $04
0008DCDA E701                       	dc.b	smpsNoAttack, $01
0008DCDC EC07                       	smpsPSGAlterVol     $07
0008DCDE 8003                       	dc.b	nRst, $03
0008DCE0 ECF5                       	smpsPSGAlterVol     $F5
0008DCE2 8E06                       	dc.b	nCs1, $06
0008DCE4 EC04                       	smpsPSGAlterVol     $04
0008DCE6 E701                       	dc.b	smpsNoAttack, $01
0008DCE8 EC07                       	smpsPSGAlterVol     $07
0008DCEA 8004                       	dc.b	nRst, $04
0008DCEC E1FC                       	smpsAlterNote       $FC
0008DCEE ECF5                       	smpsPSGAlterVol     $F5
0008DCF0 8F06                       	dc.b	nD1, $06
0008DCF2 EC0B                       	smpsPSGAlterVol     $0B
0008DCF4 8006                       	dc.b	nRst, $06
0008DCF6 E1FF                       	smpsAlterNote       $FF
0008DCF8 01                         	dc.b	$01
0008DCF9 E102                       	smpsAlterNote       $02
0008DCFB 0101                       	dc.b	$01, $01
0008DCFD E1FC                       	smpsAlterNote       $FC
0008DCFF 01                         	dc.b	$01
0008DD00 E1F8                       	smpsAlterNote       $F8
0008DD02 01                         	dc.b	$01
0008DD03 E1F9                       	smpsAlterNote       $F9
0008DD05 01                         	dc.b	$01
0008DD06 E1FF                       	smpsAlterNote       $FF
0008DD08 01                         	dc.b	$01
0008DD09 E103                       	smpsAlterNote       $03
0008DD0B 01                         	dc.b	$01
0008DD0C E1FC                       	smpsAlterNote       $FC
0008DD0E ECF5                       	smpsPSGAlterVol     $F5
0008DD10 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008DD14 EC04                       	smpsPSGAlterVol     $04
0008DD16 E701                       	dc.b	smpsNoAttack, $01
0008DD18 EC07                       	smpsPSGAlterVol     $07
0008DD1A 8009                       	dc.b	nRst, $09
0008DD1C E1FF                       	smpsAlterNote       $FF
0008DD1E 01                         	dc.b	$01
0008DD1F E102                       	smpsAlterNote       $02
0008DD21 0101                       	dc.b	$01, $01
0008DD23 E1FC                       	smpsAlterNote       $FC
0008DD25 01                         	dc.b	$01
0008DD26 E1F8                       	smpsAlterNote       $F8
0008DD28 01                         	dc.b	$01
0008DD29 E1F9                       	smpsAlterNote       $F9
0008DD2B 01                         	dc.b	$01
0008DD2C E1FF                       	smpsAlterNote       $FF
0008DD2E 01                         	dc.b	$01
0008DD2F E103                       	smpsAlterNote       $03
0008DD31 01                         	dc.b	$01
0008DD32 E1FF                       	smpsAlterNote       $FF
0008DD34 01                         	dc.b	$01
0008DD35 E1FC                       	smpsAlterNote       $FC
0008DD37 01                         	dc.b	$01
0008DD38 E1F8                       	smpsAlterNote       $F8
0008DD3A 01                         	dc.b	$01
0008DD3B E1FC                       	smpsAlterNote       $FC
0008DD3D 01                         	dc.b	$01
0008DD3E E102                       	smpsAlterNote       $02
0008DD40 01                         	dc.b	$01
0008DD41 E103                       	smpsAlterNote       $03
0008DD43 01                         	dc.b	$01
0008DD44 E1FF                       	smpsAlterNote       $FF
0008DD46 01                         	dc.b	$01
0008DD47 E1FC                       	smpsAlterNote       $FC
0008DD49 ECF5                       	smpsPSGAlterVol     $F5
0008DD4B 8F03                       	dc.b	nD1, $03
0008DD4D E1FB                       	smpsAlterNote       $FB
0008DD4F 8D06                       	dc.b	nC1, $06
0008DD51 EC04                       	smpsPSGAlterVol     $04
0008DD53 E701                       	dc.b	smpsNoAttack, $01
0008DD55 EC07                       	smpsPSGAlterVol     $07
0008DD57 8006                       	dc.b	nRst, $06
0008DD59 E1FE                       	smpsAlterNote       $FE
0008DD5B 01                         	dc.b	$01
0008DD5C E102                       	smpsAlterNote       $02
0008DD5E 01                         	dc.b	$01
0008DD5F E101                       	smpsAlterNote       $01
0008DD61 01                         	dc.b	$01
0008DD62 E1FB                       	smpsAlterNote       $FB
0008DD64 01                         	dc.b	$01
0008DD65 E1F7                       	smpsAlterNote       $F7
0008DD67 01                         	dc.b	$01
0008DD68 E1FB                       	smpsAlterNote       $FB
0008DD6A 01                         	dc.b	$01
0008DD6B E1FE                       	smpsAlterNote       $FE
0008DD6D 01                         	dc.b	$01
0008DD6E E102                       	smpsAlterNote       $02
0008DD70 01                         	dc.b	$01
0008DD71 E1FB                       	smpsAlterNote       $FB
0008DD73 ECF5                       	smpsPSGAlterVol     $F5
0008DD75 8D03                       	dc.b	nC1, $03
0008DD77 E1FC                       	smpsAlterNote       $FC
0008DD79 8F0D                       	dc.b	nD1, $0D
0008DD7B E1FF                       	smpsAlterNote       $FF
0008DD7D E701                       	dc.b	smpsNoAttack, $01
0008DD7F E103                       	smpsAlterNote       $03
0008DD81 E701                       	dc.b	smpsNoAttack, $01
0008DD83 E1FF                       	smpsAlterNote       $FF
0008DD85 E701                       	dc.b	smpsNoAttack, $01
0008DD87 E1FC                       	smpsAlterNote       $FC
0008DD89 E701                       	dc.b	smpsNoAttack, $01
0008DD8B E1F8                       	smpsAlterNote       $F8
0008DD8D E701                       	dc.b	smpsNoAttack, $01
0008DD8F E1FC                       	smpsAlterNote       $FC
0008DD91 E701                       	dc.b	smpsNoAttack, $01
0008DD93 E102                       	smpsAlterNote       $02
0008DD95 E701                       	dc.b	smpsNoAttack, $01
0008DD97 E103                       	smpsAlterNote       $03
0008DD99 E701                       	dc.b	smpsNoAttack, $01
0008DD9B E1FF                       	smpsAlterNote       $FF
0008DD9D E701                       	dc.b	smpsNoAttack, $01
0008DD9F E1F9                       	smpsAlterNote       $F9
0008DDA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDA5 E1FC                       	smpsAlterNote       $FC
0008DDA7 E701                       	dc.b	smpsNoAttack, $01
0008DDA9 E102                       	smpsAlterNote       $02
0008DDAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDAF E1FF                       	smpsAlterNote       $FF
0008DDB1 E701                       	dc.b	smpsNoAttack, $01
0008DDB3 E1F9                       	smpsAlterNote       $F9
0008DDB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDB9 E1FF                       	smpsAlterNote       $FF
0008DDBB EC04                       	smpsPSGAlterVol     $04
0008DDBD E701                       	dc.b	smpsNoAttack, $01
0008DDBF EC07                       	smpsPSGAlterVol     $07
0008DDC1 E103                       	smpsAlterNote       $03
0008DDC3 8001                       	dc.b	nRst, $01
0008DDC5 E102                       	smpsAlterNote       $02
0008DDC7 01                         	dc.b	$01
0008DDC8 E1FB                       	smpsAlterNote       $FB
0008DDCA 01                         	dc.b	$01
0008DDCB E1F7                       	smpsAlterNote       $F7
0008DDCD 01                         	dc.b	$01
0008DDCE E1FB                       	smpsAlterNote       $FB
0008DDD0 01                         	dc.b	$01
0008DDD1 E1FF                       	smpsAlterNote       $FF
0008DDD3 01                         	dc.b	$01
0008DDD4 E103                       	smpsAlterNote       $03
0008DDD6 01                         	dc.b	$01
0008DDD7 E1FB                       	smpsAlterNote       $FB
0008DDD9 ECF5                       	smpsPSGAlterVol     $F5
0008DDDB 8E06                       	dc.b	nCs1, $06
0008DDDD EC04                       	smpsPSGAlterVol     $04
0008DDDF E701                       	dc.b	smpsNoAttack, $01
0008DDE1 EC07                       	smpsPSGAlterVol     $07
0008DDE3 8003                       	dc.b	nRst, $03
0008DDE5 ECF5                       	smpsPSGAlterVol     $F5
0008DDE7 8E06                       	dc.b	nCs1, $06
0008DDE9 EC04                       	smpsPSGAlterVol     $04
0008DDEB E701                       	dc.b	smpsNoAttack, $01
0008DDED EC07                       	smpsPSGAlterVol     $07
0008DDEF 8006                       	dc.b	nRst, $06
0008DDF1 E1FE                       	smpsAlterNote       $FE
0008DDF3 01                         	dc.b	$01
0008DDF4 E102                       	smpsAlterNote       $02
0008DDF6 01                         	dc.b	$01
0008DDF7 E1FE                       	smpsAlterNote       $FE
0008DDF9 01                         	dc.b	$01
0008DDFA E1FC                       	smpsAlterNote       $FC
0008DDFC 01                         	dc.b	$01
0008DDFD ECF5                       	smpsPSGAlterVol     $F5
0008DDFF 8F06                       	dc.b	nD1, $06
0008DE01 EC04                       	smpsPSGAlterVol     $04
0008DE03 E701                       	dc.b	smpsNoAttack, $01
0008DE05 EC07                       	smpsPSGAlterVol     $07
0008DE07 8003                       	dc.b	nRst, $03
0008DE09 ECF5                       	smpsPSGAlterVol     $F5
0008DE0B 8F07                       	dc.b	nD1, $07
0008DE0D EC0B                       	smpsPSGAlterVol     $0B
0008DE0F 8007                       	dc.b	nRst, $07
0008DE11 E102                       	smpsAlterNote       $02
0008DE13 0101                       	dc.b	$01, $01
0008DE15 E1FB                       	smpsAlterNote       $FB
0008DE17 01                         	dc.b	$01
0008DE18 E1F8                       	smpsAlterNote       $F8
0008DE1A 01                         	dc.b	$01
0008DE1B E1FB                       	smpsAlterNote       $FB
0008DE1D ECF5                       	smpsPSGAlterVol     $F5
0008DE1F 8E06                       	dc.b	nCs1, $06
0008DE21 EC0B                       	smpsPSGAlterVol     $0B
0008DE23 8004                       	dc.b	nRst, $04
0008DE25 ECF5                       	smpsPSGAlterVol     $F5
0008DE27 8E06                       	dc.b	nCs1, $06
0008DE29 EC04                       	smpsPSGAlterVol     $04
0008DE2B E701                       	dc.b	smpsNoAttack, $01
0008DE2D EC07                       	smpsPSGAlterVol     $07
0008DE2F 8006                       	dc.b	nRst, $06
0008DE31 E1FE                       	smpsAlterNote       $FE
0008DE33 01                         	dc.b	$01
0008DE34 E102                       	smpsAlterNote       $02
0008DE36 01                         	dc.b	$01
0008DE37 E1FE                       	smpsAlterNote       $FE
0008DE39 01                         	dc.b	$01
0008DE3A E1F9                       	smpsAlterNote       $F9
0008DE3C 01                         	dc.b	$01
0008DE3D E1FC                       	smpsAlterNote       $FC
0008DE3F ECF5                       	smpsPSGAlterVol     $F5
0008DE41 8F06                       	dc.b	nD1, $06
0008DE43 EC04                       	smpsPSGAlterVol     $04
0008DE45 E701                       	dc.b	smpsNoAttack, $01
0008DE47 EC07                       	smpsPSGAlterVol     $07
0008DE49 8003                       	dc.b	nRst, $03
0008DE4B ECF5                       	smpsPSGAlterVol     $F5
0008DE4D 8F06                       	dc.b	nD1, $06
0008DE4F EC04                       	smpsPSGAlterVol     $04
0008DE51 E701                       	dc.b	smpsNoAttack, $01
0008DE53 EC07                       	smpsPSGAlterVol     $07
0008DE55 8006                       	dc.b	nRst, $06
0008DE57 E1FF                       	smpsAlterNote       $FF
0008DE59 01                         	dc.b	$01
0008DE5A E103                       	smpsAlterNote       $03
0008DE5C 01                         	dc.b	$01
0008DE5D E102                       	smpsAlterNote       $02
0008DE5F 01                         	dc.b	$01
0008DE60 E1FB                       	smpsAlterNote       $FB
0008DE62 01                         	dc.b	$01
0008DE63 ECF5                       	smpsPSGAlterVol     $F5
0008DE65 8E07                       	dc.b	nCs1, $07
0008DE67 EC0B                       	smpsPSGAlterVol     $0B
0008DE69 8004                       	dc.b	nRst, $04
0008DE6B ECF5                       	smpsPSGAlterVol     $F5
0008DE6D 8E06                       	dc.b	nCs1, $06
0008DE6F EC0B                       	smpsPSGAlterVol     $0B
0008DE71 8007                       	dc.b	nRst, $07
0008DE73 E101                       	smpsAlterNote       $01
0008DE75 0101                       	dc.b	$01, $01
0008DE77 E1FE                       	smpsAlterNote       $FE
0008DE79 01                         	dc.b	$01
0008DE7A E1F9                       	smpsAlterNote       $F9
0008DE7C 01                         	dc.b	$01
0008DE7D E1FC                       	smpsAlterNote       $FC
0008DE7F ECF5                       	smpsPSGAlterVol     $F5
0008DE81 8F06                       	dc.b	nD1, $06
0008DE83 EC04                       	smpsPSGAlterVol     $04
0008DE85 E701                       	dc.b	smpsNoAttack, $01
0008DE87 EC07                       	smpsPSGAlterVol     $07
0008DE89 8003                       	dc.b	nRst, $03
0008DE8B ECF5                       	smpsPSGAlterVol     $F5
0008DE8D 8F06                       	dc.b	nD1, $06
0008DE8F EC04                       	smpsPSGAlterVol     $04
0008DE91 E701                       	dc.b	smpsNoAttack, $01
0008DE93 EC07                       	smpsPSGAlterVol     $07
0008DE95 8006                       	dc.b	nRst, $06
0008DE97 E1FF                       	smpsAlterNote       $FF
0008DE99 01                         	dc.b	$01
0008DE9A E103                       	smpsAlterNote       $03
0008DE9C 01                         	dc.b	$01
0008DE9D E1FF                       	smpsAlterNote       $FF
0008DE9F 01                         	dc.b	$01
0008DEA0 E1FB                       	smpsAlterNote       $FB
0008DEA2 01                         	dc.b	$01
0008DEA3 ECF5                       	smpsPSGAlterVol     $F5
0008DEA5 8E06                       	dc.b	nCs1, $06
0008DEA7 EC04                       	smpsPSGAlterVol     $04
0008DEA9 E701                       	dc.b	smpsNoAttack, $01
0008DEAB EC07                       	smpsPSGAlterVol     $07
0008DEAD 8003                       	dc.b	nRst, $03
0008DEAF ECF5                       	smpsPSGAlterVol     $F5
0008DEB1 8E07                       	dc.b	nCs1, $07
0008DEB3 E1FF                       	smpsAlterNote       $FF
0008DEB5 9B06                       	dc.b	nD2, $06
0008DEB7 EC04                       	smpsPSGAlterVol     $04
0008DEB9 E701                       	dc.b	smpsNoAttack, $01
0008DEBB ECFC                       	smpsPSGAlterVol     $FC
0008DEBD 9B03                       	dc.b	nD2, $03
0008DEBF EC04                       	smpsPSGAlterVol     $04
0008DEC1 E701                       	dc.b	smpsNoAttack, $01
0008DEC3 ECFC                       	smpsPSGAlterVol     $FC
0008DEC5 9B02                       	dc.b	nD2, $02
0008DEC7 EC04                       	smpsPSGAlterVol     $04
0008DEC9 E701                       	dc.b	smpsNoAttack, $01
0008DECB ECFC                       	smpsPSGAlterVol     $FC
0008DECD E1FE                       	smpsAlterNote       $FE
0008DECF 9A03                       	dc.b	nCs2, $03
0008DED1 EC0B                       	smpsPSGAlterVol     $0B
0008DED3 800A                       	dc.b	nRst, $0A
0008DED5 E102                       	smpsAlterNote       $02
0008DED7 01                         	dc.b	$01
0008DED8 E10A                       	smpsAlterNote       $0A
0008DEDA 01                         	dc.b	$01
0008DEDB E102                       	smpsAlterNote       $02
0008DEDD 01                         	dc.b	$01
0008DEDE E1F7                       	smpsAlterNote       $F7
0008DEE0 01                         	dc.b	$01
0008DEE1 E10A                       	smpsAlterNote       $0A
0008DEE3 01                         	dc.b	$01
0008DEE4 E1FC                       	smpsAlterNote       $FC
0008DEE6 01                         	dc.b	$01
0008DEE7 E108                       	smpsAlterNote       $08
0008DEE9 0101                       	dc.b	$01, $01
0008DEEB E102                       	smpsAlterNote       $02
0008DEED 01                         	dc.b	$01
0008DEEE E1F7                       	smpsAlterNote       $F7
0008DEF0 0101                       	dc.b	$01, $01
0008DEF2 E1FC                       	smpsAlterNote       $FC
0008DEF4 ECF5                       	smpsPSGAlterVol     $F5
0008DEF6 8F06                       	dc.b	nD1, $06
0008DEF8 EC04                       	smpsPSGAlterVol     $04
0008DEFA E701                       	dc.b	smpsNoAttack, $01
0008DEFC EC07                       	smpsPSGAlterVol     $07
0008DEFE 8003                       	dc.b	nRst, $03
0008DF00 ECF5                       	smpsPSGAlterVol     $F5
0008DF02 8F06                       	dc.b	nD1, $06
0008DF04 EC04                       	smpsPSGAlterVol     $04
0008DF06 E701                       	dc.b	smpsNoAttack, $01
0008DF08 EC07                       	smpsPSGAlterVol     $07
0008DF0A 8006                       	dc.b	nRst, $06
0008DF0C E1FF                       	smpsAlterNote       $FF
0008DF0E 01                         	dc.b	$01
0008DF0F E102                       	smpsAlterNote       $02
0008DF11 01                         	dc.b	$01
0008DF12 E101                       	smpsAlterNote       $01
0008DF14 01                         	dc.b	$01
0008DF15 E1FC                       	smpsAlterNote       $FC
0008DF17 01                         	dc.b	$01
0008DF18 ECF5                       	smpsPSGAlterVol     $F5
0008DF1A 9007                       	dc.b	nEb1, $07
0008DF1C EC0B                       	smpsPSGAlterVol     $0B
0008DF1E 8004                       	dc.b	nRst, $04
0008DF20 ECF5                       	smpsPSGAlterVol     $F5
0008DF22 9006                       	dc.b	nEb1, $06
0008DF24 EC0B                       	smpsPSGAlterVol     $0B
0008DF26 8007                       	dc.b	nRst, $07
0008DF28 E103                       	smpsAlterNote       $03
0008DF2A 0101                       	dc.b	$01, $01
0008DF2C E1FF                       	smpsAlterNote       $FF
0008DF2E 01                         	dc.b	$01
0008DF2F E1F9                       	smpsAlterNote       $F9
0008DF31 01                         	dc.b	$01
0008DF32 E1FC                       	smpsAlterNote       $FC
0008DF34 ECF5                       	smpsPSGAlterVol     $F5
0008DF36 8F06                       	dc.b	nD1, $06
0008DF38 EC04                       	smpsPSGAlterVol     $04
0008DF3A E701                       	dc.b	smpsNoAttack, $01
0008DF3C EC07                       	smpsPSGAlterVol     $07
0008DF3E 8003                       	dc.b	nRst, $03
0008DF40 ECF5                       	smpsPSGAlterVol     $F5
0008DF42 8F06                       	dc.b	nD1, $06
0008DF44 EC04                       	smpsPSGAlterVol     $04
0008DF46 E701                       	dc.b	smpsNoAttack, $01
0008DF48 EC07                       	smpsPSGAlterVol     $07
0008DF4A 8006                       	dc.b	nRst, $06
0008DF4C E1FF                       	smpsAlterNote       $FF
0008DF4E 01                         	dc.b	$01
0008DF4F E103                       	smpsAlterNote       $03
0008DF51 01                         	dc.b	$01
0008DF52 E1FF                       	smpsAlterNote       $FF
0008DF54 01                         	dc.b	$01
0008DF55 E1F9                       	smpsAlterNote       $F9
0008DF57 01                         	dc.b	$01
0008DF58 E1FC                       	smpsAlterNote       $FC
0008DF5A ECF5                       	smpsPSGAlterVol     $F5
0008DF5C 8F06                       	dc.b	nD1, $06
0008DF5E EC04                       	smpsPSGAlterVol     $04
0008DF60 E701                       	dc.b	smpsNoAttack, $01
0008DF62 EC07                       	smpsPSGAlterVol     $07
0008DF64 8003                       	dc.b	nRst, $03
0008DF66 ECF5                       	smpsPSGAlterVol     $F5
0008DF68 8F07                       	dc.b	nD1, $07
0008DF6A EC0B                       	smpsPSGAlterVol     $0B
0008DF6C 8006                       	dc.b	nRst, $06
0008DF6E E1FF                       	smpsAlterNote       $FF
0008DF70 01                         	dc.b	$01
0008DF71 E102                       	smpsAlterNote       $02
0008DF73 0101                       	dc.b	$01, $01
0008DF75 E1FC                       	smpsAlterNote       $FC
0008DF77 01                         	dc.b	$01
0008DF78 ECF5                       	smpsPSGAlterVol     $F5
0008DF7A 8F07                       	dc.b	nD1, $07
0008DF7C EC0B                       	smpsPSGAlterVol     $0B
0008DF7E 8004                       	dc.b	nRst, $04
0008DF80 ECF5                       	smpsPSGAlterVol     $F5
0008DF82 8F06                       	dc.b	nD1, $06
0008DF84 EC04                       	smpsPSGAlterVol     $04
0008DF86 E701                       	dc.b	smpsNoAttack, $01
0008DF88 EC07                       	smpsPSGAlterVol     $07
0008DF8A 8006                       	dc.b	nRst, $06
0008DF8C E101                       	smpsAlterNote       $01
0008DF8E 01                         	dc.b	$01
0008DF8F E102                       	smpsAlterNote       $02
0008DF91 01                         	dc.b	$01
0008DF92 E1FF                       	smpsAlterNote       $FF
0008DF94 01                         	dc.b	$01
0008DF95 E1F9                       	smpsAlterNote       $F9
0008DF97 01                         	dc.b	$01
0008DF98 E1FC                       	smpsAlterNote       $FC
0008DF9A ECF5                       	smpsPSGAlterVol     $F5
0008DF9C 9006                       	dc.b	nEb1, $06
0008DF9E EC04                       	smpsPSGAlterVol     $04
0008DFA0 E701                       	dc.b	smpsNoAttack, $01
0008DFA2 EC07                       	smpsPSGAlterVol     $07
0008DFA4 8003                       	dc.b	nRst, $03
0008DFA6 ECF5                       	smpsPSGAlterVol     $F5
0008DFA8 9006                       	dc.b	nEb1, $06
0008DFAA EC04                       	smpsPSGAlterVol     $04
0008DFAC E701                       	dc.b	smpsNoAttack, $01
0008DFAE EC07                       	smpsPSGAlterVol     $07
0008DFB0 8006                       	dc.b	nRst, $06
0008DFB2 E100                       	smpsAlterNote       $00
0008DFB4 01                         	dc.b	$01
0008DFB5 E102                       	smpsAlterNote       $02
0008DFB7 01                         	dc.b	$01
0008DFB8 E100                       	smpsAlterNote       $00
0008DFBA 01                         	dc.b	$01
0008DFBB E1FF                       	smpsAlterNote       $FF
0008DFBD 01                         	dc.b	$01
0008DFBE ECF5                       	smpsPSGAlterVol     $F5
0008DFC0 9B06                       	dc.b	nD2, $06
0008DFC2 EC04                       	smpsPSGAlterVol     $04
0008DFC4 E701                       	dc.b	smpsNoAttack, $01
0008DFC6 EC07                       	smpsPSGAlterVol     $07
0008DFC8 8003                       	dc.b	nRst, $03
0008DFCA ECF5                       	smpsPSGAlterVol     $F5
0008DFCC 9B07                       	dc.b	nD2, $07
0008DFCE EC0B                       	smpsPSGAlterVol     $0B
0008DFD0 8007                       	dc.b	nRst, $07
0008DFD2 E105                       	smpsAlterNote       $05
0008DFD4 0101                       	dc.b	$01, $01
0008DFD6 E1FF                       	smpsAlterNote       $FF
0008DFD8 01                         	dc.b	$01
0008DFD9 E1FC                       	smpsAlterNote       $FC
0008DFDB 01                         	dc.b	$01
0008DFDC E1FF                       	smpsAlterNote       $FF
0008DFDE ECF5                       	smpsPSGAlterVol     $F5
0008DFE0 9B06                       	dc.b	nD2, $06
0008DFE2 EC0B                       	smpsPSGAlterVol     $0B
0008DFE4 8004                       	dc.b	nRst, $04
0008DFE6 ECF5                       	smpsPSGAlterVol     $F5
0008DFE8 9B06                       	dc.b	nD2, $06
0008DFEA EC04                       	smpsPSGAlterVol     $04
0008DFEC E701                       	dc.b	smpsNoAttack, $01
0008DFEE EC07                       	smpsPSGAlterVol     $07
0008DFF0 8006                       	dc.b	nRst, $06
0008DFF2 E102                       	smpsAlterNote       $02
0008DFF4 01                         	dc.b	$01
0008DFF5 E106                       	smpsAlterNote       $06
0008DFF7 01                         	dc.b	$01
0008DFF8 E102                       	smpsAlterNote       $02
0008DFFA 01                         	dc.b	$01
0008DFFB E1FC                       	smpsAlterNote       $FC
0008DFFD 01                         	dc.b	$01
0008DFFE E1FF                       	smpsAlterNote       $FF
0008E000 ECF5                       	smpsPSGAlterVol     $F5
0008E002 9B06                       	dc.b	nD2, $06
0008E004 EC04                       	smpsPSGAlterVol     $04
0008E006 E701                       	dc.b	smpsNoAttack, $01
0008E008 EC07                       	smpsPSGAlterVol     $07
0008E00A 8003                       	dc.b	nRst, $03
0008E00C ECF5                       	smpsPSGAlterVol     $F5
0008E00E 9B07                       	dc.b	nD2, $07
0008E010 EC0B                       	smpsPSGAlterVol     $0B
0008E012 8006                       	dc.b	nRst, $06
0008E014 E102                       	smpsAlterNote       $02
0008E016 01                         	dc.b	$01
0008E017 E105                       	smpsAlterNote       $05
0008E019 0101                       	dc.b	$01, $01
0008E01B E1FF                       	smpsAlterNote       $FF
0008E01D 01                         	dc.b	$01
0008E01E ECF5                       	smpsPSGAlterVol     $F5
0008E020 9B07                       	dc.b	nD2, $07
0008E022 EC0B                       	smpsPSGAlterVol     $0B
0008E024 8004                       	dc.b	nRst, $04
0008E026 ECF5                       	smpsPSGAlterVol     $F5
0008E028 9B06                       	dc.b	nD2, $06
0008E02A EC04                       	smpsPSGAlterVol     $04
0008E02C E701                       	dc.b	smpsNoAttack, $01
0008E02E EC07                       	smpsPSGAlterVol     $07
0008E030 8006                       	dc.b	nRst, $06
0008E032 E105                       	smpsAlterNote       $05
0008E034 0101                       	dc.b	$01, $01
0008E036 E102                       	smpsAlterNote       $02
0008E038 01                         	dc.b	$01
0008E039 E1FC                       	smpsAlterNote       $FC
0008E03B 01                         	dc.b	$01
0008E03C E1FF                       	smpsAlterNote       $FF
0008E03E ECF5                       	smpsPSGAlterVol     $F5
0008E040 9B06                       	dc.b	nD2, $06
0008E042 EC04                       	smpsPSGAlterVol     $04
0008E044 E701                       	dc.b	smpsNoAttack, $01
0008E046 EC07                       	smpsPSGAlterVol     $07
0008E048 8003                       	dc.b	nRst, $03
0008E04A ECF5                       	smpsPSGAlterVol     $F5
0008E04C 9B06                       	dc.b	nD2, $06
0008E04E EC04                       	smpsPSGAlterVol     $04
0008E050 E701                       	dc.b	smpsNoAttack, $01
0008E052 EC07                       	smpsPSGAlterVol     $07
0008E054 8006                       	dc.b	nRst, $06
0008E056 E102                       	smpsAlterNote       $02
0008E058 01                         	dc.b	$01
0008E059 E106                       	smpsAlterNote       $06
0008E05B 01                         	dc.b	$01
0008E05C E102                       	smpsAlterNote       $02
0008E05E 01                         	dc.b	$01
0008E05F E1FF                       	smpsAlterNote       $FF
0008E061 01                         	dc.b	$01
0008E062 ECF5                       	smpsPSGAlterVol     $F5
0008E064 9B06                       	dc.b	nD2, $06
0008E066 EC04                       	smpsPSGAlterVol     $04
0008E068 E701                       	dc.b	smpsNoAttack, $01
0008E06A EC07                       	smpsPSGAlterVol     $07
0008E06C 8003                       	dc.b	nRst, $03
0008E06E ECF5                       	smpsPSGAlterVol     $F5
0008E070 9B07                       	dc.b	nD2, $07
0008E072 EC0B                       	smpsPSGAlterVol     $0B
0008E074 8007                       	dc.b	nRst, $07
0008E076 E107                       	smpsAlterNote       $07
0008E078 0101                       	dc.b	$01, $01
0008E07A E1FE                       	smpsAlterNote       $FE
0008E07C 01                         	dc.b	$01
0008E07D E1FA                       	smpsAlterNote       $FA
0008E07F 0101                       	dc.b	$01, $01
0008E081 E103                       	smpsAlterNote       $03
0008E083 01                         	dc.b	$01
0008E084 E109                       	smpsAlterNote       $09
0008E086 01                         	dc.b	$01
0008E087 E107                       	smpsAlterNote       $07
0008E089 01                         	dc.b	$01
0008E08A E1FE                       	smpsAlterNote       $FE
0008E08C 01                         	dc.b	$01
0008E08D E108                       	smpsAlterNote       $08
0008E08F 01                         	dc.b	$01
0008E090 E1FD                       	smpsAlterNote       $FD
0008E092 ECF5                       	smpsPSGAlterVol     $F5
0008E094 940E                       	dc.b	nG1, $0E
0008E096 E103                       	smpsAlterNote       $03
0008E098 EC0B                       	smpsPSGAlterVol     $0B
0008E09A 8001 01                    	dc.b	nRst, $01, $01
0008E09D E1FD                       	smpsAlterNote       $FD
0008E09F 01                         	dc.b	$01
0008E0A0 E1FB                       	smpsAlterNote       $FB
0008E0A2 0101                       	dc.b	$01, $01
0008E0A4 E100                       	smpsAlterNote       $00
0008E0A6 01                         	dc.b	$01
0008E0A7 E103                       	smpsAlterNote       $03
0008E0A9 01                         	dc.b	$01
0008E0AA E100                       	smpsAlterNote       $00
0008E0AC 01                         	dc.b	$01
0008E0AD E1FD                       	smpsAlterNote       $FD
0008E0AF 01                         	dc.b	$01
0008E0B0 E1FA                       	smpsAlterNote       $FA
0008E0B2 01                         	dc.b	$01
0008E0B3 E1FD                       	smpsAlterNote       $FD
0008E0B5 01                         	dc.b	$01
0008E0B6 E103                       	smpsAlterNote       $03
0008E0B8 0101                       	dc.b	$01, $01
0008E0BA E100                       	smpsAlterNote       $00
0008E0BC 01                         	dc.b	$01
0008E0BD E1FE                       	smpsAlterNote       $FE
0008E0BF ECF5                       	smpsPSGAlterVol     $F5
0008E0C1 960D                       	dc.b	nA1, $0D
0008E0C3 E104                       	smpsAlterNote       $04
0008E0C5 EC0B                       	smpsPSGAlterVol     $0B
0008E0C7 8001 01                    	dc.b	nRst, $01, $01
0008E0CA E101                       	smpsAlterNote       $01
0008E0CC 01                         	dc.b	$01
0008E0CD E1FB                       	smpsAlterNote       $FB
0008E0CF 0101                       	dc.b	$01, $01
0008E0D1 E1FE                       	smpsAlterNote       $FE
0008E0D3 01                         	dc.b	$01
0008E0D4 E104                       	smpsAlterNote       $04
0008E0D6 0101                       	dc.b	$01, $01
0008E0D8 E1FE                       	smpsAlterNote       $FE
0008E0DA 01                         	dc.b	$01
0008E0DB E1FB                       	smpsAlterNote       $FB
0008E0DD 0101                       	dc.b	$01, $01
0008E0DF E101                       	smpsAlterNote       $01
0008E0E1 01                         	dc.b	$01
0008E0E2 E104                       	smpsAlterNote       $04
0008E0E4 0101                       	dc.b	$01, $01
0008E0E6 E1FE                       	smpsAlterNote       $FE
0008E0E8 ECF5                       	smpsPSGAlterVol     $F5
0008E0EA 970D                       	dc.b	nBb1, $0D
0008E0EC E101                       	smpsAlterNote       $01
0008E0EE EC04                       	smpsPSGAlterVol     $04
0008E0F0 E701                       	dc.b	smpsNoAttack, $01
0008E0F2 EC07                       	smpsPSGAlterVol     $07
0008E0F4 E104                       	smpsAlterNote       $04
0008E0F6 8001                       	dc.b	nRst, $01
0008E0F8 E103                       	smpsAlterNote       $03
0008E0FA 01                         	dc.b	$01
0008E0FB E1FE                       	smpsAlterNote       $FE
0008E0FD 01                         	dc.b	$01
0008E0FE E1FA                       	smpsAlterNote       $FA
0008E100 01                         	dc.b	$01
0008E101 E1FE                       	smpsAlterNote       $FE
0008E103 01                         	dc.b	$01
0008E104 E101                       	smpsAlterNote       $01
0008E106 01                         	dc.b	$01
0008E107 E104                       	smpsAlterNote       $04
0008E109 01                         	dc.b	$01
0008E10A E101                       	smpsAlterNote       $01
0008E10C 01                         	dc.b	$01
0008E10D E1FB                       	smpsAlterNote       $FB
0008E10F 01                         	dc.b	$01
0008E110 E1FA                       	smpsAlterNote       $FA
0008E112 01                         	dc.b	$01
0008E113 E1FE                       	smpsAlterNote       $FE
0008E115 01                         	dc.b	$01
0008E116 E103                       	smpsAlterNote       $03
0008E118 0101                       	dc.b	$01, $01
0008E11A E101                       	smpsAlterNote       $01
0008E11C 01                         	dc.b	$01
0008E11D E1FE                       	smpsAlterNote       $FE
0008E11F ECF5                       	smpsPSGAlterVol     $F5
0008E121 990D                       	dc.b	nC2, $0D
0008E123 E104                       	smpsAlterNote       $04
0008E125 EC0B                       	smpsPSGAlterVol     $0B
0008E127 8001 01                    	dc.b	nRst, $01, $01
0008E12A E102                       	smpsAlterNote       $02
0008E12C 01                         	dc.b	$01
0008E12D E1FC                       	smpsAlterNote       $FC
0008E12F 0101                       	dc.b	$01, $01
0008E131 E102                       	smpsAlterNote       $02
0008E133 01                         	dc.b	$01
0008E134 E104                       	smpsAlterNote       $04
0008E136 01                         	dc.b	$01
0008E137 E1FF                       	smpsAlterNote       $FF
0008E139 ECF5                       	smpsPSGAlterVol     $F5
0008E13B 9B06                       	dc.b	nD2, $06
0008E13D EC04                       	smpsPSGAlterVol     $04
0008E13F E701                       	dc.b	smpsNoAttack, $01
0008E141 EC07                       	smpsPSGAlterVol     $07
0008E143 8003                       	dc.b	nRst, $03
0008E145 ECF5                       	smpsPSGAlterVol     $F5
0008E147 9B07                       	dc.b	nD2, $07
0008E149 EC0B                       	smpsPSGAlterVol     $0B
0008E14B 8006                       	dc.b	nRst, $06
0008E14D E101                       	smpsAlterNote       $01
0008E14F 01                         	dc.b	$01
0008E150 E104                       	smpsAlterNote       $04
0008E152 0101                       	dc.b	$01, $01
0008E154 E1FE                       	smpsAlterNote       $FE
0008E156 01                         	dc.b	$01
0008E157 E1FC                       	smpsAlterNote       $FC
0008E159 01                         	dc.b	$01
0008E15A E1FE                       	smpsAlterNote       $FE
0008E15C ECF5                       	smpsPSGAlterVol     $F5
0008E15E 9C06                       	dc.b	nEb2, $06
0008E160 EC0B                       	smpsPSGAlterVol     $0B
0008E162 8004                       	dc.b	nRst, $04
0008E164 ECF5                       	smpsPSGAlterVol     $F5
0008E166 9C06                       	dc.b	nEb2, $06
0008E168 EC04                       	smpsPSGAlterVol     $04
0008E16A E701                       	dc.b	smpsNoAttack, $01
0008E16C EC07                       	smpsPSGAlterVol     $07
0008E16E 8006                       	dc.b	nRst, $06
0008E170 E105                       	smpsAlterNote       $05
0008E172 01                         	dc.b	$01
0008E173 E106                       	smpsAlterNote       $06
0008E175 01                         	dc.b	$01
0008E176 E102                       	smpsAlterNote       $02
0008E178 01                         	dc.b	$01
0008E179 E1FB                       	smpsAlterNote       $FB
0008E17B 01                         	dc.b	$01
0008E17C E1FF                       	smpsAlterNote       $FF
0008E17E ECF5                       	smpsPSGAlterVol     $F5
0008E180 9B06                       	dc.b	nD2, $06
0008E182 EC04                       	smpsPSGAlterVol     $04
0008E184 E701                       	dc.b	smpsNoAttack, $01
0008E186 EC07                       	smpsPSGAlterVol     $07
0008E188 8003                       	dc.b	nRst, $03
0008E18A ECF5                       	smpsPSGAlterVol     $F5
0008E18C 9B06                       	dc.b	nD2, $06
0008E18E EC04                       	smpsPSGAlterVol     $04
0008E190 E701                       	dc.b	smpsNoAttack, $01
0008E192 EC07                       	smpsPSGAlterVol     $07
0008E194 8006                       	dc.b	nRst, $06
0008E196 E101                       	smpsAlterNote       $01
0008E198 01                         	dc.b	$01
0008E199 E105                       	smpsAlterNote       $05
0008E19B 01                         	dc.b	$01
0008E19C E104                       	smpsAlterNote       $04
0008E19E 01                         	dc.b	$01
0008E19F E1FE                       	smpsAlterNote       $FE
0008E1A1 01                         	dc.b	$01
0008E1A2 ECF5                       	smpsPSGAlterVol     $F5
0008E1A4 9C07                       	dc.b	nEb2, $07
0008E1A6 EC0B                       	smpsPSGAlterVol     $0B
0008E1A8 8004                       	dc.b	nRst, $04
0008E1AA ECF5                       	smpsPSGAlterVol     $F5
0008E1AC 9C06                       	dc.b	nEb2, $06
0008E1AE EC0B                       	smpsPSGAlterVol     $0B
0008E1B0 8007                       	dc.b	nRst, $07
0008E1B2 E105                       	smpsAlterNote       $05
0008E1B4 0101                       	dc.b	$01, $01
0008E1B6 E102                       	smpsAlterNote       $02
0008E1B8 01                         	dc.b	$01
0008E1B9 E1FB                       	smpsAlterNote       $FB
0008E1BB 01                         	dc.b	$01
0008E1BC E1FF                       	smpsAlterNote       $FF
0008E1BE ECF5                       	smpsPSGAlterVol     $F5
0008E1C0 9B06                       	dc.b	nD2, $06
0008E1C2 EC04                       	smpsPSGAlterVol     $04
0008E1C4 E701                       	dc.b	smpsNoAttack, $01
0008E1C6 EC07                       	smpsPSGAlterVol     $07
0008E1C8 8003                       	dc.b	nRst, $03
0008E1CA ECF5                       	smpsPSGAlterVol     $F5
0008E1CC 9B06                       	dc.b	nD2, $06
0008E1CE EC04                       	smpsPSGAlterVol     $04
0008E1D0 E701                       	dc.b	smpsNoAttack, $01
0008E1D2 EC07                       	smpsPSGAlterVol     $07
0008E1D4 8006                       	dc.b	nRst, $06
0008E1D6 E101                       	smpsAlterNote       $01
0008E1D8 01                         	dc.b	$01
0008E1D9 E105                       	smpsAlterNote       $05
0008E1DB 01                         	dc.b	$01
0008E1DC E101                       	smpsAlterNote       $01
0008E1DE 01                         	dc.b	$01
0008E1DF E1FC                       	smpsAlterNote       $FC
0008E1E1 01                         	dc.b	$01
0008E1E2 E1FE                       	smpsAlterNote       $FE
0008E1E4 ECF5                       	smpsPSGAlterVol     $F5
0008E1E6 9C06                       	dc.b	nEb2, $06
0008E1E8 EC04                       	smpsPSGAlterVol     $04
0008E1EA E701                       	dc.b	smpsNoAttack, $01
0008E1EC EC07                       	smpsPSGAlterVol     $07
0008E1EE 8003                       	dc.b	nRst, $03
0008E1F0 ECF5                       	smpsPSGAlterVol     $F5
0008E1F2 9C07                       	dc.b	nEb2, $07
0008E1F4 EC0B                       	smpsPSGAlterVol     $0B
0008E1F6 8006                       	dc.b	nRst, $06
0008E1F8 E102                       	smpsAlterNote       $02
0008E1FA 01                         	dc.b	$01
0008E1FB E105                       	smpsAlterNote       $05
0008E1FD 0101                       	dc.b	$01, $01
0008E1FF E1FF                       	smpsAlterNote       $FF
0008E201 01                         	dc.b	$01
0008E202 ECF5                       	smpsPSGAlterVol     $F5
0008E204 9B07                       	dc.b	nD2, $07
0008E206 EC0B                       	smpsPSGAlterVol     $0B
0008E208 8004                       	dc.b	nRst, $04
0008E20A ECF5                       	smpsPSGAlterVol     $F5
0008E20C 9B06                       	dc.b	nD2, $06
0008E20E EC04                       	smpsPSGAlterVol     $04
0008E210 E701                       	dc.b	smpsNoAttack, $01
0008E212 EC07                       	smpsPSGAlterVol     $07
0008E214 8002                       	dc.b	nRst, $02
0008E216 E1FC                       	smpsAlterNote       $FC
0008E218 ECF5                       	smpsPSGAlterVol     $F5
0008E21A 9006                       	dc.b	nEb1, $06
0008E21C EC04                       	smpsPSGAlterVol     $04
0008E21E E701                       	dc.b	smpsNoAttack, $01
0008E220 ECFC                       	smpsPSGAlterVol     $FC
0008E222 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0008E226 EC04                       	smpsPSGAlterVol     $04
0008E228 E701                       	dc.b	smpsNoAttack, $01
0008E22A E1FD                       	smpsAlterNote       $FD
0008E22C ECFC                       	smpsPSGAlterVol     $FC
0008E22E 9402                       	dc.b	nG1, $02
0008E230 EC04                       	smpsPSGAlterVol     $04
0008E232 E701                       	dc.b	smpsNoAttack, $01
0008E234 E1FE                       	smpsAlterNote       $FE
0008E236 ECFC                       	smpsPSGAlterVol     $FC
0008E238 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008E23C EC04                       	smpsPSGAlterVol     $04
0008E23E E701                       	dc.b	smpsNoAttack, $01
0008E240 EC07                       	smpsPSGAlterVol     $07
0008E242 8008                       	dc.b	nRst, $08
0008E244 F6F4 F3                    	smpsJump            music84_Jump06
0008E247                            
0008E247                            ; PSG3 Data
0008E247                            music84_PSG3:
0008E247 F500                       	smpsPSGvoice        $00
0008E249 E1FF                       	smpsAlterNote       $FF
0008E24B EC0F                       	smpsPSGAlterVol     $0F
0008E24D 803A                       	dc.b	nRst, $3A
0008E24F                            
0008E24F                            music84_Jump05:
0008E24F 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008E25B 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0008E265 F6FF E8                    	smpsJump            music84_Jump05
0008E268                            
0008E268                            ; DAC Data
0008E268                            music84_DAC:
0008E268 E0C0                       	smpsPan             panCenter, $00
0008E26A 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0008E276 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0008E282 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008E28E 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008E29A 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008E2A6 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008E2B2 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008E2BE 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008E2CA 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008E2D6 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008E2E2 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008E2EE 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008E2FA 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008E306 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008E312 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008E31E 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008E32A 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008E336 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008E342 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008E34E 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008E35A 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008E366 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008E372 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008E37E 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008E38A 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008E396 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008E3A2 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008E3AE 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008E3BA 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008E3C6 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008E3D2 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008E3DE 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008E3EA 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008E3F6 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008E402 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008E40E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008E41A 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008E426 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008E432 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008E43E 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008E44A 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008E456 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008E462 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008E46E 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008E47A 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008E486 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008E492 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008E49E 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008E4AA 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008E4B6 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008E4C2 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008E4CE 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008E4DA 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008E4E6 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008E4F2 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008E4FE 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008E50A 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008E516 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008E522 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008E52E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008E53A 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008E546 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008E552 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008E55E 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008E56A 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008E576 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008E582 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008E58E 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008E59A 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008E5A6 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008E5B2 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008E5BE 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008E5CA 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008E5D6 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008E5E2 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008E5EE E0C0                       	smpsPan             panCenter, $00
0008E5F0 F2                         	smpsStop
0008E5F1                            
0008E5F1                            music84_Voices:
0008E5F1                            ;	Voice $00
0008E5F1                            ;	$3D
0008E5F1                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008E5F1                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008E5F1                            	smpsVcAlgorithm     $05
0008E5F1                            	smpsVcFeedback      $07
0008E5F1                            	smpsVcUnusedBits    $00
0008E5F1                            	smpsVcDetune        $05, $04, $03, $04
0008E5F1                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008E5F1                            	smpsVcRateScale     $00, $00, $00, $00
0008E5F1                            	smpsVcAttackRate    $11, $11, $11, $11
0008E5F1                            	smpsVcAmpMod        $00, $00, $00, $00
0008E5F1                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008E5F1                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008E5F1                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008E5F1                            	smpsVcReleaseRate   $08, $08, $08, $07
0008E5F1 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008E60A                            
0008E60A                            ;	Voice $01
0008E60A                            ;	$04
0008E60A                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008E60A                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008E60A                            	smpsVcAlgorithm     $04
0008E60A                            	smpsVcFeedback      $00
0008E60A                            	smpsVcUnusedBits    $00
0008E60A                            	smpsVcDetune        $04, $03, $04, $05
0008E60A                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008E60A                            	smpsVcRateScale     $00, $01, $00, $01
0008E60A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008E60A                            	smpsVcAmpMod        $00, $00, $00, $00
0008E60A                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008E60A                            	smpsVcDecayRate2    $05, $00, $05, $00
0008E60A                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008E60A                            	smpsVcReleaseRate   $06, $06, $06, $06
0008E60A 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008E623                            
0008E623                            ;	Voice $02
0008E623                            ;	$30
0008E623                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008E623                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008E623                            	smpsVcAlgorithm     $00
0008E623                            	smpsVcFeedback      $06
0008E623                            	smpsVcUnusedBits    $00
0008E623                            	smpsVcDetune        $04, $02, $00, $06
0008E623                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008E623                            	smpsVcRateScale     $00, $00, $00, $00
0008E623                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008E623                            	smpsVcAmpMod        $00, $00, $00, $00
0008E623                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008E623                            	smpsVcDecayRate2    $01, $01, $01, $01
0008E623                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008E623                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008E623 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008E63C                            
0008E63C                            ;	Voice $03
0008E63C                            ;	$3A
0008E63C                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008E63C                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008E63C                            	smpsVcAlgorithm     $02
0008E63C                            	smpsVcFeedback      $07
0008E63C                            	smpsVcUnusedBits    $00
0008E63C                            	smpsVcDetune        $04, $06, $02, $00
0008E63C                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008E63C                            	smpsVcRateScale     $00, $00, $00, $00
0008E63C                            	smpsVcAttackRate    $18, $19, $14, $14
0008E63C                            	smpsVcAmpMod        $00, $00, $00, $00
0008E63C                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008E63C                            	smpsVcDecayRate2    $00, $00, $00, $00
0008E63C                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008E63C                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008E63C 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008E655                            
0008E655                            ;	Voice $04
0008E655                            ;	$3C
0008E655                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008E655                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008E655                            	smpsVcAlgorithm     $04
0008E655                            	smpsVcFeedback      $07
0008E655                            	smpsVcUnusedBits    $00
0008E655                            	smpsVcDetune        $07, $00, $00, $03
0008E655                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008E655                            	smpsVcRateScale     $00, $00, $00, $00
0008E655                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008E655                            	smpsVcAmpMod        $00, $00, $00, $00
0008E655                            	smpsVcDecayRate1    $00, $00, $00, $00
0008E655                            	smpsVcDecayRate2    $00, $00, $00, $00
0008E655                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008E655                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008E655 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008E66E                            
0008E66E                            ;	Voice $05
0008E66E                            ;	$38
0008E66E                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008E66E                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008E66E                            	smpsVcAlgorithm     $00
0008E66E                            	smpsVcFeedback      $07
0008E66E                            	smpsVcUnusedBits    $00
0008E66E                            	smpsVcDetune        $04, $06, $02, $00
0008E66E                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008E66E                            	smpsVcRateScale     $00, $00, $00, $00
0008E66E                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008E66E                            	smpsVcAmpMod        $00, $00, $00, $00
0008E66E                            	smpsVcDecayRate1    $00, $03, $00, $17
0008E66E                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008E66E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008E66E                            	smpsVcReleaseRate   $08, $05, $05, $05
0008E66E 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008E687                            
0008E687                            
0008E688 00                         		even
0008E688                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
00092898                            		even
00092898                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000963F0 00                         		even
000963F0                            Music87:	include	sound\music87.asm; Invincibility
000963F0                            triple_Header:
000963F0 =00000001                  smpsHeaderStartSong = 1
000963F0 0000                       	smpsHeaderVoice     triple_Voices
000963F2 0501                       	smpsHeaderChan      $05, $01
000963F4 0200                       	smpsHeaderTempo     $02, $00
000963F6                            
000963FA 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000963FE 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00096402 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00096406 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
0009640A 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00096410                            
00096410                            ; DAC Data
00096410                            triple_DAC:
00096410 E0C0                       	smpsPan             panCenter, $00
00096412 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00096418                            
00096418                            triple_Loop01:
00096418 8282 82                    	dc.b	dSnare, dSnare, dSnare
0009641B                            
0009641B                            triple_Loop00:
0009641B 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00096427 06                         	dc.b	$06
00096428 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
0009642D 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00096439 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00096440 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00096445 0303 1B                    	dc.b	$03, $03, $1B
00096448 E0C0                       	smpsPan             panCenter, $00
0009644A F6FF C4                    	smpsJump triple_DAC
0009644D                            
0009644D                            ; FM1 Data
0009644D                            triple_FM1:
0009644D E0C0                       	smpsPan             panCenter, $00
00096451 8018                       	dc.b	nRst, $18
00096453                            
00096453                            triple_Loop0B:
00096453 AC06 B8                    	dc.b	nG3, $06, nG4
00096456 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
0009645B                            
0009645B                            triple_Loop0C:
0009645B A7B3                       	dc.b	nD3, nD4
0009645D F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00096462                            
00096462                            triple_Loop0D:
00096462 A9B5                       	dc.b	nE3, nE4
00096464 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00096469 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00096471 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00096476 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00096482 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
0009648E AD                         	dc.b	nAb3
0009648F F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00096494 8018                       	dc.b	nRst, $18
00096496 E0C0                       	smpsPan             panCenter, $00
0009649A F6FF B1                    	smpsJump triple_FM1
0009649D                            
0009649D                            ; FM2 Data
0009649D                            triple_FM2:
0009649D E0C0                       	smpsPan             panCenter, $00
000964A1 8018                       	dc.b	nRst, $18
000964A3                            
000964A3                            triple_Loop07:
000964A3 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000964AF C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000964BB F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000964C0 8003                       	dc.b	nRst, $03
000964C2                            
000964C2                            triple_Loop08:
000964C2 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000964C8 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000964CD B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000964D3                            
000964D3                            triple_Loop09:
000964D3 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000964DF C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000964EB F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000964F0 8003                       	dc.b	nRst, $03
000964F2                            
000964F2                            triple_Loop0A:
000964F2 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000964F8 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000964FD B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00096503 E0C0                       	smpsPan             panCenter, $00
00096507 F6FF 94                    	smpsJump triple_FM2
0009650A                            
0009650A                            ; FM3 Data
0009650A                            triple_FM3:
0009650A E0C0                       	smpsPan             panCenter, $00
0009650E 8018                       	dc.b	nRst, $18
00096510                            
00096510                            triple_Loop06:
00096510 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00096517 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
0009651C 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00096528 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00096534 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00096537 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
0009653C 8018                       	dc.b	nRst, $18
0009653E E0C0                       	smpsPan             panCenter, $00
00096542 F6FF C6                    	smpsJump triple_FM3
00096545                            
00096545                            ; FM4 Data
00096545                            triple_FM4:
00096545 E103                       	smpsAlterNote       $03
00096549 E0C0                       	smpsPan             panCenter, $00
0009654B 8018                       	dc.b	nRst, $18
0009654D                            
0009654D                            triple_Loop02:
0009654D C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00096559 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00096565 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
0009656A 8003                       	dc.b	nRst, $03
0009656C                            
0009656C                            triple_Loop03:
0009656C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00096572 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00096577 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0009657D                            
0009657D                            triple_Loop04:
0009657D C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00096589 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00096595 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
0009659A 8003                       	dc.b	nRst, $03
0009659C                            
0009659C                            triple_Loop05:
0009659C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000965A2 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000965A7 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000965AD E0C0                       	smpsPan             panCenter, $00
000965AF F6FF 94                    	smpsJump triple_FM4
000965B2                            
000965B2                            ; PSG1 Data
000965B2                            triple_PSG1:
000965B2 8018                       	dc.b	nRst, $18
000965B4                            
000965B4                            triple_Loop0E:
000965B4 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000965C0 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000965CC 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000965D8 9402 8004                  	dc.b	nG1, $02, nRst, $04
000965DC F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000965E1 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000965ED 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000965F9 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00096605 9402 8007                  	dc.b	nG1, $02, nRst, $07
00096609                            
00096609                            triple_Loop0F:
00096609 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0009660F F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00096614 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
0009661A                            
0009661A                            triple_Loop10:
0009661A A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00096626 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00096632 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009663E 9402 8004                  	dc.b	nG1, $02, nRst, $04
00096642 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00096647 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00096653 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009665F 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009666B 9402 8007                  	dc.b	nG1, $02, nRst, $07
0009666F                            
0009666F                            triple_Loop11:
0009666F 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00096675 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
0009667A 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00096680 F500                       	smpsPSGvoice        $00
00096682 F6FF 2E                    	smpsJump triple_PSG1
00096685                            
00096685                            triple_Voices:
00096685                            ;	Voice $00
00096685                            ;	$3A
00096685                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00096685                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00096685                            	smpsVcAlgorithm     $02
00096685                            	smpsVcFeedback      $07
00096685                            	smpsVcUnusedBits    $00
00096685                            	smpsVcDetune        $00, $00, $00, $00
00096685                            	smpsVcCoarseFreq    $01, $01, $07, $01
00096685                            	smpsVcRateScale     $01, $02, $02, $02
00096685                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00096685                            	smpsVcAmpMod        $00, $00, $00, $00
00096685                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00096685                            	smpsVcDecayRate2    $00, $00, $00, $00
00096685                            	smpsVcDecayLevel    $00, $01, $0F, $01
00096685                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00096685 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
0009669E                            
0009669E                            ;	Voice $01
0009669E                            ;	$20
0009669E                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
0009669E                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
0009669E                            	smpsVcAlgorithm     $00
0009669E                            	smpsVcFeedback      $04
0009669E                            	smpsVcUnusedBits    $00
0009669E                            	smpsVcDetune        $00, $00, $03, $07
0009669E                            	smpsVcCoarseFreq    $00, $00, $01, $0A
0009669E                            	smpsVcRateScale     $03, $03, $03, $02
0009669E                            	smpsVcAttackRate    $1F, $1C, $18, $1F
0009669E                            	smpsVcAmpMod        $00, $00, $00, $00
0009669E                            	smpsVcDecayRate1    $04, $04, $0A, $10
0009669E                            	smpsVcDecayRate2    $08, $08, $08, $0F
0009669E                            	smpsVcDecayLevel    $0B, $0B, $05, $05
0009669E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009669E 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009669E 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000966B8 00                         		even
000966B8                            Music88:	incbin	sound\music88.bin; Extra Life
000967A6                            		even
000967A6                            Music89:	incbin	sound\music89.bin; Special Stage
0009A66E 00                         		even
0009A66E                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009A838                            		even
0009A838                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009AAD2                            		even
0009AAD2                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009D966 00                         		even
0009D966                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009DB82                            		even
0009DB82                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009DFF0 00                         		even
0009DFF0                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009E630 00                         		even
0009E630                            Music90:	incbin	sound\music90.bin ; Continue
0009E9CA 00                         		even
0009E9CA                            Music91:	incbin	sound\music91.bin ; Credits
0009FC98                            		even
0009FC98                            Music92:	incbin	sound\music92.bin ; Drowning
0009FFDA 00                         		even
0009FFDA                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A00AA                            		even
000A00AA                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A0D80 00                         		even
000A0D80                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A0DBA 00                         		even
000A0DBA                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A0DF4 00                         		even
000A0DF4                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A0E2E 00                         		even
000A0E2E                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A0E68 00                         		even
000A0E68                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A0EA2 00                         		even
000A0EA2                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A0EDC 00                         		even
000A0EDC                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A0F16 00                         		even
000A0F16                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A0F50 00                         		even
000A0F50                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A0F8A 00                         		even
000A0F8A                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A147A                            		even
000A147A                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A147A                            GentleBreeze_Header:
000A147A =00000001                  smpsHeaderStartSong = 1
000A147A 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A147C 0603                       	smpsHeaderChan      $06, $03
000A147E 0100                       	smpsHeaderTempo     $01, $00
000A1480                            
000A1484 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A1488 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A148C 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A1490 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A1494 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A1498 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A149E 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A14A4 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A14AA                            
000A14AA                            ; PSG3 Data
000A14AA                            GentleBreeze_PSG3:
000A14AA F2                         	smpsStop
000A14AB                            
000A14AB                            ; FM1 Data
000A14AB                            GentleBreeze_FM1:
000A14AD E0C0                       	smpsPan             panCenter, $00
000A14AF E1FF                       	smpsAlterNote       $FF
000A14B1 C410                       	dc.b	nG5, $10
000A14B3 E60F                       	smpsAlterVol        $0F
000A14B5 C4                         	dc.b	nG5
000A14B6 E6F1                       	smpsAlterVol        $F1
000A14B8 E100                       	smpsAlterNote       $00
000A14BA C2                         	dc.b	nF5
000A14BB E60F                       	smpsAlterVol        $0F
000A14BD 08                         	dc.b	$08
000A14BE E6F1                       	smpsAlterVol        $F1
000A14C0 C010                       	dc.b	nEb5, $10
000A14C2 E60F                       	smpsAlterVol        $0F
000A14C4 C0                         	dc.b	nEb5
000A14C5 E6F1                       	smpsAlterVol        $F1
000A14C7 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A14CD E60F                       	smpsAlterVol        $0F
000A14CF C9                         	dc.b	nC6
000A14D0 E6F1                       	smpsAlterVol        $F1
000A14D2 C5                         	dc.b	nAb5
000A14D3 E60F                       	smpsAlterVol        $0F
000A14D5 08                         	dc.b	$08
000A14D6 E6F1                       	smpsAlterVol        $F1
000A14D8 C010                       	dc.b	nEb5, $10
000A14DA E60F                       	smpsAlterVol        $0F
000A14DC C0                         	dc.b	nEb5
000A14DD E6F1                       	smpsAlterVol        $F1
000A14DF C208                       	dc.b	nF5, $08
000A14E1 E1FF                       	smpsAlterNote       $FF
000A14E3 C410                       	dc.b	nG5, $10
000A14E5 E100                       	smpsAlterNote       $00
000A14E7 C5C7                       	dc.b	nAb5, nBb5
000A14E9 E60F                       	smpsAlterVol        $0F
000A14EB C7                         	dc.b	nBb5
000A14EC E6F1                       	smpsAlterVol        $F1
000A14EE C5                         	dc.b	nAb5
000A14EF E60F                       	smpsAlterVol        $0F
000A14F1 08                         	dc.b	$08
000A14F2 E6F1                       	smpsAlterVol        $F1
000A14F4 E1FF                       	smpsAlterNote       $FF
000A14F6 C410                       	dc.b	nG5, $10
000A14F8 E60F                       	smpsAlterVol        $0F
000A14FA C4                         	dc.b	nG5
000A14FB E6F1                       	smpsAlterVol        $F1
000A14FD C4                         	dc.b	nG5
000A14FE E100                       	smpsAlterNote       $00
000A1500 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A1505 E60F                       	smpsAlterVol        $0F
000A1507 C2                         	dc.b	nF5
000A1508 E6F1                       	smpsAlterVol        $F1
000A150A E1FF                       	smpsAlterNote       $FF
000A150C C4                         	dc.b	nG5
000A150D E60F                       	smpsAlterVol        $0F
000A150F 08                         	dc.b	$08
000A1510 E6F1                       	smpsAlterVol        $F1
000A1512 10                         	dc.b	$10
000A1513 E60F                       	smpsAlterVol        $0F
000A1515 38                         	dc.b	$38
000A1516 E6F1                       	smpsAlterVol        $F1
000A1518 10                         	dc.b	$10
000A1519 E60F                       	smpsAlterVol        $0F
000A151B C4                         	dc.b	nG5
000A151C E6F1                       	smpsAlterVol        $F1
000A151E E100                       	smpsAlterNote       $00
000A1520 C2                         	dc.b	nF5
000A1521 E60F                       	smpsAlterVol        $0F
000A1523 08                         	dc.b	$08
000A1524 E6F1                       	smpsAlterVol        $F1
000A1526 C010                       	dc.b	nEb5, $10
000A1528 E60F                       	smpsAlterVol        $0F
000A152A C0                         	dc.b	nEb5
000A152B E6F1                       	smpsAlterVol        $F1
000A152D BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A1533 E60F                       	smpsAlterVol        $0F
000A1535 C9                         	dc.b	nC6
000A1536 E6F1                       	smpsAlterVol        $F1
000A1538 C5                         	dc.b	nAb5
000A1539 E60F                       	smpsAlterVol        $0F
000A153B 08                         	dc.b	$08
000A153C E6F1                       	smpsAlterVol        $F1
000A153E C010                       	dc.b	nEb5, $10
000A1540 E60F                       	smpsAlterVol        $0F
000A1542 C0                         	dc.b	nEb5
000A1543 E6F1                       	smpsAlterVol        $F1
000A1545 C208                       	dc.b	nF5, $08
000A1547 E1FF                       	smpsAlterNote       $FF
000A1549 C410                       	dc.b	nG5, $10
000A154B E100                       	smpsAlterNote       $00
000A154D C5C7                       	dc.b	nAb5, nBb5
000A154F E60F                       	smpsAlterVol        $0F
000A1551 C7                         	dc.b	nBb5
000A1552 E6F1                       	smpsAlterVol        $F1
000A1554 C5                         	dc.b	nAb5
000A1555 E60F                       	smpsAlterVol        $0F
000A1557 08                         	dc.b	$08
000A1558 E6F1                       	smpsAlterVol        $F1
000A155A E1FF                       	smpsAlterNote       $FF
000A155C C410                       	dc.b	nG5, $10
000A155E E60F                       	smpsAlterVol        $0F
000A1560 C4                         	dc.b	nG5
000A1561 E6F1                       	smpsAlterVol        $F1
000A1563 C4                         	dc.b	nG5
000A1564 E100                       	smpsAlterNote       $00
000A1566 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A156B E60F                       	smpsAlterVol        $0F
000A156D 28                         	dc.b	$28
000A156E E6F1                       	smpsAlterVol        $F1
000A1570 C008 10                    	dc.b	nEb5, $08, $10
000A1573 E60F                       	smpsAlterVol        $0F
000A1575 21                         	dc.b	$21
000A1576                            
000A1576                            GentleBreeze_Loop12:
000A1576 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A1579 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A157E E717                       	dc.b	smpsNoAttack, $17
000A1580 E6F1                       	smpsAlterVol        $F1
000A1582 E1FF                       	smpsAlterNote       $FF
000A1584 C410                       	dc.b	nG5, $10
000A1586 E60F                       	smpsAlterVol        $0F
000A1588 C4                         	dc.b	nG5
000A1589 E6F1                       	smpsAlterVol        $F1
000A158B E100                       	smpsAlterNote       $00
000A158D C2                         	dc.b	nF5
000A158E E60F                       	smpsAlterVol        $0F
000A1590 08                         	dc.b	$08
000A1591 E6F1                       	smpsAlterVol        $F1
000A1593 C010                       	dc.b	nEb5, $10
000A1595 E60F                       	smpsAlterVol        $0F
000A1597 C0                         	dc.b	nEb5
000A1598 E6F1                       	smpsAlterVol        $F1
000A159A BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A15A0 E60F                       	smpsAlterVol        $0F
000A15A2 C9                         	dc.b	nC6
000A15A3 E6F1                       	smpsAlterVol        $F1
000A15A5 C5                         	dc.b	nAb5
000A15A6 E60F                       	smpsAlterVol        $0F
000A15A8 08                         	dc.b	$08
000A15A9 E6F1                       	smpsAlterVol        $F1
000A15AB C010                       	dc.b	nEb5, $10
000A15AD E60F                       	smpsAlterVol        $0F
000A15AF C0                         	dc.b	nEb5
000A15B0 E6F1                       	smpsAlterVol        $F1
000A15B2 C208                       	dc.b	nF5, $08
000A15B4 E1FF                       	smpsAlterNote       $FF
000A15B6 C410                       	dc.b	nG5, $10
000A15B8 E100                       	smpsAlterNote       $00
000A15BA C5C7                       	dc.b	nAb5, nBb5
000A15BC E60F                       	smpsAlterVol        $0F
000A15BE C7                         	dc.b	nBb5
000A15BF E6F1                       	smpsAlterVol        $F1
000A15C1 C5                         	dc.b	nAb5
000A15C2 E60F                       	smpsAlterVol        $0F
000A15C4 08                         	dc.b	$08
000A15C5 E6F1                       	smpsAlterVol        $F1
000A15C7 E1FF                       	smpsAlterNote       $FF
000A15C9 C410                       	dc.b	nG5, $10
000A15CB E60F                       	smpsAlterVol        $0F
000A15CD C4                         	dc.b	nG5
000A15CE E6F1                       	smpsAlterVol        $F1
000A15D0 C4                         	dc.b	nG5
000A15D1 E100                       	smpsAlterNote       $00
000A15D3 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A15D8 E60F                       	smpsAlterVol        $0F
000A15DA C2                         	dc.b	nF5
000A15DB E6F1                       	smpsAlterVol        $F1
000A15DD E1FF                       	smpsAlterNote       $FF
000A15DF C4                         	dc.b	nG5
000A15E0 E60F                       	smpsAlterVol        $0F
000A15E2 08                         	dc.b	$08
000A15E3 E6F1                       	smpsAlterVol        $F1
000A15E5 10                         	dc.b	$10
000A15E6 E60F                       	smpsAlterVol        $0F
000A15E8 38                         	dc.b	$38
000A15E9 E6F1                       	smpsAlterVol        $F1
000A15EB 10                         	dc.b	$10
000A15EC E60F                       	smpsAlterVol        $0F
000A15EE C4                         	dc.b	nG5
000A15EF E6F1                       	smpsAlterVol        $F1
000A15F1 E100                       	smpsAlterNote       $00
000A15F3 C2                         	dc.b	nF5
000A15F4 E60F                       	smpsAlterVol        $0F
000A15F6 08                         	dc.b	$08
000A15F7 E6F1                       	smpsAlterVol        $F1
000A15F9 C010                       	dc.b	nEb5, $10
000A15FB E60F                       	smpsAlterVol        $0F
000A15FD C0                         	dc.b	nEb5
000A15FE E6F1                       	smpsAlterVol        $F1
000A1600 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A1606 E60F                       	smpsAlterVol        $0F
000A1608 C9                         	dc.b	nC6
000A1609 E6F1                       	smpsAlterVol        $F1
000A160B C5                         	dc.b	nAb5
000A160C E60F                       	smpsAlterVol        $0F
000A160E 08                         	dc.b	$08
000A160F E6F1                       	smpsAlterVol        $F1
000A1611 C010                       	dc.b	nEb5, $10
000A1613 E60F                       	smpsAlterVol        $0F
000A1615 C0                         	dc.b	nEb5
000A1616 E6F1                       	smpsAlterVol        $F1
000A1618 C208                       	dc.b	nF5, $08
000A161A E1FF                       	smpsAlterNote       $FF
000A161C C410                       	dc.b	nG5, $10
000A161E E100                       	smpsAlterNote       $00
000A1620 C5C7                       	dc.b	nAb5, nBb5
000A1622 E60F                       	smpsAlterVol        $0F
000A1624 C7                         	dc.b	nBb5
000A1625 E6F1                       	smpsAlterVol        $F1
000A1627 C5                         	dc.b	nAb5
000A1628 E60F                       	smpsAlterVol        $0F
000A162A 08                         	dc.b	$08
000A162B E6F1                       	smpsAlterVol        $F1
000A162D E1FF                       	smpsAlterNote       $FF
000A162F C410                       	dc.b	nG5, $10
000A1631 E60F                       	smpsAlterVol        $0F
000A1633 C4                         	dc.b	nG5
000A1634 E6F1                       	smpsAlterVol        $F1
000A1636 C4                         	dc.b	nG5
000A1637 E100                       	smpsAlterNote       $00
000A1639 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A163E E60F                       	smpsAlterVol        $0F
000A1640 28                         	dc.b	$28
000A1641 E6F1                       	smpsAlterVol        $F1
000A1643 C008 10                    	dc.b	nEb5, $08, $10
000A1646 E60F                       	smpsAlterVol        $0F
000A1648 21                         	dc.b	$21
000A1649 E0C0                       	smpsPan             panCenter, $00
000A164B F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A164E                            
000A164E                            ; FM2 Data
000A164E                            GentleBreeze_FM2:
000A1650 E60C                       	smpsAlterVol        $0C
000A1652 E0C0                       	smpsPan             panCenter, $00
000A1654 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A1660 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A166C 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A1678 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A1684 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A1690 A039                       	dc.b	nG2, $39
000A1692                            
000A1692                            GentleBreeze_Jump04:
000A1692 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A1695                            
000A1695                            GentleBreeze_Loop11:
000A1695 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A16A1 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A16AD 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A16B9 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A16C5 A3                         	dc.b	nBb2
000A16C6 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A16CB 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A16D7 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A16E3 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A16EF 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A16FB 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A1707 A039                       	dc.b	nG2, $39
000A1709 E0C0                       	smpsPan             panCenter, $00
000A170B F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A170E                            
000A170E                            ; FM3 Data
000A170E                            GentleBreeze_FM3:
000A1710 E0C0                       	smpsPan             panCenter, $00
000A1712 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A171A E616                       	smpsAlterVol        $16
000A171C F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A1721                            
000A1721                            GentleBreeze_Loop0F:
000A1721 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A1725 E1FF                       	smpsAlterNote       $FF
000A1727 C4                         	dc.b	nG5
000A1728 E100                       	smpsAlterNote       $00
000A172A C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A172F E608                       	smpsAlterVol        $08
000A1731 C080 08                    	dc.b	nEb5, nRst, $08
000A1734 E6F8                       	smpsAlterVol        $F8
000A1736 C7                         	dc.b	nBb5
000A1737 E1FF                       	smpsAlterNote       $FF
000A1739 C4                         	dc.b	nG5
000A173A E100                       	smpsAlterNote       $00
000A173C C0BB                       	dc.b	nEb5, nBb4
000A173E F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A1743 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A1746 E1FF                       	smpsAlterNote       $FF
000A1748 C4                         	dc.b	nG5
000A1749 E100                       	smpsAlterNote       $00
000A174B C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A1750 E608                       	smpsAlterVol        $08
000A1752 C080 08                    	dc.b	nEb5, nRst, $08
000A1755 E6F8                       	smpsAlterVol        $F8
000A1757 E1FF                       	smpsAlterNote       $FF
000A1759 C4                         	dc.b	nG5
000A175A E100                       	smpsAlterNote       $00
000A175C C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A1763 E1FF                       	smpsAlterNote       $FF
000A1765 C4                         	dc.b	nG5
000A1766 E100                       	smpsAlterNote       $00
000A1768 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A176D E1FF                       	smpsAlterNote       $FF
000A176F C4                         	dc.b	nG5
000A1770 E100                       	smpsAlterNote       $00
000A1772 C7                         	dc.b	nBb5
000A1773 E1FF                       	smpsAlterNote       $FF
000A1775 C4                         	dc.b	nG5
000A1776 E100                       	smpsAlterNote       $00
000A1778 C2C0 01                    	dc.b	nF5, nEb5, $01
000A177B                            
000A177B                            GentleBreeze_Jump03:
000A177B E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A1782 E6FA                       	smpsAlterVol        $FA
000A1784 F4                         	smpsModOff
000A1785 E1FF                       	smpsAlterNote       $FF
000A1787 B850                       	dc.b	nG4, $50
000A1789 E100                       	smpsAlterNote       $00
000A178B B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A1797 E1FF                       	smpsAlterNote       $FF
000A1799 B810                       	dc.b	nG4, $10
000A179B E100                       	smpsAlterNote       $00
000A179D BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A17A2 E1FF                       	smpsAlterNote       $FF
000A17A4 B8                         	dc.b	nG4
000A17A5 E100                       	smpsAlterNote       $00
000A17A7 B610                       	dc.b	nF4, $10
000A17A9 E1FF                       	smpsAlterNote       $FF
000A17AB B850                       	dc.b	nG4, $50
000A17AD E100                       	smpsAlterNote       $00
000A17AF B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A17B7 E1FF                       	smpsAlterNote       $FF
000A17B9 AC08                       	dc.b	nG3, $08
000A17BB E100                       	smpsAlterNote       $00
000A17BD AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A17C2 E1FF                       	smpsAlterNote       $FF
000A17C4 B850                       	dc.b	nG4, $50
000A17C6 E100                       	smpsAlterNote       $00
000A17C8 BB08                       	dc.b	nBb4, $08
000A17CA E1FF                       	smpsAlterNote       $FF
000A17CC B8                         	dc.b	nG4
000A17CD E100                       	smpsAlterNote       $00
000A17CF BDBB B6                    	dc.b	nC5, nBb4, nF4
000A17D2 E1FF                       	smpsAlterNote       $FF
000A17D4 B810 08                    	dc.b	nG4, $10, $08
000A17D7 E100                       	smpsAlterNote       $00
000A17D9 B6                         	dc.b	nF4
000A17DA E1FF                       	smpsAlterNote       $FF
000A17DC B880                       	dc.b	nG4, nRst
000A17DE E100                       	smpsAlterNote       $00
000A17E0 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A17E3 E1FF                       	smpsAlterNote       $FF
000A17E5 B810                       	dc.b	nG4, $10
000A17E7 E100                       	smpsAlterNote       $00
000A17E9 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A17F0 E1FF                       	smpsAlterNote       $FF
000A17F2 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A1800 E606                       	smpsAlterVol        $06
000A1802 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A1807 E100                       	smpsAlterNote       $00
000A1809                            
000A1809                            GentleBreeze_Loop10:
000A1809 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A180D E1FF                       	smpsAlterNote       $FF
000A180F C4                         	dc.b	nG5
000A1810 E100                       	smpsAlterNote       $00
000A1812 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A1817 E608                       	smpsAlterVol        $08
000A1819 C080 08                    	dc.b	nEb5, nRst, $08
000A181C E6F8                       	smpsAlterVol        $F8
000A181E C7                         	dc.b	nBb5
000A181F E1FF                       	smpsAlterNote       $FF
000A1821 C4                         	dc.b	nG5
000A1822 E100                       	smpsAlterNote       $00
000A1824 C0BB                       	dc.b	nEb5, nBb4
000A1826 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A182B C0BD C9                    	dc.b	nEb5, nC5, nC6
000A182E E1FF                       	smpsAlterNote       $FF
000A1830 C4                         	dc.b	nG5
000A1831 E100                       	smpsAlterNote       $00
000A1833 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A1838 E608                       	smpsAlterVol        $08
000A183A C080 08                    	dc.b	nEb5, nRst, $08
000A183D E6F8                       	smpsAlterVol        $F8
000A183F E1FF                       	smpsAlterNote       $FF
000A1841 C4                         	dc.b	nG5
000A1842 E100                       	smpsAlterNote       $00
000A1844 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A184B E1FF                       	smpsAlterNote       $FF
000A184D C4                         	dc.b	nG5
000A184E E100                       	smpsAlterNote       $00
000A1850 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A1855 E1FF                       	smpsAlterNote       $FF
000A1857 C4                         	dc.b	nG5
000A1858 E100                       	smpsAlterNote       $00
000A185A C7                         	dc.b	nBb5
000A185B E1FF                       	smpsAlterNote       $FF
000A185D C4                         	dc.b	nG5
000A185E E100                       	smpsAlterNote       $00
000A1860 C2C0 01                    	dc.b	nF5, nEb5, $01
000A1863 E0C0                       	smpsPan             panCenter, $00
000A1865 F1                         	smpsModOn
000A1866 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A1869                            
000A1869                            ; FM4 Data
000A1869                            GentleBreeze_FM4:
000A186B E0C0                       	smpsPan             panCenter, $00
000A186D 80                         	dc.b	nRst
000A186E                            
000A186E                            GentleBreeze_Loop0D:
000A186E 7F                         	dc.b	$7F
000A186F F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A1874 77                         	dc.b	$77
000A1877 E609                       	smpsAlterVol        $09
000A1879 C001                       	dc.b	nEb5, $01
000A187B                            
000A187B                            GentleBreeze_Jump02:
000A187B E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A1880 E607                       	smpsAlterVol        $07
000A1882 E1FF                       	smpsAlterNote       $FF
000A1884 C450                       	dc.b	nG5, $50
000A1886 E100                       	smpsAlterNote       $00
000A1888 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A1894 E1FF                       	smpsAlterNote       $FF
000A1896 C410                       	dc.b	nG5, $10
000A1898 E100                       	smpsAlterNote       $00
000A189A C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A189F E1FF                       	smpsAlterNote       $FF
000A18A1 C4                         	dc.b	nG5
000A18A2 E100                       	smpsAlterNote       $00
000A18A4 C210                       	dc.b	nF5, $10
000A18A6 E1FF                       	smpsAlterNote       $FF
000A18A8 C450                       	dc.b	nG5, $50
000A18AA E100                       	smpsAlterNote       $00
000A18AC C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A18B4 E1FF                       	smpsAlterNote       $FF
000A18B6 B808                       	dc.b	nG4, $08
000A18B8 E100                       	smpsAlterNote       $00
000A18BA BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A18BF E1FF                       	smpsAlterNote       $FF
000A18C1 C450                       	dc.b	nG5, $50
000A18C3 E100                       	smpsAlterNote       $00
000A18C5 C708                       	dc.b	nBb5, $08
000A18C7 E1FF                       	smpsAlterNote       $FF
000A18C9 C4                         	dc.b	nG5
000A18CA E100                       	smpsAlterNote       $00
000A18CC C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A18CF E1FF                       	smpsAlterNote       $FF
000A18D1 C410 08                    	dc.b	nG5, $10, $08
000A18D4 E100                       	smpsAlterNote       $00
000A18D6 C2                         	dc.b	nF5
000A18D7 E1FF                       	smpsAlterNote       $FF
000A18D9 C480                       	dc.b	nG5, nRst
000A18DB E100                       	smpsAlterNote       $00
000A18DD C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A18E0 E1FF                       	smpsAlterNote       $FF
000A18E2 C410                       	dc.b	nG5, $10
000A18E4 E100                       	smpsAlterNote       $00
000A18E6 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A18ED E1FF                       	smpsAlterNote       $FF
000A18EF C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A18F7                            
000A18F7                            GentleBreeze_Loop0E:
000A18F7 7F                         	dc.b	$7F
000A18F8 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A18FD 77                         	dc.b	$77
000A18FE E100                       	smpsAlterNote       $00
000A1900 C001                       	dc.b	nEb5, $01
000A1902 E6F9                       	smpsAlterVol        $F9
000A1904 E0C0                       	smpsPan             panCenter, $00
000A1906 E100                       	smpsAlterNote       $00
000A1908 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A190B                            
000A190B                            ; FM5 Data
000A190B                            GentleBreeze_FM5:
000A190D E0C0                       	smpsPan             panCenter, $00
000A190F A5                         	dc.b	nC3
000A1910                            
000A1910                            GentleBreeze_Loop06:
000A1910 10                         	dc.b	$10
000A1911 E607                       	smpsAlterVol        $07
000A1913 A5                         	dc.b	nC3
000A1914 E6F9                       	smpsAlterVol        $F9
000A1916 08                         	dc.b	$08
000A1917 E607                       	smpsAlterVol        $07
000A1919 A5                         	dc.b	nC3
000A191A E608                       	smpsAlterVol        $08
000A191C A5                         	dc.b	nC3
000A191D E6F1                       	smpsAlterVol        $F1
000A191F 18                         	dc.b	$18
000A1920 E607                       	smpsAlterVol        $07
000A1922 10                         	dc.b	$10
000A1923 E608                       	smpsAlterVol        $08
000A1925 A5                         	dc.b	nC3
000A1926 E6F1                       	smpsAlterVol        $F1
000A1928 A5                         	dc.b	nC3
000A1929 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A192E A5                         	dc.b	nC3
000A192F                            
000A192F                            GentleBreeze_Loop07:
000A192F E607                       	smpsAlterVol        $07
000A1931 A5                         	dc.b	nC3
000A1932 E6F9                       	smpsAlterVol        $F9
000A1934 08                         	dc.b	$08
000A1935 E607                       	smpsAlterVol        $07
000A1937 A5                         	dc.b	nC3
000A1938 E608                       	smpsAlterVol        $08
000A193A A5                         	dc.b	nC3
000A193B E6F1                       	smpsAlterVol        $F1
000A193D 10                         	dc.b	$10
000A193E F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A1943                            
000A1943                            GentleBreeze_Loop08:
000A1943 A5                         	dc.b	nC3
000A1944 E607                       	smpsAlterVol        $07
000A1946 A5                         	dc.b	nC3
000A1947 E6F9                       	smpsAlterVol        $F9
000A1949 08                         	dc.b	$08
000A194A E607                       	smpsAlterVol        $07
000A194C A5                         	dc.b	nC3
000A194D E608                       	smpsAlterVol        $08
000A194F A5                         	dc.b	nC3
000A1950 E6F1                       	smpsAlterVol        $F1
000A1952 18                         	dc.b	$18
000A1953 E607                       	smpsAlterVol        $07
000A1955 10                         	dc.b	$10
000A1956 E608                       	smpsAlterVol        $08
000A1958 A5                         	dc.b	nC3
000A1959 E6F1                       	smpsAlterVol        $F1
000A195B A5                         	dc.b	nC3
000A195C F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A1961 A5                         	dc.b	nC3
000A1962 E607                       	smpsAlterVol        $07
000A1964 A5                         	dc.b	nC3
000A1965 E6F9                       	smpsAlterVol        $F9
000A1967 08                         	dc.b	$08
000A1968 E607                       	smpsAlterVol        $07
000A196A A5                         	dc.b	nC3
000A196B E608                       	smpsAlterVol        $08
000A196D A5                         	dc.b	nC3
000A196E E6F1                       	smpsAlterVol        $F1
000A1970 10                         	dc.b	$10
000A1971 E607                       	smpsAlterVol        $07
000A1973 A5                         	dc.b	nC3
000A1974 E6F9                       	smpsAlterVol        $F9
000A1976 08                         	dc.b	$08
000A1977 E607                       	smpsAlterVol        $07
000A1979 A5                         	dc.b	nC3
000A197A E608                       	smpsAlterVol        $08
000A197C A5                         	dc.b	nC3
000A197D E6F1                       	smpsAlterVol        $F1
000A197F 01                         	dc.b	$01
000A1980                            
000A1980                            GentleBreeze_Jump01:
000A1980 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A1983 E607                       	smpsAlterVol        $07
000A1985                            
000A1985                            GentleBreeze_Loop09:
000A1985 10                         	dc.b	$10
000A1986 E608                       	smpsAlterVol        $08
000A1988 A5                         	dc.b	nC3
000A1989 E6F1                       	smpsAlterVol        $F1
000A198B 08                         	dc.b	$08
000A198C E60F                       	smpsAlterVol        $0F
000A198E 18                         	dc.b	$18
000A198F E6F8                       	smpsAlterVol        $F8
000A1991 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A1996 10                         	dc.b	$10
000A1997 E608                       	smpsAlterVol        $08
000A1999 A5                         	dc.b	nC3
000A199A E6F1                       	smpsAlterVol        $F1
000A199C 08                         	dc.b	$08
000A199D E60F                       	smpsAlterVol        $0F
000A199F 18                         	dc.b	$18
000A19A0 E6F1                       	smpsAlterVol        $F1
000A19A2                            
000A19A2                            GentleBreeze_Loop0A:
000A19A2 10                         	dc.b	$10
000A19A3 E607                       	smpsAlterVol        $07
000A19A5 A5                         	dc.b	nC3
000A19A6 E6F9                       	smpsAlterVol        $F9
000A19A8 08                         	dc.b	$08
000A19A9 E607                       	smpsAlterVol        $07
000A19AB A5                         	dc.b	nC3
000A19AC E608                       	smpsAlterVol        $08
000A19AE A5                         	dc.b	nC3
000A19AF E6F1                       	smpsAlterVol        $F1
000A19B1 18                         	dc.b	$18
000A19B2 E607                       	smpsAlterVol        $07
000A19B4 10                         	dc.b	$10
000A19B5 E608                       	smpsAlterVol        $08
000A19B7 A5                         	dc.b	nC3
000A19B8 E6F1                       	smpsAlterVol        $F1
000A19BA A5                         	dc.b	nC3
000A19BB F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A19C0 A5                         	dc.b	nC3
000A19C1                            
000A19C1                            GentleBreeze_Loop0B:
000A19C1 E607                       	smpsAlterVol        $07
000A19C3 A5                         	dc.b	nC3
000A19C4 E6F9                       	smpsAlterVol        $F9
000A19C6 08                         	dc.b	$08
000A19C7 E607                       	smpsAlterVol        $07
000A19C9 A5                         	dc.b	nC3
000A19CA E608                       	smpsAlterVol        $08
000A19CC A5                         	dc.b	nC3
000A19CD E6F1                       	smpsAlterVol        $F1
000A19CF 10                         	dc.b	$10
000A19D0 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A19D5                            
000A19D5                            GentleBreeze_Loop0C:
000A19D5 A5                         	dc.b	nC3
000A19D6 E607                       	smpsAlterVol        $07
000A19D8 A5                         	dc.b	nC3
000A19D9 E6F9                       	smpsAlterVol        $F9
000A19DB 08                         	dc.b	$08
000A19DC E607                       	smpsAlterVol        $07
000A19DE A5                         	dc.b	nC3
000A19DF E608                       	smpsAlterVol        $08
000A19E1 A5                         	dc.b	nC3
000A19E2 E6F1                       	smpsAlterVol        $F1
000A19E4 18                         	dc.b	$18
000A19E5 E607                       	smpsAlterVol        $07
000A19E7 10                         	dc.b	$10
000A19E8 E608                       	smpsAlterVol        $08
000A19EA A5                         	dc.b	nC3
000A19EB E6F1                       	smpsAlterVol        $F1
000A19ED A5                         	dc.b	nC3
000A19EE F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A19F3 A5                         	dc.b	nC3
000A19F4 E607                       	smpsAlterVol        $07
000A19F6 A5                         	dc.b	nC3
000A19F7 E6F9                       	smpsAlterVol        $F9
000A19F9 08                         	dc.b	$08
000A19FA E607                       	smpsAlterVol        $07
000A19FC A5                         	dc.b	nC3
000A19FD E608                       	smpsAlterVol        $08
000A19FF A5                         	dc.b	nC3
000A1A00 E6F1                       	smpsAlterVol        $F1
000A1A02 10                         	dc.b	$10
000A1A03 E607                       	smpsAlterVol        $07
000A1A05 A5                         	dc.b	nC3
000A1A06 E6F9                       	smpsAlterVol        $F9
000A1A08 08                         	dc.b	$08
000A1A09 E607                       	smpsAlterVol        $07
000A1A0B A5                         	dc.b	nC3
000A1A0C E608                       	smpsAlterVol        $08
000A1A0E A5                         	dc.b	nC3
000A1A0F E6F1                       	smpsAlterVol        $F1
000A1A11 01                         	dc.b	$01
000A1A12 E0C0                       	smpsPan             panCenter, $00
000A1A14 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A1A17                            
000A1A17                            ; DAC Data
000A1A17                            GentleBreeze_DAC:
000A1A17 81                         	dc.b	dKick
000A1A18                            
000A1A18                            GentleBreeze_Loop00:
000A1A18 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A1A1E F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A1A23 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A1A2E                            
000A1A2E                            GentleBreeze_Loop01:
000A1A2E 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A1A34 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A1A39 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A1A43                            
000A1A43                            GentleBreeze_Jump00:
000A1A43 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A1A47                            
000A1A47                            GentleBreeze_Loop02:
000A1A47 81                         	dc.b	dKick
000A1A48                            
000A1A48                            GentleBreeze_Loop03:
000A1A48 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A1A54 088A                       	dc.b	$08, dLowTimpani
000A1A56 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A1A5B 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A1A67 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A1A6C F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A1A71                            
000A1A71                            GentleBreeze_Loop04:
000A1A71 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A1A77 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A1A7C 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A1A87                            
000A1A87                            GentleBreeze_Loop05:
000A1A87 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A1A8D F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A1A92 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A1A9C F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A1A9F                            
000A1A9F                            ; PSG 1 Data
000A1A9F                            GentleBreeze_PSG1:
000A1A9F 80                         	dc.b	nRst
000A1AA0                            
000A1AA0                            GentleBreeze_LoopPSG02:
000A1AA0 7F                         	dc.b	$7F
000A1AA1 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A1AA6 08                         	dc.b	$08
000A1AA7 EC04                       	smpsPSGAlterVol     $04
000A1AA9                            
000A1AA9                            GentleBreeze_JumpPSG01:
000A1AA9 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A1AB5 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A1ABD                            
000A1ABD                            GentleBreeze_LoopPSG03:
000A1ABD 7F                         	dc.b	$7F
000A1ABE F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A1AC3 08A3 01                    	dc.b	$08, nBb2, $01
000A1AC6 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A1AC9                            
000A1AC9                            ; PSG2 Data
000A1AC9                            GentleBreeze_PSG2:
000A1AC9 80                         	dc.b	nRst
000A1ACA                            
000A1ACA                            GentleBreeze_LoopPSG00:
000A1ACA 7F                         	dc.b	$7F
000A1ACB F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A1AD0 08                         	dc.b	$08
000A1AD1 EC04                       	smpsPSGAlterVol     $04
000A1AD3                            
000A1AD3                            GentleBreeze_JumpPSG00:
000A1AD3 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A1ADF A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A1AE7                            
000A1AE7                            GentleBreeze_LoopPSG01:
000A1AE7 7F                         	dc.b	$7F
000A1AE8 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A1AED 08A8 01                    	dc.b	$08, nEb3, $01
000A1AF0 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A1AF3                            
000A1AF3                            GentleBreeze_Voices:
000A1AF3                            ;	Voice $00
000A1AF3                            ;	$0C
000A1AF3                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A1AF3                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A1AF3                            	smpsVcAlgorithm     $04
000A1AF3                            	smpsVcFeedback      $01
000A1AF3                            	smpsVcUnusedBits    $00
000A1AF3                            	smpsVcDetune        $07, $02, $07, $02
000A1AF3                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A1AF3                            	smpsVcRateScale     $00, $00, $00, $00
000A1AF3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A1AF3                            	smpsVcAmpMod        $00, $00, $00, $00
000A1AF3                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A1AF3                            	smpsVcDecayRate2    $01, $00, $00, $00
000A1AF3                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A1AF3                            	smpsVcReleaseRate   $09, $01, $04, $03
000A1AF3 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A1B0C                            
000A1B0C                            ;	Voice $01
000A1B0C                            ;	$38
000A1B0C                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A1B0C                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A1B0C                            	smpsVcAlgorithm     $00
000A1B0C                            	smpsVcFeedback      $07
000A1B0C                            	smpsVcUnusedBits    $00
000A1B0C                            	smpsVcDetune        $03, $07, $01, $05
000A1B0C                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A1B0C                            	smpsVcRateScale     $00, $02, $00, $02
000A1B0C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A1B0C                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B0C                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A1B0C                            	smpsVcDecayRate2    $00, $00, $10, $00
000A1B0C                            	smpsVcDecayLevel    $00, $00, $00, $00
000A1B0C                            	smpsVcReleaseRate   $08, $05, $05, $05
000A1B0C 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A1B25                            
000A1B25                            ;	Voice $02
000A1B25                            ;	$00
000A1B25                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A1B25                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A1B25                            	smpsVcAlgorithm     $00
000A1B25                            	smpsVcFeedback      $00
000A1B25                            	smpsVcUnusedBits    $00
000A1B25                            	smpsVcDetune        $00, $00, $00, $00
000A1B25                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A1B25                            	smpsVcRateScale     $00, $00, $00, $00
000A1B25                            	smpsVcAttackRate    $00, $00, $00, $00
000A1B25                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B25                            	smpsVcDecayRate1    $00, $00, $00, $00
000A1B25                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1B25                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A1B25                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1B25 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A1B3E                            
000A1B3E                            ;	Voice $03
000A1B3E                            ;	$36
000A1B3E                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A1B3E                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A1B3E                            	smpsVcAlgorithm     $06
000A1B3E                            	smpsVcFeedback      $06
000A1B3E                            	smpsVcUnusedBits    $00
000A1B3E                            	smpsVcDetune        $00, $00, $00, $00
000A1B3E                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A1B3E                            	smpsVcRateScale     $00, $00, $00, $00
000A1B3E                            	smpsVcAttackRate    $1F, $00, $18, $16
000A1B3E                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B3E                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A1B3E                            	smpsVcDecayRate2    $00, $00, $12, $00
000A1B3E                            	smpsVcDecayLevel    $04, $04, $02, $00
000A1B3E                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A1B3E 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A1B57                            
000A1B57                            ;	Voice $04
000A1B57                            ;	$07
000A1B57                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A1B57                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A1B57                            	smpsVcAlgorithm     $07
000A1B57                            	smpsVcFeedback      $00
000A1B57                            	smpsVcUnusedBits    $00
000A1B57                            	smpsVcDetune        $07, $06, $05, $00
000A1B57                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A1B57                            	smpsVcRateScale     $00, $01, $01, $01
000A1B57                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A1B57                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B57                            	smpsVcDecayRate1    $17, $17, $17, $17
000A1B57                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1B57                            	smpsVcDecayLevel    $02, $02, $02, $02
000A1B57                            	smpsVcReleaseRate   $06, $06, $06, $06
000A1B57 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A1B70                            
000A1B70                            ;	Voice $05
000A1B70                            ;	$3C
000A1B70                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A1B70                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A1B70                            	smpsVcAlgorithm     $04
000A1B70                            	smpsVcFeedback      $07
000A1B70                            	smpsVcUnusedBits    $00
000A1B70                            	smpsVcDetune        $06, $06, $02, $02
000A1B70                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A1B70                            	smpsVcRateScale     $00, $00, $00, $00
000A1B70                            	smpsVcAttackRate    $0E, $14, $10, $13
000A1B70                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B70                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A1B70                            	smpsVcDecayRate2    $04, $04, $04, $04
000A1B70                            	smpsVcDecayLevel    $02, $01, $01, $01
000A1B70                            	smpsVcReleaseRate   $07, $07, $07, $07
000A1B70 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A1B89                            
000A1B89                            
000A1B8A 00                         		even
000A1B8A                            ; ---------------------------------------------------------------------------
000A1B8A                            ; Sound	effect pointers
000A1B8A                            ; ---------------------------------------------------------------------------
000A1B8A 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A1B96 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A1BA2 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A1BAE 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A1BBA 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A1BC6 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A1BD2 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A1BDE 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A1BEA 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A1BF6 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A1C02 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A1C0E 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A1C1A 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A1C26 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A1C32 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A1C3E 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A1C4A 0000 0000                  SoundD0Index:	dc.l SoundD0
000A1C4E                            SoundA0:	include	sound\jump.asm
000A1C4E                            jump_Header:
000A1C4E =00000001                  smpsHeaderStartSong = 1
000A1C4E 0000                       	smpsHeaderVoice     jump_Voices
000A1C50 01                         	smpsHeaderTempoSFX  $01
000A1C51 01                         	smpsHeaderChanSFX   $01
000A1C52                            
000A1C5E                            
000A1C5E                            ; FM4 Data
000A1C5E                            jump_FM4:
000A1C60 E000                       	smpsPan             panNone, $00
000A1C62 E607                       	smpsAlterVol        $07
000A1C64 E0C0                       	smpsPan             panCenter, $00
000A1C66 9903 B1                    	dc.b	nC2, $03, nC4
000A1C69 E607                       	smpsAlterVol        $07
000A1C6B E040                       	smpsPan             panRight, $00
000A1C6D 99B1                       	dc.b	nC2, nC4
000A1C6F E60A                       	smpsAlterVol        $0A
000A1C71 E080                       	smpsPan             panLeft, $00
000A1C73 99B1                       	dc.b	nC2, nC4
000A1C75 E603                       	smpsAlterVol        $03
000A1C77 E0C0                       	smpsPan             panCenter, $00
000A1C79 99B1                       	dc.b	nC2, nC4
000A1C7B E000                       	smpsPan             panNone, $00
000A1C7D 803D                       	dc.b	nRst, $3D
000A1C7F F2                         	smpsStop
000A1C80                            
000A1C80                            ; PSG3 Data
000A1C80                            jump_PSG3:
000A1C80 F3E7                       	smpsPSGform         $E7
000A1C82 8056                       	dc.b	nRst, $56
000A1C84 F2                         	smpsStop
000A1C85                            
000A1C85                            jump_Voices:
000A1C85                            ;	Voice $00
000A1C85                            ;	$3C
000A1C85                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A1C85                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A1C85                            	smpsVcAlgorithm     $04
000A1C85                            	smpsVcFeedback      $07
000A1C85                            	smpsVcUnusedBits    $00
000A1C85                            	smpsVcDetune        $00, $00, $00, $00
000A1C85                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A1C85                            	smpsVcRateScale     $00, $00, $00, $00
000A1C85                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A1C85                            	smpsVcAmpMod        $00, $00, $00, $00
000A1C85                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A1C85                            	smpsVcDecayRate2    $11, $00, $11, $00
000A1C85                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A1C85                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1C85 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A1C9E                            
000A1C9E                            
000A1C9E                            		even
000A1C9E                            SoundA1:	incbin	sound\soundA1.bin
000A1CC8                            		even
000A1CC8                            SoundA2:	incbin	sound\soundA2.bin
000A1CE8                            		even
000A1CE8                            SoundA3:	incbin	sound\soundA3.bin
000A1D1A                            		even
000A1D1A                            SoundA4:	incbin	sound\soundA4.bin
000A1D50                            		even
000A1D50                            SoundA5:	include	sound\fart.asm
000A1D50                            Fart_Header:
000A1D50 =00000001                  smpsHeaderStartSong = 1
000A1D50 0000                       	smpsHeaderVoice     Fart_Voices
000A1D52 01                         	smpsHeaderTempoSFX  $01
000A1D53 04                         	smpsHeaderChanSFX   $04
000A1D54                            
000A1D6C                            
000A1D6C                            Fart_FM3:
000A1D6E E607                       	smpsAlterVol        $07
000A1D70 E0C0                       	smpsPan             panCenter, $00
000A1D72 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A1D77 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A1D7A E1FE                       	smpsAlterNote       $FE
000A1D7C A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A1D7F E100                       	smpsAlterNote       $00
000A1D81 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A1D86 F2                         	smpsStop
000A1D87                            
000A1D87                            ; FM4 Data
000A1D87                            Fart_FM4:
000A1D89 E0C0                       	smpsPan             panCenter, $00
000A1D8B 8006                       	dc.b	nRst, $06
000A1D8F E616                       	smpsAlterVol        $16
000A1D91 E080                       	smpsPan             panLeft, $00
000A1D93 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A1D98 A212                       	dc.b	nA2, $12
000A1D9A E60A                       	smpsAlterVol        $0A
000A1D9C E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A1D9F E603                       	smpsAlterVol        $03
000A1DA1 E7A2                       	dc.b	smpsNoAttack, nA2
000A1DA3 E603                       	smpsAlterVol        $03
000A1DA5 E7A2                       	dc.b	smpsNoAttack, nA2
000A1DA7 E604                       	smpsAlterVol        $04
000A1DA9 E7A2                       	dc.b	smpsNoAttack, nA2
000A1DAB E606                       	smpsAlterVol        $06
000A1DAD E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A1DB0 E610                       	smpsAlterVol        $10
000A1DB2 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A1DB5 E610                       	smpsAlterVol        $10
000A1DB7 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A1DBC F2                         	smpsStop
000A1DBD                            
000A1DBD                            ; FM5 Data
000A1DBD                            Fart_FM5:
000A1DBF E0C0                       	smpsPan             panCenter, $00
000A1DC1 8009                       	dc.b	nRst, $09
000A1DC5 E616                       	smpsAlterVol        $16
000A1DC7 E040                       	smpsPan             panRight, $00
000A1DC9 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A1DCE A215                       	dc.b	nA2, $15
000A1DD0 E60A                       	smpsAlterVol        $0A
000A1DD2 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A1DD5 E603                       	smpsAlterVol        $03
000A1DD7 E7A2                       	dc.b	smpsNoAttack, nA2
000A1DD9 E603                       	smpsAlterVol        $03
000A1DDB E7A2                       	dc.b	smpsNoAttack, nA2
000A1DDD E604                       	smpsAlterVol        $04
000A1DDF E7A2                       	dc.b	smpsNoAttack, nA2
000A1DE1 E606                       	smpsAlterVol        $06
000A1DE3 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A1DE6 E610                       	smpsAlterVol        $10
000A1DE8 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A1DEB E610                       	smpsAlterVol        $10
000A1DED E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A1DF2 F2                         	smpsStop
000A1DF3                            
000A1DF3                            ; PSG3 Data
000A1DF3                            Fart_PSG3:
000A1DF3 F2                         	smpsStop
000A1DF4                            
000A1DF4                            ; FM Voices
000A1DF4                            Fart_Voices:
000A1DF4                            ;	Voice $00
000A1DF4                            ;	$39
000A1DF4                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A1DF4                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A1DF4                            	smpsVcAlgorithm     $01
000A1DF4                            	smpsVcFeedback      $07
000A1DF4                            	smpsVcUnusedBits    $00
000A1DF4                            	smpsVcDetune        $00, $07, $03, $07
000A1DF4                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A1DF4                            	smpsVcRateScale     $00, $03, $03, $03
000A1DF4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A1DF4                            	smpsVcAmpMod        $00, $00, $00, $00
000A1DF4                            	smpsVcDecayRate1    $00, $00, $00, $04
000A1DF4                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A1DF4                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A1DF4                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A1DF4 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A1E0D                            
000A1E0D                            ;	Voice $01
000A1E0D                            ;	$00
000A1E0D                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A1E0D                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A1E0D                            	smpsVcAlgorithm     $00
000A1E0D                            	smpsVcFeedback      $00
000A1E0D                            	smpsVcUnusedBits    $00
000A1E0D                            	smpsVcDetune        $00, $00, $00, $00
000A1E0D                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A1E0D                            	smpsVcRateScale     $00, $00, $00, $00
000A1E0D                            	smpsVcAttackRate    $00, $00, $00, $00
000A1E0D                            	smpsVcAmpMod        $00, $00, $00, $00
000A1E0D                            	smpsVcDecayRate1    $00, $00, $00, $00
000A1E0D                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1E0D                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A1E0D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1E0D 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A1E0D 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A1E26                            		even
000A1E26                            SoundA6:	incbin	sound\soundA6.bin
000A1E56                            		even
000A1E56                            SoundA7:	incbin	sound\soundA7.bin
000A1E86                            		even
000A1E86                            SoundA8:	incbin	sound\soundA8.bin
000A1EBA                            		even
000A1EBA                            SoundA9:	incbin	sound\soundA9.bin
000A1ECC                            		even
000A1ECC                            SoundAA:	incbin	sound\soundAA.bin
000A1F0E                            		even
000A1F0E                            SoundAB:	incbin	sound\soundAB.bin
000A1F2E                            		even
000A1F2E                            SoundAC:	incbin	sound\soundAC.bin
000A1F62                            		even
000A1F62                            SoundAD:	incbin	sound\soundAD.bin
000A1F98                            		even
000A1F98                            SoundAE:	incbin	sound\soundAE.bin
000A1FE2                            		even
000A1FE2                            SoundAF:	incbin	sound\soundAF.bin
000A2010                            		even
000A2010                            SoundB0:	incbin	sound\soundB0.bin
000A2042                            		even
000A2042                            SoundB1:	incbin	sound\soundB1.bin
000A206E                            		even
000A206E                            SoundB2:	incbin	sound\soundB2.bin
000A20BE                            		even
000A20BE                            SoundB3:	incbin	sound\soundB3.bin
000A2108                            		even
000A2108                            SoundB4:	include	sound\soundB4.asm
000A2108                            SndB4_Bumper_Header:
000A2108 =00000001                  smpsHeaderStartSong = 1
000A2108 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A210A 01                         	smpsHeaderTempoSFX  $01
000A210B 03                         	smpsHeaderChanSFX   $03
000A210C                            
000A211E                            
000A211E                            ; FM5 Data
000A211E                            SndB4_Bumper_FM5:
000A2120 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A2123                            
000A2123                            ; FM4 Data
000A2123                            SndB4_Bumper_FM4:
000A2123 F2                         	smpsStop
000A2124                            
000A2124                            SndB4_Bumper_Jump00:
000A2124 A020                       	dc.b	nG2, $20
000A2126 F2                         	smpsStop
000A2127                            
000A2127                            ; FM3 Data
000A2127                            SndB4_Bumper_FM3:
000A2127 F2                         	smpsStop
000A2128                            
000A2128                            SndB4_Bumper_Voices:
000A2128                            ;	Voice $00
000A2128                            ;	$32
000A2128                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A2128                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A2128                            	smpsVcAlgorithm     $02
000A2128                            	smpsVcFeedback      $06
000A2128                            	smpsVcUnusedBits    $00
000A2128                            	smpsVcDetune        $07, $07, $02, $00
000A2128                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A2128                            	smpsVcRateScale     $00, $00, $00, $00
000A2128                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2128                            	smpsVcAmpMod        $00, $00, $00, $00
000A2128                            	smpsVcDecayRate1    $08, $00, $00, $09
000A2128                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A2128                            	smpsVcDecayLevel    $00, $00, $00, $00
000A2128                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A2128 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A2128 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A2142 00                         		even
000A2142                            SoundB5:	incbin	sound\soundB5.bin
000A2160 00                         		even
000A2160                            SoundB6:	incbin	sound\soundB6.bin
000A217E                            		even
000A217E                            SoundB7:	incbin	sound\soundB7.bin
000A21BA                            		even
000A21BA                            SoundB8:	incbin	sound\soundB8.bin
000A21D8                            		even
000A21D8                            SoundB9:	incbin	sound\soundB9.bin
000A223C                            		even
000A223C                            SoundBA:	incbin	sound\soundBA.bin
000A2264                            		even
000A2264                            SoundBB:	incbin	sound\soundBB.bin
000A2290                            		even
000A2290                            SoundBC:	incbin	sound\soundBC.bin
000A22D2                            		even
000A22D2                            SoundBD:	incbin	sound\soundBD.bin
000A2326                            		even
000A2326                            SoundBE:	incbin	sound\soundBE.bin
000A2360                            		even
000A2360                            SoundBF:	incbin	sound\soundBF.bin
000A23D2                            		even
000A23D2                            SoundC0:	incbin	sound\soundC0.bin
000A2400                            		even
000A2400                            SoundC1:	incbin	sound\soundC1.bin
000A245A                            		even
000A245A                            SoundC2:	incbin	sound\soundC2.bin
000A2484                            		even
000A2484                            SoundC3:	incbin	sound\soundC3.bin
000A24FE                            		even
000A24FE                            SoundC4:	incbin	sound\soundC4.bin
000A25FC                            		even
000A25FC                            SoundC5:	incbin	sound\soundC5.bin
000A2664                            		even
000A2664                            SoundC6:	incbin	sound\soundC6.bin
000A26A6                            		even
000A26A6                            SoundC7:	incbin	sound\soundC7.bin
000A26D4                            		even
000A26D4                            SoundC8:	incbin	sound\soundC8.bin
000A26E6                            		even
000A26E6                            SoundC9:	incbin	sound\soundC9.bin
000A2714                            		even
000A2714                            SoundCA:	incbin	sound\soundCA.bin
000A2742                            		even
000A2742                            SoundCB:	incbin	sound\soundCB.bin
000A278E                            		even
000A278E                            SoundCC:	incbin	sound\C9.ssf
000A27BC                            		even
000A27BC                            SoundCD:	incbin	sound\soundCD.bin
000A27E8                            		even
000A27E8                            SoundCE:	incbin	sound\soundCE.bin
000A2806 00                         		even
000A2806                            SoundCF:	incbin	sound\soundCF.bin
000A283E                            		even
000A283E                            SoundD0:	incbin	sound\soundD0.bin
000A2878                            		even
000A2878                            SegaPCM:	incbin	sound\segapcm.bin
000BC9CE                            SegaPCM_end:	even
000BC9CE                            
000BC9CE                            IdiotPCM:	incbin	sound\youare.bin
000C6AA0 00                         IdiotPCM_end:	even
000C6AA0                            
000C6AA0                            Minecraft:	include	minecraft\code\main.asm
000C6AA0                            ; Minecraft: Very Legacy Console Edition
000C6AA0                            ; Main file
000C6AA0                            
000C6AA0                            	include	minecraft\code\variables.asm
000C6AA0                            ; Minecraft: Very Legacy Console Edition
000C6AA0                            ; Variable Definitions
000C6AA0                            
000C6AA0 =00000040                  MAP_HEIGHT	equ	64
000C6AA0 =00000100                  MAP_WIDTH	equ	256
000C6AA0                            
000C6AA0                            		rsset	$FF0000
000C6AA0 =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000C6AA0 =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000C6AA0                            
000C6AA0                            		rsset	$FFFF8000
000C6AA0 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000C6AA0                            
000C6AA0 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000C6AA0 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000C6AA0 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000C6AA0 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C6AA0 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C6AA0                            
000C6AA0                            MC_Init:
000C6AA0 007C 0700                  		ori	#$700,sr		; disables CPU interrupts
000C6AA4 4DF9 00C0 0004             		lea	($C00004).l,a6	;	; load the address of the VDP control port into a6
000C6AAA                            
000C6AAA 3CBC 8134                  		move.w	#$8134,(a6)		; disable display
000C6AAE 6100 0000                  		bsr.w	MC_ClearScreen		; clear VRAM, CRAM, and VSRAM
000C6AB2 6100 0000                  		bsr.w	MC_LoadPalette		; load in the palette
000C6AB6 3CBC 8174                  		move.w	#$8174,(a6)		; enable display
000C6ABA                            
000C6ABA                            
000C6ABA                            
000C6ABA 6000 FFFE                  		bra.w	*			; spin infinitely
000C6ABE                            
000C6ABE                            ; ===========================================================================
000C6ABE                            ; ---------------------------------------------------------------------------
000C6ABE                            ; Clear The Screen
000C6ABE                            ; ---------------------------------------------------------------------------
000C6ABE                            MC_ClearScreen:
000C6ABE 3CBC 8F01                  		move.w	#$8F01,(a6)		; set auto-incremement size to byte
000C6AC2                            
000C6AC2 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)		; clear the VRAM
000C6AC8 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C6ACC 2CBC 4000 0080             		move.l	#$40000080,(a6)		; ^
000C6AD2 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C6AD8                            
000C6AD8 44D6                       .waitVRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C6ADA 69FC                       		bvs.s	.waitVRAMClr		; if so, loop until DMA is complete
000C6ADC                            
000C6ADC 2CBC 9400 937F             		move.l	#$9400937F,(a6)		; clear the CRAM
000C6AE2 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C6AE6 2CBC C000 0080             		move.l	#$C0000080,(a6)		; ^
000C6AEC 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C6AF2                            
000C6AF2 44D6                       .waitCRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C6AF4 69FC                       		bvs.s	.waitCRAMClr		; if so, loop until DMA is complete
000C6AF6                            
000C6AF6 2CBC 9400 935F             		move.l	#$9400935F,(a6)		; clear the VSRAM
000C6AFC 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C6B00 2CBC 4000 0090             		move.l	#$40000090,(a6)		; ^
000C6B06 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C6B0C                            
000C6B0C 44D6                       .waitVSRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C6B0E 69FC                       		bvs.s	.waitVSRAMClr		; if so, loop until DMA is complete
000C6B10                            
000C6B10 3CBC 8F02                  		move.w	#$8F02,(a6)		; set auto-incremement size to word
000C6B14 4E75                       		rts				; return
000C6B16                            ; ---------------------------------------------------------------------------
000C6B16                            
000C6B16                            ; ===========================================================================
000C6B16                            ; ---------------------------------------------------------------------------
000C6B16                            ; Load The Palette
000C6B16                            ; ---------------------------------------------------------------------------
000C6B16                            MC_LoadPalette:
000C6B16 44D6                       		move.w	(a6),ccr		; is v-blank active?
000C6B18 6AFC                       		bpl.s	MC_LoadPalette		; if not, wait for it to start
000C6B1A                            
000C6B1A                            .updatePalette:
000C6B1A 2CBC 9400 9340             		move.l	#$94009340,(a6)		; set the DMA transfer size (64 colors)
000C6B20                            		
000C6B20 4BFA 0000                  		lea	MC_Palette(pc),a5	; load the base address of the palette data (pc relative)
000C6B24 200D                       		move.l	a5,d0			; move the address to a data register so we can modify it
000C6B26 E288                       		lsr.l	#1,d0			; divide by two
000C6B28                            
000C6B28 323C 9500                  		move.w	#$9500,d1		; set the low byte of the transfer source address
000C6B2C 1200                       		move.b	d0,d1			; ^
000C6B2E 3C81                       		move.w	d1,(a6)			; ^
000C6B30                            
000C6B30 E088                       		lsr.l	#8,d0			; set the middle byte of the transfer source address
000C6B32 323C 9600                  		move.w	#$9600,d1		; ^
000C6B36 1200                       		move.b	d0,d1			; ^
000C6B38 3C81                       		move.w	d1,(a6)			; ^
000C6B3A                            
000C6B3A E088                       		lsr.l	#8,d0			; set the high byte of the transfer source address
000C6B3C 323C 9700                  		move.w	#$9700,d1		; ^
000C6B40 1200                       		move.b	d0,d1			; ^
000C6B42 3C81                       		move.w	d1,(a6)			; ^
000C6B44                            
000C6B44 2CBC C000 0080             		move.l	#$C0000080,(a6)		; set the destination palette index and begin the transfer
000C6B4A                            
000C6B4A                            .waitForScan:
000C6B4A                            	;	move.w	(a6),ccr		; is v-blank still active?
000C6B4A                            	;	bmi.s	.waitForScan		; if so, wait for active scan before returning
000C6B4A 4E75                       		rts				; return
000C6B4C                            ; ---------------------------------------------------------------------------
000C6B4C                            
000C6B4C                            MC_Palette:
000C6B4C 0E86 08AE 068E 046C 0246+  	dc.w	$E86, $8AE, $68E, $46C, $246, $024, $CC0, $AA0, $C46, $824, $EEE, $444, $222, $000, $000, $000
000C6B6C 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4EE, $6AE, $48C, $26A, $048, $026, $4E6, $2C4, $080
000C6B8C 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C6BAC 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C6BAC 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C6BCC                            ; end of 'ROM'
000C6BCC                            EndOfRom:
000C6BCC                            
000C6BCC                            
